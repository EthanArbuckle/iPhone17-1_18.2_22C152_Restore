uint64_t DefaultLabels.rawValue.getter(char a1)
{
  return *(void *)&aHome_1[8 * a1];
}

uint64_t OUTLINED_FUNCTION_0_23(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_1_29(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_2_30()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_3_23(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_26()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
}

uint64_t OUTLINED_FUNCTION_8_22(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_17()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_21()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_11_17()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_12_18()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_13_19(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_14_16(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_15_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return v0;
}

uint64_t ContactsFlowStrategy.__allocating_init(referenceResolver:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_14_17();
  outlined init with take of DeviceState(v0, v1 + 16);
  return v1;
}

uint64_t ContactsFlowStrategy.init(referenceResolver:)(long long *a1)
{
  outlined init with take of DeviceState(a1, v1 + 16);
  return v1;
}

uint64_t ContactsFlowStrategy.actionForInput(input:)@<X0>(uint64_t a1@<X8>)
{
  return static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void *)(*(void *)v1 + 80), a1);
}

uint64_t ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  OUTLINED_FUNCTION_4();
  v1[12] = v2;
  v1[13] = v0;
  v1[11] = v3;
  OUTLINED_FUNCTION_23_2();
  v1[14] = v4;
  v1[15] = type metadata accessor for Signpost.OpenSignpost();
  v1[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 152) = v6;
  uint64_t v7 = v1 + v6;
  *(void *)uint64_t v7 = "MakeIntentFromParse";
  *(void *)(v7 + 8) = 19;
  *(unsigned char *)(v7 + 16) = 2;
  outlined init with copy of DeviceState(v3 + 16, v0 + 16);
  if (v4) {
    v8 = *(void *)(*(void *)(v0 + 112) + 96);
  }
  else {
    v8 = 0;
  }
  v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v9;
  *v9 = v0;
  v9[1] = ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:);
  v10 = *(void *)(v0 + 96);
  return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v0 + 16, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = v0 + 16;
  *(void *)(v0 + 144) = v2;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return MEMORY[0x270FA2498](ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27[2];
  void *v28;
  uint64_t v29;

  v28 = v0;
  uint64_t v1 = (void *)v0[18];
  if (v1)
  {
    uint64_t v2 = swift_dynamicCastUnknownClass();
    if (v2)
    {
      uint64_t v3 = v2;
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
      v5 = v1;
      uint64_t v6 = Logger.logObject.getter();
      uint64_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = swift_slowAlloc();
        v26 = (void *)swift_slowAlloc();
        v27[0] = OUTLINED_FUNCTION_35();
        *(_DWORD *)v8 = 136315394;
        v9 = _typeName(_:qualified:)();
        v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2112;
        v0[10] = v3;
        v11 = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v26 = v3;

        _os_log_impl(&dword_22D49E000, v6, v7, "#ContactsFlowStrategy<%s> makeIntentFromParse SiriKit Intent: %@", (uint8_t *)v8, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_13_20();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_13_20();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      v24 = v0[16];
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v24);
      swift_task_dealloc();
      v25 = (uint64_t (*)(uint64_t))v0[1];
      return v25(v3);
    }
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_DWORD *)v15 = 136315394;
    v27[0] = v16;
    v17 = _typeName(_:qualified:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    v19 = _typeName(_:qualified:)();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v13, v14, "#ContactsFlowStrategy<%s> makeIntentFromParse: failed to convert parse to expected intent type %s, throwing", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  v21 = v0[16];
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v21);
  swift_task_dealloc();
  v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[7] = v1;
  v0[8] = v2;
  OUTLINED_FUNCTION_23_2();
  v0[9] = v3;
  uint64_t v4 = type metadata accessor for SiriKitIntentHandler();
  v0[10] = v4;
  v0[11] = *(void *)(v4 - 8);
  v0[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:), 0, 0);
}

{
  void *v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  void *v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  uint64_t *v22;
  void *v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;

  v46 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
  uint64_t v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)MEMORY[0x263F8EE58];
  if (v6)
  {
    v8 = (void *)MEMORY[0x263F8EE58];
    uint64_t v1 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v2 = OUTLINED_FUNCTION_35();
    v45 = v2;
    *(_DWORD *)uint64_t v1 = 136315138;
    v9 = _typeName(_:qualified:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v45);
    uint64_t v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v4, v5, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior", v1, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  v11 = (_DWORD *)v0[8];
  type metadata accessor for GetContactIntent();
  if (swift_dynamicCastClass())
  {
    v12 = (void *)Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_11_2(v13))
    {
      uint64_t v2 = 12;
      v11 = (_DWORD *)OUTLINED_FUNCTION_24();
      v45 = OUTLINED_FUNCTION_35();
      v14 = OUTLINED_FUNCTION_9_18(4.8149e-34);
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66_0(&dword_22D49E000, v16, v17, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: GetContactIntentHandler embeddedIntentHandler");
      OUTLINED_FUNCTION_13_20();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for SiriKitIntentExecutionBehavior();
    v18 = one-time initialization token for current;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_8_23();
    v19 = static ContactService.current;
    type metadata accessor for ContactResolver();
    swift_allocObject();
    swift_retain();
    v20 = ContactResolver.init()();
    v21 = objc_allocWithZone((Class)type metadata accessor for GetContactIntentHandler());
    v22 = &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>;
LABEL_23:
    specialized BaseIntentHandler.init(contactService:contactResolver:)(v19, v20, v21, v22);
    v37 = v7;
    SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
    v38 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
    (*(void (**)(_DWORD *, uint8_t *))(v2 + 8))(v11, v1);
    goto LABEL_24;
  }
  type metadata accessor for GetContactAttributeIntent();
  if (swift_dynamicCastClass())
  {
    v23 = (void *)Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_11_2(v24))
    {
      uint64_t v2 = 12;
      v11 = (_DWORD *)OUTLINED_FUNCTION_24();
      v45 = OUTLINED_FUNCTION_35();
      v25 = OUTLINED_FUNCTION_9_18(4.8149e-34);
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66_0(&dword_22D49E000, v27, v28, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: GetContactAttributeIntentHandler embeddedIntentHandler");
      OUTLINED_FUNCTION_13_20();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for SiriKitIntentExecutionBehavior();
    v29 = one-time initialization token for current;
    swift_retain();
    if (v29 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_8_23();
    v19 = static ContactService.current;
    type metadata accessor for ContactResolver();
    swift_allocObject();
    swift_retain();
    v20 = ContactResolver.init()();
    v21 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
    v22 = &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>;
    goto LABEL_23;
  }
  type metadata accessor for ModifyContactAttributeIntent();
  v11 = (_DWORD *)swift_dynamicCastClass();
  v30 = Logger.logObject.getter();
  if (v11)
  {
    v31 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_11_2(v31))
    {
      v11 = (_DWORD *)OUTLINED_FUNCTION_24();
      v45 = OUTLINED_FUNCTION_35();
      *v11 = 136315138;
      uint64_t v2 = (uint64_t)(v11 + 3);
      v32 = _typeName(_:qualified:)();
      uint64_t v7 = (void *)v33;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66_0(&dword_22D49E000, v34, v35, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: ModifyContactAttributeIntentHandler embeddedIntentHandler");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for SiriKitIntentExecutionBehavior();
    v36 = one-time initialization token for current;
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_8_23();
    v19 = static ContactService.current;
    type metadata accessor for ContactResolver();
    swift_allocObject();
    swift_retain();
    v20 = ContactResolver.init()();
    v21 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentHandler());
    v22 = &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>;
    goto LABEL_23;
  }
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, (os_log_type_t)v41))
  {
    v42 = (uint8_t *)OUTLINED_FUNCTION_24();
    v45 = OUTLINED_FUNCTION_35();
    *(_DWORD *)v42 = 136315138;
    v43 = _typeName(_:qualified:)();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v30, (os_log_type_t)v41, "#ContactsFlowStrategy<%s> ☠️ encountered an intent type we do not support...this should never happen but we cannot throw an error here ☠️", v42, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v38 = static SiriKitIntentExecutionBehavior.standard()();
LABEL_24:
  swift_task_dealloc();
  v39 = (uint64_t (*)(uint64_t))v0[1];
  return v39(v38);
}

uint64_t ContactsFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return v0;
}

uint64_t ContactsFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance ContactsFlowStrategy<A, B>@<X0>(uint64_t a1@<X8>)
{
  return ContactsFlowStrategy.actionForInput(input:)(a1);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance ContactsFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContactsFlowStrategy();
  return MEMORY[0x230F82C40](a1, v5, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance ContactsFlowStrategy<A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return MEMORY[0x270F67C18](a1, a2, a3, a4);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return MEMORY[0x270F66498](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return MEMORY[0x270F66490](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return MEMORY[0x270F66488](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v13;
  long long v14 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v6 + 32) = v14;
  uint64_t v15 = type metadata accessor for ContactsFlowStrategy();
  *uint64_t v13 = v6;
  v13[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return MEMORY[0x270F66480](a1, a2, a3, a4, v15, a6);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v13;
  long long v14 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v6 + 32) = v14;
  uint64_t v15 = type metadata accessor for ContactsFlowStrategy();
  *uint64_t v13 = v6;
  v13[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return MEMORY[0x270F66790](a1, a2, a3, a4, v15, a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ContactsFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)();
}

uint64_t GetContactFlowStrategy.init(referenceResolver:)(long long *a1)
{
  outlined init with take of DeviceState(a1, v1 + 16);
  return v1;
}

uint64_t GetContactFlowStrategy.__allocating_init(referenceResolver:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_14_17();
  outlined init with take of DeviceState(v0, v1 + 16);
  return v1;
}

uint64_t GetContactFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>);
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t *a4)
{
  v18[3] = type metadata accessor for ContactService();
  v18[4] = &protocol witness table for ContactService;
  v18[0] = a1;
  v17[3] = type metadata accessor for ContactResolver();
  v17[4] = &protocol witness table for ContactResolver;
  v17[0] = a2;
  *(void *)&a3[direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard] = 1;
  outlined init with copy of DeviceState((uint64_t)v18, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactService]);
  outlined init with copy of DeviceState((uint64_t)v17, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactResolver]);
  a3[direct field offset for BaseIntentHandler.passedPrereqs] = 0;
  v16.receiver = a3;
  v16.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(a4);
  id v8 = objc_msgSendSuper2(&v16, sel_init);
  uint64_t v9 = one-time initialization token for siriContacts;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
  long long v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    long long v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v14 = 0;
    _os_log_impl(&dword_22D49E000, v12, v13, "Constructed ContactsIntentHandler.", v14, 2u);
    OUTLINED_FUNCTION_2();
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  return v10;
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in ContactsFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in ContactsFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in ContactsFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for ContactsFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ContactsFlowStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for ContactsFlowStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactsFlowStrategy);
}

uint64_t dispatch thunk of ContactsFlowStrategy.__allocating_init(referenceResolver:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ContactsFlowStrategy.actionForInput(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  OUTLINED_FUNCTION_11_18();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:);
  uint64_t v2 = OUTLINED_FUNCTION_12_19();
  return v3(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_3();
  NSObject *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t dispatch thunk of ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  OUTLINED_FUNCTION_11_18();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow;
  uint64_t v2 = OUTLINED_FUNCTION_12_19();
  return v3(v2);
}

uint64_t type metadata accessor for GetContactFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactFlowStrategy);
}

uint64_t type metadata accessor for GetContactAttributeFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactAttributeFlowStrategy);
}

uint64_t type metadata accessor for ModifyContactAttributeFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ModifyContactAttributeFlowStrategy);
}

uint64_t type metadata completion function for GetContactFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t OUTLINED_FUNCTION_9_18(float a1)
{
  *uint64_t v1 = a1;
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_20()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_17()
{
  return swift_allocObject();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v4);
    specialized Dictionary._Variant.setValue(_:forKey:)(v4, a2);
    return outlined destroy of AnyHashable(a2);
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(v4);
    outlined destroy of AnyHashable(a2);
    return outlined destroy of Any?((uint64_t)v4);
  }
}

unint64_t ContactsDirectInvocations.Identifiers.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000026;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000025;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 4:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000034;
      break;
    case 6:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 7:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

id static ContactsDirectInvocations.confirm()()
{
  return OUTLINED_FUNCTION_1_30(31, 0x800000022D5A6590);
}

id static ContactsDirectInvocations.deny()()
{
  return OUTLINED_FUNCTION_1_30(28, 0x800000022D5A65B0);
}

id static ContactsDirectInvocations.confirm()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  id v4 = SKIDirectInvocationPayload.__allocating_init(identifier:)(a1, a2);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v5, v4);
  uint64_t v6 = self;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  uint64_t v7 = (void *)DeviceState.asInvocationContext.getter();
  id v8 = objc_msgSend(v6, sel_runSiriKitExecutorCommandWithContext_payload_, v7, v4);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  id v9 = objc_msgSend(v6, sel_wrapCommandInStartLocalRequest_, v8);

  return v9;
}

unint64_t ContactsDirectInvocations.Keys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x49746361746E6F63;
      break;
    case 2:
      unint64_t result = 0x7865646E69;
      break;
    case 3:
      unint64_t result = 0x704F796669646F6DLL;
      break;
    case 4:
      unint64_t result = 0x6D7269666E6F63;
      break;
    case 5:
      unint64_t result = 0x7463656A6572;
      break;
    case 6:
      unint64_t result = 0x6C65636E6163;
      break;
    case 7:
      unint64_t result = 0x6C646E7542707061;
      break;
    case 8:
      unint64_t result = 0x4E746361746E6F63;
      break;
    case 9:
      return result;
    case 10:
      unint64_t result = 0x6449707061;
      break;
    case 11:
      unint64_t result = 0x7954746E65746E69;
      break;
    case 12:
      unint64_t result = 0x6144746E65746E69;
      break;
    default:
      unint64_t result = 0x656D616E6B63696ELL;
      break;
  }
  return result;
}

id static ContactsDirectInvocations.startCall(fullName:phoneHandle:contactIdentifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  id v13 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD000000000000034, 0x800000022D5A6550);
  uint64_t v42 = MEMORY[0x263F8EE80];
  *((void *)&v41 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v40 = 0xD000000000000015;
  *((void *)&v40 + 1) = 0x800000022D5A8FD0;
  specialized Dictionary.subscript.setter((uint64_t)&v40, 0x6449707061, 0xE500000000000000);
  long long v14 = (void *)ContactAttribute.getINPersonHandleLabel.getter();
  uint64_t v15 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a3);
  uint64_t v17 = v16;
  objc_allocWithZone(MEMORY[0x263F0FD20]);
  id v39 = v14;
  id v18 = @nonobjc INPersonHandle.init(value:type:label:)(v15, v17, 2, v14);
  swift_bridgeObjectRetain();
  PersonNameComponents.init(_:)();
  uint64_t v19 = type metadata accessor for PersonNameComponents();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v19);
  id v20 = objc_allocWithZone(MEMORY[0x263F0FD18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v18, (uint64_t)v12, a1, a2, 0, a4, a5, 0, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_22D59FB50;
  *(void *)(v22 + 32) = v21;
  *(void *)&long long v40 = v22;
  specialized Array._endMutation()();
  uint64_t v23 = v40;
  id v24 = objc_allocWithZone(MEMORY[0x263F0FFC0]);
  id v25 = v21;
  id v26 = @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(0, 0, 0, 1, v23, 0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INStartCallIntent);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v28 = outlined bridged method (pb) of @objc static INIntent.typeName()(ObjCClassFromMetadata);
  if (v29)
  {
    *((void *)&v41 + 1) = MEMORY[0x263F8D310];
    *(void *)&long long v40 = v28;
    *((void *)&v40 + 1) = v29;
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v40, 0x7954746E65746E69, 0xEE00656D614E6570);
  uint64_t v30 = outlined bridged method (ob) of @objc PBCodable.data.getter(objc_msgSend(v26, sel_backingStore));
  if (v31 >> 60 == 15)
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  else
  {
    *((void *)&v41 + 1) = MEMORY[0x263F06F78];
    *(void *)&long long v40 = v30;
    *((void *)&v40 + 1) = v31;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v40, 0x6144746E65746E69, 0xEA00000000006174);
  uint64_t v32 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v42);
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v32, v13);
  v33 = self;
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F70028]), sel_init);
  id v35 = objc_msgSend(v33, sel_runSiriKitExecutorCommandWithContext_payload_, v34, v13);

  id v36 = v35;
  id v37 = objc_msgSend(v33, sel_wrapCommandInStartLocalRequest_, v36);

  return v37;
}

id static ContactsDirectInvocations.sendMessage(contactName:contactPhoneNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  id v8 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD00000000000003CLL, 0x800000022D5A6510);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v9, v8);
  uint64_t v45 = outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v8);
  uint64_t v10 = MEMORY[0x263F8D310];
  if (!v45)
  {
    OUTLINED_FUNCTION_3_24();
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  uint64_t v11 = OUTLINED_FUNCTION_5_27();
  OUTLINED_FUNCTION_4_25(v11, v12, v13, v14, v15, v16, v17, v18, 0xD000000000000013, 0x800000022D5A8FF0, v43, v10, v44);
  v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_31();

  if (a2)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    if (outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v8))
    {
      OUTLINED_FUNCTION_0_24();
      uint64_t v20 = OUTLINED_FUNCTION_5_27();
      OUTLINED_FUNCTION_4_25(v20, v21, v22, v23, v24, v25, v26, v27, a1, a2, v43, v10, v44);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_31();
    }
    else
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_24();
    }
  }
LABEL_9:
  if (a4)
  {
    swift_bridgeObjectRetain();
    if (outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v8))
    {
      uint64_t v29 = OUTLINED_FUNCTION_5_27();
      OUTLINED_FUNCTION_4_25(v29, v30, v31, v32, v33, v34, v35, v36, a3, a4, v43, v10, v44);
      Class v37 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_31();
    }
    else
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_24();
    }
  }
  v38 = self;
  id v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F70028]), sel_init);
  id v40 = objc_msgSend(v38, sel_runSiriKitExecutorCommandWithContext_payload_, v39, v8);

  id v41 = objc_msgSend(v38, sel_wrapCommandInStartLocalRequest_, v40);
  return v41;
}

id static ContactsDirectInvocations.getContact(contactName:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  id v4 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD000000000000022, 0x800000022D5A64E0);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v5, v4);
  uint64_t v17 = outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v4);
  if (v17)
  {
    OUTLINED_FUNCTION_0_24();
    uint64_t v6 = MEMORY[0x263F8D310];
    AnyHashable.init<A>(_:)();
    uint64_t v15 = v6;
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)v16);
    if (v17)
    {
      v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v7.super.Class isa = 0;
    }
    objc_msgSend(v4, sel_setUserData_, v7.super.isa, v13, v14);
  }
  else
  {
    objc_msgSend(v4, sel_setUserData_, 0);
  }
  id v8 = self;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F70028]), sel_init);
  id v10 = objc_msgSend(v8, sel_runSiriKitExecutorCommandWithContext_payload_, v9, v4);

  id v11 = objc_msgSend(v8, sel_wrapCommandInStartLocalRequest_, v10);
  return v11;
}

uint64_t ContactsDirectInvocations.Identifiers.shouldStayInDomain.getter(char a1)
{
  ContactsDirectInvocations.Identifiers.rawValue.getter(a1);
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  char v1 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

unint64_t ContactsDirectInvocations.Identifiers.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsDirectInvocations.Identifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void *static ContactsDirectInvocations.Identifiers.allCases.getter()
{
  return &outlined read-only object #0 of static ContactsDirectInvocations.Identifiers.allCases.getter;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x230F84F70](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithIdentifier_, v5);

  return v6;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(void *)&long long v39 = v17;
    *((void *)&v39 + 1) = v16;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v17;
    *((void *)&v37[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v6 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v6 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v6 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = *(void *)(v2 + 48) + 40 * v21;
    *(_OWORD *)uint64_t v26 = v29;
    *(_OWORD *)(v26 + 16) = v30;
    *(void *)(v26 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v21));
    ++*(void *)(v2 + 16);
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v27) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v28 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_36:
    swift_release();
    outlined consume of [String : Any].Iterator._Variant();
    return v2;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id @nonobjc INPersonHandle.init(value:type:label:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = v4;
  if (a2)
  {
    int64_t v8 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v8 = 0;
  }
  id v9 = objc_msgSend(v5, sel_initWithValue_type_label_, v8, a3, a4);

  return v9;
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10 = v9;
  uint64_t v18 = type metadata accessor for PersonNameComponents();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a2, 1, v18) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
  if (a4)
  {
    unint64_t v20 = (void *)MEMORY[0x230F84F70](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v20 = 0;
  }
  if (!a7)
  {
    unint64_t v21 = 0;
    if (a9) {
      goto LABEL_8;
    }
LABEL_10:
    char v22 = 0;
    goto LABEL_11;
  }
  unint64_t v21 = (void *)MEMORY[0x230F84F70](a6, a7);
  swift_bridgeObjectRelease();
  if (!a9) {
    goto LABEL_10;
  }
LABEL_8:
  char v22 = (void *)MEMORY[0x230F84F70](a8, a9);
  swift_bridgeObjectRelease();
LABEL_11:
  id v23 = objc_msgSend(v10, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_, a1, isa, v20, a5, v21, v22);

  return v23;
}

id @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSDictionary v7 = v6;
  if (a5)
  {
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INPerson);
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.Class isa = 0;
  }
  id v14 = objc_msgSend(v7, sel_initWithCallRecordFilter_callRecordToCallBack_audioRoute_destinationType_contacts_callCapability_, a1, a2, a3, a4, v13.super.isa, a6);

  return v14;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    uint64_t v11 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    uint64_t *v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v9 = *(void *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    outlined destroy of AnyHashable(*(void *)(v11 + 48) + 40 * v4);
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v4), a1);
    _NativeDictionary._delete(at:)();
    *uint64_t v2 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3);
  *uint64_t v3 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t outlined bridged method (pb) of @objc static INIntent.typeName()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_typeName);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc PBCodable.data.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_data);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setUserData_, isa);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_userData);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

id OUTLINED_FUNCTION_1_30(uint64_t a1, uint64_t a2)
{
  return static ContactsDirectInvocations.confirm()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

id OUTLINED_FUNCTION_2_31()
{
  return objc_msgSend(v0, (SEL)(v2 + 2119), v1);
}

id OUTLINED_FUNCTION_3_24()
{
  return objc_msgSend(v0, (SEL)(v1 + 2119), 0);
}

uint64_t OUTLINED_FUNCTION_4_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return specialized Dictionary.subscript.setter((uint64_t)&a9, (uint64_t)&a13);
}

uint64_t OUTLINED_FUNCTION_5_27()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result + 40;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v15 = result + 40;
    do
    {
      uint64_t v16 = v5;
      char v6 = (Swift::Int *)(v4 + 16 * v3);
      unint64_t v7 = v3;
      while (1)
      {
        if (v7 >= *(void *)(v1 + 16))
        {
          __break(1u);
          return result;
        }
        Swift::Int v9 = *(v6 - 1);
        Swift::Int v8 = *v6;
        unint64_t v3 = v7 + 1;
        swift_bridgeObjectRetain_n();
        char v10 = specialized Set._Variant.insert(_:)(&v17, v9, v8);
        swift_bridgeObjectRelease();
        if (v10) {
          break;
        }
        double result = swift_bridgeObjectRelease();
        v6 += 2;
        ++v7;
        if (v2 == v3)
        {
          uint64_t v5 = v16;
          goto LABEL_15;
        }
      }
      uint64_t v5 = v16;
      double result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = v16;
      if ((result & 1) == 0)
      {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v5 = v18;
      }
      unint64_t v12 = *(void *)(v5 + 16);
      unint64_t v11 = *(void *)(v5 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        unint64_t v13 = v12 + 1;
        uint64_t v5 = v18;
      }
      *(void *)(v5 + 16) = v13;
      uint64_t v14 = v5 + 16 * v12;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v8;
      uint64_t v4 = v15;
    }
    while (v2 - 1 != v7);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = 0;
      unint64_t v8 = a1 & 0xC000000000000001;
      while (v8)
      {
        id v9 = (id)MEMORY[0x230F854E0](v7, a1);
LABEL_7:
        char v10 = v9;
        unint64_t v11 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_17;
        }
        uint64_t v15 = v9;
        char v12 = closure #1 in Array<A>.matchingLabeledValues(for:)(&v15, a2);
        if (v3)
        {
          swift_bridgeObjectRelease();

          uint64_t v13 = v16;
          swift_release();
          return v13;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v3 = 0;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v8 = a1 & 0xC000000000000001;
        }
        else
        {
        }
        ++v7;
        if (v11 == v6)
        {
          uint64_t v13 = v16;
          goto LABEL_20;
        }
      }
      if (v7 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(a1 + 8 * v7 + 32);
    goto LABEL_7;
  }
LABEL_19:
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();

  return v13;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  uint64_t v3 = a1;
  long long v29 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v25 = v4;
      uint64_t v5 = 0;
      int64_t v27 = v3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v28 = v3 & 0xC000000000000001;
      uint64_t v26 = v3;
      while (v28)
      {
        uint64_t v6 = (id)MEMORY[0x230F854E0](v5, v3);
LABEL_7:
        unint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_34;
        }
        outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
        char v10 = v9;
        swift_bridgeObjectRelease();
        if (v10)
        {
          unint64_t v11 = objc_msgSend(v7, sel_label);
          if (v11)
          {
            char v12 = v11;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v13 = String.sanitizeCNLabel.getter();
            uint64_t v15 = v14;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v15 = 0;
          }
          uint64_t v16 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
          if (v17)
          {
            uint64_t v18 = String.convertToContactAttributeLabel.getter(v16, v17);
            unint64_t v20 = v19;
            swift_bridgeObjectRelease();
            if (v15)
            {
              if (v20)
              {
                if (v13 == v18 && v15 == v20)
                {

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_29;
                }
                char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v22)
                {
LABEL_27:

                  goto LABEL_29;
                }
LABEL_26:
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
LABEL_29:
                uint64_t v4 = v25;
                uint64_t v3 = v26;
                goto LABEL_30;
              }
            }
            else if (!v20)
            {
              goto LABEL_27;
            }
          }
          else if (!v15)
          {
            goto LABEL_27;
          }
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }

LABEL_30:
        ++v5;
        if (v8 == v4)
        {
          id v23 = v29;
          goto LABEL_37;
        }
      }
      if (v5 < *(void *)(v27 + 16)) {
        break;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_36;
      }
    }
    uint64_t v6 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_7;
  }
LABEL_36:
  id v23 = MEMORY[0x263F8EE78];
LABEL_37:

  swift_bridgeObjectRelease();
  return v23;
}

unint64_t Array<A>.removeAllWhere(contactName:relationLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v12 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(&v12, a1, a2, a3, a4);
  uint64_t v10 = result;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v10)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v10, v11);
    return v12;
  }
  return result;
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1 < 0 || MEMORY[0x230F85140](a2, a3) <= a1)
  {
    uint64_t v6 = 1;
  }
  else
  {
    Array.subscript.getter();
    uint64_t v6 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a4, v6, 1, a3);
}

void Optional<A>.toContactsPhoneHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  Optional<A>.toContactsPhoneHandles.getter(a1, (uint64_t)closure #1 in Optional<A>.toContactsPhoneHandles.getter, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void Optional<A>.toContactsEmailHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  Optional<A>.toContactsPhoneHandles.getter(a1, (uint64_t)closure #1 in Optional<A>.toContactsEmailHandles.getter, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void Optional<A>.toContactsPhoneHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void (*v26)(uint64_t *__return_ptr, id *);
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, id *);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;

  OUTLINED_FUNCTION_8_24();
  a23 = v24;
  a24 = v27;
  if (v25)
  {
    uint64_t v28 = v26;
    long long v29 = v25;
    if (v25 >> 62) {
      goto LABEL_14;
    }
    long long v30 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v30)
    {
      a12 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v30 < 0)
      {
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      uint64_t v31 = 0;
      while (v30 != v31)
      {
        if ((v29 & 0xC000000000000001) != 0) {
          uint64_t v32 = (id)MEMORY[0x230F854E0](v31, v29);
        }
        else {
          uint64_t v32 = *(id *)(v29 + 8 * v31 + 32);
        }
        long long v33 = v32;
        a10 = v32;
        v28(&a11, &a10);

        ++v31;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v30 == v31) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      long long v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_7_20();
}

#error "22D53B888: call analysis failed (funcsize=99)"

void Array<A>.toContactAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OUTLINED_FUNCTION_1_31();
  OUTLINED_FUNCTION_10_22();
  if (v13)
  {
    OUTLINED_FUNCTION_4_26();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_28_11();
  }
  if (!v11)
  {
LABEL_13:
    OUTLINED_FUNCTION_0_25();
    return;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v11 & 0x8000000000000000) == 0)
  {
    type metadata accessor for ContactAttribute();
    OUTLINED_FUNCTION_12_20();
    do
    {
      if (a11) {
        OUTLINED_FUNCTION_13_21();
      }
      else {
        id v14 = OUTLINED_FUNCTION_14_18();
      }
      uint64_t v15 = v14;
      id v16 = objc_msgSend(v14, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_14();
      id v17 = objc_msgSend(v15, sel_label);
      if (v17)
      {
        uint64_t v18 = v17;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      ++v12;
      id v19 = objc_msgSend(v15, sel_value);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_2_32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_5_28();
      OUTLINED_FUNCTION_9_19();
      specialized ContiguousArray._endMutation()();
      OUTLINED_FUNCTION_22_13();
    }
    while (!v20);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t Array<A>.toCNPostalAddresses.getter(unint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_4_26();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_15;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x230F854E0](i, a1);
    }
    else {
      id v6 = *(id *)(a1 + 8 * i + 32);
    }
    unint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_postalAddress);

    if (v8)
    {
      MEMORY[0x230F850D0]();
      if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_25_13();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = v14;
LABEL_16:
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_18;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_29:
    swift_bridgeObjectRelease();
    return v13;
  }
  OUTLINED_FUNCTION_4_26();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_28;
  }
LABEL_18:
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  if (v10 >= 1)
  {
    for (uint64_t j = 0; j != v10; ++j)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_13_21();
      }
      else {
        id v12 = OUTLINED_FUNCTION_14_18();
      }
      CNLabeledValue<>.init(address:)(v12);
      MEMORY[0x230F850D0]();
      if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_25_13();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v2;
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

void Array<A>.hasMultipleResultsWithUniqueLabels.getter()
{
  OUTLINED_FUNCTION_8_24();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    OUTLINED_FUNCTION_21_9();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = v2;
    if (!v2)
    {
LABEL_34:
      OUTLINED_FUNCTION_7_20();
      return;
    }
  }
  if (v3 < 2) {
    goto LABEL_34;
  }
  if (v2 >= 1)
  {
    unint64_t v4 = v1 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      if (v4) {
        id v7 = (id)MEMORY[0x230F854E0](v5, v1);
      }
      else {
        id v7 = *(id *)(v1 + 8 * v5 + 32);
      }
      id v8 = v7;
      outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
      if (v9)
      {
        uint64_t v10 = String.sanitizeCNLabel.getter();
        uint64_t v12 = v11;

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_17_15();
          uint64_t v6 = v16;
        }
        unint64_t v14 = *(void *)(v6 + 16);
        unint64_t v13 = *(void *)(v6 + 24);
        if (v14 >= v13 >> 1)
        {
          OUTLINED_FUNCTION_18_14(v13);
          uint64_t v6 = v17;
        }
        *(void *)(v6 + 16) = v14 + 1;
        uint64_t v15 = v6 + 16 * v14;
        *(void *)(v15 + 32) = v10;
        *(void *)(v15 + 40) = v12;
      }
      else
      {
      }
      ++v5;
    }
    while (v2 != v5);
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16)) {
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      if (v4) {
        id v19 = (id)MEMORY[0x230F854E0](v18, v1);
      }
      else {
        id v19 = *(id *)(v1 + 8 * v18 + 32);
      }
      char v20 = v19;
      id v21 = objc_msgSend(v19, sel_postalAddress);
      if (v21 && (outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(v21), v22))
      {
        uint64_t v23 = String.sanitizeCNLabel.getter();
        uint64_t v25 = v24;

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_17_15();
          uint64_t v6 = v29;
        }
        unint64_t v27 = *(void *)(v6 + 16);
        unint64_t v26 = *(void *)(v6 + 24);
        if (v27 >= v26 >> 1)
        {
          OUTLINED_FUNCTION_18_14(v26);
          uint64_t v6 = v30;
        }
        *(void *)(v6 + 16) = v27 + 1;
        uint64_t v28 = v6 + 16 * v27;
        *(void *)(v28 + 32) = v23;
        *(void *)(v28 + 40) = v25;
      }
      else
      {
      }
      ++v18;
    }
    while (v2 != v18);
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16))
    {
LABEL_32:
      specialized _ArrayProtocol.filter(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t closure #1 in implicit closure #1 in Array<A>.hasSameLabels.getter(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(*a1);
  if (v5)
  {
    uint64_t v4 = String.sanitizeCNLabel.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a2 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
  if ((a2 & 0xC000000000000001) != 0) {
    id v9 = (id)MEMORY[0x230F854E0](0, a2);
  }
  else {
    id v9 = *(id *)(a2 + 32);
  }
  outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v9);
  if (!v10)
  {
    if (!v7) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }
  uint64_t v11 = String.sanitizeCNLabel.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (!v7)
  {
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }
  if (!v13)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v4 == v11 && v7 == v13) {
    goto LABEL_38;
  }
  char v15 = OUTLINED_FUNCTION_16_16();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_37;
  }
LABEL_19:
  id v16 = objc_msgSend(v3, sel_postalAddress);
  if (v16 && (outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(v16), v17))
  {
    uint64_t v18 = String.sanitizeCNLabel.getter();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (!v8)
    {
LABEL_22:
      id v21 = *(id *)(a2 + 32);
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
    if (!v8) {
      goto LABEL_22;
    }
  }
  id v21 = (id)MEMORY[0x230F854E0](0, a2);
LABEL_25:
  outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v21);
  if (v22)
  {
    uint64_t v23 = String.sanitizeCNLabel.getter();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (v20)
    {
      if (v25)
      {
        if (v18 != v23 || v20 != v25)
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
LABEL_39:
          swift_bridgeObjectRelease();
          return v27 & 1;
        }
LABEL_38:
        swift_bridgeObjectRelease();
        char v27 = 1;
        goto LABEL_39;
      }
LABEL_34:
      char v27 = 0;
      goto LABEL_39;
    }
    if (v25)
    {
      char v27 = 0;
      goto LABEL_39;
    }
  }
  else if (v20)
  {
    goto LABEL_34;
  }
LABEL_37:
  char v27 = 1;
  return v27 & 1;
}

uint64_t closure #1 in Optional<A>.toContactsPhoneHandles.getter@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  type metadata accessor for ContactsPhoneHandle.Builder(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel;
  uint64_t v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  uint64_t v11 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle;
  __swift_storeEnumTagSinglePayload(v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle, 1, 1, v10);
  outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v7);
  if (!v12) {
    static String.EMPTY.getter();
  }
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with copy of SpeakableString?((uint64_t)v6, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v6);
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = ContactsPhoneHandle.Builder.withPhoneLabel(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ContactsPhoneHandle(0);
  swift_allocObject();
  uint64_t result = ContactsPhoneHandle.init(builder:)(v14);
  *a2 = result;
  return result;
}

uint64_t closure #1 in Optional<A>.toContactsEmailHandles.getter@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  type metadata accessor for ContactsEmailHandle.Builder(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel;
  uint64_t v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  uint64_t v11 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle;
  __swift_storeEnumTagSinglePayload(v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle, 1, 1, v10);
  outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v7);
  if (!v12) {
    static String.EMPTY.getter();
  }
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with copy of SpeakableString?((uint64_t)v6, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v6);
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = ContactsEmailHandle.Builder.withEmailLabel(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ContactsEmailHandle(0);
  swift_allocObject();
  uint64_t result = ContactsEmailHandle.init(builder:)(v14);
  *a2 = result;
  return result;
}

uint64_t closure #1 in Optional<A>.toContactsAddressHandles(localeString:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  type metadata accessor for ContactsAddressHandle.Builder(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  uint64_t v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  *(void *)(v8 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle) = 0;
  type metadata accessor for DialogLocation();
  type metadata accessor for DialogLocationAddress();
  id v11 = objc_msgSend(v7, sel_postalAddress);
  swift_bridgeObjectRetain();
  DialogLocationAddress.init(postalAddress:localeString:)(v11, a2, a3);
  uint64_t v12 = DialogLocation.init(locationAddress:)();
  ContactsAddressHandle.Builder.withAddressHandle(_:)(v12);
  swift_release();
  swift_release();
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = ContactsAddressHandle.Builder.withAddressLabel(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ContactsAddressHandle(0);
  swift_allocObject();
  uint64_t result = ContactsAddressHandle.init(builder:)(v14);
  *a4 = result;
  return result;
}

uint64_t Array<A>.matchingLabeledValues(for:)(void *a1, unint64_t a2)
{
  uint64_t v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (!v5) {
    goto LABEL_7;
  }
  if (v4 == 0x656E6F6870 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return a2;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;

  uint64_t v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (!v5) {
    goto LABEL_7;
  }
  if (v4 == 0x6C69616D65 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return a2;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  uint64_t v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v5)
  {
    if (v4 == 0x73736572646461 && v5 == 0xE700000000000000) {
      goto LABEL_14;
    }
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_15;
    }
  }
  uint64_t v8 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v9)
  {
    if (v8 != 0x7264646120796E61 || v9 != 0xEB00000000737365)
    {
      id v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        goto LABEL_13;
      }
LABEL_15:
      swift_bridgeObjectRetain();
      return a2;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

#error "22D53C968: call analysis failed (funcsize=163)"

#error "22D53CB50: call analysis failed (funcsize=122)"

void Array<A>.matchingHandles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OUTLINED_FUNCTION_1_31();
  Array<A>.matchingLabeledValues(for:)(v13, v14);
  OUTLINED_FUNCTION_10_22();
  if (!v15)
  {
    OUTLINED_FUNCTION_28_11();
    if (v11) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_25();
    return;
  }
  uint64_t v11 = OUTLINED_FUNCTION_6_26();
  if (!v11) {
    goto LABEL_14;
  }
LABEL_3:
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v11 & 0x8000000000000000) == 0)
  {
    type metadata accessor for ContactAttribute();
    OUTLINED_FUNCTION_12_20();
    do
    {
      if (a11) {
        OUTLINED_FUNCTION_13_21();
      }
      else {
        id v16 = OUTLINED_FUNCTION_14_18();
      }
      uint64_t v17 = v16;
      id v18 = objc_msgSend(v16, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_14();
      id v19 = objc_msgSend(v17, sel_label);
      if (v19)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        OUTLINED_FUNCTION_29_9();
        OUTLINED_FUNCTION_15_18();
      }
      ++v12;
      id v20 = objc_msgSend(v17, sel_value);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_2_32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_5_28();
      OUTLINED_FUNCTION_9_19();
      specialized ContiguousArray._endMutation()();
      OUTLINED_FUNCTION_22_13();
    }
    while (!v21);
    goto LABEL_14;
  }
  __break(1u);
}

#error "22D53CF64: call analysis failed (funcsize=118)"

uint64_t closure #1 in Array<A>.matchingLabeledValues(for:)(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_30;
  }
  id v6 = objc_msgSend(v3, sel_label);
  if (v6)
  {
    char v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = String.sanitizeCNLabel.getter();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
  if (v12)
  {
    uint64_t v13 = String.convertToContactAttributeLabel.getter(v11, v12);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if (v10)
    {
      if (v15)
      {
        if (v8 == v13 && v10 == v15) {
          goto LABEL_32;
        }
        char v17 = OUTLINED_FUNCTION_16_16();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_30;
        }
        goto LABEL_18;
      }
    }
    else if (!v15)
    {
      goto LABEL_30;
    }
  }
  else if (!v10)
  {
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  id v18 = objc_msgSend(v3, sel_label);
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
  if (v22)
  {
    if (!v24)
    {
      char v26 = 0;
      goto LABEL_33;
    }
    if (v20 != v23 || v22 != v24)
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRelease();
      return v26 & 1;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    char v26 = 1;
    goto LABEL_33;
  }
  if (v24)
  {
    char v26 = 0;
    goto LABEL_33;
  }
LABEL_30:
  char v26 = 1;
  return v26 & 1;
}

#error "22D53D45C: call analysis failed (funcsize=237)"

#error "22D53DB84: call analysis failed (funcsize=311)"

#error "22D53DD40: call analysis failed (funcsize=120)"

CNPhoneNumber __swiftcall CNPhoneNumber.__allocating_init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x230F84F70](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithStringValue_, v4);

  return (CNPhoneNumber)v5;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Collection.firstIndex(where:)(v12, a2, a3, a4, a5);
  if (v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  unint64_t v6 = v13;
  char v15 = v14;
  uint64_t v57 = a2;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v18 = *a1;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v6 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_64;
  }
  unint64_t v16 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_75;
  }
  if (*a1 >> 62)
  {
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v16 != v17)
  {
    unint64_t v16 = v6 + 5;
    do
    {
      unint64_t v19 = v16 - 4;
      unint64_t v20 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v21 = (id)MEMORY[0x230F854E0](v16 - 4);
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        if (v19 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_66;
        }
        id v21 = *(id *)(v20 + 8 * v16);
      }
      uint64_t v22 = v21;
      id v23 = objc_msgSend(v21, sel_value);
      id v24 = objc_msgSend(v23, sel_name);

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      if (v25 == v57 && v27 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {

          goto LABEL_31;
        }
      }
      id v30 = objc_msgSend(v22, sel_label);
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v34 = 0;
      }
      uint64_t v35 = static Dictionary<>.nlSemantic(forCNLabel:)(v32, v34);
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
      if (v35 == v55 && v37 == v56)
      {

        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_55;
      }
LABEL_31:
      if (v19 != v6)
      {
        unint64_t v40 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v41 = (id)MEMORY[0x230F854E0](v6, *a1);
          unint64_t v40 = *a1;
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_69;
          }
          if (v6 >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_70;
          }
          id v41 = *(id *)(v40 + 8 * v6 + 32);
        }
        if ((v40 & 0xC000000000000001) != 0)
        {
          id v42 = (id)MEMORY[0x230F854E0](v16 - 4, v40);
          unint64_t v40 = *a1;
        }
        else
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_71;
          }
          if (v19 >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_72;
          }
          id v42 = *(id *)(v40 + 8 * v16);
        }
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v40;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v40 & 0x8000000000000000) != 0
          || (v40 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v40);
          unint64_t v40 = v44;
          *a1 = v44;
        }
        uint64_t v45 = *(void **)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
        *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v42;

        specialized Array._endMutation()();
        unint64_t v46 = *a1;
        int v47 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v46;
        if (!v47 || (v46 & 0x8000000000000000) != 0 || (v46 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v46);
          unint64_t v46 = v48;
          *a1 = v48;
        }
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_73;
        }
        uint64_t v49 = v46 & 0xFFFFFFFFFFFFFF8;
        if (v19 >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_74;
        }
        v50 = *(void **)(v49 + 8 * v16);
        *(void *)(v49 + 8 * v16) = v41;

        specialized Array._endMutation()();
      }
      if (__OFADD__(v6++, 1)) {
        goto LABEL_68;
      }
LABEL_55:
      unint64_t v52 = v16 - 3;
      if (__OFADD__(v19, 1)) {
        goto LABEL_67;
      }
      if (*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v16;
    }
    while (v52 != v53);
  }
LABEL_64:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = a1;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = 0;
      unint64_t v33 = v9 & 0xC000000000000001;
      uint64_t v31 = v10;
      unint64_t v32 = v9;
      do
      {
        if (v33) {
          id v12 = (id)MEMORY[0x230F854E0](v11, v9);
        }
        else {
          id v12 = *(id *)(v9 + 8 * v11 + 32);
        }
        uint64_t v13 = v12;
        id v14 = objc_msgSend(v12, sel_value);
        id v15 = objc_msgSend(v14, sel_name);

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v9 = v17;

        if (v16 == a2 && v9 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {

            goto LABEL_22;
          }
        }
        id v20 = objc_msgSend(v13, sel_label);
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v25 = static Dictionary<>.nlSemantic(forCNLabel:)(v22, v24);
        unint64_t v9 = v26;
        swift_bridgeObjectRelease();
        if (v25 == a4 && v9 == a5)
        {
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_26;
        }
LABEL_22:
        uint64_t v29 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        ++v11;
        unint64_t v9 = v32;
      }
      while (v29 != v31);
    }
  }
  uint64_t v11 = 0;
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  OUTLINED_FUNCTION_24_11();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v15 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      OUTLINED_FUNCTION_24_11();
      if ((v19 & 1) == 0) {
        break;
      }
      id v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *id v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *id v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      char v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *char v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              unint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *id v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    char v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *char v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_handleLabel);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for CNPhoneNumber()
{
  unint64_t result = lazy cache variable for type metadata for CNPhoneNumber;
  if (!lazy cache variable for type metadata for CNPhoneNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_handleLabel);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      uint64_t v6 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v6 < v2)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v2 - v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!(*v3 >> 62))
  {
    uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v9 = *v3;
    goto LABEL_17;
  }
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v7 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_38;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v8) {
    uint64_t v12 = v8;
  }
  swift_bridgeObjectRetain();
  *uint64_t v3 = MEMORY[0x230F854F0](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  uint64_t v13 = v11 + 32;
  int64_t v14 = (char *)(v11 + 32 + 8 * v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  swift_arrayDestroy();
  if (!v5) {
    goto LABEL_28;
  }
  if (*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFSUB__(v15, v2))
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v13 + 8 * v2), v15 - v2, v14);
  if (*v3 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_26:
  if (__OFADD__(v17, v5))
  {
    __break(1u);
    return result;
  }
  *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v17 + v5;
LABEL_28:
  return specialized Array._endMutation()();
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x230F854F0);
}

id OUTLINED_FUNCTION_2_32()
{
  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(1, v1, v3, v4, v5, v0, v2, 0, 0);
}

uint64_t OUTLINED_FUNCTION_4_26()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_28()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_6_26()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_9_19()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_11_19()
{
  return 2;
}

void OUTLINED_FUNCTION_13_21()
{
  JUMPOUT(0x230F854E0);
}

id OUTLINED_FUNCTION_14_18()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t OUTLINED_FUNCTION_15_18()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_17_15()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

void OUTLINED_FUNCTION_18_14(unint64_t a1@<X8>)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

void OUTLINED_FUNCTION_20_14()
{
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_13()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_26_9()
{
}

uint64_t OUTLINED_FUNCTION_29_9()
{
  return String.sanitizeCNLabel.getter();
}

void OUTLINED_FUNCTION_30_8()
{
}

uint64_t dispatch thunk of ContactsStrategyProtocol.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.contactService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.catFamily.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.labelCATs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.ttsEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.canUseServerTTS.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.mockGlobals.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.isSmartEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t type metadata completion function for ContactsStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  return v0;
}

uint64_t ContactsStrategy.isSmartEnabled.getter()
{
  uint64_t v3 = &type metadata for SiriContactsFeatures;
  unint64_t v4 = lazy protocol witness table accessor for type SiriContactsFeatures and conformance SiriContactsFeatures();
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  return v0 & 1;
}

uint64_t ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v16 - v12;
  outlined init with copy of DeviceState(v5 + 16, (uint64_t)v18);
  outlined init with copy of NLContextUpdate?(a5, (uint64_t)v11);
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v14) == 1)
  {
    static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v11, &demangling cache variable for type metadata for NLContextUpdate?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v13, v11, v14);
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v14);
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for NLContextUpdate?);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
}

uint64_t ContactsStrategy.getActionForInput(input:)@<X0>(uint64_t a1@<X8>)
{
  return static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void *)(*(void *)v1 + 80), a1);
}

uint64_t static StrategyUtil.getActionForInput<A>(input:intentType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v62 = a1;
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v64 = v4;
  uint64_t v65 = v3;
  MEMORY[0x270FA5388](v3);
  v63 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  v66 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v59 - v13;
  MEMORY[0x270FA5388](v12);
  int64_t v16 = (char *)&v59 - v15;
  Input.parse.getter();
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v8 + 88);
  int v18 = v17(v16, v6);
  int v19 = *MEMORY[0x263F6FF70];
  if (v18 != *MEMORY[0x263F6FF50] && v18 != v19 && v18 != *MEMORY[0x263F6FF80])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_22D49E000, v34, v35, "#getActionForInput: Received unsupported parse type, returning .ignore() actionForInput", v36, 2u);
      MEMORY[0x230F85DE0](v36, -1, -1);
    }

    static ActionForInput.ignore()();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v6);
  }
  uint64_t v60 = v8;
  uint64_t v61 = a2;
  unint64_t v22 = *(void (**)(void))(v8 + 8);
  OUTLINED_FUNCTION_6_27();
  v22();
  Input.parse.getter();
  Parse.cancelOrContactIntent.getter();
  __int16 v24 = v23;
  unint64_t v25 = v22;
  ((void (*)(char *, uint64_t))v22)(v14, v6);
  if (v24)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    char v39 = (void *)OUTLINED_FUNCTION_21_0(v38, (uint64_t)static Logger.siriContacts);
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v40))
    {
      id v41 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_7_21(v41);
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v42, v43, "#getActionForInput: .cancel() actionForInput");
      OUTLINED_FUNCTION_0_26();
    }

    return static ActionForInput.cancel()();
  }
  else
  {
    if ((v24 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v26, (uint64_t)static Logger.siriContacts);
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_4_0(v28)) {
        goto LABEL_39;
      }
      int64_t v29 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_7_21(v29);
      unint64_t v32 = "#getActionForInput: .ignore() actionForInput";
LABEL_38:
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v30, v31, v32);
      OUTLINED_FUNCTION_0_26();
LABEL_39:

      return static ActionForInput.ignore()();
    }
    unint64_t v44 = v66;
    Input.parse.getter();
    if (v17(v44, v6) == v19)
    {
      (*(void (**)(char *, uint64_t))(v60 + 96))(v44, v6);
      unint64_t v46 = v63;
      uint64_t v45 = v64;
      uint64_t v47 = v65;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v44, v65);
      static StrategyUtil.actionForDirectInvocation(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v47);
    }
    OUTLINED_FUNCTION_6_27();
    v25();
    Input.parse.getter();
    Parse.getSiriKitIntentType()();
    uint64_t v49 = v48;
    OUTLINED_FUNCTION_6_27();
    v25();
    if (!v49 || v49 != v62)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v56, (uint64_t)static Logger.siriContacts);
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_4_0(v57)) {
        goto LABEL_39;
      }
      v58 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_7_21(v58);
      unint64_t v32 = "#getActionForInput: parse intent type does not match flow's intent type, returning .ignore()";
      goto LABEL_38;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    v51 = (void *)OUTLINED_FUNCTION_21_0(v50, (uint64_t)static Logger.siriContacts);
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v52))
    {
      uint64_t v53 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_7_21(v53);
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v54, v55, "#getActionForInput: .handle() actionForInput");
      OUTLINED_FUNCTION_0_26();
    }

    return static ActionForInput.handle()();
  }
}

uint64_t ContactsStrategy.__deallocating_deinit()
{
  ContactsStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 168, 7);
}

uint64_t type metadata accessor for ContactsStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t static StrategyUtil.actionForDirectInvocation(_:)()
{
  v24._uint64_t countAndFlagsBits = Parse.DirectInvocation.identifier.getter();
  char v0 = ContactsDirectInvocations.Identifiers.init(rawValue:)(v24);
  if (v0 == 8)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    uint64_t v2 = (void *)OUTLINED_FUNCTION_21_0(v1, (uint64_t)static Logger.siriContacts);
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v3))
    {
      uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_7_21(v4);
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v5, v6, "#getActionForInput Direct Invocation identifier did not match a known value, returning .ignore()");
      OUTLINED_FUNCTION_0_26();
    }

    return static ActionForInput.ignore()();
  }
  else
  {
    char v8 = v0;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = OUTLINED_FUNCTION_21_0(v9, (uint64_t)static Logger.siriContacts);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      unint64_t v14 = ContactsDirectInvocations.Identifiers.rawValue.getter(v8);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v10, v11, "#getActionForInput: Direct Invocation known invocation identifier found: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v13, -1, -1);
      MEMORY[0x230F85DE0](v12, -1, -1);
    }

    char v16 = ContactsDirectInvocations.Identifiers.shouldStayInDomain.getter(v8);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    if (v16)
    {
      if (v19)
      {
        uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_22D49E000, v17, v18, "#getActionForInput: Direct Invocation identifier is intended for this domain, returning .handle()", v20, 2u);
        OUTLINED_FUNCTION_0_26();
      }

      return static ActionForInput.handle()();
    }
    else
    {
      if (v19)
      {
        unint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)unint64_t v21 = 0;
        _os_log_impl(&dword_22D49E000, v17, v18, "#getActionForInput: Direct Invocation identifier is not intended for this domain, returning .ignore()", v21, 2u);
        OUTLINED_FUNCTION_0_26();
      }

      return static ActionForInput.ignore()();
    }
  }
}

void OUTLINED_FUNCTION_0_26()
{
  JUMPOUT(0x230F85DE0);
}

void OUTLINED_FUNCTION_2_33(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

_WORD *OUTLINED_FUNCTION_7_21(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (!v0) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22D59FB50;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22D59FB50;
  *(void *)(v3 + 32) = v1;
  specialized Array._endMutation()();
  id v4 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  Result<>.firstPrint.getter();
  if (!v5) {
    static String.EMPTY.getter();
  }
  type metadata accessor for SAUIButton();
  *(void *)(v2 + 32) = SAUIButton.init(commands:text:)();
  specialized Array._endMutation()();

  return v2;
}

uint64_t ErrorViewBuilder.makeViewsForWatch()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for Watch.");
}

uint64_t ErrorViewBuilder.makeViewsForMac()()
{
  return ErrorViewBuilder.makeViewsForMac()("[ErrorViewBuilder] Constructing punchout button for macOS.");
}

uint64_t ErrorViewBuilder.makeViewsForCarPlay()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for CarPlay.");
}

uint64_t ErrorViewBuilder.makeViewsForCarDND()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for CarDND.");
}

uint64_t ErrorViewBuilder.makeViewsForIOS()()
{
  return ErrorViewBuilder.makeViewsForMac()("[ErrorViewBuilder] Constructing punchout button for iOS.");
}

uint64_t ErrorViewBuilder.makeViewsForMac()(const char *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    char v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v8 = 0;
    _os_log_impl(&dword_22D49E000, v6, v7, a1, v8, 2u);
    MEMORY[0x230F85DE0](v8, -1, -1);
  }

  ContactsLabelCATs.openContacts()();
  uint64_t v9 = specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)();
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4);
  return v9;
}

uint64_t ErrorViewBuilder.makeViewsForXROS()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for XR.");
}

ValueMetadata *type metadata accessor for ErrorViewBuilder()
{
  return &type metadata for ErrorViewBuilder;
}

SiriContactsIntents::GetContactAttributeSlots_optional __swiftcall GetContactAttributeSlots.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GetContactAttributeSlots.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return (SiriContactsIntents::GetContactAttributeSlots_optional)15;
  }
  else {
    return (SiriContactsIntents::GetContactAttributeSlots_optional)v3;
  }
}

uint64_t GetContactSlots.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_3_26();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x6B63696Eu);
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x7473616Cu);
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_4_27();
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 0xD000000000000011;
      break;
    case 7:
      uint64_t result = OUTLINED_FUNCTION_0_27();
      break;
    case 8:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x6C6C7566u);
      break;
    case 9:
      uint64_t result = OUTLINED_FUNCTION_2_34();
      break;
    case 10:
      uint64_t result = OUTLINED_FUNCTION_1_32();
      break;
    case 11:
      uint64_t result = 0x6374614D69726973;
      break;
    default:
      uint64_t result = OUTLINED_FUNCTION_5_29();
      break;
  }
  return result;
}

unint64_t ModifyContactAttributeSlots.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x704F796669646F6DLL;
      break;
    case 2:
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x694E796669646F6DLL;
      break;
    case 5:
      unint64_t result = 0x43646574616C6572;
      break;
    default:
      return result;
  }
  return result;
}

SiriContactsIntents::ModifyContactAttributeSlots_optional __swiftcall ModifyContactAttributeSlots.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ModifyContactAttributeSlots.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return (SiriContactsIntents::ModifyContactAttributeSlots_optional)6;
  }
  else {
    return (SiriContactsIntents::ModifyContactAttributeSlots_optional)v3;
  }
}

id specialized Slot<>.slotDescription.getter(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  a2(0);
  id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v8 = objc_msgSend(v7, sel__intentInstanceDescription);

  uint64_t v9 = a3(a1);
  uint64_t v10 = (void *)MEMORY[0x230F84F70](v9);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v8, sel_slotByName_, v10);

  if (!v11)
  {
    MEMORY[0x270FA5388](v12);
    fatalError(_:file:line:)(a4);
  }
  return v11;
}

id Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 8))();
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v3 = objc_msgSend(v2, sel__intentInstanceDescription);

  dispatch thunk of RawRepresentable.rawValue.getter();
  id v4 = (void *)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_slotByName_, v4);

  if (!v5)
  {
    MEMORY[0x270FA5388](v6);
    fatalError(_:file:line:)((uint64_t (*)(void))partial apply for implicit closure #1 in Slot<>.slotDescription.getter);
  }
  return v5;
}

unint64_t implicit closure #1 in Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v5);
  id v7 = (void *)((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v13[0];
  uint64_t v9 = v13[1];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  *id v7 = v8;
  v7[1] = v9;
  v7[2] = v10;
  swift_storeEnumTagMultiPayload();
  unint64_t v11 = ContactsError.errorDescription.getter();
  outlined destroy of ContactsError((uint64_t)v7);
  return v11;
}

unint64_t partial apply for implicit closure #1 in Slot<>.slotDescription.getter()
{
  return implicit closure #1 in Slot<>.slotDescription.getter(v0[6], v0[2], v0[3]);
}

void specialized Slot<>.propertyName.getter(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  id v4 = specialized Slot<>.slotDescription.getter(a1, a2, a3, a4);
  id v5 = objc_msgSend(v4, sel_facadePropertyName);

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

void Slot<>.propertyName.getter(uint64_t a1, uint64_t a2)
{
  id v2 = Slot<>.slotDescription.getter(a1, a2);
  id v3 = objc_msgSend(v2, sel_facadePropertyName);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t dispatch thunk of static Slot.intentType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Slot.init(rawValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of Slot.propertyName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static GetContactSlots.intentType.getter()
{
  return type metadata accessor for GetContactIntent();
}

SiriContactsIntents::GetContactSlots_optional __swiftcall GetContactSlots.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GetContactSlots.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return (SiriContactsIntents::GetContactSlots_optional)12;
  }
  else {
    return (SiriContactsIntents::GetContactSlots_optional)v3;
  }
}

void *static GetContactSlots.allCases.getter()
{
  return &outlined read-only object #0 of static GetContactSlots.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetContactSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GetContactSlots()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetContactSlots(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactSlots()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::GetContactSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::GetContactSlots_optional *a2@<X8>)
{
  result.value = GetContactSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GetContactSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GetContactSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriContactsIntents::GetContactSlots_optional protocol witness for Slot.init(rawValue:) in conformance GetContactSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::GetContactSlots_optional *a2@<X8>)
{
  result.value = GetContactSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance GetContactSlots()
{
  specialized Slot<>.propertyName.getter(*v0, (void (*)(void))type metadata accessor for GetContactIntent, (uint64_t (*)(uint64_t))GetContactSlots.rawValue.getter, (uint64_t (*)(void))partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance GetContactSlots(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GetContactSlots.allCases.getter;
}

uint64_t static GetContactAttributeSlots.intentType.getter()
{
  return type metadata accessor for GetContactAttributeIntent();
}

void *static GetContactAttributeSlots.allCases.getter()
{
  return &outlined read-only object #0 of static GetContactAttributeSlots.allCases.getter;
}

uint64_t GetContactAttributeSlots.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_3_26();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x6B63696Eu);
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x7473616Cu);
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_4_27();
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 0xD000000000000011;
      break;
    case 7:
      uint64_t result = OUTLINED_FUNCTION_0_27();
      break;
    case 8:
      uint64_t result = OUTLINED_FUNCTION_7_22(0x6C6C7566u);
      break;
    case 9:
      uint64_t result = OUTLINED_FUNCTION_2_34();
      break;
    case 10:
      uint64_t result = OUTLINED_FUNCTION_1_32();
      break;
    case 11:
      uint64_t result = 0x6374614D69726973;
      break;
    case 12:
      uint64_t result = 0xD000000000000015;
      break;
    case 13:
      uint64_t result = 0xD000000000000014;
      break;
    case 14:
      uint64_t result = 0xD000000000000019;
      break;
    default:
      uint64_t result = OUTLINED_FUNCTION_5_29();
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetContactAttributeSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GetContactAttributeSlots()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetContactAttributeSlots(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactAttributeSlots()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::GetContactAttributeSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::GetContactAttributeSlots_optional *a2@<X8>)
{
  result.value = GetContactAttributeSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GetContactAttributeSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GetContactAttributeSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for GetContactAttributeSlots(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for GetContactAttributeSlots(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D541308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void type metadata accessor for GetContactAttributeSlots()
{
}

uint64_t getEnumTagSinglePayload for ModifyContactAttributeSlots(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModifyContactAttributeSlots(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D541490);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for ModifyContactAttributeSlots()
{
}

uint64_t getEnumTagSinglePayload for GetContactSlots(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for GetContactSlots(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D541618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void type metadata accessor for GetContactSlots()
{
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GetContactSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [GetContactSlots] and conformance [A], &demangling cache variable for type metadata for [GetContactSlots]);
}

unint64_t lazy protocol witness table accessor for type GetContactSlots and conformance GetContactSlots()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots;
  if (!lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ModifyContactAttributeSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [ModifyContactAttributeSlots] and conformance [A], &demangling cache variable for type metadata for [ModifyContactAttributeSlots]);
}

SiriContactsIntents::GetContactAttributeSlots_optional protocol witness for Slot.init(rawValue:) in conformance GetContactAttributeSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::GetContactAttributeSlots_optional *a2@<X8>)
{
  result.value = GetContactAttributeSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance GetContactAttributeSlots()
{
  specialized Slot<>.propertyName.getter(*v0, (void (*)(void))type metadata accessor for GetContactAttributeIntent, (uint64_t (*)(uint64_t))GetContactAttributeSlots.rawValue.getter, (uint64_t (*)(void))partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance GetContactAttributeSlots(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GetContactAttributeSlots.allCases.getter;
}

uint64_t static ModifyContactAttributeSlots.intentType.getter()
{
  return type metadata accessor for ModifyContactAttributeIntent();
}

void *static ModifyContactAttributeSlots.allCases.getter()
{
  return &outlined read-only object #0 of static ModifyContactAttributeSlots.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModifyContactAttributeSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModifyContactAttributeSlots()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModifyContactAttributeSlots(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModifyContactAttributeSlots()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ModifyContactAttributeSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ModifyContactAttributeSlots_optional *a2@<X8>)
{
  result.value = ModifyContactAttributeSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ModifyContactAttributeSlots@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ModifyContactAttributeSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriContactsIntents::ModifyContactAttributeSlots_optional protocol witness for Slot.init(rawValue:) in conformance ModifyContactAttributeSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ModifyContactAttributeSlots_optional *a2@<X8>)
{
  result.value = ModifyContactAttributeSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance ModifyContactAttributeSlots()
{
  specialized Slot<>.propertyName.getter(*v0, (void (*)(void))type metadata accessor for ModifyContactAttributeIntent, (uint64_t (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter, (uint64_t (*)(void))partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ModifyContactAttributeSlots(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ModifyContactAttributeSlots.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GetContactAttributeSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [GetContactAttributeSlots] and conformance [A], &demangling cache variable for type metadata for [GetContactAttributeSlots]);
}

uint64_t lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeSlots and conformance GetContactAttributeSlots()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots;
  if (!lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots);
  }
  return result;
}

unint64_t partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter()
{
  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(void))GetContactSlots.rawValue.getter, static GetContactSlots.intentType.getter);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(void))ModifyContactAttributeSlots.rawValue.getter, static ModifyContactAttributeSlots.intentType.getter);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(void))GetContactAttributeSlots.rawValue.getter, static GetContactAttributeSlots.intentType.getter);
}

unint64_t specialized implicit closure #1 in Slot<>.slotDescription.getter(unsigned __int8 *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = a2(*a1);
  uint64_t v11 = v10;
  uint64_t v12 = a3();
  *uint64_t v8 = v9;
  v8[1] = v11;
  v8[2] = v12;
  swift_storeEnumTagMultiPayload();
  unint64_t v13 = ContactsError.errorDescription.getter();
  outlined destroy of ContactsError((uint64_t)v8);
  return v13;
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  return 0x52746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return 0x6464416C69616D65;
}

uint64_t OUTLINED_FUNCTION_2_34()
{
  return 0x6D754E656E6F6870;
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  return 0x6D614E7473726966;
}

uint64_t OUTLINED_FUNCTION_4_27()
{
  return 0x614E656C6464696DLL;
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  return 1699574633;
}

uint64_t OUTLINED_FUNCTION_7_22(unsigned int a1)
{
  return a1 | 0x656D614E00000000;
}

id GetContactAttributeIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = objc_allocWithZone(v3);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  id v19 = specialized GetContactAttributeIntentHandler.init(contactService:contactResolver:)((uint64_t)v11, (uint64_t)v17, v6, v8, v13, v7, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v19;
}

uint64_t GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  v1[4] = type metadata accessor for Signpost.OpenSignpost();
  v1[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactAttributeIntentHandler.resolveSiriMatches(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  int v3 = (void *)v0[2];
  uint64_t v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_18_15();
  uint64_t v5 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v5 = "ResolveSiriMatchesGetContactAttribute";
  *(void *)(v5 + 8) = 37;
  *(unsigned char *)(v5 + 16) = 2;
  specialized BaseIntentHandler.resolveSiriMatches(for:)(v3);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_18_15();
  outlined destroy of Signpost.OpenSignpost(v1);
  swift_task_dealloc();
  uint64_t v6 = OUTLINED_FUNCTION_11_20();
  return v7(v6);
}

uint64_t @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126900, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:);
  return GetContactAttributeIntentHandler.resolveSiriMatches(for:)();
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = (const void *)v1[4];
  int v3 = (void *)v1[3];
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_3();
  *id v6 = v5;
  swift_task_dealloc();

  type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = OUTLINED_FUNCTION_39_7();
  v9(v8);

  _Block_release(v2);
  OUTLINED_FUNCTION_5();
  return v10();
}

uint64_t GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  OUTLINED_FUNCTION_4();
  v0[6] = v1;
  v0[7] = type metadata accessor for Signpost.OpenSignpost();
  v0[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  os_log_type_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  unint64_t v32 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = (id)static Signpost.contactsLog;
  uint64_t v5 = v4;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v6 = v2 + *(int *)(v3 + 20);
  *(void *)id v6 = "ResolveContactAttributeToGet";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = objc_msgSend(v1, sel_contactAttributeToGet);
  if (v7)
  {
    uint64_t v8 = v7;
    if (objc_msgSend(v7, sel_contactAttributeType))
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
      uint64_t v10 = v8;
      uint64_t v11 = Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        int64_t v29 = (void *)swift_slowAlloc();
        uint64_t v30 = OUTLINED_FUNCTION_35();
        uint64_t v31 = v30;
        *(_DWORD *)uint64_t v13 = 136315394;
        v0[3] = OUTLINED_FUNCTION_4_28(v30, 0x800000022D5A78F0, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2112;
        v0[4] = v10;
        uint64_t v14 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *int64_t v29 = v8;

        _os_log_impl(&dword_22D49E000, v11, v12, "[%s] Resolved desired contact attribute: %@", (uint8_t *)v13, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult();
      static ContactAttributeResolutionResult.success(with:)((uint64_t)v10);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      uint64_t v21 = OUTLINED_FUNCTION_21_0(v20, (uint64_t)static Logger.siriContacts);
      uint64_t v22 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34(v22))
      {
        __int16 v23 = (_DWORD *)OUTLINED_FUNCTION_24();
        Swift::String v24 = OUTLINED_FUNCTION_35();
        *__int16 v23 = 136315138;
        uint64_t v31 = v24;
        v0[5] = OUTLINED_FUNCTION_4_28(v24, 0x800000022D5A78F0, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_35_10(&dword_22D49E000, v21, v5, "[%s] Returning unsupported invalidAttribute for contactAttributeToGet");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }

      type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult();
      static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(3);
    }
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    uint64_t v16 = OUTLINED_FUNCTION_21_0(v15, (uint64_t)static Logger.siriContacts);
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_34(v17))
    {
      uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_24();
      id v19 = OUTLINED_FUNCTION_35();
      uint64_t v31 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      v0[2] = OUTLINED_FUNCTION_4_28(v19, 0x800000022D5A78F0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_22D49E000, v16, v5, "[%s] Returning needsValue for contactAttributeToGet", v18, 0xCu);
      OUTLINED_FUNCTION_34_12();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult();
    objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
  }
  unint64_t v25 = v0[8];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v25);
  swift_task_dealloc();
  uint64_t v26 = OUTLINED_FUNCTION_11_20();
  return v27(v26);
}

uint64_t @objc GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E1268D8, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:);
  return GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)();
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0();
  uint64_t v4 = (void (**)(void, void))v3[4];
  uint64_t v5 = (void *)v3[3];
  id v6 = (void *)v3[2];
  uint64_t v7 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v8 = v7;
  swift_task_dealloc();

  ((void (**)(void, void *))v4)[2](v4, v2);
  _Block_release(v4);

  OUTLINED_FUNCTION_5();
  return v9();
}

uint64_t GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)GetContactAttributeIntentHandler.resolveContactHandleMatches(for:));
}

#error "22D542AF0: call analysis failed (funcsize=460)"

uint64_t @objc GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E1268B0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:);
  return GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = (const void *)v1[4];
  uint64_t v3 = (void *)v1[3];
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_3();
  *id v6 = v5;
  swift_task_dealloc();

  type metadata accessor for ContactAttributeResolutionResult();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = OUTLINED_FUNCTION_39_7();
  v9(v8);

  _Block_release(v2);
  OUTLINED_FUNCTION_5();
  return v10();
}

uint64_t GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:));
}

#error "22D54356C: call analysis failed (funcsize=542)"

uint64_t @objc GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126888, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:);
  return GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)((uint64_t)v6);
}

uint64_t GetContactAttributeIntentHandler.confirm(intent:)()
{
  return OUTLINED_FUNCTION_2_3((uint64_t)GetContactAttributeIntentHandler.confirm(intent:));
}

{
  uint64_t v0;
  char *v1;
  uint64_t (*v2)(char *);
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentResponse());
  uint64_t v1 = GetContactAttributeIntentResponse.init(code:userActivity:)(4, 0);
  uint64_t v2 = *(uint64_t (**)(char *))(v0 + 8);
  return v2(v1);
}

uint64_t @objc GetContactAttributeIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126860, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return GetContactAttributeIntentHandler.confirm(intent:)();
}

uint64_t GetContactAttributeIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[4] = v1;
  v0[5] = type metadata accessor for Signpost.OpenSignpost();
  v0[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactAttributeIntentHandler.handle(intent:), 0, 0);
}

uint64_t GetContactAttributeIntentHandler.handle(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v24 + 40);
  uint64_t v27 = *(void *)(v24 + 48);
  id v29 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v30 = v27 + *(int *)(v28 + 20);
  *(void *)uint64_t v30 = "HandleGetContactAttribute";
  *(void *)(v30 + 8) = 25;
  uint64_t v65 = v30;
  *(unsigned char *)(v30 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v31 = *(void **)(v24 + 32);
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
  id v33 = v31;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = OUTLINED_FUNCTION_34(v35);
  uint64_t v37 = *(void **)(v24 + 32);
  if (v36)
  {
    uint64_t v38 = swift_slowAlloc();
    a10 = (void *)swift_slowAlloc();
    a11 = OUTLINED_FUNCTION_35();
    a13 = a11;
    *(_DWORD *)uint64_t v38 = 136315394;
    *(void *)(v24 + 16) = OUTLINED_FUNCTION_4_28(a11, 0x800000022D5A78F0, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2112;
    *(void *)(v24 + 24) = v37;
    id v39 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a10 = v37;

    _os_log_impl(&dword_22D49E000, v34, OS_LOG_TYPE_FAULT|0x8, "[%s] Handling intent: %@", (uint8_t *)v38, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_19_13();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  unint64_t Contact = outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(*(void **)(v24 + 32));
  if (Contact)
  {
    unint64_t v41 = Contact;
    if (Contact >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v42 = result;
      if (result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v42 = *(void *)((Contact & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42)
      {
LABEL_11:
        if (v42 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v44 = 0;
        uint64_t v45 = MEMORY[0x263F8EE78];
        do
        {
          if ((v41 & 0xC000000000000001) != 0) {
            id v46 = (id)MEMORY[0x230F854E0](v44, v41);
          }
          else {
            id v46 = *(id *)(v41 + 8 * v44 + 32);
          }
          uint64_t v47 = v46;
          uint64_t v48 = outlined bridged method (pb) of @objc INObject.identifier.getter(v46);
          uint64_t v50 = v49;

          if (v50)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v45 + 16) + 1, 1, v45);
              uint64_t v45 = v54;
            }
            unint64_t v52 = *(void *)(v45 + 16);
            unint64_t v51 = *(void *)(v45 + 24);
            if (v52 >= v51 >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v45);
              uint64_t v45 = v55;
            }
            *(void *)(v45 + 16) = v52 + 1;
            uint64_t v53 = v45 + 16 * v52;
            *(void *)(v53 + 32) = v48;
            *(void *)(v53 + 40) = v50;
          }
          ++v44;
        }
        while (v42 != v44);
        goto LABEL_27;
      }
    }
    uint64_t v45 = MEMORY[0x263F8EE78];
LABEL_27:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  uint64_t v45 = 0;
LABEL_28:
  uint64_t v56 = *(void *)(v24 + 48);
  type metadata accessor for GetContactAttributeIntentResponse();
  GetContactAttributeIntentResponse.__allocating_init(contactIdentifiers:code:)(v45, 4);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v56);
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_20();
  OUTLINED_FUNCTION_4_2();
  return v59(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, v65, a13, a14, a15, a16);
}

uint64_t @objc GetContactAttributeIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126838, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:));
}

uint64_t @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_21();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  id v11 = a3;
  id v12 = a1;
  return _runTaskForBridgedAsyncMethod(_:)(a6, (uint64_t)v10);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return GetContactAttributeIntentHandler.handle(intent:)();
}

uint64_t GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(void *a1, void *a2)
{
  return GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(a1, a2, (uint64_t (*)(void *, uint64_t))Array<A>.matchingHandles(for:), (uint64_t (*)(void *, uint64_t))Array<A>.matchingHandles(for:), (uint64_t (*)(void *, uint64_t))Array<A>.matchingHandles(for:));
}

uint64_t GetContactAttributeIntentHandler.getAlternatives(contactAttribute:contact:)(void *a1, void *a2)
{
  return GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(a1, a2, (uint64_t (*)(void *, uint64_t))Array<A>.alternativeHandles(for:), (uint64_t (*)(void *, uint64_t))Array<A>.alternativeHandles(for:), (uint64_t (*)(void *, uint64_t))Array<A>.alternativeHandles(for:));
}

uint64_t GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(void *a1, void *a2, uint64_t (*a3)(void *, uint64_t), uint64_t (*a4)(void *, uint64_t), uint64_t (*a5)(void *, uint64_t))
{
  id v10 = objc_msgSend(a1, sel_contactAttributeType);
  if (v10 == (id)1)
  {
    id v14 = objc_msgSend(a2, sel_emailAddresses);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = a4(a1, v15);
  }
  else if (v10 == (id)3)
  {
    id v16 = objc_msgSend(a2, sel_postalAddresses);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = a5(a1, v17);
  }
  else
  {
    if (v10 != (id)2) {
      return 0;
    }
    id v11 = objc_msgSend(a2, sel_phoneNumbers);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = a3(a1, v12);
  }
  uint64_t v18 = v13;
  swift_bridgeObjectRelease();
  return v18;
}

id GetContactAttributeIntentHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactAttributeIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetContactAttributeIntentHandler()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeIntentHandler;
  if (!type metadata singleton initialization cache for GetContactAttributeIntentHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for GetContactAttributeIntentHandler()
{
  return type metadata accessor for GetContactAttributeIntentHandler();
}

uint64_t outlined bridged method (pb) of @objc INObject.identifier.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_identifier);
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc GetContactAttributeIntent.contactHandleMatches.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_contactHandleMatches);
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  type metadata accessor for ContactAttribute();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbgnn) of @objc GetContactAttributeIntent.contactHandleMatches.setter(uint64_t a1, void *a2, SEL *a3)
{
  type metadata accessor for ContactAttribute();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, *a3, isa);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

id specialized GetContactAttributeIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v13);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  id v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t OUTLINED_FUNCTION_0_28@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_4_28(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, a2, a3);
}

uint64_t OUTLINED_FUNCTION_9_20(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_11_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_22(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_14_19(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ContactAttributeResolutionResult();
}

uint64_t OUTLINED_FUNCTION_15_19(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v2;
}

void OUTLINED_FUNCTION_17_16(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_18_15()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_19_13()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_21_10(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_14()
{
  return v0;
}

void OUTLINED_FUNCTION_24_12(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_25_14(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_32_10(uint64_t a1)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
}

uint64_t OUTLINED_FUNCTION_34_12()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_35_10(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void OUTLINED_FUNCTION_37_11(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_39_7()
{
  return v0;
}

uint64_t ContactsAddressHandle.Builder.withAddressLabel(print:speak:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v11 - v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v8 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  outlined init with take of SpeakableString?((uint64_t)v7, (uint64_t)v5);
  uint64_t v9 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?((uint64_t)v5, v9);
  swift_endAccess();
  return swift_retain();
}

uint64_t ContactsAddressHandle.Builder.withAddressHandle(_:)(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAddressHandle.Builder.__deallocating_deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel);
  swift_release();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

unint64_t static ContactsAddressHandle.catTypeName.getter()
{
  return 0xD000000000000016;
}

uint64_t ContactsAddressHandle.init(builder:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_0();
  *(void *)(v1 + 16) = 0;
  uint64_t v6 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v6, v2);
  outlined init with take of SpeakableString?(v2, v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle);
  swift_retain();
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle) = v7;
  return v1;
}

uint64_t ContactsAddressHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_5_0();
  BOOL v10 = a1 == 0x4C73736572646461 && a2 == 0xEC0000006C656261;
  if (v10 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel, v4);
    uint64_t v12 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload(v4, 1, v12) == 1)
    {
      uint64_t result = outlined destroy of SpeakableString?(v4);
LABEL_8:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
    *(void *)(a3 + 24) = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(boxed_opaque_existential_1, v4, v12);
  }
  else
  {
    if (a1 != 0x4873736572646461 || a2 != 0xED0000656C646E61)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle);
    if (!v15) {
      goto LABEL_8;
    }
    *(void *)(a3 + 24) = type metadata accessor for DialogLocation();
    *(void *)a3 = v15;
    return swift_retain();
  }
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional __swiftcall ContactsAddressHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsAddressHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriContactsIntents_ContactsAddressHandle_CodingKeys_addressHandle;
  }
  else {
    v4.value = SiriContactsIntents_ContactsAddressHandle_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ContactsAddressHandle.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x4873736572646461;
  }
  else {
    return 0x4C73736572646461;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsAddressHandle.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsAddressHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsAddressHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsAddressHandle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsAddressHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional *a2@<X8>)
{
  result.value = ContactsAddressHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsAddressHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsAddressHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsAddressHandle.CodingKeys()
{
  return ContactsAddressHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsAddressHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional *a2@<X8>)
{
  result.value = ContactsAddressHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsAddressHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsAddressHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsAddressHandle.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
  swift_release();
  return v0;
}

uint64_t ContactsAddressHandle.__deallocating_deinit()
{
  ContactsAddressHandle.deinit();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t ObjC metadata update function for ContactsAddressHandle()
{
  return type metadata accessor for ContactsAddressHandle(0);
}

uint64_t type metadata accessor for ContactsAddressHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsAddressHandle);
}

void type metadata completion function for ContactsAddressHandle()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsAddressHandle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsAddressHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for DialogLocation();
    lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type DialogLocation and conformance DialogLocation, MEMORY[0x263F6D030]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t ContactsAddressHandle.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsAddressHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsAddressHandle.Builder()
{
  return type metadata accessor for ContactsAddressHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsAddressHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsAddressHandle.Builder);
}

void type metadata completion function for ContactsAddressHandle.Builder()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsAddressHandle.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsAddressHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsAddressHandle(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    OUTLINED_FUNCTION_6_28();
    outlined init with take of SpeakableString?(v8, v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
    type metadata accessor for DialogLocation();
    lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type DialogLocation and conformance DialogLocation, MEMORY[0x263F6D030]);
    OUTLINED_FUNCTION_6_28();
    uint64_t v11 = OUTLINED_FUNCTION_2_28();
    v12(v11);
    *(void *)(v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsAddressHandle()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsAddressHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsAddressHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsAddressHandle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsAddressHandle.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsAddressHandle(void *a1)
{
  return ContactsAddressHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsAddressHandle()
{
  return lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type ContactsAddressHandle and conformance ContactsAddressHandle, (void (*)(uint64_t))type metadata accessor for ContactsAddressHandle);
}

uint64_t base witness table accessor for Encodable in ContactsAddressHandle()
{
  return lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(&lazy protocol witness table cache variable for type ContactsAddressHandle and conformance ContactsAddressHandle, (void (*)(uint64_t))type metadata accessor for ContactsAddressHandle);
}

uint64_t lazy protocol witness table accessor for type ContactsAddressHandle and conformance ContactsAddressHandle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactsAddressHandle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D546014);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactsAddressHandle.CodingKeys()
{
  return &type metadata for ContactsAddressHandle.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_6_28()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t UsoTask_request_common_Person.contactIds.getter()
{
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  if (v3)
  {
    uint64_t v0 = UsoEntity_common_Person.contactIds.getter();
    swift_release();
  }
  else
  {
    uint64_t v0 = MEMORY[0x263F8EE78];
  }
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
  if (v3)
  {
    uint64_t v1 = UsoEntity_common_Person.contactIds.getter();
    swift_release();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE78];
  }
  specialized Array.append<A>(contentsOf:)(v1);
  return v0;
}

uint64_t UsoTask_update_common_Person.updateTaskType.getter()
{
  if (UsoTask_update_common_Person.isUpdateNicknameTask.getter()) {
    return 0;
  }
  if (UsoTask_update_common_Person.isUpdateRelationshipTask.getter()) {
    return 1;
  }
  return 2;
}

uint64_t UsoTask_update_common_Person.updateRelationshipInfoLocation.getter()
{
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
  if (v3 && (uint64_t v0 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), v0))
  {
    swift_release();
    return 0;
  }
  else
  {
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    if (v3 && (uint64_t v2 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), v2))
    {
      swift_release();
      return 1;
    }
    else
    {
      return 2;
    }
  }
}

uint64_t UsoTask_noVerb_common_Person.isGetAttributeIntent.getter()
{
  return UsoTask_noVerb_common_Person.isGetAttributeIntent.getter(MEMORY[0x263F722C0]);
}

uint64_t UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter()
{
  return UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter(MEMORY[0x263F722C0]);
}

uint64_t UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter()
{
  return UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter(MEMORY[0x263F72C40]);
}

uint64_t UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  MEMORY[0x270FA5388](v3 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  OUTLINED_FUNCTION_0_29();
  uint64_t v8 = v7;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v28 - v17;
  a1(&v29, v16);
  if (!v29 || (uint64_t v19 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), swift_release(), !v19))
  {
    OUTLINED_FUNCTION_4_29();
    goto LABEL_7;
  }
  dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_3_0(v6);
  if (v20)
  {
LABEL_7:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    char v25 = 0;
    return v25 & 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v18, v6, v1);
  uint64_t v21 = *(void (**)(uint64_t))(v8 + 104);
  uint64_t v22 = OUTLINED_FUNCTION_5_30();
  v21(v22);
  char v23 = specialized == infix<A>(_:_:)((uint64_t)v18, (uint64_t)v15);
  uint64_t v24 = *(void (**)(void))(v8 + 8);
  OUTLINED_FUNCTION_1_33();
  v24();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v18, v1);
  if (v23)
  {
    OUTLINED_FUNCTION_1_33();
    v24();
    OUTLINED_FUNCTION_1_33();
    v24();
    char v25 = 1;
  }
  else
  {
    uint64_t v27 = OUTLINED_FUNCTION_5_30();
    v21(v27);
    char v25 = specialized == infix<A>(_:_:)((uint64_t)v12, (uint64_t)v15);
    OUTLINED_FUNCTION_1_33();
    v24();
    OUTLINED_FUNCTION_1_33();
    v24();
    OUTLINED_FUNCTION_1_33();
    v24();
  }
  return v25 & 1;
}

uint64_t UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter()
{
  return UsoTask_noVerb_common_Person.isGetAttributeIntent.getter(MEMORY[0x263F72C40]);
}

uint64_t UsoTask_noVerb_common_Person.isGetAttributeIntent.getter(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v6);
  if (!v6) {
    return 0;
  }
  uint64_t v1 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
  swift_release();
  if (!v1)
  {
    uint64_t v2 = dispatch thunk of UsoEntity_common_Person.structuredName.getter();
    swift_release();
    if (!v2)
    {
      uint64_t v3 = dispatch thunk of UsoEntity_common_Person.age.getter();
      swift_release();
      if (!v3)
      {
        uint64_t v5 = dispatch thunk of UsoEntity_common_Person.associatedDate.getter();
        swift_release();
        if (!v5) {
          return 0;
        }
      }
    }
  }
  swift_release();
  return 1;
}

BOOL static UsoTask_update_common_Person.UpdateRelationshipInfoLocation.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

unint64_t UsoTask_update_common_Person.isChangeContactPoster.getter()
{
  type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues();
  OUTLINED_FUNCTION_0_29();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_commonContact_ContactAttribute.DefinedValues?, UsoEntity_commonContact_ContactAttribute.DefinedValues?));
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v25 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v25 - v18;
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  if (!v26) {
    goto LABEL_21;
  }
  unint64_t v20 = dispatch thunk of UsoEntity_common_Person.attributes.getter();
  swift_release();
  if (!v20) {
    return v20 & 1;
  }
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    OUTLINED_FUNCTION_4_29();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_10;
  }
LABEL_5:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v20 & 0xC000000000000001) == 0, v20);
  if ((v20 & 0xC000000000000001) != 0) {
    MEMORY[0x230F854E0](0, v20);
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (!v26) {
    goto LABEL_11;
  }
  dispatch thunk of UsoEntity_commonContact_ContactAttribute.definedValue.getter();
  swift_release();
LABEL_12:
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v17, *MEMORY[0x263F72430], v0);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v0);
  unint64_t v20 = v10 + *(int *)(v7 + 48);
  outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?((uint64_t)v19, v10);
  outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?((uint64_t)v17, v20);
  OUTLINED_FUNCTION_3_0(v10);
  if (!v22)
  {
    outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?(v10, (uint64_t)v14);
    OUTLINED_FUNCTION_3_0(v20);
    if (!v22)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 32))(v6, v20, v0);
      lazy protocol witness table accessor for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues();
      LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v24(v6, v0);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
      v24((uint64_t)v14, v0);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
      return v20 & 1;
    }
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v14, v0);
    goto LABEL_20;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  OUTLINED_FUNCTION_3_0(v20);
  if (!v22)
  {
LABEL_20:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for (UsoEntity_commonContact_ContactAttribute.DefinedValues?, UsoEntity_commonContact_ContactAttribute.DefinedValues?));
LABEL_21:
    LOBYTE(v20) = 0;
    return v20 & 1;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  LOBYTE(v20) = 1;
  return v20 & 1;
}

uint64_t UsoTask_update_common_Person.isUpdateNicknameTask.getter()
{
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  if (!v2) {
    return 0;
  }
  uint64_t v0 = dispatch thunk of UsoEntity_common_Person.structuredName.getter();
  swift_release();
  if (!v0) {
    return 0;
  }
  swift_release();
  return 1;
}

uint64_t UsoTask_update_common_Person.isUpdateRelationshipTask.getter()
{
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
  if (!v3 || (uint64_t v0 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), !v0))
  {
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    if (!v3) {
      return 0;
    }
    uint64_t v1 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
    swift_release();
    if (!v1) {
      return 0;
    }
  }
  swift_release();
  return 1;
}

uint64_t outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues)
  {
    type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_29()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_5_30()
{
  return v0;
}

id SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v14, sel_setTitle_, a1);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a2, v14, &lazy cache variable for type metadata for SFRichText, 0x263F679F0, (SEL *)&selRef_setDescriptions_);
  objc_msgSend(v14, sel_setFootnote_, a5);
  if (a4) {
    objc_msgSend(v14, sel_setThumbnail_, a4);
  }
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a3, v14, &lazy cache variable for type metadata for SFAbstractCommand, 0x263F67788, (SEL *)&selRef_setCommands_);
  if (a6) {
    objc_msgSend(v14, sel_setAction_, a6);
  }
  id v15 = v14;
  if (a7)
  {
    id v15 = a7;
    objc_msgSend(v14, sel_setTrailingMiddleText_, v15);
  }
  return v14;
}

id SFRowCardSection.init(blueTitle:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return SFRowCardSection.init(blueTitle:subtitle:commands:)(a1, a2, a3, a4, 4);
}

id @nonobjc SFFormattedText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_textWithString_, v2);

  return v3;
}

id SFRowCardSection.init(title:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return SFRowCardSection.init(blueTitle:subtitle:commands:)(a1, a2, a3, a4, 0);
}

id SFRowCardSection.init(blueTitle:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
  id v11 = v10;
  id v12 = @nonobjc SFFormattedText.__allocating_init(string:)(a1, a2);
  if (v12)
  {
    uint64_t v13 = v12;
    objc_msgSend(v12, sel_setTextColor_, a5);
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F679F0]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_22D59FB50;
    *(void *)(v15 + 32) = v13;
    uint64_t v18 = v15;
    specialized Array._endMutation()();
    id v16 = v13;
    outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v18, v14, &lazy cache variable for type metadata for SFFormattedText, 0x263F678B8, (SEL *)&selRef_setFormattedTextPieces_);
    objc_msgSend(v11, sel_setLeadingText_, v14);
  }
  objc_msgSend(v11, sel_setLeadingSubtitle_, a3);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a4, v11, &lazy cache variable for type metadata for SFAbstractCommand, 0x263F67788, (SEL *)&selRef_setCommands_);

  return v11;
}

id SFRowCardSection.init(leadingText:image:)(void *a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v4, sel_setLeadingText_, a1);
  objc_msgSend(v4, sel_setImage_, a2);

  return v4;
}

id SFContactImage.init(contactId:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v10 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22D59FD50;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  id v12 = v10;
  outlined bridged method (mbnn) of @objc SFContactImage.contactIdentifiers.setter(v11, v12);
  if ((a5 & 1) == 0) {
    objc_msgSend(v12, sel_setSize_, *(double *)&a3, *(double *)&a4);
  }

  return v12;
}

id SFActionItem.init(phoneNumber:)(uint64_t a1, uint64_t a2)
{
  return SFActionItem.init(phoneNumber:)(a1, a2, (SEL *)&selRef_setPhoneNumber_);
}

id SFActionItem.init(email:)(uint64_t a1, uint64_t a2)
{
  return SFActionItem.init(phoneNumber:)(a1, a2, (SEL *)&selRef_setEmail_);
}

id SFActionItem.init(phoneNumber:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v7 = v6;
  if (a2)
  {
    uint64_t v8 = (void *)MEMORY[0x230F84F70](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_msgSend(v6, *a3, v8);

  return v6;
}

id SFRichText.init(string:bold:color:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  id v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
  id v9 = v8;
  id v10 = @nonobjc SFFormattedText.__allocating_init(string:)(a1, a2);
  if (v10)
  {
    uint64_t v11 = v10;
    objc_msgSend(v10, sel_setIsBold_, a3 & 1);
    objc_msgSend(v11, sel_setTextColor_, a4);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_22D59FB50;
    *(void *)(v12 + 32) = v11;
    uint64_t v15 = v12;
    specialized Array._endMutation()();
    id v13 = v11;
    outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v15, v9, &lazy cache variable for type metadata for SFFormattedText, 0x263F678B8, (SEL *)&selRef_setFormattedTextPieces_);
  }
  return v9;
}

void outlined bridged method (mbnn) of @objc SFContactImage.contactIdentifiers.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setContactIdentifiers_, isa);
}

id AgeDateTime.__allocating_init(dateComponents:qualifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_5();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_allocWithZone(v2);
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  uint64_t v15 = static String.EMPTY.getter();
  id v16 = (void *)MEMORY[0x230F84F70](v15);
  swift_bridgeObjectRelease();
  id v17 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v12, v14, (uint64_t)v16, v11);

  id v18 = v17;
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, sel_setDateComponents_, isa);

  objc_msgSend(v18, sel_setQualifier_, a2);
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v20 + 8))(a1);
  return v18;
}

{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  Class isa;
  uint64_t v26;
  int EnumTagSinglePayload;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v35 - v9;
  id v11 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_5();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = objc_allocWithZone(v2);
  UUID.init()();
  id v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
  uint64_t v21 = static String.EMPTY.getter();
  uint64_t v22 = (void *)MEMORY[0x230F84F70](v21);
  swift_bridgeObjectRelease();
  char v23 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v18, v20, (uint64_t)v22, v17);

  uint64_t v24 = v23;
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, sel_setDateComponents_, isa);

  outlined init with copy of TerminalElement.Qualifier?(a2, (uint64_t)v10);
  uint64_t v26 = type metadata accessor for TerminalElement.Qualifier();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v26);
  uint64_t v28 = 0;
  if (EnumTagSinglePayload != 1)
  {
    outlined init with copy of TerminalElement.Qualifier?((uint64_t)v10, (uint64_t)v8);
    OUTLINED_FUNCTION_0_5();
    uint64_t v30 = v29;
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v8, v26);
    if (v32 == *MEMORY[0x263F72870])
    {
      uint64_t v28 = 1;
    }
    else if (v32 == *MEMORY[0x263F72878])
    {
      uint64_t v28 = 2;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v26);
      uint64_t v28 = 0;
    }
  }
  objc_msgSend(v24, sel_setQualifier_, v28);

  outlined destroy of TerminalElement.Qualifier?(a2);
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v33 + 8))(a1);
  outlined destroy of TerminalElement.Qualifier?((uint64_t)v10);
  return v24;
}

id outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a4, sel_initWithIdentifier_displayString_, v6, a3);

  return v7;
}

uint64_t outlined destroy of TerminalElement.Qualifier?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ModifyContactAttributeCATsModern()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeCATsModern;
  if (!type metadata singleton initialization cache for ModifyContactAttributeCATsModern) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int EnumTagSinglePayload;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_15_3();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_27_0();
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  v0[5] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D59FD50;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = 0xD000000000000011;
  *(void *)(v4 + 40) = 0x800000022D5A7820;
  _s10Foundation3URLVSgWOcTm_0(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v6);
  uint64_t v8 = v0[4];
  if (EnumTagSinglePayload == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(boxed_opaque_existential_1, v8, v6);
  }
  id v10 = (void *)OUTLINED_FUNCTION_6_4();
  v0[6] = v10;
  *id v10 = v0;
  v10[1] = ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:);
  id v11 = OUTLINED_FUNCTION_3_27(0xD00000000000002CLL);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  uint8_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v6);
  v1[7] = OUTLINED_FUNCTION_31();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  void (*v16)(void);
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;

  OUTLINED_FUNCTION_15_3();
  uint64_t v21 = v1;
  OUTLINED_FUNCTION_27_0();
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  v0[11] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D5A01D0;
  *(void *)(v4 + 32) = 0xD000000000000015;
  *(void *)(v4 + 40) = 0x800000022D5A7640;
  _s10Foundation3URLVSgWOcTm_0(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_14(v5);
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 72) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v7();
  }
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[3];
  *(void *)(v4 + 80) = 0xD000000000000014;
  *(void *)(v4 + 88) = 0x800000022D5A77C0;
  _s10Foundation3URLVSgWOcTm_0(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1, v3);
  uint64_t v11 = v0[9];
  if (EnumTagSinglePayload == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[9], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 120) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v12();
  }
  uint64_t v13 = OUTLINED_FUNCTION_7_23();
  _s10Foundation3URLVSgWOcTm_0(v13, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_3();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 168) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v14();
  }
  uint64_t v15 = OUTLINED_FUNCTION_5_31();
  _s10Foundation3URLVSgWOcTm_0(v15, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_23();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 216) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v16();
  }
  id v17 = (void *)OUTLINED_FUNCTION_6_4();
  v0[12] = v17;
  *id v17 = v0;
  v17[1] = ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:);
  id v18 = OUTLINED_FUNCTION_3_27(0xD000000000000030);
  return v19(v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  uint8_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v6);
  v1[7] = OUTLINED_FUNCTION_31();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  void (*v16)(void);
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;

  OUTLINED_FUNCTION_15_3();
  uint64_t v21 = v1;
  OUTLINED_FUNCTION_27_0();
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  v0[11] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D5A01D0;
  *(void *)(v4 + 32) = 0x4E64657461647075;
  *(void *)(v4 + 40) = 0xEF656D616E6B6369;
  _s10Foundation3URLVSgWOcTm_0(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_14(v5);
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 72) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v7();
  }
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[3];
  *(void *)(v4 + 80) = 0xD000000000000010;
  *(void *)(v4 + 88) = 0x800000022D5A7760;
  _s10Foundation3URLVSgWOcTm_0(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1, v3);
  uint64_t v11 = v0[9];
  if (EnumTagSinglePayload == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[9], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 120) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v12();
  }
  uint64_t v13 = OUTLINED_FUNCTION_7_23();
  _s10Foundation3URLVSgWOcTm_0(v13, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_3();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 168) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v14();
  }
  uint64_t v15 = OUTLINED_FUNCTION_5_31();
  _s10Foundation3URLVSgWOcTm_0(v15, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_23();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 216) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v16();
  }
  id v17 = (void *)OUTLINED_FUNCTION_6_4();
  v0[12] = v17;
  *id v17 = v0;
  v17[1] = ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:);
  id v18 = OUTLINED_FUNCTION_3_27(0xD000000000000032);
  return v19(v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  uint8_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_37();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  *(unsigned char *)(v1 + 96) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_31();
  *(void *)(v1 + 56) = swift_task_alloc();
  *(void *)(v1 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v19;

  OUTLINED_FUNCTION_15_3();
  uint64_t v19 = v1;
  OUTLINED_FUNCTION_27_0();
  char v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D5A01D0;
  *(void *)(v4 + 32) = 0xD000000000000013;
  *(void *)(v4 + 40) = 0x800000022D5A7700;
  _s10Foundation3URLVSgWOcTm_0(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_20_3();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v7();
  }
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 24);
  *(void *)(v4 + 80) = 0x4E746361746E6F63;
  *(void *)(v4 + 88) = 0xEB00000000656D61;
  _s10Foundation3URLVSgWOcTm_0(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_23();
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 120) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v10();
  }
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 32);
  *(void *)(v4 + 128) = 0x704F796669646F6DLL;
  *(void *)(v4 + 136) = 0xEF6E6F6974617265;
  _s10Foundation3URLVSgWOcTm_0(v12, v11, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v11, 1, v5) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v4 + 168) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 144));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v13();
  }
  uint64_t v14 = *(unsigned char *)(v0 + 96);
  *(void *)(v4 + 176) = 0x4D6563696F567369;
  *(void *)(v4 + 184) = 0xEB0000000065646FLL;
  *(void *)(v4 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v4 + 192) = v14;
  uint64_t v15 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 80) = v15;
  *uint64_t v15 = v0;
  v15[1] = ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:);
  id v16 = OUTLINED_FUNCTION_3_27(0xD000000000000036);
  return v17(v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  uint8_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_37();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ModifyContactAttributeCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ModifyContactAttributeCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ModifyContactAttributeCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  _s10Foundation3URLVSgWOcTm_0(a1, v14 - v13, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(a1, &demangling cache variable for type metadata for URL?);
  return v15;
}

uint64_t ModifyContactAttributeCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t ObjC metadata update function for ModifyContactAttributeCATsModern()
{
  return type metadata accessor for ModifyContactAttributeCATsModern();
}

uint64_t OUTLINED_FUNCTION_3_27@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_31()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 176) = 0x704F796669646F6DLL;
  *(void *)(v1 + 184) = 0xEF6E6F6974617265;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_23()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x4E746361746E6F63;
  *(void *)(v1 + 136) = 0xEB00000000656D61;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_19_14(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t RRReferenceResolverProtocol.resolveCommonPerson()@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  UsoEntityBuilder_common_Person.init()();
  uint64_t v6 = MEMORY[0x230F837B0]();
  swift_release();
  if (v6)
  {
    RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v6, a1, a2, a3);
    return swift_release();
  }
  else
  {
    uint64_t v8 = type metadata accessor for RREntity();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v8);
  }
}

uint64_t RRReferenceResolverProtocol.resolveAttributeDisambiguationReference(from:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x270FA5388](v5 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  uint64_t v15 = v14 - v13;
  RRReferenceResolverProtocol.resolvePositionEntity(from:)(a2, a3, v8);
  if (__swift_getEnumTagSinglePayload(v8, 1, v9) == 1)
  {
    outlined destroy of Result<TemplatingResult, Error>(v8, &demangling cache variable for type metadata for RREntity?);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v8, v9);
    RREntity.usoEntity.getter();
    type metadata accessor for UsoEntity_common_ContactAddress();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v16 = v24;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_7_24();
      uint64_t v24 = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v20 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      uint64_t v21 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v18, v19, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_ContactAddress: %s", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
  }
  return v16;
}

uint64_t RRReferenceResolverProtocol.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  v169 = a3;
  uint64_t v166 = a1;
  uint64_t v167 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x270FA5388](v5 - 8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v151 = v6;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v7);
  uint64_t v156 = (uint64_t)&v149 - v8;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v9);
  uint64_t v154 = (uint64_t)&v149 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v152 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  v155 = (char *)&v149 - v14;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v15);
  v153 = (char *)&v149 - v16;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v17);
  v158 = (char *)&v149 - v18;
  uint64_t v165 = type metadata accessor for RRCandidate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v159 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_4_4();
  uint64_t v157 = v21;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v22);
  v162 = (char *)&v149 - v23;
  uint64_t v24 = type metadata accessor for RRResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v164 = v25;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_4_4();
  v150 = v27;
  OUTLINED_FUNCTION_17();
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (NSObject **)((char *)&v149 - v30);
  MEMORY[0x270FA5388](v29);
  id v33 = (char *)&v149 - v32;
  uint64_t v34 = type metadata accessor for RRQuery();
  OUTLINED_FUNCTION_0_0();
  uint64_t v36 = v35;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_15();
  os_log_type_t v40 = (void *)(v39 - v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  OUTLINED_FUNCTION_15_0();
  uint64_t v42 = MEMORY[0x270FA5388](v41);
  uint64_t v44 = (void **)((char *)&v149 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v42);
  id v46 = (char *)&v149 - v45;
  uint64_t v160 = type metadata accessor for RREntity();
  v161 = a4;
  __swift_storeEnumTagSinglePayload(a4, 1, 1, v160);
  *os_log_type_t v40 = v166;
  (*(void (**)(void *, void, uint64_t))(v36 + 104))(v40, *MEMORY[0x263F74278], v34);
  swift_retain();
  dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)();
  uint64_t v47 = (uint64_t)v46;
  OUTLINED_FUNCTION_35_8();
  v48();
  outlined init with copy of Result<RRResult, Error>((uint64_t)v46, (uint64_t)v44, &demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v49 = *v44;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.siriContacts);
    id v51 = v49;
    id v52 = v49;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = OUTLINED_FUNCTION_35();
      uint64_t v170 = (uint64_t)v49;
      v171[0] = v56;
      *(_DWORD *)uint64_t v55 = 136315138;
      id v57 = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v58 = String.init<A>(describing:)();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v53, v54, "#ReferenceResolution Received a failure: %s -> nil", v55, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      uint64_t v60 = v47;
      return outlined destroy of Result<TemplatingResult, Error>(v60, &demangling cache variable for type metadata for Result<RRResult, Error>);
    }

LABEL_12:
    uint64_t v60 = v47;
    return outlined destroy of Result<TemplatingResult, Error>(v60, &demangling cache variable for type metadata for Result<RRResult, Error>);
  }
  uint64_t v61 = v164;
  (*(void (**)(char *, void **, uint64_t))(v164 + 32))(v33, v44, v24);
  uint64_t v62 = *(void (**)(NSObject **, char *, uint64_t))(v61 + 16);
  v62(v31, v33, v24);
  int v63 = (*(uint64_t (**)(NSObject **, uint64_t))(v61 + 88))(v31, v24);
  int v64 = *MEMORY[0x263F742B8];
  uint64_t v163 = v24;
  uint64_t v65 = v33;
  if (v63 == v64)
  {
    uint64_t v66 = OUTLINED_FUNCTION_3_28();
    v67(v66);
    uint64_t v68 = v159;
    v69 = (uint8_t *)v162;
    uint64_t v70 = v165;
    (*(void (**)(char *, NSObject **, uint64_t))(v159 + 32))(v162, v31, v165);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    v169 = v65;
    uint64_t v71 = type metadata accessor for Logger();
    uint64_t v72 = __swift_project_value_buffer(v71, (uint64_t)static Logger.siriContacts);
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(v68 + 16))(v157, v69, v70);
    v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)OUTLINED_FUNCTION_7_24();
      v171[0] = OUTLINED_FUNCTION_35();
      *(_DWORD *)v75 = 136315138;
      v69 = &v75[v72];
      lazy protocol witness table accessor for type RRResult and conformance RRResult(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x263F74140]);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v171);
      OUTLINED_FUNCTION_21_11(v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v79 = OUTLINED_FUNCTION_19_15();
      ((void (*)(uint64_t, uint64_t))&v75[v72])(v79, v165);
      _os_log_impl(&dword_22D49E000, v73, v74, "#ReferenceResolution Found a candidate %s", v75, 0xCu);
      OUTLINED_FUNCTION_12_18();
      OUTLINED_FUNCTION_2();
      uint64_t v70 = v165;
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v97 = OUTLINED_FUNCTION_19_15();
      ((void (*)(uint64_t, uint64_t))v69)(v97, v70);
    }

    uint64_t v98 = (uint64_t)v158;
    v99 = v162;
    RRCandidate.entity.getter();
    ((void (*)(char *, uint64_t))v69)(v99, v70);
    OUTLINED_FUNCTION_35_8();
    v100();
    uint64_t v101 = outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_17_17(v101, &demangling cache variable for type metadata for RREntity?);
    __swift_storeEnumTagSinglePayload(v98, 0, 1, v160);
    uint64_t v102 = v98;
    return outlined init with take of RREntity?(v102, (uint64_t)v73);
  }
  if (v63 == *MEMORY[0x263F742C8])
  {
    uint64_t v81 = OUTLINED_FUNCTION_3_28();
    v82(v81);
    v73 = *v31;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.siriContacts);
    v84 = (void *)Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v85))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v86, v87, "#ReferenceResolution Found ambiguous entities -> returning the first one");
      OUTLINED_FUNCTION_2();
    }

    uint64_t v88 = v156;
    specialized Collection.first.getter((uint64_t)v73, v156);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_23(v88);
    uint64_t v89 = (uint64_t)v155;
    if (!v90)
    {
LABEL_41:
      RRCandidate.entity.getter();
      uint64_t v122 = OUTLINED_FUNCTION_1_34();
      v123(v122);
      uint64_t v124 = outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
      OUTLINED_FUNCTION_17_17(v124, &demangling cache variable for type metadata for RREntity?);
      (*(void (**)(uint64_t, void (*)(NSObject **, char *, uint64_t)))(v159 + 8))(v88, v62);
      goto LABEL_42;
    }
    goto LABEL_21;
  }
  if (v63 == *MEMORY[0x263F742C0])
  {
    uint64_t v103 = OUTLINED_FUNCTION_3_28();
    v104(v103);
    v73 = *v31;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    __swift_project_value_buffer(v105, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain();
    v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v107))
    {
      v108 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v108 = 134217984;
      v171[0] = (uint64_t)v73[2].isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v106, (os_log_type_t)v62, "#ReferenceResolution Found %ld candidates. Using the first one", v108, 0xCu);
      OUTLINED_FUNCTION_2();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v89 = (uint64_t)v153;
    uint64_t v88 = v154;
    specialized Collection.first.getter((uint64_t)v73, v154);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_23(v88);
    if (!v90) {
      goto LABEL_41;
    }
LABEL_21:
    uint64_t v91 = OUTLINED_FUNCTION_1_34();
    v92(v91);
    uint64_t v93 = outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_17_17(v93, &demangling cache variable for type metadata for RREntity?);
    v94 = &demangling cache variable for type metadata for RRCandidate?;
    uint64_t v95 = v88;
    goto LABEL_22;
  }
  if (v63 == *MEMORY[0x263F742D0])
  {
    uint64_t v109 = OUTLINED_FUNCTION_3_28();
    v110(v109);
    v73 = *v31;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v111 = type metadata accessor for Logger();
    __swift_project_value_buffer(v111, (uint64_t)static Logger.siriContacts);
    v112 = (void *)Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.debug.getter();
    BOOL v114 = OUTLINED_FUNCTION_4_0(v113);
    uint64_t v115 = v151;
    if (v114)
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_2_33(&dword_22D49E000, v116, v117, "#ReferenceResolution Found ambiguous entities -> returning the first one");
      OUTLINED_FUNCTION_2();
    }

    uint64_t v89 = v152;
    if (v73[2].isa)
    {
      uint64_t isa = (uint64_t)v73[4].isa;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Collection.first.getter(isa, v115);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_23(v115);
      if (!v90)
      {
        RRCandidate.entity.getter();
        uint64_t v146 = OUTLINED_FUNCTION_1_34();
        v147(v146);
        uint64_t v148 = outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
        OUTLINED_FUNCTION_17_17(v148, &demangling cache variable for type metadata for RREntity?);
        (*(void (**)(uint64_t, void (*)(NSObject **, char *, uint64_t)))(v159 + 8))(v115, v62);
LABEL_42:
        uint64_t v96 = 0;
        goto LABEL_43;
      }
      uint64_t v119 = OUTLINED_FUNCTION_1_34();
      v120(v119);
      uint64_t v121 = outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
      OUTLINED_FUNCTION_17_17(v121, &demangling cache variable for type metadata for RREntity?);
      v94 = &demangling cache variable for type metadata for RRCandidate?;
      uint64_t v95 = v115;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v144 = OUTLINED_FUNCTION_1_34();
      v145(v144);
      outlined destroy of Result<TemplatingResult, Error>(v47, &demangling cache variable for type metadata for Result<RRResult, Error>);
      v94 = &demangling cache variable for type metadata for RREntity?;
      v73 = v161;
      uint64_t v95 = (uint64_t)v161;
    }
LABEL_22:
    outlined destroy of Result<TemplatingResult, Error>(v95, v94);
    uint64_t v96 = 1;
LABEL_43:
    __swift_storeEnumTagSinglePayload(v89, v96, 1, v160);
    uint64_t v102 = v89;
    return outlined init with take of RREntity?(v102, (uint64_t)v73);
  }
  if (v63 == *MEMORY[0x263F742D8])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v125 = type metadata accessor for Logger();
    __swift_project_value_buffer(v125, (uint64_t)static Logger.siriContacts);
    v126 = (void *)Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v127))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v128, v129, "#ReferenceResolution No matches found");
      OUTLINED_FUNCTION_2();
    }

    uint64_t v130 = OUTLINED_FUNCTION_1_34();
    v131(v130);
    goto LABEL_12;
  }
  v168 = v31;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v132 = type metadata accessor for Logger();
  __swift_project_value_buffer(v132, (uint64_t)static Logger.siriContacts);
  v133 = v150;
  v62(v150, v33, v163);
  v134 = Logger.logObject.getter();
  os_log_type_t v135 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v134, v135))
  {
    uint64_t v136 = OUTLINED_FUNCTION_7_24();
    v169 = v65;
    v137 = (uint8_t *)v136;
    v171[0] = OUTLINED_FUNCTION_35();
    *(_DWORD *)v137 = 136315138;
    uint64_t v138 = v163;
    uint64_t v167 = v47;
    lazy protocol witness table accessor for type RRResult and conformance RRResult(&lazy protocol witness table cache variable for type RRResult and conformance RRResult, MEMORY[0x263F742E0]);
    uint64_t v139 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v140, v171);
    OUTLINED_FUNCTION_21_11(v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v142 = *(void (**)(void))(v61 + 8);
    ((void (*)(NSObject **, uint64_t))v142)(v133, v138);
    _os_log_impl(&dword_22D49E000, v134, v135, "#ReferenceResolution Received unknown result type %s", v137, 0xCu);
    OUTLINED_FUNCTION_12_18();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    ((void (*)(char *, uint64_t))v142)(v169, v138);
    uint64_t v143 = v167;
  }
  else
  {

    v142 = *(void (**)(void))(v61 + 8);
    OUTLINED_FUNCTION_35_8();
    v142();
    OUTLINED_FUNCTION_35_8();
    v142();
    uint64_t v143 = v47;
  }
  outlined destroy of Result<TemplatingResult, Error>(v143, &demangling cache variable for type metadata for Result<RRResult, Error>);
  return ((uint64_t (*)(NSObject **, uint64_t))v142)(v168, v163);
}

uint64_t RRReferenceResolverProtocol.resolvePositionEntity(from:)@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.preferredUserDialogAct.getter((uint64_t)v11);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    uint64_t v14 = (uint64_t)v11;
  }
  else
  {
    uint64_t v15 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    if (!v15) {
      goto LABEL_9;
    }
    uint64_t v16 = static RRReferenceResolverProtocol.extractPositionEntity(task:)();
    if (!v16)
    {
      swift_release();
      goto LABEL_9;
    }
    RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v16, a1, a2, (uint64_t)v8);
    swift_release();
    swift_release();
    uint64_t v17 = type metadata accessor for RREntity();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v17) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a3, v8, v17);
      uint64_t v23 = a3;
      uint64_t v24 = 0;
      uint64_t v22 = v17;
      return __swift_storeEnumTagSinglePayload(v23, v24, 1, v22);
    }
    uint64_t v13 = &demangling cache variable for type metadata for RREntity?;
    uint64_t v14 = (uint64_t)v8;
  }
  outlined destroy of Result<TemplatingResult, Error>(v14, v13);
LABEL_9:
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriContacts);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_22D49E000, v19, v20, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v21, 2u);
    MEMORY[0x230F85DE0](v21, -1, -1);
  }

  uint64_t v22 = type metadata accessor for RREntity();
  uint64_t v23 = a3;
  uint64_t v24 = 1;
  return __swift_storeEnumTagSinglePayload(v23, v24, 1, v22);
}

uint64_t static RRReferenceResolverProtocol.extractPositionEntity(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v18) {
    goto LABEL_18;
  }
  outlined init with copy of Result<RRResult, Error>((uint64_t)v17, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_noVerb_uso_NoEntity();
  if (OUTLINED_FUNCTION_5_32())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v15)
    {
      swift_retain();
      uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
      swift_release();
      swift_release();
      if (v0)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v1 = type metadata accessor for Logger();
        __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
        swift_retain_n();
        uint64_t v2 = Logger.logObject.getter();
        os_log_type_t v3 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v2, v3))
        {
          uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_7_24();
          uint64_t v15 = OUTLINED_FUNCTION_35();
          *(_DWORD *)uint64_t v4 = 136315138;
          CodeGenBase.entity.getter();
          uint64_t v5 = UsoEntity.debugString.getter();
          unint64_t v7 = v6;
          swift_release();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v2, v3, "#ReferenceResolution Found positional reference, returning: %s", v4, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          swift_release_n();
        }
        swift_retain();
        uint64_t v8 = CodeGenBase.entity.getter();
        swift_release();
        swift_release_n();
        goto LABEL_25;
      }
      swift_release();
    }
    swift_release();
    goto LABEL_17;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_5_32())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
LABEL_14:
    swift_release();
    uint64_t v8 = static RRReferenceResolverProtocol.helper(person:)(v15);
    swift_release();
    swift_release();
LABEL_25:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    outlined destroy of Result<TemplatingResult, Error>((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    return v8;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_5_32()
    || (type metadata accessor for UsoTask_read_common_Person(), OUTLINED_FUNCTION_5_32()))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    goto LABEL_14;
  }
LABEL_17:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
LABEL_18:
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v17, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  uint64_t v10 = (void *)Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v11))
  {
    *(_WORD *)OUTLINED_FUNCTION_20() = 0;
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v12, v13, "#ReferenceResolution Found no positional reference, returning nil");
    OUTLINED_FUNCTION_2();
  }

  return 0;
}

uint64_t static RRReferenceResolverProtocol.helper(person:)(uint64_t a1)
{
  if (a1)
  {
    swift_retain();
    uint64_t v1 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    if (v1)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
      swift_retain_n();
      os_log_type_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_24();
        uint64_t v16 = OUTLINED_FUNCTION_35();
        *(_DWORD *)uint64_t v5 = 136315138;
        CodeGenBase.entity.getter();
        uint64_t v6 = UsoEntity.debugString.getter();
        unint64_t v8 = v7;
        swift_release();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v3, v4, "#ReferenceResolution Found positional reference, returning: %s", v5, 0xCu);
        OUTLINED_FUNCTION_12_18();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {

        swift_release_n();
      }
      swift_retain();
      uint64_t v14 = CodeGenBase.entity.getter();
      swift_release_n();
      return v14;
    }
    swift_release();
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  uint64_t v10 = (void *)Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v11))
  {
    *(_WORD *)OUTLINED_FUNCTION_20() = 0;
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v12, v13, "#ReferenceResolution Found no positional reference, returning nil");
    OUTLINED_FUNCTION_2();
  }

  return 0;
}

uint64_t outlined init with take of RREntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type RRResult and conformance RRResult(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Result<RRResult, Error>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_32()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_24()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_23(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, *(void *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_17_17(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(v2 - 176);
  return outlined destroy of Result<TemplatingResult, Error>(v4, a2);
}

uint64_t OUTLINED_FUNCTION_19_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_11(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t UsoEntity_common_Person.contactId.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    v20[1] = v8;
    uint64_t v21 = v2;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    uint64_t v10 = v2 + 16;
    os_log_type_t v11 = v12;
    unint64_t v13 = v8 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v14 = *(void *)(v10 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(v4, v13, v0);
      if (closure #1 in UsoEntity_common_Person.contactId.getter()) {
        break;
      }
      uint64_t v15 = OUTLINED_FUNCTION_10_24();
      v16(v15);
      v13 += v14;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 1;
        uint64_t v2 = v21;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v21;
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v7, v4, v0);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_8:
  __swift_storeEnumTagSinglePayload(v7, v17, 1, v0);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v7, 1, v0) == 1)
  {
    outlined destroy of UsoIdentifier?(v7);
    return 0;
  }
  else
  {
    uint64_t v18 = UsoIdentifier.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v0);
  }
  return v18;
}

uint64_t UsoEntity_common_PostalAddress.requestedAddressField.getter()
{
  uint64_t v0 = (char *)static ContactNLIntent.ContactPostalAddressField.allCases.getter();
  uint64_t v1 = *((void *)v0 + 2);
  if (v1)
  {
    uint64_t v2 = v0 + 32;
    while (1)
    {
      uint64_t v4 = *v2++;
      uint64_t v3 = v4;
      CodeGenBase.entity.getter();
      uint64_t v5 = UsoEntity.attributes.getter();
      swift_release();
      if (!*(void *)(v5 + 16)) {
        break;
      }
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)&aCity_2[8 * v3], qword_22D5A4078[v3]);
      if ((v7 & 1) == 0) {
        break;
      }
      unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (!v12) {
          goto LABEL_13;
        }
      }
      else if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_13;
      }
      if ((v8 & 0xC000000000000001) != 0)
      {
        MEMORY[0x230F854E0](0, v8);
      }
      else
      {
        if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        swift_retain();
      }
      swift_bridgeObjectRelease();
      dispatch thunk of UsoValue.getAsPrimitiveValueString()();
      uint64_t v11 = v10;
      swift_release();
      swift_bridgeObjectRelease();
      if (!v11)
      {
        uint64_t v13 = v3;
        goto LABEL_20;
      }
LABEL_14:
      if (!--v1) {
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_19:
  uint64_t v13 = 5;
LABEL_20:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t UsoEntity_common_Person.contactIds.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v42 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = MEMORY[0x263F8EE78];
  }
  uint64_t v50 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v42 = v2 + 8;
    uint64_t v43 = v13;
    uint64_t v47 = (void (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v48 = (void (*)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v45 = v8;
    uint64_t v46 = v2;
    uint64_t v44 = v12;
    while (v14 < *(void *)(v12 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v16 = *(void *)(v2 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v10, v12 + v15 + v16 * v14, v0);
      if (closure #1 in UsoEntity_common_Person.contactId.getter())
      {
        uint64_t v17 = *v47;
        (*v47)(v8, v10, v0);
        uint64_t v18 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_7_25();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = v50;
        }
        unint64_t v19 = *(void *)(v18 + 16);
        if (v19 >= *(void *)(v18 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = v50;
        }
        *(void *)(v18 + 16) = v19 + 1;
        unint64_t v8 = v45;
        v17((char *)(v18 + v15 + v19 * v16), v45, v0);
        uint64_t v50 = v18;
        uint64_t v2 = v46;
        uint64_t v13 = v43;
        uint64_t v12 = v44;
      }
      else
      {
        uint64_t v20 = OUTLINED_FUNCTION_6_29();
        v21(v20);
      }
      if (v13 == ++v14)
      {
        uint64_t v22 = v50;
        goto LABEL_17;
      }
    }
    __break(1u);
    uint64_t v40 = OUTLINED_FUNCTION_6_29();
    v41(v40);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_17:
    swift_bridgeObjectRelease();
    int64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v50 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
      uint64_t v24 = v2 + 16;
      uint64_t v26 = *(unsigned __int8 *)(v24 + 64);
      uint64_t v46 = v22;
      uint64_t v27 = v22 + ((v26 + 32) & ~v26);
      uint64_t v47 = *(void (***)(char *, char *, uint64_t))(v24 + 56);
      uint64_t v48 = v25;
      do
      {
        uint64_t v28 = v49;
        v48(v49, v27, v0);
        uint64_t v29 = UsoIdentifier.value.getter();
        uint64_t v31 = v30;
        (*(void (**)(char *, uint64_t))(v24 - 8))(v28, v0);
        uint64_t v32 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          id v33 = (char *)OUTLINED_FUNCTION_7_25();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v34, v35);
          uint64_t v32 = v50;
        }
        unint64_t v37 = *(void *)(v32 + 16);
        unint64_t v36 = *(void *)(v32 + 24);
        if (v37 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
          uint64_t v32 = v50;
        }
        *(void *)(v32 + 16) = v37 + 1;
        uint64_t v38 = v32 + 16 * v37;
        *(void *)(v38 + 32) = v29;
        *(void *)(v38 + 40) = v31;
        v27 += (uint64_t)v47;
        --v23;
      }
      while (v23);
      swift_release();
    }
    else
    {
      swift_release();
      return MEMORY[0x263F8EE78];
    }
    return v32;
  }
  return result;
}

uint64_t static UsoEntity.from(_:)(uint64_t a1)
{
  return static UsoEntity.from(_:)(a1, MEMORY[0x263F735C8], (void (*)(uint64_t))static UsoEntityBuilder_common_PostalAddress.from(_:));
}

{
  return static UsoEntity.from(_:)(a1, MEMORY[0x263F734A0], (void (*)(uint64_t))static UsoEntityBuilder_common_PhoneNumber.from(_:));
}

{
  return static UsoEntity.from(_:)(a1, MEMORY[0x263F73508], (void (*)(uint64_t))static UsoEntityBuilder_common_EmailAddress.from(_:));
}

uint64_t static UsoEntity.from(_:)(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t))
{
  a2(0);
  a3(a1);
  uint64_t v5 = MEMORY[0x230F837B0]();
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = type metadata accessor for ContactsError();
    _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_12_21();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v7 = _typeName(_:qualified:)();
    OUTLINED_FUNCTION_1_35(v7, v8);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  swift_release();
  return v6;
}

uint64_t ContactAttribute.asUsoBuilder.getter()
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  if (one-time initialization token for transformer != -1) {
    swift_once();
  }
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  uint64_t v2 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v5 = v0;
  v2(&v4, &v5);
  swift_release();
  return v4;
}

unint64_t static UsoEntity.from(_:_:)(void *a1, void *a2)
{
  uint64_t v29 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_4_30();
  uint64_t v30 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  uint64_t v10 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonName();
  swift_allocObject();
  UsoEntityBuilder_common_PersonName.init()();
  id v11 = objc_msgSend(a1, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(a1, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_2_35();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setGivenName(value:)();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(a1, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_2_35();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setFamilyName(value:)();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(a1, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_2_35();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setMiddleName(value:)();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(a1, sel_namePrefix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_2_35();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePrefix(value:)();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(a1, sel_nameSuffix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_2_35();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePostfix(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)();
  swift_release();
  CNContact.formattedFullName.getter();
  dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)();
  swift_bridgeObjectRelease();
  if (dispatch thunk of UsoEntityBuilder_common_Person.name.getter())
  {
    id v17 = objc_msgSend(a1, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_8_26();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v30);
  }
  if (a2)
  {
    id v18 = a2;
    if (ContactAttribute.asUsoBuilder.getter())
    {
      dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)();

      swift_release();
    }
    else
    {
    }
  }
  uint64_t v19 = MEMORY[0x230F837B0](v10);
  if (v19)
  {
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v21 = type metadata accessor for TransformationError();
    _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_0(&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError, MEMORY[0x263F75870]);
    OUTLINED_FUNCTION_12_21();
    int64_t v23 = v22;
    type metadata accessor for CNContact();
    uint64_t v24 = _typeName(_:qualified:)();
    OUTLINED_FUNCTION_1_35(v24, v25);
    swift_storeEnumTagMultiPayload();
    unint64_t v20 = ContactsError.errorDescription.getter();
    unint64_t v27 = v26;
    outlined destroy of ContactsError(v2);
    *int64_t v23 = v20;
    v23[1] = v27;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F75868], v21);
    swift_willThrow();
  }
  swift_release();
  swift_release();
  return v20;
}

uint64_t _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in UsoEntity_common_Person.contactId.getter()
{
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_4_30();
  uint64_t v0 = type metadata accessor for IdentifierAppBundle();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  UsoIdentifier.appBundleSemantic.getter();
  uint64_t v6 = IdentifierAppBundle.rawValue.getter();
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v0);
  if (v6 == 0x73746361746E6F43 && v8 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = OUTLINED_FUNCTION_3_29();
    v14(v13);
  }
  else
  {
    OUTLINED_FUNCTION_8_26();
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = OUTLINED_FUNCTION_3_29();
    v12(v11);
    if ((v10 & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v15 = UsoIdentifier.namespace.getter();
  if (!v16)
  {
LABEL_14:
    uint64_t v19 = OUTLINED_FUNCTION_9_21();
    v20(v19);
    char v18 = 0;
    return v18 & 1;
  }
  if (v15 == 0x64695F6D657469 && v16 == 0xE700000000000000) {
    char v18 = 1;
  }
  else {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v21 = OUTLINED_FUNCTION_9_21();
  v22(v21);
  swift_bridgeObjectRelease();
  return v18 & 1;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *OUTLINED_FUNCTION_1_35(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  v2[2] = 0x7469746E456F7355;
  v2[3] = 0xE900000000000079;
  return v2;
}

uint64_t OUTLINED_FUNCTION_2_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_30()
{
  return 0;
}

void OUTLINED_FUNCTION_5_33()
{
}

uint64_t OUTLINED_FUNCTION_6_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_25()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return swift_allocError();
}

uint64_t specialized SiriKitContactIntent.me.getter()
{
  id v1 = objc_msgSend(v0, sel_isMe);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSNumber();
  uint64_t v3 = 1;
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) == 0) {
    return 0;
  }
  return v3;
}

{
  Class isa;
  Class v1;
  char v2;

  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  id v1 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  uint64_t v2 = static NSObject.== infix(_:_:)();

  return v2 & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v35 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      uint64_t v31 = v6;
      unint64_t v10 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v11 = (id)MEMORY[0x230F854E0](v10, a1);
LABEL_7:
        id v12 = v11;
        unint64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_30;
        }
        id v14 = objc_msgSend(v11, sel_label);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        uint64_t v19 = static Dictionary<>.nlSemantic(forCNLabel:)(v16, v18);
        uint64_t v6 = v20;
        swift_bridgeObjectRelease();
        if (v19 == a2 && v6 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0) {
            goto LABEL_23;
          }
        }
        id v23 = objc_msgSend(v12, sel_value, v31);
        id v24 = objc_msgSend(v23, sel_name);

        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v6 = v26;

        if (v25 == a4 && v6 == a5)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v6 = &v35;
          specialized ContiguousArray._endMutation()();
          goto LABEL_26;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_25;
        }
LABEL_23:

LABEL_26:
        ++v10;
        if (v13 == v9)
        {
          uint64_t v29 = v35;
          goto LABEL_33;
        }
      }
      if (v10 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_32;
      }
    }
    id v11 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_7;
  }
LABEL_32:
  uint64_t v29 = MEMORY[0x263F8EE78];
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    type metadata accessor for SiriMatch();
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v8 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SiriMatch.__allocating_init(identifier:fullName:)(v8, v7, v5, v6);
      MEMORY[0x230F850D0]();
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v4 += 4;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

id ModifyContactAttributeIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = objc_allocWithZone(v3);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = v11 - v10;
  (*(void (**)(uint64_t))(v13 + 16))(v11 - v10);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v14);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_15();
  uint64_t v19 = v18 - v17;
  (*(void (**)(uint64_t))(v20 + 16))(v18 - v17);
  id v21 = specialized ModifyContactAttributeIntentHandler.init(contactService:contactResolver:)(v12, v19, v6, v8, v14, v7, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v21;
}

void *specialized BaseIntentHandler.meCard.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard;
  uint64_t v3 = *(void **)(v0 + direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard);
  uint64_t v4 = v3;
  if (v3 == (void *)1)
  {
    outlined init with copy of DeviceState(v1 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v10);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    uint64_t v7 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v4;
    id v8 = v4;
    outlined consume of CNContact??(v7);
  }
  outlined copy of CNContact??(v3);
  return v4;
}

id specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(char a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  a2(0);
  outlined init with copy of DeviceState(v2 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v21);
  uint64_t v5 = v22;
  uint64_t v6 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  if (v7)
  {
    if ((a1 & 1) == 0 || (id v8 = specialized BaseIntentHandler.meCard.getter(), v8, v8))
    {
      id result = 0;
      *(unsigned char *)(v3 + direct field offset for BaseIntentHandler.passedPrereqs) = 1;
      return result;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = (void *)OUTLINED_FUNCTION_21_0(v16, (uint64_t)static Logger.siriContacts);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_11_2(v18))
    {
      OUTLINED_FUNCTION_24();
      v21[0] = OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_35_11(4.8149e-34, v21[0]);
      OUTLINED_FUNCTION_34_13();
      OUTLINED_FUNCTION_66_0(&dword_22D49E000, v19, v20, "[%s] MeCard was not found and user requested info about their MeCard or relationships. Returning unsupported due to missingMeCard.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    id v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 2);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_21_0(v10, (uint64_t)static Logger.siriContacts);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_11_2(v12))
    {
      OUTLINED_FUNCTION_24();
      v21[0] = OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_35_11(4.8149e-34, v21[0]);
      OUTLINED_FUNCTION_34_13();
      OUTLINED_FUNCTION_66_0(&dword_22D49E000, v13, v14, "[%s] Siri isn't authorized to access Contacts app data, need to prompt the user.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    id v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 1);
  }
  return v15;
}

uint64_t specialized BaseIntentHandler.resolveContacts(intent:)(void (**a1)(char *, uint64_t))
{
  uint64_t ContactSiriMatchesResolutionResult = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  uint64_t v188 = *(void *)(ContactSiriMatchesResolutionResult - 8);
  MEMORY[0x270FA5388](ContactSiriMatchesResolutionResult);
  v217 = (char *)&v184 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for PersonNameComponents();
  uint64_t v189 = *(void *)(v210 - 8);
  MEMORY[0x270FA5388](v210);
  v209 = (char *)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for ContactQuery();
  uint64_t v201 = *(void *)(v202 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v202);
  v214 = (char *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v207 = (char *)&v184 - v6;
  uint64_t v200 = type metadata accessor for RecommenderType();
  uint64_t v198 = *(void *)(v200 - 8);
  MEMORY[0x270FA5388](v200);
  v199 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v195 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  v197 = (char *)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x270FA5388](v9 - 8);
  v194 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v11 - 8);
  v193 = (char *)&v184 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v192 = (uint64_t)&v184 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ContactResolverConfig();
  uint64_t v16 = *(void (***)(char *, uint64_t))(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v206 = (char *)&v184 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Contact();
  uint64_t v19 = *(void **)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v208 = (char *)&v184 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v187 = (char *)&v184 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v186 = (char *)&v184 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v185 = (char *)&v184 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v184 - v29;
  MEMORY[0x270FA5388](v28);
  unint64_t v32 = (unint64_t)&v184 - v31;
  v203 = a1;
  GetContactIntent.siriInferenceContact.getter();
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriContacts);
    v211 = (void (*)(char *, unint64_t, uint64_t))v19[2];
    v212 = v19 + 2;
    v211(v30, v32, v18);
    uint64_t v213 = v34;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    v216 = v19;
    uint64_t v219 = v18;
    v205 = (char *)v32;
    v191 = v16;
    uint64_t v190 = v15;
    if (v37)
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v184 = swift_slowAlloc();
      v221 = (char *)v184;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x800000022D5A9610, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery((unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact, MEMORY[0x263F6D458]);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v221);
      unint64_t v32 = (unint64_t)v205;
      uint64_t v41 = v207;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v215 = (void (*)(char *, uint64_t))v19[1];
      v215(v30, v18);
      _os_log_impl(&dword_22D49E000, v35, v36, "[%s] Built skeleton contact for resolution: %s", (uint8_t *)v38, 0x16u);
      uint64_t v42 = v184;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v42, -1, -1);
      MEMORY[0x230F85DE0](v38, -1, -1);
    }
    else
    {
      v215 = (void (*)(char *, uint64_t))v19[1];
      v215(v30, v18);

      uint64_t v41 = v207;
    }
    if (Contact.isEmpty.getter())
    {
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v219;
      if (v45)
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        v221 = (char *)v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x800000022D5A9610, (uint64_t *)&v221);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v43, v44, "[%s] No search terms provided to resolve contact with, returning needsValue.", v47, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v48, -1, -1);
        MEMORY[0x230F85DE0](v47, -1, -1);
      }

      type metadata accessor for GetContactSiriMatchesResolutionResult();
      id v49 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      v80 = (char *)v32;
      goto LABEL_17;
    }
    id v50 = objc_msgSend(v203, sel_intentId);
    if (v50)
    {
      id v51 = v50;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      static String.EMPTY.getter();
    }
    uint64_t v52 = v201;
    uint64_t v53 = type metadata accessor for ContactHandleTypePreference();
    __swift_storeEnumTagSinglePayload(v192, 1, 1, v53);
    static Locale.current.getter();
    static ContactResolverDomain.all.getter();
    (*(void (**)(char *, void, uint64_t))(v195 + 104))(v197, *MEMORY[0x263F6D438], v196);
    (*(void (**)(char *, void, uint64_t))(v198 + 104))(v199, *MEMORY[0x263F6D3E0], v200);
    uint64_t v200 = (uint64_t)"ResolveModifyRelationship";
    ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
    Contact.asContactQuery.getter();
    os_log_type_t v54 = v214;
    uint64_t v55 = v202;
    v199 = *(char **)(v52 + 16);
    ((void (*)(char *, char *, uint64_t))v199)(v214, v41, v202);
    uint64_t v56 = Logger.logObject.getter();
    uint64_t v57 = v52;
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      v197 = (char *)swift_slowAlloc();
      v221 = v197;
      *(_DWORD *)uint64_t v59 = 136315394;
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x800000022D5A9610, (uint64_t *)&v221);
      uint64_t v60 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v59 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, MEMORY[0x263F6D310]);
      uint64_t v61 = v214;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v198 = *(void *)(v57 + 8);
      ((void (*)(char *, uint64_t))v198)(v61, v55);
      _os_log_impl(&dword_22D49E000, v56, v58, "[%s] Converted skeleton contact to ContactQuery: %s", (uint8_t *)v59, 0x16u);
      int v64 = v197;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v64, -1, -1);
      MEMORY[0x230F85DE0](v59, -1, -1);
    }
    else
    {
      uint64_t v198 = *(void *)(v57 + 8);
      ((void (*)(char *, uint64_t))v198)(v54, v55);

      uint64_t v60 = v57;
    }
    outlined init with copy of DeviceState(v204 + direct field offset for BaseIntentHandler.contactResolver, (uint64_t)&v221);
    uint64_t v65 = v222;
    uint64_t v66 = v223;
    __swift_project_boxed_opaque_existential_1(&v221, v222);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    unint64_t v67 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_22D59FD50;
    ((void (*)(unint64_t, char *, uint64_t))v199)(v68 + v67, v207, v55);
    uint64_t v69 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v66 + 8))(v68, v206, v65, v66);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v221);
    swift_bridgeObjectRetain_n();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    v199 = 0;
    if (v72)
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      v221 = (char *)v74;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = swift_bridgeObjectRetain();
      uint64_t v76 = MEMORY[0x230F85100](v75, ContactSiriMatchesResolutionResult);
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v79 = v202;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v70, v71, "[%s] ContactResolver recommendations: %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v74, -1, -1);
      MEMORY[0x230F85DE0](v73, -1, -1);
    }
    else
    {
      uint64_t v79 = v55;

      swift_bridgeObjectRelease_n();
    }
    uint64_t v46 = v219;
    uint64_t v15 = *(void *)(v69 + 16);
    if (!v15) {
      break;
    }
    v214 = *(char **)(v188 + 16);
    unint64_t v32 = v69 + ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80));
    uint64_t v30 = *(char **)(v188 + 72);
    uint64_t v16 = (void (**)(char *, uint64_t))(v188 + 8);
    v197 = (char *)v69;
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v83 = v217;
      uint64_t v82 = ContactSiriMatchesResolutionResult;
      ((void (*)(char *, unint64_t, uint64_t))v214)(v217, v32, ContactSiriMatchesResolutionResult);
      uint64_t v84 = Recommendation<A>.assignConfidence()();
      (*v16)(v83, v82);
      uint64_t v85 = *(void *)(v84 + 16);
      uint64_t v86 = v19[2];
      uint64_t v18 = v86 + v85;
      if (__OFADD__(v86, v85)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v18 > v19[3] >> 1)
      {
        if (v86 <= v18) {
          uint64_t v88 = v86 + v85;
        }
        else {
          uint64_t v88 = v86;
        }
        uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v88, 1, (uint64_t)v19);
      }
      if (*(void *)(v84 + 16))
      {
        uint64_t v89 = v19[2];
        if ((v19[3] >> 1) - v89 < v85) {
          goto LABEL_90;
        }
        unint64_t v90 = (*((unsigned __int8 *)v216 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v216 + 80);
        uint64_t v91 = v216[9];
        v92 = (char *)v19 + v90 + v91 * v89;
        if (v84 + v90 < (unint64_t)&v92[v91 * v85] && (unint64_t)v92 < v84 + v90 + v91 * v85) {
          goto LABEL_95;
        }
        swift_arrayInitWithCopy();
        if (v85)
        {
          uint64_t v94 = v19[2];
          BOOL v95 = __OFADD__(v94, v85);
          uint64_t v96 = v94 + v85;
          if (v95) {
            goto LABEL_91;
          }
          v19[2] = v96;
        }
      }
      else if (v85)
      {
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      v32 += (unint64_t)v30;
      if (!--v15)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v46 = v219;
        uint64_t v79 = v202;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)MEMORY[0x263F8EE78];
LABEL_43:
  swift_bridgeObjectRetain();
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v97, v98))
  {
    uint64_t v99 = swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    v221 = (char *)v100;
    *(_DWORD *)uint64_t v99 = 136315394;
    uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v99 + 12) = 2048;
    uint64_t v220 = v19[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v97, v98, "[%s] ContactResolver weighted recommendations count: %ld", (uint8_t *)v99, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v100, -1, -1);
    MEMORY[0x230F85DE0](v99, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v101 = v19[2];
  if (v101 != 1)
  {
    if (v101)
    {
      v214 = (char *)self;
      uint64_t v124 = (char *)v19
           + ((*((unsigned __int8 *)v216 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v216 + 80));
      uint64_t v204 = v216[9];
      v203 = (void (**)(char *, uint64_t))(v189 + 8);
      ++v216;
      swift_bridgeObjectRetain();
      uint64_t v125 = MEMORY[0x263F8EE78];
      os_log_type_t v127 = v208;
      v126 = v209;
      do
      {
        v211(v127, (unint64_t)v124, v46);
        uint64_t v128 = Contact.id.getter();
        v217 = v129;
        uint64_t ContactSiriMatchesResolutionResult = v128;
        PersonNameComponents.init()();
        Contact.namePrefix.getter();
        PersonNameComponents.namePrefix.setter();
        Contact.givenName.getter();
        PersonNameComponents.givenName.setter();
        Contact.middleName.getter();
        PersonNameComponents.middleName.setter();
        Contact.familyName.getter();
        PersonNameComponents.familyName.setter();
        Contact.nameSuffix.getter();
        PersonNameComponents.nameSuffix.setter();
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v131 = objc_msgSend(v214, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

        uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v134 = v133;

        (*v203)(v126, v210);
        v215(v127, v46);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v125 + 16) + 1, 1, v125);
          uint64_t v125 = v139;
        }
        unint64_t v136 = *(void *)(v125 + 16);
        unint64_t v135 = *(void *)(v125 + 24);
        if (v136 >= v135 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1, v125);
          uint64_t v125 = v140;
        }
        *(void *)(v125 + 16) = v136 + 1;
        v137 = (void *)(v125 + 32 * v136);
        uint64_t v46 = v219;
        uint64_t v138 = v217;
        v137[4] = ContactSiriMatchesResolutionResult;
        v137[5] = v138;
        v137[6] = v132;
        v137[7] = v134;
        v124 += v204;
        --v101;
      }
      while (v101);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRetain_n();
      uint64_t v141 = Logger.logObject.getter();
      os_log_type_t v142 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v141, v142))
      {
        uint64_t v143 = swift_slowAlloc();
        uint64_t v144 = swift_slowAlloc();
        v221 = (char *)v144;
        *(_DWORD *)uint64_t v143 = 136315394;
        uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v143 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
        uint64_t v146 = MEMORY[0x230F85100](v125, v145);
        unint64_t v148 = v147;
        swift_bridgeObjectRelease();
        uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v148, (uint64_t *)&v221);
        uint64_t v46 = v219;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v141, v142, "[%s] Multiple recommendations returned. Returning disambiguation of %s.", (uint8_t *)v143, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v144, -1, -1);
        MEMORY[0x230F85DE0](v143, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v149 = v207;
      type metadata accessor for GetContactSiriMatchesResolutionResult();
      unint64_t v150 = specialized Sequence.compactMap<A>(_:)(v125);
      swift_bridgeObjectRelease();
      id v49 = static SiriMatchResolutionResult.disambiguation(with:)(v150);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v198)(v149, v202);
      v191[1](v206, v190);
      v215(v205, v46);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = *(void *)(Contact.contactRelations.getter() + 16);
      swift_bridgeObjectRelease();
      if (v102)
      {
        uint64_t v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v103, v104))
        {
          uint64_t v105 = (uint8_t *)swift_slowAlloc();
          uint64_t v106 = swift_slowAlloc();
          v221 = (char *)v106;
          *(_DWORD *)uint64_t v105 = 136315138;
          uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_22D49E000, v103, v104, "[%s] No recommendations returned for requested relationship. Returning unsupported.", v105, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v106, -1, -1);
          MEMORY[0x230F85DE0](v105, -1, -1);
        }

        os_log_type_t v107 = v191;
        uint64_t v108 = v190;
        type metadata accessor for GetContactSiriMatchesResolutionResult();
        id v109 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 5);
      }
      else
      {
        uint64_t v151 = Contact.organizationName.getter();
        unint64_t v153 = v152;
        swift_bridgeObjectRelease();
        if ((v153 & 0x2000000000000000) != 0) {
          uint64_t v154 = HIBYTE(v153) & 0xF;
        }
        else {
          uint64_t v154 = v151 & 0xFFFFFFFFFFFFLL;
        }
        v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.debug.getter();
        BOOL v157 = os_log_type_enabled(v155, v156);
        if (v154)
        {
          if (v157)
          {
            v158 = (uint8_t *)swift_slowAlloc();
            uint64_t v159 = swift_slowAlloc();
            v221 = (char *)v159;
            *(_DWORD *)v158 = 136315138;
            uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v155, v156, "[%s] No recommendations returned for requested company. Returning unsupported.", v158, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v159, -1, -1);
            MEMORY[0x230F85DE0](v158, -1, -1);
          }

          os_log_type_t v107 = v191;
          uint64_t v108 = v190;
          type metadata accessor for GetContactSiriMatchesResolutionResult();
          id v109 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 4);
        }
        else
        {
          if (v157)
          {
            v182 = (uint8_t *)swift_slowAlloc();
            uint64_t v183 = swift_slowAlloc();
            v221 = (char *)v183;
            *(_DWORD *)v182 = 136315138;
            uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v155, v156, "[%s] No recommendations returned. Returning unsupported.", v182, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v183, -1, -1);
            MEMORY[0x230F85DE0](v182, -1, -1);
          }

          os_log_type_t v107 = v191;
          uint64_t v108 = v190;
          type metadata accessor for GetContactSiriMatchesResolutionResult();
          id v109 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 3);
        }
      }
      id v49 = v109;
      ((void (*)(char *, uint64_t))v198)(v207, v79);
      v107[1](v206, v108);
      v80 = v205;
LABEL_17:
      v215(v80, v46);
    }
    return (uint64_t)v49;
  }
  v110 = specialized BaseIntentHandler.meCard.getter();
  if (!v110) {
    goto LABEL_80;
  }
  uint64_t v111 = v110;
  id v112 = objc_msgSend(v110, sel_identifier);
  uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v115 = v114;

  if (!v19[2]) {
    goto LABEL_94;
  }
  uint64_t v116 = v185;
  v211(v185, (unint64_t)v19+ ((*((unsigned __int8 *)v216 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v216 + 80)), v46);
  uint64_t v117 = Contact.id.getter();
  uint64_t v118 = v46;
  uint64_t v119 = v117;
  uint64_t v121 = v120;
  v215(v116, v118);
  if (v113 == v119 && v115 == v121)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v123 & 1) == 0) {
      goto LABEL_79;
    }
  }
  Class v160 = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v161 = MEMORY[0x230F84F70](1699574633, 0xE400000000000000);
  objc_msgSend(v203, sel_setValue_forProperty_, v160, v161);

  uint64_t v111 = (void *)v161;
LABEL_79:

  uint64_t v46 = v219;
LABEL_80:
  v162 = Logger.logObject.getter();
  os_log_type_t v163 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v162, v163))
  {
    uint64_t v164 = (uint8_t *)swift_slowAlloc();
    uint64_t v165 = swift_slowAlloc();
    v221 = (char *)v165;
    *(_DWORD *)uint64_t v164 = 136315138;
    uint64_t v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v200 | 0x8000000000000000, (uint64_t *)&v221);
    uint64_t v46 = v219;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v162, v163, "[%s] 1 recommendation returned. Returning success.", v164, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v165, -1, -1);
    MEMORY[0x230F85DE0](v164, -1, -1);
  }

  uint64_t ContactSiriMatchesResolutionResult = type metadata accessor for GetContactSiriMatchesResolutionResult();
  v217 = (char *)type metadata accessor for SiriMatch();
  if (v19[2])
  {
    uint64_t v166 = (char *)v19 + ((*((unsigned __int8 *)v216 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v216 + 80));
    uint64_t v167 = v186;
    v168 = (void (*)(char *, char *, uint64_t))v211;
    v211(v186, (unint64_t)v166, v46);
    v214 = (char *)Contact.id.getter();
    uint64_t v169 = v46;
    uint64_t v171 = v170;
    v172 = v215;
    v215(v167, v169);
    v173 = v187;
    v168(v187, v166, v169);
    swift_bridgeObjectRelease();
    v174 = v209;
    PersonNameComponents.init()();
    Contact.namePrefix.getter();
    PersonNameComponents.namePrefix.setter();
    Contact.givenName.getter();
    PersonNameComponents.givenName.setter();
    Contact.middleName.getter();
    PersonNameComponents.middleName.setter();
    Contact.familyName.getter();
    PersonNameComponents.familyName.setter();
    Contact.nameSuffix.getter();
    PersonNameComponents.nameSuffix.setter();
    v175 = self;
    Class v176 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    id v177 = objc_msgSend(v175, sel_localizedStringFromPersonNameComponents_style_options_, v176, 2, 0);

    uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v180 = v179;

    (*(void (**)(char *, uint64_t))(v189 + 8))(v174, v210);
    v172(v173, v169);
    id v181 = SiriMatch.__allocating_init(identifier:fullName:)((uint64_t)v214, v171, v178, v180);
    id v49 = static SiriMatchResolutionResult.success(with:)((uint64_t)v181);

    ((void (*)(char *, uint64_t))v198)(v207, v202);
    v191[1](v206, v190);
    v172(v205, v169);
    return (uint64_t)v49;
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  BOOL v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  void (**v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  id v116;
  void *v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  Class isa;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  NSObject *v164;
  os_log_type_t v165;
  BOOL v166;
  uint8_t *v167;
  uint64_t v168;
  Class v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  void (*v180)(char *, uint64_t);
  char *v181;
  char *v182;
  void *v183;
  Class v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  uint8_t *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  void (**v211)(char *, uint64_t);
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  void (*v219)(char *, char *, uint64_t);
  void *v220;
  uint64_t v221;
  char *v222;
  void (*v223)(char *, uint64_t);
  void *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  v197 = *(void *)(v226 - 8);
  MEMORY[0x270FA5388](v226);
  v225 = (char *)&v192 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = type metadata accessor for PersonNameComponents();
  uint64_t v198 = *(void *)(v218 - 8);
  MEMORY[0x270FA5388](v218);
  v217 = (char *)&v192 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = type metadata accessor for ContactQuery();
  uint64_t v210 = *(void *)(v215 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v215);
  uint64_t v222 = (char *)&v192 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v213 = (char *)&v192 - v6;
  v209 = type metadata accessor for RecommenderType();
  v207 = *(void *)(v209 - 8);
  MEMORY[0x270FA5388](v209);
  v208 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v204 = *(void *)(v205 - 8);
  MEMORY[0x270FA5388](v205);
  v206 = (char *)&v192 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x270FA5388](v9 - 8);
  v203 = (char *)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v202 = (char *)&v192 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v201 = (char *)&v192 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ContactResolverConfig();
  uint64_t v200 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v214 = (char *)&v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Contact();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v216 = (char *)&v192 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v196 = (char *)&v192 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v195 = (char *)&v192 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v194 = (char *)&v192 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v192 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v192 - v30;
  v211 = a1;
  ModifyContactAttributeIntent.siriInferenceContact.getter();
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    unint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
    uint64_t v219 = (void (*)(char *, char *, uint64_t))v18[2];
    uint64_t v220 = v18 + 2;
    v219(v29, v31, v17);
    v221 = v33;
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.debug.getter();
    os_log_type_t v36 = os_log_type_enabled(v34, v35);
    v227 = v17;
    v199 = v15;
    v224 = v18;
    if (v36)
    {
      BOOL v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v229 = v38;
      *(_DWORD *)BOOL v37 = 136315394;
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery((unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact, MEMORY[0x263F6D458]);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v223 = (void (*)(char *, uint64_t))v18[1];
      v223(v29, v227);
      _os_log_impl(&dword_22D49E000, v34, v35, "[%s] Built skeleton contact for resolution: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      uint64_t v41 = v38;
      uint64_t v17 = v227;
      MEMORY[0x230F85DE0](v41, -1, -1);
      MEMORY[0x230F85DE0](v37, -1, -1);
    }
    else
    {
      uint64_t v223 = (void (*)(char *, uint64_t))v18[1];
      v223(v29, v17);
    }

    uint64_t v42 = Contact.isEmpty.getter();
    uint64_t v43 = v215;
    os_log_type_t v44 = v213;
    if (v42)
    {
      BOOL v45 = Logger.logObject.getter();
      uint64_t v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        v229 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, &v229);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v45, v46, "[%s] No search terms provided to resolve contact with, returning needsValue.", v47, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v48, -1, -1);
        MEMORY[0x230F85DE0](v47, -1, -1);
      }

      type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
      id v49 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      goto LABEL_9;
    }
    id v50 = objc_msgSend(v211, sel_intentId);
    if (v50)
    {
      id v51 = v50;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      static String.EMPTY.getter();
    }
    uint64_t v52 = (uint64_t)v201;
    static ContactHandleTypePreference.preferPhone.getter();
    uint64_t v53 = type metadata accessor for ContactHandleTypePreference();
    __swift_storeEnumTagSinglePayload(v52, 0, 1, v53);
    static Locale.current.getter();
    static ContactResolverDomain.all.getter();
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v206, *MEMORY[0x263F6D438], v205);
    (*(void (**)(char *, void, uint64_t))(v207 + 104))(v208, *MEMORY[0x263F6D3E0], v209);
    v209 = (uint64_t)"ortedValueOutput";
    ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
    Contact.asContactQuery.getter();
    os_log_type_t v54 = v210;
    uint64_t v55 = v222;
    v208 = *(char **)(v210 + 16);
    ((void (*)(char *, char *, uint64_t))v208)(v222, v44, v43);
    uint64_t v56 = Logger.logObject.getter();
    uint64_t v57 = static os_log_type_t.debug.getter();
    os_log_type_t v58 = os_log_type_enabled(v56, v57);
    v193 = v31;
    if (v58)
    {
      uint64_t v59 = v55;
      uint64_t v60 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v229 = v61;
      *(_DWORD *)uint64_t v60 = 136315394;
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, MEMORY[0x263F6D310]);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v207 = *(void *)(v54 + 8);
      ((void (*)(char *, uint64_t))v207)(v59, v215);
      _os_log_impl(&dword_22D49E000, v56, v57, "[%s] Converted skeleton contact to ContactQuery: %s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      int v64 = v61;
      os_log_type_t v44 = v213;
      uint64_t v43 = v215;
      MEMORY[0x230F85DE0](v64, -1, -1);
      MEMORY[0x230F85DE0](v60, -1, -1);
    }
    else
    {
      v207 = *(void *)(v54 + 8);
      ((void (*)(char *, uint64_t))v207)(v55, v43);
    }

    outlined init with copy of DeviceState(v212 + direct field offset for BaseIntentHandler.contactResolver, (uint64_t)&v229);
    uint64_t v65 = v230;
    uint64_t v66 = v231;
    __swift_project_boxed_opaque_existential_1(&v229, v230);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    unint64_t v67 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_22D59FD50;
    ((void (*)(unint64_t, char *, uint64_t))v208)(v68 + v67, v44, v43);
    uint64_t v69 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v66 + 8))(v68, v214, v65, v66);
    uint64_t v17 = v227;
    uint64_t v70 = v69;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v229);
    swift_bridgeObjectRetain_n();
    os_log_type_t v71 = (char *)v70;
    BOOL v72 = Logger.logObject.getter();
    uint64_t v73 = static os_log_type_t.debug.getter();
    uint64_t v74 = os_log_type_enabled(v72, v73);
    uint64_t v75 = v224;
    v208 = 0;
    if (v74)
    {
      uint64_t v76 = swift_slowAlloc();
      v229 = swift_slowAlloc();
      unint64_t v77 = v229;
      *(_DWORD *)uint64_t v76 = 136315394;
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v76 + 12) = 2080;
      unint64_t v78 = swift_bridgeObjectRetain();
      uint64_t v79 = MEMORY[0x230F85100](v78, v226);
      v80 = v17;
      uint64_t v82 = v81;
      swift_bridgeObjectRelease();
      v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v82, &v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v17 = v80;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v72, v73, "[%s] ContactResolver recommendations: %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      uint64_t v83 = v77;
      uint64_t v75 = v224;
      MEMORY[0x230F85DE0](v83, -1, -1);
      MEMORY[0x230F85DE0](v76, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v15 = *((void *)v71 + 2);
    if (!v15) {
      break;
    }
    uint64_t v222 = *(char **)(v197 + 16);
    uint64_t v29 = &v71[(*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80)];
    uint64_t v85 = *(void *)(v197 + 72);
    uint64_t v31 = (char *)(v197 + 16);
    uint64_t v86 = (void (**)(char *, uint64_t))(v197 + 8);
    v206 = v71;
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v88 = v225;
      uint64_t v87 = v226;
      ((void (*)(char *, char *, uint64_t))v222)(v225, v29, v226);
      uint64_t v89 = Recommendation<A>.assignConfidence()();
      (*v86)(v88, v87);
      uint64_t v17 = *(void *)(v89 + 16);
      unint64_t v90 = v18[2];
      uint64_t v91 = v90 + v17;
      if (__OFADD__(v90, v17)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v91 > v18[3] >> 1)
      {
        if (v90 <= v91) {
          uint64_t v93 = v90 + v17;
        }
        else {
          uint64_t v93 = v90;
        }
        uint64_t v18 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v93, 1, (uint64_t)v18);
      }
      if (*(void *)(v89 + 16))
      {
        uint64_t v94 = v18[2];
        if ((v18[3] >> 1) - v94 < v17) {
          goto LABEL_90;
        }
        BOOL v95 = (*((unsigned __int8 *)v224 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v224 + 80);
        uint64_t v96 = v224[9];
        uint64_t v97 = (char *)v18 + v95 + v96 * v94;
        if (v89 + v95 < (unint64_t)&v97[v96 * v17] && (unint64_t)v97 < v89 + v95 + v96 * v17) {
          goto LABEL_95;
        }
        swift_arrayInitWithCopy();
        if (v17)
        {
          uint64_t v99 = v18[2];
          uint64_t v100 = __OFADD__(v99, v17);
          uint64_t v101 = v99 + v17;
          if (v100) {
            goto LABEL_91;
          }
          v18[2] = v101;
        }
      }
      else if (v17)
      {
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      v29 += v85;
      if (!--v15)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v227;
        uint64_t v75 = v224;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
LABEL_43:
  swift_bridgeObjectRetain();
  uint64_t v102 = Logger.logObject.getter();
  uint64_t v103 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v102, v103))
  {
    os_log_type_t v104 = swift_slowAlloc();
    uint64_t v105 = swift_slowAlloc();
    v229 = v105;
    *(_DWORD *)os_log_type_t v104 = 136315394;
    v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v104 + 12) = 2048;
    v228 = v18[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v102, v103, "[%s] ContactResolver weighted recommendations count: %ld", (uint8_t *)v104, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v105, -1, -1);
    MEMORY[0x230F85DE0](v104, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v106 = v18[2];
  if (v106 != 1)
  {
    if (v106)
    {
      uint64_t v222 = (char *)self;
      uint64_t v129 = (char *)v18 + ((*((unsigned __int8 *)v75 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v75 + 80));
      v212 = v75[9];
      v211 = (void (**)(char *, uint64_t))(v198 + 8);
      v224 = v75 + 1;
      swift_bridgeObjectRetain();
      uint64_t v130 = MEMORY[0x263F8EE78];
      id v131 = v216;
      do
      {
        v219(v131, v129, v17);
        uint64_t v132 = Contact.id.getter();
        uint64_t v133 = v17;
        v225 = v134;
        v226 = v132;
        unint64_t v135 = v217;
        PersonNameComponents.init()();
        Contact.namePrefix.getter();
        PersonNameComponents.namePrefix.setter();
        Contact.givenName.getter();
        PersonNameComponents.givenName.setter();
        Contact.middleName.getter();
        PersonNameComponents.middleName.setter();
        Contact.familyName.getter();
        PersonNameComponents.familyName.setter();
        Contact.nameSuffix.getter();
        PersonNameComponents.nameSuffix.setter();
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        v137 = objc_msgSend(v222, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

        uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v140 = v139;

        (*v211)(v135, v218);
        v223(v131, v133);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v130 + 16) + 1, 1, v130);
          uint64_t v130 = v145;
        }
        os_log_type_t v142 = *(void *)(v130 + 16);
        uint64_t v141 = *(void *)(v130 + 24);
        if (v142 >= v141 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v141 > 1, v142 + 1, 1, v130);
          uint64_t v130 = v146;
        }
        *(void *)(v130 + 16) = v142 + 1;
        uint64_t v143 = (void *)(v130 + 32 * v142);
        uint64_t v17 = v227;
        uint64_t v144 = v225;
        v143[4] = v226;
        v143[5] = v144;
        v143[6] = v138;
        v143[7] = v140;
        v129 += v212;
        --v106;
      }
      while (v106);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRetain_n();
      unint64_t v147 = Logger.logObject.getter();
      unint64_t v148 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v147, v148))
      {
        uint64_t v149 = swift_slowAlloc();
        unint64_t v150 = swift_slowAlloc();
        v229 = v150;
        *(_DWORD *)uint64_t v149 = 136315394;
        v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v149 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
        unint64_t v152 = MEMORY[0x230F85100](v130, v151);
        uint64_t v154 = v153;
        swift_bridgeObjectRelease();
        v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v154, &v229);
        v155 = v227;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v155;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v147, v148, "[%s] Multiple recommendations returned. Returning disambiguation of %s.", (uint8_t *)v149, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v150, -1, -1);
        MEMORY[0x230F85DE0](v149, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      os_log_type_t v156 = v193;
      BOOL v157 = v215;
      v158 = v213;
      type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
      uint64_t v159 = specialized Sequence.compactMap<A>(_:)(v130);
      swift_bridgeObjectRelease();
      id v49 = static SiriMatchResolutionResult.disambiguation(with:)(v159);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v207)(v158, v157);
      (*(void (**)(char *, uint64_t))(v200 + 8))(v214, v199);
      v223(v156, v17);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = v193;
      os_log_type_t v107 = *(void *)(Contact.contactRelations.getter() + 16);
      swift_bridgeObjectRelease();
      if (v107)
      {
        uint64_t v108 = Logger.logObject.getter();
        id v109 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v108, v109))
        {
          v110 = (uint8_t *)swift_slowAlloc();
          uint64_t v111 = swift_slowAlloc();
          v229 = v111;
          *(_DWORD *)v110 = 136315138;
          v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_22D49E000, v108, v109, "[%s] No recommendations returned for requested relationship. Returning unsupported.", v110, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v111, -1, -1);
          MEMORY[0x230F85DE0](v110, -1, -1);
        }

        id v112 = v200;
        uint64_t v113 = v199;
        uint64_t v114 = v215;
        uint64_t v115 = v213;
        type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
        uint64_t v116 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 5);
      }
      else
      {
        Class v160 = Contact.organizationName.getter();
        v162 = v161;
        swift_bridgeObjectRelease();
        if ((v162 & 0x2000000000000000) != 0) {
          os_log_type_t v163 = HIBYTE(v162) & 0xF;
        }
        else {
          os_log_type_t v163 = v160 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v164 = Logger.logObject.getter();
        uint64_t v165 = static os_log_type_t.debug.getter();
        uint64_t v166 = os_log_type_enabled(v164, v165);
        if (v163)
        {
          if (v166)
          {
            uint64_t v167 = (uint8_t *)swift_slowAlloc();
            v168 = swift_slowAlloc();
            v229 = v168;
            *(_DWORD *)uint64_t v167 = 136315138;
            v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v164, v165, "[%s] No recommendations returned for requested company. Returning unsupported.", v167, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v168, -1, -1);
            MEMORY[0x230F85DE0](v167, -1, -1);
          }

          id v112 = v200;
          uint64_t v113 = v199;
          uint64_t v114 = v215;
          uint64_t v115 = v213;
          type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
          uint64_t v116 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 4);
        }
        else
        {
          if (v166)
          {
            uint64_t v190 = (uint8_t *)swift_slowAlloc();
            v191 = swift_slowAlloc();
            v229 = v191;
            *(_DWORD *)uint64_t v190 = 136315138;
            v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v164, v165, "[%s] No recommendations returned. Returning unsupported.", v190, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v191, -1, -1);
            MEMORY[0x230F85DE0](v190, -1, -1);
          }

          id v112 = v200;
          uint64_t v113 = v199;
          uint64_t v114 = v215;
          uint64_t v115 = v213;
          type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
          uint64_t v116 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 3);
        }
      }
      id v49 = v116;
      ((void (*)(char *, uint64_t))v207)(v115, v114);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v214, v113);
LABEL_9:
      v223(v31, v17);
    }
    return (uint64_t)v49;
  }
  uint64_t v117 = specialized BaseIntentHandler.meCard.getter();
  if (!v117) {
    goto LABEL_80;
  }
  uint64_t v118 = v117;
  uint64_t v119 = objc_msgSend(v117, sel_identifier);
  uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v122 = v121;

  if (!v18[2]) {
    goto LABEL_94;
  }
  char v123 = v194;
  v219(v194, (char *)v18 + ((*((unsigned __int8 *)v75 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v75 + 80)), v17);
  uint64_t v124 = Contact.id.getter();
  v126 = v125;
  v223(v123, v17);
  if (v120 == v124 && v122 == v126)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v128 & 1) == 0) {
      goto LABEL_79;
    }
  }
  uint64_t v169 = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v170 = MEMORY[0x230F84F70](1699574633, 0xE400000000000000);
  objc_msgSend(v211, sel_setValue_forProperty_, v169, v170);

  uint64_t v118 = (void *)v170;
LABEL_79:

  uint64_t v17 = v227;
  uint64_t v75 = v224;
LABEL_80:
  uint64_t v171 = Logger.logObject.getter();
  v172 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v171, v172))
  {
    v173 = (uint8_t *)swift_slowAlloc();
    v174 = swift_slowAlloc();
    v229 = v174;
    *(_DWORD *)v173 = 136315138;
    v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v209 | 0x8000000000000000, &v229);
    uint64_t v75 = v224;
    uint64_t v17 = v227;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v171, v172, "[%s] 1 recommendation returned. Returning success.", v173, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v174, -1, -1);
    MEMORY[0x230F85DE0](v173, -1, -1);
  }

  v226 = type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
  v225 = (char *)type metadata accessor for SiriMatch();
  if (v18[2])
  {
    v175 = (char *)v18 + ((*((unsigned __int8 *)v75 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v75 + 80));
    Class v176 = v195;
    id v177 = v219;
    v219(v195, v175, v17);
    uint64_t v222 = (char *)Contact.id.getter();
    uint64_t v179 = v178;
    uint64_t v180 = v223;
    v223(v176, v17);
    id v181 = v196;
    v177(v196, v175, v17);
    swift_bridgeObjectRelease();
    v182 = v217;
    PersonNameComponents.init()();
    Contact.namePrefix.getter();
    PersonNameComponents.namePrefix.setter();
    Contact.givenName.getter();
    PersonNameComponents.givenName.setter();
    Contact.middleName.getter();
    PersonNameComponents.middleName.setter();
    Contact.familyName.getter();
    PersonNameComponents.familyName.setter();
    Contact.nameSuffix.getter();
    PersonNameComponents.nameSuffix.setter();
    uint64_t v183 = self;
    uint64_t v184 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    v185 = objc_msgSend(v183, sel_localizedStringFromPersonNameComponents_style_options_, v184, 2, 0);

    v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v188 = v187;

    (*(void (**)(char *, uint64_t))(v198 + 8))(v182, v218);
    v180(v181, v17);
    uint64_t v189 = SiriMatch.__allocating_init(identifier:fullName:)((uint64_t)v222, v179, v186, v188);
    id v49 = static SiriMatchResolutionResult.success(with:)((uint64_t)v189);

    ((void (*)(char *, uint64_t))v207)(v213, v215);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v214, v199);
    v180(v193, v17);
    return (uint64_t)v49;
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized BaseIntentHandler.resolveContacts(intent:)(char *a1)
{
  uint64_t ContactAttributeSiriMatchesResolutionResult = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  uint64_t v188 = *(void *)(ContactAttributeSiriMatchesResolutionResult - 8);
  MEMORY[0x270FA5388](ContactAttributeSiriMatchesResolutionResult);
  v216 = (char *)&v183 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for PersonNameComponents();
  uint64_t v189 = *(void *)(v210 - 8);
  MEMORY[0x270FA5388](v210);
  v209 = (char *)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for ContactQuery();
  uint64_t v201 = *(void *)(v202 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v202);
  v214 = (uint64_t *)((char *)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  v205 = (char *)&v183 - v6;
  v199 = (void *)type metadata accessor for RecommenderType();
  uint64_t v198 = *(v199 - 1);
  MEMORY[0x270FA5388](v199);
  unint64_t v200 = (unint64_t)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v195 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  v197 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x270FA5388](v9 - 8);
  v194 = (char *)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v11 - 8);
  v193 = (char *)&v183 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v192 = (uint64_t)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ContactResolverConfig();
  uint64_t v191 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v206 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Contact();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v208 = (char *)&v183 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v187 = (char *)&v183 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v186 = (char *)&v183 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v185 = (char *)&v183 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v183 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v183 - v30;
  uint64_t v204 = a1;
  GetContactAttributeIntent.siriInferenceContact.getter();
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
    v211 = (void (*)(char *, char *, uint64_t))v18[2];
    v212 = v18 + 2;
    v211(v29, v31, v17);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v207 = v33;
    uint64_t v190 = v15;
    if (v36)
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v213 = (void *)swift_slowAlloc();
      uint64_t v220 = v213;
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000022D5A78F0, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery((unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact, MEMORY[0x263F6D458]);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v215 = (void (*)(char *, uint64_t))v18[1];
      v215(v29, v17);
      _os_log_impl(&dword_22D49E000, v34, v35, "[%s] Built skeleton contact for resolution: %s", (uint8_t *)v37, 0x16u);
      unint64_t v40 = v213;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v40, -1, -1);
      MEMORY[0x230F85DE0](v37, -1, -1);
    }
    else
    {
      v215 = (void (*)(char *, uint64_t))v18[1];
      v215(v29, v17);
    }

    if (Contact.isEmpty.getter())
    {
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v220 = (void *)v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000022D5A78F0, (uint64_t *)&v220);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v41, v42, "[%s] No search terms provided to resolve contact with, returning needsValue.", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v44, -1, -1);
        MEMORY[0x230F85DE0](v43, -1, -1);
      }

      type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
      id v45 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      goto LABEL_9;
    }
    id v46 = objc_msgSend(v204, sel_intentId);
    uint64_t v213 = v18;
    uint64_t v218 = v17;
    if (v46)
    {
      uint64_t v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      static String.EMPTY.getter();
    }
    unint64_t v48 = v200;
    id v49 = v199;
    GetContactAttributeIntent.handleTypePreference.getter(v192);
    static Locale.current.getter();
    static ContactResolverDomain.all.getter();
    (*(void (**)(char *, void, uint64_t))(v195 + 104))(v197, *MEMORY[0x263F6D438], v196);
    (*(void (**)(unint64_t, void, void *))(v198 + 104))(v48, *MEMORY[0x263F6D3E0], v49);
    unint64_t v200 = (unint64_t)"edsValueStrategy";
    ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
    id v50 = v205;
    Contact.asContactQuery.getter();
    uint64_t v51 = v201;
    uint64_t v52 = (void (*)(void, void, void))v214;
    uint64_t v53 = v202;
    v199 = *(void **)(v201 + 16);
    ((void (*)(void *, char *, uint64_t))v199)(v214, v50, v202);
    os_log_type_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v184 = v31;
    if (v56)
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v198 = swift_slowAlloc();
      uint64_t v220 = (void *)v198;
      *(_DWORD *)uint64_t v57 = 136315394;
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000022D5A78F0, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v57 + 12) = 2080;
      lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, MEMORY[0x263F6D310]);
      os_log_type_t v58 = (void (*)(void, void, void))v214;
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = v58;
      uint64_t v62 = *(void **)(v51 + 8);
      ((void (*)(void (*)(void, void, void), uint64_t))v62)(v61, v53);
      _os_log_impl(&dword_22D49E000, v54, v55, "[%s] Converted skeleton contact to ContactQuery: %s", (uint8_t *)v57, 0x16u);
      uint64_t v63 = v198;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v63, -1, -1);
      MEMORY[0x230F85DE0](v57, -1, -1);
    }
    else
    {
      uint64_t v62 = *(void **)(v51 + 8);
      ((void (*)(void (*)(void, void, void), uint64_t))v62)(v52, v53);
    }

    outlined init with copy of DeviceState((uint64_t)v203 + direct field offset for BaseIntentHandler.contactResolver, (uint64_t)&v220);
    uint64_t v64 = v221;
    uint64_t v65 = v222;
    __swift_project_boxed_opaque_existential_1(&v220, v221);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    unint64_t v66 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_22D59FD50;
    ((void (*)(unint64_t, char *, uint64_t))v199)(v67 + v66, v205, v53);
    uint64_t v68 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v65 + 8))(v67, v206, v64, v65);
    uint64_t v198 = 0;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
    swift_bridgeObjectRetain_n();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    BOOL v72 = v213;
    v199 = v62;
    if (v71)
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v220 = (void *)v74;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = swift_bridgeObjectRetain();
      uint64_t v76 = MEMORY[0x230F85100](v75, ContactAttributeSiriMatchesResolutionResult);
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v62 = v199;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v69, v70, "[%s] ContactResolver recommendations: %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v74, -1, -1);
      MEMORY[0x230F85DE0](v73, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = v218;
    uint64_t v15 = *(void *)(v68 + 16);
    if (!v15) {
      break;
    }
    v214 = *(void **)(v188 + 16);
    unint64_t v80 = v68 + ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80));
    uint64_t v31 = *(char **)(v188 + 72);
    uint64_t v81 = (void (**)(char *, uint64_t))(v188 + 8);
    v197 = (char *)v68;
    swift_bridgeObjectRetain();
    uint64_t v29 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v83 = v216;
      uint64_t v82 = ContactAttributeSiriMatchesResolutionResult;
      ((void (*)(char *, unint64_t, uint64_t))v214)(v216, v80, ContactAttributeSiriMatchesResolutionResult);
      uint64_t v84 = Recommendation<A>.assignConfidence()();
      (*v81)(v83, v82);
      uint64_t v85 = *(void *)(v84 + 16);
      uint64_t v18 = (void *)*((void *)v29 + 2);
      uint64_t v17 = (uint64_t)v18 + v85;
      if (__OFADD__(v18, v85)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v17 > *((void *)v29 + 3) >> 1)
      {
        if ((uint64_t)v18 <= v17) {
          uint64_t v87 = (uint64_t)v18 + v85;
        }
        else {
          uint64_t v87 = (uint64_t)v18;
        }
        uint64_t v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v87, 1, (uint64_t)v29);
      }
      if (*(void *)(v84 + 16))
      {
        uint64_t v88 = *((void *)v29 + 2);
        if ((*((void *)v29 + 3) >> 1) - v88 < v85) {
          goto LABEL_90;
        }
        unint64_t v89 = (*((unsigned __int8 *)v213 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v213 + 80);
        uint64_t v90 = v213[9];
        uint64_t v91 = &v29[v89 + v90 * v88];
        if (v84 + v89 < (unint64_t)&v91[v90 * v85] && (unint64_t)v91 < v84 + v89 + v90 * v85) {
          goto LABEL_95;
        }
        swift_arrayInitWithCopy();
        if (v85)
        {
          uint64_t v93 = *((void *)v29 + 2);
          BOOL v94 = __OFADD__(v93, v85);
          uint64_t v95 = v93 + v85;
          if (v94) {
            goto LABEL_91;
          }
          *((void *)v29 + 2) = v95;
        }
      }
      else if (v85)
      {
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      v80 += (unint64_t)v31;
      if (!--v15)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v218;
        BOOL v72 = v213;
        uint64_t v62 = v199;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = (char *)MEMORY[0x263F8EE78];
LABEL_43:
  swift_bridgeObjectRetain();
  uint64_t v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v98 = swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    uint64_t v220 = (void *)v99;
    *(_DWORD *)uint64_t v98 = 136315394;
    uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v98 + 12) = 2048;
    uint64_t v219 = *((void *)v29 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v96, v97, "[%s] ContactResolver weighted recommendations count: %ld", (uint8_t *)v98, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v99, -1, -1);
    MEMORY[0x230F85DE0](v98, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v100 = *((void *)v29 + 2);
  if (v100 != 1)
  {
    if (v100)
    {
      uint64_t v213 = self;
      uint64_t v121 = &v29[(*((unsigned __int8 *)v72 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v72 + 80)];
      uint64_t v204 = (char *)v72[9];
      v203 = (void (**)(char *, uint64_t))(v189 + 8);
      v214 = v72 + 1;
      swift_bridgeObjectRetain();
      uint64_t v122 = MEMORY[0x263F8EE78];
      char v123 = v208;
      do
      {
        v211(v123, v121, v17);
        uint64_t v124 = Contact.id.getter();
        uint64_t v125 = v17;
        v216 = v126;
        uint64_t ContactAttributeSiriMatchesResolutionResult = v124;
        os_log_type_t v127 = v209;
        PersonNameComponents.init()();
        Contact.namePrefix.getter();
        PersonNameComponents.namePrefix.setter();
        Contact.givenName.getter();
        PersonNameComponents.givenName.setter();
        Contact.middleName.getter();
        PersonNameComponents.middleName.setter();
        Contact.familyName.getter();
        PersonNameComponents.familyName.setter();
        Contact.nameSuffix.getter();
        PersonNameComponents.nameSuffix.setter();
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v129 = objc_msgSend(v213, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

        uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v132 = v131;

        (*v203)(v127, v210);
        v215(v123, v125);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v122 + 16) + 1, 1, v122);
          uint64_t v122 = v137;
        }
        unint64_t v134 = *(void *)(v122 + 16);
        unint64_t v133 = *(void *)(v122 + 24);
        if (v134 >= v133 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1, v122);
          uint64_t v122 = v138;
        }
        *(void *)(v122 + 16) = v134 + 1;
        unint64_t v135 = (void *)(v122 + 32 * v134);
        uint64_t v17 = v218;
        unint64_t v136 = v216;
        v135[4] = ContactAttributeSiriMatchesResolutionResult;
        v135[5] = v136;
        v135[6] = v130;
        v135[7] = v132;
        uint64_t v121 = &v204[(void)v121];
        --v100;
      }
      while (v100);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRetain_n();
      uint64_t v139 = Logger.logObject.getter();
      os_log_type_t v140 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = swift_slowAlloc();
        uint64_t v142 = swift_slowAlloc();
        uint64_t v220 = (void *)v142;
        *(_DWORD *)uint64_t v141 = 136315394;
        uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v141 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
        uint64_t v144 = MEMORY[0x230F85100](v122, v143);
        unint64_t v146 = v145;
        swift_bridgeObjectRelease();
        uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v146, (uint64_t *)&v220);
        uint64_t v147 = v218;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v147;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v139, v140, "[%s] Multiple recommendations returned. Returning disambiguation of %s.", (uint8_t *)v141, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v142, -1, -1);
        MEMORY[0x230F85DE0](v141, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v148 = v184;
      uint64_t v149 = v202;
      type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
      unint64_t v150 = specialized Sequence.compactMap<A>(_:)(v122);
      swift_bridgeObjectRelease();
      id v45 = static SiriMatchResolutionResult.disambiguation(with:)(v150);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v199)(v205, v149);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v206, v190);
      v215(v148, v17);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = v184;
      uint64_t v101 = *(void *)(Contact.contactRelations.getter() + 16);
      swift_bridgeObjectRelease();
      if (v101)
      {
        uint64_t v102 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v102, v103))
        {
          os_log_type_t v104 = (uint8_t *)swift_slowAlloc();
          uint64_t v105 = swift_slowAlloc();
          uint64_t v220 = (void *)v105;
          *(_DWORD *)os_log_type_t v104 = 136315138;
          uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_22D49E000, v102, v103, "[%s] No recommendations returned for requested relationship. Returning unsupported.", v104, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v105, -1, -1);
          MEMORY[0x230F85DE0](v104, -1, -1);
        }

        uint64_t v106 = v191;
        uint64_t v107 = v190;
        type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
        id v108 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 5);
      }
      else
      {
        uint64_t v151 = Contact.organizationName.getter();
        unint64_t v153 = v152;
        swift_bridgeObjectRelease();
        if ((v153 & 0x2000000000000000) != 0) {
          uint64_t v154 = HIBYTE(v153) & 0xF;
        }
        else {
          uint64_t v154 = v151 & 0xFFFFFFFFFFFFLL;
        }
        v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.debug.getter();
        BOOL v157 = os_log_type_enabled(v155, v156);
        if (v154)
        {
          if (v157)
          {
            v158 = (uint8_t *)swift_slowAlloc();
            uint64_t v159 = swift_slowAlloc();
            uint64_t v220 = (void *)v159;
            *(_DWORD *)v158 = 136315138;
            uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v155, v156, "[%s] No recommendations returned for requested company. Returning unsupported.", v158, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v159, -1, -1);
            MEMORY[0x230F85DE0](v158, -1, -1);
          }

          uint64_t v106 = v191;
          uint64_t v107 = v190;
          type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
          id v108 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 4);
        }
        else
        {
          if (v157)
          {
            id v181 = (uint8_t *)swift_slowAlloc();
            uint64_t v182 = swift_slowAlloc();
            uint64_t v220 = (void *)v182;
            *(_DWORD *)id v181 = 136315138;
            uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_22D49E000, v155, v156, "[%s] No recommendations returned. Returning unsupported.", v181, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v182, -1, -1);
            MEMORY[0x230F85DE0](v181, -1, -1);
          }

          uint64_t v106 = v191;
          uint64_t v107 = v190;
          type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
          id v108 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 3);
        }
      }
      id v45 = v108;
      ((void (*)(char *, uint64_t))v62)(v205, v202);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v206, v107);
LABEL_9:
      v215(v31, v17);
    }
    return (uint64_t)v45;
  }
  id v109 = specialized BaseIntentHandler.meCard.getter();
  if (!v109) {
    goto LABEL_80;
  }
  v110 = v109;
  id v111 = objc_msgSend(v109, sel_identifier);
  uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v114 = v113;

  if (!*((void *)v29 + 2)) {
    goto LABEL_94;
  }
  uint64_t v115 = v185;
  v211(v185, &v29[(*((unsigned __int8 *)v72 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v72 + 80)], v17);
  uint64_t v116 = Contact.id.getter();
  uint64_t v118 = v117;
  v215(v115, v17);
  if (v112 == v116 && v114 == v118)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0) {
      goto LABEL_79;
    }
  }
  Class v160 = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v161 = MEMORY[0x230F84F70](1699574633, 0xE400000000000000);
  objc_msgSend(v204, sel_setValue_forProperty_, v160, v161);

  v110 = (void *)v161;
LABEL_79:

  uint64_t v17 = v218;
  BOOL v72 = v213;
LABEL_80:
  v162 = Logger.logObject.getter();
  os_log_type_t v163 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v162, v163))
  {
    uint64_t v164 = (uint8_t *)swift_slowAlloc();
    uint64_t v165 = swift_slowAlloc();
    uint64_t v220 = (void *)v165;
    *(_DWORD *)uint64_t v164 = 136315138;
    uint64_t v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, v200 | 0x8000000000000000, (uint64_t *)&v220);
    BOOL v72 = v213;
    uint64_t v17 = v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v162, v163, "[%s] 1 recommendation returned. Returning success.", v164, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v165, -1, -1);
    MEMORY[0x230F85DE0](v164, -1, -1);
  }

  uint64_t ContactAttributeSiriMatchesResolutionResult = type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
  v216 = (char *)type metadata accessor for SiriMatch();
  if (*((void *)v29 + 2))
  {
    uint64_t v166 = &v29[(*((unsigned __int8 *)v72 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v72 + 80)];
    uint64_t v167 = v186;
    v168 = v211;
    v211(v186, v166, v17);
    v214 = (void *)Contact.id.getter();
    uint64_t v170 = v169;
    uint64_t v171 = v215;
    v215(v167, v17);
    v172 = v187;
    v168(v187, v166, v17);
    swift_bridgeObjectRelease();
    v173 = v209;
    PersonNameComponents.init()();
    Contact.namePrefix.getter();
    PersonNameComponents.namePrefix.setter();
    Contact.givenName.getter();
    PersonNameComponents.givenName.setter();
    Contact.middleName.getter();
    PersonNameComponents.middleName.setter();
    Contact.familyName.getter();
    PersonNameComponents.familyName.setter();
    Contact.nameSuffix.getter();
    PersonNameComponents.nameSuffix.setter();
    v174 = self;
    Class v175 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    id v176 = objc_msgSend(v174, sel_localizedStringFromPersonNameComponents_style_options_, v175, 2, 0);

    uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v179 = v178;

    (*(void (**)(char *, uint64_t))(v189 + 8))(v173, v210);
    v171(v172, v17);
    id v180 = SiriMatch.__allocating_init(identifier:fullName:)((uint64_t)v214, v170, v177, v179);
    id v45 = static SiriMatchResolutionResult.success(with:)((uint64_t)v180);

    ((void (*)(char *, uint64_t))v199)(v205, v202);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v206, v190);
    v171(v184, v17);
    return (uint64_t)v45;
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized BaseIntentHandler.resolveSiriMatches(for:)(void *a1)
{
  return OUTLINED_FUNCTION_33_8(a1, (void (*)(void))type metadata accessor for GetContactSiriMatchesResolutionResult, 16, 0x800000022D5A9610, (void (*)(void))type metadata accessor for GetContactSiriMatchesResolutionResult, outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter, (uint64_t (*)(void *))specialized BaseIntentHandler.resolveContacts(intent:));
}

{
  return OUTLINED_FUNCTION_33_8(a1, (void (*)(void))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult, 25, 0x800000022D5A78F0, (void (*)(void))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult, outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter, (uint64_t (*)(void *))specialized BaseIntentHandler.resolveContacts(intent:));
}

{
  uint64_t v1;
  char v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53[3];
  uint64_t v54;
  uint64_t v55;

  uint64_t v3 = specialized BaseIntentHandler.needsMeCard(_:)(a1);
  uint64_t v4 = specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(v3 & 1, (void (*)(void))type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
  if (v4)
  {
    uint64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_22D59FB50;
    *(void *)(v6 + 32) = v5;
    v53[0] = v6;
LABEL_3:
    specialized Array._endMutation()();
    return v53[0];
  }
  type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
  if ((specialized SiriKitContactIntent.me.getter() & 1) != 0
    && (uint64_t v9 = specialized BaseIntentHandler.meCard.getter()) != 0)
  {
    uint64_t v10 = v9;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v53[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_22D49E000, v12, v13, "[%s] Returning MeCard as siriMatch. Contact resolution not needed.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v15, -1, -1);
      MEMORY[0x230F85DE0](v14, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_22D59FB50;
    type metadata accessor for SiriMatch();
    uint64_t v17 = objc_msgSend(v10, sel_identifier);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    uint64_t v21 = CNContact.formattedFullName.getter();
    uint64_t v23 = SiriMatch.__allocating_init(identifier:fullName:)(v18, v20, v21, v22);
    uint64_t v24 = static SiriMatchResolutionResult.success(with:)((uint64_t)v23);

    *(void *)(v16 + 32) = v24;
    v53[0] = v16;
    specialized Array._endMutation()();
    uint64_t v7 = v53[0];
  }
  else
  {
    uint64_t v25 = ModifyContactAttributeIntent.contactIdentifier.getter();
    if (!v26)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_22D59FB50;
      *(void *)(v37 + 32) = specialized BaseIntentHandler.resolveContacts(intent:)((void (**)(char *, uint64_t))a1);
      v53[0] = v37;
      goto LABEL_3;
    }
    uint64_t v27 = v25;
    uint64_t v28 = v26;
    outlined init with copy of DeviceState(v1 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v53);
    uint64_t v29 = v54;
    uint64_t v30 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8))(v27, v28, v29, v30);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
    if (!v38)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.siriContacts);
      uint64_t v32 = Logger.logObject.getter();
      uint64_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v35 = swift_slowAlloc();
        v53[0] = v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v32, v33, "[%s] Received raw contact identifier but could not map it to a contact on the device. Entering needsValue state to prompt for contact.", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v35, -1, -1);
        MEMORY[0x230F85DE0](v34, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      BOOL v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_22D59FB50;
      *(void *)(v36 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      v53[0] = v36;
      goto LABEL_3;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    unint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.siriContacts);
    unint64_t v40 = Logger.logObject.getter();
    uint64_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v53[0] = v43;
      *(_DWORD *)os_log_type_t v42 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_22D49E000, v40, v41, "[%s] Received raw contact identifier, returning this as siriMatch. Contact resolution not needed.", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v43, -1, -1);
      MEMORY[0x230F85DE0](v42, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_22D59FB50;
    id v45 = objc_msgSend(v38, sel_fullName);
    if (v45)
    {
      id v46 = v45;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v49 = v48;
    }
    else
    {
      uint64_t v47 = static String.EMPTY.getter();
      id v49 = v50;
    }
    type metadata accessor for SiriMatch();
    uint64_t v51 = SiriMatch.__allocating_init(identifier:fullName:)(v27, v28, v47, v49);
    uint64_t v52 = static SiriMatchResolutionResult.success(with:)((uint64_t)v51);

    *(void *)(v44 + 32) = v52;
    v53[0] = v44;
    specialized Array._endMutation()();
    uint64_t v7 = v53[0];
  }
  return v7;
}

uint64_t specialized BaseIntentHandler.resolveSiriMatches(for:)(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(void *), uint64_t (*a7)(void *))
{
  char v13 = specialized BaseIntentHandler.needsMeCard(_:)(a1);
  id v14 = specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(v13 & 1, a2);
  if (v14)
  {
    id v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v16 + 16) = xmmword_22D59FB50;
    *(void *)(v16 + 32) = v15;
    v75[0] = v16;
LABEL_19:
    specialized Array._endMutation()();
    return v75[0];
  }
  a5();
  if (specialized SiriKitContactIntent.me.getter())
  {
    uint64_t v17 = specialized BaseIntentHandler.meCard.getter();
    if (v17)
    {
      uint64_t v18 = v17;
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = OUTLINED_FUNCTION_21_0(v19, (uint64_t)static Logger.siriContacts);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_24();
        uint64_t v23 = OUTLINED_FUNCTION_35();
        v75[0] = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        OUTLINED_FUNCTION_51_6(v23, v24, v25, v26, v27);
        OUTLINED_FUNCTION_32_11();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v20, v21, "[%s] Returning MeCard as siriMatch. Contact resolution not needed.", v22, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v28 = OUTLINED_FUNCTION_5_21();
      *(_OWORD *)(v28 + 16) = xmmword_22D59FB50;
      type metadata accessor for SiriMatch();
      id v29 = objc_msgSend(v18, sel_identifier);
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      uint64_t v33 = CNContact.formattedFullName.getter();
      id v35 = SiriMatch.__allocating_init(identifier:fullName:)(v30, v32, v33, v34);
      id v36 = static SiriMatchResolutionResult.success(with:)((uint64_t)v35);

      *(void *)(v28 + 32) = v36;
      specialized Array._endMutation()();
      uint64_t v37 = v28;

      return v37;
    }
  }
  uint64_t v38 = a6(a1);
  if (!v39)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v53 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v53 + 16) = xmmword_22D59FB50;
    id v54 = (id)a7(a1);
LABEL_18:
    *(void *)(v53 + 32) = v54;
    v75[0] = v53;
    goto LABEL_19;
  }
  uint64_t v40 = v38;
  uint64_t v41 = v39;
  outlined init with copy of DeviceState(v7 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v75);
  uint64_t v42 = v76;
  uint64_t v43 = v77;
  __swift_project_boxed_opaque_existential_1(v75, v76);
  BOOL v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 8))(v40, v41, v42, v43);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v75);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    id v45 = OUTLINED_FUNCTION_21_0(v44, (uint64_t)static Logger.siriContacts);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_11_2(v46))
    {
      uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_24();
      uint64_t v48 = OUTLINED_FUNCTION_35();
      v75[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      OUTLINED_FUNCTION_51_6(v48, v49, v50, v51, v52);
      OUTLINED_FUNCTION_32_11();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_22D49E000, v45, (os_log_type_t)v41, "[%s] Received raw contact identifier but could not map it to a contact on the device. Entering needsValue state to prompt for contact.", v47, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v53 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v53 + 16) = xmmword_22D59FB50;
    id v54 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
    goto LABEL_18;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  os_log_type_t v58 = OUTLINED_FUNCTION_21_0(v57, (uint64_t)static Logger.siriContacts);
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v59))
  {
    unint64_t v60 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v61 = OUTLINED_FUNCTION_35();
    v75[0] = v61;
    *(_DWORD *)unint64_t v60 = 136315138;
    OUTLINED_FUNCTION_51_6(v61, v62, v63, v64, v65);
    OUTLINED_FUNCTION_32_11();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v58, v59, "[%s] Received raw contact identifier, returning this as siriMatch. Contact resolution not needed.", v60, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v66 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v66 + 16) = xmmword_22D59FB50;
  id v67 = objc_msgSend(v56, sel_fullName);
  if (v67)
  {
    uint64_t v68 = v67;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
  }
  else
  {
    uint64_t v69 = static String.EMPTY.getter();
    uint64_t v71 = v72;
  }
  type metadata accessor for SiriMatch();
  id v73 = SiriMatch.__allocating_init(identifier:fullName:)(v40, v41, v69, v71);
  id v74 = static SiriMatchResolutionResult.success(with:)((uint64_t)v73);

  *(void *)(v66 + 32) = v74;
  v75[0] = v66;
  specialized Array._endMutation()();
  uint64_t v37 = v75[0];

  return v37;
}

uint64_t specialized BaseIntentHandler.needsMeCard(_:)(void *a1)
{
  swift_getObjectType();
  dynamic_cast_existential_1_unconditional((uint64_t)a1);
  uint64_t v3 = v2;
  id v4 = a1;
  if (specialized SiriKitContactIntent.me.getter())
  {

    return 1;
  }
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  uint64_t v7 = v6;

  if (v7)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;

  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)a1)) {
    return 1;
  }
  uint64_t v3 = v2;
  id v4 = a1;
  if (specialized SiriKitContactIntent.me.getter())
  {

    return 1;
  }
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  uint64_t v7 = v6;

  if (v7)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return 0;
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  void v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  void v11[4] = &_sIeghH_IeAgH_TRTATu;
  v11[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v8, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v11);
  return swift_release();
}

uint64_t ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:), 0, 0);
}

uint64_t ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  OUTLINED_FUNCTION_4();
  if (objc_msgSend(*(id *)(v0 + 16), sel_contactAttributeToModify) == (id)10)
  {
    id v1 = objc_msgSend(*(id *)(v0 + 16), sel_relatedContact);

    if (v1)
    {
      uint64_t v2 = specialized BaseIntentHandler.resolveSiriMatches(for:)(*(void **)(v0 + 16));
      goto LABEL_7;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v3 + 16) = xmmword_22D59FB50;
    type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
    id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v3 + 16) = xmmword_22D59FB50;
    type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
    id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
  }
  *(void *)(v3 + 32) = v4;
  specialized Array._endMutation()();
  uint64_t v2 = v3;
LABEL_7:
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v2);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126AD0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:));
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:);
  return ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = (void (**)(void, void))v1[4];
  uint64_t v3 = (void *)v1[3];
  id v4 = (void *)v1[2];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_3();
  *id v6 = v5;
  swift_task_dealloc();

  type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v2)[2](v2, isa);

  _Block_release(v2);
  OUTLINED_FUNCTION_5();
  return v8();
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)()
{
  OUTLINED_FUNCTION_4();
  v1[14] = v2;
  v1[15] = v0;
  uint64_t v3 = type metadata accessor for Signpost.OpenSignpost();
  v1[16] = v3;
  OUTLINED_FUNCTION_10_0(v3);
  v1[17] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:), 0, 0);
}

{
  void *v0;
  void *v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t (*v20)();
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  os_log_type_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  void *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  Swift::String v80;
  BOOL v81;
  char v82;
  BOOL v83;
  char v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *ObjCClassFromMetadata;
  void *v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  os_log_type_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130[2];
  void *v131;
  uint64_t v132;

  uint64_t v131 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = (void **)(v0 + 14);
  id v1 = (void *)v0[14];
  id v4 = v0[16];
  uint64_t v3 = v0[17];
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = v3 + *(int *)(v4 + 20);
  *(void *)uint64_t v5 = "ResolveModifyRelationship";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  id v6 = v5;
  if (objc_msgSend(v1, sel_contactAttributeToModify) != (id)10)
  {
    OUTLINED_FUNCTION_53_4();
    if (!v81) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)OUTLINED_FUNCTION_21_0(v7, (uint64_t)static Logger.siriContacts);
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v9))
    {
      uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_24();
      uint64_t v11 = OUTLINED_FUNCTION_35();
      v130[0] = v11;
      *uint64_t v10 = 136315138;
      v0[2] = OUTLINED_FUNCTION_4_31(v11, 0x800000022D5A8ED0, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_36_5(&dword_22D49E000, v12, v13, "[%s] Since we're not modifying relationship, returning notRequired for modifyRelationship.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    OUTLINED_FUNCTION_40_10();
    id v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
    goto LABEL_27;
  }
  if ((*(unsigned char *)(v0[15] + direct field offset for BaseIntentHandler.passedPrereqs) & 1) == 0
    && specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(1, (void (*)(void))type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult))
  {
    static os_signpost_type_t.end.getter();
    goto LABEL_82;
  }
  id v15 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v2);
  if (!v16)
  {
    OUTLINED_FUNCTION_53_4();
    if (!v81) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = (void *)OUTLINED_FUNCTION_21_0(v43, (uint64_t)static Logger.siriContacts);
    id v45 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v45))
    {
      os_log_type_t v46 = (_DWORD *)OUTLINED_FUNCTION_24();
      uint64_t v47 = OUTLINED_FUNCTION_35();
      v130[0] = v47;
      *os_log_type_t v46 = 136315138;
      v0[3] = OUTLINED_FUNCTION_4_31(v47, 0x800000022D5A8ED0, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_36_5(&dword_22D49E000, v48, v49, "[%s] modifyRelationship slot is empty, return needsValue to get value from user.");
      OUTLINED_FUNCTION_19_13();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    OUTLINED_FUNCTION_40_10();
    id v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
LABEL_27:
    uint64_t v50 = v14;
LABEL_28:
    static os_signpost_type_t.end.getter();
    goto LABEL_82;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  uint64_t v19 = specialized BaseIntentHandler.meCard.getter();
  uint64_t v20 = swift_setDeallocating;
  uint64_t v128 = (unint64_t)v18;
  if (!v19)
  {
LABEL_76:
    OUTLINED_FUNCTION_53_4();
    if (!v81) {
      swift_once();
    }
    unint64_t v89 = type metadata accessor for Logger();
    __swift_project_value_buffer(v89, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    uint64_t v90 = (void *)Logger.logObject.getter();
    uint64_t v91 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v91))
    {
      v92 = OUTLINED_FUNCTION_29_5();
      uint64_t v93 = swift_slowAlloc();
      v130[0] = v93;
      *(_DWORD *)v92 = *((void *)v20 + 323);
      v0[4] = OUTLINED_FUNCTION_4_31(v93, 0x800000022D5A8ED0, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v92 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v128, v130);
      uint64_t v18 = (uint64_t *)v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_9_22(&dword_22D49E000, v94, v95, "[%s] Successfully resolved modifyRelationship: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    OUTLINED_FUNCTION_40_10();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    os_log_type_t v97 = (void *)MEMORY[0x230F84F70](v17, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedString_, v97);

    static os_signpost_type_t.end.getter();
    goto LABEL_82;
  }
  os_log_type_t v21 = v19;
  uint64_t v22 = *v2;
  uint64_t v23 = objc_msgSend(v19, sel_contactRelations);

  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v22);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t *)v128;
    uint64_t v20 = swift_setDeallocating;
    goto LABEL_76;
  }
  uint64_t v27 = v26;
  os_log_type_t v127 = v25;
  uint64_t v28 = v26 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v26 & 0xC000000000000001) == 0, v26);
  if (v28) {
    id v29 = (id)MEMORY[0x230F854E0](0, v27);
  }
  else {
    id v29 = *(id *)(v27 + 32);
  }
  uint64_t v30 = v29;
  uint64_t v20 = swift_setDeallocating;
  swift_bridgeObjectRelease();
  uint64_t v31 = outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v30);
  if (!v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t *)v128;
    goto LABEL_76;
  }
  char v120 = v31;
  uint64_t v121 = v32;
  uint64_t v122 = v17;
  OUTLINED_FUNCTION_53_4();
  uint64_t v33 = v127;
  if (!v81) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  id v35 = Logger.logObject.getter();
  LOBYTE(v36) = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, (os_log_type_t)v36))
  {
    uint64_t v125 = v36;
    id v36 = OUTLINED_FUNCTION_29_5();
    char v123 = swift_slowAlloc();
    v130[0] = v123;
    *(_DWORD *)id v36 = 136315394;
    v0[12] = OUTLINED_FUNCTION_4_31(v123, 0x800000022D5A8ED0, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = MEMORY[0x230F85100](v37, v24);
    uint64_t v39 = v6;
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v41, v130);
    OUTLINED_FUNCTION_67_1(v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v6 = v39;
    uint64_t v33 = v127;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_58_4(&dword_22D49E000, v35, v125, "[%s] Existing contactRelations: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v18 = (uint64_t *)v128;
  uint64_t v20 = (uint64_t (*)())&off_2649B0000;
  uint64_t v119 = v33 >> 62;
  if (objc_msgSend(*v2, sel_modifyOperation) != (id)1)
  {
LABEL_67:
    uint64_t v85 = *v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v86 = specialized _ArrayProtocol.filter(_:)(v33, v17, v18, v120, v121);
    uint64_t v20 = swift_setDeallocating;
    if (objc_msgSend(v85, sel_modifyOperation) != (id)3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_76;
    }
    if (v119)
    {
      swift_bridgeObjectRetain();
      uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v87 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    LOBYTE(v36) = 0;
    swift_bridgeObjectRelease();
    if (!v87)
    {
      swift_bridgeObjectRelease();
LABEL_86:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v101 = Logger.logObject.getter();
      uint64_t v102 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34(v102))
      {
        os_log_type_t v103 = OUTLINED_FUNCTION_35();
        id v129 = swift_slowAlloc();
        v130[0] = v129;
        *(_DWORD *)os_log_type_t v103 = 136315650;
        v0[6] = OUTLINED_FUNCTION_4_31(v129, 0x800000022D5A8ED0, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v103 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, (unint64_t)v18, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v103 + 22) = 2080;
        swift_bridgeObjectRetain();
        os_log_type_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, (unint64_t)v121, v130);
        OUTLINED_FUNCTION_67_1(v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_22D49E000, v101, (os_log_type_t)v36, "[%s] User is trying to delete a relationship %s for contact named %s which doesn't exist. Returning relationshipNonexistent.", (uint8_t *)v103, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      OUTLINED_FUNCTION_40_10();
      uint64_t v105 = OUTLINED_FUNCTION_68_2();
      static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(v105);
      goto LABEL_28;
    }
    if (!(v86 >> 62))
    {
      uint64_t v88 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_73;
    }
LABEL_99:
    OUTLINED_FUNCTION_4_26();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_73:
    swift_bridgeObjectRelease();
    if (v88)
    {
      swift_bridgeObjectRelease();
      goto LABEL_76;
    }
    goto LABEL_86;
  }
  if (v119)
  {
    OUTLINED_FUNCTION_4_26();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v51 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v118 = v6;
  if (v51)
  {
    if (v51 < 1)
    {
      __break(1u);
      goto LABEL_99;
    }
    uint64_t v52 = 0;
    uint64_t v124 = v33 & 0xC000000000000001;
    uint64_t v53 = MEMORY[0x263F8EE78];
    v126 = v51;
    do
    {
      if (v124) {
        id v54 = (id)MEMORY[0x230F854E0](v52, v33);
      }
      else {
        id v54 = *(id *)(v33 + 8 * v52 + 32);
      }
      os_log_type_t v55 = v54;
      BOOL v56 = objc_msgSend(v54, sel_label);
      if (v56)
      {
        uint64_t v57 = v56;
        os_log_type_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v60 = v59;
      }
      else
      {
        os_log_type_t v58 = 0;
        unint64_t v60 = 0;
      }
      uint64_t v61 = static Dictionary<>.nlSemantic(forCNLabel:)(v58, v60);
      uint64_t v63 = v62;
      swift_bridgeObjectRelease();
      uint64_t v64 = objc_msgSend(v55, sel_value);
      uint64_t v65 = objc_msgSend(v64, sel_name);

      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v68 = v67;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v53 + 16) + 1, 1, v53);
        uint64_t v53 = v72;
      }
      uint64_t v70 = *(void *)(v53 + 16);
      uint64_t v69 = *(void *)(v53 + 24);
      if (v70 >= v69 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1, v53);
        uint64_t v53 = v73;
      }
      ++v52;
      *(void *)(v53 + 16) = v70 + 1;
      uint64_t v71 = (void *)(v53 + 32 * v70);
      v71[4] = v61;
      v71[5] = v63;
      v71[6] = v66;
      v71[7] = v68;
      uint64_t v33 = v127;
    }
    while (v126 != v52);
  }
  else
  {
    uint64_t v53 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  id v74 = *(void *)(v53 + 16);
  uint64_t v18 = (uint64_t *)v128;
  if (!v74)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    uint64_t v17 = v122;
    uint64_t v33 = v127;
    goto LABEL_67;
  }
  uint64_t v75 = (uint64_t **)(v53 + 56);
  while (1)
  {
    uint64_t v77 = (uint64_t)*(v75 - 3);
    uint64_t v76 = *(v75 - 2);
    uint64_t v79 = (uint64_t)*(v75 - 1);
    unint64_t v78 = *v75;
    unint64_t v80 = String.lowercased()();
    uint64_t v81 = v77 == v80._countAndFlagsBits && v76 == v80._object;
    if (v81)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v82 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = (uint64_t *)v128;
        goto LABEL_65;
      }
    }
    uint64_t v83 = v79 == v120 && v121 == v78;
    uint64_t v18 = (uint64_t *)v128;
    if (v83) {
      break;
    }
    uint64_t v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v84) {
      goto LABEL_91;
    }
LABEL_65:
    v75 += 4;
    if (!--v74) {
      goto LABEL_66;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_91:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v106 = Logger.logObject.getter();
  uint64_t v107 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_11_2(v107))
  {
    id v108 = OUTLINED_FUNCTION_35();
    id v109 = swift_slowAlloc();
    v130[0] = v109;
    *(_DWORD *)id v108 = 136315650;
    v110 = OUTLINED_FUNCTION_4_31(v109, 0x800000022D5A8ED0, v130);
    OUTLINED_FUNCTION_43_7(v110, v111, v112, v108 + 12, v113, v114, v115, v116, v117, v118, (uint64_t)(v0 + 12), v0 + 9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v108 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v128, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v108 + 22) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, (unint64_t)v121, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v106, (os_log_type_t)v128, "[%s] User is trying to add a relationship %s for contact named %s which already exists. Returning relationshipAlreadySet.", (uint8_t *)v108, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  OUTLINED_FUNCTION_40_10();
  static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(1);
  static os_signpost_type_t.end.getter();
LABEL_82:
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0[17]);
  swift_task_dealloc();
  uint64_t v98 = OUTLINED_FUNCTION_11_20();
  return v99(v98);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126AA8, (uint64_t)&async function pointer to partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:));
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:);
  return ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)();
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for Signpost.OpenSignpost();
  v1[4] = v3;
  OUTLINED_FUNCTION_10_0(v3);
  v1[5] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ModifyContactAttributeIntentHandler.resolveModifyNickName(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  void *ObjCClassFromMetadata;
  void *v37;
  uint64_t v38;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 32);
  id v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  id v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v5 = "ResolveModifyNickname";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  if (objc_msgSend(v3, sel_contactAttributeToModify) != (id)6
    || objc_msgSend(*(id *)(v0 + 16), sel_contactAttributeToModify) == (id)6 && OUTLINED_FUNCTION_70_2() == (id)3)
  {
    type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
    id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
LABEL_7:
    uint64_t v7 = v6;
    goto LABEL_8;
  }
  if ((*(unsigned char *)(*(void *)(v0 + 24) + direct field offset for BaseIntentHandler.passedPrereqs) & 1) != 0
    || !specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(1, (void (*)(void))type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult))
  {
    uint64_t v12 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(*(void **)(v0 + 16));
    if (!v13)
    {
      type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
      id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      goto LABEL_7;
    }
    id v14 = v12;
    id v15 = v13;
    uint64_t v16 = specialized BaseIntentHandler.meCard.getter();
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = objc_msgSend(v16, sel_nickname);

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_type_t v21 = v20;

      if (v14 == v19 && v15 == v21)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = OUTLINED_FUNCTION_50_6();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          goto LABEL_25;
        }
      }
      if (OUTLINED_FUNCTION_70_2() == (id)1)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
        uint64_t v24 = 1;
LABEL_35:
        static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(v24);
        goto LABEL_8;
      }
    }
LABEL_25:
    uint64_t v25 = specialized BaseIntentHandler.meCard.getter();
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = objc_msgSend(v25, sel_nickname);

      uint64_t v28 = specialized BaseIntentHandler.meCard.getter();
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = objc_msgSend(v28, sel_nickname);

        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        if (v14 == v31 && v15 == v33)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          id v35 = OUTLINED_FUNCTION_50_6();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0) {
            goto LABEL_32;
          }
        }
LABEL_37:
        type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
        uint64_t v37 = (void *)MEMORY[0x230F84F70](v14, v15);
        swift_bridgeObjectRelease();
        objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedString_, v37);

        goto LABEL_8;
      }
    }
LABEL_32:
    if (OUTLINED_FUNCTION_70_2() == (id)3 || OUTLINED_FUNCTION_70_2() == (id)2)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
      uint64_t v24 = OUTLINED_FUNCTION_68_2();
      goto LABEL_35;
    }
    goto LABEL_37;
  }
LABEL_8:
  static os_signpost_type_t.end.getter();
  uint64_t v8 = *(void *)(v0 + 40);
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v8);
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_11_20();
  return v10(v9);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126A80, (uint64_t)&async function pointer to partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:));
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)();
}

uint64_t ModifyContactAttributeIntentHandler.confirm(intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[10] = v1;
  uint64_t v2 = type metadata accessor for Signpost.OpenSignpost();
  v0[11] = v2;
  OUTLINED_FUNCTION_10_0(v2);
  v0[12] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ModifyContactAttributeIntentHandler.confirm(intent:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  void **v2;
  void *v3;
  int *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  int *v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  int *v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;

  uint64_t v76 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v1 = v0 + 8;
  uint64_t v2 = (void **)(v0 + 10);
  uint64_t v3 = (void *)v0[10];
  uint64_t v4 = (int *)v0[11];
  uint64_t v5 = v0[12];
  id v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v7 = v5 + v4[5];
  *(void *)uint64_t v7 = "ConfirmModifyContactAttribute";
  *(void *)(v7 + 8) = 29;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = objc_msgSend(v3, sel_contactAttributeToModify);
  if (v8 != (id)6)
  {
    if (v8 == (id)10)
    {
      id v73 = v0;
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v9 = OUTLINED_FUNCTION_65_0();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
      uint64_t v10 = v4;
      uint64_t v11 = Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.debug.getter();
      char v13 = os_log_type_enabled(v11, v12);
      id v14 = *v2;
      if (v13)
      {
        id v15 = OUTLINED_FUNCTION_29_5();
        id v67 = (void *)OUTLINED_FUNCTION_11_21();
        uint64_t v70 = OUTLINED_FUNCTION_35();
        uint64_t v75 = v70;
        *(_DWORD *)id v15 = 136315394;
        *uint64_t v1 = OUTLINED_FUNCTION_4_31(v70, 0x800000022D5A8ED0, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 12) = 2112;
        v73[9] = v14;
        uint64_t v16 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v67 = v14;

        _os_log_impl(&dword_22D49E000, v11, v12, "[%s] Confirming intent for modifyRelationship: %@", (uint8_t *)v15, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_19_13();
        OUTLINED_FUNCTION_2();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      uint64_t v34 = *v2;
      id v35 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v2);
      uint64_t v37 = v36;
      uint64_t v38 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v34);
      uint64_t v39 = v38;
      if (v38)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v38 & 0xC000000000000001) == 0, v38);
        if ((v39 & 0xC000000000000001) != 0) {
          uint64_t v40 = (id)MEMORY[0x230F854E0](0, v39);
        }
        else {
          uint64_t v40 = *(id *)(v39 + 32);
        }
        uint64_t v41 = v40;
        uint64_t v0 = v73;
        swift_bridgeObjectRelease();
        uint64_t v39 = outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v41);
        uint64_t v43 = v42;
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v0 = v73;
      }
      type metadata accessor for ModifyContactAttributeIntentResponse();
      ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(v35, v37, v39, v43, 1);
      goto LABEL_34;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v25 = OUTLINED_FUNCTION_65_0();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
    uint64_t v26 = v4;
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.debug.getter();
    id v29 = OUTLINED_FUNCTION_34(v28);
    uint64_t v30 = *v2;
    if (v29)
    {
      OUTLINED_FUNCTION_29_5();
      uint64_t v31 = (void *)OUTLINED_FUNCTION_5_34();
      uint64_t v68 = OUTLINED_FUNCTION_35();
      uint64_t v75 = v68;
      *(_DWORD *)uint64_t v2 = 136315394;
      uint64_t v32 = OUTLINED_FUNCTION_4_31(v68, 0x800000022D5A8ED0, &v75);
      OUTLINED_FUNCTION_67_1(v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_63_1();
      v0[3] = v30;
      uint64_t v33 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v30;

      OUTLINED_FUNCTION_14_20(&dword_22D49E000, v27, (os_log_type_t)((_BYTE)v0 + 64), "[%s] Returning continueInApp for intent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_48_6();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    os_log_type_t v59 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    unint64_t v60 = OUTLINED_FUNCTION_68_2();
LABEL_33:
    ModifyContactAttributeIntentResponse.init(code:userActivity:)(v60, 0);
    goto LABEL_34;
  }
  if (objc_msgSend(*v2, sel_modifyOperation) == (id)3)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v17 = OUTLINED_FUNCTION_65_0();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
    uint64_t v18 = v4;
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.debug.getter();
    os_log_type_t v21 = OUTLINED_FUNCTION_4_0(v20);
    uint64_t v22 = *v2;
    if (v21)
    {
      OUTLINED_FUNCTION_29_5();
      uint64_t v71 = (void *)OUTLINED_FUNCTION_5_34();
      id v74 = OUTLINED_FUNCTION_35();
      uint64_t v75 = v74;
      *(_DWORD *)uint64_t v2 = 136315394;
      uint64_t v23 = OUTLINED_FUNCTION_4_31(v74, 0x800000022D5A8ED0, &v75);
      OUTLINED_FUNCTION_69_1(v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_63_1();
      v0[7] = v22;
      uint64_t v24 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v71 = v22;

      OUTLINED_FUNCTION_14_20(&dword_22D49E000, v19, (os_log_type_t)v4, "[%s] Returning success for intent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_19_13();
      OUTLINED_FUNCTION_2();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    uint64_t v61 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    unint64_t v60 = 4;
    goto LABEL_33;
  }
  uint64_t v72 = v7;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v44 = OUTLINED_FUNCTION_65_0();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
  id v45 = v4;
  os_log_type_t v46 = Logger.logObject.getter();
  uint64_t v47 = static os_log_type_t.debug.getter();
  uint64_t v48 = OUTLINED_FUNCTION_34(v47);
  uint64_t v49 = *v2;
  if (v48)
  {
    OUTLINED_FUNCTION_29_5();
    uint64_t v50 = (void *)OUTLINED_FUNCTION_5_34();
    uint64_t v69 = OUTLINED_FUNCTION_35();
    uint64_t v75 = v69;
    *(_DWORD *)uint64_t v2 = 136315394;
    uint64_t v51 = OUTLINED_FUNCTION_4_31(v69, 0x800000022D5A8ED0, &v75);
    OUTLINED_FUNCTION_43_7(v51, v52, v53, (uint64_t)v0 + 92, v54, v55, v56, v57, (uint64_t)(v0 + 6), v69, v72, v0 + 4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_63_1();
    v0[5] = v49;
    os_log_type_t v58 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v50 = v49;

    OUTLINED_FUNCTION_14_20(&dword_22D49E000, v46, (os_log_type_t)((_BYTE)v0 + 64), "[%s] Confirming intent for modifyNickname: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v66 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
  ModifyContactAttributeIntentResponse.init(code:userActivity:)(1, 0);
LABEL_34:
  uint64_t v62 = v0[12];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v62);
  swift_task_dealloc();
  uint64_t v63 = OUTLINED_FUNCTION_11_20();
  return v64(v63);
}

uint64_t @objc ModifyContactAttributeIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126A58, (uint64_t)&async function pointer to partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.confirm(intent:));
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return ModifyContactAttributeIntentHandler.confirm(intent:)();
}

uint64_t ModifyContactAttributeIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_4();
  v1[51] = v2;
  v1[52] = v0;
  uint64_t v3 = type metadata accessor for Signpost.OpenSignpost();
  v1[53] = v3;
  OUTLINED_FUNCTION_10_0(v3);
  v1[54] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ModifyContactAttributeIntentHandler.handle(intent:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  os_log_type_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  id v15;
  id *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  id *v24;
  id v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  unint64_t v32;
  id v33;
  void *v34;
  _DWORD *v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(void);
  id v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  const char *v48;
  id v49;
  uint64_t v50;
  os_log_type_t v51;
  void *v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  NSObject *v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  NSObject *v79;
  id v80;
  id v81;
  void *v82;
  os_log_type_t v83;
  BOOL v84;
  id v85;
  void *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  BOOL v95;
  id v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  BOOL v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  void (*v111)(void);
  id v112;
  char *v113;
  os_log_type_t v114;
  void *v115;
  os_log_type_t v116;
  BOOL v117;
  void *v118;
  void *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  BOOL v124;
  id v125;
  void *v126;
  void *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  os_log_type_t v135;
  BOOL v136;
  id v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  os_log_type_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(char *);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  uint64_t v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  uint64_t v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;

  uint64_t v221 = v0;
  uint64_t v1 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v3 = v0[53];
  uint64_t v2 = v1[54];
  uint64_t v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = v2 + *(int *)(v3 + 20);
  *(void *)uint64_t v5 = "HandleModifyContactAttribute";
  *(void *)(v5 + 8) = 28;
  uint64_t v219 = v5;
  *(unsigned char *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  id v6 = (void *)v1[51];
  id v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  uint64_t v9 = v6;
  v214 = v8;
  uint64_t v10 = (void *)Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = OUTLINED_FUNCTION_4_0(v11);
  char v13 = (void *)v1[51];
  uint64_t v196 = (uint64_t)(v1 + 49);
  if (v12)
  {
    OUTLINED_FUNCTION_29_5();
    uint64_t v191 = OUTLINED_FUNCTION_5_34();
    id v14 = OUTLINED_FUNCTION_35();
    uint64_t v220 = v14;
    void *v4 = 136315394;
    v1[49] = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v185, v191, v196, v14, v206, v214, v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_63_1();
    v1[50] = v13;
    id v15 = v13;
    uint64_t v16 = (id *)(v1 + 51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v190 = v13;

    OUTLINED_FUNCTION_9_22(&dword_22D49E000, v17, v18, "[%s] Handling intent: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_19_13();
    OUTLINED_FUNCTION_2();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v16 = (id *)(v1 + 51);
  }
  uint64_t v19 = specialized BaseIntentHandler.meCard.getter();
  if (!v19)
  {
    uint64_t v49 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    uint64_t v50 = OUTLINED_FUNCTION_68_2();
    uint64_t v38 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(v50, 0);
    goto LABEL_66;
  }
  uint64_t v20 = v19;
  os_log_type_t v21 = v1 + 30;
  uint64_t v22 = (uint64_t)(v1 + 31);
  uint64_t v23 = v1 + 35;
  uint64_t v24 = v16;
  uint64_t v25 = objc_msgSend(*v16, sel_contactAttributeToModify);
  if (v25 != (id)6)
  {
    uint64_t v192 = (uint64_t)(v1 + 35);
    uint64_t v26 = v1 + 44;
    uint64_t v27 = v1 + 45;
    if (v25 != (id)10)
    {
      v187 = (uint64_t)(v1 + 39);
      uint64_t v207 = (uint64_t)v1;
      uint64_t v66 = *v24;
      id v67 = Logger.logObject.getter();
      uint64_t v68 = static os_log_type_t.error.getter();
      uint64_t v69 = os_log_type_enabled(v67, v68);
      uint64_t v70 = *v24;
      if (v69)
      {
        uint64_t v202 = (uint64_t)v20;
        uint64_t v71 = OUTLINED_FUNCTION_29_5();
        swift_slowAlloc();
        OUTLINED_FUNCTION_41_6();
        *(_DWORD *)uint64_t v71 = 136315394;
        *uint64_t v26 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v187, v192, v196, v202, v207, v214, v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v71 + 12) = 2080;
        *uint64_t v188 = objc_msgSend(v70, sel_contactAttributeToModify);
        uint64_t v72 = String.init<A>(describing:)();
        *os_log_type_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v220);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_58_4(&dword_22D49E000, v67, v68, "[%s] Unsupported attribute requested to be modified: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        uint64_t v20 = v203;
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      unint64_t v80 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
      uint64_t v38 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(100, 0);

      goto LABEL_29;
    }
    uint64_t v178 = (uint64_t)(v1 + 44);
    uint64_t v182 = (uint64_t)(v1 + 37);
    outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v24);
    if (v28)
    {
      v185 = (uint64_t)(v1 + 39);
      v173 = (uint64_t)(v1 + 45);
      id v29 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(*v24);
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = v24;
        uint64_t v32 = v29 & 0xC000000000000001;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v29 & 0xC000000000000001) == 0, v29);
        uint64_t v33 = v32 ? (id)MEMORY[0x230F854E0](0, v30) : *(id *)(v30 + 32);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v34);
        uint64_t v24 = v31;
        if (v35)
        {
          id v36 = v35;
          uint64_t v37 = (char *)objc_msgSend(*v31, sel_modifyOperation);
          unint64_t v200 = v20;
          if ((unint64_t)(v37 - 1) < 2)
          {
            uint64_t v38 = (char *)(v1 + 2);
            outlined init with copy of DeviceState(v1[52] + direct field offset for BaseIntentHandler.contactService, (uint64_t)(v1 + 2));
            uint64_t v27 = v20;
            uint64_t v39 = v1[6];
            __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
            OUTLINED_FUNCTION_64_3();
            v40();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v41 = objc_allocWithZone((Class)OUTLINED_FUNCTION_42_10());
            uint64_t v42 = OUTLINED_FUNCTION_12_22();
            uint64_t v43 = OUTLINED_FUNCTION_71_2();
            uint64_t v44 = static os_log_type_t.error.getter();
            if (OUTLINED_FUNCTION_34(v44))
            {
              OUTLINED_FUNCTION_29_5();
              id v45 = (void *)OUTLINED_FUNCTION_5_34();
              OUTLINED_FUNCTION_35();
              OUTLINED_FUNCTION_41_6();
              OUTLINED_FUNCTION_36_9(4.8151e-34);
              os_log_type_t v46 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v178, v182, v185, (uint64_t)(v1 + 47), (uint64_t)v43, (uint64_t)v200, v206, v214, v219);
              void *v174 = v46;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_16_17();
              v1[46] = v38;
              uint64_t v47 = v38;
              OUTLINED_FUNCTION_54_5();
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *id v45 = v38;

              uint64_t v48 = "[%s] Add relationship failed for intent, returning failure: %@";
              uint64_t v43 = v197;
LABEL_47:
              OUTLINED_FUNCTION_14_20(&dword_22D49E000, v43, (os_log_type_t)v39, v48);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              OUTLINED_FUNCTION_28_12();
              OUTLINED_FUNCTION_2();
              OUTLINED_FUNCTION_24_13();
              OUTLINED_FUNCTION_2();
              OUTLINED_FUNCTION_2();

              uint64_t v38 = v47;
              goto LABEL_66;
            }
LABEL_58:

LABEL_65:
            goto LABEL_66;
          }
          if (v37 == (char *)3)
          {
            uint64_t v38 = (char *)(v1 + 7);
            uint64_t v198 = (uint64_t)(v1 + 42);
            outlined init with copy of DeviceState(v1[52] + direct field offset for BaseIntentHandler.contactService, (uint64_t)(v1 + 7));
            uint64_t v39 = v1[11];
            __swift_project_boxed_opaque_existential_1(v1 + 7, v1[10]);
            OUTLINED_FUNCTION_55_4();
            OUTLINED_FUNCTION_64_3();
            v111();
            if (v1 != (void *)-360)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v112 = objc_allocWithZone((Class)OUTLINED_FUNCTION_42_10());
              uint64_t v113 = OUTLINED_FUNCTION_12_22();
              uint64_t v43 = OUTLINED_FUNCTION_71_2();
              uint64_t v114 = static os_log_type_t.error.getter();
              if (OUTLINED_FUNCTION_34(v114))
              {
                OUTLINED_FUNCTION_29_5();
                uint64_t v115 = (void *)OUTLINED_FUNCTION_5_34();
                OUTLINED_FUNCTION_35();
                OUTLINED_FUNCTION_41_6();
                *id v36 = 136315394;
                v1[40] = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v178, v182, v185, v192, v198, (uint64_t)v200, (uint64_t)v1, v214, v219);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                OUTLINED_FUNCTION_25_15();
                v1[41] = v38;
                uint64_t v47 = v38;
                uint64_t v1 = v210;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v115 = v38;

                uint64_t v48 = "[%s] Delete relationship failed for intent, returning failure: %@";
                goto LABEL_47;
              }
              goto LABEL_58;
            }
            OUTLINED_FUNCTION_42_10();
            unint64_t v150 = OUTLINED_FUNCTION_55_4();
            uint64_t v154 = ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(v150, v151, v152, v153, 4);
            uint64_t v43 = OUTLINED_FUNCTION_71_2();
            v155 = static os_log_type_t.debug.getter();
            if (!OUTLINED_FUNCTION_4_0(v155))
            {

              goto LABEL_65;
            }
            OUTLINED_FUNCTION_29_5();
            os_log_type_t v156 = (void *)OUTLINED_FUNCTION_5_34();
            uint64_t v220 = OUTLINED_FUNCTION_35();
            OUTLINED_FUNCTION_36_9(4.8151e-34);
            BOOL v157 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v178, v182, v185, v192, v198, (uint64_t)v200, v206, v214, v219);
            OUTLINED_FUNCTION_37_12(v157, v158, v159, (uint64_t)(v36 + 3), v160, v161, v162, v163, v172, v176, v180, v184, v189, v195, v199);
            OUTLINED_FUNCTION_16_17();
            MEMORY[0xFFFFFFFFFFFFFFF0] = v1 + 7;
            uint64_t v207 = -360;
            uint64_t v164 = v38;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *os_log_type_t v156 = v38;

            OUTLINED_FUNCTION_9_22(&dword_22D49E000, v165, v166, "[%s] Delete relationship complete for intent, returning success: %@");
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2();
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_2();

            uint64_t v38 = v164;
LABEL_29:
            uint64_t v1 = (void *)v207;
            goto LABEL_66;
          }
          unint64_t v133 = *v31;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v134 = v133;
          uint64_t v93 = Logger.logObject.getter();
          unint64_t v135 = static os_log_type_t.error.getter();
          unint64_t v136 = OUTLINED_FUNCTION_34(v135);
          uint64_t v137 = *v31;
          if (!v136)
          {

            goto LABEL_38;
          }
          uint64_t v138 = v1 + 38;
          OUTLINED_FUNCTION_29_5();
          v212 = (uint64_t)v1;
          uint64_t v139 = (void *)OUTLINED_FUNCTION_5_34();
          uint64_t v220 = OUTLINED_FUNCTION_35();
          OUTLINED_FUNCTION_36_9(4.8151e-34);
          os_log_type_t v140 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v178, v182, v185, v192, v196, (uint64_t)v20, v212, v214, v219);
          OUTLINED_FUNCTION_43_7(v140, v141, v142, (uint64_t)(v36 + 3), v143, v144, v145, v146, v171, v175, v179, v183);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_16_17();
          *uint64_t v138 = v137;
          uint64_t v147 = v137;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v139 = v137;

          OUTLINED_FUNCTION_14_20(&dword_22D49E000, v93, (os_log_type_t)v20, "[%s] Unknown modifyOperation received in modifyRelationship intent, returning failure: %@");
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_48_6();
          uint64_t v1 = v213;
          OUTLINED_FUNCTION_2();
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2();
LABEL_37:
          OUTLINED_FUNCTION_2();
LABEL_38:

LABEL_42:
          v110 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
          uint64_t v38 = OUTLINED_FUNCTION_12_22();

          goto LABEL_66;
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v81 = *v24;
    uint64_t v82 = (void *)Logger.logObject.getter();
    uint64_t v83 = static os_log_type_t.error.getter();
    uint64_t v84 = OUTLINED_FUNCTION_4_0(v83);
    uint64_t v85 = *v24;
    if (v84)
    {
      OUTLINED_FUNCTION_29_5();
      uint64_t v86 = (void *)OUTLINED_FUNCTION_5_34();
      uint64_t v220 = OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_36_9(4.8151e-34);
      uint64_t v87 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v178, v182, v185, v192, v196, (uint64_t)v20, (uint64_t)v1, v214, v219);
      char *v194 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_25_15();
      v1[36] = v85;
      uint64_t v88 = v85;
      uint64_t v1 = v208;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v86 = v85;

      OUTLINED_FUNCTION_9_22(&dword_22D49E000, v89, v90, "[%s] Didn't resolve modifyRelationship and/or fullName for intent, returning failure: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_29_10();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_19_13();
      uint64_t v20 = v204;
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    uint64_t v91 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    uint64_t v38 = OUTLINED_FUNCTION_12_22();

    goto LABEL_66;
  }
  uint64_t v51 = v16;
  uint64_t v52 = v1;
  uint64_t v53 = v1 + 28;
  id v54 = (char *)objc_msgSend(*v16, sel_modifyOperation);
  unint64_t v200 = v20;
  if ((unint64_t)(v54 - 1) >= 2)
  {
    id v74 = v52 + 24;
    if (v54 == (char *)3)
    {
      outlined init with copy of DeviceState(v52[52] + direct field offset for BaseIntentHandler.contactService, (uint64_t)(v52 + 17));
      uint64_t v75 = v52[20];
      uint64_t v76 = v52[21];
      __swift_project_boxed_opaque_existential_1(v52 + 17, v75);
      (*(void (**)(void *, uint64_t, uint64_t))(v76 + 40))(v20, v75, v76);
      uint64_t v207 = (uint64_t)v52;
      uint64_t v77 = (void *)v52[51];
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v52 + 17));
      unint64_t v78 = v77;
      uint64_t v79 = Logger.logObject.getter();
      char v123 = static os_log_type_t.debug.getter();
      uint64_t v124 = os_log_type_enabled(v79, v123);
      uint64_t v125 = *v16;
      if (v124)
      {
        v126 = (void *)(v207 + 216);
        OUTLINED_FUNCTION_29_5();
        os_log_type_t v127 = (void *)OUTLINED_FUNCTION_5_34();
        uint64_t v220 = OUTLINED_FUNCTION_35();
        *id v74 = 136315394;
        v217 = (uint64_t)v79;
        uint64_t v79 = (v74 + 1);
        uint64_t v128 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v185, (uint64_t)v190, v196, (uint64_t)v20, v207, v217, v219);
        OUTLINED_FUNCTION_69_1(v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_25_15();
        char *v126 = v125;
        id v129 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v127 = v125;

        OUTLINED_FUNCTION_9_22(&dword_22D49E000, v130, v131, "[%s] Delete nickname complete for intent, returning success: %@");
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_29_10();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_19_13();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      uint64_t v149 = objc_allocWithZone((Class)OUTLINED_FUNCTION_66_2());
      uint64_t v38 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(4, 0);

      goto LABEL_29;
    }
    v92 = *v16;
    uint64_t v93 = Logger.logObject.getter();
    BOOL v94 = static os_log_type_t.error.getter();
    uint64_t v95 = OUTLINED_FUNCTION_34(v94);
    uint64_t v96 = *v16;
    if (!v95)
    {

      uint64_t v1 = v52;
      goto LABEL_42;
    }
    os_log_type_t v97 = OUTLINED_FUNCTION_29_5();
    uint64_t v98 = (void *)OUTLINED_FUNCTION_11_21();
    OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_41_6();
    *(_DWORD *)os_log_type_t v97 = 136315394;
    uint64_t v99 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v185, (uint64_t)v190, v196, (uint64_t)v20, (uint64_t)v52, v214, v219);
    OUTLINED_FUNCTION_67_1(v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v97 + 12) = 2112;
    v52[22] = v96;
    uint64_t v100 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v98 = v96;

    _os_log_impl(&dword_22D49E000, v93, (os_log_type_t)v20, "[%s] Unknown modifyOperation received in modifyNickname intent, returning failure: %@", (uint8_t *)v97, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_48_6();
    uint64_t v1 = v209;
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_24_13();
    OUTLINED_FUNCTION_2();
    goto LABEL_37;
  }
  v186 = (uint64_t)v21;
  v193 = (uint64_t)v23;
  uint64_t v207 = (uint64_t)v52;
  os_log_type_t v55 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(*v16);
  uint64_t v57 = v16;
  if (!v56)
  {
    uint64_t v101 = *v16;
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.error.getter();
    os_log_type_t v104 = OUTLINED_FUNCTION_4_0(v103);
    uint64_t v105 = *v16;
    if (v104)
    {
      uint64_t v106 = (void *)(v207 + 232);
      uint64_t v107 = OUTLINED_FUNCTION_29_5();
      id v108 = (void *)OUTLINED_FUNCTION_11_21();
      uint64_t v220 = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v107 = 136315394;
      *uint64_t v53 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v186, v193, v22, (uint64_t)v200, v207, v214, v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v107 + 12) = 2112;
      NSObject *v106 = v105;
      id v109 = v105;
      OUTLINED_FUNCTION_54_5();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint8_t *v108 = v105;

      _os_log_impl(&dword_22D49E000, v102, v51, "[%s] Didn't resolve modifyNickName for intent, returning failure: %@", (uint8_t *)v107, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_29_10();
      OUTLINED_FUNCTION_2();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    uint64_t v132 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    uint64_t v38 = OUTLINED_FUNCTION_12_22();

    goto LABEL_29;
  }
  os_log_type_t v58 = v55;
  os_log_type_t v59 = v56;
  uint64_t v1 = (void *)v207;
  outlined init with copy of DeviceState(*(void *)(v207 + 416) + direct field offset for BaseIntentHandler.contactService, v207 + 96);
  uint64_t v61 = *(void *)(v207 + 120);
  uint64_t v62 = *(void *)(v207 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v207 + 96), v61);
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v62 + 32))(v58, v59, v20, v61, v62);
  uint64_t v63 = *(void **)(v207 + 408);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v207 + 96);
  uint64_t v64 = v63;
  uint64_t v65 = Logger.logObject.getter();
  uint64_t v116 = static os_log_type_t.debug.getter();
  uint64_t v117 = os_log_type_enabled(v65, v116);
  uint64_t v118 = *v57;
  if (v117)
  {
    OUTLINED_FUNCTION_29_5();
    v215 = (uint64_t)v65;
    uint64_t v119 = (void *)OUTLINED_FUNCTION_5_34();
    uint64_t v220 = OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_36_9(4.8151e-34);
    unint64_t v60 = (uint64_t *)(v207 + 264);
    *unint64_t v60 = OUTLINED_FUNCTION_1_36((uint64_t)"ortedValueOutput", v170, v173, v177, v181, v186, v193, v22, (uint64_t)v20, v207, v215, v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_16_17();
    v1[34] = v118;
    char v120 = v118;
    OUTLINED_FUNCTION_54_5();
    uint64_t v1 = v211;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v119 = v118;

    OUTLINED_FUNCTION_9_22(&dword_22D49E000, v121, v122, "[%s] Add nickname complete for intent, returning success: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_29_10();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_19_13();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  unint64_t v148 = objc_allocWithZone((Class)OUTLINED_FUNCTION_66_2());
  uint64_t v38 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(4, 0);

LABEL_66:
  uint64_t v167 = v1[54];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v167);
  swift_task_dealloc();
  v168 = (uint64_t (*)(char *))v1[1];
  return v168(v38);
}

uint64_t @objc ModifyContactAttributeIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E1269B8, (uint64_t)&async function pointer to partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.handle(intent:));
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  id v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *id v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return ModifyContactAttributeIntentHandler.handle(intent:)();
}

id ModifyContactAttributeIntentHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ModifyContactAttributeIntentHandler()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeIntentHandler;
  if (!type metadata singleton initialization cache for ModifyContactAttributeIntentHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for ModifyContactAttributeIntentHandler()
{
  return type metadata accessor for ModifyContactAttributeIntentHandler();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_31_8();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_56_4();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_52_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  OUTLINED_FUNCTION_72_2();
  if (!v5 & v4) {
    uint64_t v6 = v3 > v2;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_30_9();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_22_15();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_31_8();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_56_4();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_52_6();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_30_9();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  OUTLINED_FUNCTION_22_15();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(void);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_31_8();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_56_4();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_52_6();
  v3(0);
  OUTLINED_FUNCTION_72_2();
  if (!v6 & v5) {
    uint64_t v7 = v4 > v2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_30_9();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_22_15();
  return swift_arrayInitWithCopy();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_31_8();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_56_4();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_30_9();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_modifyNickName);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc SiriMatch.fullName.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_fullName);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id outlined copy of CNContact??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *id v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_21_10(v4);
  void *v5 = v6;
  v5[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v7(v1, v2, v3);
}

uint64_t objectdestroy_20Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = (int *)v1[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_21_10(v6);
  *uint64_t v7 = v8;
  v7[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v9(a1, v3, v4, v5);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22D5588F4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_21_10(v4);
  void *v5 = v6;
  v5[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v7(v2, v3);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.confirm(intent:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_23_10();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  uint64_t v3 = OUTLINED_FUNCTION_1_25();
  return v4(v3);
}

id specialized ModifyContactAttributeIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  id v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v13);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  id v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t OUTLINED_FUNCTION_1_36@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, a1 | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_4_31(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, a2, a3);
}

uint64_t OUTLINED_FUNCTION_5_34()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_9_22(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_11_21()
{
  return swift_slowAlloc();
}

char *OUTLINED_FUNCTION_12_22()
{
  return ModifyContactAttributeIntentResponse.init(code:userActivity:)(5, 0);
}

void OUTLINED_FUNCTION_14_20(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void OUTLINED_FUNCTION_16_17()
{
  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_13()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_25_15()
{
  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_29_10()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_33_8(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(void *), uint64_t (*a7)(void *))
{
  return specialized BaseIntentHandler.resolveSiriMatches(for:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5, a6, a7);
}

uint64_t OUTLINED_FUNCTION_34_13()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_35_11(float a1, uint64_t a2, ...)
{
  va_start(va, a2);
  float *v4 = a1;
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

void OUTLINED_FUNCTION_36_9(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_37_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  *a15 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_40_10()
{
  return type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult();
}

uint64_t OUTLINED_FUNCTION_42_10()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return type metadata accessor for ModifyContactAttributeIntentResponse();
}

void *OUTLINED_FUNCTION_43_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  return a12;
}

id OUTLINED_FUNCTION_46_2()
{
  *(_WORD *)(v1 + 12) = 2112;
  *uint64_t v2 = v0;
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_6()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_50_6()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_51_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_55_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_4()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_57_1()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_58_4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void OUTLINED_FUNCTION_63_1()
{
  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return type metadata accessor for ModifyContactAttributeIntentResponse();
}

void *OUTLINED_FUNCTION_67_1(uint64_t a1)
{
  *uint64_t v1 = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_68_2()
{
  return 2;
}

void *OUTLINED_FUNCTION_69_1(uint64_t a1)
{
  *uint64_t v1 = a1;
  return v1;
}

id OUTLINED_FUNCTION_70_2()
{
  uint64_t v3 = *(void **)(v0 + 16);
  return [v3 (SEL)(v1 + 50)];
}

uint64_t OUTLINED_FUNCTION_71_2()
{
  return Logger.logObject.getter();
}

uint64_t FlowFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 16, a1);
}

uint64_t FlowFactory.commonCATs.getter()
{
  return swift_retain();
}

uint64_t FlowFactory.modifyAttributeCATs.getter()
{
  return swift_retain();
}

uint64_t FlowFactory.referenceResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 72, a1);
}

uint64_t FlowFactory.__allocating_init(referenceResolver:deviceState:commonCATs:modifyAttributeCATs:sirikitEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  OUTLINED_FUNCTION_53_5();
  uint64_t v10 = swift_allocObject();
  FlowFactory.init(referenceResolver:deviceState:commonCATs:modifyAttributeCATs:sirikitEventSender:)(v8, v7, v6, v5, a5);
  return v10;
}

uint64_t FlowFactory.init(referenceResolver:deviceState:commonCATs:modifyAttributeCATs:sirikitEventSender:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  outlined init with take of DeviceState(a1, v5 + 72);
  outlined init with take of DeviceState(a2, v5 + 16);
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 64) = a4;
  outlined init with take of DeviceState(a5, v5 + 112);
  return v5;
}

void FlowFactory.makeGetContactFlow(intent:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactIntent, GetContactIntentResponse>);
  uint64_t v1 = OUTLINED_FUNCTION_10_0(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_3_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<GetContactFlowStrategy>);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_8_27();
  type metadata accessor for GetContactFlowStrategy(0);
  uint64_t v3 = OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_21_12(v3);
  FlowFactory.getContactFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<GetContactIntent, GetContactIntentResponse>);
  OUTLINED_FUNCTION_1_4();
  RCHChildFlowFactory.init(producers:)();
  uint64_t ContactFlow = lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GetContactFlowStrategy);
  OUTLINED_FUNCTION_16_18(ContactFlow);
  type metadata accessor for App();
  uint64_t v5 = OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_24_14(v5);
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_15_20();
  v7(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<GetContactIntent, GetContactIntentResponse>>);
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<GetContactIntent, GetContactIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<GetContactIntent, GetContactIntentResponse>>);
  OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_38_10();
  OUTLINED_FUNCTION_41_5();
}

void FlowFactory.makeGetContactAttributeFlow(intent:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  uint64_t v1 = OUTLINED_FUNCTION_10_0(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_3_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<GetContactAttributeFlowStrategy>);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_8_27();
  type metadata accessor for GetContactAttributeFlowStrategy(0);
  uint64_t v3 = OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_21_12(v3);
  FlowFactory.getContactAttributeFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_1_4();
  RCHChildFlowFactory.init(producers:)();
  uint64_t ContactFlow = lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactAttributeFlowStrategy and conformance ContactsFlowStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeFlowStrategy);
  OUTLINED_FUNCTION_16_18(ContactFlow);
  type metadata accessor for App();
  uint64_t v5 = OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_24_14(v5);
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_15_20();
  v7(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<GetContactAttributeIntent, GetContactAttributeIntentResponse>>);
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<GetContactAttributeIntent, GetContactAttributeIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<GetContactAttributeIntent, GetContactAttributeIntentResponse>>);
  OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_38_10();
  OUTLINED_FUNCTION_41_5();
}

void FlowFactory.makeModifyContactAttributeFlow(intent:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  uint64_t v1 = OUTLINED_FUNCTION_10_0(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_3_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<ModifyContactAttributeFlowStrategy>);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_8_27();
  type metadata accessor for ModifyContactAttributeFlowStrategy(0);
  uint64_t v3 = OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_21_12(v3);
  FlowFactory.modifyContactAttributeFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_1_4();
  RCHChildFlowFactory.init(producers:)();
  uint64_t ContactFlow = lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeFlowStrategy and conformance ContactsFlowStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeFlowStrategy);
  OUTLINED_FUNCTION_16_18(ContactFlow);
  type metadata accessor for App();
  uint64_t v5 = OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_24_14(v5);
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_15_20();
  v7(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>>);
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>>);
  OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_38_10();
  OUTLINED_FUNCTION_41_5();
}

uint64_t FlowFactory.makeUnsupportedLearnPronunciationFlow()()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingResult();
  v1[3] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = FlowFactory.makeUnsupportedLearnPronunciationFlow();
  return ContactsCommonCATs.unsupportedLearnPronunciation()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  NSObject *v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_65();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v3);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v1, v4, "#FlowFactory building flow for unsupportedLearnPronunciation");
    OUTLINED_FUNCTION_4_6();
  }

  FlowFactory.getUnsupportedFlow(for:)();
  uint64_t v5 = OUTLINED_FUNCTION_31_9();
  v6(v5);
  swift_task_dealloc();
  uint64_t v7 = OUTLINED_FUNCTION_12_1();
  return v8(v7);
}

uint64_t FlowFactory.makeUnsupportedActionFlow()()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingResult();
  v1[3] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = FlowFactory.makeUnsupportedActionFlow();
  return ContactsCommonCATs.unsupportedAction()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  NSObject *v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_65();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v3);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v1, v4, "#FlowFactory building flow for unsupportedAction");
    OUTLINED_FUNCTION_4_6();
  }

  FlowFactory.getUnsupportedFlow(for:)();
  uint64_t v5 = OUTLINED_FUNCTION_31_9();
  v6(v5);
  swift_task_dealloc();
  uint64_t v7 = OUTLINED_FUNCTION_12_1();
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t FlowFactory.makeUnsupportedOnDeviceFlow(intent:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v3);
  v1[4] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v1[5] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_37();
  objc_msgSend(*(id *)(v0 + 16), sel_contactAttributeToModify);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v3);
  OUTLINED_FUNCTION_20_16((void *)(v2 + 16));
  *(void *)(v0 + 64) = DeviceState.toSiriKitDeviceState.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  uint8_t *v4 = v0;
  v4[1] = FlowFactory.makeUnsupportedOnDeviceFlow(intent:);
  return ModifyContactAttributeCATs.unsupportedDeviceIdiom(contactAttributeType:device:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v7 = v6;
  *(void *)(v8 + 80) = v0;
  swift_task_dealloc();
  outlined destroy of Result<TemplatingResult, Error>(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v2, v5, "#FlowFactory building flow for unsupportedOnDevice");
    OUTLINED_FUNCTION_4_6();
  }
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = v0[5];

  FlowFactory.getUnsupportedFlow(for:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_12_1();
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t FlowFactory.makeAppPunchoutFlow()()
{
  *(void *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v2, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v2, v5, "#FlowFactory building flow for unsupported multiple contacts request");
    OUTLINED_FUNCTION_4_6();
  }
  uint64_t v6 = v0[3];

  OUTLINED_FUNCTION_20_16((void *)(v6 + 16));
  if ((DeviceState.isVox.getter() & 1) != 0
    || (uint64_t v7 = OUTLINED_FUNCTION_20_16((void *)(v6 + 16)), (DeviceState.supportsCompactView.getter(v7) & 1) == 0)
    || (__swift_project_boxed_opaque_existential_1((void *)(v6 + 16), *(void *)(v6 + 40)),
        (dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0))
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[4] = v8;
    *uint64_t v8 = v0;
    v8[1] = FlowFactory.makeAppPunchoutFlow();
    return FlowFactory.makeUnsupportedActionFlow()();
  }
  else
  {
    swift_retain();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    OUTLINED_FUNCTION_1_4();
    v0[2] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    Flow.eraseToAnyFlow()();
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_12_1();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  NSObject *v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t closure #1 in FlowFactory.makeAppPunchoutFlow()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeAppPunchoutFlow(), 0, 0);
}

uint64_t closure #1 in FlowFactory.makeAppPunchoutFlow()()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0[8] + 112), *(void *)(v0[8] + 136));
  type metadata accessor for SiriKitEvent();
  static SiriKitEvent.uufrReady()();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  v0[5] = &type metadata for InstalledAppsProvider;
  v0[6] = &protocol witness table for InstalledAppsProvider;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  uint64_t v2 = v1;
  outlined destroy of AppUtil((uint64_t)(v0 + 2));
  uint64_t v3 = (uint64_t *)v0[7];
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_22D59FB50;
    *(void *)(v4 + 32) = v2;
    specialized Array._endMutation()();
    uint64_t v5 = type metadata accessor for AceOutput();
    uint64_t v6 = MEMORY[0x263F6FFF0];
    v3[3] = v5;
    v3[4] = v6;
    __swift_allocate_boxed_opaque_existential_1(v3);
    AceOutput.init(commands:flowActivity:)();
  }
  else
  {
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void FlowFactory.getUnsupportedFlow(for:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v3);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  *(void *)(v10 + ((v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v0;
  swift_retain();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  OUTLINED_FUNCTION_1_4();
  v11[1] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  Flow.eraseToAnyFlow()();
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_38_10();
  OUTLINED_FUNCTION_41_5();
}

uint64_t closure #1 in FlowFactory.getUnsupportedFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v3[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.getUnsupportedFlow(for:), 0, 0);
}

uint64_t closure #1 in FlowFactory.getUnsupportedFlow(for:)()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(uint64_t **)(v0 + 144);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 160) + 16), *(void *)(*(void *)(v0 + 160) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  static Device.current.getter();
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(void *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(void *)(v0 + 56) = v3;
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v4);
  uint64_t v5 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v6 = MEMORY[0x263F6FFF0];
  v2[3] = v5;
  v2[4] = v6;
  __swift_allocate_boxed_opaque_existential_1(v2);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of Result<TemplatingResult, Error>(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Result<TemplatingResult, Error>(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t FlowFactory.getContactFlowProducers()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CATOption();
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_25();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v8 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v9 = *(int *)(v4 + 20);
  uint64_t v22 = v7;
  uint64_t v10 = &v7[v9];
  *(void *)uint64_t v10 = "MakeGetContactFlowProducers";
  *((void *)v10 + 1) = 27;
  v10[16] = 2;
  type metadata accessor for GetContactIntent();
  type metadata accessor for GetContactIntentResponse();
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for App();
  OUTLINED_FUNCTION_5_35();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactIntent, GetContactIntentResponse>);
  OUTLINED_FUNCTION_34_14();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  type metadata accessor for GetContactCATs();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  outlined init with copy of DeviceState(v1 + 72, (uint64_t)v23);
  swift_retain();
  static Device.current.getter();
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  type metadata accessor for ContactsLabelCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  specialized GetContactNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_3_30(v12);
  type metadata accessor for GetContactNeedsValueStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactNeedsValueStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_34_14();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  swift_retain();
  static Device.current.getter();
  uint64_t v13 = static ContactService.current;
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v14 = OUTLINED_FUNCTION_6_30();
  uint64_t v15 = specialized GetContactDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v11, (uint64_t)v23, v13, v14, 0);
  uint64_t v16 = OUTLINED_FUNCTION_3_30(v15);
  type metadata accessor for GetContactDisambiguationStrategy(v16);
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GetContactDisambiguationStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_34_14();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v11;
  *(void *)(v17 + 24) = v1;
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_34_14();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  swift_retain();
  static Device.current.getter();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_3_30(v18);
  type metadata accessor for GetContactHandleIntentStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for GetContactHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_34_14();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  uint64_t v19 = (uint64_t)v22;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  return outlined destroy of Signpost.OpenSignpost(v19);
}

uint64_t closure #1 in FlowFactory.getContactFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactIntent>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = (void *)ParameterResolutionRecord.result.getter();
  BOOL v16 = INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter();

  if (v16)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      MEMORY[0x230F85DE0](v20, -1, -1);
    }
    uint64_t v60 = a1;

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1) {
      swift_once();
    }
    uint64_t v21 = static ContactService.current;
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    uint64_t v23 = v22;
    __swift_project_boxed_opaque_existential_1((void *)(a4 + 16), *(void *)(a4 + 40));
    if (dispatch thunk of DeviceState.isWatch.getter())
    {
      v63[0] = v23;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    }
    else
    {
      v63[0] = v23;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    }
    type metadata accessor for ContactsCommonCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
    static Device.current.getter();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse>);
    uint64_t v38 = swift_allocObject();
    v63[0] = specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v36, (uint64_t)v63, v21, v37, 0, v38);
    swift_allocObject();
    swift_weakInit();
    type metadata accessor for GetContactIntentResponse();
    lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse> and conformance ContactsUnsetRelationshipFlowStrategy<A, B>, &demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse>);
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v40 = v39(v60, a2);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v24 = (void *)ParameterResolutionRecord.result.getter();
    BOOL ContactNeeds = INIntentResolutionResult.isGetContactNeedsValue.getter();

    uint64_t v59 = a2;
    if (ContactNeeds)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.siriContacts);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, a2, v7);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        id v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        v63[0] = v58;
        *(_DWORD *)id v29 = 136315138;
        uint64_t v57 = v29 + 4;
        uint64_t v30 = (void *)ParameterResolutionRecord.result.getter();
        id v31 = objc_msgSend(v30, sel_unsupportedReason);
        uint64_t v60 = a1;
        Swift::Int v32 = (Swift::Int)v31;

        LOBYTE(v62) = SiriKitContactUnsupportedReason.init(rawValue:)(v32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
        uint64_t v33 = String.init<A>(describing:)();
        uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v63);
        a1 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
        _os_log_impl(&dword_22D49E000, v27, v28, "#FlowFactory GetContact unsupported reason is %s. Creating prompt producer to handle unsupported with needs value.", v29, 0xCu);
        uint64_t v35 = v58;
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v35, -1, -1);
        MEMORY[0x230F85DE0](v29, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      }

      swift_retain();
      static Device.current.getter();
      if (one-time initialization token for current != -1) {
        swift_once();
      }
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v63[0] = v51;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      uint64_t v52 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        v63[0] = v58;
        *(_DWORD *)uint64_t v44 = 136315138;
        uint64_t v57 = v44 + 4;
        id v45 = (void *)ParameterResolutionRecord.result.getter();
        id v46 = objc_msgSend(v45, sel_unsupportedReason);
        uint64_t v60 = a1;
        Swift::Int v47 = (Swift::Int)v46;

        LOBYTE(v62) = SiriKitContactUnsupportedReason.init(rawValue:)(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
        uint64_t v48 = String.init<A>(describing:)();
        uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v63);
        a1 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        _os_log_impl(&dword_22D49E000, v42, v43, "#FlowFactory GetContact unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v44, 0xCu);
        uint64_t v50 = v58;
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v50, -1, -1);
        MEMORY[0x230F85DE0](v44, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }

      swift_retain();
      static Device.current.getter();
      if (one-time initialization token for current != -1) {
        swift_once();
      }
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v63[0] = v53;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      uint64_t v52 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    }
    id v54 = (uint64_t (*)(uint64_t, uint64_t))v52;
    swift_release();
    uint64_t v40 = v54(a1, v59);
  }
  swift_release();
  return v40;
}

uint64_t closure #1 in closure #1 in FlowFactory.getContactFlowProducers()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    __swift_project_boxed_opaque_existential_1((void *)(Strong + 16), *(void *)(Strong + 40));
    char v1 = dispatch thunk of DeviceState.isWatch.getter();
    swift_release();
    char v2 = v1 ^ 1;
  }
  else
  {
    char v2 = 1;
  }
  return v2 & 1;
}

uint64_t FlowFactory.getContactAttributeFlowProducers()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = OUTLINED_FUNCTION_10_25();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_5_0();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v8 = v1 + *(int *)(v5 + 20);
  *(void *)uint64_t v8 = "MakeGetContactAttributeFlowProducers";
  *(void *)(v8 + 8) = 36;
  *(unsigned char *)(v8 + 16) = 2;
  type metadata accessor for GetContactAttributeIntent();
  type metadata accessor for GetContactAttributeIntentResponse();
  OUTLINED_FUNCTION_51_7();
  type metadata accessor for App();
  OUTLINED_FUNCTION_5_35();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_33_9();
  type metadata accessor for GetContactAttributeCATs();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  outlined init with copy of DeviceState(v2 + 72, (uint64_t)v16);
  swift_retain();
  static Device.current.getter();
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  uint64_t v10 = static ContactService.current;
  type metadata accessor for ContactsLabelCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v12 = specialized GetContactAttributeNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)((uint64_t)v16, v9, (uint64_t)v15, v10, v11, 0);
  OUTLINED_FUNCTION_3_30(v12);
  type metadata accessor for GetContactAttributeNeedsValueStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactAttributeNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeNeedsValueStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  swift_retain();
  static Device.current.getter();
  swift_retain();
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)();
  specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_3_30(v13);
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for GetContactAttributeHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_41_7();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  return outlined destroy of Signpost.OpenSignpost(v1);
}

uint64_t closure #1 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v11 = ParameterIdentifier.name.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  v15.SiriContactsIntents::GetContactAttributeSlots value = GetContactAttributeSlots.init(rawValue:)(v14).value;
  if (v15.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault) {
    goto LABEL_2;
  }
  SiriContactsIntents::GetContactAttributeSlots value = v15.value;
  if (GetContactAttributeSlots.rawValue.getter(v15.value) == 0xD000000000000014 && v18 == 0x800000022D5A6840) {
    goto LABEL_7;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_12;
  }
  if (GetContactAttributeSlots.rawValue.getter(value) == 0xD000000000000019 && v20 == 0x800000022D5A6860)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_2:
      static Device.current.getter();
      if (one-time initialization token for current != -1) {
        swift_once();
      }
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      swift_retain();
      specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v28[0] = v16;
      type metadata accessor for GCAContactsDisambiguationStrategy(0);
      lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GCAContactsDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GCAContactsDisambiguationStrategy);
      goto LABEL_15;
    }
  }
LABEL_12:
  swift_retain();
  static Device.current.getter();
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  uint64_t v22 = static ContactService.current;
  type metadata accessor for ContactsLabelCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)();
  v28[0] = specialized ContactAttributeDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a3, (uint64_t)v28, v22, v23, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs> and conformance ContactAttributeDisambiguationStrategy<A, B, C>, &demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
LABEL_15:
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  uint64_t v25 = v24(a1, a2);
  swift_release();
  return v25;
}

uint64_t closure #2 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = (void *)ParameterResolutionRecord.result.getter();
  BOOL v12 = INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter();

  if (v12)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    Swift::String v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      MEMORY[0x230F85DE0](v16, -1, -1);
    }

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1) {
      swift_once();
    }
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v43[0] = v17;
    type metadata accessor for GetContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeUnsupportedValueStrategy);
    static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    swift_release();
    type metadata accessor for ContactsCommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
    static Device.current.getter();
    uint64_t v19 = static ContactService.current;
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
    uint64_t v21 = swift_allocObject();
    v43[0] = specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v18, (uint64_t)v43, v19, v20, 0, v21);
    type metadata accessor for GetContactAttributeIntentResponse();
    lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse> and conformance ContactsUnsetRelationshipFlowStrategy<A, B>, &demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)();
    swift_release();
    swift_release();
    uint64_t v23 = a1;
  }
  else
  {
    uint64_t v40 = a3;
    uint64_t v41 = a1;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v43[0] = v38;
      uint64_t v39 = a2;
      *(_DWORD *)uint64_t v27 = 136315138;
      v37[1] = v27 + 4;
      os_log_type_t v28 = (void *)ParameterResolutionRecord.result.getter();
      id v29 = objc_msgSend(v28, sel_unsupportedReason);

      LOBYTE(v42) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v29);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v43);
      a2 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl(&dword_22D49E000, v25, v26, "#FlowFactory GetContactAttribute unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v27, 0xCu);
      uint64_t v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v32, -1, -1);
      MEMORY[0x230F85DE0](v27, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    uint64_t v33 = v41;
    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1) {
      swift_once();
    }
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v43[0] = v34;
    type metadata accessor for GetContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type GetContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeUnsupportedValueStrategy);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    swift_release();
    uint64_t v23 = v33;
  }
  uint64_t v35 = v22(v23, a2);
  swift_release();
  return v35;
}

uint64_t FlowFactory.modifyContactAttributeFlowProducers()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = OUTLINED_FUNCTION_10_25();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_5_0();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v8 = v1 + *(int *)(v5 + 20);
  *(void *)uint64_t v8 = "MakeModifyContactAttributeFlowProducers";
  *(void *)(v8 + 8) = 39;
  *(unsigned char *)(v8 + 16) = 2;
  type metadata accessor for ModifyContactAttributeIntent();
  type metadata accessor for ModifyContactAttributeIntentResponse();
  OUTLINED_FUNCTION_51_7();
  type metadata accessor for App();
  OUTLINED_FUNCTION_5_35();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_33_9();
  type metadata accessor for ModifyContactAttributeCATs();
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)();
  outlined init with copy of DeviceState(v2 + 72, (uint64_t)v18);
  outlined init with copy of DeviceState(v2 + 16, (uint64_t)v17);
  uint64_t v9 = one-time initialization token for current;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  type metadata accessor for ContactsLabelCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  specialized GetContactNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_3_30(v10);
  type metadata accessor for ModifyContactAttributeNeedsValueStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeNeedsValueStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_13_24();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  OUTLINED_FUNCTION_43_8();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  uint64_t v12 = OUTLINED_FUNCTION_3_30(v11);
  type metadata accessor for ModifyContactAttributeDisambiguationStrategy(v12);
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeDisambiguationStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_13_24();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  OUTLINED_FUNCTION_43_8();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  OUTLINED_FUNCTION_42_11();
  OUTLINED_FUNCTION_3_30(v13);
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeConfirmIntentStrategy and conformance ModifyContactAttributeConfirmIntentStrategy, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeConfirmIntentStrategy);
  static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_13_24();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  OUTLINED_FUNCTION_43_8();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  OUTLINED_FUNCTION_42_11();
  OUTLINED_FUNCTION_3_30(v14);
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_22();
  OUTLINED_FUNCTION_13_24();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  OUTLINED_FUNCTION_43_8();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_6_30();
  specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_3_30(v15);
  type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy();
  lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_41_7();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  return outlined destroy of Signpost.OpenSignpost(v1);
}

uint64_t closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = (void *)ParameterResolutionRecord.result.getter();
  BOOL v12 = INIntentResolutionResult.isModifyContactAttributeNeedsValue.getter();

  if (v12)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_22D49E000, v14, v15, "#FlowFactory ModifyContactAttribute unsupported. Creating prompt producer to handle unsupported with needs value.", v16, 2u);
      MEMORY[0x230F85DE0](v16, -1, -1);
    }

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1) {
      swift_once();
    }
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v40[0] = v17;
    type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    swift_release();
    uint64_t v19 = v18(a1, a2);
  }
  else
  {
    uint64_t v37 = a3;
    uint64_t v38 = a1;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v40[0] = v35;
      uint64_t v36 = a2;
      *(_DWORD *)uint64_t v23 = 136315138;
      v34[1] = v23 + 4;
      uint64_t v24 = (void *)ParameterResolutionRecord.result.getter();
      id v25 = objc_msgSend(v24, sel_unsupportedReason);

      LOBYTE(v39) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v25);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v40);
      a2 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl(&dword_22D49E000, v21, v22, "#FlowFactory ModifyContactAttribute unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v23, 0xCu);
      uint64_t v28 = v35;
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v28, -1, -1);
      MEMORY[0x230F85DE0](v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_retain();
    static Device.current.getter();
    uint64_t v29 = v38;
    if (one-time initialization token for current != -1) {
      swift_once();
    }
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v40[0] = v30;
    type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(&lazy protocol witness table cache variable for type ModifyContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy);
    unint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    swift_release();
    uint64_t v19 = v31(v29, a2);
  }
  uint64_t v32 = v19;
  swift_release();
  return v32;
}

BOOL closure #2 in FlowFactory.modifyContactAttributeFlowProducers()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  uint64_t v0 = (char *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v1 = &v0[OBJC_IVAR___ModifyContactAttributeIntentResponse_code];
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;

  return v2 == 1;
}

uint64_t FlowFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  return v0;
}

uint64_t FlowFactory.__deallocating_deinit()
{
  FlowFactory.deinit();
  return MEMORY[0x270FA0228](v0, 152, 7);
}

uint64_t protocol witness for FlowProviding.deviceState.getter in conformance FlowFactory@<X0>(uint64_t a1@<X8>)
{
  return FlowFactory.deviceState.getter(a1);
}

uint64_t protocol witness for FlowProviding.commonCATs.getter in conformance FlowFactory()
{
  return FlowFactory.commonCATs.getter();
}

uint64_t protocol witness for FlowProviding.referenceResolver.getter in conformance FlowFactory@<X0>(uint64_t a1@<X8>)
{
  return FlowFactory.referenceResolver.getter(a1);
}

void protocol witness for FlowProviding.makeGetContactFlow(intent:) in conformance FlowFactory()
{
}

void protocol witness for FlowProviding.makeGetContactAttributeFlow(intent:) in conformance FlowFactory()
{
}

void protocol witness for FlowProviding.makeModifyContactAttributeFlow(intent:) in conformance FlowFactory()
{
}

uint64_t protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory;
  return FlowFactory.makeUnsupportedLearnPronunciationFlow()();
}

uint64_t protocol witness for FlowProviding.makeUnsupportedActionFlow() in conformance FlowFactory()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory;
  return FlowFactory.makeUnsupportedActionFlow()();
}

uint64_t protocol witness for FlowProviding.makeUnsupportedOnDeviceFlow(intent:) in conformance FlowFactory()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory;
  return FlowFactory.makeUnsupportedOnDeviceFlow(intent:)();
}

uint64_t protocol witness for FlowProviding.makeAppPunchoutFlow() in conformance FlowFactory()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return FlowFactory.makeAppPunchoutFlow()();
}

uint64_t protocol witness for FlowProviding.makeGuardFlow(with:) in conformance FlowFactory()
{
  return FlowFactory.makeGuardFlow(with:)();
}

uint64_t partial apply for closure #1 in FlowFactory.makeAppPunchoutFlow()()
{
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_21_10(v3);
  void *v4 = v5;
  v4[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return closure #1 in FlowFactory.makeAppPunchoutFlow()(v2, v0);
}

uint64_t dispatch thunk of FlowProviding.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FlowProviding.commonCATs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FlowProviding.referenceResolver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FlowProviding.makeGetContactFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FlowProviding.makeGetContactAttributeFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FlowProviding.makeModifyContactAttributeFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow()()
{
  OUTLINED_FUNCTION_65();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  uint64_t v3 = OUTLINED_FUNCTION_12_19();
  return v4(v3);
}

uint64_t dispatch thunk of FlowProviding.makeUnsupportedActionFlow()()
{
  OUTLINED_FUNCTION_65();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  uint64_t v3 = OUTLINED_FUNCTION_12_19();
  return v4(v3);
}

uint64_t dispatch thunk of FlowProviding.makeUnsupportedOnDeviceFlow(intent:)()
{
  OUTLINED_FUNCTION_65();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 72) + **(int **)(v0 + 72));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_21_10(v6);
  *uint64_t v7 = v8;
  v7[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  return v10(v5, v3, v1);
}

uint64_t dispatch thunk of FlowProviding.makeAppPunchoutFlow()()
{
  OUTLINED_FUNCTION_65();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_10(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  uint64_t v3 = OUTLINED_FUNCTION_12_19();
  return v4(v3);
}

uint64_t dispatch thunk of FlowProviding.makeGuardFlow(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t type metadata accessor for FlowFactory()
{
  return self;
}

uint64_t method lookup function for FlowFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FlowFactory);
}

uint64_t dispatch thunk of FlowFactory.__allocating_init(referenceResolver:deviceState:commonCATs:modifyAttributeCATs:sirikitEventSender:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of FlowFactory.makeGetContactFlow(intent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of FlowFactory.makeGetContactAttributeFlow(intent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of FlowFactory.makeModifyContactAttributeFlow(intent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of FlowFactory.makeUnsupportedLearnPronunciationFlow()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_10_3();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 152) + **(int **)(v0 + 152));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_21_10(v1);
  *uint64_t v2 = v3;
  v2[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  return v5();
}

uint64_t dispatch thunk of FlowFactory.makeUnsupportedActionFlow()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_10_3();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 160) + **(int **)(v0 + 160));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_21_10(v1);
  *uint64_t v2 = v3;
  v2[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  return v5();
}

uint64_t dispatch thunk of FlowFactory.makeUnsupportedOnDeviceFlow(intent:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_10_3();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 168) + **(int **)(v2 + 168));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_21_10(v3);
  void *v4 = v5;
  v4[1] = dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow();
  return v7(v1);
}

uint64_t dispatch thunk of FlowFactory.makeAppPunchoutFlow()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_10_3();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 176) + **(int **)(v0 + 176));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_21_10(v1);
  *uint64_t v2 = v3;
  v2[1] = dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:);
  return v5();
}

uint64_t dispatch thunk of FlowFactory.makeGuardFlow(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_22D55E600()
{
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_15_0();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();
  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t partial apply for closure #1 in FlowFactory.getUnsupportedFlow(for:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_1(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v0 + v8;
  uint64_t v10 = *(void *)(v0 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = swift_task_alloc();
  BOOL v12 = (void *)OUTLINED_FUNCTION_21_10(v11);
  *BOOL v12 = v13;
  v12[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return closure #1 in FlowFactory.getUnsupportedFlow(for:)(v2, v9, v10);
}

uint64_t specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v21 = &type metadata for SiriContactsFeatureFlagProvider;
  os_log_type_t v22 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ModifyContactAttributeCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  *(void *)(a6 + 176) = CATWrapper.__allocating_init(options:globals:)();
  swift_release();
  outlined init with copy of DeviceState(a2, (uint64_t)v19);
  outlined init with copy of DeviceState((uint64_t)v20, (uint64_t)v17);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
  MEMORY[0x270FA5388](v13);
  (*(void (**)(void))(v14 + 16))();
  swift_retain();
  uint64_t v15 = specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v19, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v15;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[40];
  unsigned char v18[24];
  uint64_t v19;
  unsigned char v20[40];
  unsigned char v21[24];
  ValueMetadata *v22;
  _UNKNOWN **v23;

  uint64_t v12 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v12 - 8);
  os_log_type_t v22 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v23 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ModifyContactAttributeCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  *(void *)(a6 + 176) = CATWrapper.__allocating_init(options:globals:)();
  swift_release();
  outlined init with copy of DeviceState(a2, (uint64_t)v20);
  outlined init with copy of DeviceState((uint64_t)v21, (uint64_t)v18);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
  MEMORY[0x270FA5388](v13);
  (*(void (**)(void))(v14 + 16))();
  *(unsigned char *)(a6 + 168) = 1;
  outlined init with copy of DeviceState((uint64_t)v20, (uint64_t)v17);
  swift_retain();
  uint64_t v15 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v17, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v15;
}

uint64_t specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(unsigned char *)(a6 + 168) = 1;
  outlined init with copy of DeviceState(a2, (uint64_t)v18);
  outlined init with copy of DeviceState((uint64_t)v19, (uint64_t)v16);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  uint64_t v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v14;
}

uint64_t specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[4] = &protocol witness table for ContactService;
  v16[3] = type metadata accessor for ContactService();
  uint64_t v15 = &protocol witness table for SiriContactsFeatureFlagProvider;
  v16[0] = a3;
  uint64_t v14 = &type metadata for SiriContactsFeatureFlagProvider;
  *(unsigned char *)(a6 + 113) = 0;
  *(void *)(a6 + 96) = a1;
  outlined init with copy of DeviceState(a2, a6 + 16);
  outlined init with copy of DeviceState((uint64_t)v16, a6 + 56);
  *(void *)(a6 + 104) = a4;
  __swift_project_boxed_opaque_existential_1((void *)(a6 + 16), *(void *)(a6 + 40));
  swift_retain();
  swift_retain();
  LOBYTE(a3) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  *(unsigned char *)(a6 + 112) = a3 & 1;
  *(void *)(a6 + 120) = a5;
  outlined init with take of DeviceState(&v13, a6 + 128);
  return a6;
}

uint64_t specialized ContactAttributeDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ReferenceResolutionClient();
  ReferenceResolutionClient.__allocating_init()();
  outlined init with copy of DeviceState(a2, (uint64_t)v18);
  outlined init with copy of DeviceState((uint64_t)v19, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x270FA5388](v11);
  (*(void (**)(void))(v12 + 16))();
  swift_retain();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized ContactAttributeDisambiguationStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v13, a1, (uint64_t)v18, a3, a4, a5, v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v14;
}

uint64_t specialized ContactAttributeDisambiguationStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for ReferenceResolutionClient();
  v25[4] = MEMORY[0x263F740F8];
  v25[3] = v14;
  v25[0] = a1;
  uint64_t v23 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v24 = &protocol witness table for SiriContactsFeatureFlagProvider;
  outlined init with copy of DeviceState((uint64_t)v25, a7 + 168);
  outlined init with copy of DeviceState(a3, (uint64_t)v21);
  outlined init with copy of DeviceState((uint64_t)v22, (uint64_t)v19);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
  MEMORY[0x270FA5388](v15);
  (*(void (**)(void))(v16 + 16))();
  swift_retain();
  uint64_t v17 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a2, (uint64_t)v21, a4, a5, a6, a7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  return v17;
}

void specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v19[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v19[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v12(0);
  uint64_t v13 = swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = OUTLINED_FUNCTION_4_32(v15, v18[0]);
  v17(v16);
  outlined init with copy of DeviceState(v9, (uint64_t)v18);
  v1(v11, v18, v7, v5, v3, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  OUTLINED_FUNCTION_48_7();
  OUTLINED_FUNCTION_41_5();
}

uint64_t specialized GetContactDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v18 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for GetContactDisambiguationStrategy(0);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  MEMORY[0x270FA5388](v11);
  (*(void (**)(void))(v12 + 16))();
  outlined init with copy of DeviceState(a2, (uint64_t)v15);
  uint64_t v13 = specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v15, a3, a4, a5, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  return v13;
}

uint64_t specialized GetContactHandleIntentStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(void *)(a6 + 192) = &type metadata for InstalledAppsProvider;
  *(void *)(a6 + 200) = &protocol witness table for InstalledAppsProvider;
  swift_retain();
  static SiriKitEventSender.current.getter();
  outlined init with take of DeviceState(v18, a6 + 208);
  swift_release();
  outlined init with copy of DeviceState(a2, (uint64_t)v18);
  outlined init with copy of DeviceState((uint64_t)v19, (uint64_t)v16);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  uint64_t v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v14;
}

uint64_t specialized GetContactAttributeNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for GetContactAttributeNeedsValueStrategy();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  MEMORY[0x270FA5388](v13);
  (*(void (**)(void))(v14 + 16))();
  outlined init with copy of DeviceState(a1, (uint64_t)v18);
  outlined init with copy of DeviceState(a3, (uint64_t)v17);
  uint64_t v15 = specialized ContactsNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)((uint64_t)v18, a2, (uint64_t)v17, a4, a5, a6, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  return v15;
}

uint64_t specialized ContactsNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v22 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v23 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(unsigned char *)(a7 + 168) = 1;
  outlined init with copy of DeviceState(a1, a7 + 176);
  outlined init with copy of DeviceState(a3, (uint64_t)v20);
  outlined init with copy of DeviceState((uint64_t)v21, (uint64_t)v18);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
  MEMORY[0x270FA5388](v14);
  (*(void (**)(void))(v15 + 16))();
  swift_retain();
  uint64_t v16 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a2, (uint64_t)v20, a4, a5, a6, a7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v16;
}

void specialized GetContactNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  OUTLINED_FUNCTION_53_5();
  v13[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v13[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v0(0);
  uint64_t v1 = swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = OUTLINED_FUNCTION_4_32(v3, v12);
  v5(v4);
  OUTLINED_FUNCTION_49_6();
  specialized GetContactNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v6, v7, v8, v9, v10, v11, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  OUTLINED_FUNCTION_48_7();
  OUTLINED_FUNCTION_41_5();
}

void specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  v19[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v19[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v10(0);
  uint64_t v11 = swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = OUTLINED_FUNCTION_18_16(v13, v16);
  v15(v14);
  outlined init with copy of DeviceState(v7, (uint64_t)v18);
  *(unsigned char *)(v11 + 168) = 1;
  outlined init with copy of DeviceState((uint64_t)v18, (uint64_t)v17);
  specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v9, (uint64_t)v17, v5, v3, v1, v11);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  OUTLINED_FUNCTION_38_10();
  OUTLINED_FUNCTION_41_5();
}

uint64_t partial apply for closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  return closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(a1, a2, v2);
}

void specialized ModifyContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  v6[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v6[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v0(0);
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = OUTLINED_FUNCTION_18_16(v2, v5);
  v4(v3);
  specialized ContactsUnsupportedValueStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
  OUTLINED_FUNCTION_48_7();
  OUTLINED_FUNCTION_41_5();
}

void specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_44_7();
  v12[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v12[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v8(0);
  uint64_t v9 = swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v10);
  (*(void (**)(void))(v11 + 16))();
  v5(v3, v2, v1, v0, v7, v9);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  OUTLINED_FUNCTION_48_7();
  OUTLINED_FUNCTION_41_5();
}

uint64_t specialized ModifyContactAttributeContinueInAppFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = &type metadata for SiriContactsFeatureFlagProvider;
  uint64_t v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(void *)(a6 + 192) = &type metadata for InstalledAppsProvider;
  *(void *)(a6 + 200) = &protocol witness table for InstalledAppsProvider;
  outlined init with copy of DeviceState(a2, (uint64_t)v18);
  outlined init with copy of DeviceState((uint64_t)v19, (uint64_t)v16);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  uint64_t v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v14;
}

void specialized ContactsUnsupportedValueStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v19[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v19[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  outlined init with copy of DeviceState(v8, (uint64_t)v18);
  outlined init with copy of DeviceState((uint64_t)v19, (uint64_t)v17);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v17[3]);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = OUTLINED_FUNCTION_4_32(v13, v16);
  v15(v14);
  swift_retain();
  specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v11, (uint64_t)v18, v7, v5, v3, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  OUTLINED_FUNCTION_41_5();
}

uint64_t specialized GetContactNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of DeviceState(v10, (uint64_t)v21);
  outlined init with copy of DeviceState(v7, (uint64_t)v20);
  *(unsigned char *)(a7 + 168) = 1;
  outlined init with copy of DeviceState((uint64_t)v21, a7 + 176);
  outlined init with copy of DeviceState((uint64_t)v20, (uint64_t)v19);
  OUTLINED_FUNCTION_49_6();
  uint64_t v17 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v11, v12, v13, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  return v17;
}

uint64_t partial apply for closure #1 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  return closure #1 in FlowFactory.getContactAttributeFlowProducers()(a1, a2, v2);
}

uint64_t partial apply for closure #2 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  return closure #2 in FlowFactory.getContactAttributeFlowProducers()(a1, a2, v2);
}

uint64_t sub_22D55FF20()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in FlowFactory.getContactFlowProducers()(uint64_t a1, uint64_t a2)
{
  return closure #1 in FlowFactory.getContactFlowProducers()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t lazy protocol witness table accessor for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D55FFB0()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in FlowFactory.getContactFlowProducers()()
{
  return closure #1 in closure #1 in FlowFactory.getContactFlowProducers()();
}

uint64_t OUTLINED_FUNCTION_3_30(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return 0;
}

char *OUTLINED_FUNCTION_4_32@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_5_35()
{
  return App.__allocating_init(appIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_6_30()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_8_27()
{
  return outlined init with copy of DeviceState(v0 + 72, v1 - 104);
}

uint64_t OUTLINED_FUNCTION_10_25()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_11_22()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_13_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_18(uint64_t a1)
{
  return MEMORY[0x270F67608](v3 - 104, v1, v2, a1);
}

char *OUTLINED_FUNCTION_18_16@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_20_16(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_21_12(uint64_t a1)
{
  uint64_t result = outlined init with take of DeviceState((long long *)(v1 - 104), a1 + 16);
  *(void *)(v1 - 104) = a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_14(uint64_t a1)
{
  return MEMORY[0x270F67600](a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_31_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_12()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t OUTLINED_FUNCTION_33_9()
{
  return RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
}

uint64_t OUTLINED_FUNCTION_38_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_11()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  return v0;
}

void OUTLINED_FUNCTION_42_11()
{
  specialized ModifyContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
}

uint64_t OUTLINED_FUNCTION_43_8()
{
  return outlined init with copy of DeviceState(v0, v1 - 120);
}

uint64_t OUTLINED_FUNCTION_48_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_7()
{
  return RCHChildFlowProducersAsync.init()();
}

uint64_t GetContactDirectInvocationsModel.init(contact:)(void *a1)
{
  uint64_t v100 = &type metadata for InstalledAppsProvider;
  uint64_t v101 = &protocol witness table for InstalledAppsProvider;
  id v1 = objc_msgSend(a1, sel_emailAddresses);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_59;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE80];
      goto LABEL_14;
    }
    if (v3 < 1) {
      break;
    }
    uint64_t v4 = 0;
    unint64_t v93 = v2 & 0xC000000000000001;
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    unint64_t v6 = v2;
    do
    {
      if (v93) {
        id v7 = (id)MEMORY[0x230F854E0](v4, v2);
      }
      else {
        id v7 = *(id *)(v2 + 8 * v4 + 32);
      }
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_value, v87);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      AppUtil.buildPunchoutFor(emailAddress:)();
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      if (v11)
      {
        id v12 = objc_msgSend(v8, sel_identifier);
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        id v16 = v11;
        swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, v13, v15);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v4;
      id v17 = objc_msgSend(v8, sel_identifier);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      id v21 = objc_msgSend(v8, sel_value);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static AppUtil.buildMessagesPunchoutFor(handleString:)();
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v18, v20);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v2 = v6;
    }
    while (v3 != v4);
LABEL_14:
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(a1, sel_phoneNumbers);
    unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v27 = &off_2649B0000;
    if (v26)
    {
      if (v26 < 1) {
        goto LABEL_63;
      }
      uint64_t v28 = 0;
      unint64_t v91 = v25;
      unint64_t v94 = v25 & 0xC000000000000001;
      uint64_t v89 = v26;
      while (1)
      {
        id v29 = v94 ? (id)MEMORY[0x230F854E0](v28, v25) : *(id *)(v25 + 8 * v28 + 32);
        unint64_t v2 = (unint64_t)v29;
        id v30 = objc_msgSend(v29, sel_value, v87);
        id v31 = objc_msgSend(v30, sel_stringValue);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        static AppUtil.buildMessagesPunchoutFor(handleString:)();
        uint64_t v33 = v32;
        swift_bridgeObjectRelease();
        id v34 = objc_msgSend((id)v2, sel_identifier);
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        id v38 = v33;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        os_log_type_t v97 = v5;
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v37);
        uint64_t v42 = v5[2];
        BOOL v43 = (v41 & 1) == 0;
        Swift::Int v44 = v42 + v43;
        if (__OFADD__(v42, v43)) {
          break;
        }
        unint64_t v45 = v40;
        char v46 = v41;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v44))
        {
          unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v37);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_64;
          }
          unint64_t v45 = v47;
        }
        uint64_t v5 = v97;
        if (v46)
        {
          uint64_t v49 = v97[7];

          *(void *)(v49 + 8 * v45) = v38;
        }
        else
        {
          OUTLINED_FUNCTION_0_31((uint64_t)&v97[v45 >> 6]);
          uint64_t v50 = (uint64_t *)(v97[6] + 16 * v45);
          uint64_t *v50 = v35;
          v50[1] = v37;
          *(void *)(v97[7] + 8 * v45) = v38;
          uint64_t v51 = v97[2];
          BOOL v52 = __OFADD__(v51, 1);
          uint64_t v53 = v51 + 1;
          if (v52) {
            goto LABEL_57;
          }
          v97[2] = v53;
          swift_bridgeObjectRetain();
        }
        ++v28;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v25 = v91;
        unint64_t v27 = &off_2649B0000;
        if (v89 == v28) {
          goto LABEL_31;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_31:
      swift_bridgeObjectRelease();
      id v54 = objc_msgSend(a1, sel_postalAddresses);
      unint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v55 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v87 = v5;
      if (!v56)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        id v82 = [a1 (SEL)v27[55]];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        AppUtil.buildPunchoutFor(contactIdentifier:)();
        uint64_t v84 = v83;
        swift_bridgeObjectRelease();
        if (v84)
        {
          type metadata accessor for SAUIAppPunchOut();
          id v85 = v84;
          SAClientBoundCommand.data.getter();
        }
        GetContactDirectInvocationsModel.init(contactCardPunchout:sendEmailPunchouts:sendMessagePunchouts:navigationPunchouts:)();

        return outlined destroy of AppUtil((uint64_t)v99);
      }
      unint64_t v92 = v55 & 0xC000000000000001;
      uint64_t v57 = (void *)MEMORY[0x263F8EE80];
      uint64_t v58 = 4;
      uint64_t v88 = v56;
      unint64_t v90 = v55;
      while (1)
      {
        id v59 = v92 ? (id)MEMORY[0x230F854E0](v58 - 4, v55) : *(id *)(v55 + 8 * v58);
        uint64_t v60 = v59;
        unint64_t v2 = v58 - 3;
        if (__OFADD__(v58 - 4, 1)) {
          break;
        }
        AppUtil.buildPunchoutFor(labeledAddress:contact:)();
        if (v61)
        {
          uint64_t v62 = v61;
          uint64_t v95 = v60;
          id v63 = [v60 (SEL)v27[55]];
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v66 = v65;

          id v67 = v62;
          char v68 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v98 = v57;
          unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v66);
          uint64_t v71 = v57[2];
          BOOL v72 = (v70 & 1) == 0;
          Swift::Int v73 = v71 + v72;
          if (__OFADD__(v71, v72)) {
            goto LABEL_56;
          }
          unint64_t v74 = v69;
          char v75 = v70;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v68, v73))
          {
            unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v66);
            if ((v75 & 1) != (v77 & 1)) {
              goto LABEL_64;
            }
            unint64_t v74 = v76;
          }
          uint64_t v57 = v98;
          if (v75)
          {
            uint64_t v78 = v98[7];

            *(void *)(v78 + 8 * v74) = v67;
          }
          else
          {
            OUTLINED_FUNCTION_0_31((uint64_t)&v98[v74 >> 6]);
            uint64_t v79 = (uint64_t *)(v98[6] + 16 * v74);
            *uint64_t v79 = v64;
            v79[1] = v66;
            *(void *)(v98[7] + 8 * v74) = v67;
            uint64_t v80 = v98[2];
            BOOL v52 = __OFADD__(v80, 1);
            uint64_t v81 = v80 + 1;
            if (v52) {
              goto LABEL_58;
            }
            v98[2] = v81;
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v27 = &off_2649B0000;
          uint64_t v56 = v88;
          unint64_t v55 = v90;
        }
        else
        {
        }
        ++v58;
        if (v2 == v56) {
          goto LABEL_51;
        }
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for SAUIAppPunchOut()
{
  unint64_t result = lazy cache variable for type metadata for SAUIAppPunchOut;
  if (!lazy cache variable for type metadata for SAUIAppPunchOut)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
  }
  return result;
}

void OUTLINED_FUNCTION_0_31(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

void destroy for CompactViews(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  unint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for CompactViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  id v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  uint64_t v8 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v8;
  id v9 = v8;
  return a1;
}

void *assignWithCopy for CompactViews(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v4 = (void *)a1[6];
  long long v5 = (void *)a2[6];
  a1[6] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for CompactViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for CompactViews(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompactViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompactViews()
{
  return &type metadata for CompactViews;
}

void CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v3 = v0 + *(int *)(v1 + 20);
  *(void *)uint64_t v3 = "BuildGetAttributeSnippetIOS";
  *(void *)(v3 + 8) = 27;
  *(unsigned char *)(v3 + 16) = 2;
  CompactViews.buildCardSections(handles:contact:contactAttribute:localeString:)();
  OUTLINED_FUNCTION_14_21();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_5;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if (!MEMORY[0x10]) {
    goto LABEL_7;
  }
LABEL_5:
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SACardSnippet);
  AppUtil.sashBundleId.getter();
  static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_8:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_1_22();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_8();
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactForgetRelationshipView(relatedContactName:meCardName:meCardContactID:)(Swift::String_optional relatedContactName, Swift::String meCardName, Swift::String meCardContactID)
{
  OUTLINED_FUNCTION_10();
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v13 = v3 + *(int *)(v10 + 20);
  *(void *)uint64_t v13 = "BuildForgetRelationshipViewIOS";
  *(void *)(v13 + 8) = 30;
  *(unsigned char *)(v13 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v14)
  {
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v16 + 16) = xmmword_22D59FB50;
    *(void *)(v16 + 32) = v15;
    uint64_t v33 = v16;
    specialized Array._endMutation()();
    *(_OWORD *)(OUTLINED_FUNCTION_5_21() + 16) = xmmword_22D59FB50;
    id v17 = v15;
    uint64_t v18 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_12_23(v18);
    uint64_t v30 = v33;
  }
  else
  {
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v19 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  swift_bridgeObjectRetain();
  id v20 = @nonobjc SFFormattedText.__allocating_init(string:)(v31, v32);
  uint64_t v21 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v21 + 16) = xmmword_22D59FB50;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_23();
  *(void *)(v21 + 32) = SFRichText.init(string:bold:color:)(v22, v23, v24, v25);
  specialized Array._endMutation()();
  ContactsLabelCATs.relationshipRemoved()();
  Result<>.firstPrint.getter();
  OUTLINED_FUNCTION_53_2();
  outlined destroy of Result<TemplatingResult, Error>(v9, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v21)
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_53_2();
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  id v26 = @nonobjc SFFormattedText.__allocating_init(string:)(v9, v21);
  *(void *)(v19 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v20, v21, v30, 0, v26, 0, 0);
  specialized Array._endMutation()();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  OUTLINED_FUNCTION_8();
  result._1._rawValue = v28;
  result._0._rawValue = v27;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactSetRelationshipView(relatedContactName:meCardName:relationship:meCardContactID:)(Swift::String_optional relatedContactName, Swift::String meCardName, Swift::String_optional relationship, Swift::String meCardContactID)
{
  OUTLINED_FUNCTION_10();
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_4();
  uint64_t v41 = v13;
  uint64_t v14 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v16 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v17 = v4 + *(int *)(v14 + 20);
  *(void *)uint64_t v17 = "BuildSetRelationshipViewIOS";
  *(void *)(v17 + 8) = 27;
  *(unsigned char *)(v17 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v18)
  {
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v20 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v20 + 16) = xmmword_22D59FB50;
    *(void *)(v20 + 32) = v19;
    uint64_t v42 = v20;
    specialized Array._endMutation()();
    *(_OWORD *)(OUTLINED_FUNCTION_5_21() + 16) = xmmword_22D59FB50;
    id v21 = v19;
    uint64_t v22 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_12_23(v22);
    uint64_t v37 = v42;
  }
  else
  {
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  if (!v38) {
    static String.EMPTY.getter();
  }
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v23 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v23);
  ContactsLabelCATs.relationship(relationship:)(v11);
  outlined destroy of Result<TemplatingResult, Error>(v11, &demangling cache variable for type metadata for SpeakableString?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v24 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  swift_bridgeObjectRetain();
  id v25 = @nonobjc SFFormattedText.__allocating_init(string:)(v39, v40);
  uint64_t v26 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v26 + 16) = xmmword_22D59FB50;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_23();
  *(void *)(v26 + 32) = SFRichText.init(string:bold:color:)(v27, v28, v29, v30);
  specialized Array._endMutation()();
  uint64_t v31 = Result<>.firstPrint.getter();
  id v33 = @nonobjc SFFormattedText.__allocating_init(string:)(v31, v32);
  *(void *)(v24 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v25, v26, v37, 0, v33, 0, 0);
  specialized Array._endMutation()();
  outlined destroy of Result<TemplatingResult, Error>(v41, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v4);
  OUTLINED_FUNCTION_8();
  result._1._rawValue = v35;
  result._0._rawValue = v34;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(Swift::String newNickName, Swift::String meCardName, Swift::String meCardContactID)
{
  OUTLINED_FUNCTION_10();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v39 = v8;
  uint64_t v40 = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_4();
  uint64_t v41 = v11;
  uint64_t v12 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v14 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v15 = v3 + *(int *)(v12 + 20);
  *(void *)uint64_t v15 = "BuildSetNickNameViewIOS";
  *(void *)(v15 + 8) = 23;
  *(unsigned char *)(v15 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v16)
  {
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v18 + 16) = xmmword_22D59FB50;
    *(void *)(v18 + 32) = v17;
    uint64_t v42 = v18;
    specialized Array._endMutation()();
    *(_OWORD *)(OUTLINED_FUNCTION_5_21() + 16) = xmmword_22D59FB50;
    id v19 = v17;
    uint64_t v20 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_12_23(v20);
    uint64_t v38 = v42;
  }
  else
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v21 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  swift_bridgeObjectRetain();
  id v22 = @nonobjc SFFormattedText.__allocating_init(string:)(v39, v40);
  uint64_t v23 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v23 + 16) = xmmword_22D59FB50;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_23();
  *(void *)(v23 + 32) = SFRichText.init(string:bold:color:)(v24, v25, v26, v27);
  specialized Array._endMutation()();
  uint64_t v28 = v23;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  swift_bridgeObjectRetain();
  id v29 = SFContactImage.init(contactId:size:)(v7, v5, 0, 0, 1);
  ContactsLabelCATs.nickName()();
  uint64_t v30 = Result<>.firstPrint.getter();
  uint64_t v32 = v31;
  outlined destroy of Result<TemplatingResult, Error>(v41, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v32)
  {
    uint64_t v30 = static String.EMPTY.getter();
    uint64_t v32 = v33;
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  id v34 = @nonobjc SFFormattedText.__allocating_init(string:)(v30, v32);
  *(void *)(v21 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v22, v28, v38, v29, v34, 0, 0);
  specialized Array._endMutation()();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  OUTLINED_FUNCTION_8();
  result._1._rawValue = v36;
  result._0._rawValue = v35;
  return result;
}

void CompactViews.buildCompactConfirmationView(attributeType:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v13 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v10 = v0 + *(int *)(v7 + 20);
  *(void *)uint64_t v10 = "BuildConfirmationViewIOS";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  type metadata accessor for SiriKitAceViewBuilder();
  swift_retain();
  SiriKitAceViewBuilder.__allocating_init()();
  GenericViews.getConfirmText(forAttribute:)(v13);
  id v11 = static ContactsDirectInvocations.confirm()();
  dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
  swift_release();
  swift_bridgeObjectRelease();

  ContactsLabelCATs.cancel()();
  Result<>.firstPrint.getter();
  OUTLINED_FUNCTION_53_2();
  outlined destroy of Result<TemplatingResult, Error>(v6, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v2)
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_53_2();
  }
  id v12 = static ContactsDirectInvocations.deny()();
  dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
  swift_bridgeObjectRelease();

  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();
  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_8();
}

uint64_t static CompactViews.formatPhoneNumberForDisplay(_:)(uint64_t a1, void *a2)
{
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  v5.super.Class isa = CNPhoneNumber.__allocating_init(stringValue:)(v4).super.isa;
  id v6 = [(objc_class *)v5.super.isa formattedStringValue];
  if (v6)
  {
    uint64_t v7 = v6;
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    swift_bridgeObjectRetain();
  }
  return a1;
}

int64x2_t one-time initialization function for contactImageSize()
{
  int64x2_t result = vdupq_n_s64(0x4041000000000000uLL);
  static CompactViews.contactImageSize = (__int128)result;
  return result;
}

void CompactViews.buildCardSections(handles:contact:contactAttribute:localeString:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = v1;
  uint64_t v69 = v3;
  uint64_t v71 = v4;
  id v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v13 = v0 + *(int *)(v11 + 20);
  *(void *)uint64_t v13 = "BuildCardSectionsIOS";
  *(void *)(v13 + 8) = 20;
  *(unsigned char *)(v13 + 16) = 2;
  switch((unint64_t)objc_msgSend(v6, sel_contactAttributeType))
  {
    case 1uLL:
      if (!v10) {
        goto LABEL_45;
      }
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_10_26();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v65) {
          goto LABEL_45;
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v16) {
          goto LABEL_45;
        }
      }
      if (v16 == 1)
      {
        OUTLINED_FUNCTION_9_23();
        MEMORY[0x230F854E0](0, v10);
        uint64_t v17 = (void *)OUTLINED_FUNCTION_7_26();
        uint64_t v21 = CompactViews.buildEmailSingleAttributeSnippet(contact:emailAddress:localeString:)(v17, v18, v19, v20);
        goto LABEL_15;
      }
      CompactViews.buildEmailMultipleAttributesSnippet(contact:emailAddresses:localeString:)(v8, v10, v69, v71);
      goto LABEL_37;
    case 2uLL:
      if (!v10) {
        goto LABEL_45;
      }
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_10_26();
        uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v66) {
          goto LABEL_45;
        }
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v22) {
          goto LABEL_45;
        }
      }
      if (v22 == 1)
      {
        OUTLINED_FUNCTION_9_23();
        MEMORY[0x230F854E0](0, v10);
        uint64_t v23 = (void *)OUTLINED_FUNCTION_7_26();
        uint64_t v21 = CompactViews.buildPhoneSingleAttributeSnippet(contact:phoneNumber:localeString:)(v23, v24, v25, v26);
LABEL_15:
        unint64_t rawValue = v21;

        goto LABEL_32;
      }
      static CompactViews.buildPhoneMultipleAttributesSnippet(contact:phoneNumbers:localeString:)(v8, v10, v69, v71);
LABEL_37:
      OUTLINED_FUNCTION_14_21();
      if (v64)
      {
        OUTLINED_FUNCTION_13_25();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      goto LABEL_48;
    case 3uLL:
      if (!v10) {
        goto LABEL_45;
      }
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_10_26();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v67)
        {
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
LABEL_45:
        id v14 = v8;
        BOOL v15 = 1;
LABEL_46:
        CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(v14, v15);
LABEL_47:
        OUTLINED_FUNCTION_14_21();
        if (v68) {
          goto LABEL_33;
        }
        goto LABEL_48;
      }
      uint64_t v28 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v28) {
        goto LABEL_45;
      }
LABEL_19:
      if (v28 == 1)
      {
        OUTLINED_FUNCTION_9_23();
        id v29 = (void *)MEMORY[0x230F854E0](0, v10);
        id v30 = objc_msgSend(v29, sel_postalAddress, v69, v71);

        if (v30)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          id v31 = v30;
          id v32 = CNLabeledValue<>.init(address:)(v31);
          unint64_t v33 = CompactViews.buildAddressSingleAttributeSnippet(contact:postalAddress:localeString:)(v8, v32, v70, v72);

          if (!(v33 >> 62))
          {
            swift_bridgeObjectRetain();
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);

            goto LABEL_49;
          }
          OUTLINED_FUNCTION_13_25();
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
          swift_bridgeObjectRetain();
          _bridgeCocoaArray<A>(_:)();

          goto LABEL_34;
        }
      }
      Array<A>.toCNPostalAddresses.getter(v10);
      uint64_t v60 = (void *)OUTLINED_FUNCTION_7_26();
      unint64_t rawValue = CompactViews.buildAddressMultipleAttributesSnippet(contact:postalAddresses:localeString:)(v60, v61, v62, v63);
LABEL_31:
      swift_bridgeObjectRelease();
LABEL_32:
      if (rawValue >> 62)
      {
LABEL_33:
        OUTLINED_FUNCTION_13_25();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
LABEL_34:
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
LABEL_48:
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
LABEL_49:
      swift_bridgeObjectRelease();
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_1_22();
      outlined destroy of Signpost.OpenSignpost(v0);
      OUTLINED_FUNCTION_8();
      return;
    case 4uLL:
      type metadata accessor for ContactsAgeInfo();
      id v34 = *(void **)(v2 + 48);
      id v35 = v34;
      id v36 = v8;
      ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v36, (void (*)(uint64_t, char *, uint64_t))v6, v34);
      static CompactViews.formattedAgeDigit(_:)();
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      swift_release();
      unint64_t rawValue = (unint64_t)CompactViews.buildAgeAttributeSnippet(contact:requestedAge:)(v36, v38, v40);
      goto LABEL_31;
    case 5uLL:
      CompactViews.buildBirthdayAttributeSnippet(contact:)(v8);
      goto LABEL_47;
    case 6uLL:
      id v41 = objc_msgSend(v8, sel_nickname, v69, v71);
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      swift_bridgeObjectRelease();
      uint64_t v45 = HIBYTE(v44) & 0xF;
      if ((v44 & 0x2000000000000000) == 0) {
        uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
      }
      if (!v45) {
        goto LABEL_29;
      }
      id v46 = objc_msgSend(v8, sel_nickname);
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      uint64_t v50 = CNContact.formattedFullName.getter();
      BOOL v52 = v51;
      id v53 = objc_msgSend(v8, sel_identifier);
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v55;

      v57._uint64_t countAndFlagsBits = v47;
      v57._object = v49;
      v58._uint64_t countAndFlagsBits = v50;
      v58._object = v52;
      v59._uint64_t countAndFlagsBits = v54;
      v59._object = v56;
      unint64_t rawValue = (unint64_t)CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(v57, v58, v59)._0._rawValue;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    case 9uLL:
    case 0xBuLL:
      id v14 = v8;
      BOOL v15 = 0;
      goto LABEL_46;
    default:
LABEL_29:
      BOOL v15 = objc_msgSend(v6, sel_contactAttributeType, v69, v71) == 0;
      id v14 = v8;
      goto LABEL_46;
  }
}

uint64_t CompactViews.buildPhoneSingleAttributeSnippet(contact:phoneNumber:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a3;
  id v55 = a1;
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v11 = &v9[*(int *)(v7 + 20)];
  *(void *)uint64_t v11 = "BuildPhoneSingleAttributeSnippetIOS";
  *((void *)v11 + 1) = 35;
  v11[16] = 2;
  uint64_t v12 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a2);
  if (v13)
  {
    uint64_t v14 = v12;
    BOOL v15 = v13;
    uint64_t v53 = a4;
    id v16 = objc_msgSend(v55, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    BOOL v52 = a2;
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v19 = swift_allocObject();
      long long v51 = xmmword_22D59FB50;
      *(_OWORD *)(v19 + 16) = xmmword_22D59FB50;
      *(void *)(v19 + 32) = v18;
      uint64_t v56 = v19;
      specialized Array._endMutation()();
      uint64_t v47 = v56;
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v51;
      id v21 = v18;
      *(void *)(v20 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      uint64_t v56 = v20;
      specialized Array._endMutation()();
      uint64_t v46 = v56;
    }
    else
    {
      uint64_t v46 = MEMORY[0x263F8EE78];
      uint64_t v47 = MEMORY[0x263F8EE78];
    }
    uint64_t v23 = static CompactViews.formatPhoneNumberForDisplay(_:)(v14, v15);
    uint64_t v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    *(void *)&long long v51 = v14;
    uint64_t v26 = swift_allocObject();
    long long v48 = xmmword_22D59FB50;
    *(_OWORD *)(v26 + 16) = xmmword_22D59FB50;
    uint64_t v50 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    id v49 = SFRichText.init(string:bold:color:)(v23, v25, 1, 4);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = v48;
    id v28 = v55;
    uint64_t v29 = CNContact.formattedFullName.getter();
    *(void *)(v27 + 32) = SFRichText.init(string:bold:color:)(v29, v30, 0, 0);
    uint64_t v56 = v27;
    specialized Array._endMutation()();
    uint64_t v31 = v56;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    id v32 = objc_msgSend(v28, sel_identifier);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    id v36 = SFContactImage.init(contactId:size:)(v33, v35, 0, 0, 1);
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
    uint64_t v38 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v52);
    uint64_t v40 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v38, v39, v54, v53, 2, v37);
    uint64_t v42 = v41;
    swift_release();
    swift_bridgeObjectRelease();
    id v43 = @nonobjc SFFormattedText.__allocating_init(string:)(v40, v42);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFActionItem);
    id v44 = SFActionItem.init(phoneNumber:)(v51, (uint64_t)v15);
    *(void *)(v26 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v49, v31, v46, v36, v43, v44, 0);
    uint64_t v56 = v26;
    specialized Array._endMutation()();
    uint64_t v22 = v56;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v22 = MEMORY[0x263F8EE78];
  }
  outlined destroy of Signpost.OpenSignpost((uint64_t)v9);
  return v22;
}

uint64_t static CompactViews.buildPhoneMultipleAttributesSnippet(contact:phoneNumbers:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v46 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v11 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v12 = &v10[*(int *)(v8 + 20)];
  *(void *)uint64_t v12 = "BuildPhoneMultipleAttributesSnippetIOS";
  *((void *)v12 + 1) = 38;
  v12[16] = 2;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  long long v44 = xmmword_22D59FB50;
  *(_OWORD *)(v13 + 16) = xmmword_22D59FB50;
  *(void *)(v13 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  uint64_t v53 = v13;
  specialized Array._endMutation()();
  uint64_t v14 = v53;
  uint64_t v52 = MEMORY[0x263F8EE78];
  if (!(a2 >> 62))
  {
    uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_5;
    }
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v10);
    return v14;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v15 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_5:
  if (v15 >= 1)
  {
    uint64_t v41 = v10;
    uint64_t v42 = v15;
    uint64_t v17 = 0;
    unint64_t v49 = a2 & 0xC000000000000001;
    unint64_t v43 = a2;
    do
    {
      if (v49) {
        id v18 = (id)MEMORY[0x230F854E0](v17, a2);
      }
      else {
        id v18 = *(id *)(a2 + 8 * v17 + 32);
      }
      uint64_t v19 = v18;
      uint64_t v20 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v18);
      if (v21)
      {
        uint64_t v22 = v20;
        uint64_t v23 = v21;
        static AppUtil.buildPunchoutFor(phoneNumber:)();
        uint64_t v25 = v24;
        uint64_t v50 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
        uint64_t v26 = static CompactViews.formatPhoneNumberForDisplay(_:)(v22, v23);
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
        type metadata accessor for ContactsLabelCATs();
        static CATOption.defaultMode.getter();
        uint64_t v29 = CATWrapper.__allocating_init(options:globals:)();
        uint64_t v30 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v19);
        uint64_t v32 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v30, v31, v47, v48, 2, v29);
        uint64_t v34 = v33;
        swift_release();
        swift_bridgeObjectRelease();
        id v35 = @nonobjc SFFormattedText.__allocating_init(string:)(v32, v34);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v44;
        id v37 = v25;
        uint64_t v38 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(void *)(v36 + 32) = v38;
        uint64_t v51 = v36;
        specialized Array._endMutation()();
        SFRowCardSection.init(blueTitle:subtitle:commands:)(v26, v28, v35, v51);
        MEMORY[0x230F850D0]();
        if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v39 = v37;
        MEMORY[0x230F850D0]();
        uint64_t v15 = v42;
        if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v19 = v39;
        a2 = v43;
      }
      ++v17;
    }
    while (v15 != v17);
    swift_bridgeObjectRelease();
    uint64_t v14 = v53;
    id v10 = v41;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(void *a1, int a2)
{
  int v39 = a2;
  uint64_t v3 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v3);
  CNPhoneNumber v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v7 = &v5[*(int *)(v3 + 20)];
  *(void *)uint64_t v7 = "BuildNameAttributeSnippetIOS";
  *((void *)v7 + 1) = 28;
  v7[16] = 2;
  id v8 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  AppUtil.buildPunchoutFor(contactIdentifier:)();
  id v10 = v9;
  swift_bridgeObjectRelease();
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    long long v37 = xmmword_22D59FB50;
    *(_OWORD *)(v11 + 16) = xmmword_22D59FB50;
    *(void *)(v11 + 32) = v10;
    uint64_t v40 = v11;
    specialized Array._endMutation()();
    uint64_t v38 = v40;
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = v37;
    id v13 = v10;
    *(void *)(v12 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    uint64_t v40 = v12;
    specialized Array._endMutation()();
    *(void *)&long long v37 = v40;
  }
  else
  {
    *(void *)&long long v37 = MEMORY[0x263F8EE78];
    uint64_t v38 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  long long v36 = xmmword_22D59FB50;
  *(_OWORD *)(v14 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  uint64_t v15 = CNContact.formattedFullName.getter();
  id v17 = @nonobjc SFFormattedText.__allocating_init(string:)(v15, v16);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v36;
  id v19 = objc_msgSend(a1, sel_organizationName);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  *(void *)(v18 + 32) = SFRichText.init(string:bold:color:)(v20, v22, 0, 0);
  uint64_t v40 = v18;
  specialized Array._endMutation()();
  uint64_t v23 = v40;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  id v24 = objc_msgSend(a1, sel_identifier);
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = SFContactImage.init(contactId:size:)(v25, v27, 0, 0, 1);
  id v29 = 0;
  if (v39)
  {
    id v30 = objc_msgSend(a1, sel_identifier);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F67790]), sel_init);
    outlined bridged method (mbnn) of @objc SFActionItem.contactIdentifier.setter(v31, v33, v29);
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  *(void *)(v14 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v17, v23, v37, v28, 0, v29, 0);
  uint64_t v40 = v14;
  specialized Array._endMutation()();
  uint64_t v34 = v40;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v5);
  return v34;
}

uint64_t CompactViews.buildEmailSingleAttributeSnippet(contact:emailAddress:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a3;
  uint64_t v7 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v13 = &v11[*(int *)(v9 + 20)];
  *(void *)id v13 = "BuildEmailSingleAttributeSnippetIOS";
  *((void *)v13 + 1) = 35;
  v13[16] = 2;
  uint64_t v14 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a2);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = v14;
    unint64_t v49 = a2;
    uint64_t v50 = a4;
    id v18 = objc_msgSend(a1, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v21 = swift_allocObject();
      long long v48 = xmmword_22D59FB50;
      *(_OWORD *)(v21 + 16) = xmmword_22D59FB50;
      *(void *)(v21 + 32) = v20;
      uint64_t v53 = v21;
      specialized Array._endMutation()();
      uint64_t v45 = v53;
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v48;
      id v23 = v20;
      *(void *)(v22 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      uint64_t v53 = v22;
      specialized Array._endMutation()();
      uint64_t v44 = v53;
    }
    else
    {
      uint64_t v44 = MEMORY[0x263F8EE78];
      uint64_t v45 = MEMORY[0x263F8EE78];
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = swift_allocObject();
    long long v46 = xmmword_22D59FB50;
    *(_OWORD *)(v25 + 16) = xmmword_22D59FB50;
    uint64_t v51 = (char *)type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    swift_bridgeObjectRetain();
    uint64_t v47 = v17;
    *(void *)&long long v48 = SFRichText.init(string:bold:color:)(v17, v16, 1, 4);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v46;
    uint64_t v27 = CNContact.formattedFullName.getter();
    *(void *)(v26 + 32) = SFRichText.init(string:bold:color:)(v27, v28, 0, 0);
    uint64_t v53 = v26;
    specialized Array._endMutation()();
    uint64_t v29 = v53;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    id v30 = objc_msgSend(a1, sel_identifier);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    id v34 = SFContactImage.init(contactId:size:)(v31, v33, 0, 0, 1);
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    uint64_t v35 = CATWrapper.__allocating_init(options:globals:)();
    uint64_t v36 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v49);
    uint64_t v38 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v36, v37, v52, v50, 1, v35);
    uint64_t v40 = v39;
    swift_release();
    swift_bridgeObjectRelease();
    id v41 = @nonobjc SFFormattedText.__allocating_init(string:)(v38, v40);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFActionItem);
    id v42 = SFActionItem.init(email:)(v47, v16);
    *(void *)(v25 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)((void *)v48, v29, v44, v34, v41, v42, 0);
    uint64_t v53 = v25;
    specialized Array._endMutation()();
    uint64_t v24 = v53;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  outlined destroy of Signpost.OpenSignpost((uint64_t)v11);
  return v24;
}

uint64_t CompactViews.buildEmailMultipleAttributesSnippet(contact:emailAddresses:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v8 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v8 - 8);
  long long v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v13 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v14 = &v12[*(int *)(v10 + 20)];
  *(void *)uint64_t v14 = "BuildEmailMultipleAttributesSnippetIOS";
  *((void *)v14 + 1) = 38;
  v14[16] = 2;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  long long v43 = xmmword_22D59FB50;
  *(_OWORD *)(v15 + 16) = xmmword_22D59FB50;
  *(void *)(v15 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  uint64_t v53 = v15;
  specialized Array._endMutation()();
  uint64_t v16 = v53;
  uint64_t v56 = v53;
  uint64_t v55 = MEMORY[0x263F8EE78];
  if (!(a2 >> 62))
  {
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_5;
    }
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v12);
    return v16;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result) {
    goto LABEL_22;
  }
LABEL_5:
  if (v17 >= 1)
  {
    id v42 = v12;
    uint64_t v19 = 0;
    unint64_t v51 = a2 & 0xC000000000000001;
    uint64_t v45 = v5 + 8;
    uint64_t v46 = v17;
    unint64_t v47 = a2;
    do
    {
      if (v51) {
        id v20 = (id)MEMORY[0x230F854E0](v19, a2);
      }
      else {
        id v20 = *(id *)(a2 + 8 * v19 + 32);
      }
      uint64_t v21 = v20;
      uint64_t v22 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v20);
      if (v23)
      {
        uint64_t v24 = v22;
        uint64_t v25 = v23;
        AppUtil.buildPunchoutFor(emailAddress:)();
        if (v26)
        {
          id v27 = v26;
          MEMORY[0x230F850D0]();
          if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v43;
          id v29 = v27;
          uint64_t v30 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

          *(void *)(v28 + 32) = v30;
          uint64_t v53 = v28;
          specialized Array._endMutation()();
          uint64_t v52 = v53;
        }
        else
        {
          uint64_t v52 = MEMORY[0x263F8EE78];
        }
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
        uint64_t v53 = v24;
        uint64_t v54 = v25;
        uint64_t v31 = String.init<A>(_:)();
        uint64_t v33 = v32;
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
        type metadata accessor for ContactsLabelCATs();
        static CATOption.defaultMode.getter();
        uint64_t v34 = CATWrapper.__allocating_init(options:globals:)();
        uint64_t v35 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v21);
        uint64_t v37 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v35, v36, v49, v50, 1, v34);
        uint64_t v39 = v38;
        swift_release();
        swift_bridgeObjectRelease();
        id v40 = @nonobjc SFFormattedText.__allocating_init(string:)(v37, v39);
        SFRowCardSection.init(blueTitle:subtitle:commands:)(v31, v33, v40, v52);
        MEMORY[0x230F850D0]();
        if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v17 = v46;
        a2 = v47;
      }
      ++v19;
    }
    while (v17 != v19);
    swift_bridgeObjectRelease();
    uint64_t v16 = v56;
    id v12 = v42;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildAddressSingleAttributeSnippet(contact:postalAddress:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v11 = &v9[*(int *)(v7 + 20)];
  *(void *)uint64_t v11 = "BuildAddressSingleAttributeSnippetIOS";
  *((void *)v11 + 1) = 37;
  v11[16] = 2;
  AppUtil.buildPunchoutFor(labeledAddress:contact:)();
  if (v12)
  {
    id v13 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    long long v43 = xmmword_22D59FB50;
    *(_OWORD *)(v14 + 16) = xmmword_22D59FB50;
    *(void *)(v14 + 32) = v13;
    uint64_t v47 = v14;
    specialized Array._endMutation()();
    uint64_t v44 = v47;
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v43;
    id v16 = v13;
    *(void *)(v15 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    uint64_t v47 = v15;
    specialized Array._endMutation()();
    *(void *)&long long v43 = v47;
  }
  else
  {
    *(void *)&long long v43 = MEMORY[0x263F8EE78];
    uint64_t v44 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  long long v41 = xmmword_22D59FB50;
  *(_OWORD *)(v17 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  uint64_t v18 = CNLabeledValue<>.formattedString.getter();
  id v42 = SFRichText.init(string:bold:color:)(v18, v19, 1, 0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v41;
  uint64_t v21 = CNContact.formattedFullName.getter();
  *(void *)(v20 + 32) = SFRichText.init(string:bold:color:)(v21, v22, 0, 0);
  uint64_t v47 = v20;
  specialized Array._endMutation()();
  uint64_t v23 = v47;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  id v24 = objc_msgSend(a1, sel_identifier);
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = SFContactImage.init(contactId:size:)(v25, v27, 0, 0, 1);
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  uint64_t v29 = CATWrapper.__allocating_init(options:globals:)();
  id v30 = objc_msgSend(a2, sel_label);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0;
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  uint64_t v35 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v32, v34, v45, v46, 3, v29);
  uint64_t v37 = v36;
  swift_release();
  swift_bridgeObjectRelease();
  id v38 = @nonobjc SFFormattedText.__allocating_init(string:)(v35, v37);
  *(void *)(v17 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v42, v23, v43, v28, v38, 0, 0);
  uint64_t v47 = v17;
  specialized Array._endMutation()();
  uint64_t v39 = v47;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v9);
  return v39;
}

uint64_t CompactViews.buildAddressMultipleAttributesSnippet(contact:postalAddresses:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v8 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v8 - 8);
  Swift::String v58 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v13 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v14 = *(int *)(v10 + 20);
  long long v48 = v12;
  uint64_t v15 = &v12[v14];
  *(void *)uint64_t v15 = "BuildAddressMultipleAttributesSnippetIOS";
  *((void *)v15 + 1) = 40;
  v15[16] = 2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  long long v49 = xmmword_22D59FB50;
  *(_OWORD *)(v16 + 16) = xmmword_22D59FB50;
  *(void *)(v16 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  uint64_t v63 = v16;
  specialized Array._endMutation()();
  uint64_t v17 = v63;
  uint64_t v62 = MEMORY[0x263F8EE78];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = (uint64_t)v48;
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v19);
    return v17;
  }
  uint64_t v57 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
  uint64_t v56 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  uint64_t result = type metadata accessor for ContactsLabelCATs();
  uint64_t v55 = result;
  if (v18 >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v51 = a2 & 0xC000000000000001;
    uint64_t v52 = v5 + 8;
    uint64_t v53 = v18;
    uint64_t v54 = a1;
    do
    {
      if (v51) {
        id v22 = (id)MEMORY[0x230F854E0](v21, a2);
      }
      else {
        id v22 = *(id *)(a2 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      AppUtil.buildPunchoutFor(labeledAddress:contact:)();
      if (v24)
      {
        id v25 = v24;
        MEMORY[0x230F850D0]();
        if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v49;
        id v27 = v25;
        uint64_t v28 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(void *)(v26 + 32) = v28;
        uint64_t v61 = v26;
        specialized Array._endMutation()();
        uint64_t v29 = v61;
      }
      else
      {
        uint64_t v29 = MEMORY[0x263F8EE78];
      }
      unint64_t v30 = a2;
      id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB38]), sel_init);
      id v32 = objc_msgSend(v23, sel_value);
      id v33 = objc_msgSend(v31, sel_stringFromPostalAddress_, v32);

      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      static CATOption.defaultMode.getter();
      uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
      id v38 = objc_msgSend(v23, sel_label);
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;
      }
      else
      {
        uint64_t v40 = 0;
        unint64_t v42 = 0;
      }
      uint64_t v43 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v40, v42, v59, v60, 3, v37);
      uint64_t v45 = v44;
      swift_release();
      swift_bridgeObjectRelease();
      id v46 = @nonobjc SFFormattedText.__allocating_init(string:)(v43, v45);
      SFRowCardSection.init(title:subtitle:commands:)(v34, v36, v46, v29);
      MEMORY[0x230F850D0]();
      if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v21;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      a2 = v30;
    }
    while (v53 != v21);
    swift_bridgeObjectRelease();
    uint64_t v17 = v63;
    uint64_t v19 = (uint64_t)v48;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildBirthdayAttributeSnippet(contact:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v47);
  id v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v11 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v12 = &v10[*(int *)(v8 + 20)];
  *(void *)id v12 = "BuildBirthdayAttributeSnippetIOS";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  CNContact.timezonedBirthdate.getter((uint64_t)v7);
  uint64_t v13 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v13);
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v15 = CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(a1, 1);
  }
  else
  {
    uint64_t v45 = v2;
    id v16 = objc_msgSend(a1, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v19 = swift_allocObject();
      long long v44 = xmmword_22D59FB50;
      *(_OWORD *)(v19 + 16) = xmmword_22D59FB50;
      *(void *)(v19 + 32) = v18;
      uint64_t v48 = v19;
      specialized Array._endMutation()();
      uint64_t v42 = v48;
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v44;
      id v21 = v18;
      *(void *)(v20 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      uint64_t v48 = v20;
      specialized Array._endMutation()();
      uint64_t v41 = v48;
    }
    else
    {
      uint64_t v41 = MEMORY[0x263F8EE78];
      uint64_t v42 = MEMORY[0x263F8EE78];
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v22 = swift_allocObject();
    long long v43 = xmmword_22D59FB50;
    *(_OWORD *)(v22 + 16) = xmmword_22D59FB50;
    *(void *)&long long v44 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    uint64_t v23 = CNContact.formattedBirthdateString.getter();
    id v25 = @nonobjc SFFormattedText.__allocating_init(string:)(v23, v24);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v43;
    uint64_t v27 = CNContact.formattedFullName.getter();
    *(void *)(v26 + 32) = SFRichText.init(string:bold:color:)(v27, v28, 0, 0);
    uint64_t v48 = v26;
    specialized Array._endMutation()();
    uint64_t v29 = v48;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    id v30 = objc_msgSend(a1, sel_identifier);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    id v34 = SFContactImage.init(contactId:size:)(v31, v33, 0, 0, 1);
    uint64_t v35 = (uint64_t)v46;
    ContactsLabelCATs.birthday()();
    uint64_t v36 = Result<>.firstPrint.getter();
    uint64_t v38 = v37;
    outlined destroy of Result<TemplatingResult, Error>(v35, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    id v39 = @nonobjc SFFormattedText.__allocating_init(string:)(v36, v38);
    *(void *)(v22 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v25, v29, v41, v34, v39, 0, 0);
    uint64_t v48 = v22;
    specialized Array._endMutation()();
    uint64_t v15 = v48;
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v10);
  return v15;
}

void static CompactViews.formattedAgeDigit(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v31 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v15 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 40) & 1) == 0 && *(double *)(v1 + 32) >= 1.0)
    {
      v31[1] = *(void *)(v1 + 32);
      swift_retain();
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Double and conformance Double();
      FloatingPointFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>();
      BinaryFloatingPoint.formatted<A>(_:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v16);
      goto LABEL_11;
    }
    if (!*(void *)(v1 + 56))
    {
      if (!*(void *)(v1 + 48) && !*(void *)(v1 + 24)) {
        goto LABEL_11;
      }
      swift_retain();
    }
    swift_retain();
    swift_retain();
    double v23 = COERCE_DOUBLE(dispatch thunk of DialogDuration.valueInYears.getter());
    if ((v24 & 1) == 0 && v23 >= 1.0)
    {
      dispatch thunk of DialogDuration.years.getter();
      uint64_t v25 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload(v14, 1, v25) == 1)
      {
        swift_release();
        swift_release();
        outlined destroy of Result<TemplatingResult, Error>(v14, &demangling cache variable for type metadata for SpeakableString?);
        goto LABEL_11;
      }
      uint64_t v26 = SpeakableString.print.getter();
      uint64_t v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v14, v25);
      v31[2] = v26;
      v31[3] = v28;
      static CharacterSet.decimalDigits.getter();
      CharacterSet.inverted.getter();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
      v29(v10, v2);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v30 = StringProtocol.components(separatedBy:)();
      v29(v8, v2);
      swift_bridgeObjectRelease();
      if (*(void *)(v30 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
  }
LABEL_11:
  OUTLINED_FUNCTION_8();
}

id CompactViews.buildAgeAttributeSnippet(contact:requestedAge:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t v51 = a2;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v53);
  uint64_t v52 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v48 - v9;
  uint64_t v11 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v14 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v15 = &v13[*(int *)(v11 + 20)];
  *(void *)uint64_t v15 = "BuildAgeAttributeSnippetIOS";
  *((void *)v15 + 1) = 27;
  v15[16] = 2;
  id v16 = objc_msgSend(a1, sel_birthday);
  uint64_t v17 = a1;
  if (v16)
  {
    uint64_t v18 = v16;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = type metadata accessor for DateComponents();
    uint64_t v20 = (uint64_t)v8;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = type metadata accessor for DateComponents();
    uint64_t v20 = (uint64_t)v8;
    uint64_t v21 = 1;
  }
  __swift_storeEnumTagSinglePayload(v20, v21, 1, v19);
  outlined init with take of DateComponents?((uint64_t)v8, (uint64_t)v10);
  type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v19) == 1)
  {
    outlined destroy of Result<TemplatingResult, Error>((uint64_t)v10, &demangling cache variable for type metadata for DateComponents?);
LABEL_12:
    uint64_t v30 = CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(a1, 1);
LABEL_16:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v13);
    return (id)v30;
  }
  DateComponents.year.getter();
  char v23 = v22;
  (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v10, v19);
  if ((v23 & 1) != 0 || !v54) {
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  id v24 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  AppUtil.buildPunchoutFor(contactIdentifier:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v27 = swift_allocObject();
    long long v50 = xmmword_22D59FB50;
    *(_OWORD *)(v27 + 16) = xmmword_22D59FB50;
    *(void *)(v27 + 32) = v26;
    uint64_t v55 = v27;
    specialized Array._endMutation()();
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v50;
    id v29 = v26;
    *(void *)(v28 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    uint64_t v55 = v28;
    specialized Array._endMutation()();
    uint64_t v48 = v55;
  }
  else
  {
    uint64_t v48 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v31 = swift_allocObject();
  long long v50 = xmmword_22D59FB50;
  *(_OWORD *)(v31 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  uint64_t v32 = CNContact.formattedFullName.getter();
  id v49 = @nonobjc SFFormattedText.__allocating_init(string:)(v32, v33);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v50;
  uint64_t v35 = (uint64_t)v52;
  ContactsLabelCATs.age()();
  uint64_t v36 = Result<>.firstPrint.getter();
  uint64_t v38 = v37;
  outlined destroy of Result<TemplatingResult, Error>(v35, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  id result = @nonobjc SFFormattedText.__allocating_init(string:)(v36, v38);
  if (result)
  {
    id v40 = result;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    *(void *)(v34 + 32) = v40;
    uint64_t v55 = v34;
    specialized Array._endMutation()();
    uint64_t v41 = v55;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    id v42 = objc_msgSend(v17, sel_identifier);
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    id v46 = SFContactImage.init(contactId:size:)(v43, v45, 0, 0, 1);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
    id v47 = @nonobjc SFFormattedText.__allocating_init(string:)(v51, v54);
    *(void *)(v31 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v49, v41, v48, v46, 0, 0, v47);
    uint64_t v55 = v31;
    specialized Array._endMutation()();
    uint64_t v30 = v55;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

id static CompactViews.buildHeaderItem(contact:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = &v4[*(int *)(v2 + 20)];
  *(void *)uint64_t v6 = "BuildHeaderItemIOS";
  *((void *)v6 + 1) = 18;
  v6[16] = 2;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  uint64_t v7 = CNContact.formattedFullName.getter();
  id v9 = SFRichText.init(string:bold:color:)(v7, v8, 1, 0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  id v10 = objc_msgSend(a1, sel_identifier);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (one-time initialization token for contactImageSize != -1) {
    swift_once();
  }
  id v14 = SFContactImage.init(contactId:size:)(v11, v13, static CompactViews.contactImageSize, *((uint64_t *)&static CompactViews.contactImageSize + 1), 0);
  id v15 = SFRowCardSection.init(leadingText:image:)(v9, v14);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v4);
  return v15;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc SFActionItem.contactIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setContactIdentifier_, v4);
}

uint64_t OUTLINED_FUNCTION_7_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_23()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12_23(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  *(void *)(v2 - 88) = v1;
  return specialized Array._endMutation()();
}

unint64_t ContactsError.errorDescription.getter()
{
  uint64_t v57 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v59 = v1;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v56 - v6;
  uint64_t v8 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v58 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v24 = v23 - v22;
  outlined init with copy of ContactsError(v0, v23 - v22);
  unint64_t v25 = 0xD000000000000055;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(35);
      swift_bridgeObjectRelease();
      uint64_t v30 = v8 - 12;
      uint64_t v31 = "CAT.execute() failed for CAT ID: ";
      goto LABEL_5;
    case 2u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(28);
      swift_bridgeObjectRelease();
      uint64_t v30 = v8 - 19;
      uint64_t v31 = "makeViews call failed for ";
LABEL_5:
      *(void *)&v64[0] = v30;
      *((void *)&v64[0] + 1) = (unint64_t)(v31 - 32) | 0x8000000000000000;
      goto LABEL_25;
    case 3u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(62);
      OUTLINED_FUNCTION_5_36();
      uint64_t v32 = v8 + 15;
      uint64_t v33 = "Failed to construct SiriKitIntentHandler for intent of type ";
      goto LABEL_24;
    case 4u:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20, v24, v14);
      OUTLINED_FUNCTION_0_32();
      _StringGuts.grow(_:)(47);
      OUTLINED_FUNCTION_5_36();
      v34._object = (void *)0x800000022D5AA0C0;
      v34._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      String.append(_:)(v34);
      _print_unlocked<A, B>(_:_:)();
      unint64_t v25 = *(void *)&v64[0];
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
      return v25;
    case 5u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(57);
      OUTLINED_FUNCTION_5_36();
      OUTLINED_FUNCTION_4_33(v8 + 2, (uint64_t)"Attempt to fetch contact for contactIdentifier ");
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      unint64_t v35 = 0x2E64656C69616620;
      unint64_t v36 = 0xE800000000000000;
      goto LABEL_22;
    case 6u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(49);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = v8 - 21;
      *((void *)&v64[0] + 1) = 0x800000022D5A9E10;
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      unint64_t v35 = v8 - 22;
      goto LABEL_21;
    case 7u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(38);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = v8 - 10;
      *((void *)&v64[0] + 1) = 0x800000022D5A9DE0;
      OUTLINED_FUNCTION_2_36();
      goto LABEL_14;
    case 8u:
      uint64_t v38 = *(void *)(v24 + 16);
      id v39 = *(void **)(v24 + 24);
      OUTLINED_FUNCTION_0_32();
      _StringGuts.grow(_:)(82);
      OUTLINED_FUNCTION_5_36();
      OUTLINED_FUNCTION_4_33(0xD000000000000014, (uint64_t)"We're prompting for ");
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_33(0xD00000000000001FLL, (uint64_t)" even though user is modifying ");
      v40._uint64_t countAndFlagsBits = v38;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      unint64_t v35 = 0xD00000000000001BLL;
      uint64_t v37 = ". This is an invalid state.";
      goto LABEL_21;
    case 9u:
      OUTLINED_FUNCTION_0_32();
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = 0x20746F6C53;
      *((void *)&v64[0] + 1) = 0xE500000000000000;
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_33(0xD000000000000011, (uint64_t)" not defined for ");
      v41._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v41);
      goto LABEL_26;
    case 0xAu:
      uint64_t v42 = *(void *)(v24 + 16);
      uint64_t v43 = *(void **)(v24 + 24);
      OUTLINED_FUNCTION_0_32();
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = 0xD000000000000029;
      *((void *)&v64[0] + 1) = 0x800000022D5A9BE0;
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      v44._uint64_t countAndFlagsBits = 544175136;
      v44._object = (void *)0xE400000000000000;
      String.append(_:)(v44);
      v45._uint64_t countAndFlagsBits = v42;
      v45._object = v43;
      String.append(_:)(v45);
LABEL_14:
      swift_bridgeObjectRelease();
      unint64_t v35 = 46;
      unint64_t v36 = 0xE100000000000000;
      goto LABEL_22;
    case 0xBu:
      outlined init with take of Any((_OWORD *)v24, v64);
      unint64_t v60 = 0;
      unint64_t v61 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      unint64_t v62 = v60;
      unint64_t v63 = v61;
      v46._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v46._object = (void *)0x800000022D5A9C40;
      String.append(_:)(v46);
      outlined init with copy of Any((uint64_t)v64, (uint64_t)&v60);
      v47._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_33(0xD000000000000017, (uint64_t)" to String as expected.");
      unint64_t v25 = v62;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
      return v25;
    case 0xCu:
      uint64_t v48 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v13, v24, v8);
      OUTLINED_FUNCTION_0_32();
      _StringGuts.grow(_:)(81);
      OUTLINED_FUNCTION_5_36();
      OUTLINED_FUNCTION_4_33(0xD00000000000004ELL, (uint64_t)"Received unexpected NL Intent, could not match to a supported SiriKit intent: ");
      lazy protocol witness table accessor for type NLIntent and conformance NLIntent(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, MEMORY[0x263F73760]);
      v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      v50._uint64_t countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      unint64_t v25 = *(void *)&v64[0];
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v13, v8);
      return v25;
    case 0xDu:
      uint64_t v51 = v59;
      uint64_t v52 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v7, v24, v57);
      Swift::Int v53 = OUTLINED_FUNCTION_9_24();
      _StringGuts.grow(_:)(v53);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = 0xD000000000000020;
      *((void *)&v64[0] + 1) = 0x800000022D5A9AB0;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v5, v7, v52);
      v54._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      unint64_t v25 = *(void *)&v64[0];
      (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v52);
      return v25;
    case 0xEu:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(79);
      OUTLINED_FUNCTION_5_36();
      OUTLINED_FUNCTION_4_33(v8 - 3, (uint64_t)"Received unexpected unsupported reason of ");
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      unint64_t v35 = v8 - 10;
      uint64_t v37 = ", cannot create unsupported prompt.";
      goto LABEL_21;
    case 0xFu:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(83);
      OUTLINED_FUNCTION_5_36();
      OUTLINED_FUNCTION_4_33(v8 - 10, (uint64_t)"Received unexpected intent type of ");
      OUTLINED_FUNCTION_2_36();
      swift_bridgeObjectRelease();
      unint64_t v35 = v8 + 1;
      uint64_t v37 = ", cannot create AnyFlow for intent processing.";
LABEL_21:
      unint64_t v36 = (unint64_t)(v37 - 32) | 0x8000000000000000;
LABEL_22:
      String.append(_:)(*(Swift::String *)&v35);
      return *(void *)&v64[0];
    case 0x10u:
      OUTLINED_FUNCTION_0_32();
      OUTLINED_FUNCTION_3_31(65);
      OUTLINED_FUNCTION_5_36();
      uint64_t v32 = v8 + 18;
      uint64_t v33 = "Received unknown recommendation variant in contact resolution: ";
LABEL_24:
      OUTLINED_FUNCTION_4_33(v32, (uint64_t)v33);
LABEL_25:
      OUTLINED_FUNCTION_2_36();
LABEL_26:
      swift_bridgeObjectRelease();
      return *(void *)&v64[0];
    case 0x11u:
      return 0xD00000000000003CLL;
    case 0x12u:
      return v25;
    case 0x13u:
      return 0xD000000000000058;
    case 0x14u:
      return 0xD000000000000036;
    case 0x15u:
      return 0xD000000000000036;
    case 0x16u:
      return 0xD00000000000003ALL;
    case 0x17u:
      return 0xD000000000000027;
    case 0x18u:
      return 0xD00000000000003DLL;
    case 0x19u:
      return 0xD000000000000026;
    case 0x1Au:
      return 0xD000000000000029;
    case 0x1Bu:
      return 0xD00000000000002ALL;
    case 0x1Cu:
    case 0x1Eu:
    case 0x24u:
    case 0x25u:
      return 0xD00000000000002DLL;
    case 0x1Du:
      return 0xD00000000000001FLL;
    case 0x1Fu:
      return 0xD00000000000002BLL;
    case 0x20u:
      return 0xD00000000000001ALL;
    case 0x21u:
      return 0xD000000000000013;
    case 0x22u:
      return 0xD000000000000030;
    case 0x23u:
      return 0xD000000000000023;
    case 0x26u:
      return 0xD000000000000029;
    case 0x27u:
      return 0xD000000000000045;
    default:
      uint64_t v26 = *(void **)v24;
      Swift::Int v27 = OUTLINED_FUNCTION_9_24();
      _StringGuts.grow(_:)(v27);
      swift_bridgeObjectRelease();
      *(void *)&v64[0] = 0xD000000000000020;
      *((void *)&v64[0] + 1) = 0x800000022D5AA240;
      unint64_t v60 = (unint64_t)v26;
      id v28 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v29._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();

      return *(void *)&v64[0];
  }
}

void specialized fatalError(_:file:line:)()
{
}

{
  specialized fatalError(_:file:line:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void (__cdecl *v11)();
  uint64_t v12[3];

  uint64_t v0 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = v2 - v1;
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = ContactsError.errorDescription.getter();
  uint64_t v6 = v5;
  outlined destroy of ContactsError(v3);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v8, v9, "%s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_6_31();
  uint64_t v11 = static FatalError.fatalErrorClosure;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  outlined destroy of ContactsError(v3);
  v11();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v9[3];

  uint64_t v0 = static String.EMPTY.getter();
  uint64_t v2 = v1;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  id v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v8 = v0;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v9[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v2, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_6_31();
  uint64_t v7 = static FatalError.fatalErrorClosure;
  static String.EMPTY.getter();
  v7();
}

void fatalError(_:file:line:)(uint64_t (*a1)(void))
{
  uint64_t v2 = a1();
  unint64_t v4 = v3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = OUTLINED_FUNCTION_6_31();
  uint64_t v10 = static FatalError.fatalErrorClosure;
  ((void (*)(uint64_t))a1)(v9);
  v10();
}

void (*static FatalError.fatalErrorClosure.getter())()
{
  OUTLINED_FUNCTION_6_31();
  uint64_t v0 = static FatalError.fatalErrorClosure;
  swift_retain();
  return v0;
}

uint64_t static FatalError.fatalErrorClosure.setter(void (*a1)(), uint64_t a2)
{
  static FatalError.fatalErrorClosure = a1;
  qword_26B71B760 = a2;
  return swift_release();
}

uint64_t (*static FatalError.fatalErrorClosure.modify())()
{
  return protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo;
}

void closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure()
{
}

uint64_t type metadata accessor for ContactsError()
{
  uint64_t result = type metadata singleton initialization cache for ContactsError;
  if (!type metadata singleton initialization cache for ContactsError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of ContactsError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactsError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*static FatalError.defaultFatalErrorClosure.getter())()
{
  return closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure;
}

uint64_t static FatalError.replaceFatalError(closure:)(void (*a1)(), uint64_t a2)
{
  static FatalError.fatalErrorClosure = a1;
  qword_26B71B760 = a2;
  swift_retain();
  return swift_release();
}

uint64_t static FatalError.restoreFatalError()()
{
  static FatalError.fatalErrorClosure = closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure;
  qword_26B71B760 = 0;
  return swift_release();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ContactsError()
{
  return MEMORY[0x270EEE940]();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance ContactsError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance ContactsError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance ContactsError()
{
  return MEMORY[0x270EEE920]();
}

uint64_t protocol witness for Error._domain.getter in conformance ContactsError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance ContactsError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance ContactsError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ContactsError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t base witness table accessor for Error in ContactsError()
{
  return lazy protocol witness table accessor for type NLIntent and conformance NLIntent((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
}

uint64_t lazy protocol witness table accessor for type NLIntent and conformance NLIntent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FatalError()
{
  return &type metadata for FatalError;
}

char *initializeBufferWithCopyOfBuffer for ContactsError(char *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = (char *)*a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        os_log_type_t v7 = (char *)*a2;
        uint64_t v8 = v7;
        *(void *)a1 = v7;
        goto LABEL_13;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        uint64_t v17 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v17;
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 4u:
        uint64_t v10 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(char *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_13;
      case 8u:
      case 0xAu:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v11;
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = v12;
        *((void *)a1 + 3) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 9u:
        *(void *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 0xBu:
        uint64_t v14 = a2[3];
        *((void *)a1 + 3) = v14;
        (**(void (***)(char *, void *))(v14 - 8))(a1, a2);
        goto LABEL_13;
      case 0xCu:
        uint64_t v15 = type metadata accessor for NLIntent();
        (*(void (**)(char *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        goto LABEL_13;
      case 0xDu:
        uint64_t v16 = type metadata accessor for Parse();
        (*(void (**)(char *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for ContactsError(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = *a1;

      return;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      goto LABEL_2;
    case 4u:
      uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
      goto LABEL_15;
    case 8u:
    case 0xAu:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    case 0xBu:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
      return;
    case 0xCu:
      uint64_t v3 = type metadata accessor for NLIntent();
      goto LABEL_15;
    case 0xDu:
      uint64_t v3 = type metadata accessor for Parse();
LABEL_15:
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void *initializeWithCopy for ContactsError(void *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void **)a2;
      id v7 = v6;
      *a1 = v6;
      goto LABEL_11;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      uint64_t v15 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 4u:
      uint64_t v8 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_11;
    case 8u:
    case 0xAu:
      uint64_t v9 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v9;
      uint64_t v10 = *((void *)a2 + 2);
      uint64_t v11 = *((void *)a2 + 3);
      a1[2] = v10;
      a1[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 9u:
      *a1 = *(void *)a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0xBu:
      uint64_t v12 = *((void *)a2 + 3);
      a1[3] = v12;
      (**(void (***)(void *, const void *))(v12 - 8))(a1, a2);
      goto LABEL_11;
    case 0xCu:
      uint64_t v13 = type metadata accessor for NLIntent();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      goto LABEL_11;
    case 0xDu:
      uint64_t v14 = type metadata accessor for Parse();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **assignWithCopy for ContactsError(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ContactsError((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *a2;
        id v7 = v6;
        *a1 = v6;
        goto LABEL_12;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 4u:
        uint64_t v8 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_12;
      case 8u:
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0xBu:
        uint64_t v9 = a2[3];
        a1[3] = v9;
        (**((void (***)(void **, const void *))v9 - 1))(a1, a2);
        goto LABEL_12;
      case 0xCu:
        uint64_t v10 = type metadata accessor for NLIntent();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_12;
      case 0xDu:
        uint64_t v11 = type metadata accessor for Parse();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for ContactsError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 13:
      uint64_t v8 = type metadata accessor for Parse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      break;
    case 12:
      uint64_t v9 = type metadata accessor for NLIntent();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      break;
    case 4:
      uint64_t v7 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for ContactsError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ContactsError((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 13:
        uint64_t v8 = type metadata accessor for Parse();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        break;
      case 12:
        uint64_t v9 = type metadata accessor for NLIntent();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        break;
      case 4:
        uint64_t v7 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for ContactsError()
{
  uint64_t result = type metadata accessor for Parse.DirectInvocation();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NLIntent();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Parse();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_32()
{
  *(void *)(v0 - 112) = 0;
  *(void *)(v0 - 104) = 0xE000000000000000;
}

void OUTLINED_FUNCTION_2_36()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_3_31(Swift::Int a1)
{
  _StringGuts.grow(_:)(a1);
}

void OUTLINED_FUNCTION_4_33(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_5_36()
{
  uint64_t v1 = *(void *)(v0 - 104);
  *(void *)(v0 - 112) = *(void *)(v0 - 112);
  *(void *)(v0 - 104) = v1;
}

uint64_t OUTLINED_FUNCTION_6_31()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_9_24()
{
  *(void *)(v0 - 112) = 0;
  *(void *)(v0 - 104) = 0xE000000000000000;
  return 34;
}

uint64_t OUTLINED_FUNCTION_10_27()
{
  return swift_beginAccess();
}

uint64_t AppUtil.init(installedApps:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of DeviceState(a1, a2);
}

void AppUtil.buildPunchoutFor(contactIdentifier:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v44 = v2;
  Swift::String v45 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_4_4();
  uint64_t v41 = v6;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v40 - v8;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v43 = v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = OUTLINED_FUNCTION_1_37();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v13 = v0 + *(int *)(v11 + 20);
  *(void *)uint64_t v13 = "BuildPunchoutForContact";
  *(void *)(v13 + 8) = 23;
  *(unsigned char *)(v13 + 16) = 2;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (!v16)
  {
    id v17 = v14;
    UUID.init()();
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    OUTLINED_FUNCTION_19_16();
    OUTLINED_FUNCTION_23();
    v21();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v18, v20, v17, (SEL *)&selRef_setAceId_);
  }
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v22 = OUTLINED_FUNCTION_17_18();
  if (v23(v22))
  {
    if (v45)
    {
      v24._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_12_24(0xD000000000000012);
      String.append(_:)(v24);
      unint64_t v25 = v46;
      uint64_t v26 = (uint64_t)v42;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      OUTLINED_FUNCTION_5_37(v26);
      if (!v28)
      {
        URL._bridgeToObjectiveC()(v27);
        unint64_t v25 = v29;
        OUTLINED_FUNCTION_51();
        OUTLINED_FUNCTION_21_13();
        v30();
      }
LABEL_20:
      objc_msgSend(v14, sel_setPunchOutUri_, v25);

      goto LABEL_21;
    }
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(0xD00000000000001BLL, 0x800000022D5A6930, v14, (SEL *)&selRef_setBundleId_);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v1, v1[3]);
    uint64_t v31 = OUTLINED_FUNCTION_17_18();
    if (v32(v31))
    {
      uint64_t v33 = v45;
      if (v45)
      {
        uint64_t v34 = v41;
        if (one-time initialization token for phoneContactsTabURLQueryPrefix != -1) {
          swift_once();
        }
        v35._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_12_24(0xD00000000000001FLL);
        v35._object = v33;
        String.append(_:)(v35);
      }
      else
      {
        uint64_t v34 = v41;
      }
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = type metadata accessor for URL();
      unint64_t v25 = 0;
      if (__swift_getEnumTagSinglePayload(v34, 1, v36) != 1)
      {
        URL._bridgeToObjectiveC()(v37);
        unint64_t v25 = v38;
        OUTLINED_FUNCTION_51();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v34, v36);
      }
      goto LABEL_20;
    }
  }
LABEL_21:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_8();
}

void static AppUtil.buildPunchoutFor(string:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15_2();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_1_37();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_5_0();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v8 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v9 = v2 + *(int *)(v6 + 20);
  *(void *)uint64_t v9 = "BuildPunchoutForString";
  *(void *)(v9 + 8) = 22;
  *(unsigned char *)(v9 + 16) = 2;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12)
  {
    id v13 = v10;
    UUID.init()();
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    OUTLINED_FUNCTION_19_16();
    OUTLINED_FUNCTION_23();
    v17();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v14, v16, v13, (SEL *)&selRef_setAceId_);
  }
  URL.init(string:)();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_5_37(v0);
  if (!v19)
  {
    URL._bridgeToObjectiveC()(v18);
    uint64_t v1 = v20;
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_21_13();
    v21();
  }
  objc_msgSend(v10, sel_setPunchOutUri_, v1);

  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  OUTLINED_FUNCTION_8();
}

unint64_t static AppUtil.contactsAppID.getter()
{
  return OUTLINED_FUNCTION_13_26(27);
}

id AppUtil.buildSash()()
{
  uint64_t v1 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_11_24();
  uint64_t v4 = v0 + *(int *)(v1 + 20);
  *(void *)uint64_t v4 = "BuildSash";
  *(void *)(v4 + 8) = 9;
  *(unsigned char *)(v4 + 16) = 2;
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F65000]), sel_init);
  unint64_t v6 = AppUtil.sashBundleId.getter();
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v6, v7, v5, (SEL *)&selRef_setApplicationBundleIdentifier_);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_11_24();
  outlined destroy of Signpost.OpenSignpost(v0);
  return v5;
}

unint64_t AppUtil.sashBundleId.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2)) {
    return 0xD00000000000001BLL;
  }
  if (one-time initialization token for siriBundleID != -1) {
    swift_once();
  }
  uint64_t v3 = static String.siriBundleID;
  swift_bridgeObjectRetain();
  return v3;
}

void AppUtil.buildPunchoutFor(emailAddress:)()
{
  OUTLINED_FUNCTION_10();
  v29._uint64_t countAndFlagsBits = v2;
  v29._object = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  uint64_t v30 = v6;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = OUTLINED_FUNCTION_1_37();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v11 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v12 = v0 + *(int *)(v9 + 20);
  *(void *)uint64_t v12 = "BuildPunchoutForEmailAddress";
  *(void *)(v12 + 8) = 28;
  *(unsigned char *)(v12 + 16) = 2;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
    id v16 = v13;
    UUID.init()();
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    OUTLINED_FUNCTION_19_16();
    OUTLINED_FUNCTION_23();
    v20();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v17, v19, v16, (SEL *)&selRef_setAceId_);
  }
  uint64_t v21 = v1[3];
  uint64_t v22 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v21);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22))
  {
    if (one-time initialization token for emailURLPrefix != -1) {
      swift_once();
    }
    uint64_t v31 = *(void **)algn_26857AC78;
    swift_bridgeObjectRetain();
    String.append(_:)(v29);
    uint64_t v23 = v31;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    type metadata accessor for URL();
    OUTLINED_FUNCTION_5_37(v30);
    if (!v25)
    {
      URL._bridgeToObjectiveC()(v24);
      uint64_t v23 = v26;
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_21_13();
      v27();
    }
    objc_msgSend(v13, sel_setPunchOutUri_, v23, v28);
  }
  else
  {
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_8();
}

void AppUtil.buildPunchoutFor(labeledAddress:contact:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  id v85 = v3;
  uint64_t v86 = v2;
  uint64_t v89 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v81 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  uint64_t v80 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v79 = (char *)v9;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v76 - v11;
  uint64_t v87 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_0();
  uint64_t v84 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_4_4();
  uint64_t v78 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  char v77 = (char *)&v76 - v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  uint64_t v83 = (char *)&v76 - v19;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  os_log_t v82 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_15();
  uint64_t v26 = v25 - v24;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v27 = *(int *)(v22 + 20);
  uint64_t v88 = v26;
  uint64_t v28 = v26 + v27;
  *(void *)uint64_t v28 = "BuildPunchoutForPostalAddress";
  *(void *)(v28 + 8) = 29;
  *(unsigned char *)(v28 + 16) = 2;
  Swift::String v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v29);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  if (!v31)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v89, (uint64_t)static Logger.siriContacts);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_22D49E000, v32, v33, "#buildPunchoutFor address: Ace ID is nil, setting random UUID to punchout", v34, 2u);
      OUTLINED_FUNCTION_2();
    }

    Swift::String v35 = v29;
    UUID.init()();
    uint64_t v36 = UUID.uuidString.getter();
    uint64_t v38 = v37;
    OUTLINED_FUNCTION_23();
    v39();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v36, v38, v35, (SEL *)&selRef_setAceId_);
  }
  uint64_t v40 = v1[3];
  uint64_t v41 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v40);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41) & 1) == 0)
  {
    uint64_t v49 = v89;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v49, (uint64_t)static Logger.siriContacts);
    Swift::String v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      Swift::String v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v47 = 0;
      uint64_t v48 = "#buildPunchoutFor address: Maps is not installed, returning nil for punchout";
      goto LABEL_19;
    }
LABEL_20:
    Swift::String v50 = v45;
    Swift::String v45 = v29;
    goto LABEL_21;
  }
  CNLabeledValue<>.buildMapsURL(contact:)(v85, (uint64_t)v12);
  uint64_t v42 = v87;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v87);
  uint64_t v44 = v89;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v12);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
    Swift::String v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      Swift::String v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v47 = 0;
      uint64_t v48 = "#buildPunchoutFor address: failed to build Maps punchout URL, returning nil";
LABEL_19:
      _os_log_impl(&dword_22D49E000, v45, v46, v48, v47, 2u);
      OUTLINED_FUNCTION_2();
      Swift::String v50 = v29;
LABEL_21:

LABEL_22:
      static os_signpost_type_t.end.getter();
      uint64_t v51 = v88;
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v51);
      OUTLINED_FUNCTION_8();
      return;
    }
    goto LABEL_20;
  }
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
  v52(v83, v12, v42);
  URL._bridgeToObjectiveC()(v53);
  uint64_t v55 = v54;
  [v29 setPunchOutUri:v54];

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v56 = __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
  uint64_t v57 = v80;
  uint64_t v58 = v81;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v80, v56, v44);
  uint64_t v59 = v29;
  unint64_t v60 = Logger.logObject.getter();
  int v61 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v60, (os_log_type_t)v61))
  {

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v44);
    OUTLINED_FUNCTION_23();
    v75();
    goto LABEL_22;
  }
  LODWORD(v86) = v61;
  unint64_t v62 = (uint8_t *)swift_slowAlloc();
  id v85 = (void *)swift_slowAlloc();
  unint64_t v91 = v85;
  *(_DWORD *)unint64_t v62 = 136315138;
  id v63 = [v59 punchOutUri];
  if (v63)
  {
    uint64_t v64 = v63;
    os_log_t v82 = v60;
    uint64_t v65 = v78;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v66 = (uint64_t)v79;
    uint64_t v67 = v87;
    v52(v79, (char *)v65, v87);
    __swift_storeEnumTagSinglePayload(v66, 0, 1, v67);
    if (__swift_getEnumTagSinglePayload(v66, 1, v67) != 1)
    {
      uint64_t v78 = v62 + 4;
      uint64_t v68 = v77;
      v52(v77, (char *)v66, v67);
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v71 = v70;
      uint64_t v72 = *(void (**)(char *, uint64_t))(v84 + 8);
      v72(v68, v67);
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, (uint64_t *)&v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v73 = v82;
      _os_log_impl(&dword_22D49E000, v82, (os_log_type_t)v86, "#buildPunchoutFor address: punchout URI: %s", v62, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      OUTLINED_FUNCTION_23();
      v74();
      v72(v83, v67);
      goto LABEL_22;
    }
  }
  else
  {

    __swift_storeEnumTagSinglePayload((uint64_t)v79, 1, 1, v87);
  }
  __break(1u);
}

unint64_t static AppUtil.messagesAppID.getter()
{
  return OUTLINED_FUNCTION_13_26(19);
}

unint64_t static AppUtil.phoneAppID.getter()
{
  return OUTLINED_FUNCTION_13_26(21);
}

uint64_t static AppUtil.contactsApp.getter()
{
  return App.__allocating_init(appIdentifier:)();
}

void static AppUtil.buildMessagesPunchoutFor(handleString:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  void *v30;
  NSURL *v31;
  char v32;
  void *v33;
  void (*v34)(void);
  uint64_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;

  OUTLINED_FUNCTION_10();
  Swift::String v35 = v1;
  uint64_t v37 = v2;
  uint64_t v36 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  uint64_t v38 = v6;
  uint64_t v39 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = v11 - v10;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = OUTLINED_FUNCTION_1_37();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_5_0();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v16 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v17 = v0 + *(int *)(v14 + 20);
  *(void *)uint64_t v17 = "BuildPunchoutForPhoneNumber";
  *(void *)(v17 + 8) = 27;
  *(unsigned char *)(v17 + 16) = 2;
  uint64_t v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v18);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (!v20)
  {
    uint64_t v21 = v18;
    UUID.init()();
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    OUTLINED_FUNCTION_19_16();
    OUTLINED_FUNCTION_23();
    v25();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v22, v24, v21, (SEL *)&selRef_setAceId_);
  }
  static CharacterSet.urlPathAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v26 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v39);
  if (v28)
  {
    if (*v36 != -1) {
      swift_once();
    }
    uint64_t v40 = *v37;
    swift_bridgeObjectRetain();
    v29._uint64_t countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v40;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    type metadata accessor for URL();
    OUTLINED_FUNCTION_5_37(v38);
    if (!v32)
    {
      URL._bridgeToObjectiveC()(v31);
      uint64_t v30 = v33;
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_21_13();
      v34();
    }
    objc_msgSend(v18, sel_setPunchOutUri_, v30, v35);

    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v0);
    OUTLINED_FUNCTION_8();
  }
  else
  {
    __break(1u);
  }
}

void static AppUtil.buildPunchoutFor(phoneNumber:)()
{
}

Swift::Bool __swiftcall InstalledAppsProvider.isContactsAppInstalled()()
{
  return OUTLINED_FUNCTION_4_34(27, 0x800000022D5A6930);
}

Swift::Bool __swiftcall InstalledAppsProvider.isMapsAppInstalled()()
{
  if (one-time initialization token for MAPS_APP_ID_IOS != -1) {
    swift_once();
  }
  uint64_t v0 = static String.MAPS_APP_ID_IOS;
  uint64_t v1 = *(void *)algn_26857AC68;
  objc_allocWithZone(MEMORY[0x263F01878]);
  swift_bridgeObjectRetain();
  id v2 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v0, v1, 0);
  if (v2)
  {

    LOBYTE(v2) = 1;
  }
  return (char)v2;
}

uint64_t static AppUtil.mapsAppID.getter()
{
  if (one-time initialization token for MAPS_APP_ID_IOS != -1) {
    swift_once();
  }
  uint64_t v0 = static String.MAPS_APP_ID_IOS;
  swift_bridgeObjectRetain();
  return v0;
}

Swift::Bool __swiftcall InstalledAppsProvider.isMailAppInstalled()()
{
  return OUTLINED_FUNCTION_4_34(20, 0x800000022D5AA2B0);
}

unint64_t static AppUtil.mailAppID.getter()
{
  return OUTLINED_FUNCTION_13_26(20);
}

Swift::Bool __swiftcall InstalledAppsProvider.isPhoneAppInstalled()()
{
  return OUTLINED_FUNCTION_4_34(21, 0x800000022D5A8FD0);
}

uint64_t InstalledAppsProvider.isContactsAppInstalled()(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone(MEMORY[0x263F01878]);
  uint64_t result = (uint64_t)@nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

BOOL protocol witness for InstalledAppsProviding.isContactsAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isContactsAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isMapsAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isMapsAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isMailAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isMailAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isPhoneAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isPhoneAppInstalled()();
}

uint64_t static AppUtil.contactsAppCandidate.getter()
{
  type metadata accessor for ContactResolver.AppCandidateType();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F6D3B0]);
  return ContactResolver.AppCandidate.init(bundleId:type:)();
}

void one-time initialization function for phoneContactsTabURLQueryPrefix()
{
  static String.phoneContactsTabURLQueryPrefix = 0x3D64693F776F6873;
  *(void *)algn_26857AC38 = 0xE800000000000000;
}

void one-time initialization function for phoneURLPrefix()
{
  static String.phoneURLPrefix = 980182388;
  *(void *)algn_26857AC48 = 0xE400000000000000;
}

void one-time initialization function for messagesURLPrefix()
{
  static String.messagesURLPrefix = 980643187;
  *(void *)algn_26857AC58 = 0xE400000000000000;
}

void one-time initialization function for MAPS_APP_ID_IOS()
{
  algn_26857AC68[7] = -18;
}

void one-time initialization function for emailURLPrefix()
{
  static String.emailURLPrefix = 0x3A6F746C69616DLL;
  *(void *)algn_26857AC78 = 0xE700000000000000;
}

void one-time initialization function for iosSiriSettings()
{
  static String.iosSiriSettings = 0x6F723A7366657270;
  *(void *)algn_26857AC88 = 0xEF495249533D746FLL;
}

void one-time initialization function for siriBundleID()
{
  algn_26857AC98[7] = -18;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t dispatch thunk of InstalledAppsProviding.isContactsAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isMapsAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isMailAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isPhoneAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for InstalledAppsProvider()
{
  return &type metadata for InstalledAppsProvider;
}

uint64_t initializeWithCopy for AppUtil(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AppUtil(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppUtil(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppUtil(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppUtil(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppUtil()
{
  return &type metadata for AppUtil;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_37()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_4_34(uint64_t a1, uint64_t a2)
{
  return InstalledAppsProvider.isContactsAppInstalled()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

uint64_t OUTLINED_FUNCTION_5_37(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_11_24()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_12_24@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = (v1 - 32) | 0x8000000000000000;
  return *(void *)(v2 - 112);
}

unint64_t OUTLINED_FUNCTION_13_26(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_17_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_16()
{
  return v0;
}

void RREntity.isFromContactSource.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_10();
  a19 = v20;
  a20 = v21;
  uint64_t v22 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v24 = v23;
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&a9 - v29;
  if (RREntity.appBundleId.getter() == 0x73746361746E6F43 && v31 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v33 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_8_26();
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = *(void (**)(void))(v24 + 16);
  OUTLINED_FUNCTION_37_14();
  v34();
  if (v33) {
    goto LABEL_11;
  }
  if (RREntity.appBundleId.getter() == 0xD00000000000001BLL && v35 == 0x800000022D5A6930)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    char v36 = 1;
    goto LABEL_13;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v37 = *(void (**)(char *, uint64_t))(v24 + 8);
  v37(v30, v22);
  OUTLINED_FUNCTION_37_14();
  v34();
  if ((v36 & 1) == 0)
  {
    if (RREntity.appBundleId.getter() == 0xD000000000000015 && v38 == 0x800000022D5A8FD0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  v37(v28, v22);
  OUTLINED_FUNCTION_8();
}

void static RREntity.makeEntityList(for:)()
{
  OUTLINED_FUNCTION_10();
  id v120 = v1;
  uint64_t v2 = type metadata accessor for GroupIdentifier();
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_25();
  uint64_t v111 = v5;
  MEMORY[0x270FA5388](v6);
  os_log_type_t v103 = (char *)v96 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_25();
  uint64_t v110 = v11;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v96 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v96 - v16;
  uint64_t v18 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v99 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v26);
  uint64_t v98 = (char *)v96 - v27;
  uint64_t v28 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v30 = v29;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_18_17();
  unint64_t v112 = UUID.uuidString.getter();
  uint64_t v32 = *(void (**)(uint64_t))(v30 + 8);
  uint64_t v33 = OUTLINED_FUNCTION_31_10();
  v32(v33);
  UUID.init()();
  uint64_t v109 = UUID.uuidString.getter();
  unint64_t v117 = v34;
  uint64_t v35 = OUTLINED_FUNCTION_31_10();
  v32(v35);
  UUID.init()();
  uint64_t v36 = UUID.uuidString.getter();
  uint64_t v38 = v37;
  ((void (*)(uint64_t, uint64_t))v32)(v0, v28);
  uint64_t v122 = MEMORY[0x263F8EE78];
  id v39 = v120;
  RREntity.init(from:)(v39);
  id v97 = v39;
  uint64_t v107 = v36;
  id v120 = v38;
  OUTLINED_FUNCTION_16_3((uint64_t)v17);
  uint64_t v40 = v99;
  uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  uint64_t v119 = v99 + 32;
  v118(v98, v17, v18);
  uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v43 = *(void *)(v41 + 16);
  unint64_t v42 = *(void *)(v41 + 24);
  if (v43 >= v42 >> 1) {
    uint64_t v41 = OUTLINED_FUNCTION_21_14(v42);
  }
  uint64_t v44 = v102;
  uint64_t v45 = v101;
  *(void *)(v41 + 16) = v43 + 1;
  os_log_type_t v46 = *(void (**)(void, void, void))(v40 + 16);
  unint64_t v114 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v113 = *(void *)(v40 + 72);
  uint64_t v115 = v46;
  uint64_t v116 = v40 + 16;
  v46(v41 + v114 + v113 * v43, v98, v18);
  uint64_t v122 = v41;
  id v47 = objc_msgSend(v97, sel_postalAddresses);
  v96[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v50 = (uint64_t)v103;
  unint64_t v108 = v48;
  if (v49)
  {
    if (v49 < 1)
    {
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v51 = 0;
    unint64_t v106 = v48 & 0xC000000000000001;
    OUTLINED_FUNCTION_19_17();
    uint64_t v100 = v52;
    do
    {
      if (v106) {
        id v53 = (id)MEMORY[0x230F854E0](v51, v108);
      }
      else {
        id v53 = *(id *)(v108 + 8 * v51 + 32);
      }
      id v54 = v53;
      swift_bridgeObjectRetain();
      GroupIdentifier.init(id:seq:)();
      RREntity.init(from:groupId:)(v54, v50, (uint64_t)v15);
      OUTLINED_FUNCTION_16_3((uint64_t)v15);
      OUTLINED_FUNCTION_1_38();
      v55();
      OUTLINED_FUNCTION_14_22();
      v56();
      if ((OUTLINED_FUNCTION_36_10() & 1) == 0) {
        uint64_t v45 = OUTLINED_FUNCTION_4_35();
      }
      unint64_t v58 = *(void *)(v45 + 16);
      unint64_t v57 = *(void *)(v45 + 24);
      if (v58 >= v57 >> 1) {
        uint64_t v45 = OUTLINED_FUNCTION_8_28(v57);
      }
      *(void *)(v45 + 16) = v58 + 1;
      uint64_t v44 = v102;
      OUTLINED_FUNCTION_1_38();
      v59();

      uint64_t v122 = v45;
      OUTLINED_FUNCTION_33_10();
      uint64_t v45 = v101;
      OUTLINED_FUNCTION_13_27();
      v60();
      uint64_t v50 = (uint64_t)v103;
      ++v51;
    }
    while (v49 != v51);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(v97, sel_phoneNumbers);
  unint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v62 >> 62)
  {
    OUTLINED_FUNCTION_32_13();
    uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  OUTLINED_FUNCTION_15_21();
  if (!v63) {
    goto LABEL_29;
  }
  if (v63 < 1)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v64 = 0;
  unint64_t v112 = v62 & 0xC000000000000001;
  OUTLINED_FUNCTION_19_17();
  unint64_t v106 = v65;
  unint64_t v108 = v62;
  do
  {
    if (v112) {
      id v66 = (id)MEMORY[0x230F854E0](v64, v62);
    }
    else {
      id v66 = *(id *)(v62 + 8 * v64 + 32);
    }
    id v67 = v66;
    swift_bridgeObjectRetain();
    uint64_t v68 = v111;
    GroupIdentifier.init(id:seq:)();
    uint64_t v69 = v110;
    RREntity.init(from:groupId:)(v67, v68, v110);
    OUTLINED_FUNCTION_16_3(v69);
    OUTLINED_FUNCTION_1_38();
    v70();
    OUTLINED_FUNCTION_14_22();
    v71();
    if ((OUTLINED_FUNCTION_36_10() & 1) == 0) {
      uint64_t v45 = OUTLINED_FUNCTION_4_35();
    }
    unint64_t v62 = v108;
    unint64_t v73 = *(void *)(v45 + 16);
    unint64_t v72 = *(void *)(v45 + 24);
    uint64_t v44 = v73 + 1;
    if (v73 >= v72 >> 1) {
      uint64_t v45 = OUTLINED_FUNCTION_8_28(v72);
    }
    OUTLINED_FUNCTION_35_12();
    OUTLINED_FUNCTION_1_38();
    v74();

    uint64_t v122 = v45;
    OUTLINED_FUNCTION_33_10();
    OUTLINED_FUNCTION_13_27();
    v75();
    OUTLINED_FUNCTION_15_21();
    ++v64;
  }
  while (v63 != v64);
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v76 = objc_msgSend(v97, sel_emailAddresses);
  unint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v77 >> 62)
  {
    OUTLINED_FUNCTION_32_13();
    uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v78)
    {
LABEL_31:
      if (v78 >= 1)
      {
        uint64_t v79 = 0;
        unint64_t v117 = v77 & 0xC000000000000001;
        OUTLINED_FUNCTION_19_17();
        unint64_t v112 = v80;
        unint64_t v81 = v77;
        do
        {
          if (v117) {
            id v82 = (id)MEMORY[0x230F854E0](v79, v77);
          }
          else {
            id v82 = *(id *)(v77 + 8 * v79 + 32);
          }
          id v83 = v82;
          swift_bridgeObjectRetain();
          GroupIdentifier.init(id:seq:)();
          RREntity.init(from:groupId:)(v83, v45, v44);
          OUTLINED_FUNCTION_16_3(v44);
          OUTLINED_FUNCTION_1_38();
          v84();
          OUTLINED_FUNCTION_14_22();
          v85();
          if ((OUTLINED_FUNCTION_36_10() & 1) == 0) {
            uint64_t v45 = OUTLINED_FUNCTION_4_35();
          }
          unint64_t v77 = v81;
          unint64_t v86 = *(void *)(v45 + 24);
          if (*(void *)(v45 + 16) >= v86 >> 1) {
            uint64_t v45 = OUTLINED_FUNCTION_8_28(v86);
          }
          OUTLINED_FUNCTION_35_12();
          OUTLINED_FUNCTION_1_38();
          v87();

          uint64_t v122 = v45;
          OUTLINED_FUNCTION_13_27();
          v88();
          uint64_t v45 = v105;
          uint64_t v44 = v104;
          ++v79;
        }
        while (v78 != v79);
        goto LABEL_45;
      }
LABEL_52:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v78) {
      goto LABEL_31;
    }
  }
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v18);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v89 = type metadata accessor for Logger();
  __swift_project_value_buffer(v89, (uint64_t)static Logger.siriContacts);
  uint64_t v90 = (void *)Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_24_15(v91))
  {
    OUTLINED_FUNCTION_22_16();
    uint64_t v121 = OUTLINED_FUNCTION_20_17();
    OUTLINED_FUNCTION_3_32(4.8149e-34);
    uint64_t v92 = swift_bridgeObjectRetain();
    MEMORY[0x230F85100](v92, v18);
    OUTLINED_FUNCTION_27_14();
    uint64_t v93 = OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_5_38(v93);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_25(&dword_22D49E000, v94, v95, "#RREntity.makeEntityList returning entities: %s");
    OUTLINED_FUNCTION_28_13();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_8();
}

void static RREntity.makeDisambiguationGroup(for:with:)()
{
  OUTLINED_FUNCTION_10();
  unint64_t v2 = v1;
  id v53 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  uint64_t v46 = v6;
  uint64_t v7 = type metadata accessor for GroupIdentifier();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v13 = OUTLINED_FUNCTION_10_0(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = v15 - v14;
  uint64_t v54 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v47 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_4();
  uint64_t v52 = v19;
  uint64_t v20 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_18_17();
  UUID.uuidString.getter();
  uint64_t v45 = v0;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v44(v0, v20);
  uint64_t v55 = MEMORY[0x263F8EE78];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    if (!v24) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v24) {
      goto LABEL_20;
    }
  }
  type metadata accessor for UsoEntity();
  if (v24 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v25 = 0;
  unint64_t v49 = v2 & 0xC000000000000001;
  unint64_t v48 = v2;
  uint64_t v50 = v24;
  uint64_t v51 = v16;
  do
  {
    if (v49) {
      id v26 = (id)MEMORY[0x230F854E0](v25, v2);
    }
    else {
      id v26 = *(id *)(v2 + 8 * v25 + 32);
    }
    uint64_t v27 = v26;
    id v28 = v53;
    id v29 = v27;
    swift_bridgeObjectRetain();
    GroupIdentifier.init(id:seq:)();
    static UsoEntity.from(_:_:)(v28, v29);
    outlined bridged method (ob) of @objc INObject.identifier.getter(v29);
    if (!v30)
    {
      UUID.init()();
      UUID.uuidString.getter();
      v44(v45, v20);
    }
    OUTLINED_FUNCTION_33_10();
    v31(v46, v11, v7);
    __swift_storeEnumTagSinglePayload(v46, 0, 1, v7);
    OUTLINED_FUNCTION_8_26();
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

    unint64_t v2 = v48;
    OUTLINED_FUNCTION_13_27();
    v32();
    __swift_storeEnumTagSinglePayload(v51, 0, 1, v54);
    if (__swift_getEnumTagSinglePayload(v51, 1, v54) == 1)
    {

      outlined destroy of RREntity?(v51);
    }
    else
    {
      OUTLINED_FUNCTION_33_10();
      v33(v52, v51, v54);
      uint64_t v34 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1, v55);
      }
      unint64_t v36 = *(void *)(v34 + 16);
      unint64_t v35 = *(void *)(v34 + 24);
      if (v36 >= v35 >> 1) {
        uint64_t v34 = OUTLINED_FUNCTION_21_14(v35);
      }
      *(void *)(v34 + 16) = v36 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 16))(v34+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v36, v52, v54);

      uint64_t v55 = v34;
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v52, v54);
      unint64_t v2 = v48;
    }
    ++v25;
  }
  while (v50 != v25);
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.siriContacts);
  uint64_t v38 = (void *)Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_24_15(v39))
  {
    OUTLINED_FUNCTION_22_16();
    OUTLINED_FUNCTION_20_17();
    OUTLINED_FUNCTION_3_32(4.8149e-34);
    uint64_t v40 = swift_bridgeObjectRetain();
    MEMORY[0x230F85100](v40, v54);
    OUTLINED_FUNCTION_27_14();
    uint64_t v41 = OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_5_38(v41);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_25(&dword_22D49E000, v42, v43, "#RREntity.makeDisambiguationGroup returning entities: %s");
    OUTLINED_FUNCTION_28_13();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_8();
}

void static RREntity.makeDisambiguationGroup(with:)()
{
  OUTLINED_FUNCTION_10();
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GroupIdentifier();
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v47 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_4_4();
  uint64_t v50 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v42 - v17;
  uint64_t v19 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_15();
  uint64_t v25 = v24 - v23;
  UUID.init()();
  uint64_t v48 = UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v19);
  unint64_t v54 = MEMORY[0x263F8EE78];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v26 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v26)
  {
    if (v26 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v27 = 0;
    unint64_t v51 = v1 & 0xC000000000000001;
    uint64_t v52 = v26;
    unint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v47 + 32);
    v42[1] = v47 + 8;
    uint64_t v43 = (void (**)(uint64_t, char *, uint64_t))(v47 + 16);
    uint64_t v45 = v6;
    unint64_t v46 = v1;
    uint64_t v44 = v18;
    do
    {
      if (v51) {
        id v28 = (id)MEMORY[0x230F854E0](v27, v1);
      }
      else {
        id v28 = *(id *)(v1 + 8 * v27 + 32);
      }
      id v29 = v28;
      swift_bridgeObjectRetain();
      GroupIdentifier.init(id:seq:)();
      RREntity.init(from:groupId:)(v29, v6, v11);
      OUTLINED_FUNCTION_16_3(v11);
      uint64_t v30 = *v49;
      (*v49)(v18, v11, v12);
      (*v43)(v50, v18, v12);
      if ((OUTLINED_FUNCTION_36_10() & 1) == 0) {
        unint64_t v1 = OUTLINED_FUNCTION_4_35();
      }
      unint64_t v32 = *(void *)(v1 + 16);
      unint64_t v31 = *(void *)(v1 + 24);
      if (v32 >= v31 >> 1) {
        unint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v1);
      }
      *(void *)(v1 + 16) = v32 + 1;
      uint64_t v33 = v47;
      v30((char *)(v1+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v47 + 72) * v32), v50, v12);

      unint64_t v54 = v1;
      uint64_t v34 = *(void (**)(char *, uint64_t))(v33 + 8);
      uint64_t v18 = v44;
      v34(v44, v12);
      uint64_t v6 = v45;
      unint64_t v1 = v46;
      ++v27;
    }
    while (v52 != v27);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.siriContacts);
  unint64_t v36 = (void *)Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_24_15(v37))
  {
    OUTLINED_FUNCTION_22_16();
    uint64_t v53 = OUTLINED_FUNCTION_20_17();
    OUTLINED_FUNCTION_3_32(4.8149e-34);
    uint64_t v38 = swift_bridgeObjectRetain();
    MEMORY[0x230F85100](v38, v12);
    OUTLINED_FUNCTION_27_14();
    uint64_t v39 = OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_5_38(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_25(&dword_22D49E000, v40, v41, "#RREntity.makeDisambiguationGroup returning entities: %s");
    OUTLINED_FUNCTION_28_13();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_8();
}

uint64_t RREntity.init(from:groupId:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:_:)(a1, 0);
  if (v3)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    uint64_t v12 = v11;
    type metadata accessor for CNContact();
    *uint64_t v12 = _typeName(_:qualified:)();
    v12[1] = v13;
    v12[2] = 0xD000000000000017;
    v12[3] = 0x800000022D5AA490;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    uint64_t v14 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
  }
  else
  {
    uint64_t v16 = type metadata accessor for GroupIdentifier();
    uint64_t v17 = *(void *)(v16 - 8);
    v20[1] = a3;
    uint64_t v18 = a2;
    uint64_t v19 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, v18, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v16);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v16);
  }
}

{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[2];
  uint64_t v23;

  uint64_t v23 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UsoIdentifier();
  id v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *uint64_t v14 = _typeName(_:qualified:)();
    v14[1] = v15;
    v14[2] = 0xD00000000000001ELL;
    v14[3] = 0x800000022D5AA450;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    uint64_t v16 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v23, v16);
  }
  else
  {
    v22[1] = a3;
    unint64_t result = UsoEntity.usoIdentifiers.getter();
    if (*(void *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      uint64_t v18 = v23;
      v22[0] = v19;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v20 = type metadata accessor for GroupIdentifier();
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v18, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[2];
  uint64_t v23;

  uint64_t v23 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UsoIdentifier();
  id v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *uint64_t v14 = _typeName(_:qualified:)();
    v14[1] = v15;
    v14[2] = 0xD00000000000001CLL;
    v14[3] = 0x800000022D5AA410;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    uint64_t v16 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v23, v16);
  }
  else
  {
    v22[1] = a3;
    unint64_t result = UsoEntity.usoIdentifiers.getter();
    if (*(void *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      uint64_t v18 = v23;
      v22[0] = v19;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v20 = type metadata accessor for GroupIdentifier();
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v18, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[4];

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = type metadata accessor for UsoIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *uint64_t v15 = _typeName(_:qualified:)();
    v15[1] = v16;
    v15[2] = 0xD00000000000001DLL;
    v15[3] = 0x800000022D5AA3D0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    uint64_t v17 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
  else
  {
    v22[3] = a3;
    unint64_t result = UsoEntity.usoIdentifiers.getter();
    if (*(void *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, result + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      v22[1] = v19;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v20 = type metadata accessor for GroupIdentifier();
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v9, a2, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a2, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void RREntity.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:_:)(a1, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    uint64_t v8 = v7;
    type metadata accessor for CNContact();
    *uint64_t v8 = _typeName(_:qualified:)();
    v8[1] = v9;
    v8[2] = 0xD000000000000017;
    v8[3] = 0x800000022D5AA490;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    uint64_t v10 = type metadata accessor for GroupIdentifier();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v10);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
  }
}

uint64_t outlined destroy of RREntity?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_32(float a1)
{
  *unint64_t v1 = a1;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_35()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

uint64_t OUTLINED_FUNCTION_5_38(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_8_28@<X0>(unint64_t a1@<X8>)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_10_28()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_11_25(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_20_17()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_21_14@<X0>(unint64_t a1@<X8>)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_22_16()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_24_15(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_25_16(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_27_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_28_13()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_13()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_35_12()
{
  *(void *)(v0 + 16) = v1;
  return v0 + *(void *)(v3 - 216) + v2 * *(void *)(v3 - 224);
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t ContactsEmailHandle.Builder.withEmailLabel(print:speak:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_3();
  uint64_t v5 = v3 - v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v12 - v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v9 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v9);
  outlined init with take of SpeakableString?((uint64_t)v8, v5);
  uint64_t v10 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v5, v10);
  swift_endAccess();
  return swift_retain();
}

uint64_t ContactsEmailHandle.Builder.__deallocating_deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle);
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

unint64_t static ContactsEmailHandle.catTypeName.getter()
{
  return 0xD000000000000014;
}

uint64_t ContactsEmailHandle.init(builder:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  *(void *)(v1 + 16) = 0;
  uint64_t v8 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v8, v7);
  outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
  uint64_t v9 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v9, v7);
  swift_release();
  outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
  return v1;
}

uint64_t ContactsEmailHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_11_3();
  uint64_t v11 = v9 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - v13;
  BOOL v15 = a1 == 0x62614C6C69616D65 && a2 == 0xEA00000000006C65;
  if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel, (uint64_t)v14);
    uint64_t v16 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16) != 1)
    {
      *(void *)(a3 + 24) = v16;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(boxed_opaque_existential_1, v14, v16);
    }
    uint64_t v17 = (uint64_t)v14;
    goto LABEL_16;
  }
  if (a1 != 0x6E61486C69616D65 || a2 != 0xEB00000000656C64)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      goto LABEL_17;
    }
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle, v11);
  uint64_t v21 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v11, 1, v21) == 1)
  {
    uint64_t v17 = v11;
LABEL_16:
    uint64_t result = outlined destroy of SpeakableString?(v17);
LABEL_17:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(void *)(a3 + 24) = v21;
  uint64_t v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v22, v11, v21);
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional __swiftcall ContactsEmailHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsEmailHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.SiriContactsIntents::GetContactAttributeSlots value = SiriContactsIntents_ContactsEmailHandle_CodingKeys_emailHandle;
  }
  else {
    v4.SiriContactsIntents::GetContactAttributeSlots value = SiriContactsIntents_ContactsEmailHandle_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ContactsEmailHandle.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E61486C69616D65;
  }
  else {
    return 0x62614C6C69616D65;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsEmailHandle.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsEmailHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsEmailHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsEmailHandle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsEmailHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::GetContactAttributeSlots value = ContactsEmailHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::GetContactAttributeSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsEmailHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsEmailHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsEmailHandle.CodingKeys()
{
  return ContactsEmailHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsEmailHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::GetContactAttributeSlots value = ContactsEmailHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->SiriContactsIntents::GetContactAttributeSlots value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsEmailHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsEmailHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsEmailHandle.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
  return v0;
}

uint64_t ContactsEmailHandle.__deallocating_deinit()
{
  ContactsEmailHandle.deinit();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t ObjC metadata update function for ContactsEmailHandle()
{
  return type metadata accessor for ContactsEmailHandle(0);
}

uint64_t type metadata accessor for ContactsEmailHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsEmailHandle);
}

void type metadata completion function for ContactsEmailHandle()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsEmailHandle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsEmailHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type ContactsEmailHandle and conformance ContactsEmailHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  OUTLINED_FUNCTION_5_19();
  if (!v1) {
    OUTLINED_FUNCTION_5_19();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t ContactsEmailHandle.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsEmailHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsEmailHandle.Builder()
{
  return type metadata accessor for ContactsEmailHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsEmailHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsEmailHandle.Builder);
}

uint64_t ContactsEmailHandle.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_11_3();
  uint64_t v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v22 - v11;
  v22[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsEmailHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  *(void *)(v3 + 16) = 0;
  uint64_t v16 = a1[3];
  uint64_t v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v17 = (uint64_t)v23;

    type metadata accessor for ContactsEmailHandle(0);
    swift_deallocPartialClassInstance();
    uint64_t v21 = v17;
  }
  else
  {
    v22[1] = v14;
    type metadata accessor for SpeakableString();
    char v25 = 0;
    lazy protocol witness table accessor for type ContactsEmailHandle and conformance ContactsEmailHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    OUTLINED_FUNCTION_2_24();
    outlined init with take of SpeakableString?((uint64_t)v12, v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
    char v24 = 1;
    OUTLINED_FUNCTION_2_24();
    uint64_t v19 = OUTLINED_FUNCTION_6_21();
    v20(v19);
    outlined init with take of SpeakableString?(v9, v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
    uint64_t v21 = (uint64_t)v23;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsEmailHandle()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsEmailHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsEmailHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsEmailHandle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsEmailHandle.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsEmailHandle(void *a1)
{
  return ContactsEmailHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsEmailHandle()
{
  return lazy protocol witness table accessor for type ContactsEmailHandle and conformance ContactsEmailHandle(&lazy protocol witness table cache variable for type ContactsEmailHandle and conformance ContactsEmailHandle, (void (*)(uint64_t))type metadata accessor for ContactsEmailHandle);
}

uint64_t base witness table accessor for Encodable in ContactsEmailHandle()
{
  return lazy protocol witness table accessor for type ContactsEmailHandle and conformance ContactsEmailHandle(&lazy protocol witness table cache variable for type ContactsEmailHandle and conformance ContactsEmailHandle, (void (*)(uint64_t))type metadata accessor for ContactsEmailHandle);
}

uint64_t lazy protocol witness table accessor for type ContactsEmailHandle and conformance ContactsEmailHandle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactsEmailHandle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D56D7BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactsEmailHandle.CodingKeys()
{
  return &type metadata for ContactsEmailHandle.CodingKeys;
}

uint64_t type metadata accessor for ContactsCommonCATsModern()
{
  uint64_t result = type metadata singleton initialization cache for ContactsCommonCATsModern;
  if (!type metadata singleton initialization cache for ContactsCommonCATsModern) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactsCommonCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsCommonCATsModern.cancellationAcknowledgement()()
{
  unsigned int v4 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D0C8]
                                                                           + MEMORY[0x263F6D0C8]);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = ContactsCommonCATsModern.cancellationAcknowledgement();
  uint64_t v2 = MEMORY[0x263F8EE78];
  return v4(0xD00000000000002ALL, 0x800000022D5AA5A0, v2);
}

uint64_t ContactsCommonCATsModern.cancellationAcknowledgement()(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t ContactsCommonCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ContactsCommonCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsCommonCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_15();
  outlined init with copy of URL?(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v14 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v14;
}

uint64_t ContactsCommonCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t ObjC metadata update function for ContactsCommonCATsModern()
{
  return type metadata accessor for ContactsCommonCATsModern();
}

uint64_t type metadata accessor for GetContactAttributeCATsModern()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeCATsModern;
  if (!type metadata singleton initialization cache for GetContactAttributeCATsModern) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactAttributeCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_13_28(v3, v4, v5, v2, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v8);
  v1[7] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *char v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

uint64_t GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_40_12();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_28_14(v16);
  OUTLINED_FUNCTION_2_13(v17, (__n128)xmmword_22D5A07E0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsAddressHandle]);
  uint64_t v19 = OUTLINED_FUNCTION_35_13(v18);
  uint64_t v20 = OUTLINED_FUNCTION_1_39(v19, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v22);
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v24();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v25 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v14 + 200) = 0;
    *(void *)(v14 + 208) = 0;
  }
  OUTLINED_FUNCTION_15_22(v25);
  OUTLINED_FUNCTION_6_32(v26);
  OUTLINED_FUNCTION_20_18();
  uint64_t v27 = swift_task_alloc();
  id v28 = (void *)OUTLINED_FUNCTION_33_11(v27);
  *id v28 = v29;
  v28[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v15 + 21);
  OUTLINED_FUNCTION_22_17();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_13_28(v3, v4, v5, v2, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v8);
  v1[7] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *char v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_11();
  return v0();
}

uint64_t GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_40_12();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_28_14(v16);
  OUTLINED_FUNCTION_2_13(v17, (__n128)xmmword_22D5A07E0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsEmailHandle]);
  uint64_t v19 = OUTLINED_FUNCTION_35_13(v18);
  uint64_t v20 = OUTLINED_FUNCTION_1_39(v19, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v22);
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v24();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v25 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v14 + 200) = 0;
    *(void *)(v14 + 208) = 0;
  }
  OUTLINED_FUNCTION_15_22(v25);
  OUTLINED_FUNCTION_6_32(v26);
  OUTLINED_FUNCTION_20_18();
  uint64_t v27 = swift_task_alloc();
  id v28 = (void *)OUTLINED_FUNCTION_33_11(v27);
  *id v28 = v29;
  v28[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v15 + 19);
  OUTLINED_FUNCTION_22_17();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t GetContactAttributeCATsModern.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_13_28(v3, v4, v5, v2, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v8);
  v1[7] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t GetContactAttributeCATsModern.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_40_12();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_28_14(v16);
  OUTLINED_FUNCTION_2_13(v17, (__n128)xmmword_22D5A07E0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsPhoneHandle]);
  uint64_t v19 = OUTLINED_FUNCTION_35_13(v18);
  uint64_t v20 = OUTLINED_FUNCTION_1_39(v19, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v22);
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v24();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v25 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v14 + 200) = 0;
    *(void *)(v14 + 208) = 0;
  }
  OUTLINED_FUNCTION_15_22(v25);
  OUTLINED_FUNCTION_6_32(v26);
  OUTLINED_FUNCTION_20_18();
  uint64_t v27 = swift_task_alloc();
  id v28 = (void *)OUTLINED_FUNCTION_33_11(v27);
  *id v28 = v29;
  v28[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v15 + 19);
  OUTLINED_FUNCTION_22_17();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 90) = v3;
  OUTLINED_FUNCTION_13_28(v4, v5, v6, v2, v7, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v9);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_28_14(v16);
  OUTLINED_FUNCTION_2_13(v17, (__n128)xmmword_22D5A07F0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsAddressHandle]);
  uint64_t v19 = OUTLINED_FUNCTION_35_13(v18);
  uint64_t v20 = OUTLINED_FUNCTION_1_39(v19, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v22);
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v24();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v25 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v14 + 200) = 0;
    *(void *)(v14 + 208) = 0;
  }
  OUTLINED_FUNCTION_24_16(v25);
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_30_10(v26);
  uint64_t v27 = swift_task_alloc();
  id v28 = (void *)OUTLINED_FUNCTION_33_11(v27);
  *id v28 = v29;
  v28[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v15 + 26);
  OUTLINED_FUNCTION_22_17();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 72) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:));
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 48) = v2;
  OUTLINED_FUNCTION_4_12(v2, (__n128)xmmword_22D5A01D0);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for DialogCalendar();
    unint64_t v4 = v1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_44_8();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  unint64_t v5 = *(void *)(v0 + 24);
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  v2[5].n128_u64[0] = 0x6F666E49656761;
  v2[5].n128_u64[1] = 0xE700000000000000;
  if (v5)
  {
    type metadata accessor for ContactsAgeInfo();
    unint64_t v6 = v5;
  }
  else
  {
    OUTLINED_FUNCTION_44_8();
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  unint64_t v7 = *(void *)(v0 + 32);
  v2[6].n128_u64[0] = v6;
  OUTLINED_FUNCTION_17_5();
  v2[7].n128_u64[1] = v8;
  v2[8].n128_u64[0] = v9;
  v2[8].n128_u64[1] = 0xE700000000000000;
  uint64_t v10 = 0;
  if (v7)
  {
    uint64_t v10 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  unsigned __int8 v11 = *(unsigned char *)(v0 + 72);
  v2[9].n128_u64[0] = v7;
  v2[10].n128_u64[1] = v10;
  v2[11].n128_u64[0] = 1699574633;
  v2[11].n128_u64[1] = 0xE400000000000000;
  v2[13].n128_u64[1] = MEMORY[0x263F8D4F8];
  v2[12].n128_u8[0] = v11;
  OUTLINED_FUNCTION_20_18();
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v12;
  *uint64_t v12 = v0;
  v12[1] = GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:);
  OUTLINED_FUNCTION_26_10();
  return v14(0xD000000000000028);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:));
}

uint64_t GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 40) = v2;
  OUTLINED_FUNCTION_4_12(v2, (__n128)xmmword_22D59FD40);
  if (v1)
  {
    type metadata accessor for DialogCalendar();
    unint64_t v3 = v1;
  }
  else
  {
    OUTLINED_FUNCTION_44_8();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  unint64_t v4 = *(void *)(v0 + 24);
  v2[3].n128_u64[0] = v3;
  OUTLINED_FUNCTION_17_5();
  v2[4].n128_u64[1] = v5;
  v2[5].n128_u64[0] = v6;
  v2[5].n128_u64[1] = 0xE700000000000000;
  uint64_t v7 = 0;
  if (v4)
  {
    uint64_t v7 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  unsigned __int8 v8 = *(unsigned char *)(v0 + 64);
  v2[6].n128_u64[0] = v4;
  v2[7].n128_u64[1] = v7;
  v2[8].n128_u64[0] = 1699574633;
  v2[8].n128_u64[1] = 0xE400000000000000;
  v2[10].n128_u64[1] = MEMORY[0x263F8D4F8];
  v2[9].n128_u8[0] = v8;
  OUTLINED_FUNCTION_43_9();
  swift_retain();
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v9;
  void *v9 = v0;
  v9[1] = GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:);
  OUTLINED_FUNCTION_26_10();
  return v11(0xD00000000000002DLL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  unint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    return v11(v10);
  }
}

uint64_t GetContactAttributeCATsModern.intentHandledShowCompany(isMe:companyName:contact:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 72) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v15)(unint64_t);
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned char *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v4 = swift_allocObject();
  *(void *)(v0 + 48) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D59FD40;
  *(void *)(v4 + 32) = 1699574633;
  *(void *)(v4 + 40) = 0xE400000000000000;
  uint64_t v5 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v4 + 48) = v3;
  uint64_t v6 = (uint64_t *)(v4 + 96);
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = 0x4E796E61706D6F63;
  *(void *)(v4 + 88) = 0xEB00000000656D61;
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_41_8(v7) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
  }
  else
  {
    *(void *)(v4 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v6);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v8 + 32))();
  }
  unint64_t v9 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_0_7();
  *(void *)(v4 + 128) = v10;
  *(void *)(v4 + 136) = v11;
  uint64_t v12 = 0;
  if (v9)
  {
    uint64_t v12 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v4 + 152) = 0;
    *(void *)(v4 + 160) = 0;
  }
  *(void *)(v4 + 144) = v9;
  *(void *)(v4 + 168) = v12;
  OUTLINED_FUNCTION_43_9();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v13;
  *uint64_t v13 = v0;
  v13[1] = GetContactAttributeCATsModern.intentHandledShowCompany(isMe:companyName:contact:);
  OUTLINED_FUNCTION_26_10();
  return v15(0xD00000000000002CLL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

uint64_t GetContactAttributeCATsModern.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 90) = v3;
  OUTLINED_FUNCTION_13_28(v4, v5, v6, v2, v7, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v9);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_28_14(v16);
  OUTLINED_FUNCTION_2_13(v17, (__n128)xmmword_22D5A07F0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsEmailHandle]);
  uint64_t v19 = OUTLINED_FUNCTION_35_13(v18);
  uint64_t v20 = OUTLINED_FUNCTION_1_39(v19, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v22);
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v24();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v25 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v14 + 200) = 0;
    *(void *)(v14 + 208) = 0;
  }
  OUTLINED_FUNCTION_24_16(v25);
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_30_10(v26);
  uint64_t v27 = swift_task_alloc();
  id v28 = (void *)OUTLINED_FUNCTION_33_11(v27);
  *id v28 = v29;
  v28[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v15 + 24);
  OUTLINED_FUNCTION_22_17();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 82) = v3;
  *(void *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 81) = v5;
  *(unsigned char *)(v1 + 80) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v7);
  *(void *)(v1 + 40) = swift_task_alloc();
  *(void *)(v1 + 48) = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t (*v20)(unint64_t);
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 81);
  uint64_t v4 = *(unsigned char *)(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v5 = OUTLINED_FUNCTION_40_12();
  *(void *)(v0 + 56) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_22D5A07E0;
  *(void *)(v5 + 32) = 0x656D616E6B63696ELL;
  *(void *)(v5 + 40) = 0xEF74736575716552;
  char v6 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v5 + 48) = v4;
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = 0x656D614E7473616CLL;
  *(void *)(v5 + 88) = 0xEF74736575716552;
  *(unsigned char *)(v5 + 96) = v3;
  uint64_t v7 = (uint64_t *)(v5 + 144);
  *(void *)(v5 + 120) = v6;
  *(void *)(v5 + 128) = 0x756C6156656D616ELL;
  *(void *)(v5 + 136) = 0xE900000000000065;
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_41_8(v8) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
  }
  else
  {
    *(void *)(v5 + 168) = v2;
    __swift_allocate_boxed_opaque_existential_1(v7);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v9 + 32))();
  }
  uint64_t v10 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_0_7();
  *(void *)(v5 + 176) = v11;
  *(void *)(v5 + 184) = v12;
  if (v10)
  {
    uint64_t v13 = type metadata accessor for DialogPerson();
    uint64_t v14 = v10;
  }
  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_44_8();
    *(void *)(v5 + 200) = 0;
    *(void *)(v5 + 208) = 0;
  }
  uint64_t v15 = *(unsigned char *)(v0 + 82);
  *(void *)(v5 + 192) = v14;
  *(void *)(v5 + 216) = v13;
  *(void *)(v5 + 224) = 1699574633;
  *(void *)(v5 + 232) = 0xE400000000000000;
  *(unsigned char *)(v5 + 240) = v15;
  *(void *)(v5 + 264) = v6;
  strcpy((char *)(v5 + 272), "nicknameValue");
  *(_WORD *)(v5 + 286) = -4864;
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(v0 + 40);
  swift_retain();
  DialogPerson.nickname.getter();
  if (__swift_getEnumTagSinglePayload(v16, 1, v2) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
LABEL_10:
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    goto LABEL_12;
  }
  *(void *)(v5 + 312) = v2;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 288));
  OUTLINED_FUNCTION_51();
  (*(void (**)(void))(v17 + 32))();
LABEL_12:
  uint64_t v20 = (uint64_t (*)(unint64_t))((int)*MEMORY[0x263F6D0C8] + MEMORY[0x263F6D0C8]);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v18;
  *uint64_t v18 = v0;
  v18[1] = GetContactAttributeCATsModern.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:);
  OUTLINED_FUNCTION_26_10();
  return v20(0xD000000000000029);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0_30();
  char v3 = v2;
  OUTLINED_FUNCTION_11_0();
  NSObject *v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *char v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_8_25();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:hasAnyMatchingLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 91) = v3;
  *(unsigned char *)(v1 + 90) = v4;
  OUTLINED_FUNCTION_13_28(v5, v6, v7, v2, v8, v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v10);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:hasAnyMatchingLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_9_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = (__n128 *)OUTLINED_FUNCTION_28_14(v17);
  OUTLINED_FUNCTION_2_13(v18, (__n128)xmmword_22D5A46C0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsPhoneHandle]);
  uint64_t v20 = OUTLINED_FUNCTION_35_13(v19);
  uint64_t v21 = OUTLINED_FUNCTION_1_39(v20, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_34_15(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_36(v23);
  if (v24)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_12_25();
    v25();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_33();
  if (v12)
  {
    uint64_t v26 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v15 + 200) = 0;
    *(void *)(v15 + 208) = 0;
  }
  char v27 = v13[91];
  char v28 = v13[90];
  char v29 = v13[89];
  char v30 = v13[88];
  *(void *)(v15 + 192) = v12;
  *(void *)(v15 + 216) = v26;
  *(void *)(v15 + 224) = 1699574633;
  *(void *)(v15 + 232) = 0xE400000000000000;
  uint64_t v31 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v15 + 240) = v30;
  *(void *)(v15 + 264) = v31;
  strcpy((char *)(v15 + 272), "hasSameLabels");
  *(_WORD *)(v15 + 286) = -4864;
  *(unsigned char *)(v15 + 288) = v29;
  *(void *)(v15 + 312) = v31;
  *(void *)(v15 + 320) = v16 + 2;
  *(void *)(v15 + 328) = 0x800000022D5AA610;
  *(unsigned char *)(v15 + 336) = v28;
  *(void *)(v15 + 360) = v31;
  *(void *)(v15 + 368) = 0x4D6563696F567369;
  *(void *)(v15 + 376) = 0xEB0000000065646FLL;
  *(void *)(v15 + 408) = v31;
  uint64_t v44 = (int)*MEMORY[0x263F6D0C8] + MEMORY[0x263F6D0C8];
  *(unsigned char *)(v15 + 384) = v27;
  swift_retain();
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)OUTLINED_FUNCTION_33_11(v32);
  void *v33 = v34;
  v33[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  OUTLINED_FUNCTION_5_39(v16 + 24);
  OUTLINED_FUNCTION_22_17();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, v44, a11, a12);
}

uint64_t GetContactAttributeCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return GetContactAttributeCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t GetContactAttributeCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  outlined init with copy of URL?(a1, v14 - v13, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1, &demangling cache variable for type metadata for URL?);
  return v15;
}

uint64_t GetContactAttributeCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t ObjC metadata update function for GetContactAttributeCATsModern()
{
  return type metadata accessor for GetContactAttributeCATsModern();
}

uint64_t OUTLINED_FUNCTION_1_39@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 88) = (a2 - 32) | 0x8000000000000000;
  *(void *)(v3 + 96) = v2;
  *(void *)(v3 + 120) = result;
  strcpy((char *)(v3 + 128), "requestedLabel");
  *(unsigned char *)(v3 + 143) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_33()
{
  *(void *)(v0 + 176) = 0x746361746E6F63;
  *(void *)(v0 + 184) = 0xE700000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_36(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_5_39@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void OUTLINED_FUNCTION_6_32(char a1@<W8>)
{
  *(unsigned char *)(v3 + 240) = v1;
  *(void *)(v3 + 264) = v2;
  *(void *)(v3 + 272) = 0x4D6563696F567369;
  *(void *)(v3 + 280) = 0xEB0000000065646FLL;
  *(void *)(v3 + 312) = v2;
  *(unsigned char *)(v3 + 288) = a1;
}

void OUTLINED_FUNCTION_7_27()
{
  *(unsigned char *)(v3 + 240) = v1;
  *(void *)(v3 + 264) = v2;
  strcpy((char *)(v3 + 272), "hasSameLabels");
  *(_WORD *)(v3 + 286) = -4864;
  *(unsigned char *)(v3 + 288) = v0;
  *(void *)(v3 + 312) = v2;
  *(void *)(v3 + 320) = 0x4D6563696F567369;
  *(void *)(v3 + 328) = 0xEB0000000065646FLL;
  *(void *)(v3 + 360) = v2;
}

uint64_t OUTLINED_FUNCTION_13_28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 89) = a6;
  *(unsigned char *)(v6 + 88) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_22(uint64_t result)
{
  unsigned char v2[24] = v1;
  v2[27] = result;
  v2[28] = 1699574633;
  v2[29] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_18()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_24_16(uint64_t result)
{
  unsigned char v2[24] = v1;
  v2[27] = result;
  v2[28] = 1699574633;
  v2[29] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_14(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t *OUTLINED_FUNCTION_29_12()
{
  *(void *)(v2 + 168) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_30_10@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 + 336) = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_33_11(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_15(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of URL?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_35_13(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_38_11()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_40_12()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_41_8(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_43_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_44_8()
{
  return 0;
}

uint64_t one-time initialization function for siriContacts()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriContacts);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.siriContacts.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

void one-time initialization function for siriContacts()
{
  algn_26857ACE8[5] = 0;
  *(_WORD *)&algn_26857ACE8[6] = -5120;
}

uint64_t GetContactAttributeViewBuilder.makeViewsForWatch()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    *(_WORD *)OUTLINED_FUNCTION_20() = 0;
    OUTLINED_FUNCTION_26_0(&dword_22D49E000, v11, v12, "#GetContactAttributeViewBuilder Constructing view for watchOS.");
    OUTLINED_FUNCTION_2();
  }

  uint64_t v13 = v1[9];
  outlined init with copy of DeviceState((uint64_t)(v1 + 4), (uint64_t)v26);
  v26[8] = &type metadata for InstalledAppsProvider;
  v26[9] = &protocol witness table for InstalledAppsProvider;
  uint64_t v25 = v13;
  unint64_t v14 = *v1;
  uint64_t v15 = (void *)v1[1];
  uint64_t v16 = (void *)v1[3];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v1[7]);
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  v24[5] = Locale.identifier.getter();
  v24[6] = v17;
  v24[3] = 45;
  v24[4] = 0xE100000000000000;
  v24[1] = 95;
  v24[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v18 = OUTLINED_FUNCTION_31_5();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  uint64_t v21 = WatchViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)(v14, v15, v16, v18, v20);
  swift_bridgeObjectRelease();
  outlined destroy of WatchViews((uint64_t)&v25);
  if (!v21) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v22 + 16) = xmmword_22D59FB50;
  *(void *)(v22 + 32) = v21;
  uint64_t v25 = v22;
  specialized Array._endMutation()();
  return v25;
}

uint64_t GetContactAttributeViewBuilder.makeViewsForMac()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v4, "#GetContactAttributeViewBuilder Constructing PersonSnippet with display properties for macOS.", v5, 2u);
    OUTLINED_FUNCTION_2();
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = OUTLINED_FUNCTION_5_21();
  *(_OWORD *)(v6 + 16) = xmmword_22D59FB50;
  type metadata accessor for SAABPersonSnippet();
  uint64_t v7 = *(void **)(v1 + 24);
  id v8 = *(id *)(v1 + 8);
  id v9 = objc_msgSend(v7, sel_contactAttributeType);
  os_log_type_t v10 = *(void **)(v1 + 16);
  v12[3] = &type metadata for InstalledAppsProvider;
  v12[4] = &protocol witness table for InstalledAppsProvider;
  *(void *)(v6 + 32) = SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v8, (uint64_t)v9, v10, (uint64_t)v12);
  v12[0] = v6;
  specialized Array._endMutation()();
  return v12[0];
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarPlay()()
{
  return GetContactAttributeViewBuilder.makeViewsForCarPlay()("#GetContactAttributeViewBuilder Constructing no views for CarPlay.");
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarDND()()
{
  return GetContactAttributeViewBuilder.makeViewsForCarPlay()("#GetContactAttributeViewBuilder Constructing no views for CarDNDMode.");
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarPlay()(const char *a1)
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v4, a1, v5, 2u);
    OUTLINED_FUNCTION_2();
  }

  return MEMORY[0x263F8EE78];
}

uint64_t GetContactAttributeViewBuilder.makeViewsForIOS()()
{
  uint64_t v1 = v0;
  v19[0] = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    *(_WORD *)OUTLINED_FUNCTION_20() = 0;
    OUTLINED_FUNCTION_26_0(&dword_22D49E000, v10, v11, "#GetContactAttributeViewBuilder Constructing compact view for iOS.");
    OUTLINED_FUNCTION_2();
  }

  uint64_t v12 = *(void *)(v1 + 72);
  v20[4] = &type metadata for InstalledAppsProvider;
  v20[5] = &protocol witness table for InstalledAppsProvider;
  v20[0] = v12;
  v20[6] = 0;
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 32), *(void *)(v1 + 56));
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  void v19[5] = Locale.identifier.getter();
  v19[6] = v13;
  v19[3] = 45;
  v19[4] = 0xE100000000000000;
  v19[1] = 95;
  v19[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_31_5();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v3 + 8))(v6, v19[0]);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  if (v15)
  {
    uint64_t v16 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v16 + 16) = xmmword_22D59FB50;
    *(void *)(v16 + 32) = v15;
    v20[0] = v16;
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v17 + 16) = xmmword_22D59FB50;
    type metadata accessor for SAABPersonSnippet();
    *(void *)(v17 + 32) = SAABPersonSnippet.init(_:isMe:)(*(id *)(v1 + 8), *(id *)(v1 + 16));
    v20[0] = v17;
  }
  specialized Array._endMutation()();
  return v20[0];
}

unint64_t type metadata accessor for SAABPersonSnippet()
{
  unint64_t result = lazy cache variable for type metadata for SAABPersonSnippet;
  if (!lazy cache variable for type metadata for SAABPersonSnippet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  }
  return result;
}

uint64_t destroy for GetContactAttributeViewBuilder(id *a1)
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 4));
  return swift_release();
}

uint64_t initializeWithCopy for GetContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2 + 32;
  long long v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  id v11 = v4;
  id v12 = v5;
  id v13 = v6;
  v10(a1 + 32, v7, v9);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  return a1;
}

void *assignWithCopy for GetContactAttributeViewBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a2[2];
  long long v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  uint64_t v10 = (void *)a2[3];
  id v11 = (void *)a1[3];
  a1[3] = v10;
  id v12 = v10;

  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for GetContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  id v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GetContactAttributeViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetContactAttributeViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetContactAttributeViewBuilder()
{
  return &type metadata for GetContactAttributeViewBuilder;
}

double specialized SiriKitContactIntent.value(forSlot:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  long long v7 = (void *)MEMORY[0x230F84F70](v6);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v2, sel_valueForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for NLContextUpdate?);
}

id specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(void *a1, void *a2)
{
  id v4 = objc_msgSend(a1, sel_relatedSiriMatches);
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for SiriMatch();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0, v6);
    id v7 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x230F854E0](0, v6) : *(id *)(v6 + 32);
    id v8 = v7;
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v8, sel_identifier);

    if (v9)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      uint64_t v13 = a2[3];
      uint64_t v14 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v13);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(v10, v12, v13, v14);
      swift_bridgeObjectRelease();
      if (v19) {
        return (id)v19;
      }
    }
  }
  id v15 = objc_msgSend(a1, sel_relatedContact);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for CNContact();
    return CNContact.init(from:)(v16);
  }
  else
  {
    id v18 = objc_allocWithZone(MEMORY[0x263EFE9F8]);
    return objc_msgSend(v18, sel_init);
  }
}

uint64_t ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[18] = v2;
  v1[19] = v0;
  v1[16] = v3;
  v1[17] = v4;
  uint64_t v5 = type metadata accessor for Parse();
  v1[20] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[21] = v6;
  v1[22] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  v1[23] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[24] = v8;
  v1[25] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  SiriContactsIntents::ModifyContactAttributeSlots_optional v8;
  uint64_t *v9;
  uint64_t (*v10)(void);
  SiriContactsIntents::ModifyContactAttributeSlots value;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 184);
  *(void *)(v0 + 208) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v4 = ParameterIdentifier.name.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  v8.SiriContactsIntents::GetContactAttributeSlots value = ModifyContactAttributeSlots.init(rawValue:)(v7).value;
  *(SiriContactsIntents::ModifyContactAttributeSlots_optional *)(v0 + 66) = v8;
  if (v8.value == SiriContactsIntents_ModifyContactAttributeSlots_unknownDefault)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_20_2();
    NSObject *v9 = v4;
    v9[1] = (uint64_t)v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
    return v10();
  }
  else
  {
    SiriContactsIntents::GetContactAttributeSlots value = v8.value;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    *(void *)(v0 + 216) = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    uint64_t v14 = Logger.logObject.getter();
    id v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      *(unsigned char *)(v0 + 65) = value;
      uint64_t v17 = String.init<A>(describing:)();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v14, v15, "[%s] Slot: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    uint64_t v19 = *(void *)(v0 + 152);
    Input.parse.getter();
    uint64_t v20 = ParameterResolutionRecord.intent.getter();
    *(void *)(v0 + 224) = v20;
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v21;
    *uint64_t v21 = v0;
    v21[1] = ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v19 + 176, v20, (uint64_t)&protocol witness table for ModifyContactAttributeIntent);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v4 = (void *)v3[28];
  uint64_t v5 = v3[22];
  uint64_t v6 = v3[21];
  uint64_t v7 = v3[20];
  uint64_t v8 = *v0;
  OUTLINED_FUNCTION_11_0();
  NSObject *v9 = v8;
  *(void *)(v11 + 240) = v10;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  int v33;
  void *v34;
  id v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;
  unint64_t *v42;
  unint64_t *v43;
  char v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  NSArray v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  char v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  const char *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  char v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;

  uint64_t v92 = v0;
  uint64_t v1 = *(void **)(v0 + 240);
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = type metadata accessor for ModifyContactAttributeIntent();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {

LABEL_6:
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(void *)&v91[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v0 + 80) = OUTLINED_FUNCTION_15_23(v14, v15, v16, v17, v18, v19, v20, v21);
      uint64_t v22 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v0 + 72) = OUTLINED_FUNCTION_15_23(v22, v23, v24, v25, v26, v27, v28, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_22D49E000, v11, v12, "[%s] failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    memset(v91, 0, sizeof(v91));
    ParameterResolutionRecord.intent.getter();
    type metadata accessor for ModifyContactAttributeIntent();
    goto LABEL_9;
  }
  uint64_t v4 = (void *)v3;
  unint64_t v86 = v0 + 88;
  uint64_t v5 = v1;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  uint64_t v88 = v2;
  uint64_t v89 = v5;
  id v85 = v0 + 96;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    id v82 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(void *)&v91[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v0 + 96) = OUTLINED_FUNCTION_21_15((uint64_t)"ortedValueOutput", v0 + 104, v82, v9, v0 + 56, v85, v86, v2, (uint64_t)v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v0 + 104) = v4;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v81 = v4;

    _os_log_impl(&dword_22D49E000, v6, v7, "[%s] SiriKit Intent:     %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v33 = *(unsigned __int8 *)(v0 + 66);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_17_19();
  uint64_t v35 = objc_msgSend(v34, sel_contactAttributeToModify);

  *(void *)(v0 + 56) = ContactAttributeType.init(rawValue:)((unint64_t)v35);
  *(unsigned char *)(v0 + 64) = v36 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeType?);
  uint64_t v37 = Optional.debugDescription.getter();
  uint64_t v39 = v38;
  switch(v33)
  {
    case 2:
      uint64_t v45 = (void *)OUTLINED_FUNCTION_17_19();
      unint64_t v46 = objc_msgSend(v45, sel_contactAttributeToModify);

      if (v46 != (id)10)
      {
        type metadata accessor for ContactsError();
        lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
        OUTLINED_FUNCTION_20_2();
        uint64_t v43 = v69;
        uint64_t v44 = 2;
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_14_23();
      uint64_t v47 = (void *)ParameterResolutionRecord.intent.getter();
      objc_msgSend(v47, sel_modifyOperation);

      OUTLINED_FUNCTION_16_19(v48, sel_setModifyOperation_);
      unint64_t v49 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v50 = objc_msgSend(v49, sel_relatedContact);

      OUTLINED_FUNCTION_16_19(v51, sel_setRelatedContact_);
      uint64_t v52 = (void *)ParameterResolutionRecord.intent.getter();
      if (outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v52))
      {
        type metadata accessor for SiriMatch();
        v53.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v53.super.Class isa = 0;
      }
      unint64_t v73 = sel_setRelatedSiriMatches_;
      goto LABEL_35;
    case 3:
      unint64_t v54 = (void *)OUTLINED_FUNCTION_17_19();
      uint64_t v55 = objc_msgSend(v54, sel_contactAttributeToModify);

      if (v55 != (id)6)
      {
        type metadata accessor for ContactsError();
        lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
        OUTLINED_FUNCTION_20_2();
        uint64_t v43 = v70;
        uint64_t v44 = 3;
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_14_23();
      uint64_t v56 = (void *)ParameterResolutionRecord.intent.getter();
      unint64_t v57 = objc_msgSend(v56, sel_modifyOperation);

      uint64_t v90 = (uint64_t)v4;
      objc_msgSend(v4, sel_setModifyOperation_, v57);
      goto LABEL_36;
    case 4:
      uint64_t v40 = (void *)OUTLINED_FUNCTION_17_19();
      uint64_t v41 = objc_msgSend(v40, sel_contactAttributeToModify);

      if (v41 == (id)6)
      {
        type metadata accessor for ContactsError();
        lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
        OUTLINED_FUNCTION_20_2();
        uint64_t v43 = v42;
        uint64_t v44 = 4;
LABEL_26:
        *uint64_t v43 = ModifyContactAttributeSlots.rawValue.getter(v44);
        v43[1] = v71;
        v43[2] = v37;
        v43[3] = v39;
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_14_23();
      unint64_t v62 = (void *)ParameterResolutionRecord.intent.getter();
      objc_msgSend(v62, sel_contactAttributeToModify);

      OUTLINED_FUNCTION_16_19(v63, sel_setContactAttributeToModify_);
      uint64_t v64 = (void *)ParameterResolutionRecord.intent.getter();
      objc_msgSend(v64, sel_modifyOperation);

      OUTLINED_FUNCTION_16_19(v65, sel_setModifyOperation_);
      id v66 = (void *)ParameterResolutionRecord.intent.getter();
      id v67 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v66);
      if (v68)
      {
        v53.super.Class isa = (Class)MEMORY[0x230F84F70](v67);
        swift_bridgeObjectRelease();
      }
      else
      {
        v53.super.Class isa = 0;
      }
      unint64_t v73 = sel_setModifyRelationship_;
LABEL_35:
      uint64_t v90 = (uint64_t)v4;
      objc_msgSend(v4, v73, v53.super.isa);

LABEL_36:
      unint64_t v74 = Logger.logObject.getter();
      char v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        id v76 = (uint8_t *)swift_slowAlloc();
        *(void *)&v91[0] = swift_slowAlloc();
        *(_DWORD *)id v76 = 136315138;
        unint64_t v77 = OUTLINED_FUNCTION_21_15((uint64_t)"ortedValueOutput", v80, (uint64_t)v81, v83, v84, v85, v86, v88, v90);
        *uint64_t v87 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22D49E000, v74, v75, "[%s] Converted ContactIntent to SK intent.", v76, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }

      uint64_t v78 = *(unsigned char *)(v0 + 66);
      uint64_t v79 = (void *)ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 40) = &type metadata for ModifyContactAttributeSlots;
      *(void *)(v0 + 48) = &protocol witness table for ModifyContactAttributeSlots;
      *(unsigned char *)(v0 + 16) = v78;
      specialized SiriKitContactIntent.value(forSlot:)((void *)(v0 + 16), v91);

      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
LABEL_9:
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      char v30 = *(void *)(v0 + 128);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<ModifyContactAttributeIntent>);
      __swift_storeEnumTagSinglePayload(v30, 0, 1, v31);
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_38_0();
      goto LABEL_28;
  }
  unint64_t v58 = *(unsigned char *)(v0 + 66);
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  swift_allocError();
  unint64_t v60 = v59;
  *uint64_t v59 = ModifyContactAttributeSlots.rawValue.getter(v58);
  v60[1] = v61;
  v60[2] = v37;
  v60[3] = v39;
LABEL_27:
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
LABEL_28:
  return v32();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  type metadata accessor for Locale();
  v1[5] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v1[6] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_2_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v1[9] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[10] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[11] = v7;
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SpeakableString();
  v1[15] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[16] = v9;
  v1[17] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for ParameterIdentifier();
  v1[18] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[19] = v11;
  v1[20] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  OUTLINED_FUNCTION_33_0();
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v4 = ParameterIdentifier.name.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  switch(ModifyContactAttributeSlots.init(rawValue:)(v7).value)
  {
    case SiriContactsIntents_ModifyContactAttributeSlots_modifyRelationship:
      uint64_t v12 = (void *)v0[4];
      uint64_t v11 = v0[5];
      swift_bridgeObjectRelease();
      uint64_t v13 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v14 = specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(v13, v12 + 7);
      v0[23] = v14;

      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(v12 + 2, v12[5]);
      id v15 = v14;
      dispatch thunk of DeviceState.siriLocale.getter();
      v0[24] = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v15, 1, v11, 0);
      uint64_t v16 = (void *)swift_task_alloc();
      v0[25] = v16;
      *uint64_t v16 = v0;
      v16[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_37_10();
      double result = ModifyContactAttributeCATs.promptForRelationship(contact:)(v17, v18);
      break;
    case SiriContactsIntents_ModifyContactAttributeSlots_modifyNickName:
      swift_bridgeObjectRelease();
      uint64_t v21 = (void *)swift_task_alloc();
      v0[27] = v21;
      *uint64_t v21 = v0;
      v21[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_37_10();
      double result = ModifyContactAttributeCATs.promptForNickname()();
      break;
    case SiriContactsIntents_ModifyContactAttributeSlots_relatedSiriMatches:
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)ParameterResolutionRecord.intent.getter();
      outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v23);
      if (!v24) {
        static String.EMPTY.getter();
      }
      uint64_t v26 = v0[16];
      uint64_t v25 = v0[17];
      char v27 = v0[15];
      char v28 = v0[9];
      SpeakableString.init(print:speak:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v28, v25, v27);
      __swift_storeEnumTagSinglePayload(v28, 0, 1, v27);
      char v29 = (void *)swift_task_alloc();
      v0[21] = v29;
      *char v29 = v0;
      v29[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_37_10();
      double result = ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)();
      break;
    default:
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      swift_allocError();
      *uint64_t v8 = v4;
      v8[1] = (uint64_t)v6;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_37_10();
      __asm { BRAA            X1, X16 }
      return result;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 176) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  void *v5 = v4;
  *(void *)(v6 + 224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_4();
  v0();
  OUTLINED_FUNCTION_2_37();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  OUTLINED_FUNCTION_2_37();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_37();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v13 = v12[14];
  uint64_t v15 = v12[7];
  uint64_t v14 = v12[8];
  uint64_t v16 = v12[6];
  uint64_t v17 = (uint64_t *)v12[2];
  static ContactsContextProvider.needsValueRelatedSiriMatches()();
  uint64_t v18 = type metadata accessor for AceOutput();
  uint64_t v19 = MEMORY[0x263F6FFF0];
  v17[3] = v18;
  v17[4] = v19;
  __swift_allocate_boxed_opaque_existential_1(v17);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v21 = v12[16];
  uint64_t v20 = v12[17];
  uint64_t v22 = v12[15];
  uint64_t v33 = v12[5];
  OUTLINED_FUNCTION_13_4();
  v23();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_12_6();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, v33, a10, a11, a12);
}

{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v13 = (void *)v12[23];
  uint64_t v14 = v12[13];
  uint64_t v15 = v12[8];
  uint64_t v16 = (uint64_t *)v12[2];
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_1(v17);
  uint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForNeedsValueModifyRelationship()();
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v20 = type metadata accessor for AceOutput();
  uint64_t v21 = MEMORY[0x263F6FFF0];
  v16[3] = v20;
  v16[4] = v21;
  __swift_allocate_boxed_opaque_existential_1(v16);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v14, v15);

  uint64_t v22 = v12[13];
  uint64_t v23 = v12[11];
  OUTLINED_FUNCTION_20_19();
  OUTLINED_FUNCTION_13_4();
  v24();
  (*(void (**)(uint64_t, unint64_t))(v23 + 8))(v22, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_12_6();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = v12[12];
  uint64_t v15 = v12[8];
  uint64_t v16 = (uint64_t *)v12[2];
  static ContactsContextProvider.needsValueModifyNickname()();
  uint64_t v17 = type metadata accessor for AceOutput();
  uint64_t v18 = MEMORY[0x263F6FFF0];
  v16[3] = v17;
  v16[4] = v18;
  __swift_allocate_boxed_opaque_existential_1(v16);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v14, v15);
  uint64_t v20 = v12[11];
  uint64_t v19 = v12[12];
  OUTLINED_FUNCTION_20_19();
  OUTLINED_FUNCTION_13_4();
  v21();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_12_6();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t type metadata accessor for ModifyContactAttributeNeedsValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeNeedsValueStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_relatedSiriMatches);

  if (!v2) {
    return 0;
  }
  type metadata accessor for SiriMatch();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_modifyRelationship);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_2_37()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_15_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v8, (uint64_t *)va);
}

id OUTLINED_FUNCTION_16_19(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_17_19()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_21_15@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, a1 | 0x8000000000000000, (uint64_t *)va);
}

uint64_t SpeakableString.init(printed:phonetic:phonemeData:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Optional<A>.isNilOrEmpty.getter() & 1) != 0 && (Optional<A>.isNilOrEmpty.getter())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (a1)
  {
    swift_bridgeObjectRelease();
  }
  SpeakableString.init(print:speak:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

void specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)()
{
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v2 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  if (OUTLINED_FUNCTION_16_20())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_21_0(v3, (uint64_t)static Logger.siriContacts);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v6);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v7, v8, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForWatch()();
  }
  else if (OUTLINED_FUNCTION_22_18())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_21_0(v9, (uint64_t)static Logger.siriContacts);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v11))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v12);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v13, v14, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForMac()();
  }
  else if (OUTLINED_FUNCTION_25_17())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    uint64_t v16 = (void *)OUTLINED_FUNCTION_21_0(v15, (uint64_t)static Logger.siriContacts);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v17))
    {
      uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v18);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v19, v20, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForCarDND()();
  }
  else if (OUTLINED_FUNCTION_24_17())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_21_0(v21, (uint64_t)static Logger.siriContacts);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v24);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v25, v26, "#IdiomSensitiveViewBuilder Building views for CarPlay");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForCarPlay()();
  }
  else if (OUTLINED_FUNCTION_23_11())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = (void *)OUTLINED_FUNCTION_21_0(v27, (uint64_t)static Logger.siriContacts);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v29))
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v30);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v31, v32, "#IdiomSensitiveViewBuilder Building views for XROS");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForXROS()();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v36);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v37, v38, "#IdiomSensitiveViewBuilder Building views for IOS");
      OUTLINED_FUNCTION_2_38();
    }

    ErrorViewBuilder.makeViewsForIOS()();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  os_log_type_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  os_log_type_t v32;
  _WORD *v33;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_13_29();
  OUTLINED_FUNCTION_10_29();
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    id v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_21_0(v2, (uint64_t)static Logger.siriContacts);
    uint64_t v4 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v4))
    {
      os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v5);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v6, v7, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    ConfirmationViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_10_29();
  if (dispatch thunk of DeviceState.isMac.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_21_0(v8, (uint64_t)static Logger.siriContacts);
    uint64_t v10 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v10))
    {
      os_log_type_t v11 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v11);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v12, v13, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    ConfirmationViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_10_29();
  if (dispatch thunk of DeviceState.isCarDNDMode.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
    uint64_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl(&dword_22D49E000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND", v17, 2u);
      MEMORY[0x230F85DE0](v17, -1, -1);
    }

    goto LABEL_38;
  }
  OUTLINED_FUNCTION_10_29();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_10_29();
    if (dispatch thunk of DeviceState.isXRDevice.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      uint64_t v25 = (void *)OUTLINED_FUNCTION_21_0(v24, (uint64_t)static Logger.siriContacts);
      uint64_t v26 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v26)) {
        goto LABEL_37;
      }
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v27);
      uint64_t v30 = "#IdiomSensitiveViewBuilder Building views for XROS";
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      uint64_t v25 = (void *)OUTLINED_FUNCTION_21_0(v31, (uint64_t)static Logger.siriContacts);
      uint64_t v32 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v32)) {
        goto LABEL_37;
      }
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v33);
      uint64_t v30 = "#IdiomSensitiveViewBuilder Building views for IOS";
    }
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v28, v29, v30);
    OUTLINED_FUNCTION_2_38();
LABEL_37:

    ConfirmationViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = (void *)OUTLINED_FUNCTION_21_0(v18, (uint64_t)static Logger.siriContacts);
  uint64_t v20 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_15(v20))
  {
    uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_37(v21);
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v22, v23, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_38();
  }

  ConfirmationViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_18_18();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_log_type_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  os_log_type_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  os_log_type_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v2 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  if (OUTLINED_FUNCTION_16_20())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_21_0(v3, (uint64_t)static Logger.siriContacts);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v6);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v7, v8, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForWatch()();
  }
  else if (OUTLINED_FUNCTION_22_18())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_21_0(v9, (uint64_t)static Logger.siriContacts);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v11))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v12);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v13, v14, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForMac()();
  }
  else if (OUTLINED_FUNCTION_25_17())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    uint64_t v16 = (void *)OUTLINED_FUNCTION_21_0(v15, (uint64_t)static Logger.siriContacts);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v17))
    {
      uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v18);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v19, v20, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForCarDND()();
  }
  else if (OUTLINED_FUNCTION_24_17())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_21_0(v21, (uint64_t)static Logger.siriContacts);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v24);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v25, v26, "#IdiomSensitiveViewBuilder Building views for CarPlay");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForCarPlay()();
  }
  else if (OUTLINED_FUNCTION_23_11())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = (void *)OUTLINED_FUNCTION_21_0(v27, (uint64_t)static Logger.siriContacts);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v29))
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v30);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v31, v32, "#IdiomSensitiveViewBuilder Building views for XROS");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForXROS()();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v36);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v37, v38, "#IdiomSensitiveViewBuilder Building views for IOS");
      OUTLINED_FUNCTION_2_38();
    }

    MissingMeCardViewBuilder.makeViewsForIOS()();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  os_log_type_t v34;
  _WORD *v35;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_13_29();
  OUTLINED_FUNCTION_9_26();
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    id v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_21_0(v2, (uint64_t)static Logger.siriContacts);
    uint64_t v4 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v4))
    {
      os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v5);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v6, v7, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    GetContactAttributeViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_9_26();
  if (dispatch thunk of DeviceState.isMac.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_21_0(v8, (uint64_t)static Logger.siriContacts);
    uint64_t v10 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v10))
    {
      os_log_type_t v11 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v11);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v12, v13, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    GetContactAttributeViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_9_26();
  if (dispatch thunk of DeviceState.isCarDNDMode.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = (void *)OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
    uint64_t v16 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v16))
    {
      os_log_type_t v17 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v17);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v18, v19, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_38();
    }

    GetContactAttributeViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_9_26();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_9_26();
    if (dispatch thunk of DeviceState.isXRDevice.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v26, (uint64_t)static Logger.siriContacts);
      uint64_t v28 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v28)) {
        goto LABEL_37;
      }
      os_log_type_t v29 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v29);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for XROS";
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
      uint64_t v34 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v34)) {
        goto LABEL_37;
      }
      os_log_type_t v35 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v35);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for IOS";
    }
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v30, v31, v32);
    OUTLINED_FUNCTION_2_38();
LABEL_37:

    GetContactAttributeViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_21_0(v20, (uint64_t)static Logger.siriContacts);
  uint64_t v22 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_15(v22))
  {
    os_log_type_t v23 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_37(v23);
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v24, v25, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_38();
  }

  GetContactAttributeViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_18_18();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  os_log_type_t v34;
  _WORD *v35;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_13_29();
  OUTLINED_FUNCTION_8_29();
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    id v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_21_0(v2, (uint64_t)static Logger.siriContacts);
    uint64_t v4 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v4))
    {
      os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v5);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v6, v7, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyContactAttributeViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_8_29();
  if (dispatch thunk of DeviceState.isMac.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_21_0(v8, (uint64_t)static Logger.siriContacts);
    uint64_t v10 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v10))
    {
      os_log_type_t v11 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v11);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v12, v13, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyContactAttributeViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_8_29();
  if (dispatch thunk of DeviceState.isCarDNDMode.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = (void *)OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
    uint64_t v16 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v16))
    {
      os_log_type_t v17 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v17);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v18, v19, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyContactAttributeViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_8_29();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_8_29();
    if (dispatch thunk of DeviceState.isXRDevice.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v26, (uint64_t)static Logger.siriContacts);
      uint64_t v28 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v28)) {
        goto LABEL_37;
      }
      os_log_type_t v29 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v29);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for XROS";
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
      uint64_t v34 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v34)) {
        goto LABEL_37;
      }
      os_log_type_t v35 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v35);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for IOS";
    }
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v30, v31, v32);
    OUTLINED_FUNCTION_2_38();
LABEL_37:

    ModifyContactAttributeViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_21_0(v20, (uint64_t)static Logger.siriContacts);
  uint64_t v22 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_15(v22))
  {
    os_log_type_t v23 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_37(v23);
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v24, v25, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_38();
  }

  ModifyContactAttributeViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_18_18();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  os_log_type_t v34;
  _WORD *v35;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_12_26();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_19_18();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_13_29();
  OUTLINED_FUNCTION_7_28();
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    id v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_21_0(v2, (uint64_t)static Logger.siriContacts);
    uint64_t v4 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v4))
    {
      os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v5);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v6, v7, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_7_28();
  if (dispatch thunk of DeviceState.isMac.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_21_0(v8, (uint64_t)static Logger.siriContacts);
    uint64_t v10 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v10))
    {
      os_log_type_t v11 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v11);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v12, v13, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_7_28();
  if (dispatch thunk of DeviceState.isCarDNDMode.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = (void *)OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
    uint64_t v16 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_15(v16))
    {
      os_log_type_t v17 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v17);
      OUTLINED_FUNCTION_0_33(&dword_22D49E000, v18, v19, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_38();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_7_28();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_7_28();
    if (dispatch thunk of DeviceState.isXRDevice.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v26, (uint64_t)static Logger.siriContacts);
      uint64_t v28 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v28)) {
        goto LABEL_37;
      }
      os_log_type_t v29 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v29);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for XROS";
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
      uint64_t v34 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_24_15(v34)) {
        goto LABEL_37;
      }
      os_log_type_t v35 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_4_37(v35);
      uint64_t v32 = "#IdiomSensitiveViewBuilder Building views for IOS";
    }
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v30, v31, v32);
    OUTLINED_FUNCTION_2_38();
LABEL_37:

    ModifyNicknameUnsupportedViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_21_0(v20, (uint64_t)static Logger.siriContacts);
  uint64_t v22 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_15(v22))
  {
    os_log_type_t v23 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_4_37(v23);
    OUTLINED_FUNCTION_0_33(&dword_22D49E000, v24, v25, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_38();
  }

  ModifyNicknameUnsupportedViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_18_18();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_21_16();
  OUTLINED_FUNCTION_8();
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[18] = v2;
  v1[19] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  if (ContactsStrategy.isSmartEnabled.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    uint64_t v2 = OUTLINED_FUNCTION_21_0(v1, (uint64_t)static Logger.siriContacts);
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_22D49E000, v2, v3, "#ModifyContactAttributeContinueInAppFlowStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v4, 2u);
      MEMORY[0x230F85DE0](v4, -1, -1);
    }
  }
  uint64_t v5 = v0[19];
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 16), *(void *)(v5 + 40));
  uint64_t v6 = DeviceState.toSiriKitDeviceState.getter();
  v0[24] = v6;
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 16), *(void *)(v5 + 40));
  uint64_t v7 = dispatch thunk of DeviceState.isXRDevice.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[25] = v8;
  *uint64_t v8 = v0;
  v8[1] = ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  uint64_t v9 = v0[23];
  return ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)(v9, v6, v7 & 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  *(void *)(v1 + 208) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  else {
    uint64_t v2 = ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v4 = *(uint64_t **)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  outlined init with copy of DeviceState(v5 + 16, v0 + 16);
  uint64_t v6 = *(void *)(v5 + 104);
  *(void *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(void *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(void *)(v0 + 56) = v6;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v7);
  uint64_t v8 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v9 = MEMORY[0x263F6FFF0];
  v4[3] = v8;
  v4[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.__ivar_destroyer()
{
  return outlined destroy of AppUtil(v0 + 168);
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsUnsupportedValueStrategy.deinit();
  outlined destroy of AppUtil(v0 + 168);
  return MEMORY[0x270FA0228](v0, 208, 7);
}

uint64_t type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeContinueInAppFlowStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeContinueInAppFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeContinueInAppFlowStrategy()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy)
  {
    type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy);
  }
  return result;
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance ModifyContactAttributeContinueInAppFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = GetContactAttributeCATs.unsupportedContactAttribute();
  return ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)();
}

void OUTLINED_FUNCTION_0_33(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_2_38()
{
  JUMPOUT(0x230F85DE0);
}

_WORD *OUTLINED_FUNCTION_4_37(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_33()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_7_28()
{
  uint64_t v2 = *(void *)(v0 + 64);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_8_29()
{
  uint64_t v2 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_9_26()
{
  uint64_t v2 = *(void *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  uint64_t v2 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

void OUTLINED_FUNCTION_13_29()
{
  uint64_t v5 = v0 + *(int *)(v1 + 20);
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 16) = v4;
}

uint64_t OUTLINED_FUNCTION_16_20()
{
  uint64_t v6 = v0 + *(int *)(v1 + 20);
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 16) = v5;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_19_18()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_20_20()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isMac.getter();
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isXRDevice.getter();
}

uint64_t OUTLINED_FUNCTION_24_17()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t OUTLINED_FUNCTION_25_17()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isCarDNDMode.getter();
}

id OUTLINED_FUNCTION_27_15()
{
  uint64_t v1 = (void *)static Signpost.contactsLog;
  return v1;
}

uint64_t dispatch thunk of FindMyFriendFlowProviding.makeFlow(parse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ContactsLabeledAddress.Builder.__deallocating_deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents22ContactsLabeledAddress7Builder_label);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents22ContactsLabeledAddress7Builder_addressString);
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

unint64_t static ContactsLabeledAddress.catTypeName.getter()
{
  return 0xD000000000000017;
}

uint64_t ContactsLabeledAddress.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v21 - v11;
  BOOL v13 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label, (uint64_t)v12);
    uint64_t v14 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14) != 1)
    {
      *(void *)(a3 + 24) = v14;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(boxed_opaque_existential_1, v12, v14);
    }
    uint64_t v15 = (uint64_t)v12;
    goto LABEL_16;
  }
  if (a1 != 0x5373736572646461 || a2 != 0xED0000676E697274)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      goto LABEL_17;
    }
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString, (uint64_t)v10);
  uint64_t v19 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v19) == 1)
  {
    uint64_t v15 = (uint64_t)v10;
LABEL_16:
    uint64_t result = outlined destroy of SpeakableString?(v15);
LABEL_17:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(void *)(a3 + 24) = v19;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v20, v10, v19);
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional __swiftcall ContactsLabeledAddress.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsLabeledAddress.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.SiriContactsIntents::GetContactAttributeSlots value = SiriContactsIntents_ContactsLabeledAddress_CodingKeys_addressString;
  }
  else {
    v4.SiriContactsIntents::GetContactAttributeSlots value = SiriContactsIntents_ContactsLabeledAddress_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ContactsLabeledAddress.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x5373736572646461;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsLabeledAddress.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsLabeledAddress.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsLabeledAddress.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsLabeledAddress.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::GetContactAttributeSlots value = ContactsLabeledAddress.CodingKeys.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::GetContactAttributeSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsLabeledAddress.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsLabeledAddress.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  return ContactsLabeledAddress.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsLabeledAddress.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::GetContactAttributeSlots value = ContactsLabeledAddress.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->SiriContactsIntents::GetContactAttributeSlots value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsLabeledAddress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsLabeledAddress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsLabeledAddress.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString);
  return v0;
}

uint64_t ContactsLabeledAddress.__deallocating_deinit()
{
  ContactsLabeledAddress.deinit();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t ObjC metadata update function for ContactsLabeledAddress()
{
  return type metadata accessor for ContactsLabeledAddress(0);
}

uint64_t type metadata accessor for ContactsLabeledAddress(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsLabeledAddress);
}

void type metadata completion function for ContactsLabeledAddress()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsLabeledAddress.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsLabeledAddress.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type ContactsLabeledAddress and conformance ContactsLabeledAddress(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  OUTLINED_FUNCTION_5_19();
  if (!v1)
  {
    v10[14] = 1;
    OUTLINED_FUNCTION_5_19();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t ContactsLabeledAddress.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsLabeledAddress.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsLabeledAddress.Builder()
{
  return type metadata accessor for ContactsLabeledAddress.Builder(0);
}

uint64_t type metadata accessor for ContactsLabeledAddress.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsLabeledAddress.Builder);
}

uint64_t ContactsLabeledAddress.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v20 - v9;
  void v20[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsLabeledAddress.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  *(void *)(v3 + 16) = 0;
  uint64_t v14 = a1[3];
  uint64_t v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v15 = (uint64_t)v21;

    type metadata accessor for ContactsLabeledAddress(0);
    swift_deallocPartialClassInstance();
    uint64_t v19 = v15;
  }
  else
  {
    v20[1] = v12;
    type metadata accessor for SpeakableString();
    char v23 = 0;
    lazy protocol witness table accessor for type ContactsLabeledAddress and conformance ContactsLabeledAddress(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    OUTLINED_FUNCTION_2_24();
    outlined init with take of SpeakableString?((uint64_t)v10, v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label);
    char v22 = 1;
    OUTLINED_FUNCTION_2_24();
    uint64_t v17 = OUTLINED_FUNCTION_6_21();
    v18(v17);
    outlined init with take of SpeakableString?((uint64_t)v8, v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString);
    uint64_t v19 = (uint64_t)v21;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsLabeledAddress()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsLabeledAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsLabeledAddress.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsLabeledAddress@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsLabeledAddress.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsLabeledAddress(void *a1)
{
  return ContactsLabeledAddress.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsLabeledAddress()
{
  return lazy protocol witness table accessor for type ContactsLabeledAddress and conformance ContactsLabeledAddress(&lazy protocol witness table cache variable for type ContactsLabeledAddress and conformance ContactsLabeledAddress, (void (*)(uint64_t))type metadata accessor for ContactsLabeledAddress);
}

uint64_t base witness table accessor for Encodable in ContactsLabeledAddress()
{
  return lazy protocol witness table accessor for type ContactsLabeledAddress and conformance ContactsLabeledAddress(&lazy protocol witness table cache variable for type ContactsLabeledAddress and conformance ContactsLabeledAddress, (void (*)(uint64_t))type metadata accessor for ContactsLabeledAddress);
}

uint64_t lazy protocol witness table accessor for type ContactsLabeledAddress and conformance ContactsLabeledAddress(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactsLabeledAddress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D57619CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactsLabeledAddress.CodingKeys()
{
  return &type metadata for ContactsLabeledAddress.CodingKeys;
}

void specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_30_11();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  if (v1)
  {
    swift_retain();
    UsoEntity_common_Person.contactId.getter();
    OUTLINED_FUNCTION_63_2();
    swift_release();
  }
  OUTLINED_FUNCTION_8();
}

uint64_t specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *))
{
  swift_unknownObjectWeakInit();
  a2(a1, v5);
  return swift_unknownObjectWeakDestroy();
}

void specialized static SiriKitGetEntityIntent.resolveAddressType(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v132 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v125 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  id v129 = (char *)&v122 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v126 = (char *)&v122 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v131 = (char *)&v122 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v128 = (void (**)(char *, uint64_t))((char *)&v122 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  char v123 = (char *)&v122 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v122 - v17;
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_108;
  }
  while (1)
  {
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    uint64_t v124 = v20;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v127 = a1;
    uint64_t v130 = v4;
    if (v23)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v135 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      *(void *)&long long v134 = a1;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      uint64_t v26 = String.init<A>(describing:)();
      *(void *)&long long v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v135);
      uint64_t v4 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      a1 = v127;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v21, v22, "#SiriKitGetEntityIntent resolveAddressType from address %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v25, -1, -1);
      MEMORY[0x230F85DE0](v24, -1, -1);

      if (!a1) {
        goto LABEL_74;
      }
    }
    else
    {

      swift_release_n();
      if (!a1) {
        goto LABEL_74;
      }
    }
    swift_retain();
    CodeGenBase.entity.getter();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v137) {
      break;
    }
    type metadata accessor for UsoEntity_common_PhoneNumber();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t v28 = (char *)v134;
    swift_retain();
    a1 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    swift_release();
    uint64_t v29 = MEMORY[0x263F8EE78];
    uint64_t v135 = MEMORY[0x263F8EE78];
    uint64_t v30 = *(char **)(a1 + 16);
    uint64_t v122 = a2;
    uint64_t v125 = v28;
    if (!v30)
    {
LABEL_68:
      swift_bridgeObjectRelease();
      if (*(void *)(v29 + 16))
      {
        uint64_t v70 = v132;
        unint64_t v71 = v123;
        (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v123, v29 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80)), v4);
        swift_release();
        uint64_t v72 = UsoIdentifier.value.getter();
        uint64_t v74 = v73;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v4);
      }
      else
      {
        swift_release();
        uint64_t v84 = dispatch thunk of UsoEntity_common_PhoneNumber.label.getter();
        uint64_t v72 = v84;
        if (v85)
        {
          uint64_t v72 = String.convertToContactAttributeLabel.getter(v84, v85);
          uint64_t v74 = v86;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v74 = 0;
        }
      }
      swift_bridgeObjectRetain_n();
      unint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v106, v107))
      {
        unint64_t v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(void *)&long long v134 = v109;
        *(_DWORD *)unint64_t v108 = 136315138;
        uint64_t v135 = v72;
        uint64_t v136 = v74;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v110 = String.init<A>(describing:)();
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v106, v107, "#SiriKitGetEntityIntent address was converted to a phone number with value %s", v108, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v109, -1, -1);
        unint64_t v112 = v108;
        a2 = v122;
        MEMORY[0x230F85DE0](v112, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      swift_release();
      *(void *)a2 = v72;
      *(void *)(a2 + 8) = v74;
      char v78 = 1;
      goto LABEL_95;
    }
    unint64_t v31 = 0;
    uint64_t v131 = (char *)(v132 + 16);
    a2 = v132 + 32;
    id v129 = (char *)(v132 + 8);
    v126 = v30;
    while (v31 < *(void *)(a1 + 16))
    {
      unint64_t v32 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      uint64_t v33 = *(void *)(v132 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v18, a1 + v32 + v33 * v31, v4);
      uint64_t v34 = UsoIdentifier.namespace.getter();
      if (v35)
      {
        if (v34 == 0x707954656E6F6870 && v35 == 0xE900000000000065)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          uint64_t v38 = *(void (**)(unint64_t, void (**)(char *, uint64_t), uint64_t))a2;
          (*(void (**)(void (**)(char *, uint64_t), char *, uint64_t))a2)(v128, v18, v4);
          uint64_t v39 = v135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v39 = v135;
          }
          unint64_t v40 = *(void *)(v39 + 16);
          if (v40 >= *(void *)(v39 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v39 = v135;
          }
          *(void *)(v39 + 16) = v40 + 1;
          unint64_t v41 = v39 + v32 + v40 * v33;
          uint64_t v4 = v130;
          v38(v41, v128, v130);
          uint64_t v135 = v39;
          uint64_t v30 = v126;
          goto LABEL_24;
        }
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v37) {
          goto LABEL_19;
        }
      }
      (*(void (**)(char *, uint64_t))v129)(v18, v4);
LABEL_24:
      if (v30 == (char *)++v31)
      {
        uint64_t v29 = v135;
        a2 = v122;
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_once();
  }
  outlined destroy of SemanticValue?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
LABEL_27:
  swift_retain();
  CodeGenBase.entity.getter();
  swift_release();
  static UsoEntity_CodeGenConverter.convert(entity:)();
  swift_release();
  if (!v137)
  {
    outlined destroy of SemanticValue?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
LABEL_48:
    swift_retain();
    CodeGenBase.entity.getter();
    swift_release();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v137)
    {
      type metadata accessor for UsoEntity_common_PostalAddress();
      if (swift_dynamicCast())
      {
        uint64_t v55 = (char *)v134;
        swift_retain();
        uint64_t v56 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_release();
        uint64_t v57 = MEMORY[0x263F8EE78];
        uint64_t v135 = MEMORY[0x263F8EE78];
        uint64_t v18 = *(char **)(v56 + 16);
        v126 = v55;
        if (!v18) {
          goto LABEL_79;
        }
        uint64_t v122 = a2;
        unint64_t v58 = 0;
        a2 = v132 + 16;
        uint64_t v131 = (char *)(v132 + 32);
        uint64_t v128 = (void (**)(char *, uint64_t))(v132 + 8);
        while (1)
        {
          if ((unint64_t)v58 >= *(void *)(v56 + 16)) {
            goto LABEL_107;
          }
          unint64_t v59 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
          uint64_t v60 = *(void *)(v132 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v129, v56 + v59 + v60 * (void)v58, v4);
          uint64_t v61 = UsoIdentifier.namespace.getter();
          if (v62)
          {
            if (v61 == 0x5473736572646461 && v62 == 0xEB00000000657079)
            {
              swift_bridgeObjectRelease();
LABEL_61:
              unint64_t v65 = v18;
              id v66 = *(void (**)(unint64_t, char *, uint64_t))v131;
              (*(void (**)(char *, char *, uint64_t))v131)(v125, v129, v4);
              uint64_t v67 = v135;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v67 = v135;
              }
              unint64_t v68 = *(void *)(v67 + 16);
              if (v68 >= *(void *)(v67 + 24) >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v67 = v135;
              }
              *(void *)(v67 + 16) = v68 + 1;
              unint64_t v69 = v67 + v59 + v68 * v60;
              uint64_t v4 = v130;
              v66(v69, v125, v130);
              uint64_t v135 = v67;
              uint64_t v18 = v65;
              goto LABEL_66;
            }
            char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v64) {
              goto LABEL_61;
            }
          }
          (*v128)(v129, v4);
LABEL_66:
          ++v58;
          a1 = v127;
          if (v18 == v58)
          {
            uint64_t v57 = v135;
            a2 = v122;
LABEL_79:
            swift_bridgeObjectRelease();
            if (*(void *)(v57 + 16))
            {
              uint64_t v87 = v132;
              uint64_t v88 = v123;
              (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v123, v57 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80)), v4);
              swift_release();
              uint64_t v89 = UsoIdentifier.value.getter();
              uint64_t v91 = v90;
              (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v4);
              goto LABEL_85;
            }
            swift_release();
            uint64_t v95 = dispatch thunk of UsoEntity_common_PostalAddress.label.getter();
            if (v96)
            {
              uint64_t v89 = String.convertToContactAttributeLabel.getter(v95, v96);
              uint64_t v91 = v97;
              swift_bridgeObjectRelease();
LABEL_85:
              *(void *)&long long v134 = v89;
            }
            else
            {
              if (UsoEntity_common_PostalAddress.requestedAddressField.getter() == 5)
              {
                uint64_t v89 = 0;
                uint64_t v91 = 0;
              }
              else
              {
                ContactNLIntent.ContactPostalAddressField.rawValue.getter();
                uint64_t v89 = v120;
                uint64_t v91 = v121;
              }
              *(void *)&long long v134 = v89;
            }
            *((void *)&v134 + 1) = v91;
            swift_bridgeObjectRetain_n();
            uint64_t v98 = Logger.logObject.getter();
            os_log_type_t v99 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v98, v99))
            {
              uint64_t v100 = a2;
              uint64_t v101 = (uint8_t *)swift_slowAlloc();
              uint64_t v102 = swift_slowAlloc();
              uint64_t v133 = v102;
              *(_DWORD *)uint64_t v101 = 136315138;
              uint64_t v135 = v89;
              uint64_t v136 = v91;
              swift_bridgeObjectRetain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              uint64_t v103 = String.init<A>(describing:)();
              uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v133);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_22D49E000, v98, v99, "#SiriKitGetEntityIntent address was converted to a postal address with value %s", v101, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x230F85DE0](v102, -1, -1);
              uint64_t v105 = v101;
              a2 = v100;
              MEMORY[0x230F85DE0](v105, -1, -1);
              swift_release();
            }
            else
            {

              swift_release();
              swift_bridgeObjectRelease_n();
            }
            swift_release();
            swift_beginAccess();
            *(_OWORD *)a2 = v134;
            char v78 = 2;
LABEL_95:
            *(unsigned char *)(a2 + 16) = v78;
            return;
          }
        }
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
    }
    char v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      unint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v77 = 0;
      _os_log_impl(&dword_22D49E000, v75, v76, "#SiriKitGetEntityIntent address did not convert to a known contact address type", v77, 2u);
      MEMORY[0x230F85DE0](v77, -1, -1);
      swift_release();
    }
    else
    {

      swift_release();
    }
LABEL_74:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    char v78 = -1;
    goto LABEL_95;
  }
  type metadata accessor for UsoEntity_common_EmailAddress();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v125 = (char *)v134;
  swift_retain();
  uint64_t v18 = (char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  swift_release();
  uint64_t v42 = MEMORY[0x263F8EE78];
  uint64_t v135 = MEMORY[0x263F8EE78];
  uint64_t v43 = *((void *)v18 + 2);
  uint64_t v122 = a2;
  if (!v43) {
    goto LABEL_75;
  }
  unint64_t v44 = 0;
  a2 = v132 + 16;
  uint64_t v128 = (void (**)(char *, uint64_t))(v132 + 8);
  id v129 = (char *)(v132 + 32);
  while (2)
  {
    if (v44 >= *((void *)v18 + 2)) {
      goto LABEL_106;
    }
    unint64_t v45 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
    uint64_t v46 = *(void *)(v132 + 72);
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v131, &v18[v45 + v46 * v44], v4);
    uint64_t v47 = UsoIdentifier.namespace.getter();
    if (v48)
    {
      if (v47 == 0x7079546C69616D65 && v48 == 0xE900000000000065)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v50 & 1) == 0) {
          goto LABEL_38;
        }
      }
      a1 = v43;
      unint64_t v51 = *(void (**)(unint64_t, char *, uint64_t))v129;
      (*(void (**)(char *, char *, uint64_t))v129)(v126, v131, v4);
      uint64_t v52 = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v135;
      }
      unint64_t v53 = *(void *)(v52 + 16);
      if (v53 >= *(void *)(v52 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = v135;
      }
      *(void *)(v52 + 16) = v53 + 1;
      unint64_t v54 = v52 + v45 + v53 * v46;
      uint64_t v4 = v130;
      v51(v54, v126, v130);
      uint64_t v135 = v52;
      uint64_t v43 = a1;
    }
    else
    {
LABEL_38:
      (*v128)(v131, v4);
    }
    if (v43 != ++v44) {
      continue;
    }
    break;
  }
  uint64_t v42 = v135;
  a2 = v122;
LABEL_75:
  swift_bridgeObjectRelease();
  if (*(void *)(v42 + 16))
  {
    uint64_t v79 = v132;
    unint64_t v80 = v123;
    (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v123, v42 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), v4);
    swift_release();
    uint64_t v81 = UsoIdentifier.value.getter();
    uint64_t v83 = v82;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v4);
  }
  else
  {
    swift_release();
    uint64_t v92 = dispatch thunk of UsoEntity_common_EmailAddress.label.getter();
    uint64_t v81 = v92;
    if (v93)
    {
      uint64_t v81 = String.convertToContactAttributeLabel.getter(v92, v93);
      uint64_t v83 = v94;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v83 = 0;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    *(void *)&long long v134 = v116;
    *(_DWORD *)uint64_t v115 = 136315138;
    uint64_t v135 = v81;
    uint64_t v136 = v83;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v117 = String.init<A>(describing:)();
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v113, v114, "#SiriKitGetEntityIntent address was converted to an email with value %s", v115, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v116, -1, -1);
    uint64_t v119 = v115;
    a2 = v122;
    MEMORY[0x230F85DE0](v119, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  swift_release();
  *(void *)a2 = v81;
  *(void *)(a2 + 8) = v83;
  *(unsigned char *)(a2 + 16) = 0;
}

void UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v59 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_40_13();
  uint64_t v7 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_4_4();
  uint64_t v68 = v11;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_25();
  uint64_t v58 = v13;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_25();
  uint64_t v65 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_26_11();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v55 - v19;
  MEMORY[0x270FA5388](v18);
  os_log_type_t v22 = (char *)&v55 - v21;
  uint64_t v60 = v0;
  uint64_t v23 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v67 = v7;
  if (v23)
  {
    uint64_t v25 = v23;
    uint64_t v70 = MEMORY[0x263F8EE78];
    uint64_t v26 = *(void *)(v23 + 16);
    uint64_t v64 = v23;
    uint64_t v69 = v26;
    if (v26)
    {
      uint64_t v56 = v20;
      uint64_t v57 = v1;
      unint64_t v27 = 0;
      unint64_t v62 = v9 + 8;
      uint64_t v63 = v2;
      id v66 = (void (**)(void))(v9 + 32);
      uint64_t v61 = (char *)(v9 + 16);
      do
      {
        if (v27 >= *(void *)(v25 + 16)) {
          goto LABEL_43;
        }
        OUTLINED_FUNCTION_61_1();
        v28();
        if (closure #1 in UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter((uint64_t)v22))
        {
          uint64_t v29 = *v66;
          OUTLINED_FUNCTION_11();
          v29();
          uint64_t v30 = v70;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_24_18();
            uint64_t v30 = v70;
          }
          unint64_t v31 = *(void *)(v30 + 16);
          if (v31 >= *(void *)(v30 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v30 = v70;
          }
          *(void *)(v30 + 16) = v31 + 1;
          uint64_t v7 = v67;
          OUTLINED_FUNCTION_11();
          v29();
          uint64_t v70 = v30;
          uint64_t v25 = v64;
        }
        else
        {
          uint64_t v32 = OUTLINED_FUNCTION_23_12();
          v33(v32);
        }
        ++v27;
      }
      while (v69 != v27);
      uint64_t v34 = v70;
      uint64_t v20 = v56;
      uint64_t v1 = v57;
    }
    else
    {
      uint64_t v34 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    specialized Collection.first.getter(v34, v1);
    swift_release();
    OUTLINED_FUNCTION_6_3(v1, 1, v7);
    if (!v35)
    {
      OUTLINED_FUNCTION_11();
      v49();
      UsoIdentifier.value.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v7);
LABEL_38:
      OUTLINED_FUNCTION_71_0();
      OUTLINED_FUNCTION_8();
      return;
    }
    outlined destroy of SemanticValue?(v1, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  uint64_t v36 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v70 = v24;
  uint64_t v37 = *(void *)(v36 + 16);
  if (!v37)
  {
    uint64_t v48 = v24;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v50 = v59;
    specialized Collection.first.getter(v48, v59);
    swift_release();
    OUTLINED_FUNCTION_6_3(v50, 1, v7);
    if (v35)
    {
      outlined destroy of SemanticValue?(v50, &demangling cache variable for type metadata for UsoIdentifier?);
      dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter();
      if (!v51)
      {
        if (dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter())
        {
          dispatch thunk of CodeGenExpression.operand.getter();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v52 = v58;
      OUTLINED_FUNCTION_11();
      v53();
      UsoIdentifier.value.getter();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v52, v7);
    }
    goto LABEL_38;
  }
  unint64_t v38 = 0;
  uint64_t v69 = v9 + 16;
  id v66 = (void (**)(void))(v9 + 32);
  uint64_t v63 = v37;
  uint64_t v64 = v9 + 8;
  uint64_t v61 = "ontacts.Deny";
  unint64_t v62 = 0x800000022D5A65E0;
  uint64_t v39 = v65;
  while (v38 < *(void *)(v36 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v39, v36+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v38, v7);
    uint64_t v40 = UsoIdentifier.namespace.getter();
    if (v41)
    {
      if (v40 == 0xD000000000000012 && v41 == v62)
      {
        swift_bridgeObjectRelease();
LABEL_26:
        uint64_t v43 = *v66;
        OUTLINED_FUNCTION_11();
        v43();
        uint64_t v44 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_24_18();
          uint64_t v44 = v70;
        }
        unint64_t v45 = *(void *)(v44 + 16);
        if (v45 >= *(void *)(v44 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v44 = v70;
        }
        *(void *)(v44 + 16) = v45 + 1;
        uint64_t v7 = v67;
        OUTLINED_FUNCTION_11();
        v43();
        uint64_t v70 = v44;
        uint64_t v39 = v65;
        uint64_t v37 = v63;
        goto LABEL_32;
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_26;
      }
    }
    uint64_t v46 = OUTLINED_FUNCTION_23_12();
    v47(v46);
LABEL_32:
    if (v37 == ++v38)
    {
      uint64_t v48 = v70;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
  OUTLINED_FUNCTION_23();
  v54();
  swift_bridgeObjectRelease();
  swift_release();
  __break(1u);
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for ContactAttribute();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntityBuilderProtocol_common_ContactAddress?);
  return Transformer.init(transform:)();
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(*a1, sel_contactAttributeType);
  if (v4 == (id)1)
  {
    type metadata accessor for UsoEntityBuilder_common_EmailAddress();
    id v5 = (id)UsoEntityBuilder_common_EmailAddress.init(emailAddress:)(v3);
    uint64_t v6 = MEMORY[0x263F734F0];
    goto LABEL_10;
  }
  if (v4 == (id)3)
  {
    id v5 = objc_msgSend(v3, sel_postalAddress);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      id v7 = v5;
      id v8 = CNLabeledValue<>.init(address:)(v7);
      type metadata accessor for UsoEntityBuilder_common_PostalAddress();
      static UsoEntityBuilder_common_PostalAddress.from(_:)();
      id v5 = v9;

      uint64_t v6 = MEMORY[0x263F735B8];
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  if (v4 != (id)2)
  {
    id v5 = 0;
    goto LABEL_9;
  }
  type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
  id v5 = (id)UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(v3);
  uint64_t v6 = MEMORY[0x263F73488];
LABEL_10:
  *a2 = v5;
  a2[1] = v6;
}

void closure #1 in static Transformer<>.transformer(_:referenceResolver:)(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
}

{
  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(a1, a2, MEMORY[0x263F73310], a3);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  char v24;
  void (*v25)(void *, uint64_t);
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  int updated;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  id v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char v65;
  char v66;
  char v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t vars0;
  uint64_t vars8;

  id v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  id v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_4_30();
  uint64_t v9 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_11_3();
  uint64_t v15 = (void *)(v13 - v14);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v71 - v17;
  uint64_t v72 = a2;
  if (a1) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntent()), sel_init);
  }
  os_log_type_t v76 = v19;
  uint64_t v20 = a1;
  OUTLINED_FUNCTION_52_7();
  if (v74)
  {
    dispatch thunk of UsoEntity_common_Person.definedValue.getter();
    uint64_t v21 = OUTLINED_FUNCTION_53_6();
    if (__swift_getEnumTagSinglePayload(v21, v22, v9) == 1)
    {
      outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    }
    else
    {
      OUTLINED_FUNCTION_11();
      v23();
      (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, *MEMORY[0x263F72A70], v9);
      lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
      uint64_t v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v25 = *(void (**)(void *, uint64_t))(v11 + 8);
      v25(v15, v9);
      v25(v18, v9);
      if ((v24 & 1) == 0)
      {
        uint64_t v70 = v76;
        swift_release();

        goto LABEL_36;
      }
    }
    dispatch thunk of UsoEntity_common_Person.name.getter();
    if (v26)
    {
      unint64_t v27 = v76;
      type metadata accessor for Contact();
      uint64_t v28 = v27;
      uint64_t v36 = OUTLINED_FUNCTION_3_34((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35, v71, v72, v73, v74, v75, (uint64_t)v76, v77, v78, v79, v80, v81,
              v82);
      objc_msgSend(v15, sel_setRelatedContact_, v36);
    }
    swift_release();
  }
  updated = UsoTask_update_common_Person.updateTaskType.getter();
  if (updated)
  {
    if (updated == 1)
    {
      if ((UsoTask_update_common_Person.updateRelationshipInfoLocation.getter() & 1) != 0
        && (OUTLINED_FUNCTION_51_8(), v74))
      {
        OUTLINED_FUNCTION_52_7();
        if (v74)
        {
          dispatch thunk of UsoEntity_common_Person.name.getter();
          uint64_t v39 = v38;
          swift_release();
          if (v39)
          {
            uint64_t v40 = v76;
            type metadata accessor for Contact();
            uint64_t v41 = v40;
            unint64_t v49 = OUTLINED_FUNCTION_3_34((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, vars0,
                    vars8);
            objc_msgSend(v15, sel_setRelatedContact_, v49);
          }
        }
        UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)();
        if ((v50 & 1) == 0)
        {
          uint64_t v51 = v76;
          OUTLINED_FUNCTION_52_7();
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v52 = UsoTask_update_common_Person.updateRelationshipInfoLocation.getter();
        if (v52 == 2) {
          goto LABEL_33;
        }
        if (v52) {
          goto LABEL_33;
        }
        OUTLINED_FUNCTION_52_7();
        if (!v74) {
          goto LABEL_33;
        }
        OUTLINED_FUNCTION_51_8();
        if (v74)
        {
          dispatch thunk of UsoEntity_common_Person.name.getter();
          unint64_t v54 = v53;
          swift_release();
          if (v54)
          {
            uint64_t v55 = v76;
            type metadata accessor for Contact();
            uint64_t v56 = v55;
            uint64_t v64 = OUTLINED_FUNCTION_3_34((uint64_t)v56, v57, v58, v59, v60, v61, v62, v63, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, vars0,
                    vars8);
            objc_msgSend(v15, sel_setRelatedContact_, v64);
          }
        }
        UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)();
        if ((v65 & 1) == 0)
        {
          uint64_t v51 = v76;
          OUTLINED_FUNCTION_51_8();
LABEL_30:
          specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
          uint64_t v67 = v66;

          swift_release();
          if (v67)
          {
            uint64_t v68 = v51;
            ModifyContactAttributeIntent.runReferenceResolution(_:)(v72);
          }
          goto LABEL_32;
        }
      }
      swift_release();

LABEL_36:
      uint64_t v69 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    OUTLINED_FUNCTION_51_8();
    if (v74)
    {
      UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)();
LABEL_32:
      swift_release();
    }
  }
LABEL_33:
  uint64_t v69 = v76;
LABEL_37:
  *a3 = v69;
}

void *specialized SiriKitGetEntityIntent.resolveReference(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = &v52[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  uint64_t v55 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v54 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  MEMORY[0x270FA5388](v6);
  id v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = &v52[-v14];
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = &v52[-v16];
  uint64_t v56 = v0;
  specialized SiriKitGetEntityIntent.setIsMe(reference:)();
  if (!dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter())
  {
    uint64_t v19 = dispatch thunk of UsoEntity_common_Person.name.getter();
    uint64_t v21 = v56;
    if (v20)
    {
      uint64_t v22 = v19;
      uint64_t v23 = v20;
      uint64_t v59 = v19;
      uint64_t v60 = v20;
      uint64_t v57 = 39;
      unint64_t v58 = 0xE100000000000000;
      uint64_t v24 = type metadata accessor for Locale();
      __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v24);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      char v26 = v25;
      outlined destroy of SemanticValue?((uint64_t)v3, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        uint64_t v59 = v22;
        uint64_t v60 = v23;
        uint64_t v22 = StringProtocol.substring(to:)();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        uint64_t v23 = v28;
      }
      uint64_t v29 = (void *)MEMORY[0x230F84F70](v22, v23);
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)MEMORY[0x230F84F70](0x656D614E6C6C7566, 0xE800000000000000);
      objc_msgSend(v21, sel_setValue_forKey_, v29, v30);
    }
    if (dispatch thunk of UsoEntity_common_Person.associatedOrganization.getter())
    {
      uint64_t v31 = dispatch thunk of UsoEntity_common_Organization.name.getter();
      uint64_t v33 = v32;
      swift_release();
      if (v33)
      {
        uint64_t v34 = (void *)MEMORY[0x230F84F70](v31, v33);
        swift_bridgeObjectRelease();
        char v35 = (void *)MEMORY[0x230F84F70](0xD000000000000010, 0x800000022D5A67B0);
        objc_msgSend(v21, sel_setValue_forKey_, v34, v35);
      }
    }
    uint64_t v36 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
    specialized static SiriKitGetEntityIntent.resolveAddressType(from:)(v36, (uint64_t)&v59);
    swift_release();
    uint64_t v37 = v59;
    uint64_t v38 = v60;
    unsigned __int8 v39 = v61;
    if (v61)
    {
      if (v61 != 1)
      {
        if (v61 != 2) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      if (v60) {
        uint64_t v46 = MEMORY[0x230F84F70](v59, v60);
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = 0x6D754E656E6F6870;
      unint64_t v48 = 0xEB00000000726562;
    }
    else
    {
      if (v60) {
        uint64_t v46 = MEMORY[0x230F84F70](v59, v60);
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = 0x6464416C69616D65;
      unint64_t v48 = 0xEC00000073736572;
    }
    unint64_t v49 = (void *)MEMORY[0x230F84F70](v47, v48);
    objc_msgSend(v21, sel_setValue_forKey_, v46, v49);
    swift_unknownObjectRelease();

LABEL_35:
    outlined consume of SpecifyingContactAddressType?(v37, v38, v39);
LABEL_36:
    id v50 = v21;
    return v21;
  }
  if (!dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter())
  {
LABEL_21:
    UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
    if (v43)
    {
      uint64_t v44 = MEMORY[0x230F84F70]();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = 0;
    }
    uint64_t v21 = v56;
    unint64_t v45 = (void *)MEMORY[0x230F84F70](0x52746361746E6F63, 0xEF6E6F6974616C65);
    objc_msgSend(v21, sel_setValue_forKey_, v44, v45);
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_36;
  }
  dispatch thunk of UsoEntity_common_Person.definedValue.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v55 + 104))(v15, *MEMORY[0x263F72A70], v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v4);
  uint64_t v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of Result<RRResult, Error>((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of Result<RRResult, Error>((uint64_t)v15, v18, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v4) == 1)
  {
    swift_release();
    outlined destroy of SemanticValue?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of SemanticValue?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    if (__swift_getEnumTagSinglePayload(v18, 1, v4) == 1)
    {
      outlined destroy of SemanticValue?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  outlined init with copy of Result<RRResult, Error>((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v18, 1, v4) == 1)
  {
    swift_release();
    outlined destroy of SemanticValue?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of SemanticValue?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v12, v4);
LABEL_19:
    outlined destroy of SemanticValue?((uint64_t)v8, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
    goto LABEL_23;
  }
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v55 + 32))(v54, v18, v4);
  lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
  int v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  char v42 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
  v42(v40, v4);
  outlined destroy of SemanticValue?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined destroy of SemanticValue?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v42(v12, v4);
  outlined destroy of SemanticValue?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (v53) {
    goto LABEL_21;
  }
LABEL_23:
  swift_release();
  return 0;
}

void SiriKitGetEntityIntent.resolveReference(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v7 = OUTLINED_FUNCTION_10_0(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v59 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_4();
  uint64_t v57 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_42_12();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v18 = OUTLINED_FUNCTION_10_0(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_11_3();
  uint64_t v21 = v19 - v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_13_10();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_40_13();
  uint64_t v60 = v0;
  SiriKitGetEntityIntent.setIsMe(reference:)(v5);
  if (!dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter())
  {
    uint64_t v27 = dispatch thunk of UsoEntity_common_Person.name.getter();
    uint64_t v29 = v0;
    if (v28)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v61 = v27;
      uint64_t v62 = v28;
      uint64_t v32 = type metadata accessor for Locale();
      __swift_storeEnumTagSinglePayload(v10, 1, 1, v32);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      char v34 = v33;
      outlined destroy of SemanticValue?(v10, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {
        uint64_t v61 = v30;
        uint64_t v62 = v31;
        uint64_t v30 = StringProtocol.substring(to:)();
        uint64_t v36 = v35;
        swift_bridgeObjectRelease();
        uint64_t v31 = v36;
      }
      uint64_t v37 = (void *)MEMORY[0x230F84F70](v30, v31);
      swift_bridgeObjectRelease();
      uint64_t v38 = (void *)MEMORY[0x230F84F70](0x656D614E6C6C7566, 0xE800000000000000);
      objc_msgSend(v60, sel_setValue_forKey_, v37, v38);
    }
    if (dispatch thunk of UsoEntity_common_Person.associatedOrganization.getter())
    {
      uint64_t v39 = dispatch thunk of UsoEntity_common_Organization.name.getter();
      uint64_t v41 = v40;
      swift_release();
      if (v41)
      {
        char v42 = (void *)MEMORY[0x230F84F70](v39, v41);
        swift_bridgeObjectRelease();
        uint64_t v43 = (void *)MEMORY[0x230F84F70](0xD000000000000010, 0x800000022D5A67B0);
        objc_msgSend(v60, sel_setValue_forKey_, v42, v43);
      }
    }
    dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
    static SiriKitGetEntityIntent.resolveAddressType(from:)();
    swift_release();
    if (v63)
    {
      if (v63 != 1)
      {
        if (v63 != 2) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if (v62) {
        uint64_t v50 = MEMORY[0x230F84F70](v61, v62);
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = 0x6D754E656E6F6870;
      unint64_t v52 = 0xEB00000000726562;
    }
    else
    {
      if (v62) {
        uint64_t v50 = MEMORY[0x230F84F70](v61, v62);
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = 0x6464416C69616D65;
      unint64_t v52 = 0xEC00000073736572;
    }
    int v53 = (void *)MEMORY[0x230F84F70](v51, v52);
    objc_msgSend(v60, sel_setValue_forKey_, v50, v53);
    swift_unknownObjectRelease();

LABEL_38:
    uint64_t v54 = OUTLINED_FUNCTION_71_0();
    outlined consume of SpecifyingContactAddressType?(v54, v55, v63);
LABEL_39:
    id v56 = v29;
    goto LABEL_40;
  }
  if (!dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter()) {
    goto LABEL_24;
  }
  dispatch thunk of UsoEntity_common_Person.definedValue.getter();
  uint64_t v24 = OUTLINED_FUNCTION_35_14();
  v25(v24);
  OUTLINED_FUNCTION_58_5();
  uint64_t v26 = v3 + *(int *)(v15 + 48);
  outlined init with copy of Result<RRResult, Error>(v2, v3, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of Result<RRResult, Error>(v1, v26, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_6_3(v3, 1, v11);
  if (v44)
  {
    swift_release();
    OUTLINED_FUNCTION_57_2();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_6_3(v26, 1, v11);
    if (v44)
    {
      outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  outlined init with copy of Result<RRResult, Error>(v3, v21, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_6_3(v26, 1, v11);
  if (v44)
  {
    swift_release();
    OUTLINED_FUNCTION_57_2();
    OUTLINED_FUNCTION_64_4();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v21, v11);
LABEL_22:
    outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_11();
  v45();
  lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v46(v57, v11);
  OUTLINED_FUNCTION_57_2();
  OUTLINED_FUNCTION_64_4();
  v46(v21, v11);
  outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (v58)
  {
LABEL_24:
    UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
    if (v47)
    {
      uint64_t v48 = MEMORY[0x230F84F70]();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v29 = v60;
    unint64_t v49 = (void *)MEMORY[0x230F84F70](0x52746361746E6F63, 0xEF6E6F6974616C65);
    objc_msgSend(v60, sel_setValue_forKey_, v48, v49);
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_39;
  }
LABEL_26:
  swift_release();
LABEL_40:
  OUTLINED_FUNCTION_8();
}

void closure #1 in static Transformer<>.transformer(_:)(void *a1@<X1>, void *a2@<X8>)
{
}

{
  closure #1 in static Transformer<>.transformer(_:)(a1, MEMORY[0x263F722C0], a2);
}

void closure #1 in static Transformer<>.transformer(_:referenceResolver:)(void *a1@<X1>, uint64_t a2@<X2>, void (*a3)(uint64_t *__return_ptr, void *)@<X3>, void *a4@<X8>)
{
  if (a1) {
    id v8 = a1;
  }
  else {
    id v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  }
  a3(&v12, a1);
  if (v12)
  {
    swift_retain();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    char v10 = v9;
    swift_release();
    if (v10) {
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, (void (*)(uint64_t, unsigned char *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    }
    uint64_t v11 = specialized SiriKitGetEntityIntent.resolveReference(_:)();
    swift_release();
  }
  else
  {
    uint64_t v11 = v8;
  }
  *a4 = v11;
}

void closure #1 in static Transformer<>.transformer(_:)(void *a1@<X1>, void (*a2)(uint64_t *__return_ptr, void *)@<X2>, void *a3@<X8>)
{
  if (a1) {
    id v6 = a1;
  }
  else {
    id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  }
  a2(&v8, a1);
  if (v8)
  {
    uint64_t v7 = specialized SiriKitGetEntityIntent.resolveReference(_:)();
    swift_release();
  }
  else
  {
    uint64_t v7 = v6;
  }
  *a3 = v7;
}

uint64_t static GetContactAttributeIntent.from(_:_:referenceResolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
}

{
  void *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
}

{
  void *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
}

uint64_t static GetContactAttributeIntent.from(_:_:referenceResolver:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    id v2 = (id)v0[4];
  }
  else
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntent()), sel_init);
    uint64_t v1 = 0;
  }
  v0[6] = v2;
  id v3 = v1;
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  uint64_t v4 = v0[2];
  v0[7] = v4;
  if (v4)
  {
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    void *v5 = v0;
    v5[1] = static GetContactAttributeIntent.from(_:_:referenceResolver:);
    OUTLINED_FUNCTION_49_4();
    return GetContactAttributeIntent.resolveReferenceAndAttribute(_:)();
  }
  else
  {

    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *id v2 = v1;
  id v3 = *v0;
  OUTLINED_FUNCTION_3();
  NSObject *v4 = v3;
  *(void *)(v6 + 72) = v5;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = *(void **)(v0 + 72);

  if (v1)
  {
    GetContactAttributeIntent.resolveStructuredName(from:)();
    swift_retain();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    id v3 = v2;
    swift_release();
    if (v3) {
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(*(void *)(v0 + 40), (void (*)(uint64_t, unsigned char *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    }
    uint64_t v4 = *(void *)(v0 + 48);
    swift_release();
  }
  else
  {

    swift_release();
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    id v2 = (id)v0[4];
  }
  else
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntent()), sel_init);
    uint64_t v1 = 0;
  }
  v0[6] = v2;
  id v3 = v1;
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  uint64_t v4 = v0[2];
  v0[7] = v4;
  if (v4)
  {
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    void *v5 = v0;
    v5[1] = static GetContactAttributeIntent.from(_:_:referenceResolver:);
    OUTLINED_FUNCTION_49_4();
    return GetContactAttributeIntent.resolveReferenceAndAttribute(_:)();
  }
  else
  {

    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *id v2 = v1;
  id v3 = *v0;
  OUTLINED_FUNCTION_3();
  NSObject *v4 = v3;
  *(void *)(v6 + 72) = v5;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)v0[7];
  if (v1)
  {
    id v2 = (id)v0[7];
  }
  else
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntent()), sel_init);
    uint64_t v1 = 0;
  }
  v0[9] = v2;
  id v3 = v1;
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  v0[10] = v0[2];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  NSObject *v4 = v0;
  v4[1] = static GetContactAttributeIntent.from(_:_:referenceResolver:);
  OUTLINED_FUNCTION_49_4();
  return GetContactAttributeIntent.resolveReferenceAndAttribute(_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *id v2 = v1;
  id v3 = *v0;
  OUTLINED_FUNCTION_3();
  NSObject *v4 = v3;
  *(void *)(v6 + 96) = v5;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  char v35;
  char v36;
  uint64_t (*v37)(uint64_t);
  void *v39;
  uint64_t v40;

  uint64_t v1 = *(void **)(v0 + 96);

  if (v1)
  {
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
    if (*(void *)(v0 + 24))
    {
      id v2 = objc_msgSend(*(id *)(v0 + 72), sel_contactAttributeToGet);
      if (!v2 || (id v3 = v2, v4 = objc_msgSend(v2, sel_contactAttributeType), v3, v4 != (id)4))
      {
        uint64_t v5 = dispatch thunk of UsoEntity_common_Person.age.getter();
        swift_release();
        if (v5)
        {
          id v6 = *(void **)(v0 + 72);
          type metadata accessor for ContactAttribute();
          uint64_t v14 = OUTLINED_FUNCTION_2_39(4, v7, v8, v9, v10, v11, v12, v13, 0);
        }
        else
        {
          uint64_t v16 = dispatch thunk of UsoEntity_common_Person.birthdate.getter();
          swift_release();
          if (v16)
          {
            id v6 = *(void **)(v0 + 72);
            type metadata accessor for ContactAttribute();
            uint64_t v14 = OUTLINED_FUNCTION_2_39(5, v17, v18, v19, v20, v21, v22, v23, 0);
          }
          else
          {
            dispatch thunk of UsoEntity_common_Person.phoneticName.getter();
            OUTLINED_FUNCTION_63_2();
            id v6 = *(void **)(v0 + 72);
            type metadata accessor for ContactAttribute();
            OUTLINED_FUNCTION_37_15();
            uint64_t v14 = OUTLINED_FUNCTION_2_39(9, v24, v25, v26, v27, v28, v29, v30, v39);
          }
        }
        uint64_t v31 = v14;
        objc_msgSend(v6, sel_setContactAttributeToGet_, v14);

        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
        if (!*(void *)(v0 + 40)
          || (uint64_t v32 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter(), swift_release(), !v32)
          || (char v33 = *(void **)(v0 + 72),
              swift_release(),
              char v34 = objc_msgSend(v33, sel_contactAttributeToGet),
              v34,
              !v34))
        {
          if (dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter())
          {
            GetContactAttributeIntent.setHandleAttribute(from:)();
            swift_release();
          }
        }
      }
      swift_release();
    }
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    uint64_t v36 = v35;
    swift_release();
    if (v36) {
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(*(void *)(v0 + 64), (void (*)(uint64_t, unsigned char *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    }
    uint64_t v15 = *(void *)(v0 + 72);
  }
  else
  {

    uint64_t v15 = 0;
  }
  uint64_t v37 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v37(v15);
}

uint64_t GetContactAttributeIntent.resolveReferenceAndAttribute(_:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  v1[4] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for UsoIdentifier();
  v1[5] = v3;
  v1[6] = *(void *)(v3 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t (*v19)(void);
  void (*v20)(void);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void (*v45)(void, uint64_t, void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t (*v67)(void *);
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if (!v0[2])
  {
    uint64_t v2 = 0;
LABEL_61:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = (uint64_t (*)(void *))v0[1];
    return v67(v2);
  }
  swift_retain();
  SiriKitGetEntityIntent.resolveReference(_:)();
  uint64_t v2 = v1;

  if (!v2)
  {
    swift_release();
    goto LABEL_61;
  }
  if (dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter())
  {
    GetContactAttributeIntent.setHandleAttribute(from:)();
LABEL_59:
    swift_release();
    goto LABEL_60;
  }
  uint64_t v3 = dispatch thunk of UsoEntity_common_Person.associatedDate.getter();
  v0[10] = v3;
  if (v3)
  {
    uint64_t v4 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    uint64_t v69 = v6;
    dispatch thunk of UsoEntity_common_Date.name.getter();
    if (v7)
    {
      OUTLINED_FUNCTION_36_11();
      char v9 = v9 && v8 == 0xE800000000000000;
      if (v9)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      char v10 = OUTLINED_FUNCTION_27_16();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_41;
      }
    }
    unint64_t v71 = v5;
    uint64_t v11 = v69;
    uint64_t v12 = *(void *)(v69 + 16);
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v70 = v12;
    if (v12)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v0[6];
      while (1)
      {
        if (v14 >= *(void *)(v11 + 16))
        {
          __break(1u);
          return result;
        }
        (*(void (**)(void, unint64_t, void))(v15 + 16))(v0[9], v11+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v14, v0[5]);
        UsoIdentifier.value.getter();
        OUTLINED_FUNCTION_36_11();
        if (v9 && v16 == 0xE800000000000000) {
          break;
        }
        uint64_t v18 = OUTLINED_FUNCTION_27_16();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_27;
        }
        OUTLINED_FUNCTION_23();
        unint64_t result = v19();
LABEL_32:
        if (v12 == ++v14) {
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
LABEL_27:
      uint64_t v20 = *(void (**)(void))(v15 + 32);
      OUTLINED_FUNCTION_11();
      v20();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_24_18();
        uint64_t v5 = v71;
      }
      uint64_t v22 = *(void *)(v5 + 16);
      uint64_t v21 = *(void *)(v5 + 24);
      if (v22 >= v21 >> 1)
      {
        OUTLINED_FUNCTION_55_5(v21);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v71;
      }
      *(void *)(v5 + 16) = v22 + 1;
      OUTLINED_FUNCTION_11();
      unint64_t result = ((uint64_t (*)(void))v20)();
      unint64_t v71 = v5;
      uint64_t v11 = v69;
      goto LABEL_32;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v5 + 16);
    swift_release();
    if (v26)
    {
LABEL_41:
      swift_bridgeObjectRelease();
      uint64_t v27 = (void *)v0[3];
      type metadata accessor for ContactAttribute();
      uint64_t v35 = OUTLINED_FUNCTION_2_39(5, v28, v29, v30, v31, v32, v33, v34, 0);
      objc_msgSend(v27, sel_setContactAttributeToGet_, v35);

      goto LABEL_59;
    }
    if (v70)
    {
      char v44 = v0[6];
      unint64_t v45 = *(void (**)(void, uint64_t, void))(v44 + 16);
      OUTLINED_FUNCTION_38_12();
      uint64_t v47 = v11 + v46;
      uint64_t v48 = *(void *)(v44 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        v45(v0[7], v47, v0[5]);
        if (UsoIdentifier.value.getter() == 0x73726576696E6E61 && v49 == 0xEB00000000797261) {
          break;
        }
        uint64_t v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t v52 = OUTLINED_FUNCTION_65_1();
        v53(v52);
        if (v51) {
          goto LABEL_58;
        }
        v47 += v48;
        if (!--v70)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_53;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = OUTLINED_FUNCTION_65_1();
      v56(v55);
LABEL_58:
      uint64_t v57 = (void *)v0[3];
      swift_bridgeObjectRelease_n();
      type metadata accessor for ContactAttribute();
      OUTLINED_FUNCTION_37_15();
      uint64_t v65 = OUTLINED_FUNCTION_2_39(0, v58, v59, v60, v61, v62, v63, v64, v68);
      objc_msgSend(v57, sel_setContactAttributeToGet_, v65);

      goto LABEL_59;
    }
    swift_bridgeObjectRelease();
LABEL_53:
    uint64_t v54 = (void *)swift_task_alloc();
    v0[11] = v54;
    *uint64_t v54 = v0;
    v54[1] = GetContactAttributeIntent.resolveReferenceAndAttribute(_:);
  }
  else
  {
    uint64_t v23 = dispatch thunk of UsoEntity_common_Person.age.getter();
    v0[13] = v23;
    if (!v23)
    {
LABEL_60:
      uint64_t v2 = (void *)v0[3];
      swift_release();
      id v66 = v2;
      goto LABEL_61;
    }
    if (!dispatch thunk of UsoEntity_common_Age.referenceDateTime.getter()
      || (uint64_t v24 = dispatch thunk of UsoEntity_common_DateTime.date.getter(), v0[14] = v24, swift_release(), !v24))
    {
      type metadata accessor for ContactAttribute();
      uint64_t v43 = OUTLINED_FUNCTION_2_39(4, v36, v37, v38, v39, v40, v41, v42, 0);
      OUTLINED_FUNCTION_48_8((uint64_t)v43, sel_setContactAttributeToGet_);

      goto LABEL_59;
    }
    char v25 = (void *)swift_task_alloc();
    v0[15] = v25;
    *char v25 = v0;
    v25[1] = GetContactAttributeIntent.resolveReferenceAndAttribute(_:);
  }
  return static DateTimeUtil.getRequestedAgeDateTime(from:)();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 96) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t (*v14)(void *);
  void *v16;
  uint64_t v17;

  uint64_t v1 = (void *)v0[12];
  if (v1)
  {
    type metadata accessor for ContactAttribute();
    uint64_t v2 = v1;
    uint64_t v3 = OUTLINED_FUNCTION_16_21();
    uint64_t v11 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v3, v4, v5, v6, v7, v8, v9, v10, v16);
    OUTLINED_FUNCTION_48_8((uint64_t)v11, sel_setContactAttributeToGet_);
  }
  swift_release();
  uint64_t v12 = (void *)v0[3];
  swift_release();
  uint64_t v13 = v12;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void *))v0[1];
  return v14(v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 128) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t (*v23)(void *);
  void *v25;
  uint64_t v26;

  uint64_t v1 = (void *)v0[16];
  if (v1)
  {
    uint64_t v2 = (void *)v0[3];
    type metadata accessor for ContactAttribute();
    uint64_t v3 = v1;
    uint64_t v4 = OUTLINED_FUNCTION_16_21();
    uint64_t v12 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v4, v5, v6, v7, v8, v9, v10, v11, v25);
    objc_msgSend(v2, sel_setContactAttributeToGet_, v12);

    swift_release();
  }
  else
  {
    swift_release();
    type metadata accessor for ContactAttribute();
    uint64_t v20 = OUTLINED_FUNCTION_2_39(4, v13, v14, v15, v16, v17, v18, v19, 0);
    OUTLINED_FUNCTION_48_8((uint64_t)v20, sel_setContactAttributeToGet_);
  }
  swift_release();
  uint64_t v21 = (void *)v0[3];
  swift_release();
  uint64_t v22 = v21;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void *))v0[1];
  return v23(v21);
}

void GetContactAttributeIntent.resolveStructuredName(from:)()
{
  uint64_t v1 = v0;
  if (dispatch thunk of UsoEntity_common_Person.structuredName.getter())
  {
    swift_retain();
    CodeGenBase.entity.getter();
    swift_release();
    UsoEntity.attributes.getter();
    swift_release();
    if (one-time initialization token for GivenName != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = OUTLINED_FUNCTION_39_8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2)
    {
      type metadata accessor for ContactAttribute();
      OUTLINED_FUNCTION_37_15();
      uint64_t v10 = 7;
    }
    else
    {
      swift_retain();
      CodeGenBase.entity.getter();
      swift_release();
      UsoEntity.attributes.getter();
      swift_release();
      if (one-time initialization token for FamilyName != -1) {
        swift_once();
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = OUTLINED_FUNCTION_39_8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15)
      {
        type metadata accessor for ContactAttribute();
        OUTLINED_FUNCTION_37_15();
        uint64_t v10 = 8;
      }
      else
      {
        swift_retain();
        CodeGenBase.entity.getter();
        swift_release();
        UsoEntity.attributes.getter();
        swift_release();
        if (one-time initialization token for NickName != -1) {
          swift_once();
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = OUTLINED_FUNCTION_39_8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for ContactAttribute();
        if (v16)
        {
          id v17 = OUTLINED_FUNCTION_2_39(6, v3, v4, v5, v6, v7, v8, v9, 0);
LABEL_21:
          uint64_t v18 = v17;
          OUTLINED_FUNCTION_48_8((uint64_t)v17, sel_setContactAttributeToGet_);

LABEL_22:
          swift_release();
          return;
        }
        char v33 = 0;
        uint64_t v10 = 9;
      }
    }
    id v17 = OUTLINED_FUNCTION_2_39(v10, v3, v4, v5, v6, v7, v8, v9, v33);
    goto LABEL_21;
  }
  CodeGenBase.entity.getter();
  uint64_t v11 = UsoEntity.attributes.getter();
  swift_release();
  unint64_t v12 = specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, v11);
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_27;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_9;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_26;
  }
LABEL_9:
  OUTLINED_FUNCTION_50_7();
  MEMORY[0x230F854E0](0, v12);
  swift_bridgeObjectRelease();
  dispatch thunk of UsoValue.getAsPrimitiveValueString()();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_31:
    type metadata accessor for ContactAttribute();
    OUTLINED_FUNCTION_47_4();
    id v34 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v24, v25, v26, v27, v28, v29, v30, v31, 0);
    objc_msgSend(v1, sel_setContactAttributeToGet_, v34);
    swift_release();

    return;
  }
  swift_release();
LABEL_27:
  CodeGenBase.entity.getter();
  uint64_t v20 = UsoEntity.attributes.getter();
  swift_release();
  unint64_t v21 = specialized Dictionary.subscript.getter(0x636974656E6F6870, 0xEC000000656D614ELL, v20);
  swift_bridgeObjectRelease();
  if (!v21) {
    return;
  }
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v32)
    {
LABEL_30:
      OUTLINED_FUNCTION_50_7();
      MEMORY[0x230F854E0](0, v21);
      swift_bridgeObjectRelease();
      dispatch thunk of UsoValue.getAsPrimitiveValueString()();
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_22;
      }
      goto LABEL_31;
    }
  }
  else if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
}

void GetContactAttributeIntent.setHandleAttribute(from:)()
{
  OUTLINED_FUNCTION_10();
  id v2 = v0;
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (uint8_t *)type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v157 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v146 = v9;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_25();
  uint64_t v145 = v11;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_25();
  uint64_t v144 = v13;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  uint64_t v151 = (char *)v139 - v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_25();
  uint64_t v148 = v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_25();
  uint64_t v147 = v19;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_25();
  uint64_t v143 = v21;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_26_11();
  MEMORY[0x270FA5388](v23);
  unint64_t v152 = (char *)v139 - v24;
  uint64_t v25 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  unint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_15();
  unint64_t v31 = v30 - v29;
  OUTLINED_FUNCTION_59_3();
  uint64_t v32 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v32) {
    goto LABEL_98;
  }
  char v33 = (uint64_t *)v32;
  unint64_t v155 = v27;
  unint64_t v34 = (unint64_t)v0;
  uint64_t v140 = ObjectType;
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_108;
  }
  while (1)
  {
    uint64_t v35 = __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    unint64_t v153 = (uint64_t *)v35;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    os_log_type_t v156 = v6;
    id v142 = (id)v34;
    if (v38)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      unint64_t v150 = (char *)swift_slowAlloc();
      v158[0] = (uint64_t)v150;
      uint64_t v149 = v39;
      *(_DWORD *)uint64_t v39 = 136315138;
      v139[1] = v39 + 4;
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v41 = MEMORY[0x230F85100](v40, v156);
      uint64_t v154 = (uint64_t *)v31;
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, v158);
      OUTLINED_FUNCTION_49_7(v44);
      uint64_t v6 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v31 = (unint64_t)v154;
      unint64_t v45 = v155;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v36, v37, "#GetContactAttributeIntent: checking against %s", v149, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      uint64_t v46 = v33;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v46 = v33;
      unint64_t v45 = v155;
    }
    static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)();
    unint64_t v49 = v48;
    uint64_t v50 = v147;
    if (v51)
    {
      uint64_t v52 = v47;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v45 + 16))(v31, v153, v25);
      swift_bridgeObjectRetain_n();
      int v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v154 = (uint64_t *)v31;
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v157 = swift_slowAlloc();
        v158[0] = v157;
        *(_DWORD *)uint64_t v55 = 136315138;
        if (v49) {
          uint64_t v56 = v52;
        }
        else {
          uint64_t v56 = 7104878;
        }
        if (v49) {
          unint64_t v57 = v49;
        }
        else {
          unint64_t v57 = 0xE300000000000000;
        }
        os_log_type_t v156 = v55 + 4;
        swift_bridgeObjectRetain();
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v158);
        OUTLINED_FUNCTION_49_7(v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v53, v54, "#GetContactAttributeIntent: ambiguous address case; assuming user wants postalAddress for %s",
          v55,
          0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();

        (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v154, v25);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(unint64_t, uint64_t))(v45 + 8))(v31, v25);
      }
      id v2 = v142;
      type metadata accessor for ContactAttribute();
      OUTLINED_FUNCTION_8_0();
      uint64_t v67 = v52;
      uint64_t v68 = v49;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      unint64_t v71 = 0;
LABEL_102:
      id v137 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v64, v65, v66, v67, v68, v69, v70, v71, v139[0]);
      objc_msgSend(v2, sel_setContactAttributeToGet_, v137, v140, v141);
LABEL_103:

LABEL_104:
      OUTLINED_FUNCTION_8();
      return;
    }
    swift_bridgeObjectRelease();
    unint64_t v34 = MEMORY[0x263F8EE78];
    v158[0] = MEMORY[0x263F8EE78];
    uint64_t v59 = v46[2];
    swift_bridgeObjectRetain();
    unint64_t v153 = v46;
    unint64_t v155 = v59;
    uint64_t v141 = v4;
    if (!v59) {
      break;
    }
    unint64_t v31 = 0;
    char v33 = (uint64_t *)(v157 + 16);
    uint64_t v149 = (uint8_t *)(v157 + 8);
    unint64_t v150 = v1;
    uint64_t v154 = (uint64_t *)(v157 + 32);
    uint64_t v60 = (uint64_t)v152;
    while (v31 < v46[2])
    {
      uint64_t v4 = (uint64_t *)((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
      unint64_t v34 = *(void *)(v157 + 72);
      (*(void (**)(uint64_t, char *, uint8_t *))(v157 + 16))(v60, (char *)v4 + (void)v46 + v34 * v31, v6);
      if (closure #1 in GetContactAttributeIntent.setHandleAttribute(from:)(v60))
      {
        uint64_t v25 = *v154;
        OUTLINED_FUNCTION_11();
        ((void (*)(void))v25)();
        uint64_t v61 = v158[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_14_24();
          OUTLINED_FUNCTION_60_3();
        }
        unint64_t v62 = *(void *)(v61 + 16);
        if (v62 >= *(void *)(v61 + 24) >> 1)
        {
          uint64_t v46 = v158;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          OUTLINED_FUNCTION_60_3();
        }
        *(void *)(v61 + 16) = v62 + 1;
        uint64_t v1 = v150;
        uint64_t v6 = v156;
        OUTLINED_FUNCTION_11();
        ((void (*)(void))v25)();
        v158[0] = v61;
        uint64_t v60 = (uint64_t)v152;
      }
      else
      {
        (*(void (**)(uint64_t, uint8_t *))v149)(v60, v6);
      }
      if (v155 == ++v31)
      {
        uint64_t v63 = v158[0];
        OUTLINED_FUNCTION_46_3();
        unint64_t v34 = MEMORY[0x263F8EE78];
        uint64_t v50 = v147;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_once();
  }
  uint64_t v63 = v34;
LABEL_30:
  swift_bridgeObjectRelease();
  if (!*(void *)(v63 + 16))
  {
    swift_release();
    v158[0] = v34;
    swift_bridgeObjectRetain();
    if (v155)
    {
      unint64_t v34 = 0;
      unint64_t v31 = v157 + 16;
      uint64_t v1 = (char *)(v157 + 32);
      uint64_t v154 = (uint64_t *)(v157 + 8);
      unint64_t v150 = "ilType";
      unint64_t v152 = (char *)0x800000022D5A6630;
      while (1)
      {
        if (v34 >= v46[2]) {
          goto LABEL_106;
        }
        uint64_t v88 = OUTLINED_FUNCTION_18_19();
        v89(v88);
        uint64_t v90 = UsoIdentifier.namespace.getter();
        if (v91)
        {
          if (v90 == 0xD000000000000011 && v91 == v152)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            uint64_t v4 = *(uint64_t **)v1;
            (*(void (**)(uint64_t, uint64_t, uint8_t *))v1)(v148, v50, v6);
            uint64_t v93 = v158[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_14_24();
              uint64_t v93 = v158[0];
            }
            uint64_t v46 = v153;
            unint64_t v94 = *(void *)(v93 + 16);
            if (v94 >= *(void *)(v93 + 24) >> 1)
            {
              OUTLINED_FUNCTION_6_0();
              OUTLINED_FUNCTION_60_3();
            }
            *(void *)(v93 + 16) = v94 + 1;
            uint64_t v95 = (uint64_t)v33 + v93 + v94 * v25;
            uint64_t v6 = v156;
            ((void (*)(uint64_t, uint64_t, uint8_t *))v4)(v95, v148, v156);
            v158[0] = v93;
            uint64_t v50 = v147;
            goto LABEL_47;
          }
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v92) {
            goto LABEL_41;
          }
        }
        OUTLINED_FUNCTION_23();
        v96();
        uint64_t v46 = v153;
LABEL_47:
        if (v155 == ++v34)
        {
          uint64_t v97 = v158[0];
          OUTLINED_FUNCTION_46_3();
          unint64_t v34 = MEMORY[0x263F8EE78];
          goto LABEL_50;
        }
      }
    }
    uint64_t v97 = v34;
LABEL_50:
    swift_bridgeObjectRelease();
    char v33 = *(uint64_t **)(v97 + 16);
    if (v33)
    {
      uint64_t v98 = v157 + 16;
      os_log_type_t v99 = *(void (**)(char *, uint64_t, uint8_t *))(v157 + 16);
      OUTLINED_FUNCTION_38_12();
      uint64_t v101 = v97 + v100;
      uint64_t v1 = *(char **)(v98 + 56);
      uint64_t v25 = v98 - 8;
      uint64_t v154 = (uint64_t *)v97;
      swift_retain();
      uint64_t v102 = MEMORY[0x263F8EE78];
      do
      {
        v99(v151, v101, v156);
        v103._uint64_t countAndFlagsBits = UsoIdentifier.value.getter();
        ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(v103);
        OUTLINED_FUNCTION_31_2();
        v104();
        char v105 = v158[0];
        if (LOBYTE(v158[0]) != 70)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v102 + 16) + 1, 1, v102);
            uint64_t v102 = v108;
          }
          unint64_t v107 = *(void *)(v102 + 16);
          unint64_t v106 = *(void *)(v102 + 24);
          if (v107 >= v106 >> 1)
          {
            char v109 = OUTLINED_FUNCTION_55_5(v106);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v109, v107 + 1, 1, v102);
            uint64_t v102 = v110;
          }
          *(void *)(v102 + 16) = v107 + 1;
          *(unsigned char *)(v102 + v107 + 32) = v105;
        }
        v101 += (uint64_t)v1;
        char v33 = (uint64_t *)((char *)v33 - 1);
      }
      while (v33);
      swift_release_n();
      OUTLINED_FUNCTION_46_3();
      uint64_t v46 = v153;
      unint64_t v34 = MEMORY[0x263F8EE78];
    }
    else
    {
      swift_release();
      uint64_t v102 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v102 + 16))
    {
      swift_bridgeObjectRelease();
      if (!*(void *)(v102 + 16)) {
        goto LABEL_110;
      }
      char v111 = *(unsigned char *)(v102 + 32);
      swift_bridgeObjectRelease();
      LOBYTE(v158[0]) = v111;
      ContactNLv3Intent.NLContactAttributesValue.attributeTypeAndLabel()();
      goto LABEL_95;
    }
    swift_bridgeObjectRelease();
    v158[0] = v34;
    if (v155)
    {
      unint64_t v34 = 0;
      uint64_t v4 = (uint64_t *)(v157 + 16);
      unint64_t v31 = v157 + 32;
      uint64_t v6 = (uint8_t *)(v157 + 8);
      uint64_t v112 = v144;
      uint64_t v154 = (uint64_t *)(v157 + 16);
      while (1)
      {
        if (v34 >= v46[2]) {
          goto LABEL_107;
        }
        OUTLINED_FUNCTION_18_19();
        OUTLINED_FUNCTION_61_1();
        v113();
        uint64_t v114 = UsoIdentifier.namespace.getter();
        if (v115)
        {
          if (v114 == 0x54746361746E6F63 && v115 == 0xEB00000000657079)
          {
            swift_bridgeObjectRelease();
LABEL_75:
            unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint8_t *))v31;
            (*(void (**)(uint64_t, uint64_t, uint8_t *))v31)(v145, v112, v156);
            uint64_t v119 = v158[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_14_24();
              uint64_t v119 = v158[0];
            }
            uint64_t v46 = v153;
            uint64_t v1 = *(char **)(v119 + 16);
            if ((unint64_t)v1 >= *(void *)(v119 + 24) >> 1)
            {
              OUTLINED_FUNCTION_6_0();
              OUTLINED_FUNCTION_60_3();
            }
            *(void *)(v119 + 16) = v1 + 1;
            v118(v119 + (void)v1 * v25, v145, v156);
            v158[0] = v119;
            uint64_t v112 = v144;
            uint64_t v4 = v154;
            goto LABEL_80;
          }
          char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v117) {
            goto LABEL_75;
          }
        }
        (*(void (**)(uint64_t, uint8_t *))v6)(v112, v156);
        uint64_t v46 = v153;
LABEL_80:
        if (v155 == ++v34)
        {
          unint64_t v34 = v158[0];
          OUTLINED_FUNCTION_46_3();
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v120 = *(void *)(v34 + 16);
    if (v120)
    {
      uint64_t v157 = *(void *)(v157 + 16);
      OUTLINED_FUNCTION_38_12();
      uint64_t v122 = v34 + v121;
      uint64_t v124 = *(void *)(v123 + 56);
      uint64_t v125 = (void (**)(uint64_t, uint8_t *))(v123 - 8);
      unint64_t v155 = v34;
      swift_retain();
      uint64_t v126 = MEMORY[0x263F8EE78];
      uint64_t v127 = v146;
      do
      {
        uint64_t v128 = v156;
        ((void (*)(uint64_t, uint64_t, uint8_t *))v157)(v127, v122, v156);
        v129._uint64_t countAndFlagsBits = UsoIdentifier.value.getter();
        v130.SiriContactsIntents::GetContactAttributeSlots value = ContactNLIntent.NLContactTypeValue.init(rawValue:)(v129).value;
        (*v125)(v127, v128);
        if (v130.value != SiriContactsIntents_ContactNLIntent_NLContactTypeValue_unknownDefault)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v126 + 16) + 1, 1, v126);
            uint64_t v126 = v133;
          }
          unint64_t v132 = *(void *)(v126 + 16);
          unint64_t v131 = *(void *)(v126 + 24);
          if (v132 >= v131 >> 1)
          {
            char v134 = OUTLINED_FUNCTION_55_5(v131);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v134, v132 + 1, 1, v126);
            uint64_t v126 = v135;
          }
          *(void *)(v126 + 16) = v132 + 1;
          *(SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional *)(v126 + v132 + 32) = v130;
        }
        v122 += v124;
        --v120;
      }
      while (v120);
      swift_release_n();
      OUTLINED_FUNCTION_46_3();
    }
    else
    {
      swift_release();
      uint64_t v126 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v126 + 16))
    {
      unsigned __int8 v136 = *(unsigned char *)(v126 + 32);
      swift_bridgeObjectRelease();
      ContactNLIntent.NLContactTypeValue.attributeTypeAndLabel()(v136);
LABEL_95:
      type metadata accessor for ContactAttribute();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_47_4();
LABEL_96:
      id v137 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v80, v81, v82, v83, v84, v85, v86, v87, v139[0]);
      objc_msgSend(v142, sel_setContactAttributeToGet_, v137, v140, v141);
      goto LABEL_103;
    }
    swift_bridgeObjectRelease();
    id v2 = v142;
LABEL_98:
    static SiriKitGetEntityIntent.resolveAddressType(from:)();
    if (v159 && v159 != 1 && v159 != 2) {
      goto LABEL_104;
    }
    type metadata accessor for ContactAttribute();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_47_4();
    goto LABEL_102;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v63 + 16))
  {
    uint64_t v72 = v157;
    OUTLINED_FUNCTION_38_12();
    uint64_t v73 = *(void (**)(void))(v72 + 16);
    OUTLINED_FUNCTION_61_1();
    v73();
    uint64_t v74 = UsoIdentifier.value.getter();
    uint64_t v76 = v75;
    unint64_t v77 = *(void (**)(void))(v72 + 8);
    OUTLINED_FUNCTION_31_2();
    v77();
    OUTLINED_FUNCTION_61_1();
    v73();
    swift_release();
    UsoIdentifier.namespace.getter();
    OUTLINED_FUNCTION_31_2();
    v77();
    uint64_t v78 = OUTLINED_FUNCTION_71_0();
    static UsoIdentifierNamespace.attributeType(for:)(v78, v79);
    swift_bridgeObjectRelease();
    type metadata accessor for ContactAttribute();
    OUTLINED_FUNCTION_8_0();
    uint64_t v83 = v74;
    uint64_t v84 = v76;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    goto LABEL_96;
  }
  __break(1u);
LABEL_110:
  __break(1u);
  OUTLINED_FUNCTION_23();
  v138();
  swift_bridgeObjectRelease();
  swift_release();
  __break(1u);
}

void UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v90 = v1;
  uint64_t v2 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v85 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_42_12();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_4();
  uint64_t v88 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_4_4();
  uint64_t v83 = v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_25();
  uint64_t v86 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  uint64_t v89 = (char *)v81 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimitiveStringOperators?);
  uint64_t v16 = OUTLINED_FUNCTION_10_0(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_4_4();
  uint64_t v82 = v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v81 - v19;
  uint64_t v21 = type metadata accessor for PrimitiveStringOperators();
  OUTLINED_FUNCTION_0_0();
  uint64_t v84 = v22;
  MEMORY[0x270FA5388](v23);
  v81[2] = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v25);
  v81[3] = (char *)v81 - v26;
  OUTLINED_FUNCTION_17();
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)v81 - v29;
  uint64_t v87 = v0;
  if (!dispatch thunk of UsoEntity_common_Person.structuredName.getter())
  {
LABEL_13:
    uint64_t v37 = v88;
    uint64_t v35 = (uint64_t)v89;
    goto LABEL_14;
  }
  v81[0] = v30;
  id v31 = *v90;
  objc_msgSend(*v90, sel_setContactAttributeToModify_, 6);
  uint64_t v32 = dispatch thunk of UsoEntity_common_PersonName.nickNameAsExpression.getter();
  if (!v32)
  {
    dispatch thunk of UsoEntity_common_PersonName.nickName.getter();
    if (v38)
    {
      objc_msgSend(v31, sel_setModifyOperation_, 1);
      Swift::String v39 = String.firstLetterCapitalized()();
      swift_bridgeObjectRelease();
      outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.modifyNickName.setter(v39._countAndFlagsBits, (uint64_t)v39._object, v31);
    }
    swift_release();
    goto LABEL_13;
  }
  v81[1] = v32;
  dispatch thunk of CodeGenExpression.operand.getter();
  char v33 = v91;
  if (v91)
  {
    Swift::String v34 = String.firstLetterCapitalized()();
    swift_bridgeObjectRelease();
    char v33 = (void *)MEMORY[0x230F84F70](v34._countAndFlagsBits, v34._object);
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = (uint64_t)v89;
  objc_msgSend(v31, sel_setModifyNickName_, v33);

  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  if (!v36) {
    goto LABEL_9;
  }
  PrimitiveStringOperators.init(rawValue:)();
  OUTLINED_FUNCTION_6_3((uint64_t)v20, 1, v21);
  if (v50)
  {
    outlined destroy of SemanticValue?((uint64_t)v20, &demangling cache variable for type metadata for PrimitiveStringOperators?);
LABEL_9:
    objc_msgSend(*v90, sel_setModifyOperation_, 1);
    swift_release();
    swift_release();
    uint64_t v37 = v88;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_11();
  v51();
  uint64_t v52 = OUTLINED_FUNCTION_32_14();
  v53(v52);
  uint64_t v54 = OUTLINED_FUNCTION_33_12();
  int v56 = v55(v54);
  if (v56 == *MEMORY[0x263F72AA8] || v56 == *MEMORY[0x263F72AB0])
  {
    uint64_t v76 = 3;
  }
  else
  {
    OUTLINED_FUNCTION_13_4();
    v75();
    uint64_t v76 = 0;
  }
  uint64_t v37 = v88;
  objc_msgSend(v31, sel_setModifyOperation_, v76);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_13_4();
  v77();
LABEL_14:
  if (!dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter()) {
    goto LABEL_45;
  }
  objc_msgSend(*v90, sel_setContactAttributeToModify_, 10);
  UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
  if (v41)
  {
    unint64_t v42 = (void *)MEMORY[0x230F84F70]();
    uint64_t v40 = swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v42 = 0;
  }
  uint64_t v43 = v86;
  OUTLINED_FUNCTION_48_8(v40, sel_setModifyRelationship_);

  if (!dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter()) {
    goto LABEL_37;
  }
  dispatch thunk of UsoEntity_common_Person.definedValue.getter();
  uint64_t v44 = OUTLINED_FUNCTION_35_14();
  v45(v44);
  OUTLINED_FUNCTION_58_5();
  uint64_t v46 = v37 + *(int *)(v5 + 48);
  outlined init with copy of Result<RRResult, Error>(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of Result<RRResult, Error>(v43, v46, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v47 = OUTLINED_FUNCTION_53_6();
  OUTLINED_FUNCTION_6_3(v47, v48, v2);
  if (v50)
  {
    swift_release();
    OUTLINED_FUNCTION_57_2();
    outlined destroy of SemanticValue?(v35, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    OUTLINED_FUNCTION_6_3(v46, 1, v2);
    if (v50)
    {
      outlined destroy of SemanticValue?(v37, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      goto LABEL_37;
    }
LABEL_28:
    outlined destroy of SemanticValue?(v37, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
    goto LABEL_44;
  }
  uint64_t v49 = v83;
  outlined init with copy of Result<RRResult, Error>(v37, v83, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_6_3(v46, 1, v2);
  if (v50)
  {
    swift_release();
    outlined destroy of SemanticValue?(v86, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of SemanticValue?(v35, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v49, v2);
    goto LABEL_28;
  }
  uint64_t v58 = v85;
  OUTLINED_FUNCTION_11();
  v59();
  lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
  LODWORD(v89) = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  uint64_t v60 = *(void (**)(void))(v58 + 8);
  OUTLINED_FUNCTION_31_2();
  v60();
  outlined destroy of SemanticValue?(v86, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined destroy of SemanticValue?(v35, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_31_2();
  v60();
  outlined destroy of SemanticValue?(v37, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if ((v89 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_37:
  if (!dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter())
  {
    objc_msgSend(*v90, sel_setModifyOperation_, 1);
    goto LABEL_44;
  }
  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  if (!v61)
  {
LABEL_42:
    id v63 = *v90;
    uint64_t v64 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
    uint64_t v66 = static ModifyOperation.from(_:)(v64, v65);
    swift_bridgeObjectRelease();
    objc_msgSend(v63, sel_setModifyOperation_, v66);
    swift_release();
LABEL_44:
    swift_release();
    goto LABEL_45;
  }
  uint64_t v62 = v82;
  PrimitiveStringOperators.init(rawValue:)();
  OUTLINED_FUNCTION_6_3(v62, 1, v21);
  if (v50)
  {
    outlined destroy of SemanticValue?(v62, &demangling cache variable for type metadata for PrimitiveStringOperators?);
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_11();
  v67();
  id v68 = *v90;
  uint64_t v69 = OUTLINED_FUNCTION_32_14();
  v70(v69);
  uint64_t v71 = OUTLINED_FUNCTION_33_12();
  int v73 = v72(v71);
  if (v73 == *MEMORY[0x263F72AA8] || v73 == *MEMORY[0x263F72AB0])
  {
    uint64_t v79 = 3;
  }
  else
  {
    OUTLINED_FUNCTION_13_4();
    v78();
    uint64_t v79 = 0;
  }
  objc_msgSend(v68, sel_setModifyOperation_, v79);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_23();
  v80();
LABEL_45:
  OUTLINED_FUNCTION_8();
}

uint64_t closure #1 in UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = UsoIdentifier.namespace.getter();
  if (v7)
  {
    if (v6 == 0xD000000000000012 && v7 == 0x800000022D5A65E0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      char v9 = 1;
      return v9 & 1;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  }
  uint64_t v10 = UsoIdentifier.namespace.getter();
  if (v11)
  {
    if (v10 == 0x6369746E616D6573 && v11 == 0xEE0065756C61765FLL) {
      char v9 = 1;
    }
    else {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    char v9 = 0;
  }
  return v9 & 1;
}

void specialized SiriKitGetEntityIntent.setIsMe(reference:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v18 - v10;
  dispatch thunk of UsoEntity_common_Person.definedValue.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of SemanticValue?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x263F72A70], v5);
    char v12 = specialized == infix<A>(_:_:)((uint64_t)v11, (uint64_t)v9);
    uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
    v13(v9, v5);
    if (v12)
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v15 = (void *)MEMORY[0x230F84F70](1699574633, 0xE400000000000000);
      objc_msgSend(v1, sel_setValue_forKey_, isa, v15);

      v13(v11, v5);
      return;
    }
    v13(v11, v5);
  }
  Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v17 = (void *)MEMORY[0x230F84F70](1699574633, 0xE400000000000000);
  objc_msgSend(v1, sel_setValue_forKey_, v16, v17);
}

void SiriKitGetEntityIntent.setIsMe(reference:)(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_4_30();
  uint64_t v9 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_30_11();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_40_13();
  dispatch thunk of UsoEntity_common_Person.definedValue.getter();
  uint64_t v14 = OUTLINED_FUNCTION_53_6();
  OUTLINED_FUNCTION_6_3(v14, v15, v9);
  if (v16)
  {
    outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  }
  else
  {
    OUTLINED_FUNCTION_11();
    v17();
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v4, *MEMORY[0x263F72A70], v9);
    a1 = specialized == infix<A>(_:_:)(v2, v4);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v4, v9);
    if (a1)
    {
      Bool._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_62_0();
      uint64_t v20 = v19;
      objc_msgSend(v5, sel_setValue_forKey_, a1, v19);

      v18(v2, v9);
      return;
    }
    v18(v2, v9);
  }
  Bool._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_62_0();
  uint64_t v22 = v21;
  objc_msgSend(v5, sel_setValue_forKey_, a1, v21);
}

void static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_3();
  uint64_t v5 = v3 - v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_10();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v65 - v8;
  uint64_t v80 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_25();
  uint64_t v77 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_26_11();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_59_3();
  uint64_t v18 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v18) {
    goto LABEL_45;
  }
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v68 = v0;
  uint64_t v75 = (void (**)(void))v11;
  uint64_t v22 = *(void *)(v11 + 16);
  uint64_t v21 = v11 + 16;
  uint64_t v78 = v22;
  uint64_t v79 = v21;
  OUTLINED_FUNCTION_38_12();
  uint64_t v71 = v23;
  uint64_t v24 = v19 + v23;
  uint64_t v81 = *(void *)(v21 + 56);
  uint64_t v76 = (void (**)(void))(v21 - 8);
  swift_bridgeObjectRetain();
  uint64_t v73 = v24;
  uint64_t v74 = v20;
  while (1)
  {
    OUTLINED_FUNCTION_71_0();
    OUTLINED_FUNCTION_25_18();
    v25();
    UsoIdentifier.namespace.getter();
    if (!v26)
    {
      OUTLINED_FUNCTION_23();
      v31();
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_28_15();
    BOOL v28 = v28 && v27 == 0xEB00000000657079;
    if (v28) {
      break;
    }
    char v29 = OUTLINED_FUNCTION_10_30();
    swift_bridgeObjectRelease();
    uint64_t v30 = *v76;
    OUTLINED_FUNCTION_13_4();
    v30();
    if (v29)
    {
      uint64_t v70 = v30;
      uint64_t v66 = v9;
      uint64_t v67 = v5;
      goto LABEL_16;
    }
LABEL_12:
    v24 += v81;
    if (!--v20)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
  }
  uint64_t v66 = v9;
  uint64_t v67 = v5;
  swift_bridgeObjectRelease();
  uint64_t v70 = *v76;
  OUTLINED_FUNCTION_13_4();
  v32();
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v82 = MEMORY[0x263F8EE78];
  v75 += 4;
  swift_bridgeObjectRetain();
  unint64_t v33 = 0;
  uint64_t v72 = v19;
  do
  {
    if (v33 >= *(void *)(v19 + 16))
    {
      __break(1u);
      return;
    }
    unint64_t v34 = v33 + 1;
    OUTLINED_FUNCTION_25_18();
    v35();
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = outlined read-only object #0 of static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)[v36 + 32];
      uint64_t v38 = *(void *)&aAddress_6[8 * v37];
      uint64_t v39 = *(void *)&aAnyAddrgymAddr_1[8 * v37 + 40];
      if (v38 == UsoIdentifier.value.getter() && v39 == v40) {
        break;
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_27;
      }
      if (++v36 == 6)
      {
        OUTLINED_FUNCTION_13_4();
        v43();
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v44 = *v75;
    OUTLINED_FUNCTION_11();
    v44();
    uint64_t v45 = v82;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_24_18();
      uint64_t v45 = v82;
    }
    unint64_t v47 = *(void *)(v45 + 16);
    unint64_t v46 = *(void *)(v45 + 24);
    if (v47 >= v46 >> 1)
    {
      OUTLINED_FUNCTION_55_5(v46);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v45 = v82;
    }
    *(void *)(v45 + 16) = v47 + 1;
    OUTLINED_FUNCTION_11();
    v44();
    uint64_t v82 = v45;
LABEL_32:
    unint64_t v33 = v34;
    BOOL v28 = v34 == v74;
    uint64_t v19 = v72;
  }
  while (!v28);
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(v82 + 16);
  if (v48)
  {
    uint64_t v49 = v82 + v71;
    swift_retain();
    uint64_t v51 = (uint64_t)v66;
    uint64_t v50 = v67;
    uint64_t v52 = v69;
    while (1)
    {
      OUTLINED_FUNCTION_25_18();
      v53();
      UsoIdentifier.namespace.getter();
      if (v54)
      {
        OUTLINED_FUNCTION_28_15();
        if (v28 && v55 == 0xEB00000000657079)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
        char v57 = OUTLINED_FUNCTION_10_30();
        swift_bridgeObjectRelease();
        if (v57) {
          break;
        }
      }
      uint64_t v58 = v80;
      OUTLINED_FUNCTION_13_4();
      v59();
      v49 += v81;
      if (!--v48)
      {
        swift_release();
        uint64_t v60 = 1;
        uint64_t v61 = v68;
        goto LABEL_49;
      }
    }
    swift_release();
LABEL_48:
    uint64_t v58 = v80;
    uint64_t v61 = v68;
    ((void (*)(uint64_t, char *, uint64_t))*v75)(v51, v52, v80);
    uint64_t v60 = 0;
LABEL_49:
    __swift_storeEnumTagSinglePayload(v51, v60, 1, v58);
    swift_release();
    outlined init with copy of Result<RRResult, Error>(v51, v61, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v62 = OUTLINED_FUNCTION_53_6();
    OUTLINED_FUNCTION_6_3(v62, v63, v58);
    uint64_t v64 = v70;
    if (v28)
    {
      outlined destroy of SemanticValue?(v61, &demangling cache variable for type metadata for UsoIdentifier?);
      specialized Collection.first.getter(v19, v50);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_6_3(v50, 1, v58);
      if (v28)
      {
        outlined destroy of SemanticValue?(v51, &demangling cache variable for type metadata for UsoIdentifier?);
        OUTLINED_FUNCTION_64_4();
      }
      else
      {
        UsoIdentifier.value.getter();
        outlined destroy of SemanticValue?(v51, &demangling cache variable for type metadata for UsoIdentifier?);
        ((void (*)(uint64_t, uint64_t))v64)(v50, v58);
      }
    }
    else
    {
      UsoIdentifier.value.getter();
      OUTLINED_FUNCTION_13_4();
      v64();
      swift_bridgeObjectRelease();
      outlined destroy of SemanticValue?(v51, &demangling cache variable for type metadata for UsoIdentifier?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
LABEL_45:
  OUTLINED_FUNCTION_8();
}

uint64_t closure #1 in GetContactAttributeIntent.setHandleAttribute(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v25 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = UsoIdentifier.namespace.getter();
  uint64_t v24 = v3;
  if (v9)
  {
    if (v8 == 0x707954656E6F6870 && v9 == 0xE900000000000065) {
      char v11 = 1;
    }
    else {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12(v7, a1, v2);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v7, v2);
LABEL_27:
    uint64_t v18 = v25;
    v12(v25, a1, v2);
LABEL_28:
    v13(v18, v2);
    char v22 = 1;
    return v22 & 1;
  }
  uint64_t v14 = UsoIdentifier.namespace.getter();
  if (v15)
  {
    if (v14 == 0x7079546C69616D65 && v15 == 0xE900000000000065)
    {
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v7, v2);
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v7, v2);
    swift_bridgeObjectRelease();
    uint64_t v18 = v25;
    v12(v25, a1, v2);
    if (v17) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v7, v2);
    uint64_t v18 = v25;
    v12(v25, a1, v2);
  }
  uint64_t v19 = UsoIdentifier.namespace.getter();
  if (v20)
  {
    if (v19 == 0x5473736572646461 && v20 == 0xEB00000000657079) {
      char v22 = 1;
    }
    else {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    v13(v18, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13(v18, v2);
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t outlined consume of SpecifyingContactAddressType?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined consume of SiriKitContactIntentResolvedValue(a1, a2, a3);
  }
  return a1;
}

id OUTLINED_FUNCTION_2_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(a1, 0, 0, 0, 0, 0, 0, 0, a9);
}

id OUTLINED_FUNCTION_3_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(0, 0, v20, v21, 0, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t OUTLINED_FUNCTION_10_30()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_14_24()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return 4;
}

uint64_t OUTLINED_FUNCTION_18_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_12()
{
  return v0;
}

void OUTLINED_FUNCTION_24_18()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_27_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_32_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_8()
{
  return specialized Dictionary.subscript.getter(v1, v2, v0);
}

id OUTLINED_FUNCTION_48_8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_49_7(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t OUTLINED_FUNCTION_50_7()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t OUTLINED_FUNCTION_51_8()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
}

uint64_t OUTLINED_FUNCTION_52_7()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
}

uint64_t OUTLINED_FUNCTION_53_6()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_55_5@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return outlined destroy of SemanticValue?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_58_5()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_59_3()
{
  return 0x6C6562616CLL;
}

void OUTLINED_FUNCTION_62_0()
{
  JUMPOUT(0x230F84F70);
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_64_4()
{
  return outlined destroy of SemanticValue?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_65_1()
{
  return v0;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  specialized _NativeDictionary.makeIterator()(a1, v12);
  uint64_t v11 = v12[1];
  int64_t v3 = v12[3];
  uint64_t v4 = v12[4];
  int64_t v13 = (unint64_t)(v12[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  v4 &= v4 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = OUTLINED_FUNCTION_11_26();
    if (a2(v10)) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v6 >= v13) {
      goto LABEL_22;
    }
    uint64_t v7 = *(void *)(v11 + 8 * v6);
    int64_t v8 = v3 + 1;
    if (!v7)
    {
      int64_t v8 = v3 + 2;
      if (v3 + 2 >= v13) {
        goto LABEL_22;
      }
      uint64_t v7 = *(void *)(v11 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v3 + 3;
        if (v3 + 3 >= v13) {
          goto LABEL_22;
        }
        uint64_t v7 = *(void *)(v11 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v3 + 4;
          if (v3 + 4 >= v13) {
            goto LABEL_22;
          }
          uint64_t v7 = *(void *)(v11 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v3 + 5;
            if (v3 + 5 >= v13) {
              goto LABEL_22;
            }
            uint64_t v7 = *(void *)(v11 + 8 * v8);
            if (!v7)
            {
              int64_t v9 = v3 + 6;
              while (v9 < v13)
              {
                uint64_t v7 = *(void *)(v11 + 8 * v9++);
                if (v7)
                {
                  int64_t v8 = v9 - 1;
                  goto LABEL_18;
                }
              }
LABEL_22:
              swift_release();
              return OUTLINED_FUNCTION_11_26();
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v4 = (v7 - 1) & v7;
    int64_t v3 = v8;
  }
  __break(1u);
  return result;
}

uint64_t static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v4);
  int64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  int64_t v8 = &v6[*(int *)(v4 + 20)];
  *(void *)int64_t v8 = "RelationshipLabelKeyForValue";
  *((void *)v8 + 1) = 28;
  v8[16] = 2;
  if (a2)
  {
    uint64_t v9 = one-time initialization token for GenderedCNRelationLabelToNLSemanticValue;
    swift_bridgeObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue;
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized Dictionary.subscript.getter(a1, a2, v10);
    uint64_t v13 = v12;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_17;
    }
    if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1) {
      swift_once();
    }
    uint64_t v18 = swift_beginAccess();
    MEMORY[0x270FA5388](v18);
    *(&v23 - 2) = a1;
    *(&v23 - 1) = a2;
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Sequence.first(where:)(v19, (uint64_t (*)(uint64_t))partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:));
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      a1 = v11;
    }
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      char v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v17 = 0;
      _os_log_impl(&dword_22D49E000, v15, v16, "#NLSemanticForCNLabel provided value was nil, returning empty string for key", v17, 2u);
      MEMORY[0x230F85DE0](v17, -1, -1);
    }

    a1 = static String.EMPTY.getter();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v6);
  return a1;
}

uint64_t one-time initialization function for NLSemanticValueToCNRelationLabel()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D5A4C00;
  *(void *)(v0 + 32) = 0x656972666C726967;
  *(void *)(v0 + 40) = 0xEA0000000000646ELL;
  *(void *)(v0 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = 0x6E65697266796F62;
  *(void *)(v0 + 72) = 0xE900000000000064;
  *(void *)(v0 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = 0x726568746166;
  *(void *)(v0 + 104) = 0xE600000000000000;
  *(void *)(v0 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 120) = v3;
  *(void *)(v0 + 128) = 0x726568746F6DLL;
  *(void *)(v0 + 136) = 0xE600000000000000;
  *(void *)(v0 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 152) = v4;
  OUTLINED_FUNCTION_8_30();
  *(void *)(v0 + 160) = v5;
  *(void *)(v0 + 168) = 0xE600000000000000;
  *(void *)(v0 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 184) = v6;
  OUTLINED_FUNCTION_7_29();
  *(void *)(v0 + 192) = v7 & 0xFFFFFFFFFFFFLL | 0x72000000000000;
  *(void *)(v0 + 200) = 0xE700000000000000;
  *(void *)(v0 + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 216) = v8;
  *(void *)(v0 + 224) = 0x726574736973;
  *(void *)(v0 + 232) = 0xE600000000000000;
  *(void *)(v0 + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 248) = v9;
  OUTLINED_FUNCTION_16_22();
  *(void *)(v0 + 256) = v10;
  *(void *)(v0 + 264) = 0xE700000000000000;
  *(void *)(v0 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 280) = v11;
  OUTLINED_FUNCTION_6_34();
  *(void *)(v0 + 288) = v12 & 0xFFFFFFFFFFFFLL | 0x5F67000000000000;
  *(void *)(v0 + 296) = 0xEE00656C616D6566;
  *(void *)(v0 + 304) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 312) = v13;
  *(void *)(v0 + 320) = 0x646E65697266;
  *(void *)(v0 + 328) = 0xE600000000000000;
  *(void *)(v0 + 336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 344) = v14;
  *(void *)(v0 + 352) = 0x6573756F7073;
  *(void *)(v0 + 360) = 0xE600000000000000;
  *(void *)(v0 + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 376) = v15;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 384) = v16 & 0xFFFFFFFFFFFFLL | 0x735F000000000000;
  *(void *)(v0 + 392) = 0xED00006573756F70;
  *(void *)(v0 + 400) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 408) = v17;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 416) = v18 | 0x6F70735F00000000;
  *(void *)(v0 + 424) = 0xEB00000000657375;
  *(void *)(v0 + 432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 440) = v19;
  *(void *)(v0 + 448) = 1701210487;
  *(void *)(v0 + 456) = 0xE400000000000000;
  *(void *)(v0 + 464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 472) = v20;
  *(void *)(v0 + 480) = 0x646E6162737568;
  *(void *)(v0 + 488) = 0xE700000000000000;
  *(void *)(v0 + 496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 504) = v21;
  *(void *)(v0 + 512) = 0x72656E74726170;
  *(void *)(v0 + 520) = 0xE700000000000000;
  *(void *)(v0 + 528) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 536) = v22;
  OUTLINED_FUNCTION_9_27();
  *(void *)(v0 + 544) = v23;
  *(void *)(v0 + 552) = 0xE900000000000074;
  *(void *)(v0 + 560) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 568) = v24;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 576) = v25 | 0x7373615F00000000;
  *(void *)(v0 + 584) = 0xEE00746E61747369;
  *(void *)(v0 + 592) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 600) = v26;
  *(void *)(v0 + 608) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 616) = v27;
  *(void *)(v0 + 624) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 632) = v28;
  *(void *)(v0 + 640) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 648) = v29;
  *(void *)(v0 + 656) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 664) = v30;
  OUTLINED_FUNCTION_12_27();
  *(void *)(v0 + 672) = v31;
  *(void *)(v0 + 680) = 0xE700000000000000;
  *(void *)(v0 + 688) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 696) = v32;
  strcpy((char *)(v0 + 704), "manager_female");
  *(unsigned char *)(v0 + 719) = -18;
  *(void *)(v0 + 720) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 728) = v33;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 736) = v34 & 0xFFFFFFFFFFFFLL | 0x6D5F000000000000;
  OUTLINED_FUNCTION_5_40();
  *(void *)(v0 + 744) = v35;
  *(void *)(v0 + 752) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 760) = v36;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 768) = v37 | 0x6E616D5F00000000;
  *(void *)(v0 + 776) = 0xEC00000072656761;
  *(void *)(v0 + 784) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 792) = v38;
  OUTLINED_FUNCTION_15_24();
  *(void *)(v0 + 800) = v39;
  *(void *)(v0 + 808) = 0xE900000000000065;
  *(void *)(v0 + 816) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 824) = v40;
  strcpy((char *)(v0 + 832), "male_colleague");
  *(unsigned char *)(v0 + 847) = -18;
  *(void *)(v0 + 848) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 856) = v41;
  *(void *)(v0 + 864) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 872) = v42;
  *(void *)(v0 + 880) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 888) = v43;
  OUTLINED_FUNCTION_14_25();
  *(void *)(v0 + 896) = v44;
  *(void *)(v0 + 904) = 0xE700000000000000;
  *(void *)(v0 + 912) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 920) = v45;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 928) = v46 | 0x6165745F00000000;
  *(void *)(v0 + 936) = 0xEC00000072656863;
  *(void *)(v0 + 944) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 952) = v47;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 960) = v48 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
  OUTLINED_FUNCTION_5_40();
  *(void *)(v0 + 968) = v49;
  *(void *)(v0 + 976) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 984) = v50;
  *(void *)(v0 + 992) = 0x646C696863;
  *(void *)(v0 + 1000) = 0xE500000000000000;
  *(void *)(v0 + 1008) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1016) = v51;
  *(void *)(v0 + 1024) = 7237491;
  *(void *)(v0 + 1032) = 0xE300000000000000;
  *(void *)(v0 + 1040) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1048) = v52;
  *(void *)(v0 + 1056) = 0x77656870656ELL;
  *(void *)(v0 + 1064) = 0xE600000000000000;
  *(void *)(v0 + 1072) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1080) = v53;
  *(void *)(v0 + 1088) = 0x656365696ELL;
  *(void *)(v0 + 1096) = 0xE500000000000000;
  *(void *)(v0 + 1104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1112) = v54;
  *(void *)(v0 + 1120) = 0x656C636E75;
  *(void *)(v0 + 1128) = 0xE500000000000000;
  *(void *)(v0 + 1136) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1144) = v55;
  *(void *)(v0 + 1152) = 1953396065;
  *(void *)(v0 + 1160) = 0xE400000000000000;
  *(void *)(v0 + 1168) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1176) = v56;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1184) = v57 | 0x746F6D6400000000;
  *(void *)(v0 + 1192) = 0xEB00000000726568;
  *(void *)(v0 + 1200) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1208) = v58;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1216) = v59 | 0x7461666400000000;
  *(void *)(v0 + 1224) = 0xEB00000000726568;
  *(void *)(v0 + 1232) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1240) = v60;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1248) = v61 | 0x7261706400000000;
  *(void *)(v0 + 1256) = 0xEB00000000746E65;
  *(void *)(v0 + 1264) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1272) = v62;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1280) = v63 | 0x6E6F736400000000;
  *(void *)(v0 + 1288) = 0xE800000000000000;
  *(void *)(v0 + 1296) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1304) = v64;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1312) = v65 | 0x7561646400000000;
  *(void *)(v0 + 1320) = 0xED00007265746867;
  *(void *)(v0 + 1328) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1336) = v66;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1344) = v67 | 0x6968636400000000;
  *(void *)(v0 + 1352) = 0xEA0000000000646CLL;
  *(void *)(v0 + 1360) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1368) = v68;
  OUTLINED_FUNCTION_7_29();
  *(void *)(v0 + 1376) = v69 & 0xFFFFFFFFFFFFLL | 0x2D72000000000000;
  OUTLINED_FUNCTION_13_30();
  *(void *)(v0 + 1384) = v70;
  *(void *)(v0 + 1392) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1400) = v71;
  *(void *)(v0 + 1408) = 0x6C2D6E692D6E6F73;
  *(void *)(v0 + 1416) = 0xEA00000000007761;
  *(void *)(v0 + 1424) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1432) = v72;
  *(void *)(v0 + 1440) = 0x692D726574736973;
  OUTLINED_FUNCTION_10_31();
  *(void *)(v0 + 1448) = v73;
  *(void *)(v0 + 1456) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1464) = v74;
  *(void *)(v0 + 1472) = 0x7265746867756164;
  *(void *)(v0 + 1480) = 0xEF77616C2D6E692DLL;
  *(void *)(v0 + 1488) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1496) = v75;
  strcpy((char *)(v0 + 1504), "child-in-law");
  *(unsigned char *)(v0 + 1517) = 0;
  *(_WORD *)(v0 + 1518) = -5120;
  *(void *)(v0 + 1520) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1528) = v76;
  strcpy((char *)(v0 + 1536), "mother-in-law");
  *(_WORD *)(v0 + 1550) = -4864;
  *(void *)(v0 + 1552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1560) = v77;
  strcpy((char *)(v0 + 1568), "father-in-law");
  *(_WORD *)(v0 + 1582) = -4864;
  *(void *)(v0 + 1584) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1592) = v78;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1600) = v79 | 0x6E75616400000000;
  *(void *)(v0 + 1608) = 0xE900000000000074;
  *(void *)(v0 + 1616) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1624) = v80;
  OUTLINED_FUNCTION_3_35();
  *(void *)(v0 + 1632) = v81 | 0x636E756400000000;
  *(void *)(v0 + 1640) = 0xEA0000000000656CLL;
  *(void *)(v0 + 1648) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1656) = v82;
  *(void *)(v0 + 1664) = 0x70656E646E617267;
  *(void *)(v0 + 1672) = 0xEB00000000776568;
  *(void *)(v0 + 1680) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1688) = v83;
  *(void *)(v0 + 1696) = 0x65696E646E617267;
  *(void *)(v0 + 1704) = 0xEA00000000006563;
  *(void *)(v0 + 1712) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1720) = v84;
  *(void *)(v0 + 1728) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 1736) = v85;
  *(void *)(v0 + 1744) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1752) = v86;
  strcpy((char *)(v0 + 1760), "great grandson");
  *(unsigned char *)(v0 + 1775) = -18;
  *(void *)(v0 + 1776) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1784) = v87;
  *(void *)(v0 + 1792) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 1800) = v88;
  *(void *)(v0 + 1808) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1816) = v89;
  *(void *)(v0 + 1824) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 1832) = v90;
  *(void *)(v0 + 1840) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1848) = v91;
  *(void *)(v0 + 1856) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 1864) = v92;
  *(void *)(v0 + 1872) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1880) = v93;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 1888) = v94 | 0x6572617000000000;
  *(void *)(v0 + 1896) = 0xEA0000000000746ELL;
  *(void *)(v0 + 1904) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1912) = v95;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 1920) = v96 | 0x6874616600000000;
  *(void *)(v0 + 1928) = 0xEA00000000007265;
  *(void *)(v0 + 1936) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1944) = v97;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 1952) = v98 | 0x68746F6D00000000;
  *(void *)(v0 + 1960) = 0xEA00000000007265;
  *(void *)(v0 + 1968) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 1976) = v99;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 1984) = v100 | 0x6C69686300000000;
  *(void *)(v0 + 1992) = 0xE900000000000064;
  *(void *)(v0 + 2000) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2008) = v101;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 2016) = v102 | 0x6E6F7300000000;
  *(void *)(v0 + 2024) = 0xE700000000000000;
  *(void *)(v0 + 2032) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2040) = v103;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 2048) = v104 | 0x6775616400000000;
  *(void *)(v0 + 2056) = 0xEC00000072657468;
  *(void *)(v0 + 2064) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2072) = v105;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 2080) = v106 | 0x746F726200000000;
  *(void *)(v0 + 2088) = 0xEB00000000726568;
  *(void *)(v0 + 2096) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2104) = v107;
  OUTLINED_FUNCTION_2_40();
  *(void *)(v0 + 2112) = v108 | 0x7473697300000000;
  *(void *)(v0 + 2120) = 0xEA00000000007265;
  *(void *)(v0 + 2128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2136) = v109;
  *(void *)(v0 + 2144) = 0x207265676E756F79;
  *(void *)(v0 + 2152) = 0xEF676E696C626973;
  *(void *)(v0 + 2160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2168) = v110;
  strcpy((char *)(v0 + 2176), "elder sibling");
  *(_WORD *)(v0 + 2190) = -4864;
  *(void *)(v0 + 2192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2200) = v111;
  *(void *)(v0 + 2208) = 0x207265676E756F79;
  OUTLINED_FUNCTION_5_40();
  *(void *)(v0 + 2216) = v112;
  *(void *)(v0 + 2224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2232) = v113;
  *(void *)(v0 + 2240) = 0x747365676E756F79;
  *(void *)(v0 + 2248) = 0xEF72657473697320;
  *(void *)(v0 + 2256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2264) = v114;
  strcpy((char *)(v0 + 2272), "elder sister");
  *(unsigned char *)(v0 + 2285) = 0;
  *(_WORD *)(v0 + 2286) = -5120;
  *(void *)(v0 + 2288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2296) = v115;
  strcpy((char *)(v0 + 2304), "eldest sister");
  *(_WORD *)(v0 + 2318) = -4864;
  *(void *)(v0 + 2320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2328) = v116;
  *(void *)(v0 + 2336) = 0x207265676E756F79;
  OUTLINED_FUNCTION_7_29();
  *(void *)(v0 + 2344) = v117 & 0xFFFFFFFFFFFFLL | 0xEF72000000000000;
  *(void *)(v0 + 2352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2360) = v118;
  *(void *)(v0 + 2368) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2376) = v119;
  *(void *)(v0 + 2384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2392) = v120;
  strcpy((char *)(v0 + 2400), "elder brother");
  *(_WORD *)(v0 + 2414) = -4864;
  *(void *)(v0 + 2416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2424) = v121;
  *(void *)(v0 + 2432) = 0x6220747365646C65;
  OUTLINED_FUNCTION_5_40();
  *(void *)(v0 + 2440) = v122;
  *(void *)(v0 + 2448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2456) = v123;
  *(void *)(v0 + 2464) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2472) = v124;
  *(void *)(v0 + 2480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2488) = v125;
  *(void *)(v0 + 2496) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2504) = v126;
  *(void *)(v0 + 2512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2520) = v127;
  *(void *)(v0 + 2528) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2536) = v128;
  *(void *)(v0 + 2544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2552) = v129;
  *(void *)(v0 + 2560) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2568) = v130;
  *(void *)(v0 + 2576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2584) = v131;
  *(void *)(v0 + 2592) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2600) = v132;
  *(void *)(v0 + 2608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2616) = v133;
  *(void *)(v0 + 2624) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2632) = v134;
  *(void *)(v0 + 2640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2648) = v135;
  *(void *)(v0 + 2656) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2664) = v136;
  *(void *)(v0 + 2672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2680) = v137;
  *(void *)(v0 + 2688) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2696) = v138;
  *(void *)(v0 + 2704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2712) = v139;
  *(void *)(v0 + 2720) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2728) = v140;
  *(void *)(v0 + 2736) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2744) = v141;
  *(void *)(v0 + 2752) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2760) = v142;
  *(void *)(v0 + 2768) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2776) = v143;
  *(void *)(v0 + 2784) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2792) = v144;
  *(void *)(v0 + 2800) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2808) = v145;
  *(void *)(v0 + 2816) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2824) = v146;
  *(void *)(v0 + 2832) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2840) = v147;
  *(void *)(v0 + 2848) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2856) = v148;
  *(void *)(v0 + 2864) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2872) = v149;
  *(void *)(v0 + 2880) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2888) = v150;
  *(void *)(v0 + 2896) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2904) = v151;
  *(void *)(v0 + 2912) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2920) = v152;
  *(void *)(v0 + 2928) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2936) = v153;
  *(void *)(v0 + 2944) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2952) = v154;
  *(void *)(v0 + 2960) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 2968) = v155;
  *(void *)(v0 + 2976) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 2984) = v156;
  *(void *)(v0 + 2992) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3000) = v157;
  *(void *)(v0 + 3008) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3016) = v158;
  *(void *)(v0 + 3024) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3032) = v159;
  *(void *)(v0 + 3040) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3048) = v160;
  *(void *)(v0 + 3056) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3064) = v161;
  *(void *)(v0 + 3072) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3080) = v162;
  *(void *)(v0 + 3088) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3096) = v163;
  *(void *)(v0 + 3104) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3112) = v164;
  *(void *)(v0 + 3120) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3128) = v165;
  *(void *)(v0 + 3136) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3144) = v166;
  *(void *)(v0 + 3152) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3160) = v167;
  *(void *)(v0 + 3168) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3176) = v168;
  *(void *)(v0 + 3184) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3192) = v169;
  *(void *)(v0 + 3200) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3208) = v170;
  *(void *)(v0 + 3216) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3224) = v171;
  *(void *)(v0 + 3232) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3240) = v172;
  *(void *)(v0 + 3248) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3256) = v173;
  *(void *)(v0 + 3264) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3272) = v174;
  *(void *)(v0 + 3280) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3288) = v175;
  OUTLINED_FUNCTION_8_30();
  *(void *)(v0 + 3296) = v176 & 0xFFFFFFFFFFFFLL | 0x5F73000000000000;
  *(void *)(v0 + 3304) = 0xEF676E696C626973;
  *(void *)(v0 + 3312) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3320) = v177;
  *(void *)(v0 + 3328) = 0xD000000000000017;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3336) = v178;
  *(void *)(v0 + 3344) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3352) = v179;
  *(void *)(v0 + 3360) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3368) = v180;
  *(void *)(v0 + 3376) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3384) = v181;
  *(void *)(v0 + 3392) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3400) = v182;
  *(void *)(v0 + 3408) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3416) = v183;
  *(void *)(v0 + 3424) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3432) = v184;
  *(void *)(v0 + 3440) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3448) = v185;
  *(void *)(v0 + 3456) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3464) = v186;
  *(void *)(v0 + 3472) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3480) = v187;
  *(void *)(v0 + 3488) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3496) = v188;
  *(void *)(v0 + 3504) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3512) = v189;
  *(void *)(v0 + 3520) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3528) = v190;
  *(void *)(v0 + 3536) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3544) = v191;
  *(void *)(v0 + 3552) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3560) = v192;
  *(void *)(v0 + 3568) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3576) = v193;
  *(void *)(v0 + 3584) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3592) = v194;
  *(void *)(v0 + 3600) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3608) = v195;
  *(void *)(v0 + 3616) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3624) = v196;
  *(void *)(v0 + 3632) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3640) = v197;
  *(void *)(v0 + 3648) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3656) = v198;
  *(void *)(v0 + 3664) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3672) = v199;
  *(void *)(v0 + 3680) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3688) = v200;
  *(void *)(v0 + 3696) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3704) = v201;
  *(void *)(v0 + 3712) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3720) = v202;
  *(void *)(v0 + 3728) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3736) = v203;
  *(void *)(v0 + 3744) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3752) = v204;
  *(void *)(v0 + 3760) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3768) = v205;
  *(void *)(v0 + 3776) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3784) = v206;
  *(void *)(v0 + 3792) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3800) = v207;
  *(void *)(v0 + 3808) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3816) = v208;
  *(void *)(v0 + 3824) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3832) = v209;
  *(void *)(v0 + 3840) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3848) = v210;
  *(void *)(v0 + 3856) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3864) = v211;
  *(void *)(v0 + 3872) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3880) = v212;
  *(void *)(v0 + 3888) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3896) = v213;
  *(void *)(v0 + 3904) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3912) = v214;
  *(void *)(v0 + 3920) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3928) = v215;
  *(void *)(v0 + 3936) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3944) = v216;
  *(void *)(v0 + 3952) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3960) = v217;
  *(void *)(v0 + 3968) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 3976) = v218;
  *(void *)(v0 + 3984) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 3992) = v219;
  *(void *)(v0 + 4000) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4008) = v220;
  *(void *)(v0 + 4016) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4024) = v221;
  *(void *)(v0 + 4032) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4040) = v222;
  *(void *)(v0 + 4048) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4056) = v223;
  *(void *)(v0 + 4064) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4072) = v224;
  *(void *)(v0 + 4080) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4088) = v225;
  *(void *)(v0 + 4096) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4104) = v226;
  *(void *)(v0 + 4112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4120) = v227;
  *(void *)(v0 + 4128) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4136) = v228;
  *(void *)(v0 + 4144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4152) = v229;
  OUTLINED_FUNCTION_8_30();
  *(void *)(v0 + 4160) = v230 & 0xFFFFFFFFFFFFLL | 0x692D000000000000;
  OUTLINED_FUNCTION_10_31();
  *(void *)(v0 + 4168) = v231;
  *(void *)(v0 + 4176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4184) = v232;
  *(void *)(v0 + 4192) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4200) = v233;
  *(void *)(v0 + 4208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4216) = v234;
  *(void *)(v0 + 4224) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4232) = v235;
  *(void *)(v0 + 4240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4248) = v236;
  *(void *)(v0 + 4256) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4264) = v237;
  *(void *)(v0 + 4272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4280) = v238;
  *(void *)(v0 + 4288) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4296) = v239;
  *(void *)(v0 + 4304) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4312) = v240;
  OUTLINED_FUNCTION_6_34();
  *(void *)(v0 + 4320) = v241 & 0xFFFFFFFFFFFFLL | 0x2D67000000000000;
  OUTLINED_FUNCTION_13_30();
  *(void *)(v0 + 4328) = v242;
  *(void *)(v0 + 4336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4344) = v243;
  *(void *)(v0 + 4352) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4360) = v244;
  *(void *)(v0 + 4368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4376) = v245;
  *(void *)(v0 + 4384) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4392) = v246;
  *(void *)(v0 + 4400) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4408) = v247;
  *(void *)(v0 + 4416) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4424) = v248;
  *(void *)(v0 + 4432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4440) = v249;
  *(void *)(v0 + 4448) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4456) = v250;
  *(void *)(v0 + 4464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4472) = v251;
  *(void *)(v0 + 4480) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4488) = v252;
  *(void *)(v0 + 4496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4504) = v253;
  *(void *)(v0 + 4512) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4520) = v254;
  *(void *)(v0 + 4528) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4536) = v255;
  *(void *)(v0 + 4544) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4552) = v256;
  *(void *)(v0 + 4560) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4568) = v257;
  *(void *)(v0 + 4576) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4584) = v258;
  *(void *)(v0 + 4592) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4600) = v259;
  *(void *)(v0 + 4608) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4616) = v260;
  *(void *)(v0 + 4624) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4632) = v261;
  *(void *)(v0 + 4640) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4648) = v262;
  *(void *)(v0 + 4656) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4664) = v263;
  *(void *)(v0 + 4672) = 0x6E6973756F63;
  *(void *)(v0 + 4680) = 0xE600000000000000;
  *(void *)(v0 + 4688) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4696) = v264;
  *(void *)(v0 + 4704) = 0x756F635F656C616DLL;
  *(void *)(v0 + 4712) = 0xEB000000006E6973;
  *(void *)(v0 + 4720) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4728) = v265;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 4736) = v266 & 0xFFFFFFFFFFFFLL | 0x635F000000000000;
  *(void *)(v0 + 4744) = 0xED00006E6973756FLL;
  *(void *)(v0 + 4752) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4760) = v267;
  *(void *)(v0 + 4768) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4776) = v268;
  *(void *)(v0 + 4784) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4792) = v269;
  *(void *)(v0 + 4800) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4808) = v270;
  *(void *)(v0 + 4816) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4824) = v271;
  *(void *)(v0 + 4832) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4840) = v272;
  *(void *)(v0 + 4848) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4856) = v273;
  *(void *)(v0 + 4864) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4872) = v274;
  *(void *)(v0 + 4880) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4888) = v275;
  *(void *)(v0 + 4896) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4904) = v276;
  *(void *)(v0 + 4912) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4920) = v277;
  *(void *)(v0 + 4928) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4936) = v278;
  *(void *)(v0 + 4944) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4952) = v279;
  *(void *)(v0 + 4960) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 4968) = v280;
  *(void *)(v0 + 4976) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 4984) = v281;
  *(void *)(v0 + 4992) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5000) = v282;
  *(void *)(v0 + 5008) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5016) = v283;
  *(void *)(v0 + 5024) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5032) = v284;
  *(void *)(v0 + 5040) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5048) = v285;
  *(void *)(v0 + 5056) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5064) = v286;
  *(void *)(v0 + 5072) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5080) = v287;
  *(void *)(v0 + 5088) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5096) = v288;
  *(void *)(v0 + 5104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5112) = v289;
  *(void *)(v0 + 5120) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5128) = v290;
  *(void *)(v0 + 5136) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5144) = v291;
  *(void *)(v0 + 5152) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5160) = v292;
  *(void *)(v0 + 5168) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5176) = v293;
  *(void *)(v0 + 5184) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5192) = v294;
  *(void *)(v0 + 5200) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5208) = v295;
  *(void *)(v0 + 5216) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5224) = v296;
  *(void *)(v0 + 5232) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5240) = v297;
  *(void *)(v0 + 5248) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5256) = v298;
  *(void *)(v0 + 5264) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5272) = v299;
  *(void *)(v0 + 5280) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5288) = v300;
  *(void *)(v0 + 5296) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5304) = v301;
  *(void *)(v0 + 5312) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5320) = v302;
  *(void *)(v0 + 5328) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5336) = v303;
  *(void *)(v0 + 5344) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5352) = v304;
  *(void *)(v0 + 5360) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5368) = v305;
  *(void *)(v0 + 5376) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5384) = v306;
  *(void *)(v0 + 5392) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5400) = v307;
  *(void *)(v0 + 5408) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5416) = v308;
  *(void *)(v0 + 5424) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5432) = v309;
  *(void *)(v0 + 5440) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5448) = v310;
  *(void *)(v0 + 5456) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5464) = v311;
  *(void *)(v0 + 5472) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5480) = v312;
  *(void *)(v0 + 5488) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5496) = v313;
  *(void *)(v0 + 5504) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5512) = v314;
  *(void *)(v0 + 5520) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5528) = v315;
  *(void *)(v0 + 5536) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5544) = v316;
  *(void *)(v0 + 5552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5560) = v317;
  *(void *)(v0 + 5568) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5576) = v318;
  *(void *)(v0 + 5584) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5592) = v319;
  *(void *)(v0 + 5600) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5608) = v320;
  *(void *)(v0 + 5616) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5624) = v321;
  *(void *)(v0 + 5632) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5640) = v322;
  *(void *)(v0 + 5648) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5656) = v323;
  *(void *)(v0 + 5664) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5672) = v324;
  *(void *)(v0 + 5680) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5688) = v325;
  *(void *)(v0 + 5696) = 0x1000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5704) = v326;
  *(void *)(v0 + 5712) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5720) = v327;
  *(void *)(v0 + 5728) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5736) = v328;
  *(void *)(v0 + 5744) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5752) = v329;
  *(void *)(v0 + 5760) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5768) = v330;
  *(void *)(v0 + 5776) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5784) = v331;
  *(void *)(v0 + 5792) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5800) = v332;
  *(void *)(v0 + 5808) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5816) = v333;
  *(void *)(v0 + 5824) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5832) = v334;
  *(void *)(v0 + 5840) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5848) = v335;
  *(void *)(v0 + 5856) = 0xD00000000000003ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5864) = v336;
  *(void *)(v0 + 5872) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5880) = v337;
  *(void *)(v0 + 5888) = 0xD000000000000038;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5896) = v338;
  *(void *)(v0 + 5904) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5912) = v339;
  *(void *)(v0 + 5920) = 0xD000000000000044;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5928) = v340;
  *(void *)(v0 + 5936) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5944) = v341;
  *(void *)(v0 + 5952) = 0xD000000000000042;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 5960) = v342;
  *(void *)(v0 + 5968) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 5976) = v343;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 5984) = v344 | 0x7261705F00000000;
  *(void *)(v0 + 5992) = 0xEC00000072656E74;
  *(void *)(v0 + 6000) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6008) = v345;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 6016) = v346 & 0xFFFFFFFFFFFFLL | 0x705F000000000000;
  OUTLINED_FUNCTION_5_40();
  *(void *)(v0 + 6024) = v347;
  *(void *)(v0 + 6032) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6040) = v348;
  OUTLINED_FUNCTION_4_38();
  *(void *)(v0 + 6048) = v349 | 0x6972665F00000000;
  *(void *)(v0 + 6056) = 0xEB00000000646E65;
  *(void *)(v0 + 6064) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6072) = v350;
  OUTLINED_FUNCTION_1_40();
  *(void *)(v0 + 6080) = v351 & 0xFFFFFFFFFFFFLL | 0x665F000000000000;
  *(void *)(v0 + 6088) = 0xED0000646E656972;
  *(void *)(v0 + 6096) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6104) = v352;
  *(void *)(v0 + 6112) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6120) = v353;
  *(void *)(v0 + 6128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6136) = v354;
  *(void *)(v0 + 6144) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6152) = v355;
  *(void *)(v0 + 6160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6168) = v356;
  *(void *)(v0 + 6176) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6184) = v357;
  *(void *)(v0 + 6192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6200) = v358;
  *(void *)(v0 + 6208) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6216) = v359;
  *(void *)(v0 + 6224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6232) = v360;
  *(void *)(v0 + 6240) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6248) = v361;
  *(void *)(v0 + 6256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6264) = v362;
  *(void *)(v0 + 6272) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6280) = v363;
  *(void *)(v0 + 6288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6296) = v364;
  *(void *)(v0 + 6304) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6312) = v365;
  *(void *)(v0 + 6320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6328) = v366;
  *(void *)(v0 + 6336) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6344) = v367;
  *(void *)(v0 + 6352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6360) = v368;
  OUTLINED_FUNCTION_6_34();
  *(void *)(v0 + 6368) = v369 & 0xFFFFFFFFFFFFLL | 0x7367000000000000;
  *(void *)(v0 + 6376) = 0xEE00646C6968635FLL;
  *(void *)(v0 + 6384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6392) = v370;
  *(void *)(v0 + 6400) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6408) = v371;
  *(void *)(v0 + 6416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6424) = v372;
  *(void *)(v0 + 6432) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6440) = v373;
  *(void *)(v0 + 6448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6456) = v374;
  *(void *)(v0 + 6464) = 0xD000000000000031;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6472) = v375;
  *(void *)(v0 + 6480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6488) = v376;
  *(void *)(v0 + 6496) = 0xD000000000000035;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6504) = v377;
  *(void *)(v0 + 6512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6520) = v378;
  *(void *)(v0 + 6528) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6536) = v379;
  *(void *)(v0 + 6544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6552) = v380;
  *(void *)(v0 + 6560) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6568) = v381;
  *(void *)(v0 + 6576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6584) = v382;
  *(void *)(v0 + 6592) = 0xD00000000000002CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6600) = v383;
  *(void *)(v0 + 6608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6616) = v384;
  *(void *)(v0 + 6624) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6632) = v385;
  *(void *)(v0 + 6640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6648) = v386;
  *(void *)(v0 + 6656) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6664) = v387;
  *(void *)(v0 + 6672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6680) = v388;
  *(void *)(v0 + 6688) = 0x100000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6696) = v389;
  *(void *)(v0 + 6704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6712) = v390;
  *(void *)(v0 + 6720) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6728) = v391;
  *(void *)(v0 + 6736) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6744) = v392;
  *(void *)(v0 + 6752) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6760) = v393;
  *(void *)(v0 + 6768) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6776) = v394;
  *(void *)(v0 + 6784) = 0xD000000000000018;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6792) = v395;
  *(void *)(v0 + 6800) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6808) = v396;
  *(void *)(v0 + 6816) = 0x726F5F656365696ELL;
  *(void *)(v0 + 6824) = 0xEF6E6973756F635FLL;
  *(void *)(v0 + 6832) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6840) = v397;
  *(void *)(v0 + 6848) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6856) = v398;
  *(void *)(v0 + 6864) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6872) = v399;
  *(void *)(v0 + 6880) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6888) = v400;
  *(void *)(v0 + 6896) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6904) = v401;
  *(void *)(v0 + 6912) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6920) = v402;
  *(void *)(v0 + 6928) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6936) = v403;
  *(void *)(v0 + 6944) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6952) = v404;
  *(void *)(v0 + 6960) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 6968) = v405;
  *(void *)(v0 + 6976) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 6984) = v406;
  *(void *)(v0 + 6992) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7000) = v407;
  *(void *)(v0 + 7008) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7016) = v408;
  *(void *)(v0 + 7024) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7032) = v409;
  *(void *)(v0 + 7040) = 0xD000000000000017;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7048) = v410;
  *(void *)(v0 + 7056) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7064) = v411;
  *(void *)(v0 + 7072) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7080) = v412;
  *(void *)(v0 + 7088) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7096) = v413;
  *(void *)(v0 + 7104) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7112) = v414;
  *(void *)(v0 + 7120) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7128) = v415;
  *(void *)(v0 + 7136) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7144) = v416;
  *(void *)(v0 + 7152) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7160) = v417;
  *(void *)(v0 + 7168) = 0xD000000000000018;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7176) = v418;
  *(void *)(v0 + 7184) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7192) = v419;
  *(void *)(v0 + 7200) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7208) = v420;
  *(void *)(v0 + 7216) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7224) = v421;
  *(void *)(v0 + 7232) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7240) = v422;
  *(void *)(v0 + 7248) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7256) = v423;
  *(void *)(v0 + 7264) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7272) = v424;
  *(void *)(v0 + 7280) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7288) = v425;
  *(void *)(v0 + 7296) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7304) = v426;
  *(void *)(v0 + 7312) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7320) = v427;
  *(void *)(v0 + 7328) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7336) = v428;
  *(void *)(v0 + 7344) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7352) = v429;
  *(void *)(v0 + 7360) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7368) = v430;
  *(void *)(v0 + 7376) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7384) = v431;
  *(void *)(v0 + 7392) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7400) = v432;
  *(void *)(v0 + 7408) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7416) = v433;
  *(void *)(v0 + 7424) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7432) = v434;
  *(void *)(v0 + 7440) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7448) = v435;
  *(void *)(v0 + 7456) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7464) = v436;
  *(void *)(v0 + 7472) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7480) = v437;
  *(void *)(v0 + 7488) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7496) = v438;
  *(void *)(v0 + 7504) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7512) = v439;
  *(void *)(v0 + 7520) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7528) = v440;
  *(void *)(v0 + 7536) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7544) = v441;
  *(void *)(v0 + 7552) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7560) = v442;
  *(void *)(v0 + 7568) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7576) = v443;
  *(void *)(v0 + 7584) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7592) = v444;
  *(void *)(v0 + 7600) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7608) = v445;
  *(void *)(v0 + 7616) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7624) = v446;
  *(void *)(v0 + 7632) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7640) = v447;
  *(void *)(v0 + 7648) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7656) = v448;
  *(void *)(v0 + 7664) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7672) = v449;
  *(void *)(v0 + 7680) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_34();
  *(void *)(v0 + 7688) = v450;
  *(void *)(v0 + 7696) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 7704) = v451;
  destructiveProjectEnumData for SpecifyingContactAddressType(v0);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static Dictionary<>.NLSemanticValueToCNRelationLabel = result;
  return result;
}

uint64_t one-time initialization function for GenderedCNRelationLabelToNLSemanticValue()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22D5A21F0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  OUTLINED_FUNCTION_16_22();
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = 0xE700000000000000;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = 0x6573756F7073;
  *(void *)(inited + 88) = 0xE600000000000000;
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v4;
  OUTLINED_FUNCTION_9_27();
  *(void *)(inited + 112) = v5;
  *(void *)(inited + 120) = 0xE900000000000074;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v6;
  OUTLINED_FUNCTION_12_27();
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = 0xE700000000000000;
  *(void *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 168) = v8;
  OUTLINED_FUNCTION_15_24();
  *(void *)(inited + 176) = v9;
  *(void *)(inited + 184) = 0xE900000000000065;
  *(void *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 200) = v10;
  OUTLINED_FUNCTION_14_25();
  *(void *)(inited + 208) = v11;
  *(void *)(inited + 216) = 0xE700000000000000;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v12;
  *(void *)(inited + 240) = 0x72656E74726170;
  *(void *)(inited + 248) = 0xE700000000000000;
  *(void *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 264) = v13;
  *(void *)(inited + 272) = 0x72656E74726170;
  *(void *)(inited + 280) = 0xE700000000000000;
  *(void *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 296) = v14;
  *(void *)(inited + 304) = 0x646E65697266;
  *(void *)(inited + 312) = 0xE600000000000000;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 328) = v15;
  *(void *)(inited + 336) = 0x646E65697266;
  *(void *)(inited + 344) = 0xE600000000000000;
  *(void *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 360) = v16;
  *(void *)(inited + 368) = 0x6E6973756F63;
  *(void *)(inited + 376) = 0xE600000000000000;
  *(void *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 392) = v17;
  *(void *)(inited + 400) = 0x6E6973756F63;
  *(void *)(inited + 408) = 0xE600000000000000;
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue = result;
  return result;
}

uint64_t closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a5 && a4 == a6) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_26()
{
  return v0;
}

uint64_t type metadata completion function for ContactsNeedsValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsNeedsValueStrategy.deinit()
{
  uint64_t v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  return v0;
}

uint64_t ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[14] = v2;
  v1[15] = v0;
  v1[12] = v3;
  v1[13] = v4;
  OUTLINED_FUNCTION_23_2();
  v1[16] = v5;
  uint64_t v6 = type metadata accessor for Parse();
  v1[17] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[18] = v7;
  v1[19] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for ParameterIdentifier();
  v1[20] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[21] = v9;
  v1[22] = OUTLINED_FUNCTION_2_1();
  v1[23] = type metadata accessor for Signpost.OpenSignpost();
  v1[24] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  SiriContactsIntents::GetContactSlots_optional v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v29 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v7 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 248) = v7;
  uint64_t v8 = v1 + v7;
  *(void *)uint64_t v8 = "ParseResponseValueNeedsValue";
  *(void *)(v8 + 8) = 28;
  *(unsigned char *)(v8 + 16) = 2;
  *(void *)(v0 + 200) = *(void *)(v5 + 224);
  *(void *)(v0 + 208) = type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v9 = ParameterIdentifier.name.getter();
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v29);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  v13.SiriContactsIntents::GetContactAttributeSlots value = GetContactSlots.init(rawValue:)(v12).value;
  *(SiriContactsIntents::GetContactSlots_optional *)(v0 + 252) = v13;
  if (v13.value == SiriContactsIntents_GetContactSlots_unknownDefault)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      unsigned int v18 = _typeName(_:qualified:)();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v11, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v15, v16, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: encountered invalid parameter %s, throwing", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v26 = *(void *)(v0 + 192);
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    *uint64_t v27 = v9;
    v27[1] = (uint64_t)v11;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
    return v28();
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease();
    Input.parse.getter();
    uint64_t v22 = ParameterResolutionRecord.intent.getter();
    *(void *)(v0 + 216) = v22;
    uint64_t v23 = *(void *)(v20 + 248);
    *(void *)(v0 + 224) = v23;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v24;
    *uint64_t v24 = v0;
    v24[1] = ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v21 + 176, v22, v23);
  }
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = (void *)v1[27];
  uint64_t v3 = v1[19];
  uint64_t v4 = v1[18];
  uint64_t v5 = v1[17];
  uint64_t v6 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v7 = v6;
  *(void *)(v9 + 240) = v8;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v1 = *(void **)(v0 + 240);
  if (v1)
  {
    if (swift_dynamicCastUnknownClass())
    {
      uint64_t v2 = v0 + 16;
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
      uint64_t v4 = Logger.logObject.getter();
      uint64_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(void *)&v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136315138;
        uint64_t v7 = _typeName(_:qualified:)();
        *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)v26);
        uint64_t v2 = v0 + 16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v4, v5, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: Converted ContactIntent to SK intent.", v6, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }

      uint64_t v9 = *(void *)(v0 + 224);
      uint64_t v10 = *(unsigned char *)(v0 + 252);
      uint64_t v11 = *(void *)(v0 + 200);
      uint64_t v12 = (void *)ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 40) = &type metadata for GetContactSlots;
      *(void *)(v0 + 48) = &protocol witness table for GetContactSlots;
      *(unsigned char *)(v0 + 16) = v10;
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v9 + 56))(v26, v2, v11, v9);

      __swift_destroy_boxed_opaque_existential_1Tm(v2);
      goto LABEL_14;
    }
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
  uint64_t v14 = Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    *(void *)&v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = _typeName(_:qualified:)();
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v19 = _typeName(_:qualified:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v14, v15, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  memset(v26, 0, sizeof(v26));
  ParameterResolutionRecord.intent.getter();
LABEL_14:
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  uint64_t v21 = *(void *)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v23 = type metadata accessor for IntentPromptAnswer();
  __swift_storeEnumTagSinglePayload(v22, 0, 1, v23);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  OUTLINED_FUNCTION_23_2();
  v1[4] = v3;
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v1[5] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[8] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_2_1();
  return MEMORY[0x270FA2498](ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v1 = (void *)(class metadata base offset for ContactsCommonCATs + **(void **)(v0[3] + 96) + 416);
  uint64_t v5 = (uint64_t (*)(uint64_t))(*v1 + *(int *)*v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  *uint64_t v2 = v0;
  v2[1] = ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  uint64_t v3 = v0[10];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v3 = v2;
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  else {
    uint64_t v5 = ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (uint64_t *)v0[2];
  default argument 1 of ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)();
  uint64_t v8 = type metadata accessor for AceOutput();
  uint64_t v9 = MEMORY[0x263F6FFF0];
  v7[3] = v8;
  v7[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v7);
  ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t default argument 1 of ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)()
{
  return static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(0, 0, 0, 0, 0, 0);
}

uint64_t ContactsNeedsValueStrategy.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
}

uint64_t ContactsNeedsValueStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsNeedsValueStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 216, 7);
}

uint64_t type metadata accessor for ContactsNeedsValueStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>()
{
  return ContactsNeedsValueStrategy.actionForInput(_:resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 296)
                                                          + **(int **)(**(void **)v3 + 296));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 304)
                                                + **(int **)(**(void **)v2 + 304));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  return v8(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 56) = v9;
  uint64_t v10 = *(void *)(a3 + 256);
  long long v11 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 32) = v11;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = type metadata accessor for ContactsNeedsValueStrategy();
  void *v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return MEMORY[0x270F66308](a1, a2, v12, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 56) = v9;
  uint64_t v10 = *(void *)(a3 + 256);
  long long v11 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 32) = v11;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = type metadata accessor for ContactsNeedsValueStrategy();
  void *v9 = v4;
  v9[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return MEMORY[0x270F66310](a1, a2, v12, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 56) = v13;
  uint64_t v14 = *(void *)(a5 + 256);
  long long v15 = *(_OWORD *)(a5 + 240);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a5 + 224);
  *(_OWORD *)(v6 + 32) = v15;
  *(void *)(v6 + 48) = v14;
  uint64_t v16 = type metadata accessor for ContactsNeedsValueStrategy();
  *uint64_t v13 = v6;
  v13[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v16, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 56) = v15;
  uint64_t v16 = *(void *)(a6 + 256);
  long long v17 = *(_OWORD *)(a6 + 240);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a6 + 224);
  *(_OWORD *)(v7 + 32) = v17;
  *(void *)(v7 + 48) = v16;
  uint64_t v18 = type metadata accessor for ContactsNeedsValueStrategy();
  *long long v15 = v7;
  v15[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v18, a7);
}

uint64_t GetContactNeedsValueStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  return MEMORY[0x270FA0228](v0, 216, 7);
}

uint64_t type metadata accessor for GetContactNeedsValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactNeedsValueStrategy;
  if (!type metadata singleton initialization cache for GetContactNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactsNeedsValueStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t USOParse.isOrdinalDisambiguation.getter()
{
  return USOParse.isOrdinalDisambiguation.getter(MEMORY[0x263F72CE8]);
}

uint64_t USOParse.toSiriKitIntent(previousIntent:referenceResolver:)()
{
  OUTLINED_FUNCTION_4();
  v1[47] = v2;
  v1[48] = v0;
  v1[46] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_update_common_Person, ModifyContactAttributeIntent?>);
  v1[49] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[50] = v5;
  v1[51] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v1[52] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[53] = v7;
  v1[54] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  v1[55] = v8;
  OUTLINED_FUNCTION_10_0(v8);
  v1[56] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_10_0(v9);
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_update_common_Person, GetContactIntent?>);
  v1[60] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[61] = v11;
  v1[62] = OUTLINED_FUNCTION_2_1();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_checkExistence_common_Person, GetContactIntent?>);
  v1[63] = v12;
  OUTLINED_FUNCTION_1(v12);
  v1[64] = v13;
  v1[65] = OUTLINED_FUNCTION_2_1();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_read_common_Person, GetContactIntent?>);
  v1[66] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[67] = v15;
  v1[68] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_summarise_common_Person, GetContactIntent?>);
  v1[69] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[70] = v17;
  v1[71] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_Person, GetContactIntent?>);
  v1[72] = v18;
  OUTLINED_FUNCTION_1(v18);
  v1[73] = v19;
  v1[74] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_10_0(v20);
  v1[75] = OUTLINED_FUNCTION_2_1();
  uint64_t v21 = type metadata accessor for Signpost.OpenSignpost();
  v1[76] = v21;
  OUTLINED_FUNCTION_10_0(v21);
  v1[77] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v22, v23, v24);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  long long *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  long long *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  int EnumTagSinglePayload;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  char v117;
  void (*v118)(uint64_t, uint64_t);
  long long *v119;
  void *v120;
  void (*v121)(void, void, void);
  uint64_t v122;
  id v123;
  uint64_t v124;
  void (*v125)(uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  void *v134;

  *(void *)(v0 + 40) = MEMORY[0x263F8D310];
  uint64_t v1 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 16) = 5198677;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 24) = 0xE300000000000000;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v133 = (_OWORD *)(v0 + 208);
  uint64_t v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22D59FD50;
  outlined init with copy of ContactServiceProtocol(v0 + 16, v6 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(v3 + 20);
  *(_DWORD *)(v0 + 696) = v7;
  uint64_t v8 = v2 + v7;
  *(void *)uint64_t v8 = "ToSiriKitIntent";
  *(void *)(v8 + 8) = 15;
  uint64_t v9 = (void *)v0;
  *(unsigned char *)(v8 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  USOParse.preferredUserDialogAct.getter(v4);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload(v4, 1, v10) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 600), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_12:
    uint64_t v16 = v0 + 208;
    *uint64_t v133 = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
    goto LABEL_13;
  }
  uint64_t v11 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v15(v12, v13, v14);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v16 = v0 + 208;
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*(void *)(v0 + 232))
  {
LABEL_13:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v16, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  uint64_t v17 = v0 + 240;
  outlined init with take of Any(v133, (_OWORD *)(v0 + 176));
  outlined init with copy of Any(v0 + 176, v0 + 240);
  type metadata accessor for UsoTask_create_common_Person();
  if (OUTLINED_FUNCTION_19_19()) {
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_delete_common_Person();
  if (OUTLINED_FUNCTION_19_19()) {
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_update_common_Communication();
  if (OUTLINED_FUNCTION_19_19()) {
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (swift_dynamicCast())
  {
    *(void *)(v0 + 624) = *(void *)(v0 + 272);
    if ((UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter() & 1) == 0)
    {
      uint64_t v21 = *(void *)(v0 + 368);
      if (UsoTask_noVerb_common_Person.isGetAttributeIntent.getter())
      {
        if (v21)
        {
          type metadata accessor for GetContactAttributeIntent();
          OUTLINED_FUNCTION_21_17();
        }
        type metadata accessor for GetContactAttributeIntent();
        unsigned int v46 = (void *)swift_task_alloc();
        v9[79] = v46;
        *unsigned int v46 = v9;
        v46[1] = USOParse.toSiriKitIntent(previousIntent:referenceResolver:);
        OUTLINED_FUNCTION_29_13();
        OUTLINED_FUNCTION_37_1();
        return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v47, v48, v49);
      }
      if (v21)
      {
        type metadata accessor for GetContactIntent();
        uint64_t v38 = (void *)OUTLINED_FUNCTION_21_17();
      }
      else
      {
        uint64_t v38 = 0;
      }
      uint64_t v34 = (void *)v9[74];
      uint64_t v35 = v9[73];
      uint64_t v36 = v9[72];
      *(void *)(swift_allocObject() + 16) = v38;
      uint64_t v51 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
      goto LABEL_53;
    }
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    swift_release();
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 240);
    goto LABEL_14;
  }
  uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_8_31())
  {
    if (UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter()) {
      goto LABEL_10;
    }
    uint64_t v23 = (long long *)(v0 + 136);
    uint64_t v24 = *(void **)(v0 + 368);
    if (v24)
    {
      type metadata accessor for GetContactIntent();
      uint64_t v24 = (void *)swift_dynamicCastClass();
    }
    uint64_t v134 = *(void **)(v0 + 552);
    outlined init with copy of ContactServiceProtocol(*(void *)(v0 + 376), (uint64_t)v23);
    unsigned int v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    outlined init with take of DeviceState(v23, v25 + 24);
    uint64_t v26 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
    Transformer.init(transform:)();
    uint64_t v27 = v134;
    Transformer.transform.getter();
    uint64_t v28 = OUTLINED_FUNCTION_23_13();
    v29(v28);
LABEL_27:
    OUTLINED_FUNCTION_6_35();
    v22(v30, v31, v32);
    swift_release();
    if (v27)
    {
LABEL_28:

      OUTLINED_FUNCTION_15_25();
LABEL_46:
      __swift_destroy_boxed_opaque_existential_1Tm(v17);
LABEL_47:
      uint64_t v9 = (void *)v0;
      goto LABEL_14;
    }
LABEL_45:
    OUTLINED_FUNCTION_15_25();
    goto LABEL_46;
  }
  type metadata accessor for UsoTask_read_common_Person();
  if (OUTLINED_FUNCTION_8_31())
  {
    if (UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter()) {
      goto LABEL_10;
    }
    uint64_t v33 = *(void **)(v0 + 368);
    if (v33)
    {
      type metadata accessor for GetContactIntent();
      uint64_t v33 = (void *)OUTLINED_FUNCTION_21_17();
    }
    uint64_t v34 = *(void **)(v0 + 544);
    uint64_t v35 = *(void *)(v0 + 536);
    uint64_t v36 = v9[66];
    *(void *)(swift_allocObject() + 16) = v33;
    unsigned int v37 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
LABEL_53:
    Transformer.init(transform:)();
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t))Transformer.transform.getter();
    (*(void (**)(void *, uint64_t))(v35 + 8))(v34, v36);
    OUTLINED_FUNCTION_6_35();
    v52(v53, v54, v55);
    swift_release();
    if (v34) {

    }
    OUTLINED_FUNCTION_15_25();
    __swift_destroy_boxed_opaque_existential_1Tm(v17);
LABEL_14:
    uint64_t v18 = v9[77];
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_37_1();
    __asm { BRAA            X3, X16 }
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (!OUTLINED_FUNCTION_8_31())
  {
    type metadata accessor for UsoTask_request_common_Person();
    if (swift_dynamicCast())
    {
      uint64_t v39 = *(void *)(v0 + 368);
      *(void *)(v0 + 672) = *(void *)(v0 + 304);
      if (v39)
      {
        type metadata accessor for GetContactAttributeIntent();
        swift_dynamicCastClass();
      }
      type metadata accessor for GetContactAttributeIntent();
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 680) = v40;
      *uint64_t v40 = v0;
      v40[1] = USOParse.toSiriKitIntent(previousIntent:referenceResolver:);
      OUTLINED_FUNCTION_37_1();
      return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v41, v42, v43);
    }
    type metadata accessor for UsoTask_update_common_Person();
    if (!swift_dynamicCast())
    {
LABEL_67:
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
      goto LABEL_11;
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    swift_release();
    if (*(void *)(v0 + 320))
    {
      unsigned int v57 = dispatch thunk of UsoEntity_common_Person.phoneticStructuredName.getter();
      swift_release();
      if (v57)
      {
        swift_release();
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        unsigned int v59 = (void *)OUTLINED_FUNCTION_21_0(v58, (uint64_t)static Logger.siriContacts);
        uint64_t v60 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_0(v60))
        {
          *(_WORD *)OUTLINED_FUNCTION_20() = 0;
          OUTLINED_FUNCTION_20_21(&dword_22D49E000, v61, v62, "Learning pronunciation is unsupported");
          OUTLINED_FUNCTION_2();
        }

        swift_release();
        goto LABEL_67;
      }
    }
    if (UsoTask_update_common_Person.isChangeContactPoster.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v64 = (long long *)(v0 + 56);
      unsigned int v65 = type metadata accessor for Logger();
      uint64_t v66 = OUTLINED_FUNCTION_21_0(v65, (uint64_t)static Logger.siriContacts);
      unsigned int v67 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)uint64_t v68 = 0;
        _os_log_impl(&dword_22D49E000, v66, v67, "Encountered contact poster update request, treating as GetContact", v68, 2u);
        OUTLINED_FUNCTION_2();
      }
      uint64_t v69 = *(void *)(v0 + 368);

      if (v69)
      {
        type metadata accessor for GetContactIntent();
        uint64_t v70 = (void *)OUTLINED_FUNCTION_21_17();
      }
      else
      {
        uint64_t v70 = 0;
      }
      uint64_t v95 = *(void *)(v0 + 488);
      unsigned int v96 = *(void *)(v0 + 496);
      uint64_t v97 = *(void *)(v0 + 480);
      outlined init with copy of ContactServiceProtocol(*(void *)(v0 + 376), (uint64_t)v64);
      unsigned int v98 = swift_allocObject();
      *(void *)(v98 + 16) = v70;
      outlined init with take of DeviceState(v64, v98 + 24);
      uint64_t v99 = v70;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
      Transformer.init(transform:)();
      uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t))Transformer.transform.getter();
      unsigned int v100 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
      uint64_t v27 = (void *)(v95 + 8);
      v100(v96, v97);
      goto LABEL_27;
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    swift_release();
    if (*(void *)(v0 + 328)
      && (uint64_t v77 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), v77))
    {
      if (dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter())
      {
        unsigned int v79 = *(void *)(v0 + 464);
        uint64_t v78 = *(void *)(v0 + 472);
        uint64_t v80 = *(void *)(v0 + 448);
        uint64_t v131 = *(void *)(v0 + 440);
        uint64_t v82 = *(void *)(v0 + 416);
        unsigned int v81 = *(void *)(v0 + 424);
        dispatch thunk of UsoEntity_common_Person.definedValue.getter();
        (*(void (**)(uint64_t, void, uint64_t))(v81 + 104))(v79, *MEMORY[0x263F72A70], v82);
        __swift_storeEnumTagSinglePayload(v79, 0, 1, v82);
        uint64_t v83 = v80 + *(int *)(v131 + 48);
        outlined init with copy of URL?(v78, v80, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined init with copy of URL?(v79, v83, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        OUTLINED_FUNCTION_6_3(v80, 1, v82);
        if (v84)
        {
          uint64_t v85 = *(void *)(v0 + 472);
          uint64_t v86 = *(void *)(v0 + 416);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 464), &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v85, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          OUTLINED_FUNCTION_6_3(v83, 1, v86);
          if (!v84) {
            goto LABEL_103;
          }
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 448), &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        }
        else
        {
          uint64_t v101 = *(void *)(v0 + 416);
          outlined init with copy of URL?(*(void *)(v0 + 448), *(void *)(v0 + 456), &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v83, 1, v101);
          uint64_t v103 = *(void *)(v0 + 456);
          uint64_t v130 = *(void *)(v0 + 464);
          uint64_t v132 = *(void *)(v0 + 472);
          if (EnumTagSinglePayload == 1)
          {
            unsigned int v104 = *(void *)(v0 + 416);
            uint64_t v105 = *(void *)(v0 + 424);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v130, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v132, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v103, v104);
LABEL_103:
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 448), &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
LABEL_104:
            if (one-time initialization token for siriContacts != -1) {
              swift_once();
            }
            unsigned int v106 = type metadata accessor for Logger();
            uint64_t v91 = (void *)OUTLINED_FUNCTION_21_0(v106, (uint64_t)static Logger.siriContacts);
            uint64_t v107 = static os_log_type_t.debug.getter();
            if (OUTLINED_FUNCTION_4_0(v107))
            {
              *(_WORD *)OUTLINED_FUNCTION_20() = 0;
              OUTLINED_FUNCTION_20_21(&dword_22D49E000, v108, v109, "Modifying other contacts' relationships is unsupported");
              OUTLINED_FUNCTION_2();
            }
            swift_release();
LABEL_109:
            swift_release();

            swift_release();
            __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
            __swift_destroy_boxed_opaque_existential_1Tm(v17);
            goto LABEL_47;
          }
          uint64_t v129 = *(void *)(v0 + 448);
          uint64_t v110 = *(void *)(v0 + 424);
          uint64_t v111 = *(void *)(v0 + 432);
          uint64_t v112 = *(void *)(v0 + 416);
          OUTLINED_FUNCTION_11();
          v116(v113, v114, v115);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues, MEMORY[0x263F72A78]);
          uint64_t v117 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
          v118(v111, v112);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v130, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v132, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v118(v103, v112);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v129, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if ((v117 & 1) == 0) {
            goto LABEL_104;
          }
        }
        swift_release();
      }
    }
    else
    {
      uint64_t v87 = v0 + 16;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      swift_release();
      if (!*(void *)(v0 + 336)) {
        goto LABEL_113;
      }
      dispatch thunk of UsoEntity_common_Person.name.getter();
      uint64_t v89 = v88;
      swift_bridgeObjectRelease();
      if (v89)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v90 = type metadata accessor for Logger();
        uint64_t v91 = (void *)OUTLINED_FUNCTION_21_0(v90, (uint64_t)static Logger.siriContacts);
        uint64_t v92 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_0(v92))
        {
          *(_WORD *)OUTLINED_FUNCTION_20() = 0;
          OUTLINED_FUNCTION_20_21(&dword_22D49E000, v93, v94, "Modifying other contacts' attributes is unsupported");
          OUTLINED_FUNCTION_2();
        }
        goto LABEL_109;
      }
    }
    swift_release();
    uint64_t v87 = v0 + 16;
LABEL_113:
    uint64_t v119 = (long long *)(v87 + 80);
    uint64_t v120 = *(void **)(v0 + 368);
    if (v120)
    {
      type metadata accessor for ModifyContactAttributeIntent();
      uint64_t v120 = (void *)swift_dynamicCastClass();
    }
    uint64_t v121 = *(void (**)(void, void, void))(v0 + 392);
    outlined init with copy of ContactServiceProtocol(*(void *)(v0 + 376), (uint64_t)v119);
    uint64_t v122 = swift_allocObject();
    *(void *)(v122 + 16) = v120;
    outlined init with take of DeviceState(v119, v122 + 24);
    uint64_t v123 = v120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeIntent?);
    Transformer.init(transform:)();
    uint64_t v27 = v121;
    Transformer.transform.getter();
    uint64_t v124 = OUTLINED_FUNCTION_23_13();
    v125(v124);
    OUTLINED_FUNCTION_6_35();
    v121(v126, v127, v128);
    swift_release();
    if (v121) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }
  *(void *)(v0 + 648) = *(void *)(v0 + 296);
  if (UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter()) {
    goto LABEL_10;
  }
  uint64_t v56 = *(void *)(v0 + 368);
  if ((UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter() & 1) == 0)
  {
    if (v56)
    {
      type metadata accessor for GetContactIntent();
      unsigned int v63 = (void *)OUTLINED_FUNCTION_21_17();
    }
    else
    {
      unsigned int v63 = 0;
    }
    uint64_t v34 = (void *)v9[65];
    uint64_t v36 = v9[63];
    uint64_t v35 = v9[64];
    *(void *)(swift_allocObject() + 16) = v63;
    uint64_t v76 = v63;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
    goto LABEL_53;
  }
  if (v56)
  {
    type metadata accessor for GetContactAttributeIntent();
    OUTLINED_FUNCTION_21_17();
  }
  type metadata accessor for GetContactAttributeIntent();
  uint64_t v71 = (void *)swift_task_alloc();
  v9[82] = v71;
  *uint64_t v71 = v9;
  v71[1] = USOParse.toSiriKitIntent(previousIntent:referenceResolver:);
  OUTLINED_FUNCTION_29_13();
  OUTLINED_FUNCTION_37_1();
  return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v72, v73, v74);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 640) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 664) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_37_13();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 688) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

#error "22D583DEC: call analysis failed (funcsize=69)"

#error "22D583FD4: call analysis failed (funcsize=69)"

#error "22D5841BC: call analysis failed (funcsize=69)"

uint64_t USOParse.getSiriKitIntentType()()
{
  type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v86 = v0;
  uint64_t v87 = v1;
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_4();
  uint64_t v83 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_4();
  uint64_t v85 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v7 = OUTLINED_FUNCTION_10_0(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_4_4();
  uint64_t v84 = v8;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v9);
  uint64_t v88 = (uint64_t)&v82 - v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  uint64_t v89 = (uint64_t)&v82 - v12;
  type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v90 = v13;
  uint64_t v91 = v14;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  uint64_t v24 = OUTLINED_FUNCTION_10_0(v23);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v82 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v82 - v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v34 = OUTLINED_FUNCTION_10_0(v33);
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_15();
  uint64_t v37 = v36 - v35;
  USOParse.preferredUserDialogAct.getter(v36 - v35);
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_6_3(v37, 1, v38);
  if (v54)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v37, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_10:
    long long v93 = 0u;
    long long v94 = 0u;
    goto LABEL_11;
  }
  uint64_t v39 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v40();
  if (!v39) {
    goto LABEL_10;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((void *)&v94 + 1))
  {
LABEL_11:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)&v93, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with take of Any(&v93, v95);
  outlined init with copy of Any((uint64_t)v95, (uint64_t)&v93);
  type metadata accessor for UsoTask_create_common_Person();
  if (OUTLINED_FUNCTION_4_39()) {
    goto LABEL_8;
  }
  type metadata accessor for UsoTask_delete_common_Person();
  if (OUTLINED_FUNCTION_4_39()) {
    goto LABEL_8;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_4_39())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v92
      && (uint64_t v43 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter(), swift_release(), v43)
      || (dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(), v92)
      && (uint64_t v44 = dispatch thunk of UsoEntity_common_Person.structuredName.getter(), swift_release(), v44))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
LABEL_28:
      swift_release();
LABEL_29:
      uint64_t ContactAttributeIntent = type metadata accessor for GetContactAttributeIntent();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
      return ContactAttributeIntent;
    }
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    if (v92)
    {
      uint64_t v47 = dispatch thunk of UsoEntity_common_Person.age.getter();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
      if (v47) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
    }
LABEL_65:
    uint64_t ContactAttributeIntent = type metadata accessor for GetContactIntent();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
    return ContactAttributeIntent;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_4_39())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    if (v92 && (uint64_t v45 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), swift_release(), v45))
    {
      dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
      swift_release();
      uint64_t v46 = v90;
    }
    else
    {
      uint64_t v46 = v90;
      __swift_storeEnumTagSinglePayload((uint64_t)v32, 1, 1, v90);
    }
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v30, *MEMORY[0x263F72C78], v46);
    __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v46);
    uint64_t v48 = v22 + *(int *)(v18 + 48);
    outlined init with copy of URL?((uint64_t)v32, v22, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined init with copy of URL?((uint64_t)v30, v48, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    OUTLINED_FUNCTION_6_3(v22, 1, v46);
    if (v54)
    {
      swift_release();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v32, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
      OUTLINED_FUNCTION_6_3(v48, 1, v46);
      if (v54)
      {
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v22, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        goto LABEL_9;
      }
    }
    else
    {
      outlined init with copy of URL?(v22, (uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      OUTLINED_FUNCTION_6_3(v48, 1, v46);
      if (!v54)
      {
        uint64_t v55 = v91;
        OUTLINED_FUNCTION_11();
        v56();
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, MEMORY[0x263F72CB0]);
        LODWORD(v90) = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        unsigned int v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v57(v17, v46);
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v32, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
        v57((uint64_t)v27, v46);
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v22, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        if (v90) {
          goto LABEL_9;
        }
        goto LABEL_65;
      }
      swift_release();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v32, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v27, v46);
    }
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v22, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
    goto LABEL_65;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_4_39())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
    goto LABEL_28;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if (OUTLINED_FUNCTION_4_39())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    swift_release();
    if (v92)
    {
      uint64_t v49 = dispatch thunk of UsoEntity_common_Person.phoneticStructuredName.getter();
      swift_release();
      if (v49)
      {
        swift_release();
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        uint64_t v51 = OUTLINED_FUNCTION_21_0(v50, (uint64_t)static Logger.siriContacts);
        os_log_type_t v52 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_0(v52))
        {
          uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_20();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl(&dword_22D49E000, v51, (os_log_type_t)v49, "Learning pronunciation is unsupported", v53, 2u);
          OUTLINED_FUNCTION_2();
        }
        swift_release();

        goto LABEL_85;
      }
    }
    if (UsoTask_update_common_Person.isChangeContactPoster.getter())
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
      swift_release();
      goto LABEL_65;
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    swift_release();
    if (v92 && (uint64_t v58 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), v58))
    {
      if (dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter())
      {
        uint64_t v59 = v89;
        dispatch thunk of UsoEntity_common_Person.definedValue.getter();
        uint64_t v60 = v88;
        uint64_t v61 = v86;
        (*(void (**)(uint64_t, void, uint64_t))(v87 + 104))(v88, *MEMORY[0x263F72A70], v86);
        __swift_storeEnumTagSinglePayload(v60, 0, 1, v61);
        uint64_t v62 = v85;
        uint64_t v63 = v85 + *(int *)(v3 + 48);
        outlined init with copy of URL?(v59, v85, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined init with copy of URL?(v60, v63, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        OUTLINED_FUNCTION_6_3(v62, 1, v61);
        if (v54)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v88, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v89, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          OUTLINED_FUNCTION_6_3(v63, 1, v61);
          if (v54)
          {
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v62, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
LABEL_87:
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
            swift_release();
            goto LABEL_88;
          }
        }
        else
        {
          uint64_t v71 = v84;
          outlined init with copy of URL?(v62, v84, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          OUTLINED_FUNCTION_6_3(v63, 1, v61);
          if (!v72)
          {
            uint64_t v77 = v87;
            uint64_t v78 = v83;
            OUTLINED_FUNCTION_11();
            v79();
            lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues, MEMORY[0x263F72A78]);
            char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
            unsigned int v81 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
            v81(v78, v61);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v88, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v89, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            v81(v71, v61);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v62, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            if (v80) {
              goto LABEL_87;
            }
            goto LABEL_79;
          }
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v88, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v89, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v71, v61);
        }
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v62, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
LABEL_79:
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v73 = type metadata accessor for Logger();
        uint64_t v74 = OUTLINED_FUNCTION_21_0(v73, (uint64_t)static Logger.siriContacts);
        os_log_type_t v75 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = (uint8_t *)OUTLINED_FUNCTION_20();
          *(_WORD *)uint64_t v76 = 0;
          _os_log_impl(&dword_22D49E000, v74, v75, "Modifying other contacts' relationships is unsupported", v76, 2u);
          OUTLINED_FUNCTION_2();
        }
        swift_release();

        swift_release();
LABEL_84:
        swift_release();
        goto LABEL_85;
      }
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      swift_release();
      if (!v92)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
LABEL_89:
        swift_release();
        uint64_t ContactAttributeIntent = type metadata accessor for ModifyContactAttributeIntent();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
        return ContactAttributeIntent;
      }
      dispatch thunk of UsoEntity_common_Person.name.getter();
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v67 = type metadata accessor for Logger();
        uint64_t v68 = OUTLINED_FUNCTION_21_0(v67, (uint64_t)static Logger.siriContacts);
        os_log_type_t v69 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)OUTLINED_FUNCTION_20();
          *(_WORD *)uint64_t v70 = 0;
          _os_log_impl(&dword_22D49E000, v68, v69, "Modifying other contacts' attributes is unsupported", v70, 2u);
          OUTLINED_FUNCTION_2();
        }
        swift_release();

        goto LABEL_84;
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
LABEL_88:
    swift_release();
    goto LABEL_89;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (!swift_dynamicCast())
  {
LABEL_85:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
    goto LABEL_9;
  }
  if ((UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter() & 1) == 0)
  {
    char v64 = UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
    if (v64) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
  swift_release();
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
  return 0;
}

uint64_t USOParse.preferredUserDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v66 = v7;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v8);
  os_log_type_t v69 = (char *)&v63 - v9;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v14 = OUTLINED_FUNCTION_10_0(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_4_4();
  uint64_t v67 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (char *)&v63 - v17;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v65 = (char *)&v63 - v25;
  OUTLINED_FUNCTION_17();
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v68 = (char *)&v63 - v30;
  uint64_t v72 = v1;
  uint64_t v31 = USOParse.userParse.getter();
  uint64_t v32 = MEMORY[0x230F82FC0](v31);
  uint64_t v33 = *(void (**)(void, void))(v5 + 8);
  uint64_t v73 = v3;
  uint64_t v34 = v3;
  uint64_t v35 = v32;
  uint64_t v70 = v33;
  uint64_t v71 = v5 + 8;
  v33(v12, v34);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v74 = v20;
  uint64_t v75 = a1;
  if (v36)
  {
    uint64_t v39 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
    uint64_t v38 = v20 + 16;
    uint64_t v37 = v39;
    unint64_t v40 = v35 + ((*(unsigned __int8 *)(v38 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 64));
    uint64_t v41 = *(void *)(v38 + 56);
    uint64_t v64 = v35;
    swift_bridgeObjectRetain();
    while (1)
    {
      v37(v29, v40, v18);
      if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter()) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v38 - 8))(v29, v18);
      v40 += v41;
      if (!--v36)
      {
        uint64_t v35 = v64;
        swift_bridgeObjectRelease();
        uint64_t v42 = 1;
        uint64_t v20 = v74;
        a1 = v75;
        goto LABEL_7;
      }
    }
    uint64_t v35 = v64;
    swift_bridgeObjectRelease();
    uint64_t v20 = v74;
    uint64_t v43 = (uint64_t)v76;
    OUTLINED_FUNCTION_11();
    v44();
    uint64_t v42 = 0;
    a1 = v75;
  }
  else
  {
    uint64_t v42 = 1;
LABEL_7:
    uint64_t v43 = (uint64_t)v76;
  }
  __swift_storeEnumTagSinglePayload(v43, v42, 1, v18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_3(v43, 1, v18);
  if (v45)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v43, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v46 = USOParse.userParse.getter();
    MEMORY[0x230F82FC0](v46);
    uint64_t v47 = OUTLINED_FUNCTION_24_19();
    v48(v47);
    uint64_t v49 = *(void *)(v35 + 16);
    if (v49)
    {
      uint64_t v50 = v20 + 16;
      uint64_t v51 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
      unint64_t v52 = v35 + ((*(unsigned __int8 *)(v50 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 64));
      uint64_t v53 = *(void *)(v50 + 56);
      swift_bridgeObjectRetain();
      while (1)
      {
        v51(v24, v52, v18);
        if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v50 - 8))(v24, v18);
        v52 += v53;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = 1;
          uint64_t v20 = v74;
          a1 = v75;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = v74;
      uint64_t v57 = v67;
      OUTLINED_FUNCTION_11();
      v58();
      uint64_t v54 = 0;
      a1 = v75;
    }
    else
    {
      uint64_t v54 = 1;
LABEL_17:
      uint64_t v57 = v67;
    }
    __swift_storeEnumTagSinglePayload(v57, v54, 1, v18);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_3(v57, 1, v18);
    if (v45)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v57, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v59 = USOParse.userParse.getter();
      MEMORY[0x230F82FC0](v59);
      uint64_t v60 = OUTLINED_FUNCTION_24_19();
      v61(v60);
      specialized Collection.first.getter(v35, a1);
      return swift_bridgeObjectRelease();
    }
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v56 = v65;
    v55(v65, v57, v18);
  }
  else
  {
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v56 = v68;
    v55(v68, v43, v18);
  }
  v55((char *)a1, (uint64_t)v56, v18);
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v18);
}

uint64_t USOParse.isContactDisambiguation.getter()
{
  return USOParse.isOrdinalDisambiguation.getter(MEMORY[0x263F72D68]);
}

uint64_t USOParse.isOrdinalDisambiguation.getter(void (*a1)(void))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  USOParse.preferredUserDialogAct.getter(v5 - v4);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_6_3(v6, 1, v7);
  if (v8)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v6, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_9;
  }
  uint64_t v9 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v10();
  if (!v9) {
    goto LABEL_8;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((void *)&v13 + 1))
  {
LABEL_9:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)&v12, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  a1(0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    swift_release();
    return 1;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in static Transformer<>.transformer(_:referenceResolver:)(void *a1@<X8>)
{
  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(*(void **)(v1 + 16), v1 + 24, a1);
}

{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(*(void **)(v1 + 16), v1 + 24, a1);
}

{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(*(void **)(v1 + 16), v1 + 24, a1);
}

uint64_t objectdestroyTm_0()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in static Transformer<>.transformer(_:)(void *a1@<X8>)
{
  closure #1 in static Transformer<>.transformer(_:)(*(void **)(v1 + 16), a1);
}

{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_22D5856C4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t OUTLINED_FUNCTION_1_41()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_4_39()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_8_31()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_15_25()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

uint64_t OUTLINED_FUNCTION_19_19()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_20_21(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_21_17()
{
  return swift_dynamicCastClass();
}

uint64_t OUTLINED_FUNCTION_23_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t OUTLINED_FUNCTION_29_13()
{
  return v0;
}

uint64_t ModifyContactAttributeIntent.__allocating_init(_:referenceResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v124 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_3_4();
  uint64_t v119 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_3_4();
  uint64_t v120 = v7;
  uint64_t v8 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v125 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_4_4();
  uint64_t v121 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v122 = (uint64_t)&v111 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v111 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v111 - v21;
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_51();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_4_4();
  uint64_t v123 = v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v111 - v26;
  id v28 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v29 = one-time initialization token for setRelationship;
  id v30 = v28;
  if (v29 != -1) {
    swift_once();
  }
  unint64_t v126 = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v32 = v127;
  unint64_t v31 = (unint64_t)v128;
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v27);
  if (v31)
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v27);
LABEL_8:
    uint64_t v33 = (void *)MEMORY[0x230F84F70](v32, v31);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (one-time initialization token for removeRelationship != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v32 = v127;
  unint64_t v31 = (unint64_t)v128;
  outlined destroy of ContactNLv3Intent((uint64_t)v27);
  if (v31) {
    goto LABEL_8;
  }
  uint64_t v33 = 0;
LABEL_9:
  objc_msgSend(v30, sel_setModifyRelationship_, v33);

  ContactNLv3Intent.person.getter(v34, v35, v36, v37, v38, v39, v40, v41, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, (uint64_t)v121,
    v122);
  OUTLINED_FUNCTION_9_28((uint64_t)v22);
  if (v42)
  {
    outlined destroy of URL?((uint64_t)v22, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    uint64_t v43 = PersonIntentNodeContaining.relationship.getter();
    uint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v22, v8);
    if (v45) {
      outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v43, v45, v30, (SEL *)&selRef_setModifyRelationship_);
    }
  }
  if (one-time initialization token for setNickName != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v46 = v128;
  if (v128)
  {
    Swift::String v47 = String.firstLetterCapitalized()();
    swift_bridgeObjectRelease();
    uint64_t v46 = (void *)MEMORY[0x230F84F70](v47._countAndFlagsBits, v47._object);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v30, sel_setModifyNickName_, v46);

  uint64_t v48 = ContactNLv3Intent.hasPersonNickName.getter();
  if (v48)
  {
    outlined bridged method (pb) of @objc PostalAddress.street.getter(v30, (SEL *)&selRef_modifyRelationship);
    uint64_t v57 = v56;
    uint64_t v48 = swift_bridgeObjectRelease();
    if (!v57)
    {
      ContactNLv3Intent.person.getter(v48, v49, v50, v51, v52, v53, v54, v55, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, (uint64_t)v121,
        v122);
      OUTLINED_FUNCTION_9_28((uint64_t)v20);
      if (v42)
      {
        outlined destroy of URL?((uint64_t)v20, &demangling cache variable for type metadata for PersonIntentNode?);
        uint64_t v59 = 0;
      }
      else
      {
        PersonIntentNodeContaining.nickName.getter();
        uint64_t v59 = v58;
        (*(void (**)(char *, uint64_t))(v125 + 8))(v20, v8);
        if (v59)
        {
          Swift::String v60 = String.firstLetterCapitalized()();
          swift_bridgeObjectRelease();
          uint64_t v59 = (void *)MEMORY[0x230F84F70](v60._countAndFlagsBits, v60._object);
          swift_bridgeObjectRelease();
        }
      }
      objc_msgSend(v30, sel_setModifyNickName_, v59);
    }
  }
  ContactNLv3Intent.person.getter(v48, v49, v50, v51, v52, v53, v54, v55, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, (uint64_t)v121,
    v122);
  OUTLINED_FUNCTION_9_28((uint64_t)v17);
  if (v42)
  {
    outlined destroy of URL?((uint64_t)v17, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    uint64_t v61 = v125;
    uint64_t v62 = v122;
    uint64_t v63 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v125 + 32))(v122, v17, v8);
    char v64 = ContactNLv3Intent.hasPersonNameNode.getter(v63);
    if ((v64 & 1) != 0 && (ContactNLv3Intent.isForgetNickname.getter() & 1) == 0)
    {
      uint64_t result = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v30);
      if (result)
      {
        uint64_t v66 = v120;
        if ((result & 0xC000000000000001) != 0)
        {
          id v67 = (id)MEMORY[0x230F854E0](0, result);
        }
        else
        {
          if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v67 = *(id *)(result + 32);
        }
        uint64_t v68 = v67;
        swift_bridgeObjectRelease();
        uint64_t v69 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v68, (SEL *)&selRef_identifier);
        uint64_t v117 = v70;
        uint64_t v118 = v69;
      }
      else
      {
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        uint64_t v66 = v120;
      }
      uint64_t v71 = PersonIntentNodeContaining.firstName.getter();
      uint64_t v73 = v72;
      uint64_t v74 = v121;
      (*(void (**)(void (*)(void, void), uint64_t, uint64_t))(v61 + 16))(v121, v62, v8);
      if (v73)
      {
        uint64_t v120 = v71;
      }
      else
      {
        uint64_t v75 = PersonIntentNodeContaining.fullName.getter();
        uint64_t v74 = v121;
        uint64_t v120 = v75;
        uint64_t v73 = v76;
      }
      uint64_t v77 = *(void (**)(void, void))(v61 + 8);
      uint64_t v125 = v61 + 8;
      uint64_t v121 = v77;
      v77(v74, v8);
      OUTLINED_FUNCTION_7_30();
      uint64_t v78 = PersonIntentNodeContaining.middleName.getter();
      uint64_t v115 = v79;
      uint64_t v116 = v78;
      OUTLINED_FUNCTION_7_30();
      uint64_t v80 = PersonIntentNodeContaining.lastName.getter();
      uint64_t v113 = v81;
      uint64_t v114 = v80;
      OUTLINED_FUNCTION_7_30();
      uint64_t v82 = PersonIntentNodeContaining.nickName.getter();
      uint64_t v111 = v83;
      uint64_t v112 = v82;
      OUTLINED_FUNCTION_7_30();
      PersonIntentNodeContaining.namePrefix.getter();
      uint64_t v84 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
      if (__swift_getEnumTagSinglePayload(v66, 1, v84) == 1)
      {
        outlined destroy of URL?(v66, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
        uint64_t v85 = 0;
        uint64_t v86 = 0;
      }
      else
      {
        uint64_t v85 = PersonOntologyNode.PersonNamePrefix.rawValue.getter();
        uint64_t v86 = v87;
        OUTLINED_FUNCTION_51();
        (*(void (**)(void))(v88 + 8))();
      }
      uint64_t v89 = v119;
      PersonIntentNodeContaining.namePostfix.getter();
      uint64_t v90 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
      if (__swift_getEnumTagSinglePayload(v89, 1, v90) == 1)
      {
        outlined destroy of URL?(v89, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
        uint64_t v91 = 0;
        uint64_t v92 = 0;
      }
      else
      {
        uint64_t v91 = PersonOntologyNode.PersonNamePostfix.rawValue.getter();
        uint64_t v92 = v93;
        OUTLINED_FUNCTION_51();
        (*(void (**)(void))(v94 + 8))();
      }
      type metadata accessor for Contact();
      id v95 = Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(v118, v117, v120, v73, v116, v115, v114, v113, v112, v111, 0, 0, v85, v86, v91, v92, 0, 0, 0,
              0);
      objc_msgSend(v30, sel_setRelatedContact_, v95);

      v121(v122, v8);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v8);
    }
  }
  objc_msgSend(v30, sel_setContactAttributeToModify_, ModifyContactAttributeIntent.getContactAttributeToModify(from:)(a1));
  objc_msgSend(v30, sel_setModifyOperation_, ModifyContactAttributeIntent.modifyOperation(from:)(a1));
  if (one-time initialization token for contactId != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_8_32();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v128)
  {
    uint64_t v96 = String.sanitizeContactIdURL.getter(v127, (unint64_t)v128);
    uint64_t v98 = v97;
    swift_bridgeObjectRelease();
    id v99 = objc_msgSend(v30, sel_relatedContact);
    if (v99)
    {
      unsigned int v100 = v99;
      uint64_t v101 = Contact.formattedFullName.getter();
      uint64_t v103 = v102;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = xmmword_22D59FB50;
      type metadata accessor for SiriMatch();
      *(void *)(v104 + 32) = SiriMatch.__allocating_init(identifier:fullName:)(v96, v98, v101, v103);
      uint64_t v127 = v104;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v105 = swift_allocObject();
      *(_OWORD *)(v105 + 16) = xmmword_22D59FB50;
      type metadata accessor for SiriMatch();
      id v106 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      *(void *)(v105 + 32) = @nonobjc INObject.init(identifier:display:)(v96, v98, v96, v98);
      uint64_t v127 = v105;
    }
    specialized Array._endMutation()();
    outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.relatedSiriMatches.setter(v127, v30);
  }
  id v107 = objc_msgSend(v30, sel_relatedContact);

  uint64_t v108 = v123;
  outlined init with copy of ContactNLv3Intent(a1, v123);
  if (v107)
  {
    outlined destroy of ContactNLv3Intent(v108);
    uint64_t v109 = v124;
  }
  else
  {
    OUTLINED_FUNCTION_8_32();
    IntentNodeTraversable.value<A>(forNode:)();
    unint64_t v110 = (unint64_t)v128;
    outlined destroy of ContactNLv3Intent(v108);
    swift_bridgeObjectRelease();
    uint64_t v109 = v124;
    if (!v110 && (ContactNLv3Intent.isForgetNickname.getter() & 1) == 0) {
      ModifyContactAttributeIntent.runReferenceResolution(_:)(v109);
    }
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v109);
  outlined destroy of ContactNLv3Intent(a1);
  return (uint64_t)v30;
}

char *ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  uint64_t v12 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(a5, 0);
  type metadata accessor for ContactRelation();
  uint64_t v13 = v12;
  id v14 = ContactRelation.__allocating_init(relationship:relatedFullName:)(a1, a2, a3, a4);
  objc_msgSend(v13, sel_setUpdatedRelationship_, v14);

  return v13;
}

uint64_t ModifyContactAttributeIntent.runReferenceResolution(_:)(uint64_t a1)
{
  swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v4;
  static SiriKitContactIntent.runReferenceResolution(_:completion:)(a1, partial apply for specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:), v2);
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t ModifyContactAttributeIntent.getContactAttributeToModify(from:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ContactNLv3Intent();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = &v20[-v8];
  MEMORY[0x270FA5388](v7);
  id v11 = &v20[-v10];
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v1, (SEL *)&selRef_modifyRelationship);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v1);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
    if (v16)
    {
      outlined destroy of ContactNLv3Intent((uint64_t)v11);
      outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v9);
    }
    else
    {
      v20[0] = 44;
      uint64_t v17 = ContactNLv3Intent.containsAttribute(_:)();
      outlined destroy of ContactNLv3Intent((uint64_t)v11);
      outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v9);
      if ((v17 & 1) == 0)
      {
        char v19 = ContactNLv3Intent.isForgetNickname.getter();
        outlined destroy of ContactNLv3Intent((uint64_t)v9);
        outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v6);
        if ((v19 & 1) == 0)
        {
          if (one-time initialization token for setNickName != -1) {
            swift_once();
          }
          lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
          IntentNodeTraversable.value<A>(forNode:)();
          if (!v21)
          {
            uint64_t v14 = 0;
            goto LABEL_8;
          }
          swift_bridgeObjectRelease();
        }
LABEL_7:
        uint64_t v14 = 6;
LABEL_8:
        outlined destroy of ContactNLv3Intent((uint64_t)v6);
        return v14;
      }
    }
    outlined destroy of ContactNLv3Intent((uint64_t)v9);
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v6);
    goto LABEL_7;
  }
  return 10;
}

uint64_t ModifyContactAttributeIntent.modifyOperation(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactNLv3Intent();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v8 = &v18[-v7];
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  id v11 = &v18[-v10];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v18[-v12];
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v18[0] == 17)
  {
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v13);
  }
  else
  {
    char v14 = specialized == infix<A>(_:_:)(v18[0], 15);
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v13);
    if (v14)
    {
LABEL_10:
      outlined destroy of ContactNLv3Intent((uint64_t)v13);
      return 3;
    }
  }
  if (one-time initialization token for removeRelationship != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v13);
  if (one-time initialization token for setRelationship != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v19)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
LABEL_19:
    outlined destroy of ContactNLv3Intent((uint64_t)v11);
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v8);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
    return 1;
  }
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
  if (one-time initialization token for setNickName != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v11);
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v8);
  IntentNodeTraversable.value<A>(forNode:)();
  int v16 = v18[0];
  outlined init with copy of ContactNLv3Intent((uint64_t)v8, (uint64_t)v5);
  if (v16 == 17 || (IntentNodeTraversable.value<A>(forNode:)(), v18[0] == 17))
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v5);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
  }
  else
  {
    char v17 = specialized == infix<A>(_:_:)(v18[0], 4);
    outlined destroy of ContactNLv3Intent((uint64_t)v5);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
    if (v17) {
      return 1;
    }
  }
  return 0;
}

id ModifyContactAttributeIntent.__allocating_init(_:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v11 = (char *)v52 - v10;
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000026 && v12 == 0x800000022D5A6450)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.siriContacts);
      OUTLINED_FUNCTION_6_36();
      v30();
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        uint64_t v56 = v33 + 4;
        uint64_t v34 = Parse.DirectInvocation.identifier.getter();
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v59);
        OUTLINED_FUNCTION_49_7(v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v37 = *(void (**)(void))(v5 + 8);
        OUTLINED_FUNCTION_6_16();
        v37();
        _os_log_impl(&dword_22D49E000, v31, v32, "DirectInvocation %s that cannot be handled. No object constructed", v33, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {

        uint64_t v37 = *(void (**)(void))(v5 + 8);
        ((void (*)(char *, uint64_t))v37)(v9, v3);
      }
      OUTLINED_FUNCTION_6_16();
      v37();
      return 0;
    }
  }
  id v14 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  uint64_t v15 = Parse.DirectInvocation.userData.getter();
  if (!v15)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    goto LABEL_17;
  }
  specialized Dictionary.subscript.getter(0x656D616E6B63696ELL, 0xE800000000000000, v15, &v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_17:

LABEL_18:
    outlined destroy of URL?((uint64_t)&v59, &demangling cache variable for type metadata for Any?);
LABEL_30:
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_6_36();
    v39();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v56 = (uint8_t *)v3;
      unint64_t v54 = a1;
      char v42 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v59 = swift_slowAlloc();
      *(_DWORD *)char v42 = 136315138;
      uint64_t v43 = Parse.DirectInvocation.userData.getter();
      uint64_t v53 = v5;
      id v55 = v14;
      if (!v43) {
        Dictionary.init(dictionaryLiteral:)();
      }
      uint64_t v44 = Dictionary.description.getter();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v59);
      OUTLINED_FUNCTION_49_7(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void (**)(char *, uint8_t *))(v53 + 8);
      uint64_t v49 = v56;
      v48(v11, v56);
      _os_log_impl(&dword_22D49E000, v40, v41, "Unable to extract nickname and modify operation from provided userData: %s", v42, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      v48((char *)v54, v49);
    }
    else
    {

      uint64_t v50 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_6_16();
      v50();
      OUTLINED_FUNCTION_6_16();
      v50();
    }
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_32() & 1) == 0)
  {
LABEL_29:

    goto LABEL_30;
  }
  uint64_t v17 = v57;
  unint64_t v16 = v58;
  uint64_t v18 = Parse.DirectInvocation.userData.getter();
  if (!v18)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    goto LABEL_26;
  }
  specialized Dictionary.subscript.getter(0x704F796669646F6DLL, 0xEF6E6F6974617265, v18, &v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_26:

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if ((OUTLINED_FUNCTION_10_32() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  unint64_t v19 = ModifyOperation.init(rawValue:)(v57);
  if (v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  unint64_t v21 = v19;
  uint64_t v56 = (uint8_t *)v3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    unint64_t v54 = v21;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    id v55 = v14;
    *(void *)&long long v59 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    v52[1] = v26 + 4;
    swift_bridgeObjectRetain();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, (uint64_t *)&v59);
    OUTLINED_FUNCTION_49_7(v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v23, v24, "Received updated nickname value %s from DirectInvocation", v26, 0xCu);
    swift_arrayDestroy();
    id v14 = v55;
    OUTLINED_FUNCTION_2();
    unint64_t v21 = v54;
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v17, v16, v14, (SEL *)&selRef_setModifyNickName_);
  objc_msgSend(v14, sel_setModifyOperation_, v21);
  objc_msgSend(v14, sel_setContactAttributeToModify_, 6);

  (*(void (**)(unint64_t, uint8_t *))(v5 + 8))(a1, v56);
  return v14;
}

id ModifyContactAttributeIntent.siriInferenceContact.getter()
{
  uint64_t v1 = type metadata accessor for ContactHandle.HandleType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContactHandle();
  OUTLINED_FUNCTION_0_0();
  uint64_t v49 = v8;
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Contact.init()();
  id v12 = objc_msgSend(v0, sel_relatedContact);
  if (v12)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v12, (SEL *)&selRef_identifier);
    if (v13) {
      Contact.id.setter();
    }
  }
  id v14 = OUTLINED_FUNCTION_1_42();
  if (v14)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v14, (SEL *)&selRef_givenName);
    if (v15) {
      Contact.givenName.setter();
    }
  }
  id v16 = OUTLINED_FUNCTION_1_42();
  if (v16)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v16, (SEL *)&selRef_middleName);
    if (v17) {
      Contact.middleName.setter();
    }
  }
  id v18 = OUTLINED_FUNCTION_1_42();
  if (v18)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v18, (SEL *)&selRef_familyName);
    if (v19) {
      Contact.familyName.setter();
    }
  }
  id v20 = OUTLINED_FUNCTION_1_42();
  if (v20)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v20, (SEL *)&selRef_nickName);
    if (v21) {
      Contact.nickname.setter();
    }
  }
  id v22 = OUTLINED_FUNCTION_1_42();
  if (v22)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v22, (SEL *)&selRef_namePrefix);
    if (v23) {
      Contact.namePrefix.setter();
    }
  }
  id v24 = OUTLINED_FUNCTION_1_42();
  if (v24)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v24, (SEL *)&selRef_nameSuffix);
    if (v25) {
      Contact.nameSuffix.setter();
    }
  }
  id v26 = OUTLINED_FUNCTION_1_42();
  if (v26)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v26, (SEL *)&selRef_fullName);
    if (v27) {
      Contact.givenName.setter();
    }
  }
  id v28 = OUTLINED_FUNCTION_1_42();
  if (v28)
  {
    outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v28, (SEL *)&selRef_phoneNumber);
    if (v29)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F6D328], v1);
      OUTLINED_FUNCTION_2_41();
      ContactHandle.init(id:type:label:value:isSuggested:)();
      id v30 = (void (*)(unsigned char *, void))Contact.handles.modify();
      os_log_type_t v32 = v31;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v33 = v6;
      uint64_t v34 = v11;
      uint64_t v35 = v3;
      uint64_t v36 = v1;
      uint64_t v37 = v7;
      uint64_t v38 = *(void *)(*v32 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      uint64_t v39 = *v32;
      *(void *)(v39 + 16) = v38 + 1;
      unint64_t v40 = v39
          + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))
          + *(void *)(v49 + 72) * v38;
      uint64_t v7 = v37;
      uint64_t v1 = v36;
      uint64_t v3 = v35;
      id v11 = v34;
      uint64_t v6 = v33;
      (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v40, v11, v7);
      v30(v50, 0);
    }
  }
  id result = OUTLINED_FUNCTION_1_42();
  if (result)
  {
    id result = (id)outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(result, (SEL *)&selRef_emailAddress);
    if (v42)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F6D320], v1);
      OUTLINED_FUNCTION_2_41();
      ContactHandle.init(id:type:label:value:isSuggested:)();
      uint64_t v43 = (uint64_t (*)(unsigned char *, void))Contact.handles.modify();
      unint64_t v45 = v44;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v46 = *(void *)(*v45 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
      uint64_t v47 = *v45;
      *(void *)(v47 + 16) = v46 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v47+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v46, v11, v7);
      return (id)v43(v50, 0);
    }
  }
  return result;
}

NSNumber ModifyContactAttributeIntent.isMe.getter()
{
  return NSNumber.init(BOOLeanLiteral:)(0);
}

uint64_t ModifyContactAttributeIntent.contactIdentifier.getter()
{
  id v1 = objc_msgSend(v0, sel_relatedContact);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_identifier);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v5;
    }

    return 0;
  }
  unint64_t v6 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v0);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6;
  uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
  if (!(v6 >> 62))
  {
    uint64_t result = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x230F854E0](0, v7);
    goto LABEL_10;
  }
  if (*(void *)(v8 + 16))
  {
    id v10 = *(id *)(v7 + 32);
LABEL_10:
    id v11 = v10;
    swift_bridgeObjectRelease();
    return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v11, (SEL *)&selRef_identifier);
  }
  __break(1u);
  return result;
}

BOOL ModifyContactAttributeIntent.isDeleteNickname.getter()
{
  return objc_msgSend(v0, sel_contactAttributeToModify) == (id)6 && objc_msgSend(v0, sel_modifyOperation) == (id)3;
}

uint64_t ModifyContactAttributeIntent.requestedName.getter()
{
  id v1 = objc_msgSend(v0, sel_relatedContact);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v1, (SEL *)&selRef_fullName);
  if (!v4)
  {
    uint64_t v3 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, (SEL *)&selRef_givenName);
    if (!v5)
    {
      uint64_t v3 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, (SEL *)&selRef_middleName);
      if (!v6)
      {
        uint64_t v3 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, (SEL *)&selRef_familyName);
        if (!v7)
        {
          id v9 = objc_msgSend(v2, sel_nickName);
          if (v9)
          {
            id v10 = v9;
            uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

            goto LABEL_7;
          }

          return 0;
        }
      }
    }
  }
  uint64_t v8 = v3;
LABEL_7:

  return v8;
}

void specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x230F85EA0](a4);
  if (v8)
  {
    id v9 = (void *)v8;
    switch(a3)
    {
      case 1:
        uint64_t v16 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v16 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        id v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          unint64_t v38 = a2;
          uint64_t v39 = v21;
          *(_DWORD *)id v20 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v22 = String.init<A>(describing:)();
          uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          _os_log_impl(&dword_22D49E000, v18, v19, "#ModifyContactAttributeIntent: Resolved an email from reference resolution: %s", v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v21, -1, -1);
          MEMORY[0x230F85DE0](v20, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }

        type metadata accessor for Contact();
        uint64_t v36 = Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1,
                            a2);
        goto LABEL_25;
      case 2:
        uint64_t v24 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        id v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          unint64_t v38 = a2;
          uint64_t v39 = v29;
          *(_DWORD *)id v28 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v30 = String.init<A>(describing:)();
          uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          _os_log_impl(&dword_22D49E000, v26, v27, "#ModifyContactAttributeIntent: Resolved a phone number from reference resolution: %s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v29, -1, -1);
          MEMORY[0x230F85DE0](v28, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }

        type metadata accessor for Contact();
        uint64_t v36 = Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, a2, 0,
                            0);
        goto LABEL_25;
      case 3:
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v35 = 0;
          _os_log_impl(&dword_22D49E000, v33, v34, "#ModifyContactAttributeIntent: no value found from reference resolution", v35, 2u);
          MEMORY[0x230F85DE0](v35, -1, -1);
        }
        goto LABEL_26;
      default:
        uint64_t v10 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v10 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v12, v13))
        {
          id v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          uint64_t v37 = v15;
          *(_DWORD *)id v14 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v12, v13, "#ModifyContactAttributeIntent: Resolved a contact from reference resolution with identifier: %s", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v15, -1, -1);
          MEMORY[0x230F85DE0](v14, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        }

        type metadata accessor for Contact();
        uint64_t v36 = Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(a1, a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0);
LABEL_25:
        uint64_t v33 = v36;
        objc_msgSend(v9, sel_setRelatedContact_, v36);
LABEL_26:

        break;
    }
  }
}

NSNumber protocol witness for SiriKitContactIntent.isMe.getter in conformance ModifyContactAttributeIntent()
{
  return ModifyContactAttributeIntent.isMe.getter();
}

id @nonobjc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)MEMORY[0x230F84F70](a3, a4);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v4, sel_initWithIdentifier_displayString_, v7, v8);

  return v9;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc INObject.identifier.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(a1, (SEL *)&selRef_identifier);
}

void outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.modifyNickName.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_modifyRelationship);
}

uint64_t outlined bridged method (pb) of @objc Contact.givenName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_givenName);
}

uint64_t outlined bridged method (pb) of @objc Contact.middleName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_middleName);
}

uint64_t outlined bridged method (pb) of @objc Contact.familyName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_familyName);
}

void outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.relatedSiriMatches.setter(uint64_t a1, void *a2)
{
  type metadata accessor for SiriMatch();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRelatedSiriMatches_, isa);
}

uint64_t outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_relatedSiriMatches);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for SiriMatch();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_22D588230()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(uint64_t a1, unint64_t a2, char a3)
{
  specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(a1, a2, a3, *(void *)(v3 + 16));
}

id OUTLINED_FUNCTION_1_42()
{
  return [v1 (SEL)(v0 + 959)];
}

uint64_t OUTLINED_FUNCTION_2_41()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_7_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_32()
{
  return *(void *)(v0 + 3064);
}

uint64_t OUTLINED_FUNCTION_9_28(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_10_32()
{
  return swift_dynamicCast();
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for ContactsError();
  v4[9] = v5;
  OUTLINED_FUNCTION_10_0(v5);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_10_0(v6);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NLIntent();
  v4[12] = v7;
  OUTLINED_FUNCTION_1(v7);
  v4[13] = v8;
  v4[14] = OUTLINED_FUNCTION_31();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for USOParse();
  v4[17] = v9;
  OUTLINED_FUNCTION_1(v9);
  v4[18] = v10;
  v4[19] = OUTLINED_FUNCTION_31();
  v4[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation();
  v4[21] = v11;
  OUTLINED_FUNCTION_1(v11);
  v4[22] = v12;
  v4[23] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Parse();
  v4[24] = v13;
  OUTLINED_FUNCTION_1(v13);
  v4[25] = v14;
  v4[26] = OUTLINED_FUNCTION_31();
  v4[27] = swift_task_alloc();
  return MEMORY[0x270FA2498](Parse.toSiriKitIntent(referenceResolver:previousIntent:), 0, 0);
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)()
{
  uint64_t v92 = v0;
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_29_14();
  v4();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v5 == *MEMORY[0x263F6FF50])
  {
    uint64_t v6 = v0[27];
    uint64_t v7 = v0[16];
    uint64_t v9 = v0[12];
    uint64_t v8 = v0[13];
    uint64_t v10 = OUTLINED_FUNCTION_32_15();
    v11(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v6, v9);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = v0[15];
    uint64_t v12 = v0[16];
    uint64_t v15 = v0[12];
    uint64_t v14 = v0[13];
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[13];
    if (v19)
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_24();
      uint64_t v91 = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v21 = 136315138;
      buf = v21 + 4;
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, MEMORY[0x263F73760]);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void (**)(void))(v20 + 8);
      OUTLINED_FUNCTION_10_33();
      v24();
      uint64_t v25 = v24;
      _os_log_impl(&dword_22D49E000, v17, v18, "#Parse.toSiriKitIntent Converting NLv3IntentOnly Parse to SiriKit Intent: %s", v21, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v39 = *(void (**)(void))(v20 + 8);
      OUTLINED_FUNCTION_10_33();
      v39();
      uint64_t v25 = v39;
    }

    uint64_t v40 = v0[16];
    uint64_t v41 = v0[14];
    uint64_t v43 = v0[11];
    uint64_t v42 = v0[12];
    OUTLINED_FUNCTION_89();
    v44();
    ContactNLv3Intent.init(intent:)(v41, v45, v46, v47, v48, v49, v50, v51, v86, (uint64_t)buf);
    ContactNLv3Intent.toSiriKitIntent(referenceResolver:previousIntent:)();
    *(void *)type = v53;
    uint64_t v90 = v52;
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v43, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    ((void (*)(uint64_t, uint64_t))v25)(v40, v42);
LABEL_29:
    OUTLINED_FUNCTION_40_14();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v85 = (uint64_t (*)(uint64_t, void))v0[1];
    return v85(v90, *(void *)type);
  }
  if (v5 == *MEMORY[0x263F6FF70])
  {
    uint64_t v26 = v0[27];
    uint64_t v28 = v0[22];
    uint64_t v27 = v0[23];
    uint64_t v29 = (uint8_t *)v0[21];
    uint64_t v30 = OUTLINED_FUNCTION_32_15();
    v31(v30);
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v28 + 32))(v27, v26, v29);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v35);
      _os_log_impl(&dword_22D49E000, v33, v34, "#Parse.toSiriKitIntent Converting DirectInvocation Parse to SiriKit Intent", v29, 2u);
      OUTLINED_FUNCTION_2();
    }

    Parse.DirectInvocation.toSiriKitIntent()();
    *(void *)type = v37;
    uint64_t v90 = v36;
    OUTLINED_FUNCTION_56_1();
    v38();
    goto LABEL_29;
  }
  if (v5 != *MEMORY[0x263F6FF80])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_29_14();
    v4();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    uint64_t v75 = v0[25];
    if (v74)
    {
      os_log_type_t typea = v73;
      uint64_t v76 = v0[10];
      uint64_t v77 = (uint8_t *)OUTLINED_FUNCTION_24();
      uint64_t v91 = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v77 = 136315138;
      OUTLINED_FUNCTION_29_14();
      v4();
      swift_storeEnumTagMultiPayload();
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      uint64_t v78 = Error.localizedDescription.getter();
      unint64_t v80 = v79;
      _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v76, (void (*)(void))type metadata accessor for ContactsError);
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = *(void (**)(void))(v75 + 8);
      OUTLINED_FUNCTION_27_3();
      v81();
      _os_log_impl(&dword_22D49E000, v72, typea, "%s", v77, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v81 = *(void (**)(void))(v75 + 8);
      ((void (*)(void, void))v81)(v0[26], v0[24]);
    }

    ((void (*)(void, void))v81)(v0[27], v0[24]);
    *(void *)type = 0;
    uint64_t v90 = 0;
    goto LABEL_29;
  }
  uint64_t v54 = OUTLINED_FUNCTION_32_15();
  v55(v54);
  uint64_t v56 = OUTLINED_FUNCTION_75_2();
  v57(v56);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Logger.siriContacts);
  uint64_t v59 = OUTLINED_FUNCTION_75_2();
  v60(v59);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v64 = v0[18];
  if (v63)
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v66 = USOParse.debugDescription.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v70 = *(void (**)(void))(v64 + 8);
    uint64_t v68 = v64 + 8;
    uint64_t v69 = v70;
    OUTLINED_FUNCTION_33_3();
    v70();
    _os_log_impl(&dword_22D49E000, v61, v62, "#Parse.toSiriKitIntent Converting USO Parse to SiriKit Intent: %s", v65, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v82 = *(void (**)(void))(v64 + 8);
    uint64_t v68 = v64 + 8;
    uint64_t v69 = v82;
    ((void (*)(void, void))v82)(v0[19], v0[17]);
  }

  v0[28] = v68;
  v0[29] = v69;
  uint64_t v83 = (void *)swift_task_alloc();
  v0[30] = v83;
  *uint64_t v83 = v0;
  v83[1] = Parse.toSiriKitIntent(referenceResolver:previousIntent:);
  return USOParse.toSiriKitIntent(previousIntent:referenceResolver:)();
}

{
  void *v0;
  void (*v1)(void);
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_23();
  v1();
  uint64_t v4 = v0[31];
  int v5 = v0[32];
  OUTLINED_FUNCTION_40_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v2(v4, v5);
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 248) = a1;
  *(void *)(v3 + 256) = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Parse.toSiriKitIntent(referenceResolver:previousIntent:), 0, 0);
}

void Parse.isLearnPronunciation.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = type metadata accessor for ContactNLv3Intent();
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_11_3();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v10 = OUTLINED_FUNCTION_10_0(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_5_13();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v43 = v12;
  uint64_t v44 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_31_12(v13, v41);
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_89();
  v15();
  OUTLINED_FUNCTION_27_17();
  int v17 = v16();
  if (v17 == *MEMORY[0x263F6FF50])
  {
    uint64_t v18 = OUTLINED_FUNCTION_58_6();
    v19(v18);
    OUTLINED_FUNCTION_11();
    v20();
    OUTLINED_FUNCTION_89();
    v21();
    ContactNLv3Intent.init(intent:)(v7, v22, v23, v24, v25, v26, v27, v28, v42, v43);
    ContactNLv3Intent.isLearnPronunciation.getter();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_33_3();
    v29();
    goto LABEL_17;
  }
  if (v17 != *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_56_1();
    v35();
    goto LABEL_17;
  }
  uint64_t v30 = OUTLINED_FUNCTION_58_6();
  v31(v30);
  OUTLINED_FUNCTION_11();
  v32();
  USOParse.preferredUserDialogAct.getter(v1);
  uint64_t v33 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_6_3(v1, 1, v33);
  if (v34)
  {
    outlined destroy of SemanticValue?(v1, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_14:
    OUTLINED_FUNCTION_53_7();
    goto LABEL_15;
  }
  uint64_t v36 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v37();
  if (!v36) {
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_55_6();
  swift_release();
  if (!v45[3])
  {
LABEL_15:
    outlined destroy of SemanticValue?((uint64_t)v45, &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    goto LABEL_17;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  swift_release();
  if (v45[0])
  {
    uint64_t v38 = dispatch thunk of UsoEntity_common_Person.phoneticStructuredName.getter();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_33_3();
    v39();
    if (v38) {
      swift_release();
    }
  }
  else
  {
    OUTLINED_FUNCTION_33_3();
    v40();
    swift_release();
  }
LABEL_17:
  OUTLINED_FUNCTION_8();
}

void Parse.isRequestForMultipleContacts.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_4();
  v38[0] = v4;
  OUTLINED_FUNCTION_17();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v38 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v38 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v38 - v12;
  uint64_t v14 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = OUTLINED_FUNCTION_37_16();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_89();
  v22();
  OUTLINED_FUNCTION_27_17();
  if (v23() == *MEMORY[0x263F6FF80])
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 96))(v1, v18);
    OUTLINED_FUNCTION_11();
    v24();
    USOParse.preferredUserDialogAct.getter((uint64_t)v13);
    uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v26 = v14;
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v25) == 1)
    {
      outlined destroy of SemanticValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      uint64_t v27 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_23();
      v28();
      if (v27)
      {
        OUTLINED_FUNCTION_55_6();
        swift_release();
        if (v40)
        {
          type metadata accessor for UsoTask_summarise_common_Person();
          if (OUTLINED_FUNCTION_15_26()) {
            goto LABEL_35;
          }
LABEL_11:
          USOParse.preferredUserDialogAct.getter((uint64_t)v11);
          OUTLINED_FUNCTION_6_3((uint64_t)v11, 1, v25);
          if (v29)
          {
            outlined destroy of SemanticValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          }
          else
          {
            uint64_t v30 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
            OUTLINED_FUNCTION_51();
            OUTLINED_FUNCTION_23();
            v31();
            if (v30)
            {
              OUTLINED_FUNCTION_55_6();
              swift_release();
              if (v40)
              {
                type metadata accessor for UsoTask_read_common_Person();
                if (OUTLINED_FUNCTION_15_26()) {
                  goto LABEL_35;
                }
LABEL_20:
                USOParse.preferredUserDialogAct.getter((uint64_t)v8);
                OUTLINED_FUNCTION_6_3((uint64_t)v8, 1, v25);
                if (v29)
                {
                  outlined destroy of SemanticValue?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
                }
                else
                {
                  uint64_t v32 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
                  OUTLINED_FUNCTION_51();
                  OUTLINED_FUNCTION_23();
                  v33();
                  if (v32)
                  {
                    OUTLINED_FUNCTION_55_6();
                    swift_release();
                    uint64_t v34 = v38[0];
                    if (v40)
                    {
                      type metadata accessor for UsoTask_noVerb_common_Person();
                      if (OUTLINED_FUNCTION_15_26())
                      {
                        OUTLINED_FUNCTION_71_3();
                        UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter();
LABEL_36:
                        swift_release();
                        OUTLINED_FUNCTION_56_1();
                        v37();
                        goto LABEL_40;
                      }
LABEL_29:
                      USOParse.preferredUserDialogAct.getter(v34);
                      OUTLINED_FUNCTION_6_3(v34, 1, v25);
                      if (v29)
                      {
                        outlined destroy of SemanticValue?(v34, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
                      }
                      else
                      {
                        uint64_t v35 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
                        OUTLINED_FUNCTION_51();
                        OUTLINED_FUNCTION_23();
                        v36();
                        if (v35)
                        {
                          OUTLINED_FUNCTION_55_6();
                          swift_release();
                          if (v40)
                          {
                            type metadata accessor for UsoTask_checkExistence_common_Person();
                            if (OUTLINED_FUNCTION_15_26())
                            {
LABEL_35:
                              OUTLINED_FUNCTION_71_3();
                              UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter();
                              goto LABEL_36;
                            }
LABEL_39:
                            (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v0, v26);
                            goto LABEL_40;
                          }
LABEL_38:
                          outlined destroy of SemanticValue?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
                          goto LABEL_39;
                        }
                      }
                      OUTLINED_FUNCTION_53_7();
                      goto LABEL_38;
                    }
LABEL_28:
                    outlined destroy of SemanticValue?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
                    goto LABEL_29;
                  }
                }
                OUTLINED_FUNCTION_53_7();
                uint64_t v34 = v38[0];
                goto LABEL_28;
              }
LABEL_19:
              outlined destroy of SemanticValue?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
              goto LABEL_20;
            }
          }
          OUTLINED_FUNCTION_53_7();
          goto LABEL_19;
        }
LABEL_10:
        outlined destroy of SemanticValue?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
        goto LABEL_11;
      }
    }
    OUTLINED_FUNCTION_53_7();
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v18);
LABEL_40:
  OUTLINED_FUNCTION_8();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.DirectInvocation.getSelectionIndex()()
{
  uint64_t v1 = v0;
  uint64_t v2 = Parse.DirectInvocation.userData.getter();
  if (!v2)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_6;
  }
  specialized Dictionary.subscript.getter(0x7865646E69, 0xE500000000000000, v2, &v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_6:
    outlined destroy of SemanticValue?((uint64_t)&v17, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  if (swift_dynamicCast()) {
    return v16;
  }
LABEL_7:
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_64_5();
    _os_log_impl(v7, v8, v9, v10, v11, v12);
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for ContactsError();
  _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
  OUTLINED_FUNCTION_76_1();
  swift_allocError();
  uint64_t v14 = v13;
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v1);
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.toContactId(existingCandidates:)(Swift::OpaquePointer existingCandidates)
{
  unint64_t rawValue = existingCandidates._rawValue;
  uint64_t v108 = (uint8_t *)type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  id v106 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_4();
  uint64_t v100 = v5;
  OUTLINED_FUNCTION_42_13();
  uint64_t v104 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  uint64_t v109 = (uint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_61_2();
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  id v107 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_11_3();
  uint64_t v13 = v11 - v12;
  MEMORY[0x270FA5388](v14);
  Swift::Int v16 = (uint8_t *)&v95 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v18 = OUTLINED_FUNCTION_10_0(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_4_4();
  uint64_t v97 = v19;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_58_0();
  uint64_t v96 = v21;
  OUTLINED_FUNCTION_42_13();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v102 = v23;
  uint64_t v103 = v22;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_31_12(v24, v95);
  uint64_t v25 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_5_13();
  char v29 = *(void (**)(uint8_t *, uint8_t *, uint64_t))(v27 + 16);
  uint64_t v101 = v1;
  uint64_t v98 = v29;
  v29((uint8_t *)v2, v1, v25);
  OUTLINED_FUNCTION_27_17();
  int v31 = v30();
  if (v31 == *MEMORY[0x263F6FF50])
  {
    uint64_t v32 = OUTLINED_FUNCTION_52_8();
    v33(v32);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_11();
    v34();
    OUTLINED_FUNCTION_65_2();
    OUTLINED_FUNCTION_89();
    v35();
    ContactNLv3Intent.init(intent:)(v13, v36, v37, v38, v39, v40, v41, v42, v95, v96);
    char v43 = ContactNLv3Intent.isContactDomain.getter();
    uint64_t v44 = (uint64_t)v1;
    uint64_t v45 = v109;
    if ((v43 & 1) == 0) {
      goto LABEL_13;
    }
    if (one-time initialization token for contactId == -1)
    {
LABEL_4:
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
      uint64_t v1 = (uint8_t *)v44;
      IntentNodeTraversable.value<A>(forNode:)();
      if (v111)
      {
        id v106 = v111;
        uint64_t v105 = v110;
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        __swift_project_value_buffer((uint64_t)v108, (uint64_t)static Logger.siriContacts);
        outlined init with copy of ContactNLv3Intent(v44, v45);
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t v110 = swift_slowAlloc();
          uint64_t v108 = v16;
          *(_DWORD *)uint64_t v48 = 136315138;
          uint64_t v103 = v48 + 4;
          _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
          uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v110);
          OUTLINED_FUNCTION_67_2(v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v109, (void (*)(void))type metadata accessor for ContactNLv3Intent);
          _os_log_impl(&dword_22D49E000, v46, v47, "ContactIntent: %s", v48, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v45, (void (*)(void))type metadata accessor for ContactNLv3Intent);
        }
        _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v44, (void (*)(void))type metadata accessor for ContactNLv3Intent);
        OUTLINED_FUNCTION_18_20();
        v71();
        uint64_t v1 = v106;
        Swift::Int v16 = (uint8_t *)v105;
        goto LABEL_50;
      }
LABEL_13:
      type metadata accessor for ContactsError();
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      OUTLINED_FUNCTION_20_2();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v44, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_18_20();
      v61();
      goto LABEL_50;
    }
LABEL_53:
    swift_once();
    goto LABEL_4;
  }
  if (v31 == *MEMORY[0x263F6FF80])
  {
    uint64_t v52 = OUTLINED_FUNCTION_52_8();
    v53(v52);
    uint64_t v54 = v102;
    id v55 = v103;
    uint64_t v56 = v105;
    OUTLINED_FUNCTION_11();
    v57();
    uint64_t v58 = rawValue;
    uint64_t v45 = rawValue[2];
    if (v45)
    {
      uint64_t v59 = v96;
      USOParse.preferredUserDialogAct.getter(v96);
      uint64_t v60 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      if (__swift_getEnumTagSinglePayload(v59, 1, v60) == 1)
      {
        outlined destroy of SemanticValue?(v59, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        Siri_Nlu_External_UserDialogAct.contactIds.getter();
        uint64_t v73 = v72;
        OUTLINED_FUNCTION_51();
        OUTLINED_FUNCTION_23();
        v74();
        uint64_t v109 = *(void *)(v73 + 16);
        if (v109)
        {
          uint64_t v75 = 0;
          uint64_t v104 = v73;
          uint64_t v76 = v73 + 32;
          Swift::Int v16 = (uint8_t *)v58[4];
          uint64_t v1 = (uint8_t *)v58[5];
          id v107 = (uint8_t *)(v58 + 7);
          uint64_t v108 = (uint8_t *)v76;
          id v106 = v1;
          while (1)
          {
            uint64_t v77 = (uint8_t **)(v76 + 16 * v75);
            unint64_t v79 = *v77;
            uint64_t v78 = v77[1];
            if (v16 == *v77 && v1 == v78) {
              goto LABEL_41;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              Swift::Int v16 = v79;
              uint64_t v1 = v78;
LABEL_41:
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_56_1();
              v84();
              goto LABEL_50;
            }
            uint64_t v44 = (uint64_t)v16;
            if (v45 != 1) {
              break;
            }
LABEL_38:
            ++v75;
            uint64_t v56 = v105;
            uint64_t v1 = v106;
            Swift::Int v16 = (uint8_t *)v44;
            uint64_t v76 = (uint64_t)v108;
            if (v75 == v109) {
              goto LABEL_42;
            }
          }
          Swift::Int v16 = v107;
          uint64_t v81 = 1;
          while (1)
          {
            uint64_t v82 = v81 + 1;
            if (__OFADD__(v81, 1)) {
              break;
            }
            BOOL v83 = *((uint8_t **)v16 - 1) == v79 && *(void *)v16 == (void)v78;
            if (v83 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              Swift::Int v16 = v79;
              uint64_t v1 = v78;
              goto LABEL_41;
            }
            v16 += 16;
            ++v81;
            if (v82 == v45) {
              goto LABEL_38;
            }
          }
          __break(1u);
          goto LABEL_53;
        }
LABEL_42:
        swift_bridgeObjectRelease();
        id v55 = v103;
      }
    }
    type metadata accessor for ReferenceResolutionClient();
    ReferenceResolutionClient.__allocating_init()();
    uint64_t v85 = v97;
    USOParse.preferredUserDialogAct.getter(v97);
    uint64_t v86 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    if (__swift_getEnumTagSinglePayload(v85, 1, v86) == 1)
    {
      outlined destroy of SemanticValue?(v85, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      Siri_Nlu_External_UserDialogAct.contactId.getter();
      Swift::Int v16 = v87;
      uint64_t v1 = v88;
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_23();
      v89();
      if (v1)
      {
LABEL_48:
        OUTLINED_FUNCTION_56_1();
        v91();
        swift_release();
        goto LABEL_50;
      }
    }
    if (!specialized RRReferenceResolverProtocol.resolvePersonDisambiguationReference(from:)()
      || (v16 = (uint8_t *)UsoEntity_common_Person.contactId.getter(), uint64_t v1 = v90, swift_release(), !v1))
    {
      type metadata accessor for ContactsError();
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      OUTLINED_FUNCTION_20_2();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      uint64_t v1 = (uint8_t *)(v54 + 8);
      (*(void (**)(uint64_t, uint8_t *))(v54 + 8))(v56, v55);
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  Swift::Int v16 = v108;
  __swift_project_value_buffer((uint64_t)v108, (uint64_t)static Logger.siriContacts);
  os_log_type_t v62 = (void (**)(uint64_t, uint8_t *))v106;
  uint64_t v63 = v100;
  OUTLINED_FUNCTION_89();
  v64();
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v65, v66))
  {
    Swift::Int v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v109 = swift_slowAlloc();
    uint64_t v110 = v109;
    *(_DWORD *)Swift::Int v16 = 136315138;
    id v107 = v16 + 4;
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6573726150, 0xE500000000000000, &v110);
    OUTLINED_FUNCTION_67_2(v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v65, v66, "Unexpected parse type: %s", v16, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    OUTLINED_FUNCTION_23();
    v68();
  }
  else
  {

    v62[1](v63, v16);
  }
  type metadata accessor for ContactsError();
  _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
  OUTLINED_FUNCTION_20_2();
  uint64_t v1 = v69;
  v98(v69, v101, v25);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  OUTLINED_FUNCTION_72_3();
  v70();
LABEL_50:
  uint64_t v92 = (uint64_t)v16;
  uint64_t v93 = v1;
  result._object = v93;
  result._uint64_t countAndFlagsBits = v92;
  return result;
}

void Parse.confirmationResponse.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v190 = v1;
  uint64_t v191 = v0;
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v187 = v3;
  uint64_t v188 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_4();
  uint64_t v172 = v4;
  OUTLINED_FUNCTION_17();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_43_10(v6, v7, v8, v9, v10, v11, v12, v13, v171);
  uint64_t v14 = type metadata accessor for ContactNLv3Intent();
  uint64_t v15 = OUTLINED_FUNCTION_10_0(v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_11_3();
  uint64_t v22 = v20 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v171 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v27 = OUTLINED_FUNCTION_10_0(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_3_4();
  uint64_t v178 = v28;
  OUTLINED_FUNCTION_42_13();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v180 = v30;
  uint64_t v181 = v29;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_4_4();
  uint64_t v174 = v31;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_25();
  uint64_t v173 = v33;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_25();
  uint64_t v179 = v35;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_58_0();
  uint64_t v183 = v37;
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v184 = v38;
  uint64_t v185 = v39;
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_4_4();
  uint64_t v176 = v40;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_25();
  uint64_t v177 = v42;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_58_0();
  uint64_t v189 = v44;
  uint64_t v45 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v47 = v46;
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_4_4();
  uint64_t v175 = v49;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_25();
  uint64_t v182 = v51;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v52);
  uint64_t v53 = *(void (**)(void))(v47 + 16);
  OUTLINED_FUNCTION_29_14();
  v53();
  OUTLINED_FUNCTION_70_3();
  OUTLINED_FUNCTION_27_17();
  int v55 = v54();
  if (v55 == *MEMORY[0x263F6FF50])
  {
    uint64_t v56 = OUTLINED_FUNCTION_26_13();
    v57(v56);
    OUTLINED_FUNCTION_11();
    v58();
    OUTLINED_FUNCTION_69_2();
    OUTLINED_FUNCTION_89();
    v59();
    ContactNLv3Intent.init(intent:)(v22, v60, v61, v62, v63, v64, v65, v66, v171, v172);
    ContactNLv3Intent.confirmationResponse.getter(v190);
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v16);
    goto LABEL_53;
  }
  if (v55 == *MEMORY[0x263F6FF70])
  {
    uint64_t v67 = OUTLINED_FUNCTION_26_13();
    v68(v67);
    uint64_t v70 = v186;
    uint64_t v69 = v187;
    uint64_t v71 = v188;
    OUTLINED_FUNCTION_11();
    v72();
    uint64_t v74 = Parse.DirectInvocation.identifier.getter();
    uint64_t v75 = v73;
    if (v74 == 0xD00000000000001FLL && v73 == 0x800000022D5A6590
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      OUTLINED_FUNCTION_10_33();
      v76();
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v77 = (unsigned int *)MEMORY[0x263F6FC98];
LABEL_51:
      uint64_t v159 = *v77;
      uint64_t v160 = type metadata accessor for ConfirmationResponse();
      OUTLINED_FUNCTION_15_0();
      uint64_t v162 = v190;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 104))(v190, v159, v160);
      uint64_t v117 = v162;
      uint64_t v118 = 0;
      uint64_t v116 = v160;
      goto LABEL_52;
    }
    if (v74 == 0xD00000000000001CLL && v75 == 0x800000022D5A65B0)
    {
      swift_bridgeObjectRelease();
LABEL_34:
      OUTLINED_FUNCTION_10_33();
      v134();
LABEL_50:
      uint64_t v77 = (unsigned int *)MEMORY[0x263F6FC90];
      goto LABEL_51;
    }
    char v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v133) {
      goto LABEL_34;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v143 = type metadata accessor for Logger();
    __swift_project_value_buffer(v143, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_89();
    v144();
    uint64_t v145 = Logger.logObject.getter();
    os_log_type_t v146 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_60_4(v146))
    {
      uint64_t v147 = (_DWORD *)OUTLINED_FUNCTION_24();
      v192[0] = OUTLINED_FUNCTION_35();
      *uint64_t v147 = 136315138;
      uint64_t v148 = Parse.DirectInvocation.identifier.getter();
      uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v149, v192);
      OUTLINED_FUNCTION_21_11(v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Class isa = (void (*)(void))v69[1].isa;
      OUTLINED_FUNCTION_10_33();
      isa();
      OUTLINED_FUNCTION_59_4(&dword_22D49E000, v145, v152, "Direct invocation %s is not a confirmation response.");
      OUTLINED_FUNCTION_28_13();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      OUTLINED_FUNCTION_10_33();
      isa();
    }
    else
    {

      uint64_t v163 = (void (*)(void))v69[1].isa;
      OUTLINED_FUNCTION_10_33();
      v163();
      ((void (*)(void (*)(uint64_t, uint64_t, uint64_t), void (*)(void)))v163)(v70, v71);
    }
    uint64_t v164 = v190;
    uint64_t v116 = type metadata accessor for ConfirmationResponse();
    uint64_t v117 = v164;
LABEL_28:
    uint64_t v118 = 1;
LABEL_52:
    __swift_storeEnumTagSinglePayload(v117, v118, 1, v116);
    goto LABEL_53;
  }
  if (v55 == *MEMORY[0x263F6FF80])
  {
    uint64_t v78 = OUTLINED_FUNCTION_26_13();
    v79(v78);
    uint64_t v81 = v184;
    uint64_t v80 = v185;
    uint64_t v82 = v189;
    OUTLINED_FUNCTION_11();
    v83();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.siriContacts);
    uint64_t v86 = *(void (**)(uint64_t, uint8_t *, uint64_t))(v80 + 16);
    uint64_t v87 = v177;
    v86((uint64_t)v177, v82, v81);
    uint64_t v191 = v85;
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = (_DWORD *)OUTLINED_FUNCTION_24();
      v192[0] = OUTLINED_FUNCTION_35();
      *uint64_t v90 = 136315138;
      uint64_t v188 = (void (*)(void))(v90 + 1);
      v86(v176, v87, v81);
      uint64_t v91 = String.init<A>(describing:)();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v192);
      OUTLINED_FUNCTION_21_11(v93);
      uint64_t v94 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v95 = *(void (**)(void))(v94 + 8);
      OUTLINED_FUNCTION_13_4();
      v95();
      OUTLINED_FUNCTION_59_4(&dword_22D49E000, v88, v96, "#confirmationResponse usoParse: %s");
      OUTLINED_FUNCTION_28_13();
      uint64_t v82 = v189;
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v95 = *(void (**)(void))(v80 + 8);
      ((void (*)(uint8_t *, uint64_t))v95)(v87, v81);
    }

    uint64_t v106 = v183;
    uint64_t v108 = v178;
    uint64_t v107 = v179;
    USOParse.preferredUserDialogAct.getter(v178);
    uint64_t v109 = v181;
    OUTLINED_FUNCTION_6_3(v108, 1, v181);
    if (v110)
    {
      outlined destroy of SemanticValue?(v108, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v111 = (void *)Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v112))
      {
        uint64_t v113 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v113);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v114, v115, "#confirmationResponse got nil UDA, returning nil confirmation response");
        OUTLINED_FUNCTION_2();
      }

      ((void (*)(uint8_t *, uint64_t))v95)(v82, v81);
    }
    else
    {
      uint64_t v188 = v95;
      uint64_t v121 = v180;
      OUTLINED_FUNCTION_11();
      v122();
      uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 16);
      v123(v107, v106, v109);
      uint64_t v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.debug.getter();
      uint64_t v187 = v124;
      BOOL v126 = os_log_type_enabled(v124, v125);
      uint64_t v186 = v123;
      if (v126)
      {
        uint64_t v127 = (uint8_t *)OUTLINED_FUNCTION_24();
        v192[0] = OUTLINED_FUNCTION_35();
        *(_DWORD *)uint64_t v127 = 136315138;
        uint64_t v182 = v127 + 4;
        v123(v173, v107, v109);
        uint64_t v128 = String.init<A>(describing:)();
        uint64_t v130 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v192);
        OUTLINED_FUNCTION_21_11(v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v109 = v181;
        swift_bridgeObjectRelease();
        uint64_t v131 = *(void (**)(void))(v121 + 8);
        OUTLINED_FUNCTION_10_33();
        v131();
        uint64_t v132 = v187;
        _os_log_impl(&dword_22D49E000, v187, v125, "#confirmationResponse userDialogAct: %s", v127, 0xCu);
        OUTLINED_FUNCTION_28_13();
        OUTLINED_FUNCTION_2();
        uint64_t v106 = v183;
        OUTLINED_FUNCTION_2();
      }
      else
      {
        uint64_t v131 = *(void (**)(void))(v121 + 8);
        OUTLINED_FUNCTION_10_33();
        v131();
      }
      if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
      {
        uint64_t v135 = (void *)Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_7_4(v136))
        {
          uint64_t v137 = (_WORD *)OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_32(v137);
          OUTLINED_FUNCTION_2_5(&dword_22D49E000, v138, v139, "#confirmationResponse Returning .confirmed for UserAccepted");
          OUTLINED_FUNCTION_2();
        }

        OUTLINED_FUNCTION_13_4();
        v131();
        OUTLINED_FUNCTION_13_4();
        v140();
        goto LABEL_8;
      }
      char v141 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      v186(v174, v106, v109);
      if (v141)
      {
        OUTLINED_FUNCTION_13_4();
        v131();
        uint64_t v142 = v184;
LABEL_47:
        uint64_t v154 = (void *)Logger.logObject.getter();
        os_log_type_t v155 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_7_4(v155))
        {
          uint64_t v156 = (_WORD *)OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_32(v156);
          OUTLINED_FUNCTION_2_5(&dword_22D49E000, v157, v158, "#confirmationResponse Returning .rejected for UserRejected / UserCancelled");
          OUTLINED_FUNCTION_2();
        }

        OUTLINED_FUNCTION_13_4();
        v131();
        ((void (*)(uint8_t *, uint64_t))v188)(v189, v142);
        goto LABEL_50;
      }
      char v153 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      OUTLINED_FUNCTION_72_3();
      v131();
      uint64_t v142 = v184;
      if (v153) {
        goto LABEL_47;
      }
      uint64_t v165 = (void *)Logger.logObject.getter();
      os_log_type_t v166 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v166))
      {
        uint64_t v167 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v167);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v168, v169, "#confirmationResponse Returning nil");
        OUTLINED_FUNCTION_2();
      }

      OUTLINED_FUNCTION_72_3();
      v131();
      OUTLINED_FUNCTION_13_4();
      v170();
    }
    uint64_t v116 = type metadata accessor for ConfirmationResponse();
    uint64_t v117 = v190;
    goto LABEL_28;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v97 = type metadata accessor for Logger();
  __swift_project_value_buffer(v97, (uint64_t)static Logger.siriContacts);
  uint64_t v98 = v182;
  OUTLINED_FUNCTION_29_14();
  v53();
  id v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_60_4(v100))
  {
    uint64_t v101 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v191 = OUTLINED_FUNCTION_35();
    v192[0] = v191;
    *(_DWORD *)uint64_t v101 = 136315138;
    uint64_t v189 = v101 + 4;
    OUTLINED_FUNCTION_29_14();
    v53();
    uint64_t v102 = String.init<A>(describing:)();
    uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v192);
    OUTLINED_FUNCTION_21_11(v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v105 = *(void (**)(void))(v47 + 8);
    OUTLINED_FUNCTION_27_3();
    v105();
    _os_log_impl(&dword_22D49E000, v99, (os_log_type_t)v16, "Unexpected parse type: %s", v101, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v105 = *(void (**)(void))(v47 + 8);
    ((void (*)(uint8_t *, uint64_t))v105)(v98, v45);
  }

  uint64_t v119 = type metadata accessor for ConfirmationResponse();
  __swift_storeEnumTagSinglePayload(v190, 1, 1, v119);
  uint64_t v120 = OUTLINED_FUNCTION_70_3();
  ((void (*)(uint64_t))v105)(v120);
LABEL_53:
  OUTLINED_FUNCTION_8();
}

void Parse.cancelOrContactIntent.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v34 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_11_3();
  uint64_t v6 = v4 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_42_12();
  OUTLINED_FUNCTION_89();
  v12();
  OUTLINED_FUNCTION_27_17();
  int v14 = v13();
  if (v14 == *MEMORY[0x263F6FF50])
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 96))(v1, v8);
    OUTLINED_FUNCTION_11();
    v15();
    OUTLINED_FUNCTION_69_2();
    OUTLINED_FUNCTION_89();
    v16();
    ContactNLv3Intent.init(intent:)(v6, v17, v18, v19, v20, v21, v22, v23, v34, v35);
    if (ContactNLv3Intent.isContactDomain.getter())
    {
      if (one-time initialization token for contactConfirmation != -1) {
        swift_once();
      }
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
      IntentNodeTraversable.value<A>(forNode:)();
      _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      uint64_t v24 = OUTLINED_FUNCTION_68_3();
      v25(v24);
    }
    else
    {
      _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      uint64_t v32 = OUTLINED_FUNCTION_68_3();
      v33(v32);
    }
  }
  else
  {
    int v26 = v14;
    int v27 = *MEMORY[0x263F6FF70];
    int v28 = *MEMORY[0x263F6FF80];
    OUTLINED_FUNCTION_33_3();
    v30(v29);
    if (v26 == v27 || v26 == v28)
    {
      Parse.isCancel.getter();
      Parse.isContactIntent.getter();
    }
  }
  OUTLINED_FUNCTION_8();
}

uint64_t Parse.isUSODisambiguationTask.getter()
{
  uint64_t v1 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_11_3();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_89();
  v10();
  OUTLINED_FUNCTION_27_17();
  if (v11() == *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_56_5();
    v12();
    OUTLINED_FUNCTION_11();
    v13();
    char v14 = USOParse.isOrdinalDisambiguation.getter();
    OUTLINED_FUNCTION_89();
    v15();
    if (v14) {
      char v16 = 1;
    }
    else {
      char v16 = USOParse.isContactDisambiguation.getter();
    }
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v18(v7, v1);
    v18(v0, v1);
  }
  else
  {
    OUTLINED_FUNCTION_44();
    v17();
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void Parse.isCancel.getter()
{
  OUTLINED_FUNCTION_10();
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_11_3();
  uint64_t v8 = v6 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v11 = OUTLINED_FUNCTION_10_0(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_12_4();
  uint64_t v57 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v54 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_17();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_43_10(v15, v16, v17, v18, v19, v20, v21, v22, v51);
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v55 = v24;
  uint64_t v56 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = OUTLINED_FUNCTION_37_16();
  OUTLINED_FUNCTION_0_0();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_5_13();
  OUTLINED_FUNCTION_89();
  v29();
  OUTLINED_FUNCTION_27_17();
  int v31 = v30();
  if (v31 == *MEMORY[0x263F6FF50])
  {
    OUTLINED_FUNCTION_56_5();
    v32();
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_11();
    v33();
    OUTLINED_FUNCTION_65_2();
    OUTLINED_FUNCTION_89();
    v34();
    ContactNLv3Intent.init(intent:)(v8, v35, v36, v37, v38, v39, v40, v41, v52, v53);
    if (one-time initialization token for contactConfirmation != -1) {
      swift_once();
    }
    _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    IntentNodeTraversable.value<A>(forNode:)();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_27_3();
    v42();
  }
  else if (v31 == *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_56_5();
    v43();
    OUTLINED_FUNCTION_11();
    v44();
    USOParse.preferredUserDialogAct.getter(v3);
    OUTLINED_FUNCTION_6_3(v3, 1, v57);
    if (v45)
    {
      OUTLINED_FUNCTION_44();
      v46();
      outlined destroy of SemanticValue?(v3, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      OUTLINED_FUNCTION_66_4();
      OUTLINED_FUNCTION_11();
      v47();
      char v48 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      OUTLINED_FUNCTION_65_2();
      OUTLINED_FUNCTION_89();
      v49();
      if ((v48 & 1) == 0) {
        Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      }
      uint64_t v50 = *(void (**)(void))(v54 + 8);
      OUTLINED_FUNCTION_18_20();
      v50();
      OUTLINED_FUNCTION_18_20();
      v50();
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v1, v56);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v25);
  }
  OUTLINED_FUNCTION_8();
}

void Parse.getSiriKitIntentType()()
{
  OUTLINED_FUNCTION_10();
  uint64_t v92 = type metadata accessor for ContactsError();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_4();
  uint64_t v91 = v3;
  uint64_t v4 = type metadata accessor for ContactNLv3Intent();
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_7();
  uint64_t v6 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  os_log_type_t v100 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_25();
  id v99 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_61_2();
  uint64_t v97 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v95 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_4_4();
  uint64_t v98 = v16;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_58_0();
  uint64_t v96 = v18;
  uint64_t v19 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_4_4();
  uint64_t v94 = v23;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (void (*)(uint64_t))((char *)&v91 - v25);
  uint64_t v27 = *(void (**)(void))(v21 + 16);
  uint64_t v93 = v0;
  OUTLINED_FUNCTION_51_9();
  v27();
  OUTLINED_FUNCTION_27_17();
  int v29 = v28();
  if (v29 == *MEMORY[0x263F6FF50])
  {
    OUTLINED_FUNCTION_56_5();
    v30();
    OUTLINED_FUNCTION_11();
    v31();
    uint64_t v32 = v0;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v98 = v1;
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.siriContacts);
    uint64_t v97 = *(void *)(v8 + 16);
    OUTLINED_FUNCTION_29_14();
    v34();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = OUTLINED_FUNCTION_24();
      uint64_t v96 = v0;
      uint64_t v38 = v37;
      uint64_t v95 = OUTLINED_FUNCTION_35();
      uint64_t v101 = (char *)v95;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v26 = (void (*)(uint64_t))(v38 + 12);
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, MEMORY[0x263F73760]);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v101);
      OUTLINED_FUNCTION_35_5(v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = OUTLINED_FUNCTION_39_9();
      ((void (*)(uint64_t))(v38 + 12))(v42);
      _os_log_impl(&dword_22D49E000, v35, v36, "#Parse.getSiriKitIntentType Getting SiriKit Intent Type for NLv3IntentOnly: %s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      uint64_t v32 = v96;
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v53 = OUTLINED_FUNCTION_39_9();
      v26(v53);
    }

    uint64_t v54 = (uint64_t)v100;
    OUTLINED_FUNCTION_29_14();
    v55();
    uint64_t v56 = (uint64_t)v98;
    ContactNLv3Intent.init(intent:)(v54, v57, v58, v59, v60, v61, v62, v63, v91, v92);
    ContactNLv3Intent.getSiriKitIntentType()();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v56, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    ((void (*)(uint8_t *, uint64_t))v26)(v32, v6);
  }
  else if (v29 == *MEMORY[0x263F6FF70])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.siriContacts);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_64_5();
      _os_log_impl(v46, v47, v48, v49, v50, v51);
      OUTLINED_FUNCTION_2();
    }

    OUTLINED_FUNCTION_44();
    v52();
  }
  else if (v29 == *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_56_5();
    v64();
    uint64_t v66 = v95;
    uint64_t v65 = v96;
    uint64_t v67 = v97;
    OUTLINED_FUNCTION_11();
    v68();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_69_2();
    uint64_t v70 = v98;
    OUTLINED_FUNCTION_89();
    v71();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_60_4(v73))
    {
      uint64_t v74 = (_DWORD *)OUTLINED_FUNCTION_24();
      uint64_t v101 = (char *)OUTLINED_FUNCTION_35();
      *uint64_t v74 = 136315138;
      uint64_t v75 = USOParse.debugDescription.getter();
      uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v101);
      OUTLINED_FUNCTION_35_5(v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v78 = *(void (**)(uint8_t *, uint64_t))(v66 + 8);
      v78(v98, v67);
      OUTLINED_FUNCTION_59_4(&dword_22D49E000, v72, v79, "#Parse.getSiriKitIntentType Getting SiriKit Intent Type for USO Parse: %s");
      OUTLINED_FUNCTION_28_13();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v78 = *(void (**)(uint8_t *, uint64_t))(v66 + 8);
      v78(v70, v67);
    }

    USOParse.getSiriKitIntentType()();
    v78(v65, v67);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logger.siriContacts);
    uint64_t v81 = v94;
    OUTLINED_FUNCTION_51_9();
    v27();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)OUTLINED_FUNCTION_24();
      os_log_type_t v100 = (char *)OUTLINED_FUNCTION_35();
      uint64_t v101 = v100;
      id v99 = v84;
      *(_DWORD *)uint64_t v84 = 136315138;
      uint64_t v98 = v84 + 4;
      uint64_t v85 = v91;
      OUTLINED_FUNCTION_51_9();
      v27();
      swift_storeEnumTagMultiPayload();
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      uint64_t v86 = Error.localizedDescription.getter();
      unint64_t v88 = v87;
      _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v85, (void (*)(void))type metadata accessor for ContactsError);
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, (uint64_t *)&v101);
      OUTLINED_FUNCTION_35_5(v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v90 = *(void (**)(void))(v21 + 8);
      OUTLINED_FUNCTION_44();
      v90();
      _os_log_impl(&dword_22D49E000, v82, v83, "%s", v99, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v90 = *(void (**)(void))(v21 + 8);
      ((void (*)(uint64_t, uint64_t))v90)(v81, v19);
    }

    ((void (*)(void (*)(uint64_t), uint64_t))v90)(v26, v19);
  }
  OUTLINED_FUNCTION_8();
}

uint64_t specialized RRReferenceResolverProtocol.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  os_log_type_t v125 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v130 = (char *)&v124 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v128 = (uint64_t)&v124 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  BOOL v126 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v129 = (char *)&v124 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v127 = (char *)&v124 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v132 = (char *)&v124 - v17;
  uint64_t v140 = type metadata accessor for RRCandidate();
  uint64_t v137 = *(void *)(v140 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v140);
  uint64_t v131 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  os_log_type_t v136 = (char *)&v124 - v20;
  uint64_t v21 = type metadata accessor for RRResult();
  uint64_t v135 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v124 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v139 = (uint64_t *)((char *)&v124 - v25);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v124 - v26;
  uint64_t v28 = type metadata accessor for RRQuery();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  int v31 = (char **)((char *)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  uint64_t v33 = MEMORY[0x270FA5388](v32);
  uint64_t v35 = (void **)((char *)&v124 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v124 - v36;
  v143[1] = (uint64_t)v141;
  uint64_t v133 = type metadata accessor for RREntity();
  uint64_t v134 = a2;
  __swift_storeEnumTagSinglePayload(a2, 1, 1, v133);
  *int v31 = a1;
  (*(void (**)(void *, void, uint64_t))(v29 + 104))(v31, *MEMORY[0x263F74278], v28);
  type metadata accessor for ReferenceResolutionClient();
  swift_retain();
  dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)();
  (*(void (**)(void *, uint64_t))(v29 + 8))(v31, v28);
  char v141 = v37;
  outlined init with copy of Result<RRResult, Error>((uint64_t)v37, (uint64_t)v35, &demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = *v35;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.siriContacts);
    id v40 = v38;
    id v41 = v38;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v142 = (uint64_t)v38;
      v143[0] = v45;
      *(_DWORD *)uint64_t v44 = 136315138;
      id v46 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v47 = String.init<A>(describing:)();
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v42, v43, "#ReferenceResolution Received a failure: %s -> nil", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v45, -1, -1);
      MEMORY[0x230F85DE0](v44, -1, -1);
    }
    else
    {
    }
    return outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
  }
  uint64_t v49 = v135;
  (*(void (**)(char *, void **, uint64_t))(v135 + 32))(v27, v35, v21);
  uint64_t v50 = *(void (**)(uint64_t *, char *, uint64_t))(v49 + 16);
  uint32_t v51 = v139;
  v50(v139, v27, v21);
  int v52 = (*(uint64_t (**)(uint64_t *, uint64_t))(v49 + 88))(v51, v21);
  int v53 = *MEMORY[0x263F742B8];
  uint64_t v138 = v21;
  uint64_t v54 = v49;
  uint64_t v55 = v27;
  if (v52 == v53)
  {
    uint64_t v56 = (uint64_t)v27;
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v51, v138);
    uint64_t v57 = v136;
    uint64_t v58 = v137;
    uint64_t v59 = v140;
    (*(void (**)(char *, uint64_t *, uint64_t))(v137 + 32))(v136, v51, v140);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriContacts);
    uint64_t v61 = v131;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v131, v57, v59);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v130 = (char *)v56;
      uint64_t v66 = v65;
      v143[0] = v65;
      *(_DWORD *)uint64_t v64 = 136315138;
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x263F74140]);
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v69 = *(void (**)(char *, uint64_t))(v58 + 8);
      v69(v61, v140);
      _os_log_impl(&dword_22D49E000, v62, v63, "#ReferenceResolution Found a candidate %s", v64, 0xCu);
      swift_arrayDestroy();
      uint64_t v70 = v66;
      uint64_t v56 = (uint64_t)v130;
      MEMORY[0x230F85DE0](v70, -1, -1);
      uint64_t v71 = v64;
      uint64_t v59 = v140;
      MEMORY[0x230F85DE0](v71, -1, -1);
    }
    else
    {
      uint64_t v69 = *(void (**)(char *, uint64_t))(v58 + 8);
      v69(v61, v59);
    }

    uint64_t v87 = (uint64_t)v132;
    unint64_t v88 = v136;
    RRCandidate.entity.getter();
    v69(v88, v59);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v138);
    outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
    uint64_t v89 = v134;
    outlined destroy of SemanticValue?(v134, &demangling cache variable for type metadata for RREntity?);
    __swift_storeEnumTagSinglePayload(v87, 0, 1, v133);
    uint64_t v90 = v87;
    uint64_t v91 = v89;
    return outlined init with take of Any?(v90, v91, &demangling cache variable for type metadata for RREntity?);
  }
  uint64_t v73 = v137;
  if (v52 == *MEMORY[0x263F742C8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v51, v138);
    uint64_t v74 = *v51;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Logger.siriContacts);
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl(&dword_22D49E000, v76, v77, "#ReferenceResolution Found ambiguous entities -> returning the first one", v78, 2u);
      MEMORY[0x230F85DE0](v78, -1, -1);
    }

    uint64_t v79 = (uint64_t)v130;
    specialized Collection.first.getter(v74, (uint64_t)v130);
    swift_bridgeObjectRelease();
    uint64_t v80 = v140;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v79, 1, v140);
    uint64_t v82 = (uint64_t)v129;
    if (EnumTagSinglePayload == 1)
    {
LABEL_20:
      (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v138);
      outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
      uint64_t v83 = v134;
      outlined destroy of SemanticValue?(v134, &demangling cache variable for type metadata for RREntity?);
      uint64_t v84 = &demangling cache variable for type metadata for RRCandidate?;
      uint64_t v85 = v79;
LABEL_21:
      outlined destroy of SemanticValue?(v85, v84);
      uint64_t v86 = 1;
LABEL_41:
      __swift_storeEnumTagSinglePayload(v82, v86, 1, v133);
      uint64_t v90 = v82;
      uint64_t v91 = v83;
      return outlined init with take of Any?(v90, v91, &demangling cache variable for type metadata for RREntity?);
    }
    goto LABEL_39;
  }
  if (v52 == *MEMORY[0x263F742C0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v51, v138);
    uint64_t v92 = *v51;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain();
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 134217984;
      v143[0] = *(void *)(v92 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v94, v95, "#ReferenceResolution Found %ld candidates. Using the first one", v96, 0xCu);
      MEMORY[0x230F85DE0](v96, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v82 = (uint64_t)v127;
    uint64_t v79 = v128;
    specialized Collection.first.getter(v92, v128);
    swift_bridgeObjectRelease();
    uint64_t v80 = v140;
    if (__swift_getEnumTagSinglePayload(v79, 1, v140) == 1) {
      goto LABEL_20;
    }
LABEL_39:
    RRCandidate.entity.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v138);
    outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
    uint64_t v83 = v134;
    outlined destroy of SemanticValue?(v134, &demangling cache variable for type metadata for RREntity?);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v79, v80);
    goto LABEL_40;
  }
  if (v52 == *MEMORY[0x263F742D0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v51, v138);
    uint64_t v97 = *v51;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.siriContacts);
    id v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    BOOL v101 = os_log_type_enabled(v99, v100);
    uint64_t v102 = (uint64_t)v125;
    if (v101)
    {
      unint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v103 = 0;
      _os_log_impl(&dword_22D49E000, v99, v100, "#ReferenceResolution Found ambiguous entities -> returning the first one", v103, 2u);
      MEMORY[0x230F85DE0](v103, -1, -1);
    }

    uint64_t v82 = (uint64_t)v126;
    if (!*(void *)(v97 + 16))
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v138);
      outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
      uint64_t v84 = &demangling cache variable for type metadata for RREntity?;
      uint64_t v83 = v134;
      uint64_t v85 = v134;
      goto LABEL_21;
    }
    uint64_t v104 = *(void *)(v97 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    specialized Collection.first.getter(v104, v102);
    swift_bridgeObjectRelease();
    uint64_t v105 = v140;
    if (__swift_getEnumTagSinglePayload(v102, 1, v140) == 1)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v138);
      outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
      uint64_t v83 = v134;
      outlined destroy of SemanticValue?(v134, &demangling cache variable for type metadata for RREntity?);
      uint64_t v84 = &demangling cache variable for type metadata for RRCandidate?;
      uint64_t v85 = v102;
      goto LABEL_21;
    }
    RRCandidate.entity.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v138);
    outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
    uint64_t v83 = v134;
    outlined destroy of SemanticValue?(v134, &demangling cache variable for type metadata for RREntity?);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v102, v105);
LABEL_40:
    uint64_t v86 = 0;
    goto LABEL_41;
  }
  if (v52 == *MEMORY[0x263F742D8])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.siriContacts);
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl(&dword_22D49E000, v107, v108, "#ReferenceResolution No matches found", v109, 2u);
      MEMORY[0x230F85DE0](v109, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v138);
    return outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v110 = type metadata accessor for Logger();
  __swift_project_value_buffer(v110, (uint64_t)static Logger.siriContacts);
  uint64_t v111 = v124;
  v50((uint64_t *)v124, v27, v138);
  os_log_type_t v112 = Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v112, v113))
  {
    uint64_t v114 = (uint8_t *)swift_slowAlloc();
    uint64_t v115 = swift_slowAlloc();
    v143[0] = v115;
    *(_DWORD *)uint64_t v114 = 136315138;
    uint64_t v130 = v27;
    uint64_t v116 = v138;
    _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type RRResult and conformance RRResult, MEMORY[0x263F742E0]);
    uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v119 = *(void (**)(char *, uint64_t))(v49 + 8);
    v119(v111, v116);
    _os_log_impl(&dword_22D49E000, v112, v113, "#ReferenceResolution Received unknown result type %s", v114, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v115, -1, -1);
    uint64_t v120 = v114;
    uint32_t v51 = v139;
    MEMORY[0x230F85DE0](v120, -1, -1);

    uint64_t v121 = (uint64_t)v130;
    uint64_t v122 = v116;
  }
  else
  {

    uint64_t v119 = *(void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v123 = v138;
    v119(v111, v138);
    uint64_t v121 = (uint64_t)v27;
    uint64_t v122 = v123;
  }
  v119((char *)v121, v122);
  outlined destroy of SemanticValue?((uint64_t)v141, &demangling cache variable for type metadata for Result<RRResult, Error>);
  return ((uint64_t (*)(uint64_t *, uint64_t))v119)(v51, v138);
}

uint64_t specialized RRReferenceResolverProtocol.resolvePersonDisambiguationReference(from:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RRReferenceResolverProtocol.resolvePositionEntity(from:)((uint64_t)v2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
    outlined destroy of SemanticValue?((uint64_t)v2, &demangling cache variable for type metadata for RREntity?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    RREntity.usoEntity.getter();
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v7 = v18;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v17 = v7;
      uint64_t v18 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      v16[1] = v11 + 4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person?);
      uint64_t v13 = Optional.debugDescription.getter();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v9, v10, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_Person: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v12, -1, -1);
      MEMORY[0x230F85DE0](v11, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

uint64_t specialized RRReferenceResolverProtocol.resolvePositionEntity(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.preferredUserDialogAct.getter((uint64_t)v7);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    uint64_t v9 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    uint64_t v10 = (uint64_t)v7;
  }
  else
  {
    uint64_t v11 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v12 = specialized static RRReferenceResolverProtocol.extractPositionEntity(task:)();
    if (!v12)
    {
      swift_release();
      goto LABEL_9;
    }
    specialized RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v12, (uint64_t)v4);
    swift_release();
    swift_release();
    uint64_t v13 = type metadata accessor for RREntity();
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v13) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, v4, v13);
      uint64_t v19 = a1;
      uint64_t v20 = 0;
      uint64_t v18 = v13;
      return __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
    }
    uint64_t v9 = &demangling cache variable for type metadata for RREntity?;
    uint64_t v10 = (uint64_t)v4;
  }
  outlined destroy of SemanticValue?(v10, v9);
LABEL_9:
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_22D49E000, v15, v16, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v17, 2u);
    MEMORY[0x230F85DE0](v17, -1, -1);
  }

  uint64_t v18 = type metadata accessor for RREntity();
  uint64_t v19 = a1;
  uint64_t v20 = 1;
  return __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
}

uint64_t specialized static RRReferenceResolverProtocol.extractPositionEntity(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v18) {
    goto LABEL_18;
  }
  outlined init with copy of Result<RRResult, Error>((uint64_t)v17, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_noVerb_uso_NoEntity();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v15)
    {
      swift_retain();
      uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
      swift_release();
      swift_release();
      if (v0)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v1 = type metadata accessor for Logger();
        __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
        swift_retain_n();
        uint64_t v2 = Logger.logObject.getter();
        os_log_type_t v3 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v2, v3))
        {
          uint64_t v4 = (uint8_t *)swift_slowAlloc();
          uint64_t v14 = swift_slowAlloc();
          uint64_t v15 = v14;
          *(_DWORD *)uint64_t v4 = 136315138;
          CodeGenBase.entity.getter();
          uint64_t v5 = UsoEntity.debugString.getter();
          unint64_t v7 = v6;
          swift_release();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v2, v3, "#ReferenceResolution Found positional reference, returning: %s", v4, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v14, -1, -1);
          MEMORY[0x230F85DE0](v4, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        swift_retain();
        uint64_t v8 = CodeGenBase.entity.getter();
        swift_release();
        swift_release_n();
        goto LABEL_25;
      }
      swift_release();
    }
    swift_release();
    goto LABEL_17;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
LABEL_14:
    swift_release();
    uint64_t v8 = specialized static RRReferenceResolverProtocol.helper(person:)(v15);
    swift_release();
    swift_release();
LABEL_25:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    outlined destroy of SemanticValue?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    return v8;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (swift_dynamicCast()
    || (type metadata accessor for UsoTask_read_common_Person(), swift_dynamicCast()))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    goto LABEL_14;
  }
LABEL_17:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
LABEL_18:
  outlined destroy of SemanticValue?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_22D49E000, v10, v11, "#ReferenceResolution Found no positional reference, returning nil", v12, 2u);
    MEMORY[0x230F85DE0](v12, -1, -1);
  }

  return 0;
}

uint64_t specialized static RRReferenceResolverProtocol.helper(person:)(uint64_t a1)
{
  if (a1)
  {
    swift_retain();
    uint64_t v1 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    if (v1)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
      swift_retain_n();
      os_log_type_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        uint64_t v6 = swift_slowAlloc();
        uint64_t v16 = v6;
        *(_DWORD *)uint64_t v5 = 136315138;
        CodeGenBase.entity.getter();
        uint64_t v7 = UsoEntity.debugString.getter();
        unint64_t v9 = v8;
        swift_release();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v3, v4, "#ReferenceResolution Found positional reference, returning: %s", v5, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v6, -1, -1);
        MEMORY[0x230F85DE0](v5, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      swift_retain();
      uint64_t v14 = CodeGenBase.entity.getter();
      swift_release_n();
      return v14;
    }
    swift_release();
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriContacts);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_22D49E000, v11, v12, "#ReferenceResolution Found no positional reference, returning nil", v13, 2u);
    MEMORY[0x230F85DE0](v13, -1, -1);
  }

  return 0;
}

void Parse.DirectInvocation.toSiriKitIntent()()
{
  OUTLINED_FUNCTION_10();
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v3;
  uint64_t v19 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_7();
  uint64_t v4 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  *((void *)&v23 + 1) = MEMORY[0x263F8D310];
  unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)&long long v22 = 0xD000000000000010;
  *((void *)&v22 + 1) = 0x800000022D5AC010;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22D59FD50;
  outlined init with copy of DeviceState((uint64_t)&v22, v10 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v8 + *(int *)(v4 + 20);
  *(void *)uint64_t v11 = "ToSiriKitIntent";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v22);
  uint64_t v13 = Parse.DirectInvocation.identifier.getter();
  uint64_t v14 = v12;
  if (v13 == 0xD000000000000026 && v12 == 0x800000022D5A6450
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ModifyContactAttributeIntent();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v0, v19);
    ModifyContactAttributeIntent.__allocating_init(_:)(v1);
    goto LABEL_7;
  }
  if (v13 == 0xD000000000000022 && v14 == 0x800000022D5A64E0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_7;
    }
  }
  id v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  uint64_t v17 = Parse.DirectInvocation.userData.getter();
  if (!v17)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    goto LABEL_17;
  }
  specialized Dictionary.subscript.getter(0x4E746361746E6F63, 0xEB00000000656D61, v17, &v22);
  swift_bridgeObjectRelease();
  if (!*((void *)&v23 + 1))
  {
LABEL_17:
    outlined destroy of SemanticValue?((uint64_t)&v22, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  if (swift_dynamicCast()) {
    outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(v20, v21, v16);
  }
LABEL_7:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v8, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_8();
}

void Parse.isContactIntent.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_4();
  uint64_t v62 = v3;
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_4();
  uint64_t v61 = v6;
  OUTLINED_FUNCTION_42_13();
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_4();
  uint64_t v8 = type metadata accessor for ContactNLv3Intent();
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_4();
  uint64_t v66 = v10;
  OUTLINED_FUNCTION_42_13();
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_4();
  uint64_t v65 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v16 = OUTLINED_FUNCTION_10_0(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_42_12();
  Parse.confirmationResponse.getter();
  uint64_t v17 = type metadata accessor for ConfirmationResponse();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v17);
  outlined destroy of SemanticValue?(v0, &demangling cache variable for type metadata for ConfirmationResponse?);
  if (EnumTagSinglePayload != 1) {
    goto LABEL_51;
  }
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_89();
  v19();
  OUTLINED_FUNCTION_27_17();
  int v21 = v20();
  if (v21 == *MEMORY[0x263F6FF50])
  {
    uint64_t v22 = OUTLINED_FUNCTION_25_19();
    v23(v22);
    OUTLINED_FUNCTION_11();
    v24();
    OUTLINED_FUNCTION_89();
    v25();
    ContactNLv3Intent.init(intent:)(v65, v26, v27, v28, v29, v30, v31, v32, v59, v60);
    ContactNLv3Intent.isContactDomain.getter();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(v66, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_72_3();
    v33();
    goto LABEL_51;
  }
  if (v21 != *MEMORY[0x263F6FF70])
  {
    if (v21 != *MEMORY[0x263F6FF80])
    {
      OUTLINED_FUNCTION_27_3();
      v53();
      goto LABEL_51;
    }
    uint64_t v48 = OUTLINED_FUNCTION_25_19();
    v49(v48);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_11();
    v50();
    USOParse.preferredUserDialogAct.getter(v62);
    uint64_t v51 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    OUTLINED_FUNCTION_6_3(v62, 1, v51);
    if (v46)
    {
      OUTLINED_FUNCTION_18_20();
      v52();
      outlined destroy of SemanticValue?(v62, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      uint64_t v54 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_70_3();
      OUTLINED_FUNCTION_23();
      v55();
      if (v54)
      {
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        OUTLINED_FUNCTION_18_20();
        v56();
        goto LABEL_37;
      }
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v64);
    }
    memset(v76, 0, 32);
LABEL_37:
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v75, &demangling cache variable for type metadata for Any?);
    if (v75[3])
    {
      type metadata accessor for UsoTask_summarise_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        uint64_t v58 = v74[0];
        goto LABEL_42;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v75, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v58 = 0;
LABEL_42:
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v75, &demangling cache variable for type metadata for Any?);
    if (v58)
    {
      swift_release();
      outlined destroy of SemanticValue?((uint64_t)v75, &demangling cache variable for type metadata for Any?);
LABEL_44:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v74, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v74, &demangling cache variable for type metadata for Any?);
LABEL_45:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v73, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v73, &demangling cache variable for type metadata for Any?);
LABEL_46:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v72, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v72, &demangling cache variable for type metadata for Any?);
LABEL_47:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v71, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v71, &demangling cache variable for type metadata for Any?);
LABEL_48:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v70, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v70, &demangling cache variable for type metadata for Any?);
LABEL_49:
      outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v69, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v69, &demangling cache variable for type metadata for Any?);
LABEL_50:
      outlined init with take of Any?((uint64_t)v76, (uint64_t)v68, &demangling cache variable for type metadata for Any?);
      outlined destroy of SemanticValue?((uint64_t)v68, &demangling cache variable for type metadata for Any?);
      goto LABEL_51;
    }
    outlined init with take of Any?((uint64_t)v75, (uint64_t)v74, &demangling cache variable for type metadata for Any?);
    if (v74[3])
    {
      type metadata accessor for UsoTask_read_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_44;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v74, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v74, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v74, (uint64_t)v73, &demangling cache variable for type metadata for Any?);
    if (v73[3])
    {
      type metadata accessor for UsoTask_request_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_45;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v73, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v73, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v73, (uint64_t)v72, &demangling cache variable for type metadata for Any?);
    if (v72[3])
    {
      type metadata accessor for UsoTask_noVerb_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_46;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v72, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v72, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v72, (uint64_t)v71, &demangling cache variable for type metadata for Any?);
    if (v71[3])
    {
      type metadata accessor for UsoTask_update_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_47;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v71, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v71, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v71, (uint64_t)v70, &demangling cache variable for type metadata for Any?);
    if (v70[3])
    {
      type metadata accessor for UsoTask_create_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_48;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v70, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v70, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v70, (uint64_t)v69, &demangling cache variable for type metadata for Any?);
    if (v69[3])
    {
      type metadata accessor for UsoTask_delete_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_49;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v69, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Result<RRResult, Error>((uint64_t)v76, (uint64_t)v69, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v69, (uint64_t)v68, &demangling cache variable for type metadata for Any?);
    if (v68[3])
    {
      type metadata accessor for UsoTask_checkExistence_common_Person();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast())
      {
        swift_release();
        goto LABEL_50;
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v68, &demangling cache variable for type metadata for Any?);
    }
    outlined init with take of Any?((uint64_t)v76, (uint64_t)v68, &demangling cache variable for type metadata for Any?);
    outlined init with take of Any?((uint64_t)v68, (uint64_t)v67, &demangling cache variable for type metadata for Any?);
    if (v67[3])
    {
      type metadata accessor for UsoTask_noVerb_uso_NoEntity();
      OUTLINED_FUNCTION_28_16();
      if (swift_dynamicCast()) {
        swift_release();
      }
    }
    else
    {
      outlined destroy of SemanticValue?((uint64_t)v67, &demangling cache variable for type metadata for Any?);
    }
    goto LABEL_51;
  }
  uint64_t v34 = OUTLINED_FUNCTION_25_19();
  v35(v34);
  OUTLINED_FUNCTION_11();
  v36();
  uint64_t v37 = static ContactsDirectInvocations.Identifiers.allCases.getter();
  uint64_t v38 = v37[2];
  if (v38)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = 0;
    while (1)
    {
      id v40 = (char *)v37 + v39++;
      unint64_t v41 = 0xD000000000000026;
      unint64_t v42 = 0x800000022D5A6450;
      switch(v40[32])
      {
        case 1:
          os_log_type_t v43 = "ontacts.ModifyNickname";
          goto LABEL_10;
        case 2:
          os_log_type_t v43 = "ontacts.SelectContact";
LABEL_10:
          unint64_t v42 = (unint64_t)v43 | 0x8000000000000000;
          unint64_t v41 = 0xD000000000000025;
          break;
        case 3:
          uint64_t v44 = "ontacts.ContactPicker";
          unint64_t v41 = 0xD000000000000022;
          goto LABEL_16;
        case 4:
          unint64_t v41 = 0xD00000000000003CLL;
          uint64_t v44 = "ontacts.GetContact";
          goto LABEL_16;
        case 5:
          unint64_t v41 = 0xD000000000000034;
          uint64_t v44 = "Messages.NewMessageToContact";
          goto LABEL_16;
        case 6:
          uint64_t v44 = "Phone.StartAudioCall";
          unint64_t v41 = 0xD00000000000001FLL;
          goto LABEL_16;
        case 7:
          uint64_t v44 = "com.apple.siri.contacts.Confirm";
          unint64_t v41 = 0xD00000000000001CLL;
LABEL_16:
          unint64_t v42 = (unint64_t)v44 | 0x8000000000000000;
          break;
        default:
          break;
      }
      BOOL v46 = v41 == Parse.DirectInvocation.identifier.getter() && v42 == v45;
      if (v46) {
        break;
      }
      OUTLINED_FUNCTION_70_3();
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) != 0 || v38 == v39) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_33:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_23();
  v57();
LABEL_51:
  OUTLINED_FUNCTION_8();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  AnyHashable._rawHashValue(seed:)(*(void *)(v0 + 40));
  uint64_t v1 = OUTLINED_FUNCTION_76_1();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  type metadata accessor for ContactsLabelCATContainer.LabelType();
  _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, MEMORY[0x263F6CE18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v0 = OUTLINED_FUNCTION_76_1();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x230F85470](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = a1;
  unint64_t v4 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    BOOL v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, MEMORY[0x263F6CE18]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_2(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_23();
  v3();
  return a1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s19SiriContactsIntents0B5ErrorOACs0D0AAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    OUTLINED_FUNCTION_76_1();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return type metadata accessor for NLIntent();
}

uint64_t OUTLINED_FUNCTION_15_26()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_25_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_12@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_32_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_16()
{
  return type metadata accessor for Parse();
}

uint64_t OUTLINED_FUNCTION_39_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_14()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_42_13()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_43_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 152) = (char *)&a9 - v9;
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_8()
{
  return v0;
}

double OUTLINED_FUNCTION_53_7()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_55_6()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t OUTLINED_FUNCTION_58_6()
{
  return v0;
}

void OUTLINED_FUNCTION_59_4(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

BOOL OUTLINED_FUNCTION_60_4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_61_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return type metadata accessor for Parse();
}

uint64_t OUTLINED_FUNCTION_67_2(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_68_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_75_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_1()
{
  return v0;
}

uint64_t protocol witness for SiriKitGetEntityIntent.contactRelation.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_contactRelation);
}

uint64_t protocol witness for SiriKitGetEntityIntent.organizationName.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc GetContactIntent.organizationName.getter(v0);
}

uint64_t protocol witness for SiriKitGetEntityIntent.fullName.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc GetContactIntent.fullName.getter(v0);
}

uint64_t protocol witness for SiriKitGetEntityIntent.phoneNumber.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t (*protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent())()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_36();
  uint64_t v2 = (uint64_t *)OUTLINED_FUNCTION_1_43((uint64_t)v1);
  *(void *)(v0 + 32) = GetContactIntent.phoneNumber.modify(v2);
  return protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent;
}

void (*GetContactIntent.phoneNumber.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(v1);
  a1[1] = v3;
  return GetContactIntent.phoneNumber.modify;
}

void GetContactIntent.phoneNumber.modify(uint64_t *a1, char a2)
{
}

uint64_t protocol witness for SiriKitGetEntityIntent.emailAddress.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.emailAddress.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t (*protocol witness for SiriKitGetEntityIntent.emailAddress.modify in conformance GetContactIntent())()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_36();
  uint64_t v2 = (uint64_t *)OUTLINED_FUNCTION_1_43((uint64_t)v1);
  *(void *)(v0 + 32) = GetContactIntent.emailAddress.modify(v2);
  return protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent;
}

void (*GetContactIntent.emailAddress.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(v1);
  a1[1] = v3;
  return GetContactIntent.emailAddress.modify;
}

void GetContactIntent.emailAddress.modify(uint64_t *a1, char a2)
{
}

uint64_t protocol witness for SiriKitGetEntityIntent.siriMatches.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.siriMatches.setter in conformance GetContactIntent(uint64_t a1)
{
  if (a1)
  {
    type metadata accessor for SiriMatch();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setSiriMatches_, isa);
}

uint64_t (*protocol witness for SiriKitGetEntityIntent.siriMatches.modify in conformance GetContactIntent())()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_36();
  uint64_t v2 = (uint64_t *)OUTLINED_FUNCTION_1_43((uint64_t)v1);
  *(void *)(v0 + 32) = GetContactIntent.siriMatches.modify(v2);
  return protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent;
}

void (*GetContactIntent.siriMatches.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(v1);
  return GetContactIntent.siriMatches.modify;
}

void GetContactIntent.siriMatches.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    if (v3)
    {
      type metadata accessor for SiriMatch();
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      Class isa = 0;
    }
    objc_msgSend((id)a1[1], sel_setSiriMatches_, isa);
    swift_bridgeObjectRelease();
  }
  else if (v3)
  {
    type metadata accessor for SiriMatch();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend((id)a1[1], sel_setSiriMatches_, isa);
  }
  else
  {
    Class isa = 0;
    objc_msgSend((id)a1[1], sel_setSiriMatches_, 0);
  }
}

void protocol witness for SiriKitGetEntityIntent.contactIdentifier.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  if (a2)
  {
    id v7 = (id)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = 0;
  }
  objc_msgSend(v5, *a5, v7);
}

uint64_t (*protocol witness for SiriKitGetEntityIntent.contactIdentifier.modify in conformance GetContactIntent())()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_36();
  uint64_t v2 = (uint64_t *)OUTLINED_FUNCTION_1_43((uint64_t)v1);
  *(void *)(v0 + 32) = GetContactIntent.contactIdentifier.modify(v2);
  return protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent;
}

void (*GetContactIntent.contactIdentifier.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v1, (SEL *)&selRef_contactIdentifier);
  a1[1] = v3;
  return GetContactIntent.contactIdentifier.modify;
}

void GetContactIntent.contactIdentifier.modify(uint64_t *a1, char a2)
{
}

void GetContactIntent.phoneNumber.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v5 = a1[1];
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = *a1;
      swift_bridgeObjectRetain();
      id v7 = (id)MEMORY[0x230F84F70](v6, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v7 = 0;
    }
    objc_msgSend((id)a1[2], *a3, v7);
    swift_bridgeObjectRelease();
  }
  else if (v5)
  {
    id v7 = (id)MEMORY[0x230F84F70](*a1, v5);
    swift_bridgeObjectRelease();
    objc_msgSend((id)a1[2], *a3, v7);
  }
  else
  {
    id v7 = 0;
    objc_msgSend((id)a1[2], *a3, 0);
  }
}

id protocol witness for SiriKitContactIntent.isMe.getter in conformance GetContactIntent()
{
  id v1 = objc_msgSend(v0, sel_isMe);
  return v1;
}

uint64_t protocol witness for SiriKitContactIntent.contactIdentifier.getter in conformance GetContactIntent()
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_contactIdentifier);
}

char *GetContactIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return GetContactIntentResponse.init(code:userActivity:)(a1, a2);
}

uint64_t protocol witness for SiriKitGetEntityIntentResponse.contactIdentifiers.getter in conformance GetContactIntentResponse()
{
  return outlined bridged method (pb) of @objc GetContactIntentResponse.contactIdentifiers.getter(v0);
}

id GetContactIntent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id key path getter for GetContactIntent.isMe : GetContactIntent@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isMe);
  *a2 = result;
  return result;
}

void key path getter for GetContactIntent.firstName : GetContactIntent(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void key path setter for GetContactIntent.firstName : GetContactIntent(void *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (a1[1]) {
    uint64_t v7 = MEMORY[0x230F84F70](*a1);
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  [v6 *a5];
}

void key path getter for GetContactIntent.siriMatches : GetContactIntent(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_siriMatches);
  if (v3)
  {
    id v4 = v3;
    type metadata accessor for SiriMatch();
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void key path setter for GetContactIntent.siriMatches : GetContactIntent(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    type metadata accessor for SiriMatch();
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  objc_msgSend(v2, sel_setSiriMatches_);
}

id GetContactIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

id GetContactIntent.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id GetContactIntent.init(coder:)(void *a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactIntent();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  return v7;
}

id GetContactIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for GetContactIntent();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithIdentifier_backingStore_, v5, a3);

  return v6;
}

id GetContactIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone(v0), sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id GetContactIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for GetContactIntent();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id GetContactIntent.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactIntent);
}

unint64_t GetContactIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GetContactIntentResponseCode(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetContactIntentResponseCode()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance GetContactIntentResponseCode(int a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactIntentResponseCode(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = GetContactIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void key path getter for GetContactIntentResponse.contactIdentifiers : GetContactIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_contactIdentifiers);
  if (v3)
  {
    char v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void key path setter for GetContactIntentResponse.contactIdentifiers : GetContactIntentResponse(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a1) {
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  objc_msgSend(v2, sel_setContactIdentifiers_);
}

uint64_t GetContactIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___GetContactIntentResponse_code;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t GetContactIntentResponse.code.setter(uint64_t a1)
{
  NSArray v3 = (void *)(v1 + OBJC_IVAR___GetContactIntentResponse_code);
  uint64_t result = swift_beginAccess();
  *NSArray v3 = a1;
  return result;
}

char *GetContactIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (char *)objc_msgSend(v2, sel_init);
  id v6 = &v5[OBJC_IVAR___GetContactIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  NSDictionary v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for GetContactIntent()
{
  return self;
}

id GetContactIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___GetContactIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactIntentResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for GetContactIntentResponse()
{
  return self;
}

id GetContactIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v3;
}

id GetContactIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithBackingStore_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithPropertiesByName_, v2.super.isa);

  return v3;
}

id GetContactIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactIntentResponse_code] = 0;
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithPropertiesByName_, v3, v4, v5, v6, v7, v8, v11);

  if (v9) {
  return v9;
  }
}

id GetContactIntentResponse.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactIntentResponse);
}

uint64_t GetContactSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 8) < 0xFFFFFFFFFFFFFFF9) {
    return 0;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = GetContactSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetContactSiriMatchesUnsupportedReason(void *a1@<X8>)
{
  *a1 = *v1;
}

id static GetContactSiriMatchesResolutionResult.unsupported(forReason:)(uint64_t a1)
{
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unsupportedWithReason_, a1);
  return v1;
}

id GetContactSiriMatchesResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id GetContactSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for GetContactSiriMatchesResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for GetContactSiriMatchesResolutionResult()
{
  return self;
}

id GetContactSiriMatchesResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactSiriMatchesResolutionResult);
}

id GetContactIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason);
  }
  return result;
}

char *keypath_get_selector_isMe()
{
  return sel_isMe;
}

id sub_22D5915CC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsMe_, *a1);
}

char *keypath_get_selector_firstName()
{
  return sel_firstName;
}

void sub_22D5915EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59160C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_nickName()
{
  return sel_nickName;
}

void sub_22D591638(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D591658(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_lastName()
{
  return sel_lastName;
}

void sub_22D591684(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5916A4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_middleName()
{
  return sel_middleName;
}

void sub_22D5916D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5916F0(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_organizationName()
{
  return sel_organizationName;
}

void sub_22D59171C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59173C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_contactIdentifier()
{
  return sel_contactIdentifier;
}

void sub_22D591768(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D591788(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_contactRelation()
{
  return sel_contactRelation;
}

void sub_22D5917B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5917D4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_fullName()
{
  return sel_fullName;
}

void sub_22D591800(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D591820(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_phoneNumber()
{
  return sel_phoneNumber;
}

void sub_22D59184C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59186C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_emailAddress()
{
  return sel_emailAddress;
}

void sub_22D591898(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5918B8(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_siriMatches()
{
  return sel_siriMatches;
}

char *keypath_get_selector_contactIdentifiers()
{
  return sel_contactIdentifiers;
}

uint64_t sub_22D591900@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GetContactIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22D59192C(uint64_t *a1)
{
  return GetContactIntentResponse.code.setter(*a1);
}

ValueMetadata *type metadata accessor for GetContactIntentResponseCode()
{
  return &type metadata for GetContactIntentResponseCode;
}

uint64_t method lookup function for GetContactIntentResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GetContactIntentResponse);
}

uint64_t dispatch thunk of GetContactIntentResponse.code.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

ValueMetadata *type metadata accessor for GetContactSiriMatchesUnsupportedReason()
{
  return &type metadata for GetContactSiriMatchesUnsupportedReason;
}

uint64_t method lookup function for GetContactSiriMatchesResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GetContactSiriMatchesResolutionResult);
}

uint64_t dispatch thunk of static GetContactSiriMatchesResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_contactRelation);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_contactIdentifier);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_siriMatches);
  if (!v1) {
    return 0;
  }
  NSDictionary v2 = v1;
  type metadata accessor for SiriMatch();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc GetContactIntentResponse.contactIdentifiers.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_contactIdentifiers);
  if (!v1) {
    return 0;
  }
  NSDictionary v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id OUTLINED_FUNCTION_0_35(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2, v9);
}

uint64_t OUTLINED_FUNCTION_1_43(uint64_t result)
{
  *id v1 = result;
  return result;
}

void OUTLINED_FUNCTION_2_42()
{
  JUMPOUT(0x230F84F70);
}

void *OUTLINED_FUNCTION_3_36()
{
  return malloc(0x28uLL);
}

char *GetContactAttributeIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return GetContactAttributeIntentResponse.init(code:userActivity:)(a1, a2);
}

uint64_t GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 4) < 0xFFFFFFFFFFFFFFFDLL) {
    return 0;
  }
  return result;
}

id GetContactAttributeIntent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id key path getter for GetContactAttributeIntent.contactAttributeToGet : GetContactAttributeIntent@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contactAttributeToGet);
  *a2 = result;
  return result;
}

void key path getter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  id v6 = [*a1 *a2];
  if (v6)
  {
    uint64_t v7 = v6;
    a3(0);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a4 = v8;
}

void key path setter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(void *a1, void **a2, uint64_t a3, uint64_t a4, void (*a5)(void), SEL *a6)
{
  uint64_t v7 = *a2;
  if (*a1)
  {
    a5(0);
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v8.super.Class isa = 0;
  }
  Class isa = v8.super.isa;
  [v7 *a6];
}

id GetContactAttributeIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

id GetContactAttributeIntent.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id GetContactAttributeIntent.init(coder:)(void *a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactAttributeIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  return v7;
}

id GetContactAttributeIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithIdentifier_backingStore_, v5, a3);

  return v6;
}

id GetContactAttributeIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone(v0), sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id GetContactAttributeIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id GetContactAttributeIntent.__deallocating_deinit()
{
  return GetContactAttributeIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeIntent);
}

unint64_t GetContactAttributeIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = GetContactAttributeIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t GetContactAttributeIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___GetContactAttributeIntentResponse_code;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t GetContactAttributeIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___GetContactAttributeIntentResponse_code);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

char *GetContactAttributeIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (char *)objc_msgSend(v2, sel_init);
  id v6 = &v5[OBJC_IVAR___GetContactAttributeIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  NSDictionary v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for GetContactAttributeIntent()
{
  return self;
}

id GetContactAttributeIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___GetContactAttributeIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactAttributeIntentResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for GetContactAttributeIntentResponse()
{
  return self;
}

id GetContactAttributeIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactAttributeIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactAttributeIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v3;
}

id GetContactAttributeIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactAttributeIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithBackingStore_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id GetContactAttributeIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithPropertiesByName_, v2.super.isa);

  return v3;
}

id GetContactAttributeIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___GetContactAttributeIntentResponse_code] = 0;
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for GetContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithPropertiesByName_, v3, v4, v5, v6, v7, v8, v11);

  if (v9) {
  return v9;
  }
}

id GetContactAttributeIntentResponse.__deallocating_deinit()
{
  return GetContactAttributeIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeIntentResponse);
}

uint64_t GetContactAttributeSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 8) < 0xFFFFFFFFFFFFFFF9) {
    return 0;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = GetContactAttributeSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  return GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult);
}

uint64_t type metadata accessor for GetContactAttributeSiriMatchesResolutionResult()
{
  return self;
}

id GetContactAttributeSiriMatchesResolutionResult.__deallocating_deinit()
{
  return GetContactAttributeIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeSiriMatchesResolutionResult);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeContactAttributeToGetUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id GetContactAttributeSiriMatchesResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id GetContactAttributeContactAttributeToGetResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  return GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult);
}

id GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = swift_bridgeObjectRelease();
  v11.receiver = v3;
  v11.super_class = (Class)a3(v7);
  id v8 = objc_msgSendSuper2(&v11, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v9 = v8;
  if (v9) {

  }
  return v9;
}

uint64_t type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult()
{
  return self;
}

id GetContactAttributeContactAttributeToGetResolutionResult.__deallocating_deinit()
{
  return GetContactAttributeIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult);
}

id GetContactAttributeIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason);
  }
  return result;
}

id sub_22D592BD0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsMe_, *a1);
}

void sub_22D592BE4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592C04(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592C24(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592C44(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592C64(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592C84(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592CA4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592CC4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592CE4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592D04(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592D24(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592D44(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592D64(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592D84(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592DA4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592DC4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592DE4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592E04(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592E24(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592E44(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D592E64(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592E98(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_contactAttributeToGet()
{
  return sel_contactAttributeToGet;
}

id sub_22D592EDC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeToGet_, *a1);
}

char *keypath_get_selector_contactHandleMatches()
{
  return sel_contactHandleMatches;
}

void sub_22D592EFC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592F30(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_contactHandleAlternatives()
{
  return sel_contactHandleAlternatives;
}

void sub_22D592F70(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D592FA4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_property()
{
  return sel_property;
}

void sub_22D592FEC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59300C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_22D59302C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GetContactAttributeIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22D593058(uint64_t *a1)
{
  return GetContactAttributeIntentResponse.code.setter(*a1);
}

void type metadata accessor for GetContactAttributeIntentResponseCode()
{
}

uint64_t method lookup function for GetContactAttributeIntentResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GetContactAttributeIntentResponse);
}

uint64_t dispatch thunk of GetContactAttributeIntentResponse.code.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

void type metadata accessor for GetContactAttributeSiriMatchesUnsupportedReason()
{
}

uint64_t method lookup function for GetContactAttributeSiriMatchesResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GetContactAttributeSiriMatchesResolutionResult);
}

uint64_t dispatch thunk of static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for GetContactAttributeContactAttributeToGetUnsupportedReason()
{
}

uint64_t method lookup function for GetContactAttributeContactAttributeToGetResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GetContactAttributeContactAttributeToGetResolutionResult);
}

uint64_t dispatch thunk of static GetContactAttributeContactAttributeToGetResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)(uint64_t a1)
{
  if (a1 == 2) {
    uint64_t v1 = 2;
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1 == 1) {
    return 1;
  }
  else {
    return v1;
  }
}

char *ModifyContactAttributeIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return ModifyContactAttributeIntentResponse.init(code:userActivity:)(a1, a2);
}

id ModifyContactAttributeIntent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void key path getter for ModifyContactAttributeIntent.relatedSiriMatches : ModifyContactAttributeIntent(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_relatedSiriMatches);
  if (v3)
  {
    id v4 = v3;
    type metadata accessor for SiriMatch();
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void key path setter for ModifyContactAttributeIntent.relatedSiriMatches : ModifyContactAttributeIntent(void *a1, void **a2)
{
  NSDictionary v2 = *a2;
  if (*a1)
  {
    type metadata accessor for SiriMatch();
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  objc_msgSend(v2, sel_setRelatedSiriMatches_);
}

id key path getter for ModifyContactAttributeIntent.relatedContact : ModifyContactAttributeIntent@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_relatedContact);
  *a2 = result;
  return result;
}

id ModifyContactAttributeIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ModifyContactAttributeIntent.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ModifyContactAttributeIntent.init(coder:)(void *a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id ModifyContactAttributeIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  return v7;
}

id ModifyContactAttributeIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithIdentifier_backingStore_, v5, a3);

  return v6;
}

id ModifyContactAttributeIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone(v0), sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id ModifyContactAttributeIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id ModifyContactAttributeIntent.__deallocating_deinit()
{
  return ModifyContactAttributeIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeIntent);
}

unint64_t ModifyContactAttributeIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result == 100) {
    uint64_t v1 = 100;
  }
  else {
    uint64_t v1 = 0;
  }
  if (result >= 7) {
    return v1;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ModifyContactAttributeIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id key path getter for ModifyContactAttributeIntentResponse.updatedRelationship : ModifyContactAttributeIntentResponse@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_updatedRelationship);
  *a2 = result;
  return result;
}

uint64_t ModifyContactAttributeIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___ModifyContactAttributeIntentResponse_code;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ModifyContactAttributeIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___ModifyContactAttributeIntentResponse_code);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

char *ModifyContactAttributeIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (char *)objc_msgSend(v2, sel_init);
  id v6 = &v5[OBJC_IVAR___ModifyContactAttributeIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  NSDictionary v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for ModifyContactAttributeIntent()
{
  return self;
}

id ModifyContactAttributeIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___ModifyContactAttributeIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for ModifyContactAttributeIntentResponse()
{
  return self;
}

id ModifyContactAttributeIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___ModifyContactAttributeIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id ModifyContactAttributeIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v3;
}

id ModifyContactAttributeIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___ModifyContactAttributeIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithBackingStore_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id ModifyContactAttributeIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithPropertiesByName_, v2.super.isa);

  return v3;
}

id ModifyContactAttributeIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___ModifyContactAttributeIntentResponse_code] = 0;
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithPropertiesByName_, v3, v4, v5, v6, v7, v8, v11);

  if (v9) {
  return v9;
  }
}

id ModifyContactAttributeIntentResponse.__deallocating_deinit()
{
  return ModifyContactAttributeIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeIntentResponse);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeModifyNickNameUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  return ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult);
}

uint64_t type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult()
{
  return self;
}

id ModifyContactAttributeModifyNickNameResolutionResult.__deallocating_deinit()
{
  return ModifyContactAttributeIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult);
}

id ModifyContactAttributeModifyRelationshipResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  return ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult);
}

uint64_t type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult()
{
  return self;
}

id ModifyContactAttributeModifyRelationshipResolutionResult.__deallocating_deinit()
{
  return ModifyContactAttributeIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult);
}

uint64_t ModifyContactAttributeRelatedSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 4) < 0xFFFFFFFFFFFFFFFDLL) {
    return 0;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ModifyContactAttributeRelatedSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id ModifyContactAttributeRelatedSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  return ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
}

id ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = swift_bridgeObjectRelease();
  v11.receiver = v3;
  v11.super_class = (Class)a3(v7);
  id v8 = objc_msgSendSuper2(&v11, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v9 = v8;
  if (v9) {

  }
  return v9;
}

uint64_t type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult()
{
  return self;
}

id ModifyContactAttributeRelatedSiriMatchesResolutionResult.__deallocating_deinit()
{
  return ModifyContactAttributeIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
}

id ModifyContactAttributeIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason);
  }
  return result;
}

char *keypath_get_selector_contactAttributeToModify()
{
  return sel_contactAttributeToModify;
}

id sub_22D5942D4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contactAttributeToModify);
  *a2 = result;
  return result;
}

id sub_22D594308(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeToModify_, *a1);
}

char *keypath_get_selector_modifyOperation()
{
  return sel_modifyOperation;
}

id sub_22D594328@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_modifyOperation);
  *a2 = result;
  return result;
}

id sub_22D59435C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setModifyOperation_, *a1);
}

char *keypath_get_selector_modifyNickName()
{
  return sel_modifyNickName;
}

void sub_22D59437C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59439C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_modifyRelationship()
{
  return sel_modifyRelationship;
}

void sub_22D5943C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5943E8(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_relatedSiriMatches()
{
  return sel_relatedSiriMatches;
}

char *keypath_get_selector_relatedContact()
{
  return sel_relatedContact;
}

id sub_22D59442C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRelatedContact_, *a1);
}

char *keypath_get_selector_updatedRelationship()
{
  return sel_updatedRelationship;
}

id sub_22D594450(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUpdatedRelationship_, *a1);
}

uint64_t sub_22D594464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ModifyContactAttributeIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22D594490(uint64_t *a1)
{
  return ModifyContactAttributeIntentResponse.code.setter(*a1);
}

void type metadata accessor for ModifyContactAttributeIntentResponseCode()
{
}

uint64_t method lookup function for ModifyContactAttributeIntentResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyContactAttributeIntentResponse);
}

uint64_t dispatch thunk of ModifyContactAttributeIntentResponse.code.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

void type metadata accessor for ModifyContactAttributeModifyNickNameUnsupportedReason()
{
}

uint64_t method lookup function for ModifyContactAttributeModifyNickNameResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyContactAttributeModifyNickNameResolutionResult);
}

uint64_t dispatch thunk of static ModifyContactAttributeModifyNickNameResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void type metadata accessor for ModifyContactAttributeModifyRelationshipUnsupportedReason()
{
}

uint64_t method lookup function for ModifyContactAttributeModifyRelationshipResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyContactAttributeModifyRelationshipResolutionResult);
}

uint64_t dispatch thunk of static ModifyContactAttributeModifyRelationshipResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void type metadata accessor for ModifyContactAttributeRelatedSiriMatchesUnsupportedReason()
{
}

uint64_t method lookup function for ModifyContactAttributeRelatedSiriMatchesResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
}

uint64_t dispatch thunk of static ModifyContactAttributeRelatedSiriMatchesResolutionResult.unsupported(forReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

id LearnPronunciationIntent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id LearnPronunciationIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for LearnPronunciationIntent()
{
  return self;
}

id LearnPronunciationIntent.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id LearnPronunciationIntent.init(coder:)(void *a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id LearnPronunciationIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  return v7;
}

id LearnPronunciationIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithIdentifier_backingStore_, v5, a3);

  return v6;
}

id LearnPronunciationIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone(v0), sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id LearnPronunciationIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_2_42();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = (void *)MEMORY[0x230F84F70](v1, v3);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithDomain_verb_parametersByName_, v5, v6, v7.super.isa);

  return v8;
}

id LearnPronunciationIntent.__deallocating_deinit()
{
  return LearnPronunciationIntent.__deallocating_deinit(type metadata accessor for LearnPronunciationIntent);
}

unint64_t LearnPronunciationIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LearnPronunciationIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = LearnPronunciationIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t LearnPronunciationIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___LearnPronunciationIntentResponse_code;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t LearnPronunciationIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___LearnPronunciationIntentResponse_code);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

char *LearnPronunciationIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return LearnPronunciationIntentResponse.init(code:userActivity:)(a1, a2);
}

char *LearnPronunciationIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = (char *)objc_msgSend(v2, sel_init);
  id v6 = &v5[OBJC_IVAR___LearnPronunciationIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  NSDictionary v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

id LearnPronunciationIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___LearnPronunciationIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LearnPronunciationIntentResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for LearnPronunciationIntentResponse()
{
  return self;
}

id LearnPronunciationIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___LearnPronunciationIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for LearnPronunciationIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithCoder_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id LearnPronunciationIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v3;
}

id LearnPronunciationIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___LearnPronunciationIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for LearnPronunciationIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithBackingStore_, v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id LearnPronunciationIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithPropertiesByName_, v2.super.isa);

  return v3;
}

id LearnPronunciationIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___LearnPronunciationIntentResponse_code] = 0;
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for LearnPronunciationIntentResponse();
  id v9 = OUTLINED_FUNCTION_0_35((uint64_t)v11.super_class, sel_initWithPropertiesByName_, v3, v4, v5, v6, v7, v8, v11);

  if (v9) {
  return v9;
  }
}

id LearnPronunciationIntentResponse.__deallocating_deinit()
{
  return LearnPronunciationIntent.__deallocating_deinit(type metadata accessor for LearnPronunciationIntentResponse);
}

id LearnPronunciationIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode()
{
  unint64_t result = lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode);
  }
  return result;
}

uint64_t sub_22D595104@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LearnPronunciationIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22D595130(uint64_t *a1)
{
  return LearnPronunciationIntentResponse.code.setter(*a1);
}

ValueMetadata *type metadata accessor for LearnPronunciationIntentResponseCode()
{
  return &type metadata for LearnPronunciationIntentResponseCode;
}

uint64_t method lookup function for LearnPronunciationIntentResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LearnPronunciationIntentResponse);
}

uint64_t dispatch thunk of LearnPronunciationIntentResponse.code.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

unint64_t ContactAttributeType.init(rawValue:)(unint64_t result)
{
  if (result > 0xB) {
    return 0;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ContactAttributeType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ContactAttributeType.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id static ContactAttributeTypeResolutionResult.success(with:)(uint64_t a1)
{
  return static ContactAttributeTypeResolutionResult.success(with:)(a1, (SEL *)&selRef_successWithResolvedValue_);
}

id static ContactAttributeTypeResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  return static ContactAttributeTypeResolutionResult.success(with:)(a1, (SEL *)&selRef_confirmationRequiredWithValueToConfirm_);
}

id static ContactAttributeTypeResolutionResult.success(with:)(uint64_t a1, SEL *a2)
{
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *a2, a1);
  return v2;
}

id ContactAttributeTypeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id ContactAttributeTypeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactAttributeTypeResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for ContactAttributeTypeResolutionResult()
{
  return self;
}

id ContactAttributeTypeResolutionResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContactAttributeTypeResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ContactAttributeType and conformance ContactAttributeType()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType;
  if (!lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactAttributeType()
{
  return &type metadata for ContactAttributeType;
}

uint64_t method lookup function for ContactAttributeTypeResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactAttributeTypeResolutionResult);
}

uint64_t dispatch thunk of static ContactAttributeTypeResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactAttributeTypeResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t ModifyOperation.init(rawValue:)(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyOperation@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ModifyOperation.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id ModifyOperationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id ModifyOperationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ModifyOperationResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for ModifyOperationResolutionResult()
{
  return self;
}

id ModifyOperationResolutionResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyOperationResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ModifyOperation and conformance ModifyOperation()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation;
  if (!lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation);
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyOperation()
{
  return &type metadata for ModifyOperation;
}

uint64_t method lookup function for ModifyOperationResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyOperationResolutionResult);
}

uint64_t dispatch thunk of static ModifyOperationResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ModifyOperationResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  void (*v0)(unsigned char *, uint64_t);
  uint64_t v1;
  unsigned char v3[72];

  OUTLINED_FUNCTION_6_37();
  v0(v3, v1);
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  void (*v0)(uint64_t);
  uint64_t v1;

  OUTLINED_FUNCTION_6_37();
  v0(v1);
  OUTLINED_FUNCTION_1_44();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))GetContactAttributeSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))UsoIdentifierNamespace.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, ContactNLv3Constants.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))GetContactSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  OUTLINED_FUNCTION_5_41();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  OUTLINED_FUNCTION_5_41();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_43();
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_43();
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_43();
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_43();
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_2_43();
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  void (*v0)(unsigned char *, uint64_t);
  uint64_t v1;
  unsigned char v3[72];

  OUTLINED_FUNCTION_4_40();
  v0(v3, v1);
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  void (*v0)(uint64_t);
  uint64_t v1;

  uint64_t v1 = OUTLINED_FUNCTION_4_40();
  v0(v1);
  OUTLINED_FUNCTION_1_44();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  void (*v0)(uint64_t);
  uint64_t v1;

  OUTLINED_FUNCTION_4_40();
  v0(v1);
  OUTLINED_FUNCTION_1_44();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

unint64_t Qualifier.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Qualifier()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Qualifier(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Qualifier@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = Qualifier.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id QualifierResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id QualifierResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for QualifierResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for QualifierResolutionResult()
{
  return self;
}

id QualifierResolutionResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QualifierResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type Qualifier and conformance Qualifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Qualifier and conformance Qualifier;
  if (!lazy protocol witness table cache variable for type Qualifier and conformance Qualifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Qualifier and conformance Qualifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for Qualifier()
{
  return &type metadata for Qualifier;
}

uint64_t method lookup function for QualifierResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QualifierResolutionResult);
}

uint64_t dispatch thunk of static QualifierResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static QualifierResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void OUTLINED_FUNCTION_0_36(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t OUTLINED_FUNCTION_1_44()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_4_40()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_5_41()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_6_37()
{
  return Hasher.init(_seed:)();
}

id static ContactAttributeResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static ContactAttributeResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

unint64_t type metadata accessor for INObject()
{
  unint64_t result = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INObject);
  }
  return result;
}

id static ContactAttributeResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

id key path getter for ContactAttribute.ageDateTime : ContactAttribute@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_ageDateTime);
  *a2 = result;
  return result;
}

id key path getter for ContactAttribute.postalAddress : ContactAttribute@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_postalAddress);
  *a2 = result;
  return result;
}

id ContactAttribute.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id ContactAttribute.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for ContactAttribute();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for ContactAttribute()
{
  return self;
}

id ContactAttribute.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ContactAttribute.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ContactAttribute();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ContactAttribute.__deallocating_deinit()
{
  return ContactAttribute.__deallocating_deinit(type metadata accessor for ContactAttribute);
}

void static ContactAttributeResolutionResult.success(with:)()
{
}

void static ContactAttributeResolutionResult.disambiguation(with:)()
{
}

void static ContactAttributeResolutionResult.confirmationRequired(with:)()
{
}

id ContactAttributeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id ContactAttributeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactAttributeResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for ContactAttributeResolutionResult()
{
  return self;
}

id ContactAttributeResolutionResult.__deallocating_deinit()
{
  return ContactAttribute.__deallocating_deinit(type metadata accessor for ContactAttributeResolutionResult);
}

id ContactAttribute.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *keypath_get_selector_contactAttributeType()
{
  return sel_contactAttributeType;
}

id sub_22D5974AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contactAttributeType);
  *a2 = result;
  return result;
}

id sub_22D5974E0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeType_, *a1);
}

char *keypath_get_selector_handleLabel()
{
  return sel_handleLabel;
}

void sub_22D597500(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D597520(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_handleValue()
{
  return sel_handleValue;
}

void sub_22D59754C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59756C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_ageDateTime()
{
  return sel_ageDateTime;
}

id sub_22D59759C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAgeDateTime_, *a1);
}

char *keypath_get_selector_postalAddress()
{
  return sel_postalAddress;
}

id sub_22D5975C0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPostalAddress_, *a1);
}

uint64_t method lookup function for ContactAttributeResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactAttributeResolutionResult);
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

id PostalAddress.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id PostalAddress.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for PostalAddress();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for PostalAddress()
{
  return self;
}

id PostalAddress.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id PostalAddress.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PostalAddress();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id PostalAddress.__deallocating_deinit()
{
  return PostalAddress.__deallocating_deinit(type metadata accessor for PostalAddress);
}

id static PostalAddressResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static PostalAddressResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

id static PostalAddressResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

void static PostalAddressResolutionResult.success(with:)()
{
}

void static PostalAddressResolutionResult.disambiguation(with:)()
{
}

void static PostalAddressResolutionResult.confirmationRequired(with:)()
{
}

id PostalAddressResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id PostalAddressResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for PostalAddressResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for PostalAddressResolutionResult()
{
  return self;
}

id PostalAddressResolutionResult.__deallocating_deinit()
{
  return PostalAddress.__deallocating_deinit(type metadata accessor for PostalAddressResolutionResult);
}

id PostalAddress.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *keypath_get_selector_street()
{
  return sel_street;
}

void sub_22D597F30(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D597F50(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_subLocality()
{
  return sel_subLocality;
}

void sub_22D597F7C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D597F9C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_city()
{
  return sel_city;
}

void sub_22D597FC8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D597FE8(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_subAdministrativeArea()
{
  return sel_subAdministrativeArea;
}

void sub_22D598014(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D598034(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_state()
{
  return sel_state;
}

void sub_22D598060(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D598080(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_postalCode()
{
  return sel_postalCode;
}

void sub_22D5980AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5980CC(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_country()
{
  return sel_country;
}

void sub_22D5980F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D598118(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_isoCountryCode()
{
  return sel_isoCountryCode;
}

void sub_22D598144(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D598164(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D598184(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5981A4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t method lookup function for PostalAddressResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PostalAddressResolutionResult);
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

id static SiriMatchResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static SiriMatchResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

id static SiriMatchResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

void key path getter for SiriMatch.fullName : SiriMatch(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_fullName);
  if (v3)
  {
    objc_super v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path setter for SiriMatch.fullName : SiriMatch(void *a1, void **a2)
{
  id v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = MEMORY[0x230F84F70](*a1);
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setFullName_);
}

id SiriMatch.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id SiriMatch.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for SiriMatch();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for SiriMatch()
{
  return self;
}

id SiriMatch.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id SiriMatch.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SiriMatch();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id SiriMatch.__deallocating_deinit()
{
  return SiriMatch.__deallocating_deinit(type metadata accessor for SiriMatch);
}

void static SiriMatchResolutionResult.success(with:)()
{
}

void static SiriMatchResolutionResult.disambiguation(with:)()
{
}

void static SiriMatchResolutionResult.confirmationRequired(with:)()
{
}

id SiriMatchResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id SiriMatchResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for SiriMatchResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for SiriMatchResolutionResult()
{
  return self;
}

id SiriMatchResolutionResult.__deallocating_deinit()
{
  return SiriMatch.__deallocating_deinit(type metadata accessor for SiriMatchResolutionResult);
}

id SiriMatch.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t method lookup function for SiriMatchResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriMatchResolutionResult);
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

id Contact.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id Contact.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for Contact();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for Contact()
{
  return self;
}

{
  return MEMORY[0x270F65BE0]();
}

id Contact.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id Contact.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for Contact();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id Contact.__deallocating_deinit()
{
  return Contact.__deallocating_deinit(type metadata accessor for Contact);
}

id static ContactResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static ContactResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

id static ContactResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

void static ContactResolutionResult.success(with:)()
{
}

void static ContactResolutionResult.disambiguation(with:)()
{
}

void static ContactResolutionResult.confirmationRequired(with:)()
{
}

id ContactResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id ContactResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for ContactResolutionResult()
{
  return self;
}

id ContactResolutionResult.__deallocating_deinit()
{
  return Contact.__deallocating_deinit(type metadata accessor for ContactResolutionResult);
}

id Contact.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *keypath_get_selector_givenName()
{
  return sel_givenName;
}

void sub_22D599528(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D599548(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D599568(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D599588(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D5995A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5995C8(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_familyName()
{
  return sel_familyName;
}

void sub_22D5995F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D599614(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_namePrefix()
{
  return sel_namePrefix;
}

void sub_22D599640(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D599660(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_nameSuffix()
{
  return sel_nameSuffix;
}

void sub_22D59968C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5996AC(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D5996CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D5996EC(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D59970C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59972C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_22D59974C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59976C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t method lookup function for ContactResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactResolutionResult);
}

uint64_t dispatch thunk of static ContactResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

id ContactRelation.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id ContactRelation.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for ContactRelation();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for ContactRelation()
{
  return self;
}

id ContactRelation.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ContactRelation.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ContactRelation();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ContactRelation.__deallocating_deinit()
{
  return ContactRelation.__deallocating_deinit(type metadata accessor for ContactRelation);
}

id static ContactRelationResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static ContactRelationResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

id static ContactRelationResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

void static ContactRelationResolutionResult.success(with:)()
{
}

void static ContactRelationResolutionResult.disambiguation(with:)()
{
}

void static ContactRelationResolutionResult.confirmationRequired(with:)()
{
}

id ContactRelationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id ContactRelationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactRelationResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for ContactRelationResolutionResult()
{
  return self;
}

id ContactRelationResolutionResult.__deallocating_deinit()
{
  return ContactRelation.__deallocating_deinit(type metadata accessor for ContactRelationResolutionResult);
}

id ContactRelation.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *keypath_get_selector_relatedFullName()
{
  return sel_relatedFullName;
}

void sub_22D59A0D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59A0F4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_relationship()
{
  return sel_relationship;
}

void sub_22D59A120(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D59A140(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t method lookup function for ContactRelationResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactRelationResolutionResult);
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t key path getter for AgeDateTime.dateComponents : AgeDateTime@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_dateComponents);
  if (v3)
  {
    id v4 = v3;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for DateComponents();
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

void key path setter for AgeDateTime.dateComponents : AgeDateTime(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DateComponents?(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for DateComponents();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v8) != 1)
  {
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  objc_msgSend(v7, sel_setDateComponents_, isa);
}

id AgeDateTime.__allocating_init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(v0), sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

id AgeDateTime.init(identifier:display:pronunciationHint:)()
{
  OUTLINED_FUNCTION_0_37();
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v1, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v8 = (void *)MEMORY[0x230F84F70](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for AgeDateTime();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_displayString_pronunciationHint_, v6, v7, v8);

  return v9;
}

uint64_t type metadata accessor for AgeDateTime()
{
  return self;
}

id AgeDateTime.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id AgeDateTime.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AgeDateTime();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id AgeDateTime.__deallocating_deinit()
{
  return AgeDateTime.__deallocating_deinit(type metadata accessor for AgeDateTime);
}

id static AgeDateTimeResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
  return v2;
}

id static AgeDateTimeResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    type metadata accessor for INObject();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for INObject();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for INObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  id v3 = objc_msgSendSuper2(&v5, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v3;
}

id static AgeDateTimeResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  id v2 = objc_msgSendSuper2(&v4, sel_confirmationRequiredWithObjectToConfirm_, a1);
  return v2;
}

void static AgeDateTimeResolutionResult.success(with:)()
{
}

void static AgeDateTimeResolutionResult.disambiguation(with:)()
{
}

void static AgeDateTimeResolutionResult.confirmationRequired(with:)()
{
}

id AgeDateTimeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, isa, a2);

  return v6;
}

id AgeDateTimeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for AgeDateTimeResolutionResult();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for AgeDateTimeResolutionResult()
{
  return self;
}

id AgeDateTimeResolutionResult.__deallocating_deinit()
{
  return AgeDateTime.__deallocating_deinit(type metadata accessor for AgeDateTimeResolutionResult);
}

id AgeDateTime.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *keypath_get_selector_dateComponents()
{
  return sel_dateComponents;
}

char *keypath_get_selector_qualifier()
{
  return sel_qualifier;
}

id sub_22D59AC3C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_qualifier);
  *a2 = result;
  return result;
}

id sub_22D59AC70(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setQualifier_, *a1);
}

uint64_t method lookup function for AgeDateTimeResolutionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AgeDateTimeResolutionResult);
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.success(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.disambiguation(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.confirmationRequired(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t outlined init with copy of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x270EEE0C0]();
}

uint64_t static CharacterSet.decimalDigits.getter()
{
  return MEMORY[0x270EEE0D0]();
}

uint64_t static CharacterSet.urlPathAllowed.getter()
{
  return MEMORY[0x270EEE0F0]();
}

uint64_t CharacterSet.inverted.getter()
{
  return MEMORY[0x270EEE208]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x270EEE3F0]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x270EEE408]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x270EEE410]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x270EEE4B0]();
}

uint64_t URLComponents.init(string:)()
{
  return MEMORY[0x270EEE5C0]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x270EEE610]();
}

uint64_t DateComponents.yearForWeekOfYear.setter()
{
  return MEMORY[0x270EEE730]();
}

uint64_t static DateComponents.startOfToday.getter()
{
  return MEMORY[0x270F644C0]();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  return (NSDateComponents)MEMORY[0x270EEE738]();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE760]();
}

uint64_t DateComponents.day.getter()
{
  return MEMORY[0x270EEE768]();
}

uint64_t DateComponents.day.setter()
{
  return MEMORY[0x270EEE780]();
}

uint64_t DateComponents.date.getter()
{
  return MEMORY[0x270EEE7B0]();
}

uint64_t DateComponents.year.getter()
{
  return MEMORY[0x270EEE7D8]();
}

uint64_t DateComponents.year.setter()
{
  return MEMORY[0x270EEE7F0]();
}

uint64_t DateComponents.month.getter()
{
  return MEMORY[0x270EEE800]();
}

uint64_t DateComponents.month.setter()
{
  return MEMORY[0x270EEE810]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x270EEE890]();
}

uint64_t DateComponents.timeZone.setter()
{
  return MEMORY[0x270EEE8D8]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x270EEF320]();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return MEMORY[0x270EEF330]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x270EEF340]();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return MEMORY[0x270EEF358]();
}

uint64_t PersonNameComponents.middleName.setter()
{
  return MEMORY[0x270EEF378]();
}

uint64_t PersonNameComponents.namePrefix.setter()
{
  return MEMORY[0x270EEF3A8]();
}

uint64_t PersonNameComponents.nameSuffix.setter()
{
  return MEMORY[0x270EEF3C0]();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)MEMORY[0x270EEF3F0]();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t PersonNameComponents.nickname.getter()
{
  return MEMORY[0x270EEF420]();
}

uint64_t PersonNameComponents.init()()
{
  return MEMORY[0x270EEF450]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x270EEF460]();
}

uint64_t PersonNameComponents.init(_:)()
{
  return MEMORY[0x270EEF470]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t FloatingPointFormatStyle.init(locale:)()
{
  return MEMORY[0x270EEF950]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t static Date.startOfToday.getter()
{
  return MEMORY[0x270F644C8]();
}

uint64_t static Date.startOfTodayGMT.getter()
{
  return MEMORY[0x270F644D0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x270EF09A8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x270EF0AF8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x270EF0D78]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x270EF0D80]();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return MEMORY[0x270EF0DB8]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x270EF0DD8]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x270EF0EE0]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t Locale.Language.languageCode.getter()
{
  return MEMORY[0x270EF1008]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x270EF1060]();
}

uint64_t Locale.language.getter()
{
  return MEMORY[0x270EF1080]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t Calendar.dateComponents(in:from:)()
{
  return MEMORY[0x270EF1220]();
}

uint64_t static Calendar.gregorianCurrent.getter()
{
  return MEMORY[0x270F644D8]();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF12E0]();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return MEMORY[0x270EF1388]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t Calendar.timeZone.getter()
{
  return MEMORY[0x270EF1400]();
}

uint64_t static Calendar.Component.== infix(_:_:)()
{
  return MEMORY[0x270EF1418]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x270EF1428]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x270EF1440]();
}

uint64_t static TimeZone.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF15D0]();
}

uint64_t static TimeZone.current.getter()
{
  return MEMORY[0x270EF1600]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x270EF1608]();
}

uint64_t static CommonGuardFlowUtils.makeGuardFlow(withGuards:)()
{
  return MEMORY[0x270F66328]();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return MEMORY[0x270F663D8]();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return MEMORY[0x270F663E0]();
}

uint64_t ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)()
{
  return MEMORY[0x270F664C8]();
}

uint64_t type metadata accessor for ExecuteOnRemoteFlow()
{
  return MEMORY[0x270F664D0]();
}

uint64_t type metadata accessor for ExecuteOnRemoteFlowResult()
{
  return MEMORY[0x270F664D8]();
}

uint64_t UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)()
{
  return MEMORY[0x270F665D0]();
}

uint64_t UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)()
{
  return MEMORY[0x270F665D8]();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration()
{
  return MEMORY[0x270F665E0]();
}

uint64_t UserIdentityCheckFlowStrategy.requireSpeechProfile.setter()
{
  return MEMORY[0x270F665E8]();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy()
{
  return MEMORY[0x270F665F0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)()
{
  return MEMORY[0x270F66618]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)()
{
  return MEMORY[0x270F66640]();
}

uint64_t static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)()
{
  return MEMORY[0x270F667A0]();
}

uint64_t type metadata accessor for CompanionCompatibilityCheckFlowStrategy()
{
  return MEMORY[0x270F667A8]();
}

uint64_t type metadata accessor for GuardFlow()
{
  return MEMORY[0x270F668B8]();
}

uint64_t GuardFlowResult.description.getter()
{
  return MEMORY[0x270F668C0]();
}

uint64_t static GuardFlowResult.== infix(_:_:)()
{
  return MEMORY[0x270F668C8]();
}

uint64_t static CommonFlowGuard.ensuringUserIdentity(using:)()
{
  return MEMORY[0x270F66978]();
}

uint64_t static CommonFlowGuard.disallowInSharingMode.getter()
{
  return MEMORY[0x270F66980]();
}

uint64_t static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter()
{
  return MEMORY[0x270F66998]();
}

uint64_t static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)()
{
  return MEMORY[0x270F669A0]();
}

uint64_t static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter()
{
  return MEMORY[0x270F669A8]();
}

uint64_t type metadata accessor for CommonFlowGuard()
{
  return MEMORY[0x270F669B0]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)()
{
  return MEMORY[0x270F66A68]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)()
{
  return MEMORY[0x270F66A78]();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)()
{
  return MEMORY[0x270F66A88]();
}

uint64_t static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)()
{
  return MEMORY[0x270F66A98]();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)()
{
  return MEMORY[0x270F66AB8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)()
{
  return MEMORY[0x270F66AE0]();
}

uint64_t static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)()
{
  return MEMORY[0x270F66AF8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)()
{
  return MEMORY[0x270F66B10]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)()
{
  return MEMORY[0x270F66B20]();
}

uint64_t RCHChildFlowProducersAsync.needsValueFlowProducer.setter()
{
  return MEMORY[0x270F66B40]();
}

uint64_t RCHChildFlowProducersAsync.handleIntentFlowProducer.setter()
{
  return MEMORY[0x270F66B48]();
}

uint64_t RCHChildFlowProducersAsync.appResolutionFlowProducer.setter()
{
  return MEMORY[0x270F66B50]();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter()
{
  return MEMORY[0x270F66B58]();
}

uint64_t RCHChildFlowProducersAsync.continueInAppFlowProducer.setter()
{
  return MEMORY[0x270F66B60]();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter()
{
  return MEMORY[0x270F66B68]();
}

uint64_t RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter()
{
  return MEMORY[0x270F66B78]();
}

uint64_t RCHChildFlowProducersAsync.init()()
{
  return MEMORY[0x270F66B90]();
}

uint64_t RCHChildFlowFactory.init(producers:)()
{
  return MEMORY[0x270F66BA0]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x270F66CA8]();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return MEMORY[0x270F66CC0]();
}

uint64_t Flow.guarded<A>(by:)()
{
  return MEMORY[0x270F66CD8]();
}

uint64_t type metadata accessor for FlowUnhandledReason()
{
  return MEMORY[0x270F66D60]();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return MEMORY[0x270F66DA0]();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return MEMORY[0x270F66DB8]();
}

uint64_t SiriKitIntentHandler.init<A>(app:intentHandler:intent:)()
{
  return MEMORY[0x270F66DC8]();
}

uint64_t type metadata accessor for SiriKitIntentHandler()
{
  return MEMORY[0x270F66DD0]();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.build()()
{
  return MEMORY[0x270F66E00]();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)()
{
  return MEMORY[0x270F66E08]();
}

uint64_t SiriKitAceViewBuilder.__allocating_init()()
{
  return MEMORY[0x270F66E18]();
}

uint64_t type metadata accessor for SiriKitAceViewBuilder()
{
  return MEMORY[0x270F66E20]();
}

uint64_t static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)()
{
  return MEMORY[0x270F66F18]();
}

uint64_t static SiriKitIntentExecutionBehavior.standard()()
{
  return MEMORY[0x270F66F20]();
}

uint64_t type metadata accessor for SiriKitIntentExecutionBehavior()
{
  return MEMORY[0x270F66F28]();
}

uint64_t static SiriKitEvent.uufrReady()()
{
  return MEMORY[0x270F67060]();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return MEMORY[0x270F67068]();
}

uint64_t static AceService.currentAsync.getter()
{
  return MEMORY[0x270F670A0]();
}

uint64_t dispatch thunk of DeviceState.isEyesFree.getter()
{
  return MEMORY[0x270F67190]();
}

uint64_t dispatch thunk of DeviceState.isXRDevice.getter()
{
  return MEMORY[0x270F671A0]();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return MEMORY[0x270F671A8]();
}

uint64_t dispatch thunk of DeviceState.inputOrigin.getter()
{
  return MEMORY[0x270F671B0]();
}

uint64_t dispatch thunk of DeviceState.isCarDNDMode.getter()
{
  return MEMORY[0x270F671B8]();
}

uint64_t dispatch thunk of DeviceState.interactionType.getter()
{
  return MEMORY[0x270F671D0]();
}

uint64_t dispatch thunk of DeviceState.isAuthenticated(for:)()
{
  return MEMORY[0x270F671D8]();
}

uint64_t dispatch thunk of DeviceState.isLockedWithPasscode.getter()
{
  return MEMORY[0x270F671E0]();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x270F671E8]();
}

uint64_t dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x270F671F0]();
}

uint64_t dispatch thunk of DeviceState.isMac.getter()
{
  return MEMORY[0x270F67208]();
}

uint64_t dispatch thunk of DeviceState.isPad.getter()
{
  return MEMORY[0x270F67210]();
}

uint64_t dispatch thunk of DeviceState.isPod.getter()
{
  return MEMORY[0x270F67218]();
}

uint64_t dispatch thunk of DeviceState.isPhone.getter()
{
  return MEMORY[0x270F67220]();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return MEMORY[0x270F67228]();
}

uint64_t dispatch thunk of DeviceState.isAppleTV.getter()
{
  return MEMORY[0x270F67230]();
}

uint64_t dispatch thunk of DeviceState.isCarPlay.getter()
{
  return MEMORY[0x270F67238]();
}

uint64_t dispatch thunk of DeviceState.isHomePod.getter()
{
  return MEMORY[0x270F67240]();
}

uint64_t DeviceState.userAssignedDeviceName.getter()
{
  return MEMORY[0x270F67248]();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return MEMORY[0x270F672B0]();
}

uint64_t DeviceState.isVox.getter()
{
  return MEMORY[0x270F672D8]();
}

uint64_t static DialogPhase.completion.getter()
{
  return MEMORY[0x270F672E8]();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return MEMORY[0x270F672F8]();
}

uint64_t static DialogPhase.clarification.getter()
{
  return MEMORY[0x270F67300]();
}

uint64_t static DialogPhase.canceled.getter()
{
  return MEMORY[0x270F67330]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x270F67340]();
}

uint64_t DisplayHint.displayValue.getter()
{
  return MEMORY[0x270F67348]();
}

uint64_t DisplayHint.init(idValue:displayValue:)()
{
  return MEMORY[0x270F67350]();
}

uint64_t DisplayHint.idValue.getter()
{
  return MEMORY[0x270F67358]();
}

uint64_t type metadata accessor for DisplayHint()
{
  return MEMORY[0x270F67360]();
}

uint64_t static EmptyOutput.instance.getter()
{
  return MEMORY[0x270F67368]();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return MEMORY[0x270F67370]();
}

uint64_t type metadata accessor for ResponseType()
{
  return MEMORY[0x270F67430]();
}

uint64_t static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)()
{
  return MEMORY[0x270F67488]();
}

uint64_t SemanticValue.label.getter()
{
  return MEMORY[0x270F674B0]();
}

uint64_t SemanticValue.init(string:label:)()
{
  return MEMORY[0x270F674C8]();
}

uint64_t SemanticValue.string.getter()
{
  return MEMORY[0x270F674D0]();
}

uint64_t type metadata accessor for SemanticValue()
{
  return MEMORY[0x270F674F8]();
}

uint64_t static ActionForInput.cancel()()
{
  return MEMORY[0x270F67500]();
}

uint64_t static ActionForInput.handle()()
{
  return MEMORY[0x270F67508]();
}

uint64_t static ActionForInput.ignore()()
{
  return MEMORY[0x270F67510]();
}

uint64_t TemplatingText.init(text:speakableTextOverride:)()
{
  return MEMORY[0x270F67648]();
}

uint64_t TemplatingText.text.getter()
{
  return MEMORY[0x270F67650]();
}

uint64_t type metadata accessor for TemplatingText()
{
  return MEMORY[0x270F67658]();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x270F67678]();
}

uint64_t static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x270F67688]();
}

uint64_t static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x270F67690]();
}

uint64_t static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x270F676C0]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return MEMORY[0x270F676E0]();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return MEMORY[0x270F67720]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x270F67730]();
}

uint64_t static ExecuteResponse.unhandled(reason:)()
{
  return MEMORY[0x270F67748]();
}

uint64_t NLContextUpdate.rrEntities.setter()
{
  return MEMORY[0x270F67770]();
}

uint64_t NLContextUpdate.displayHints.setter()
{
  return MEMORY[0x270F67778]();
}

uint64_t NLContextUpdate.currentDomainName.setter()
{
  return MEMORY[0x270F67788]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x270F67798]();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return MEMORY[0x270F677B0]();
}

uint64_t NLContextUpdate.applicationContextObjects.setter()
{
  return MEMORY[0x270F677B8]();
}

uint64_t NLContextUpdate.dictationPromptAbortValues.setter()
{
  return MEMORY[0x270F677C8]();
}

uint64_t NLContextUpdate.dictationPromptTargetNodes.setter()
{
  return MEMORY[0x270F677D0]();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return MEMORY[0x270F677D8]();
}

uint64_t NLContextUpdate.dictationPromptTargetDomain.setter()
{
  return MEMORY[0x270F677E0]();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return MEMORY[0x270F677F0]();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return MEMORY[0x270F67800]();
}

uint64_t NLContextUpdate.nlInput.setter()
{
  return MEMORY[0x270F67818]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x270F67820]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x270F67828]();
}

uint64_t static PaginationStyle.noPagination()()
{
  return MEMORY[0x270F67838]();
}

uint64_t type metadata accessor for PaginationStyle()
{
  return MEMORY[0x270F67840]();
}

uint64_t ResponseFactory.init()()
{
  return MEMORY[0x270F67888]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x270F67890]();
}

uint64_t static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)()
{
  return MEMORY[0x270F678C8]();
}

uint64_t TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)()
{
  return MEMORY[0x270F678F0]();
}

uint64_t TemplatingResult.templateIdentifier.getter()
{
  return MEMORY[0x270F678F8]();
}

uint64_t TemplatingResult.behaviorAfterSpeaking.getter()
{
  return MEMORY[0x270F67900]();
}

uint64_t TemplatingResult.sections.getter()
{
  return MEMORY[0x270F67928]();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return MEMORY[0x270F67930]();
}

uint64_t RelationshipLabel.asUnboundedSemanticValue.getter()
{
  return MEMORY[0x270F679F0]();
}

uint64_t type metadata accessor for RelationshipLabel()
{
  return MEMORY[0x270F67A00]();
}

uint64_t TemplatingSection.init(id:content:caption:spokenOnly:)()
{
  return MEMORY[0x270F67A48]();
}

uint64_t TemplatingSection.content.getter()
{
  return MEMORY[0x270F67A58]();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return MEMORY[0x270F67A60]();
}

uint64_t IntentPromptAnswer.init(answeredValue:updatedIntent:)()
{
  return MEMORY[0x270F67A78]();
}

uint64_t type metadata accessor for IntentPromptAnswer()
{
  return MEMORY[0x270F67A80]();
}

uint64_t static UnlockDevicePolicy.requiringDeviceUnlock.getter()
{
  return MEMORY[0x270F67B00]();
}

uint64_t type metadata accessor for UnlockDevicePolicy()
{
  return MEMORY[0x270F67B18]();
}

uint64_t ConfirmIntentAnswer.init(confirmationResponse:intent:)()
{
  return MEMORY[0x270F67B68]();
}

uint64_t ParameterIdentifier.name.getter()
{
  return MEMORY[0x270F67B98]();
}

uint64_t type metadata accessor for ParameterIdentifier()
{
  return MEMORY[0x270F67BA0]();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return MEMORY[0x270F67BC0]();
}

uint64_t static DisambiguationResult.chosenItem(_:)()
{
  return MEMORY[0x270F67BE8]();
}

uint64_t RCHFlowStrategyAsync.makeParameterMetadata(intent:)()
{
  return MEMORY[0x270F67C20]();
}

uint64_t type metadata accessor for BehaviorAfterSpeaking()
{
  return MEMORY[0x270F67C60]();
}

uint64_t IntentResolutionRecord.intentResponse.getter()
{
  return MEMORY[0x270F67D28]();
}

uint64_t IntentResolutionRecord.intent.getter()
{
  return MEMORY[0x270F67D40]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x270F67D58]();
}

uint64_t PaginatedItemContainer.init(items:paginationStyle:)()
{
  return MEMORY[0x270F67D68]();
}

uint64_t PaginatedItemContainer.items.getter()
{
  return MEMORY[0x270F67D70]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)()
{
  return MEMORY[0x270F67DB8]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.build()()
{
  return MEMORY[0x270F67DC8]();
}

uint64_t MachineUtteranceBuilder.init()()
{
  return MEMORY[0x270F67DD8]();
}

uint64_t type metadata accessor for MachineUtteranceBuilder()
{
  return MEMORY[0x270F67DE0]();
}

uint64_t static UnsetRelationshipPerson.from(personNode:)()
{
  return MEMORY[0x270F67E08]();
}

uint64_t UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)()
{
  return MEMORY[0x270F67E10]();
}

uint64_t type metadata accessor for UnsetRelationshipPerson()
{
  return MEMORY[0x270F67E18]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x270F67E40]();
}

uint64_t OutputGenerationManifest.responseMode.setter()
{
  return MEMORY[0x270F67E58]();
}

uint64_t OutputGenerationManifest.responseType.setter()
{
  return MEMORY[0x270F67E68]();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return MEMORY[0x270F67E80]();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return MEMORY[0x270F67E90]();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return MEMORY[0x270F67EA0]();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return MEMORY[0x270F67ED0]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x270F67F18]();
}

uint64_t ParameterResolutionRecord.intent.getter()
{
  return MEMORY[0x270F67F68]();
}

uint64_t ParameterResolutionRecord.result.getter()
{
  return MEMORY[0x270F67F70]();
}

uint64_t ParameterResolutionRecord.parameter.getter()
{
  return MEMORY[0x270F67F78]();
}

uint64_t type metadata accessor for ParameterResolutionRecord()
{
  return MEMORY[0x270F67F80]();
}

uint64_t OrdinalDisplayHintsBuilder.init(referenceNode:)()
{
  return MEMORY[0x270F67FB8]();
}

uint64_t OrdinalDisplayHintsBuilder.build(for:)()
{
  return MEMORY[0x270F67FC0]();
}

uint64_t type metadata accessor for OrdinalDisplayHintsBuilder()
{
  return MEMORY[0x270F67FC8]();
}

uint64_t type metadata accessor for WindowedPaginationParameters()
{
  return MEMORY[0x270F680D0]();
}

uint64_t type metadata accessor for CompanionDeviceInfoRequirement()
{
  return MEMORY[0x270F68110]();
}

uint64_t BasicDisambiguationItemContainer.__allocating_init(_:_:)()
{
  return MEMORY[0x270F68158]();
}

uint64_t BasicDisambiguationItemContainer.init(_:_:)()
{
  return MEMORY[0x270F68160]();
}

uint64_t type metadata accessor for ExecuteOnRemoteDeviceSpecification()
{
  return MEMORY[0x270F681A0]();
}

uint64_t Input.description.getter()
{
  return MEMORY[0x270F68210]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x270F68220]();
}

uint64_t Input.init(parse:)()
{
  return MEMORY[0x270F68228]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x270F68230]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x270F68258]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x270F68260]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x270F68268]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x270F682A0]();
}

uint64_t static Device.current.getter()
{
  return MEMORY[0x270F682B8]();
}

uint64_t USOParse.debugDescription.getter()
{
  return MEMORY[0x270F68368]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x270F68378]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x270F68388]();
}

uint64_t AceOutput.init(commands:flowActivity:nlContextUpdate:)()
{
  return MEMORY[0x270F683A0]();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return MEMORY[0x270F683A8]();
}

uint64_t AceOutput.commands.getter()
{
  return MEMORY[0x270F683B0]();
}

uint64_t type metadata accessor for AceOutput()
{
  return MEMORY[0x270F683B8]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x270F28690]();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return MEMORY[0x270F6A350]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x270F6A370]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x270F6A498]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x270F6A4F8]();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return MEMORY[0x270F6A718]();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return MEMORY[0x270F6A720]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return MEMORY[0x270F6A728]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x270F6A758]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x270F6A768]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x270F6A770]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x270F6A788]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x270F6A7B0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return MEMORY[0x270F6A7B8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return MEMORY[0x270F6A7E8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x270F6A860]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x270F6A868]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return MEMORY[0x270F6AA98]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x270F6AAB0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x270F6AAC8]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return MEMORY[0x270F6AC20]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return MEMORY[0x270F6AC88]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return MEMORY[0x270F6ACA0]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return MEMORY[0x270F6ACB0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x270F6ACB8]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return MEMORY[0x270F6ADB0]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init()()
{
  return MEMORY[0x270F6ADB8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return MEMORY[0x270F6ADC0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return MEMORY[0x270F6AF78]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return MEMORY[0x270F6AF98]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return MEMORY[0x270F6AFB0]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return MEMORY[0x270F6AFC0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return MEMORY[0x270F6AFC8]();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return MEMORY[0x270F6BB18]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x270F6BB38]();
}

uint64_t NonTerminalOntologyNode.init(name:multicardinal:childNodes:)()
{
  return MEMORY[0x270F6BF88]();
}

uint64_t type metadata accessor for NonTerminalOntologyNode()
{
  return MEMORY[0x270F6BF98]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return MEMORY[0x270F6BFC0]();
}

uint64_t dispatch thunk of UsoEntity_commonContact_ContactAttribute.definedValue.getter()
{
  return MEMORY[0x270F6C038]();
}

uint64_t type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues()
{
  return MEMORY[0x270F6C040]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)()
{
  return MEMORY[0x270F6C048]();
}

uint64_t DomainOntologyNode.init(name:childNodes:isInEventTree:)()
{
  return MEMORY[0x270F6C108]();
}

uint64_t type metadata accessor for DomainOntologyNode()
{
  return MEMORY[0x270F6C110]();
}

uint64_t static PersonOntologyNode.personSelfReferenceNode.getter()
{
  return MEMORY[0x270F6C130]();
}

uint64_t PersonOntologyNode.PersonNamePrefix.rawValue.getter()
{
  return MEMORY[0x270F6C138]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePrefix()
{
  return MEMORY[0x270F6C140]();
}

uint64_t PersonOntologyNode.PersonNamePostfix.rawValue.getter()
{
  return MEMORY[0x270F6C148]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePostfix()
{
  return MEMORY[0x270F6C150]();
}

uint64_t PersonOntologyNode.init(name:multicardinal:)()
{
  return MEMORY[0x270F6C160]();
}

uint64_t type metadata accessor for PersonOntologyNode()
{
  return MEMORY[0x270F6C168]();
}

uint64_t TerminalOntologyNode.init(name:multicardinal:)()
{
  return MEMORY[0x270F6C190]();
}

uint64_t TerminalOntologyNode.name.getter()
{
  return MEMORY[0x270F6C198]();
}

uint64_t dispatch thunk of IntentNode.ontologyNodeName.getter()
{
  return MEMORY[0x270F6C808]();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return MEMORY[0x270F6C810]();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return MEMORY[0x270F6C830]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x270F6C848]();
}

uint64_t UsoIdentifier.appBundleSemantic.getter()
{
  return MEMORY[0x270F6C988]();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return MEMORY[0x270F6C9C0]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x270F6C9C8]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x270F6C9D0]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x270F6C9D8]();
}

uint64_t TerminalElement.DateTimeValue.startDate.getter()
{
  return MEMORY[0x270F6CAE8]();
}

uint64_t TerminalElement.DateTimeValue.interval.getter()
{
  return MEMORY[0x270F6CB20]();
}

uint64_t type metadata accessor for TerminalElement.DateTimeValue()
{
  return MEMORY[0x270F6CB28]();
}

uint64_t TerminalElement.OriginalValue.isFresh.getter()
{
  return MEMORY[0x270F6CB48]();
}

uint64_t type metadata accessor for TerminalElement.OriginalValue()
{
  return MEMORY[0x270F6CB50]();
}

uint64_t TerminalElement.originalValue.getter()
{
  return MEMORY[0x270F6CB70]();
}

uint64_t TerminalElement.DateTimePeriod.period.getter()
{
  return MEMORY[0x270F6CB78]();
}

uint64_t type metadata accessor for TerminalElement.DateTimePeriod()
{
  return MEMORY[0x270F6CB80]();
}

uint64_t TerminalElement.Date.dayOfMonth.getter()
{
  return MEMORY[0x270F6CBA0]();
}

uint64_t TerminalElement.Date.dayOfWeekOrdinalValue.getter()
{
  return MEMORY[0x270F6CBA8]();
}

uint64_t TerminalElement.Date.year.getter()
{
  return MEMORY[0x270F6CBB0]();
}

uint64_t TerminalElement.Date.month.getter()
{
  return MEMORY[0x270F6CBB8]();
}

uint64_t TerminalElement.Date.periods.getter()
{
  return MEMORY[0x270F6CBC0]();
}

uint64_t TerminalElement.Date.dayOfWeek.getter()
{
  return MEMORY[0x270F6CBC8]();
}

uint64_t type metadata accessor for TerminalElement.Date()
{
  return MEMORY[0x270F6CBD0]();
}

uint64_t type metadata accessor for TerminalElement.Period()
{
  return MEMORY[0x270F6CC28]();
}

uint64_t TerminalElement.Interval.period.getter()
{
  return MEMORY[0x270F6CC58]();
}

uint64_t TerminalElement.Interval.quantity.getter()
{
  return MEMORY[0x270F6CC60]();
}

uint64_t TerminalElement.Interval.qualifier.getter()
{
  return MEMORY[0x270F6CC68]();
}

uint64_t type metadata accessor for TerminalElement.Interval()
{
  return MEMORY[0x270F6CC70]();
}

uint64_t type metadata accessor for TerminalElement.DayOfWeek()
{
  return MEMORY[0x270F6CC78]();
}

uint64_t static TerminalElement.Qualifier.== infix(_:_:)()
{
  return MEMORY[0x270F6CC80]();
}

uint64_t type metadata accessor for TerminalElement.Qualifier()
{
  return MEMORY[0x270F6CC88]();
}

uint64_t type metadata accessor for TerminalElement()
{
  return MEMORY[0x270F6CC90]();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return MEMORY[0x270F6CCA0]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x270F6CCB0]();
}

uint64_t PersonIntentNode.init(intentNode:ontologyNode:)()
{
  return MEMORY[0x270F6CCB8]();
}

uint64_t type metadata accessor for PersonIntentNode()
{
  return MEMORY[0x270F6CCC8]();
}

uint64_t dispatch thunk of CodeGenExpression.operatorAsString.getter()
{
  return MEMORY[0x270F6CD18]();
}

uint64_t dispatch thunk of CodeGenExpression.operand.getter()
{
  return MEMORY[0x270F6CD20]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return MEMORY[0x270F6CD28]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return MEMORY[0x270F6CD30]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x270F6CD60]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x270F6CD70]();
}

uint64_t TerminalIntentNode.elements.getter()
{
  return MEMORY[0x270F6CD98]();
}

uint64_t type metadata accessor for TerminalIntentNode()
{
  return MEMORY[0x270F6CDA0]();
}

uint64_t IdentifierAppBundle.rawValue.getter()
{
  return MEMORY[0x270F6CE10]();
}

uint64_t type metadata accessor for IdentifierAppBundle()
{
  return MEMORY[0x270F6CE18]();
}

uint64_t dispatch thunk of UsoEntity_common_Age.referenceDateTime.getter()
{
  return MEMORY[0x270F6CE30]();
}

uint64_t IntentNodeTraversable.intentNode(forOntologyNode:)()
{
  return MEMORY[0x270F6CE98]();
}

uint64_t IntentNodeTraversable.intentNode<A>(forOntologyNode:)()
{
  return MEMORY[0x270F6CEA0]();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)()
{
  return MEMORY[0x270F6CEB8]();
}

uint64_t IntentNodeTraversable.values<A>(forNode:)()
{
  return MEMORY[0x270F6CEC0]();
}

uint64_t NonTerminalIntentNode.ontologyNodeName.getter()
{
  return MEMORY[0x270F6CED0]();
}

uint64_t NonTerminalIntentNode.childNodes.getter()
{
  return MEMORY[0x270F6CED8]();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return MEMORY[0x270F6CEF0]();
}

uint64_t UsoEntity_common_Date.toDate()()
{
  return MEMORY[0x270F65420]();
}

uint64_t dispatch thunk of UsoEntity_common_Date.name.getter()
{
  return MEMORY[0x270F6CF38]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.attributes.getter()
{
  return MEMORY[0x270F6D048]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.definedValue.getter()
{
  return MEMORY[0x270F6D050]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.phoneticName.getter()
{
  return MEMORY[0x270F6D058]();
}

uint64_t type metadata accessor for UsoEntity_common_Person.DefinedValues()
{
  return MEMORY[0x270F6D060]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.associatedDate.getter()
{
  return MEMORY[0x270F6D068]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.structuredName.getter()
{
  return MEMORY[0x270F6D070]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.associatedOrganization.getter()
{
  return MEMORY[0x270F6D078]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.phoneticStructuredName.getter()
{
  return MEMORY[0x270F6D080]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter()
{
  return MEMORY[0x270F6D088]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter()
{
  return MEMORY[0x270F6D090]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.structuredNameAsExpression.getter()
{
  return MEMORY[0x270F6D098]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.age.getter()
{
  return MEMORY[0x270F6D0A0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.name.getter()
{
  return MEMORY[0x270F6D0A8]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.birthdate.getter()
{
  return MEMORY[0x270F6D0B0]();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return MEMORY[0x270F6D0B8]();
}

uint64_t PrimitiveStringOperators.init(rawValue:)()
{
  return MEMORY[0x270F6D0E0]();
}

uint64_t type metadata accessor for PrimitiveStringOperators()
{
  return MEMORY[0x270F6D0F0]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x270F6D200]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return MEMORY[0x270F6D220]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.date.getter()
{
  return MEMORY[0x270F6D268]();
}

uint64_t PersonIntentNodeContaining.middleName.getter()
{
  return MEMORY[0x270F6D378]();
}

uint64_t PersonIntentNodeContaining.namePrefix.getter()
{
  return MEMORY[0x270F6D380]();
}

uint64_t PersonIntentNodeContaining.namePostfix.getter()
{
  return MEMORY[0x270F6D388]();
}

uint64_t PersonIntentNodeContaining.relationship.getter()
{
  return MEMORY[0x270F6D390]();
}

uint64_t PersonIntentNodeContaining.company.getter()
{
  return MEMORY[0x270F6D3A0]();
}

uint64_t PersonIntentNodeContaining.fullName.getter()
{
  return MEMORY[0x270F6D3A8]();
}

uint64_t PersonIntentNodeContaining.lastName.getter()
{
  return MEMORY[0x270F6D3B0]();
}

uint64_t PersonIntentNodeContaining.nickName.getter()
{
  return MEMORY[0x270F6D3B8]();
}

uint64_t PersonIntentNodeContaining.firstName.getter()
{
  return MEMORY[0x270F6D3C0]();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return MEMORY[0x270F6D3E8]();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return MEMORY[0x270F6D3F8]();
}

uint64_t type metadata accessor for UsoTask_read_common_Person()
{
  return MEMORY[0x270F6D4D0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x270F6D510]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonName.nickName.getter()
{
  return MEMORY[0x270F6D580]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonName.nickNameAsExpression.getter()
{
  return MEMORY[0x270F6D588]();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return MEMORY[0x270F6D5B8]();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return MEMORY[0x270F6D5C0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return MEMORY[0x270F6D630]();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneNumber.label.getter()
{
  return MEMORY[0x270F6D778]();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneNumber.value.getter()
{
  return MEMORY[0x270F6D780]();
}

uint64_t type metadata accessor for UsoEntity_common_PhoneNumber()
{
  return MEMORY[0x270F6D788]();
}

uint64_t type metadata accessor for UsoTask_create_common_Person()
{
  return MEMORY[0x270F6D7E0]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Person()
{
  return MEMORY[0x270F6D7E8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Person()
{
  return MEMORY[0x270F6D7F8]();
}

uint64_t type metadata accessor for UsoTask_update_common_Person()
{
  return MEMORY[0x270F6D850]();
}

uint64_t dispatch thunk of UsoEntity_common_EmailAddress.label.getter()
{
  return MEMORY[0x270F6D8F0]();
}

uint64_t dispatch thunk of UsoEntity_common_EmailAddress.value.getter()
{
  return MEMORY[0x270F6D8F8]();
}

uint64_t type metadata accessor for UsoEntity_common_EmailAddress()
{
  return MEMORY[0x270F6D900]();
}

uint64_t dispatch thunk of UsoEntity_common_Organization.name.getter()
{
  return MEMORY[0x270F6D9A0]();
}

uint64_t type metadata accessor for UsoTask_request_common_Person()
{
  return MEMORY[0x270F6DA98]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)()
{
  return MEMORY[0x270F6DB30]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)()
{
  return MEMORY[0x270F6DB48]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)()
{
  return MEMORY[0x270F6DB50]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.name.getter()
{
  return MEMORY[0x270F6DB58]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)()
{
  return MEMORY[0x270F6DB60]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.__allocating_init()()
{
  return MEMORY[0x270F6DB70]();
}

uint64_t UsoEntityBuilder_common_Person.init()()
{
  return MEMORY[0x270F6DB78]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return MEMORY[0x270F6DB80]();
}

uint64_t dispatch thunk of UsoEntity_common_PostalAddress.label.getter()
{
  return MEMORY[0x270F6DC88]();
}

uint64_t type metadata accessor for UsoEntity_common_PostalAddress()
{
  return MEMORY[0x270F6DCA0]();
}

uint64_t dispatch thunk of UsoEntity_common_ContactAddress.label.getter()
{
  return MEMORY[0x270F6DE80]();
}

uint64_t type metadata accessor for UsoEntity_common_ContactAddress()
{
  return MEMORY[0x270F6DE90]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Person()
{
  return MEMORY[0x270F6DF68]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter()
{
  return MEMORY[0x270F6E1E8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return MEMORY[0x270F6E1F0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter()
{
  return MEMORY[0x270F6E200]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter()
{
  return MEMORY[0x270F6E208]();
}

uint64_t type metadata accessor for UsoTask_setIdentity_common_Person()
{
  return MEMORY[0x270F6E3C0]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)()
{
  return MEMORY[0x270F6E3E0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePrefix(value:)()
{
  return MEMORY[0x270F6E458]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePostfix(value:)()
{
  return MEMORY[0x270F6E460]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)()
{
  return MEMORY[0x270F6E468]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setGivenName(value:)()
{
  return MEMORY[0x270F6E470]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setFamilyName(value:)()
{
  return MEMORY[0x270F6E478]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setMiddleName(value:)()
{
  return MEMORY[0x270F6E480]();
}

uint64_t UsoEntityBuilder_common_PersonName.init()()
{
  return MEMORY[0x270F6E490]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonName()
{
  return MEMORY[0x270F6E498]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)()
{
  return MEMORY[0x270F6E610]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setValue(value:)()
{
  return MEMORY[0x270F6E618]();
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init()()
{
  return MEMORY[0x270F6E620]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhoneNumber()
{
  return MEMORY[0x270F6E628]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter()
{
  return MEMORY[0x270F6E690]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter()
{
  return MEMORY[0x270F6E698]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter()
{
  return MEMORY[0x270F6E6A0]();
}

uint64_t dispatch thunk of UsoTaskBuilder_noVerb_common_Person.__allocating_init()()
{
  return MEMORY[0x270F6E6A8]();
}

uint64_t type metadata accessor for UsoTaskBuilder_noVerb_common_Person()
{
  return MEMORY[0x270F6E6B8]();
}

uint64_t UsoTaskBuilder_update_common_Person.init()()
{
  return MEMORY[0x270F6E6F0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_update_common_Person()
{
  return MEMORY[0x270F6E6F8]();
}

uint64_t type metadata accessor for UsoTask_update_common_Communication()
{
  return MEMORY[0x270F6E778]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setLabel(value:)()
{
  return MEMORY[0x270F6E7A0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setValue(value:)()
{
  return MEMORY[0x270F6E7A8]();
}

uint64_t UsoEntityBuilder_common_EmailAddress.init()()
{
  return MEMORY[0x270F6E7B0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailAddress()
{
  return MEMORY[0x270F6E7B8]();
}

uint64_t UsoTaskBuilder_request_common_Person.init()()
{
  return MEMORY[0x270F6E930]();
}

uint64_t type metadata accessor for UsoTaskBuilder_request_common_Person()
{
  return MEMORY[0x270F6E938]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Person()
{
  return MEMORY[0x270F6E980]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setPostalCode(value:)()
{
  return MEMORY[0x270F6EA88]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCountry(value:)()
{
  return MEMORY[0x270F6EA90]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setProvince(value:)()
{
  return MEMORY[0x270F6EA98]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCity(value:)()
{
  return MEMORY[0x270F6EAA0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setLabel(value:)()
{
  return MEMORY[0x270F6EAA8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setValue(value:)()
{
  return MEMORY[0x270F6EAB0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreet(value:)()
{
  return MEMORY[0x270F6EAB8]();
}

uint64_t UsoEntityBuilder_common_PostalAddress.init()()
{
  return MEMORY[0x270F6EAC0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PostalAddress()
{
  return MEMORY[0x270F6EAC8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)()
{
  return MEMORY[0x270F6EC38]();
}

uint64_t UsoEntityBuilder_common_GeographicArea.init()()
{
  return MEMORY[0x270F6EC40]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_GeographicArea()
{
  return MEMORY[0x270F6EC48]();
}

uint64_t UsoTaskBuilder_summarise_common_Person.init()()
{
  return MEMORY[0x270F6ECB0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_summarise_common_Person()
{
  return MEMORY[0x270F6ECB8]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setSelect(value:)()
{
  return MEMORY[0x270F6EE20]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setReference(value:)()
{
  return MEMORY[0x270F6EE28]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)()
{
  return MEMORY[0x270F6EE30]();
}

uint64_t UsoEntityBuilder_common_PersonRelationship.init()()
{
  return MEMORY[0x270F6EFB8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonRelationship()
{
  return MEMORY[0x270F6EFC0]();
}

uint64_t NLIntent.domainNode.getter()
{
  return MEMORY[0x270F6F368]();
}

uint64_t type metadata accessor for NLIntent()
{
  return MEMORY[0x270F6F408]();
}

uint64_t dispatch thunk of UsoValue.getAsPrimitiveValueString()()
{
  return MEMORY[0x270F6F410]();
}

uint64_t UsoEntity.debugString.getter()
{
  return MEMORY[0x270F70740]();
}

uint64_t UsoEntity.attributes.getter()
{
  return MEMORY[0x270F6F4B0]();
}

uint64_t UsoEntity.usoIdentifiers.getter()
{
  return MEMORY[0x270F6F4C0]();
}

uint64_t type metadata accessor for UsoEntity()
{
  return MEMORY[0x270F6F4D0]();
}

uint64_t dispatch thunk of InferenceError.log()()
{
  return MEMORY[0x270F654D8]();
}

uint64_t type metadata accessor for InferenceError()
{
  return MEMORY[0x270F654E0]();
}

uint64_t ContactQuery.middleName.setter()
{
  return MEMORY[0x270F655F8]();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return MEMORY[0x270F65608]();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return MEMORY[0x270F65618]();
}

uint64_t ContactQuery.relationship.setter()
{
  return MEMORY[0x270F65628]();
}

uint64_t ContactQuery.ontologySource.setter()
{
  return MEMORY[0x270F65630]();
}

uint64_t ContactQuery.organizationName.setter()
{
  return MEMORY[0x270F65638]();
}

uint64_t ContactQuery.previousFamilyName.setter()
{
  return MEMORY[0x270F65640]();
}

uint64_t ContactQuery.isMe.setter()
{
  return MEMORY[0x270F65660]();
}

uint64_t ContactQuery.handle.setter()
{
  return MEMORY[0x270F65668]();
}

uint64_t ContactQuery.fullName.setter()
{
  return MEMORY[0x270F65678]();
}

uint64_t ContactQuery.nickname.setter()
{
  return MEMORY[0x270F65688]();
}

uint64_t ContactQuery.init()()
{
  return MEMORY[0x270F656A0]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x270F656A8]();
}

uint64_t type metadata accessor for ContactHandle.HandleType()
{
  return MEMORY[0x270F65718]();
}

uint64_t ContactHandle.init(id:type:label:value:isSuggested:)()
{
  return MEMORY[0x270F65720]();
}

uint64_t ContactHandle.type.getter()
{
  return MEMORY[0x270F65730]();
}

uint64_t ContactHandle.label.getter()
{
  return MEMORY[0x270F65738]();
}

uint64_t ContactHandle.value.getter()
{
  return MEMORY[0x270F65740]();
}

uint64_t type metadata accessor for ContactHandle()
{
  return MEMORY[0x270F65748]();
}

uint64_t ContactResolver.AppCandidate.init(bundleId:type:)()
{
  return MEMORY[0x270F657A0]();
}

uint64_t type metadata accessor for ContactResolver.AppCandidateType()
{
  return MEMORY[0x270F657A8]();
}

uint64_t static ContactResolver.refreshSharedCache()()
{
  return MEMORY[0x270F657B8]();
}

uint64_t dispatch thunk of ContactResolver.makeRecommendations(queries:config:)()
{
  return MEMORY[0x270F657C0]();
}

uint64_t ContactResolver.init()()
{
  return MEMORY[0x270F657C8]();
}

uint64_t type metadata accessor for ContactResolver()
{
  return MEMORY[0x270F657D0]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x270F65830]();
}

uint64_t DateTimeResolver.makeRecommendation(value:context:spec:)()
{
  return MEMORY[0x270F65858]();
}

uint64_t DateTimeResolver.init()()
{
  return MEMORY[0x270F65860]();
}

uint64_t type metadata accessor for DateTimeResolver()
{
  return MEMORY[0x270F65868]();
}

uint64_t ContactHandleQuery.init(type:label:value:)()
{
  return MEMORY[0x270F658A0]();
}

uint64_t type metadata accessor for ContactHandleQuery()
{
  return MEMORY[0x270F658A8]();
}

uint64_t type metadata accessor for ContactOntologySource()
{
  return MEMORY[0x270F658D8]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return MEMORY[0x270F658E8]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x270F65900]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x270F65908]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x270F65910]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy()
{
  return MEMORY[0x270F65950]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.ExpandToType()
{
  return MEMORY[0x270F65958]();
}

uint64_t DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)()
{
  return MEMORY[0x270F65960]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec()
{
  return MEMORY[0x270F65978]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x270F65990]();
}

uint64_t ContactRelationshipQuery.init(label:fromContact:)()
{
  return MEMORY[0x270F65998]();
}

uint64_t type metadata accessor for ContactRelationshipQuery()
{
  return MEMORY[0x270F659A0]();
}

uint64_t type metadata accessor for DateTimeResolutionContext.Hemisphere()
{
  return MEMORY[0x270F659B8]();
}

uint64_t DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)()
{
  return MEMORY[0x270F659C8]();
}

uint64_t type metadata accessor for DateTimeResolutionContext()
{
  return MEMORY[0x270F659D0]();
}

uint64_t static ContactHandleTypePreference.preferEmail.getter()
{
  return MEMORY[0x270F65A08]();
}

uint64_t static ContactHandleTypePreference.preferPhone.getter()
{
  return MEMORY[0x270F65A10]();
}

uint64_t type metadata accessor for ContactHandleTypePreference()
{
  return MEMORY[0x270F65A20]();
}

uint64_t Contact.familyName.getter()
{
  return MEMORY[0x270F65AC8]();
}

uint64_t Contact.familyName.setter()
{
  return MEMORY[0x270F65AD0]();
}

uint64_t Contact.middleName.getter()
{
  return MEMORY[0x270F65AD8]();
}

uint64_t Contact.middleName.setter()
{
  return MEMORY[0x270F65AE0]();
}

uint64_t Contact.namePrefix.getter()
{
  return MEMORY[0x270F65AE8]();
}

uint64_t Contact.namePrefix.setter()
{
  return MEMORY[0x270F65AF0]();
}

uint64_t Contact.nameSuffix.getter()
{
  return MEMORY[0x270F65AF8]();
}

uint64_t Contact.nameSuffix.setter()
{
  return MEMORY[0x270F65B00]();
}

uint64_t Contact.LabeledValue.init(id:label:value:)()
{
  return MEMORY[0x270F65B10]();
}

uint64_t Contact.LabeledValue.label.getter()
{
  return MEMORY[0x270F65B18]();
}

uint64_t Contact.contactRelations.getter()
{
  return MEMORY[0x270F65B30]();
}

uint64_t Contact.contactRelations.setter()
{
  return MEMORY[0x270F65B38]();
}

uint64_t Contact.organizationName.getter()
{
  return MEMORY[0x270F65B40]();
}

uint64_t Contact.organizationName.setter()
{
  return MEMORY[0x270F65B48]();
}

uint64_t Contact.previousFamilyName.getter()
{
  return MEMORY[0x270F65B60]();
}

uint64_t Contact.id.getter()
{
  return MEMORY[0x270F65B78]();
}

uint64_t Contact.id.setter()
{
  return MEMORY[0x270F65B80]();
}

uint64_t Contact.isMe.getter()
{
  return MEMORY[0x270F65B88]();
}

uint64_t Contact.handles.modify()
{
  return MEMORY[0x270F65BA0]();
}

uint64_t Contact.handles.getter()
{
  return MEMORY[0x270F65BA8]();
}

uint64_t Contact.nickname.getter()
{
  return MEMORY[0x270F65BB8]();
}

uint64_t Contact.nickname.setter()
{
  return MEMORY[0x270F65BC0]();
}

uint64_t Contact.givenName.getter()
{
  return MEMORY[0x270F65BC8]();
}

uint64_t Contact.givenName.setter()
{
  return MEMORY[0x270F65BD0]();
}

uint64_t Contact.init()()
{
  return MEMORY[0x270F65BD8]();
}

uint64_t DateTime.init(withDate:time:)()
{
  return MEMORY[0x270F65C40]();
}

uint64_t DateTime.Time.init(withHour:)()
{
  return MEMORY[0x270F65D28]();
}

uint64_t type metadata accessor for DateTime.Time()
{
  return MEMORY[0x270F65D30]();
}

uint64_t type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange()
{
  return MEMORY[0x270F65D40]();
}

uint64_t DateTime.toINDateComponentsRange(calendar:timeZone:)()
{
  return MEMORY[0x270F65DF0]();
}

uint64_t type metadata accessor for DateTime()
{
  return MEMORY[0x270F65E38]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify()
{
  return MEMORY[0x270F72948]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  return MEMORY[0x270F72950]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter()
{
  return MEMORY[0x270F72958]();
}

uint64_t InputOrigin.rawValue.getter()
{
  return MEMORY[0x270F72A00]();
}

uint64_t type metadata accessor for InputOrigin()
{
  return MEMORY[0x270F72A08]();
}

uint64_t Transformer.init(transform:)()
{
  return MEMORY[0x270F72A20]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x270F72A28]();
}

uint64_t static ResponseMode.voiceForward.getter()
{
  return MEMORY[0x270F72A48]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x270F72A70]();
}

uint64_t InteractionType.rawValue.getter()
{
  return MEMORY[0x270F72B20]();
}

uint64_t type metadata accessor for InteractionType()
{
  return MEMORY[0x270F72B28]();
}

uint64_t type metadata accessor for TransformationError()
{
  return MEMORY[0x270F72C20]();
}

uint64_t dispatch thunk of DialogDateFormatter.Builder.withOmitYear(_:)()
{
  return MEMORY[0x270F64938]();
}

uint64_t dispatch thunk of DialogDateFormatter.Builder.build()()
{
  return MEMORY[0x270F64940]();
}

uint64_t DialogDateFormatter.Builder.init()()
{
  return MEMORY[0x270F64948]();
}

uint64_t type metadata accessor for DialogDateFormatter.Builder()
{
  return MEMORY[0x270F64950]();
}

uint64_t dispatch thunk of DialogLocationValue.Builder.withAddress(_:)()
{
  return MEMORY[0x270F64960]();
}

uint64_t dispatch thunk of DialogLocationValue.Builder.build()()
{
  return MEMORY[0x270F64968]();
}

uint64_t DialogLocationValue.Builder.init()()
{
  return MEMORY[0x270F64970]();
}

uint64_t type metadata accessor for DialogLocationValue.Builder()
{
  return MEMORY[0x270F64978]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withCountry(print:speak:)()
{
  return MEMORY[0x270F64980]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withLocality(print:speak:)()
{
  return MEMORY[0x270F64990]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withPostCode(print:speak:)()
{
  return MEMORY[0x270F649A0]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withCountryCode(print:speak:)()
{
  return MEMORY[0x270F649B0]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withThoroughfare(print:speak:)()
{
  return MEMORY[0x270F649C0]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withAdministrativeArea(print:speak:)()
{
  return MEMORY[0x270F649E0]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withSubAdministrativeArea(print:speak:)()
{
  return MEMORY[0x270F649F0]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withAdministrativeAreaCode(print:speak:)()
{
  return MEMORY[0x270F64A00]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withName(print:speak:)()
{
  return MEMORY[0x270F64A18]();
}

uint64_t DialogLocationAddress.Builder.init()()
{
  return MEMORY[0x270F64A28]();
}

uint64_t type metadata accessor for DialogLocationAddress.Builder()
{
  return MEMORY[0x270F64A30]();
}

uint64_t dispatch thunk of DialogLocationAddress.__allocating_init(builder:)()
{
  return MEMORY[0x270F64A38]();
}

uint64_t type metadata accessor for DialogLocationAddress()
{
  return MEMORY[0x270F64A40]();
}

uint64_t dispatch thunk of DialogPerson.mockGlobals.setter()
{
  return MEMORY[0x270F64B20]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)()
{
  return MEMORY[0x270F64B70]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withCompany(_:)()
{
  return MEMORY[0x270F64B78]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withPronoun(_:)()
{
  return MEMORY[0x270F64B80]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withNickname(_:)()
{
  return MEMORY[0x270F64BA0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withGivenName(_:)()
{
  return MEMORY[0x270F64BA8]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFamilyName(_:)()
{
  return MEMORY[0x270F64BB0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withMiddleName(_:)()
{
  return MEMORY[0x270F64BB8]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)()
{
  return MEMORY[0x270F64BD0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.build()()
{
  return MEMORY[0x270F64BE0]();
}

uint64_t DialogPerson.Builder.init()()
{
  return MEMORY[0x270F64BE8]();
}

uint64_t type metadata accessor for DialogPerson.Builder()
{
  return MEMORY[0x270F64BF0]();
}

uint64_t dispatch thunk of DialogPerson.__allocating_init(builder:)()
{
  return MEMORY[0x270F64C00]();
}

uint64_t DialogPerson.company.getter()
{
  return MEMORY[0x270F64C10]();
}

uint64_t dispatch thunk of DialogPerson.fullName.getter()
{
  return MEMORY[0x270F64C28]();
}

uint64_t DialogPerson.nickname.getter()
{
  return MEMORY[0x270F64C30]();
}

uint64_t type metadata accessor for DialogPerson()
{
  return MEMORY[0x270F64C48]();
}

uint64_t dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)()
{
  return MEMORY[0x270F64C90]();
}

uint64_t dispatch thunk of DialogPronoun.Builder.build()()
{
  return MEMORY[0x270F64C98]();
}

uint64_t DialogPronoun.Builder.init()()
{
  return MEMORY[0x270F64CA0]();
}

uint64_t type metadata accessor for DialogPronoun.Builder()
{
  return MEMORY[0x270F64CA8]();
}

uint64_t dispatch thunk of DialogCalendar.isYesterday.getter()
{
  return MEMORY[0x270F64CB0]();
}

uint64_t dispatch thunk of DialogCalendar.mockGlobals.setter()
{
  return MEMORY[0x270F64CB8]();
}

uint64_t dispatch thunk of DialogCalendar.withinPastWeek.getter()
{
  return MEMORY[0x270F64CC0]();
}

uint64_t dispatch thunk of DialogCalendar.dateDescriptive.getter()
{
  return MEMORY[0x270F64CC8]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.withDateFormatter(_:)()
{
  return MEMORY[0x270F64CE8]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.build()()
{
  return MEMORY[0x270F64CF8]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.withSecs(_:)()
{
  return MEMORY[0x270F64D08]();
}

uint64_t DialogCalendar.Builder.init()()
{
  return MEMORY[0x270F64D10]();
}

uint64_t type metadata accessor for DialogCalendar.Builder()
{
  return MEMORY[0x270F64D18]();
}

uint64_t dispatch thunk of DialogCalendar.__allocating_init(builder:)()
{
  return MEMORY[0x270F64D20]();
}

uint64_t DialogCalendar.init(builder:)()
{
  return MEMORY[0x270F64D28]();
}

uint64_t type metadata accessor for DialogCalendar()
{
  return MEMORY[0x270F64D30]();
}

uint64_t dispatch thunk of DialogDuration.mockGlobals.setter()
{
  return MEMORY[0x270F64D68]();
}

uint64_t dispatch thunk of DialogDuration.valueInDays.getter()
{
  return MEMORY[0x270F64D70]();
}

uint64_t dispatch thunk of DialogDuration.valueInWeeks.getter()
{
  return MEMORY[0x270F64D78]();
}

uint64_t dispatch thunk of DialogDuration.valueInYears.getter()
{
  return MEMORY[0x270F64D80]();
}

uint64_t dispatch thunk of DialogDuration.valueInMonths.getter()
{
  return MEMORY[0x270F64D88]();
}

uint64_t dispatch thunk of DialogDuration.days.getter()
{
  return MEMORY[0x270F64D98]();
}

uint64_t dispatch thunk of DialogDuration.weeks.getter()
{
  return MEMORY[0x270F64DA0]();
}

uint64_t dispatch thunk of DialogDuration.years.getter()
{
  return MEMORY[0x270F64DA8]();
}

uint64_t dispatch thunk of DialogDuration.months.getter()
{
  return MEMORY[0x270F64DB0]();
}

uint64_t dispatch thunk of DialogDuration.Builder.withSecs(_:)()
{
  return MEMORY[0x270F64DC0]();
}

uint64_t DialogDuration.Builder.init()()
{
  return MEMORY[0x270F64DC8]();
}

uint64_t type metadata accessor for DialogDuration.Builder()
{
  return MEMORY[0x270F64DD0]();
}

uint64_t dispatch thunk of DialogDuration.__allocating_init(builder:)()
{
  return MEMORY[0x270F64DD8]();
}

uint64_t type metadata accessor for DialogDuration()
{
  return MEMORY[0x270F64DF0]();
}

uint64_t dispatch thunk of DialogLocation.Builder.withValues(_:)()
{
  return MEMORY[0x270F64DF8]();
}

uint64_t DialogLocation.Builder.init()()
{
  return MEMORY[0x270F64E00]();
}

uint64_t type metadata accessor for DialogLocation.Builder()
{
  return MEMORY[0x270F64E08]();
}

uint64_t dispatch thunk of DialogLocation.__allocating_init(builder:)()
{
  return MEMORY[0x270F64E10]();
}

uint64_t type metadata accessor for DialogLocation()
{
  return MEMORY[0x270F64E18]();
}

uint64_t CATGlobals.__allocating_init(device:)()
{
  return MEMORY[0x270F64E48]();
}

uint64_t CATGlobals.__allocating_init()()
{
  return MEMORY[0x270F64E98]();
}

uint64_t type metadata accessor for CATGlobals()
{
  return MEMORY[0x270F64EA0]();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return MEMORY[0x270F64EA8]();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:)()
{
  return MEMORY[0x270F64EB8]();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return MEMORY[0x270F64EC0]();
}

uint64_t CATWrapper.deinit()
{
  return MEMORY[0x270F64EC8]();
}

uint64_t PhonemeData.asNameComponents(locale:)()
{
  return MEMORY[0x270F64F68]();
}

uint64_t type metadata accessor for PhonemeData()
{
  return MEMORY[0x270F64F78]();
}

uint64_t SpeakableString.init(print:speak:)()
{
  return MEMORY[0x270F64FA0]();
}

uint64_t SpeakableString.print.getter()
{
  return MEMORY[0x270F64FA8]();
}

uint64_t type metadata accessor for SpeakableString()
{
  return MEMORY[0x270F64FC0]();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return MEMORY[0x270F64FC8]();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return MEMORY[0x270F64FD0]();
}

uint64_t CATWrapperSimple.__allocating_init(options:globals:)()
{
  return MEMORY[0x270F64FD8]();
}

uint64_t CATWrapperSimple.deinit()
{
  return MEMORY[0x270F64FE8]();
}

uint64_t static PhonemeDataParser.parse(from:)()
{
  return MEMORY[0x270F65EC0]();
}

{
  return MEMORY[0x270F644E0]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withMultiUserState(_:)()
{
  return MEMORY[0x270F65000]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withUserAssignedDeviceName(print:speak:)()
{
  return MEMORY[0x270F65008]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withSiriLocale(_:)()
{
  return MEMORY[0x270F65010]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withDeviceName(print:speak:)()
{
  return MEMORY[0x270F65018]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsWatch(_:)()
{
  return MEMORY[0x270F65028]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsCarDnD(_:)()
{
  return MEMORY[0x270F65030]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsAppleTV(_:)()
{
  return MEMORY[0x270F65038]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsCarPlay(_:)()
{
  return MEMORY[0x270F65040]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsHomePod(_:)()
{
  return MEMORY[0x270F65048]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsEyesFree(_:)()
{
  return MEMORY[0x270F65050]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withInputOrigin(print:speak:)()
{
  return MEMORY[0x270F65058]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withInteractionType(print:speak:)()
{
  return MEMORY[0x270F65060]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsLockedWithPasscode(_:)()
{
  return MEMORY[0x270F65070]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsTextToSpeechEnabled(_:)()
{
  return MEMORY[0x270F65078]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsVoiceTriggerEnabled(_:)()
{
  return MEMORY[0x270F65080]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.build()()
{
  return MEMORY[0x270F65088]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsMac(_:)()
{
  return MEMORY[0x270F65090]();
}

uint64_t SirikitDeviceState.Builder.init()()
{
  return MEMORY[0x270F650A0]();
}

uint64_t type metadata accessor for SirikitDeviceState.Builder()
{
  return MEMORY[0x270F650A8]();
}

uint64_t type metadata accessor for SirikitDeviceState()
{
  return MEMORY[0x270F650C8]();
}

uint64_t dispatch thunk of LabelExecutionResult.subscript.getter()
{
  return MEMORY[0x270F650D0]();
}

uint64_t static CATOption.defaultMode.getter()
{
  return MEMORY[0x270F65158]();
}

uint64_t type metadata accessor for CATOption()
{
  return MEMORY[0x270F65180]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x270F63AE0]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x270F63B10]();
}

uint64_t ContactResolutionPatternGenerator.init(appBundleId:globals:deviceState:)()
{
  return MEMORY[0x270F65F60]();
}

uint64_t type metadata accessor for ContactResolutionPatternGenerator()
{
  return MEMORY[0x270F65F88]();
}

uint64_t ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)()
{
  return MEMORY[0x270F65FA8]();
}

uint64_t type metadata accessor for ContactResolutionSnippetGenerator()
{
  return MEMORY[0x270F65FC0]();
}

uint64_t type metadata accessor for ContactsSnippetFlowState()
{
  return MEMORY[0x270F644E8]();
}

uint64_t type metadata accessor for ContactsLabelCATContainer.LabelType()
{
  return MEMORY[0x270F644F0]();
}

uint64_t static ContactsLabelCATContainer.empty.getter()
{
  return MEMORY[0x270F64500]();
}

uint64_t ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)()
{
  return MEMORY[0x270F64508]();
}

uint64_t type metadata accessor for ContactsLabelCATContainer()
{
  return MEMORY[0x270F64518]();
}

uint64_t ContactsSnippetPluginModel.responseViewID.getter()
{
  return MEMORY[0x270F64520]();
}

uint64_t type metadata accessor for ContactsSnippetPluginModel()
{
  return MEMORY[0x270F64528]();
}

uint64_t CodableContact.init(wrappedValue:)()
{
  return MEMORY[0x270F64590]();
}

uint64_t CodableContact.wrappedValue.getter()
{
  return MEMORY[0x270F64598]();
}

uint64_t GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)()
{
  return MEMORY[0x270F645E0]();
}

uint64_t type metadata accessor for GetContactSnippetModel()
{
  return MEMORY[0x270F645F8]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType()
{
  return MEMORY[0x270F64610]();
}

uint64_t GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)()
{
  return MEMORY[0x270F64628]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute()
{
  return MEMORY[0x270F64640]();
}

uint64_t GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)()
{
  return MEMORY[0x270F64648]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel()
{
  return MEMORY[0x270F64680]();
}

uint64_t GetContactDirectInvocationsModel.init(contactCardPunchout:sendEmailPunchouts:sendMessagePunchouts:navigationPunchouts:)()
{
  return MEMORY[0x270F64698]();
}

uint64_t type metadata accessor for GetContactDirectInvocationsModel()
{
  return MEMORY[0x270F646B0]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify()
{
  return MEMORY[0x270F646C8]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType()
{
  return MEMORY[0x270F646E8]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel()
{
  return MEMORY[0x270F64718]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x270F446F8]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x270F44710]();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return MEMORY[0x270F706F0]();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return MEMORY[0x270F706F8]();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)()
{
  return MEMORY[0x270F70718]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return MEMORY[0x270FA2C90]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x270FA2C98]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x270FA2CC0]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t RRCandidate.entity.getter()
{
  return MEMORY[0x270F70760]();
}

uint64_t type metadata accessor for RRCandidate()
{
  return MEMORY[0x270F70768]();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return MEMORY[0x270F70808]();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return MEMORY[0x270F70820]();
}

uint64_t type metadata accessor for RRQuery()
{
  return MEMORY[0x270F70A18]();
}

uint64_t RREntity.appBundleId.getter()
{
  return MEMORY[0x270F70A30]();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return MEMORY[0x270F70A78]();
}

uint64_t RREntity.id.getter()
{
  return MEMORY[0x270F70A80]();
}

uint64_t RREntity.usoEntity.getter()
{
  return MEMORY[0x270F70AA8]();
}

uint64_t type metadata accessor for RREntity()
{
  return MEMORY[0x270F70AB0]();
}

uint64_t type metadata accessor for RRResult()
{
  return MEMORY[0x270F70AD0]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return MEMORY[0x270FA0A10]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)()
{
  return MEMORY[0x270EF1808]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x270FA2B70]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = MEMORY[0x270F9D610]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.toSpeakableString.getter()
{
  return MEMORY[0x270F65190]();
}

uint64_t String.debugDescription.getter()
{
  return MEMORY[0x270F9D670]();
}

uint64_t String.sanitizeCNLabel.getter()
{
  return MEMORY[0x270F64740]();
}

uint64_t static String.EMPTY.getter()
{
  return MEMORY[0x270F64758]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D758]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9D788]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x270F9D938]();
}

uint64_t Sequence.first(where:)()
{
  return MEMORY[0x270F9D988]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x270F9DD28]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

uint64_t static Bool._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1BE8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1CE0]();
}

uint64_t static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)()
{
  return MEMORY[0x270F68430]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t CNLabeledValue<>.formattedString.getter()
{
  return MEMORY[0x270F64770]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x270FA0C38]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x270FA2E90]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x270FA2EA8]();
}

uint64_t SAClientBoundCommand.data.getter()
{
  return MEMORY[0x270F64778]();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)MEMORY[0x270EF2180](BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x270EF2198](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t CNContact.isBirthdayToday.getter()
{
  return MEMORY[0x270F64790]();
}

uint64_t CNContact.formattedFullName.getter()
{
  return MEMORY[0x270F64798]();
}

uint64_t CNContact.givenNamePronunciationString.getter()
{
  return MEMORY[0x270F647B8]();
}

uint64_t CNContact.familyNamePronunciationString.getter()
{
  return MEMORY[0x270F647C0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x270F9E3B0]();
}

uint64_t Optional<A>.emptyToNil.getter()
{
  return MEMORY[0x270F647C8]();
}

uint64_t Optional<A>.isNilOrEmpty.getter()
{
  return MEMORY[0x270F647D0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0 = MEMORY[0x270F9E470]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x270F9E500]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x270EF23D8]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t StringProtocol.capitalized(with:)()
{
  return MEMORY[0x270EF2400]();
}

uint64_t StringProtocol.capitalized.getter()
{
  return MEMORY[0x270EF2410]();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return MEMORY[0x270EF2448]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return MEMORY[0x270EF24B0]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x270EF2560]();
}

uint64_t StringProtocol.substring(to:)()
{
  return MEMORY[0x270EF25C8]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x270F9E658]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x270F9EF08](isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x270F9EF20]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x270F9F000]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F280]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3C0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x270F9F918]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x270F9FA40]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t Result<>.firstPrint.getter()
{
  return MEMORY[0x270F651A0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

uint64_t INTypedObjectWithCustomObject()
{
  return MEMORY[0x270EF52D0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x270FA0298]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x270FA02B0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}