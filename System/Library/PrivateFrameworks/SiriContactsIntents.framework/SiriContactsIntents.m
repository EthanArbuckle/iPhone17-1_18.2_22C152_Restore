id ContactRelation.__allocating_init(relationship:relatedFullName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;

  v9 = objc_allocWithZone(v4);
  v10 = static String.EMPTY.getter();
  v11 = (void *)MEMORY[0x230F84F70](v10);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_initWithIdentifier_displayString_, 0, v11);

  v13 = v12;
  if (a4)
  {
    v14 = (void *)MEMORY[0x230F84F70](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(v12, sel_setRelatedFullName_, v14);

  if (a2)
  {
    v15 = (void *)MEMORY[0x230F84F70](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v12, sel_setRelationship_, v15);

  return v12;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSPersonNameComponentsFormatterOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OptionSet<>.init()();
  *a1 = result;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSPersonNameComponentsFormatterOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t ContactsUnsupportedFlow.commonCATs.getter()
{
  return swift_retain();
}

uint64_t ContactsUnsupportedFlow.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ContactsUnsupportedFlow.__allocating_init(deviceState:commonCATs:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of DeviceState(a1, v4 + 24);
  *(void *)(v4 + 16) = a2;
  return v4;
}

uint64_t ContactsUnsupportedFlow.init(deviceState:commonCATs:)(long long *a1, uint64_t a2)
{
  outlined init with take of DeviceState(a1, v2 + 24);
  *(void *)(v2 + 16) = a2;
  return v2;
}

uint64_t outlined init with take of DeviceState(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t ContactsUnsupportedFlow.on(input:)()
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000070, 0x800000022D5A6DB0, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v1, v2, "%s:%s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  return 1;
}

uint64_t ContactsUnsupportedFlow.execute()()
{
  OUTLINED_FUNCTION_4();
  v1[6] = v2;
  v1[7] = v0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[8] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[9] = v4;
  v1[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContactsUnsupportedFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v8 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000070, 0x800000022D5A6DB0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xE900000000000029, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v2, v3, "%s:%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = ContactsUnsupportedFlow.execute();
  return ContactsCommonCATs.unsupportedAction()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v3 = v2;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = ContactsUnsupportedFlow.execute();
  }
  else {
    uint64_t v5 = ContactsUnsupportedFlow.execute();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  ContactsUnsupportedFlow.getUnsupportedFlow(for:)(v1);
  static ExecuteResponse.complete(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v4();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v15 = v0;
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[13];
    v7 = swift_slowAlloc();
    v8 = (void *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315394;
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000070, 0x800000022D5A6DB0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2112;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_22D49E000, v4, v5, "%s: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    v11 = (void *)v0[13];
  }
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v12();
}

uint64_t ContactsUnsupportedFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t ContactsUnsupportedFlow.getUnsupportedFlow(for:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TemplatingResult();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388]();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  *(void *)(v7 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
  swift_retain();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  v10[1] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  uint64_t v8 = Flow.eraseToAnyFlow()();
  swift_release();
  return v8;
}

uint64_t closure #1 in ContactsUnsupportedFlow.getUnsupportedFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ContactsUnsupportedFlow.getUnsupportedFlow(for:), 0, 0);
}

uint64_t closure #1 in ContactsUnsupportedFlow.getUnsupportedFlow(for:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 72) + 24), *(void *)(*(void *)(v0 + 72) + 48));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v5 = MEMORY[0x263F6FFF0];
  v2[3] = v4;
  v2[4] = v5;
  __swift_allocate_boxed_opaque_existential_1(v2);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v6();
}

uint64_t ContactsUnsupportedFlow.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return v0;
}

uint64_t ContactsUnsupportedFlow.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance ContactsUnsupportedFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance ContactsUnsupportedFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance ContactsUnsupportedFlow(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance ContactsUnsupportedFlow;
}

void protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance ContactsUnsupportedFlow(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance ContactsUnsupportedFlow()
{
  return 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow;
  return MEMORY[0x270F66CE0](a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow()
{
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactsUnsupportedFlow()
{
  return ContactsUnsupportedFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  return ContactsUnsupportedFlow.execute()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactsUnsupportedFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ContactsUnsupportedFlow();
  return MEMORY[0x270F66CE8](v3, a2);
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance ContactsUnsupportedFlow()
{
  return MEMORY[0x270F66CC8]();
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  uint64_t v3;

  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_19();
    __src = (char *)OUTLINED_FUNCTION_4_22();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for ContactsUnsupportedFlow()
{
  return self;
}

uint64_t base witness table accessor for Flow in ContactsUnsupportedFlow()
{
  return lazy protocol witness table accessor for type ContactsUnsupportedFlow and conformance ContactsUnsupportedFlow(&lazy protocol witness table cache variable for type ContactsUnsupportedFlow and conformance ContactsUnsupportedFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in ContactsUnsupportedFlow()
{
  return lazy protocol witness table accessor for type ContactsUnsupportedFlow and conformance ContactsUnsupportedFlow(&lazy protocol witness table cache variable for type ContactsUnsupportedFlow and conformance ContactsUnsupportedFlow);
}

uint64_t lazy protocol witness table accessor for type ContactsUnsupportedFlow and conformance ContactsUnsupportedFlow(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ContactsUnsupportedFlow();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for ContactsUnsupportedFlow(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactsUnsupportedFlow);
}

uint64_t dispatch thunk of ContactsUnsupportedFlow.__allocating_init(deviceState:commonCATs:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ContactsUnsupportedFlow.on(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ContactsUnsupportedFlow.execute()(uint64_t a1)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return v6(a1);
}

uint64_t dispatch thunk of ContactsUnsupportedFlow.execute(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_22D4A2B90()
{
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_6();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();
  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t partial apply for closure #1 in ContactsUnsupportedFlow.getUnsupportedFlow(for:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_1(v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v1 + v9;
  uint64_t v11 = *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  return closure #1 in ContactsUnsupportedFlow.getUnsupportedFlow(for:)(a1, v10, v11);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined destroy of FlowActivity?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return a1 - 8;
}

void OUTLINED_FUNCTION_2()
{
  JUMPOUT(0x230F85DE0);
}

uint64_t OUTLINED_FUNCTION_5()
{
  return v0 + 8;
}

uint64_t SiriKitContactIntent.me.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)v2;
  type metadata accessor for NSNumber();
  uint64_t v4 = 1;
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) == 0) {
    return 0;
  }
  return v4;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t SiriKitContactIntent.handleTypePreference.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriKitContactIntent.handleTypePreference.getter(a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  static ContactHandleTypePreference.preferPhone.getter();
  uint64_t v2 = type metadata accessor for ContactHandleTypePreference();
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v2);
}

double SiriKitContactIntent.value(forSlot:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  uint64_t v7 = (void *)MEMORY[0x230F84F70](v6);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v2, sel_valueForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void SiriKitContactIntent.shouldRunReferenceResolution(given:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_10();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v28 = v27;
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_15();
  uint64_t v31 = v30 - v29;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v33 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_26();
  MEMORY[0x270FA5388](v36);
  v38 = (char *)&a9 - v37;
  if (v25)
  {
    swift_retain();
    UsoEntity_common_Person.contactId.getter();
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    if (v40
      || (dispatch thunk of UsoEntity_common_Person.name.getter(), uint64_t v42 = v41, swift_bridgeObjectRelease(), v42)
      || (uint64_t v43 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(), swift_release(), v43)
      || (uint64_t v44 = dispatch thunk of UsoEntity_common_Person.associatedOrganization.getter(), swift_release(), v44))
    {
      swift_release();
      goto LABEL_17;
    }
    dispatch thunk of UsoEntity_common_Person.definedValue.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v21, *MEMORY[0x263F72A70], v26);
    __swift_storeEnumTagSinglePayload(v21, 0, 1, v26);
    uint64_t v45 = v20 + *(int *)(v32 + 48);
    outlined init with copy of UsoEntity_common_Person.DefinedValues?((uint64_t)v38, v20);
    outlined init with copy of UsoEntity_common_Person.DefinedValues?(v21, v45);
    OUTLINED_FUNCTION_3_0(v20);
    if (!v46)
    {
      outlined init with copy of UsoEntity_common_Person.DefinedValues?(v20, (uint64_t)v35);
      OUTLINED_FUNCTION_3_0(v45);
      if (!v46)
      {
        OUTLINED_FUNCTION_11();
        v47();
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v48 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
        v48(v31, v26);
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v21, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v38, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v48((uint64_t)v35, v26);
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v20, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        goto LABEL_17;
      }
      swift_release();
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v21, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v38, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v26);
LABEL_16:
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v20, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
      goto LABEL_17;
    }
    swift_release();
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v21, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v38, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    OUTLINED_FUNCTION_3_0(v45);
    if (!v46) {
      goto LABEL_16;
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v20, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  }
LABEL_17:
  OUTLINED_FUNCTION_8();
}

uint64_t outlined init with copy of UsoEntity_common_Person.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_Person.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues);
  }
  return result;
}

uint64_t specialized static SiriKitContactIntent.runReferenceResolution(_:completion:)(uint64_t a1, uint64_t a2)
{
  return specialized static SiriKitContactIntent.runReferenceResolution(_:completion:)(a1, a2, specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:));
}

{
  return specialized static SiriKitContactIntent.runReferenceResolution(_:completion:)(a1, a2, specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:));
}

#error "22D4A38F0: call analysis failed (funcsize=275)"

#error "22D4A3CD0: call analysis failed (funcsize=211)"

uint64_t SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectWeakInit();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = &v8;
  static SiriKitContactIntent.runReferenceResolution(_:completion:)(a1, partial apply for specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:), v6);
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

void specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x230F85EA0](a4);
  if (v8)
  {
    unint64_t v9 = v8;
    switch(a3)
    {
      case 1:
        uint64_t v16 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v16 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          uint64_t v43 = a2;
          uint64_t v44 = v21;
          *(_DWORD *)uint64_t v20 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v22 = String.init<A>(describing:)();
          uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          _os_log_impl(&dword_22D49E000, v18, v19, "#SiriKitGetEntityIntent: Resolved an email from reference resolution: %s", v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v21, -1, -1);
          MEMORY[0x230F85DE0](v20, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }

        if (a2)
        {
          uint64_t v33 = MEMORY[0x230F84F70](a1, a2);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }
        else
        {
          uint64_t v33 = 0;
        }
        -[NSObject setEmailAddress:](v9, sel_setEmailAddress_, v33, v42, v43, v44);
        goto LABEL_32;
      case 2:
        uint64_t v24 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          uint64_t v43 = a2;
          uint64_t v44 = v29;
          *(_DWORD *)uint64_t v28 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v30 = String.init<A>(describing:)();
          uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          _os_log_impl(&dword_22D49E000, v26, v27, "#SiriKitGetEntityIntent: Resolved a phone number from reference resolution: %s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v29, -1, -1);
          MEMORY[0x230F85DE0](v28, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }

        if (a2)
        {
          uint64_t v33 = MEMORY[0x230F84F70](a1, a2);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }
        else
        {
          uint64_t v33 = 0;
        }
        -[NSObject setPhoneNumber:](v9, sel_setPhoneNumber_, v33, v42, v43, v44);
        goto LABEL_32;
      case 3:
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_22D49E000, v33, v34, "#SiriKitGetEntityIntent: no value found from reference resolution", v35, 2u);
          MEMORY[0x230F85DE0](v35, -1, -1);
LABEL_32:
        }
        else
        {

          uint64_t v33 = v9;
        }
LABEL_33:

        break;
      default:
        uint64_t v10 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v10 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          uint64_t v42 = v15;
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v12, v13, "#SiriKitGetEntityIntent: Resolved a contact from reference resolution with identifier: %s", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v15, -1, -1);
          MEMORY[0x230F85DE0](v14, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        }

        uint64_t v33 = v9;
        uint64_t v36 = (void *)MEMORY[0x230F84F70](a1, a2);
        [v33 setIdentifier:v36];

        swift_bridgeObjectRetain();
        uint64_t v37 = (void *)MEMORY[0x230F84F70](a1, a2);
        outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        [v33 setContactIdentifier:v37];

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_22D59FB50;
        type metadata accessor for SiriMatch();
        id v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        *(void *)(v38 + 32) = @nonobjc INObject.init(identifier:display:)(a1, a2, a1, a2);
        uint64_t v42 = v38;
        specialized Array._endMutation()();
        uint64_t v40 = v42;
        uint64_t v41 = (void (*)(uint64_t))off_26E125448[0];
        type metadata accessor for GetContactAttributeIntent();
        v41(v40);
        goto LABEL_33;
    }
  }
}

{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  swift_beginAccess();
  uint64_t v8 = MEMORY[0x230F85EA0](a4);
  if (v8)
  {
    unint64_t v9 = v8;
    switch(a3)
    {
      case 1:
        uint64_t v16 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v16 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          uint64_t v43 = a2;
          uint64_t v44 = v21;
          *(_DWORD *)uint64_t v20 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v22 = String.init<A>(describing:)();
          uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          _os_log_impl(&dword_22D49E000, v18, v19, "#SiriKitGetEntityIntent: Resolved an email from reference resolution: %s", v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v21, -1, -1);
          MEMORY[0x230F85DE0](v20, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }

        if (a2)
        {
          uint64_t v33 = MEMORY[0x230F84F70](a1, a2);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }
        else
        {
          uint64_t v33 = 0;
        }
        -[NSObject setEmailAddress:](v9, sel_setEmailAddress_, v33, v42, v43, v44);
        goto LABEL_32;
      case 2:
        uint64_t v24 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          uint64_t v43 = a2;
          uint64_t v44 = v29;
          *(_DWORD *)uint64_t v28 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v30 = String.init<A>(describing:)();
          uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          _os_log_impl(&dword_22D49E000, v26, v27, "#SiriKitGetEntityIntent: Resolved a phone number from reference resolution: %s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v29, -1, -1);
          MEMORY[0x230F85DE0](v28, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }

        if (a2)
        {
          uint64_t v33 = MEMORY[0x230F84F70](a1, a2);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }
        else
        {
          uint64_t v33 = 0;
        }
        -[NSObject setPhoneNumber:](v9, sel_setPhoneNumber_, v33, v42, v43, v44);
        goto LABEL_32;
      case 3:
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_22D49E000, v33, v34, "#SiriKitGetEntityIntent: no value found from reference resolution", v35, 2u);
          MEMORY[0x230F85DE0](v35, -1, -1);
LABEL_32:
        }
        else
        {

          uint64_t v33 = v9;
        }
LABEL_33:

        break;
      default:
        uint64_t v10 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v10 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          uint64_t v42 = v15;
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v12, v13, "#SiriKitGetEntityIntent: Resolved a contact from reference resolution with identifier: %s", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F85DE0](v15, -1, -1);
          MEMORY[0x230F85DE0](v14, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        }

        uint64_t v33 = v9;
        uint64_t v36 = (void *)MEMORY[0x230F84F70](a1, a2);
        [v33 setIdentifier:v36];

        swift_bridgeObjectRetain();
        uint64_t v37 = (void *)MEMORY[0x230F84F70](a1, a2);
        outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        [v33 setContactIdentifier:v37];

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_22D59FB50;
        type metadata accessor for SiriMatch();
        id v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        *(void *)(v38 + 32) = @nonobjc INObject.init(identifier:display:)(a1, a2, a1, a2);
        uint64_t v42 = v38;
        specialized Array._endMutation()();
        uint64_t v40 = v42;
        uint64_t v41 = (void (*)(uint64_t))off_26E125358[0];
        type metadata accessor for GetContactIntent();
        v41(v40);
        goto LABEL_33;
    }
  }
}

void specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x230F85EA0](a4);
  if (v12)
  {
    id v13 = (id)v12;
    switch(a3)
    {
      case 1:
        uint64_t v21 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v21 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          uint64_t v48 = a5;
          uint64_t v26 = swift_slowAlloc();
          unint64_t v51 = a2;
          uint64_t v52 = v26;
          *(_DWORD *)uint64_t v25 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v27 = String.init<A>(describing:)();
          uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          _os_log_impl(&dword_22D49E000, v23, v24, "#SiriKitGetEntityIntent: Resolved an email from reference resolution: %s", v25, 0xCu);
          swift_arrayDestroy();
          uint64_t v29 = v26;
          a5 = v48;
          MEMORY[0x230F85DE0](v29, -1, -1);
          MEMORY[0x230F85DE0](v25, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 1u);
        }

        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 88))(a1, a2, a5, a6);
        break;
      case 2:
        uint64_t v30 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v30 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v49 = a5;
          uint64_t v35 = swift_slowAlloc();
          unint64_t v51 = a2;
          uint64_t v52 = v35;
          *(_DWORD *)os_log_type_t v34 = 136315138;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v36 = String.init<A>(describing:)();
          uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          _os_log_impl(&dword_22D49E000, v32, v33, "#SiriKitGetEntityIntent: Resolved a phone number from reference resolution: %s", v34, 0xCu);
          swift_arrayDestroy();
          uint64_t v38 = v35;
          a5 = v49;
          MEMORY[0x230F85DE0](v38, -1, -1);
          MEMORY[0x230F85DE0](v34, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 2u);
        }

        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 64))(a1, a2, a5, a6);
        break;
      case 3:
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)static Logger.siriContacts);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl(&dword_22D49E000, v40, v41, "#SiriKitGetEntityIntent: no value found from reference resolution", v42, 2u);
          MEMORY[0x230F85DE0](v42, -1, -1);

          id v13 = v40;
        }
        else
        {
        }
        break;
      default:
        uint64_t v14 = one-time initialization token for siriContacts;
        swift_bridgeObjectRetain();
        if (v14 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = a5;
          uint64_t v50 = swift_slowAlloc();
          uint64_t v19 = v50;
          *(_DWORD *)v18 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22D49E000, v16, v17, "#SiriKitGetEntityIntent: Resolved a contact from reference resolution with identifier: %s", v18, 0xCu);
          swift_arrayDestroy();
          uint64_t v20 = v19;
          a5 = v47;
          MEMORY[0x230F85DE0](v20, -1, -1);
          MEMORY[0x230F85DE0](v18, -1, -1);
        }
        else
        {
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
          outlined consume of SiriKitContactIntentResolvedValue(a1, a2, 0);
        }

        id v13 = v13;
        uint64_t v43 = (void *)MEMORY[0x230F84F70](a1, a2);
        objc_msgSend(v13, sel_setIdentifier_, v43);

        uint64_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 128);
        swift_bridgeObjectRetain();
        v44(a1, a2, a5, a6);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_22D59FB50;
        type metadata accessor for SiriMatch();
        id v46 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        *(void *)(v45 + 32) = @nonobjc INObject.init(identifier:display:)(a1, a2, a1, a2);
        uint64_t v50 = v45;
        specialized Array._endMutation()();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 112))(v50, a5, a6);
        break;
    }
  }
}

uint64_t sub_22D4A5644()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, unint64_t a2, char a3)
{
  specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(a1, a2, a3, v3[4], v3[2], v3[3]);
}

void static SiriKitGetEntityIntent.resolveAddressType(from:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v136 = v6;
  uint64_t v137 = v7;
  MEMORY[0x270FA5388](v6);
  v131 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_25();
  v135 = v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_25();
  uint64_t v133 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_26();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_25();
  uint64_t v129 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_25();
  v134 = v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v127 - v19;
  if (one-time initialization token for siriContacts != -1) {
    goto LABEL_109;
  }
  while (1)
  {
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    uint64_t v130 = v22;
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v24))
    {
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_24();
      uint64_t v140 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      v132 = v25 + 4;
      *(void *)&long long v139 = v3;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      uint64_t v26 = String.init<A>(describing:)();
      *(void *)&long long v139 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v23, (os_log_type_t)v0, "#SiriKitGetEntityIntent resolveAddressType from address %s", v25, 0xCu);
      uint64_t v0 = MEMORY[0x263F8EE58];
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      if (!v3) {
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v0 = MEMORY[0x263F8EE58];

      swift_release_n();
      if (!v3) {
        goto LABEL_74;
      }
    }
    swift_retain();
    v132 = v3;
    CodeGenBase.entity.getter();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v142) {
      break;
    }
    type metadata accessor for UsoEntity_common_PhoneNumber();
    uint64_t v3 = (uint8_t *)v0;
    if ((OUTLINED_FUNCTION_13() & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t v28 = v139;
    swift_retain();
    uint64_t v1 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    swift_release();
    uint64_t v29 = MEMORY[0x263F8EE78];
    uint64_t v140 = MEMORY[0x263F8EE78];
    v131 = *(char **)(v1 + 16);
    uint64_t v127 = v28;
    v128 = v5;
    if (!v131)
    {
LABEL_68:
      swift_bridgeObjectRelease();
      if (*(void *)(v29 + 16))
      {
        uint64_t v74 = OUTLINED_FUNCTION_2_0();
        v75(v74);
        swift_release();
        uint64_t v76 = UsoIdentifier.value.getter();
        uint64_t v78 = v77;
        uint64_t v79 = OUTLINED_FUNCTION_12();
        v80(v79);
      }
      else
      {
        swift_release();
        uint64_t v91 = dispatch thunk of UsoEntity_common_PhoneNumber.label.getter();
        uint64_t v76 = v91;
        if (v92)
        {
          uint64_t v76 = String.convertToContactAttributeLabel.getter(v91, v92);
          uint64_t v78 = v93;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v78 = 0;
        }
      }
      swift_bridgeObjectRetain_n();
      v113 = (void *)Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_0(v114))
      {
        OUTLINED_FUNCTION_24();
        *(void *)&long long v139 = OUTLINED_FUNCTION_18();
        *(_DWORD *)uint64_t v3 = 136315138;
        uint64_t v140 = v76;
        uint64_t v141 = v78;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v115 = String.init<A>(describing:)();
        uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_9(&dword_22D49E000, v117, v118, "#SiriKitGetEntityIntent address was converted to a phone number with value %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        uint64_t v5 = v128;
        OUTLINED_FUNCTION_2();
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      swift_release();
      *(void *)uint64_t v5 = v76;
      *((void *)v5 + 1) = v78;
      char v84 = 1;
      goto LABEL_95;
    }
    unint64_t v30 = 0;
    uint64_t v0 = v136;
    v135 = (void (**)(void))(v137 + 16);
    uint64_t v3 = (uint8_t *)(v137 + 32);
    uint64_t v133 = v137 + 8;
    uint64_t v5 = v131;
    while (v30 < *(void *)(v1 + 16))
    {
      OUTLINED_FUNCTION_16();
      uint64_t v33 = v32 & ~v31;
      uint64_t v35 = *(void *)(v34 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v34 + 16))(v20, v1 + v33 + v35 * v30, v0);
      uint64_t v36 = UsoIdentifier.namespace.getter();
      if (v37)
      {
        if (v36 == 0x707954656E6F6870 && v37 == 0xE900000000000065)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          os_log_type_t v41 = *(void (**)(uint64_t, void (**)(void), uint64_t))v3;
          (*(void (**)(void (**)(void), char *, uint64_t))v3)(v134, v20, v0);
          uint64_t v42 = v140;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_7();
            uint64_t v42 = v140;
          }
          OUTLINED_FUNCTION_19();
          if (v43)
          {
            OUTLINED_FUNCTION_6_0();
            uint64_t v42 = v140;
          }
          *(void *)(v42 + 16) = v0;
          uint64_t v0 = v136;
          v41(v42 + v33 + (void)v5 * v35, v134, v136);
          uint64_t v140 = v42;
          uint64_t v5 = v131;
          goto LABEL_24;
        }
        char v39 = OUTLINED_FUNCTION_21();
        swift_bridgeObjectRelease();
        if (v39) {
          goto LABEL_19;
        }
      }
      OUTLINED_FUNCTION_23();
      v40();
LABEL_24:
      if (v5 == (char *)++v30)
      {
        uint64_t v29 = v140;
        uint64_t v5 = v128;
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    swift_once();
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v140, &demangling cache variable for type metadata for Any?);
  uint64_t v3 = (uint8_t *)v0;
LABEL_27:
  swift_retain();
  CodeGenBase.entity.getter();
  swift_release();
  static UsoEntity_CodeGenConverter.convert(entity:)();
  swift_release();
  if (!v142)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v140, &demangling cache variable for type metadata for Any?);
LABEL_48:
    swift_retain();
    CodeGenBase.entity.getter();
    swift_release();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v142)
    {
      type metadata accessor for UsoEntity_common_PostalAddress();
      if (OUTLINED_FUNCTION_13())
      {
        uint64_t v127 = v139;
        swift_retain();
        uint64_t v59 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_release();
        uint64_t v60 = MEMORY[0x263F8EE78];
        uint64_t v140 = MEMORY[0x263F8EE78];
        uint64_t v20 = *(char **)(v59 + 16);
        v128 = v5;
        if (!v20) {
          goto LABEL_79;
        }
        unint64_t v61 = 0;
        OUTLINED_FUNCTION_27();
        uint64_t v133 = v62;
        v134 = v63;
        while (1)
        {
          if (v61 >= *(void *)(v59 + 16)) {
            goto LABEL_108;
          }
          OUTLINED_FUNCTION_16();
          uint64_t v1 = v65 & ~v64;
          (*(void (**)(void (**)(void), unint64_t, char *))(v66 + 16))(v135, v59 + v1 + *(void *)(v66 + 72) * v61, v5);
          uint64_t v67 = UsoIdentifier.namespace.getter();
          if (v68)
          {
            if (v67 == 0x5473736572646461 && v68 == 0xEB00000000657079)
            {
              swift_bridgeObjectRelease();
LABEL_61:
              v71 = v20;
              v72 = *v134;
              OUTLINED_FUNCTION_11();
              v72();
              uint64_t v73 = v140;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_7();
                uint64_t v73 = v140;
              }
              OUTLINED_FUNCTION_19();
              if (v43)
              {
                OUTLINED_FUNCTION_6_0();
                uint64_t v73 = v140;
              }
              *(void *)(v73 + 16) = v0;
              uint64_t v5 = (char *)v136;
              OUTLINED_FUNCTION_11();
              v72();
              uint64_t v140 = v73;
              uint64_t v20 = v71;
              goto LABEL_66;
            }
            uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v0) {
              goto LABEL_61;
            }
          }
          OUTLINED_FUNCTION_23();
          v70();
LABEL_66:
          if (v20 == (char *)++v61)
          {
            uint64_t v60 = v140;
            uint64_t v5 = v128;
            uint64_t v3 = (uint8_t *)MEMORY[0x263F8EE58];
LABEL_79:
            swift_bridgeObjectRelease();
            if (*(void *)(v60 + 16))
            {
              uint64_t v94 = OUTLINED_FUNCTION_2_0();
              v95(v94);
              swift_release();
              uint64_t v96 = UsoIdentifier.value.getter();
              uint64_t v98 = v97;
              uint64_t v99 = OUTLINED_FUNCTION_12();
              v100(v99);
              goto LABEL_85;
            }
            swift_release();
            uint64_t v104 = dispatch thunk of UsoEntity_common_PostalAddress.label.getter();
            if (v105)
            {
              uint64_t v96 = String.convertToContactAttributeLabel.getter(v104, v105);
              uint64_t v98 = v106;
              swift_bridgeObjectRelease();
LABEL_85:
              *(void *)&long long v139 = v96;
            }
            else
            {
              if (UsoEntity_common_PostalAddress.requestedAddressField.getter() == 5)
              {
                uint64_t v96 = 0;
                uint64_t v98 = 0;
              }
              else
              {
                ContactNLIntent.ContactPostalAddressField.rawValue.getter();
                uint64_t v96 = v125;
                uint64_t v98 = v126;
              }
              *(void *)&long long v139 = v96;
            }
            *((void *)&v139 + 1) = v98;
            swift_bridgeObjectRetain_n();
            v107 = (void *)Logger.logObject.getter();
            os_log_type_t v108 = static os_log_type_t.debug.getter();
            if (OUTLINED_FUNCTION_4_0(v108))
            {
              OUTLINED_FUNCTION_24();
              uint64_t v138 = OUTLINED_FUNCTION_18();
              *(_DWORD *)uint64_t v3 = 136315138;
              uint64_t v140 = v96;
              uint64_t v141 = v98;
              swift_bridgeObjectRetain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              uint64_t v109 = String.init<A>(describing:)();
              uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, &v138);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_9(&dword_22D49E000, v111, v112, "#SiriKitGetEntityIntent address was converted to a postal address with value %s");
              swift_arrayDestroy();
              OUTLINED_FUNCTION_2();
              uint64_t v5 = v128;
              OUTLINED_FUNCTION_2();
              swift_release();
            }
            else
            {

              swift_release();
              swift_bridgeObjectRelease_n();
            }
            swift_release();
            swift_beginAccess();
            *(_OWORD *)uint64_t v5 = v139;
            char v84 = 2;
LABEL_95:
            v5[16] = v84;
            goto LABEL_96;
          }
        }
      }
    }
    else
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v140, &demangling cache variable for type metadata for Any?);
    }
    v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_22D49E000, v81, v82, "#SiriKitGetEntityIntent address did not convert to a known contact address type", v83, 2u);
      OUTLINED_FUNCTION_2();
      swift_release();
    }
    else
    {

      swift_release();
    }
LABEL_74:
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    char v84 = -1;
    goto LABEL_95;
  }
  type metadata accessor for UsoEntity_common_EmailAddress();
  if ((OUTLINED_FUNCTION_13() & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v127 = v139;
  swift_retain();
  uint64_t v20 = (char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  swift_release();
  uint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v140 = MEMORY[0x263F8EE78];
  uint64_t v45 = *((void *)v20 + 2);
  v128 = v5;
  if (!v45) {
    goto LABEL_75;
  }
  unint64_t v46 = 0;
  OUTLINED_FUNCTION_27();
  v134 = v47;
  v135 = v48;
  v131 = (char *)v3;
  while (2)
  {
    if (v46 >= *((void *)v20 + 2)) {
      goto LABEL_107;
    }
    OUTLINED_FUNCTION_16();
    (*(void (**)(uint64_t, char *, char *))(v51 + 16))(v1, &v20[(v50 & ~v49) + *(void *)(v51 + 72) * v46], v5);
    uint64_t v52 = UsoIdentifier.namespace.getter();
    if (v53)
    {
      if (v52 == 0x7079546C69616D65 && v53 == 0xE900000000000065)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v0 = OUTLINED_FUNCTION_21();
        swift_bridgeObjectRelease();
        if ((v0 & 1) == 0) {
          goto LABEL_38;
        }
      }
      uint64_t v56 = v45;
      v57 = *v135;
      OUTLINED_FUNCTION_11();
      v57();
      uint64_t v58 = v140;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_7();
        uint64_t v58 = v140;
      }
      OUTLINED_FUNCTION_19();
      if (v43)
      {
        OUTLINED_FUNCTION_6_0();
        uint64_t v58 = v140;
      }
      *(void *)(v58 + 16) = v0;
      uint64_t v5 = (char *)v136;
      OUTLINED_FUNCTION_11();
      v57();
      uint64_t v140 = v58;
      uint64_t v45 = v56;
      uint64_t v3 = (uint8_t *)v131;
    }
    else
    {
LABEL_38:
      OUTLINED_FUNCTION_23();
      v55();
    }
    if (v45 != ++v46) {
      continue;
    }
    break;
  }
  uint64_t v44 = v140;
  uint64_t v5 = v128;
LABEL_75:
  swift_bridgeObjectRelease();
  if (*(void *)(v44 + 16))
  {
    uint64_t v85 = v136;
    uint64_t v86 = v137;
    uint64_t v87 = v129;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v137 + 16))(v129, v44 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80)), v136);
    swift_release();
    uint64_t v88 = UsoIdentifier.value.getter();
    uint64_t v90 = v89;
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v85);
  }
  else
  {
    swift_release();
    uint64_t v101 = dispatch thunk of UsoEntity_common_EmailAddress.label.getter();
    uint64_t v88 = v101;
    if (v102)
    {
      uint64_t v88 = String.convertToContactAttributeLabel.getter(v101, v102);
      uint64_t v90 = v103;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = 0;
    }
  }
  swift_bridgeObjectRetain_n();
  v119 = (void *)Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_0(v120))
  {
    OUTLINED_FUNCTION_24();
    *(void *)&long long v139 = OUTLINED_FUNCTION_18();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v140 = v88;
    uint64_t v141 = v90;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v121 = String.init<A>(describing:)();
    uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9(&dword_22D49E000, v123, v124, "#SiriKitGetEntityIntent address was converted to an email with value %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t v5 = v128;
    OUTLINED_FUNCTION_2();
    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  swift_release();
  *(void *)uint64_t v5 = v88;
  *((void *)v5 + 1) = v90;
  v5[16] = 0;
LABEL_96:
  OUTLINED_FUNCTION_8();
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

uint64_t dispatch thunk of SiriKitContactIntent.siriInferenceContact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SiriKitContactIntent.me.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriKitContactIntent.isMe.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SiriKitContactIntent.contactIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SiriKitContactIntent.requestedName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SiriKitContactIntent.handleTypePreference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SiriKitContactIntent.value(forSlot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.contactRelation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.organizationName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.requestedRelationship.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.requestedCompanyName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.fullName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.contactIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.contactIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t outlined copy of SpecifyingContactAddressType(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SpecifyingContactAddressType(uint64_t a1)
{
  return outlined consume of SiriKitContactIntentResolvedValue(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SpecifyingContactAddressType(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SpecifyingContactAddressType(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of SiriKitContactIntentResolvedValue(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of SiriKitContactIntentResolvedValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecifyingContactAddressType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpecifyingContactAddressType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SpecifyingContactAddressType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SpecifyingContactAddressType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SpecifyingContactAddressType()
{
  return &type metadata for SpecifyingContactAddressType;
}

uint64_t dispatch thunk of SiriKitGetEntityIntentResponse.contactIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unsigned int v3 = result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unsigned int v3 = (uint64_t)result;
  return result;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue))
                  - 8);
  uint64_t v16 = a4 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v16, v8);
  }
  swift_release();
  return (size_t)v13;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v1;
  char v11 = v10;
  if (v12)
  {
    unint64_t v13 = *(void *)(v1 + 24);
    int64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < v0)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return;
      }
      int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= v0) {
        int64_t v14 = v0;
      }
    }
  }
  else
  {
    int64_t v14 = v0;
  }
  uint64_t v15 = *(void *)(v1 + 16);
  if (v14 <= v15) {
    uint64_t v16 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v16 = v14;
  }
  if (!v16)
  {
    uint64_t v20 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(v2);
  uint64_t v17 = *(void *)(v8(0) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  size_t v21 = _swift_stdlib_malloc_size(v20);
  if (!v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v21 - v19 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_24;
  }
  v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(v21 - v19) / v18);
LABEL_19:
  uint64_t v23 = *(void *)(v8(0) - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)v20 + v24;
  uint64_t v26 = v9 + v24;
  if (v11)
  {
    v6(v26, v15, v25);
    *(void *)(v9 + 16) = 0;
  }
  else
  {
    v4(v26, v15, v25);
  }
  swift_release();
  OUTLINED_FUNCTION_8();
}

uint64_t outlined destroy of UsoEntity_common_Person.DefinedValues?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_23();
  v3();
  return a1;
}

uint64_t outlined consume of SiriKitContactIntentResolvedValue(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return *(void *)(v0 - 208);
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

BOOL OUTLINED_FUNCTION_4_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_6_0()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_7()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_20()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_21()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for SiriKitIntentHandler();
  v0[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[5] = v4;
  v0[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  id v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22D49E000, v2, v3, "#GetContactAttributeHandleIntentStrategy makeIntentExecutionBehavior", v4, 2u);
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v9 = (void *)v0[3];
  uint64_t v8 = v0[4];
  char v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  swift_allocObject();
  swift_retain();
  char v11 = ContactResolver.init()();
  char v12 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for GetContactAttributeIntent();
  unint64_t v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  int64_t v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[25] = v2;
  v1[26] = v0;
  v1[24] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[27] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[28] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[29] = v6;
  v1[30] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v7);
  v1[31] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[32] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[33] = v9;
  v1[34] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for Locale();
  v1[35] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[36] = v11;
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v12);
  v1[39] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for ContactsSnippetPluginModel();
  v1[40] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[41] = v14;
  v1[42] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactAttributeSnippetModel = type metadata accessor for GetContactAttributeSnippetModel();
  v1[43] = ContactAttributeSnippetModel;
  OUTLINED_FUNCTION_1(ContactAttributeSnippetModel);
  v1[44] = v16;
  v1[45] = OUTLINED_FUNCTION_2_1();
  uint64_t v17 = type metadata accessor for NLContextUpdate();
  v1[46] = v17;
  OUTLINED_FUNCTION_1(v17);
  v1[47] = v18;
  v1[48] = OUTLINED_FUNCTION_2_1();
  uint64_t v19 = type metadata accessor for Signpost.OpenSignpost();
  v1[49] = v19;
  OUTLINED_FUNCTION_10_0(v19);
  v1[50] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v20, v21, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t ContactAttributeIntent;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void *, void *, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  void *v37;
  uint64_t ContactAttribute;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  Class isa;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint8_t *bufa;
  uint8_t *buf;
  void *v83;
  os_log_type_t typea;
  void *type;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92[2];
  uint64_t v93;
  uint64_t v94;

  uint64_t v93 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 520) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "MakeGetContactAttributeIntentHandledResponse";
  *(void *)(v5 + 8) = 44;
  *(unsigned char *)(v5 + 16) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  uint64_t v6 = (void *)IntentResolutionRecord.intentResponse.getter();
  ContactAttributeIntent = outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(v6);
  if (!ContactAttributeIntent) {
    goto LABEL_10;
  }
  uint64_t v8 = (void *)ContactAttributeIntent;
  if (!*(void *)(ContactAttributeIntent + 16))
  {
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v17 = *(void *)(v0 + 400);
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_19:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    OUTLINED_FUNCTION_5_1();
    outlined destroy of Signpost.OpenSignpost(v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
    goto LABEL_20;
  }
  uint64_t v9 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v10 = objc_msgSend(v9, sel_isMe);

  if (v10 && (LOBYTE(v92[0]) = 2, MEMORY[0x230F85170](v10, v92), v10, (v92[0] & 1) != 0))
  {
    uint64_t v18 = *(void **)(v0 + 208);
    uint64_t v9 = (void *)v18[10];
    uint64_t v19 = v18[11];
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v18 + 7, (uint64_t)v9);
    uint64_t v12 = (void *)(*(uint64_t (**)(void *, uint64_t))(v19 + 24))(v9, v19);
    LODWORD(v9) = 1;
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 208);
    uint64_t v12 = (void *)v11[10];
    uint64_t v13 = v11[11];
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v11 + 7, (uint64_t)v12);
    if (!v8[2])
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v10 = v14;
    uint64_t v15 = v8[4];
    uint64_t v9 = (void *)v8[5];
    uint64_t v16 = *(uint64_t (**)(uint64_t, void *, void *, uint64_t))(v13 + 8);
    swift_bridgeObjectRetain();
    uint64_t v12 = (void *)v16(v15, v9, v12, v13);
    swift_bridgeObjectRelease();
    LODWORD(v9) = 0;
  }
  *(unsigned char *)(v0 + 524) = (_BYTE)v9;
  *(void *)(v0 + 408) = v12;
  if (!v12)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
    if (v8[2])
    {
      uint64_t v32 = v31;
      uint64_t v17 = *(void *)(v0 + 400);
      uint64_t v33 = v8[4];
      uint64_t v34 = v8[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *uint64_t v32 = v33;
      v32[1] = v34;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_19;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v10 = objc_msgSend(v20, sel_contactAttributeToGet);
  *(void *)(v0 + 416) = v10;

  if (!v10)
  {
    uint64_t v17 = *(void *)(v0 + 400);
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_19;
  }
  if (one-time initialization token for siriContacts != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.siriContacts);
  uint64_t v22 = v10;
  uint64_t v23 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.debug.getter();
  uint64_t v86 = v9;
  if (os_log_type_enabled(v23, v24))
  {
    typea = v24;
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    v92[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    bufa = v25;
    uint64_t v89 = v22;
    uint64_t v26 = v22;
    unint64_t v27 = objc_msgSend(v26, sel_description);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v22 = v89;
    _os_log_impl(&dword_22D49E000, v23, typea, "#GetContactAttributeHandleIntentStrategy Attempting to create views for %s lookup.", bufa, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v37 = (void *)IntentResolutionRecord.intent.getter();
  ContactAttribute = outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(v37, (SEL *)&selRef_contactHandleMatches);
  *(void *)(v0 + 424) = ContactAttribute;
  char v39 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v40 = outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(v39, (SEL *)&selRef_contactHandleAlternatives);
  *(void *)(v0 + 432) = v40;
  os_log_type_t v41 = specialized ContactsStrategy.handles(matches:alternatives:)(ContactAttribute, v40);
  *(void *)(v0 + 440) = v41;
  static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)(v12, v41, objc_msgSend(v22, sel_contactAttributeType), 0);
  objc_msgSend(v22, sel_contactAttributeType);
  if (specialized ContactsStrategy.isSmartEnabled.getter())
  {
    uint64_t v42 = Logger.logObject.getter();
    char v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_22D49E000, v42, v43, "#GetContactAttributeHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet", v44, 2u);
      OUTLINED_FUNCTION_2();
    }
    uint64_t v45 = *(void *)(v0 + 208);

    unint64_t v46 = v45 + 16;
    uint64_t v47 = *(void *)(v45 + 120);
    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v48;
    *uint64_t v48 = v0;
    v48[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v49 = *(void *)(v0 + 360);
    return static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:)(v49, (uint64_t)v12, (uint64_t)v22, v41, v46, v47);
  }
  uint64_t v50 = (void *)IntentResolutionRecord.intent.getter();
  Class isa = (Class)objc_msgSend(v50, sel_isMe);

  if (!isa)
  {
    type metadata accessor for NSNumber();
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  }
  v80 = v40;
  buf = (uint8_t *)ContactAttribute;
  uint64_t v52 = *(void *)(v0 + 208);
  v83 = (void *)(v52 + 16);
  outlined init with copy of DeviceState(v52 + 16, v0 + 48);
  uint64_t v53 = *(void *)(v52 + 104);
  *(void *)(v0 + 16) = v41;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = isa;
  *(void *)(v0 + 40) = v22;
  *(void *)(v0 + 88) = v53;
  v54 = v22;
  swift_retain();
  v55 = v12;
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of GetContactAttributeViewBuilder(v0 + 16);
  uint64_t v90 = v54;
  uint64_t v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.debug.getter();
  type = v55;
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    v92[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v59 = v90;
    uint64_t v60 = objc_msgSend(v59, sel_description);
    unint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22D49E000, v56, v57, "#GetContactAttributeHandleIntentStrategy Attempting to create intentHandledResponse for %s lookup.", v58, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v65 = *(void *)(v0 + 288);
  uint64_t v64 = *(void *)(v0 + 296);
  uint64_t v66 = *(void *)(v0 + 280);
  uint64_t v67 = *(void *)(v0 + 240);
  uint64_t v68 = *(void *)(v0 + 208);
  __swift_project_boxed_opaque_existential_1(v83, *(void *)(v68 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  v69 = Locale.identifier.getter();
  v71 = v70;
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
  __swift_project_boxed_opaque_existential_1(v83, *(void *)(v68 + 40));
  v72 = DeviceState.isVox.getter();
  GetContactAttributeCATs.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:)((unint64_t)buf, v80, v90, type, v86, v69, v71, v72 & 1, v67, 0);
  uint64_t v73 = *(void *)(v0 + 376);
  uint64_t v91 = *(void *)(v0 + 384);
  uint64_t v74 = *(void *)(v0 + 368);
  v75 = *(void *)(v0 + 232);
  uint64_t v76 = *(void *)(v0 + 216);
  uint64_t v87 = *(void *)(v0 + 240);
  uint64_t v88 = *(void *)(v0 + 224);
  uint64_t v77 = *(uint64_t **)(v0 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v76, v91, v74);
  __swift_storeEnumTagSinglePayload(v76, 0, 1, v74);
  uint64_t v78 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v79 = MEMORY[0x263F6FFF0];
  v77[3] = v78;
  v77[4] = v79;
  __swift_allocate_boxed_opaque_existential_1(v77);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v76, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v87, v88);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v91, v74);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_12_0();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
  return v35();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = *(void *)(v0 + 408);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 208);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 352) + 16))(v1, *(void *)(v0 + 360), *(void *)(v0 + 344));
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, *MEMORY[0x263F6CE40], v2);
  type metadata accessor for GetContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  *(void *)(v0 + 456) = CATWrapperSimple.__allocating_init(options:globals:)();
  __swift_project_boxed_opaque_existential_1((void *)(v7 + 16), *(void *)(v7 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v8 = Locale.identifier.getter();
  uint64_t v10 = v9;
  *(void *)(v0 + 464) = v9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_project_boxed_opaque_existential_1((void *)(v7 + 16), *(void *)(v7 + 40));
  uint64_t v11 = DeviceState.isVox.getter();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v12;
  char *v12 = v0;
  v12[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  uint64_t v14 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 416);
  uint64_t v16 = *(unsigned char *)(v0 + 524);
  return GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(v14, v13, v15, v18, v16, v8, v10, v11 & 1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t *, uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = v0[52];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[41];
  uint64_t v17 = v0[42];
  uint64_t v19 = (void *)v0[61];
  uint64_t v16 = v0[40];
  uint64_t v4 = v0[26];
  uint64_t v5 = DialogExecutionResult.responseViewIDForManifest.getter();
  uint64_t v7 = v6;
  static DialogPhase.completion.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v8[2] = v4;
  v8[3] = v2;
  v8[4] = v5;
  v8[5] = v7;
  v8[6] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[62] = ResponseFactory.init()();
  v0[20] = v16;
  v0[21] = lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v17, v16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22D59FB50;
  *(void *)(v10 + 32) = v19;
  uint64_t v20 = v10;
  specialized Array._endMutation()();
  v0[63] = v20;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB10] + MEMORY[0x263F6FB10]);
  uint64_t v11 = v19;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[64] = (uint64_t)v12;
  char *v12 = v0;
  v12[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  uint64_t v13 = v0[34];
  uint64_t v14 = v0[24];
  return v18(v14, v0 + 17, v20, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = v1 + 136;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = *(void **)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v16 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 256);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_12_0();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v5 + 8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v10();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 328);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v11);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_5_1();
  outlined destroy of Signpost.OpenSignpost(v2 + 8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v8();
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 480) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    *(void *)(v4 + 488) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

char *closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8 = type metadata accessor for ResponseMode();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, a3, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
  OutputGenerationManifest.nlContextUpdate.setter();
  swift_bridgeObjectRetain();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t result = (char *)objc_msgSend(a6, sel_contactAttributeType);
  if ((unint64_t)(result - 6) <= 3)
  {
    static ResponseMode.voiceForward.getter();
    return (char *)OutputGenerationManifest.responseMode.setter();
  }
  return result;
}

uint64_t GetContactAttributeHandleIntentStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsUnsupportedValueStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 168, 7);
}

uint64_t type metadata accessor for GetContactAttributeHandleIntentStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeHandleIntentStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactAttributeHandleIntentStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t specialized ContactsStrategy.handles(matches:alternatives:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
  }
  else
  {
    uint64_t v2 = a2;
    if (a2) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance GetContactAttributeHandleIntentStrategy()
{
  return MEMORY[0x270F66360]();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return MEMORY[0x270F66378](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return MEMORY[0x270F66380](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return MEMORY[0x270F66358](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return MEMORY[0x270F66370](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  return MEMORY[0x270F66368](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentStrategy = type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  return MEMORY[0x270F66348](a1, a2, ContactAttributeHandleIntentStrategy, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow;
  return GetContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)();
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in GetContactAttributeHandleIntentStrategy()
{
  return lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for GetContactAttributeHandleIntentStrategy);
}

uint64_t outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_contactIdentifiers);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Signpost.OpenSignpost();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  type metadata accessor for ContactAttribute();
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined destroy of GetContactAttributeViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t _s11SiriKitFlow0C8Activity_pSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *partial apply for closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  return closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_10_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t ContactsDelegateFlow.__allocating_init(flowFactory:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsDelegateFlow.init(flowFactory:)(a1);
  return v2;
}

uint64_t ContactsDelegateFlow.init(flowFactory:)(long long *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_restrictionGuards;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  uint64_t v4 = type metadata accessor for CommonFlowGuard();
  OUTLINED_FUNCTION_1(v4);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22D59FD40;
  static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
  static CommonFlowGuard.disallowInSharingMode.getter();
  *(void *)(v1 + v3) = v5;
  type metadata accessor for ContactsFlowState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with take of DeviceState(a1, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory);
  return v1;
}

uint64_t type metadata accessor for ContactsFlowState(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsFlowState);
}

BOOL ContactsDelegateFlow.on(input:)(uint64_t a1)
{
  uint64_t v38 = type metadata accessor for ContactsFlowState(0);
  OUTLINED_FUNCTION_15_0();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v36 = (uint64_t)v31 - v6;
  uint64_t v34 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = v13 - v12;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v35(v14, a1, v8);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = a1;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = OUTLINED_FUNCTION_35();
    uint64_t v33 = v5;
    v31[2] = v20;
    v40[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    v31[1] = v19 + 4;
    Input.parse.getter();
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = OUTLINED_FUNCTION_30();
    v24(v23);
    _os_log_impl(&dword_22D49E000, v16, v17, "#ContactsDelegateFlow on(input:) %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v33;
    OUTLINED_FUNCTION_2();
    a1 = v32;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_30();
    v26(v25);
  }

  uint64_t v27 = v37 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  swift_beginAccess();
  uint64_t v28 = v36;
  outlined init with copy of ContactsFlowState(v27, v36);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of ContactsFlowState(v28, (void (*)(void))type metadata accessor for ContactsFlowState);
  if (EnumCaseMultiPayload == 2)
  {
    v35((uint64_t)v5, a1, v14);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_39();
    outlined assign with take of ContactsFlowState((uint64_t)v5, v27);
    swift_endAccess();
  }
  return EnumCaseMultiPayload == 2;
}

uint64_t ContactsDelegateFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t ContactsDelegateFlow.execute()()
{
  OUTLINED_FUNCTION_4();
  v1[11] = v2;
  v1[12] = v0;
  uint64_t v3 = type metadata accessor for Input();
  v1[13] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[14] = v4;
  v1[15] = *(void *)(v5 + 64);
  v1[16] = OUTLINED_FUNCTION_31();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = type metadata accessor for ContactsFlowState(0);
  v1[20] = OUTLINED_FUNCTION_31();
  v1[21] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 200) = v4;
  swift_task_dealloc();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  if (v0[25])
  {
    uint64_t v1 = v0[16];
    uint64_t v2 = v0[13];
    uint64_t v3 = v0[14];
    static ExecuteResponse.complete(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_22D49E000, v4, v5, "#ContactsDelegateFlow FlowFactory returned nil for getFlow, returning .complete response", v6, 2u);
      OUTLINED_FUNCTION_2();
    }
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[20];
    uint64_t v9 = v0[16];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[14];
    uint64_t v12 = v0[12];

    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_39();
    outlined assign with take of ContactsFlowState(v8, v12 + v7);
    swift_endAccess();
    static ExecuteResponse.complete()();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v13();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 216) = v4;
  swift_task_dealloc();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  swift_retain_n();
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_1(v3))
  {
    OUTLINED_FUNCTION_19_0();
    uint64_t v11 = OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_36(4.8149e-34);
    uint64_t v4 = String.init<A>(describing:)();
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    OUTLINED_FUNCTION_38(&dword_22D49E000, v6, v7, "#ContactsDelegateFlow Returning unsupported flow after encountering unexpected state %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = *(void *)(v0 + 168);
  static ExecuteResponse.complete(next:)();
  swift_release();
  outlined destroy of ContactsFlowState(v8, (void (*)(void))type metadata accessor for ContactsFlowState);
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  swift_retain_n();
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_6_1(v3))
  {
    OUTLINED_FUNCTION_19_0();
    uint64_t v11 = OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_36(4.8149e-34);
    uint64_t v4 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    OUTLINED_FUNCTION_38(&dword_22D49E000, v6, v7, "#ContactsDelegateFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = *(void *)(v0 + 168);
  static ExecuteResponse.complete()();
  outlined destroy of ContactsFlowState(v8, (void (*)(void))type metadata accessor for ContactsFlowState);
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v9();
}

{
  void *v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_1(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v3);
    OUTLINED_FUNCTION_8_1(&dword_22D49E000, v4, v5, "#ContactsDelegateFlow FlowFactory returned nil for getFlow, returning .complete response");
    OUTLINED_FUNCTION_2();
  }
  uint64_t v6 = v0[22];
  uint64_t v7 = v0[20];
  uint64_t v13 = v0[16];
  uint64_t v8 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[12];

  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_39();
  outlined assign with take of ContactsFlowState(v7, v10 + v6);
  swift_endAccess();
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v11();
}

uint64_t ContactsDelegateFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(unint64_t, uint64_t, uint64_t), void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  uint64_t v17 = v16[21];
  uint64_t v18 = v16[12];
  uint64_t v19 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  v16[22] = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  uint64_t v20 = v18 + v19;
  swift_beginAccess();
  outlined init with copy of ContactsFlowState(v20, v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(void, void, void))(v16[14] + 32))(v16[16], v16[21], v16[13]);
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      v16[23] = __swift_project_value_buffer(v36, (uint64_t)static Logger.siriContacts);
      uint64_t v37 = (void *)Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_6_1(v38))
      {
        uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v39);
        OUTLINED_FUNCTION_8_1(&dword_22D49E000, v40, v41, "#ContactsDelegateFlow runningContactsFlow ...");
        OUTLINED_FUNCTION_2();
      }

      uint64_t v42 = (void *)swift_task_alloc();
      v16[24] = v42;
      *uint64_t v42 = v16;
      v42[1] = ContactsDelegateFlow.execute();
      OUTLINED_FUNCTION_4_2();
      uint64_t result = ContactsDelegateFlow.getFlow(for:)();
      break;
    case 2u:
      v69 = (void *)(OUTLINED_FUNCTION_28_0((void *)(v16[12]
                                                       + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory))
                     + 64);
      uint64_t v68 = *v69 + *(int *)*v69;
      uint64_t v45 = (void *)swift_task_alloc();
      v16[26] = v45;
      *uint64_t v45 = v16;
      v45[1] = ContactsDelegateFlow.execute();
      OUTLINED_FUNCTION_4_2();
      uint64_t result = v49(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, v68, v69, a14, a15, a16);
      break;
    case 3u:
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      v55 = (void *)OUTLINED_FUNCTION_21_0(v54, (uint64_t)static Logger.siriContacts);
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_6_1(v56))
      {
        v57 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v57);
        OUTLINED_FUNCTION_8_1(&dword_22D49E000, v58, v59, "#ContactsDelegateFlow Ending the flow after encountering .finished state");
        OUTLINED_FUNCTION_2();
      }

      static ExecuteResponse.complete()();
      goto LABEL_22;
    default:
      uint64_t v21 = v16[12];
      a12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v16[14] + 32);
      a12(v16[18], v16[21], v16[13]);
      uint64_t v22 = *(void *)(v21 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory + 24);
      uint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v21 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory), v22);
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v23 + 88))(*(void *)(v21 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_restrictionGuards), v22, v23);
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      a13 = v16 + 10;
      uint64_t v25 = type metadata accessor for Logger();
      uint64_t v26 = OUTLINED_FUNCTION_21_0(v25, (uint64_t)static Logger.siriContacts);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_22D49E000, v26, v27, "#ContactsDelegateFlow runningGuardFlow ...", v28, 2u);
        OUTLINED_FUNCTION_2();
      }
      uint64_t v30 = v16[17];
      uint64_t v29 = v16[18];
      uint64_t v31 = v16[14];
      uint64_t v33 = v16[12];
      uint64_t v32 = v16[13];
      a10 = v16[11];

      v16[10] = v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v29, v32);
      a11 = v24;
      unint64_t v34 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v33;
      a12(v35 + v34, v30, v32);
      type metadata accessor for GuardFlow();
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v32);
      swift_release();
LABEL_22:
      OUTLINED_FUNCTION_13_0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_4_2();
      uint64_t result = v61(v60, v61, v62, v63, v64, v65, v66, v67, a9, a10, a11, a12, a13, a14, a15, a16);
      break;
  }
  return result;
}

uint64_t closure #1 in ContactsDelegateFlow.execute()(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return ContactsDelegateFlow.handleGuardFlowResult(_:input:)(*a1, a3);
}

uint64_t ContactsDelegateFlow.handleGuardFlowResult(_:input:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for ContactsFlowState(0);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  if (static GuardFlowResult.== infix(_:_:)())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = OUTLINED_FUNCTION_21_0(v9, (uint64_t)static Logger.siriContacts);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_22D49E000, v10, v11, "#ContactsDelegateFlow Moved state to runningContactsFlow", v12, 2u);
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for Input();
    OUTLINED_FUNCTION_15_0();
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v8, a2);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v22[0] = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v18 = GuardFlowResult.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v15, v16, "#ContactsDelegateFlow GuardFlow yielded an ExitValue that is either invalid or not passing: %s. Ending the flow.", v17, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = v3 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  OUTLINED_FUNCTION_39();
  outlined assign with take of ContactsFlowState(v8, v20);
  return swift_endAccess();
}

uint64_t ContactsDelegateFlow.getFlow(for:)()
{
  OUTLINED_FUNCTION_4();
  v1[15] = v2;
  v1[16] = v0;
  uint64_t v3 = type metadata accessor for Input();
  v1[17] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[18] = v4;
  v1[19] = swift_task_alloc();
  v1[20] = type metadata accessor for Signpost.OpenSignpost();
  v1[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v1[22] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[23] = v6;
  v1[24] = OUTLINED_FUNCTION_31();
  v1[25] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  OUTLINED_FUNCTION_29_0();
  Input.parse.getter();
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  *(void *)(v0 + 40) = MEMORY[0x263F8D310];
  uint64_t v3 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 24) = v2;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  unint64_t v19 = *(void *)(v0 + 128);
  uint64_t v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22D59FD50;
  outlined init with copy of DeviceState(v0 + 16, v7 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(v5 + 20);
  *(_DWORD *)(v0 + 304) = v8;
  uint64_t v9 = v4 + v8;
  *(void *)uint64_t v9 = "GetFlowForInput";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v10 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory;
  *(void *)(v0 + 208) = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory;
  uint64_t v11 = *(void *)(v19 + v10 + 24);
  uint64_t v12 = *(void *)(v19 + v10 + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v19 + v10), v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v13;
  char *v13 = v0;
  v13[1] = ContactsDelegateFlow.getFlow(for:);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_2();
  return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v14, v15, v16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 224) = v4;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 240) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 248) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 264) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 272) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 288) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 296) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t ContactsDelegateFlow.getFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  os_log_type_t v27 = (void *)v24[28];
  if (v27)
  {
    type metadata accessor for GetContactIntent();
    if (swift_dynamicCastClass())
    {
      uint64_t v28 = one-time initialization token for siriContacts;
      id v29 = v27;
      if (v28 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      uint64_t v31 = (void *)OUTLINED_FUNCTION_21_0(v30, (uint64_t)static Logger.siriContacts);
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34(v32))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_26_0(&dword_22D49E000, v33, v34, "#ContactsDelegateFlow Returning GetContactFlow");
        OUTLINED_FUNCTION_2();
      }
LABEL_19:
      uint64_t v47 = v24[16];

      OUTLINED_FUNCTION_20_0();
      uint64_t v48 = OUTLINED_FUNCTION_24_0();
      v49(v48);

      OUTLINED_FUNCTION_5_2();
      OUTLINED_FUNCTION_23_0();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of ContactsFlowState(v47, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
      uint64_t v50 = OUTLINED_FUNCTION_2_2();
      v51(v50);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_12_1();
      OUTLINED_FUNCTION_4_2();
      return v54(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16);
    }
    type metadata accessor for GetContactAttributeIntent();
    if (swift_dynamicCastClass())
    {
      uint64_t v35 = one-time initialization token for siriContacts;
      id v36 = v27;
      if (v35 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v31 = (void *)OUTLINED_FUNCTION_21_0(v37, (uint64_t)static Logger.siriContacts);
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34(v38))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_26_0(&dword_22D49E000, v39, v40, "#ContactsDelegateFlow Returning GetContactAttributeFlow");
        OUTLINED_FUNCTION_2();
      }
      goto LABEL_19;
    }
    type metadata accessor for ModifyContactAttributeIntent();
    if (swift_dynamicCastClass())
    {
      uint64_t v41 = one-time initialization token for siriContacts;
      id v42 = v27;
      if (v41 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      uint64_t v31 = (void *)OUTLINED_FUNCTION_21_0(v43, (uint64_t)static Logger.siriContacts);
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34(v44))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_26_0(&dword_22D49E000, v45, v46, "#ContactsDelegateFlow Returning ModifyContactAttributeFlow)");
        OUTLINED_FUNCTION_2();
      }
      goto LABEL_19;
    }
  }
  Parse.isLearnPronunciation.getter();
  if (v61)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    uint64_t v63 = (void *)OUTLINED_FUNCTION_21_0(v62, (uint64_t)static Logger.siriContacts);
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_6_1(v64))
    {
      uint64_t v65 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v65);
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v66, v67, "#ContactsDelegateFlow Returning UnsupportedLearnPronunciationFlow");
      OUTLINED_FUNCTION_2();
    }
    uint64_t v68 = v24[26];
    uint64_t v69 = v24[16];

    v105 = (void *)(OUTLINED_FUNCTION_28_0((void *)(v69 + v68)) + 56);
    uint64_t v104 = *v105 + *(int *)*v105;
    v70 = (void *)swift_task_alloc();
    v24[29] = v70;
    void *v70 = v24;
    v70[1] = ContactsDelegateFlow.getFlow(for:);
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_4_2();
  }
  else
  {
    Parse.isRequestForMultipleContacts.getter();
    if (v79)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v80 = type metadata accessor for Logger();
      v81 = (void *)OUTLINED_FUNCTION_21_0(v80, (uint64_t)static Logger.siriContacts);
      os_log_type_t v82 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_6_1(v82))
      {
        v83 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v83);
        OUTLINED_FUNCTION_8_1(&dword_22D49E000, v84, v85, "#ContactsDelegateFlow Returning UnsupportedRequestForMultipleContacts Flow");
        OUTLINED_FUNCTION_2();
      }
      uint64_t v86 = v24[26];
      uint64_t v87 = v24[16];

      v105 = (void *)(OUTLINED_FUNCTION_28_0((void *)(v87 + v86)) + 80);
      uint64_t v104 = *v105 + *(int *)*v105;
      uint64_t v88 = (void *)swift_task_alloc();
      v24[32] = v88;
      *uint64_t v88 = v24;
      v88[1] = ContactsDelegateFlow.getFlow(for:);
      OUTLINED_FUNCTION_25_0();
      OUTLINED_FUNCTION_4_2();
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v89 = v24[15];
      uint64_t v91 = v24[18];
      uint64_t v90 = v24[19];
      uint64_t v92 = v24[17];
      uint64_t v93 = type metadata accessor for Logger();
      __swift_project_value_buffer(v93, (uint64_t)static Logger.siriContacts);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v89, v92);
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v94, v95))
      {
        a10 = v24[22];
        uint64_t v97 = v24[18];
        uint64_t v96 = v24[19];
        uint64_t v106 = v24[17];
        uint64_t v98 = (uint8_t *)swift_slowAlloc();
        a13 = OUTLINED_FUNCTION_35();
        *(_DWORD *)uint64_t v98 = 136315138;
        a9 = v98 + 4;
        Input.parse.getter();
        uint64_t v99 = String.init<A>(describing:)();
        v24[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v106);
        _os_log_impl(&dword_22D49E000, v94, v95, "#ContactsDelegateFlow Falling back to UnsupportedActionFlow for parse: %s", v98, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
        (*(void (**)(void, void))(v24[18] + 8))(v24[19], v24[17]);
      }

      uint64_t v101 = (void *)(v24[16] + v24[26]);
      uint64_t v102 = v101[4];
      __swift_project_boxed_opaque_existential_1(v101, v101[3]);
      uint64_t v104 = *(void *)(v102 + 64) + **(int **)(v102 + 64);
      v105 = (void *)(v102 + 64);
      uint64_t v103 = (void *)swift_task_alloc();
      v24[35] = v103;
      *uint64_t v103 = v24;
      v103[1] = ContactsDelegateFlow.getFlow(for:);
      OUTLINED_FUNCTION_25_0();
      OUTLINED_FUNCTION_4_2();
    }
  }
  return v74(v71, v72, v73, v74, v75, v76, v77, v78, a9, a10, v104, v105, a13, a14, a15, a16);
}

uint64_t ContactsDelegateFlow.getFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v11, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v12 = OUTLINED_FUNCTION_2_2();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_18_0();
  return v16(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v11, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v12 = OUTLINED_FUNCTION_2_2();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_18_0();
  return v16(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v11, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v12 = OUTLINED_FUNCTION_2_2();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_18_0();
  return v16(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_7_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v10, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v11 = OUTLINED_FUNCTION_2_2();
  v12(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_7_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v10, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v11 = OUTLINED_FUNCTION_2_2();
  v12(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_7_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_23_0();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactsFlowState(v10, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v11 = OUTLINED_FUNCTION_2_2();
  v12(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t ContactsDelegateFlow.deinit()
{
  outlined destroy of ContactsFlowState(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState, (void (*)(void))type metadata accessor for ContactsFlowState);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ContactsDelegateFlow.__deallocating_deinit()
{
  ContactsDelegateFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

BOOL protocol witness for Flow.on(input:) in conformance ContactsDelegateFlow(uint64_t a1)
{
  return ContactsDelegateFlow.on(input:)(a1);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow;
  return MEMORY[0x270F66CE0](a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow()
{
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactsDelegateFlow()
{
  return ContactsDelegateFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance ContactsDelegateFlow()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return ContactsDelegateFlow.execute()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactsDelegateFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ContactsDelegateFlow(0);
  return MEMORY[0x270F66CE8](v3, a2);
}

uint64_t outlined init with copy of ContactsFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactsFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ContactsFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactsFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ContactsDelegateFlow(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsDelegateFlow);
}

uint64_t type metadata accessor for ContactsFlowState(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsDelegateFlow and conformance ContactsDelegateFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow;
  if (!lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow)
  {
    type metadata accessor for ContactsDelegateFlow(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow);
  }
  return result;
}

uint64_t sub_22D4ACAD4()
{
  uint64_t v1 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);
  return MEMORY[0x270FA0238](v0, v8, v9);
}

uint64_t partial apply for closure #1 in ContactsDelegateFlow.execute()(unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Input() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in ContactsDelegateFlow.execute()(a1, v4, v5);
}

uint64_t ObjC metadata update function for ContactsDelegateFlow()
{
  return type metadata accessor for ContactsDelegateFlow(0);
}

uint64_t type metadata completion function for ContactsDelegateFlow()
{
  uint64_t result = type metadata accessor for ContactsFlowState(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ContactsDelegateFlow(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactsDelegateFlow);
}

uint64_t dispatch thunk of ContactsDelegateFlow.__allocating_init(flowFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.on(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.execute(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.execute()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v0 + 152) + **(int **)(*(void *)v0 + 152));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return v6(v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactsFlowState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for ContactsFlowState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for Input();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ContactsFlowState((uint64_t)a1, (void (*)(void))type metadata accessor for ContactsFlowState);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ContactsFlowState((uint64_t)a1, (void (*)(void))type metadata accessor for ContactsFlowState);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for ContactsFlowState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ContactsFlowState()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of ContactsFlowState(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return static os_signpost_type_t.end.getter();
}

BOOL OUTLINED_FUNCTION_6_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_7_1()
{
  uint64_t v2 = *(void **)(v0 + 224);
}

void OUTLINED_FUNCTION_8_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_slowAlloc();
}

void *OUTLINED_FUNCTION_20_0()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v1 + v0), *(void *)(v1 + v0 + 24));
}

uint64_t OUTLINED_FUNCTION_21_0(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return v0;
}

void OUTLINED_FUNCTION_26_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_28_0(void *a1)
{
  uint64_t v1 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return v1;
}

uint64_t OUTLINED_FUNCTION_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31()
{
  return swift_task_alloc();
}

_WORD *OUTLINED_FUNCTION_32(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

BOOL OUTLINED_FUNCTION_34(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_36(float a1)
{
  *uint64_t v1 = a1;
  return outlined init with copy of ContactsFlowState(v3, v2);
}

void OUTLINED_FUNCTION_38(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 0xCu);
}

uint64_t OUTLINED_FUNCTION_39()
{
  return swift_beginAccess();
}

uint64_t GetContactHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for SiriKitIntentHandler();
  v0[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[5] = v4;
  v0[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  id v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_1(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v2, v5, "#GetContactHandleIntentStrategy makeIntentExecutionBehavior");
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v6 = one-time initialization token for current;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void **)(v0 + 24);
  uint64_t v8 = static ContactService.current;
  type metadata accessor for ContactResolver();
  swift_allocObject();
  swift_retain();
  uint64_t v9 = ContactResolver.init()();
  uint64_t v10 = objc_allocWithZone((Class)type metadata accessor for GetContactIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v8, v9, v10);
  type metadata accessor for GetContactIntent();
  uint64_t v11 = v7;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  uint64_t v12 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  OUTLINED_FUNCTION_44();
  v13();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(v12);
}

uint64_t GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[26] = v2;
  v1[27] = v0;
  v1[25] = v3;
  uint64_t v4 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v4);
  v1[28] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[29] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[30] = v6;
  v1[31] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for ContactsSnippetPluginModel();
  v1[32] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[33] = v8;
  v1[34] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for ContactsSnippetFlowState();
  v1[35] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[36] = v10;
  v1[37] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  OUTLINED_FUNCTION_10_0(v11);
  v1[38] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactSnippetModel = type metadata accessor for GetContactSnippetModel();
  v1[39] = ContactSnippetModel;
  OUTLINED_FUNCTION_1(ContactSnippetModel);
  v1[40] = v13;
  v1[41] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactDirectInvocationsModel = type metadata accessor for GetContactDirectInvocationsModel();
  v1[42] = ContactDirectInvocationsModel;
  OUTLINED_FUNCTION_1(ContactDirectInvocationsModel);
  v1[43] = v15;
  v1[44] = OUTLINED_FUNCTION_31();
  v1[45] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Locale();
  v1[46] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[47] = v17;
  v1[48] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = type metadata accessor for ContactsLabelCATContainer();
  v1[49] = v18;
  OUTLINED_FUNCTION_1(v18);
  v1[50] = v19;
  v1[51] = OUTLINED_FUNCTION_31();
  v1[52] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  v1[53] = v20;
  OUTLINED_FUNCTION_1(v20);
  v1[54] = v21;
  v1[55] = OUTLINED_FUNCTION_2_1();
  uint64_t v22 = type metadata accessor for TemplatingText();
  v1[56] = v22;
  OUTLINED_FUNCTION_1(v22);
  v1[57] = v23;
  v1[58] = OUTLINED_FUNCTION_2_1();
  uint64_t v24 = type metadata accessor for TemplatingResult();
  v1[59] = v24;
  OUTLINED_FUNCTION_1(v24);
  v1[60] = v25;
  v1[61] = OUTLINED_FUNCTION_31();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_10_0(v26);
  v1[65] = OUTLINED_FUNCTION_31();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  uint64_t v27 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v27);
  v1[68] = OUTLINED_FUNCTION_2_1();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v28);
  v1[69] = OUTLINED_FUNCTION_2_1();
  uint64_t v29 = type metadata accessor for NLContextUpdate();
  v1[70] = v29;
  OUTLINED_FUNCTION_1(v29);
  v1[71] = v30;
  v1[72] = OUTLINED_FUNCTION_2_1();
  uint64_t v31 = type metadata accessor for Signpost.OpenSignpost();
  v1[73] = v31;
  OUTLINED_FUNCTION_10_0(v31);
  v1[74] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v32, v33, v34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  void *v11;
  void *ContactAttributeIntent;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  BOOL ContactHandleIntent;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t *v54;
  uint64_t v56;
  void *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _OWORD v84[2];
  uint64_t v85;
  uint64_t v86;

  uint64_t v86 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 888) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "MakeGetContactIntentHandledResponse";
  *(void *)(v5 + 8) = 35;
  *(unsigned char *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 600) = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v9);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v7, v10, "#GetContactHandleIntentStrategy makeIntentHandledResponse");
    OUTLINED_FUNCTION_2();
  }

  *(void *)(v0 + 608) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<GetContactIntent, GetContactIntentResponse>);
  uint64_t v11 = (void *)IntentResolutionRecord.intentResponse.getter();
  ContactAttributeIntent = (void *)outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(v11);
  if (!ContactAttributeIntent) {
    goto LABEL_14;
  }
  if (!ContactAttributeIntent[2])
  {
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v26 = Logger.logObject.getter();
    uint64_t v27 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_6_1(v27))
    {
      uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v28);
      OUTLINED_FUNCTION_19_1(&dword_22D49E000, v26, v29, "#GetContactHandleIntentStrategy found no contactIdentifiers in intent response, throwing exception");
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_53();
    goto LABEL_29;
  }
  uint64_t v14 = ContactAttributeIntent[4];
  uint64_t v13 = ContactAttributeIntent[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v16 = objc_msgSend(v15, sel_isMe);

  if (v16 && (uint64_t v17 = objc_msgSend(v16, sel_BOOLValue), v16, v17))
  {
    uint64_t v18 = *(void **)(v0 + 216);
    uint64_t v19 = v18[10];
    uint64_t v20 = v18[11];
    __swift_project_boxed_opaque_existential_1(v18 + 7, v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v23 = *(void **)(v0 + 216);
    uint64_t v24 = v23[10];
    uint64_t v25 = v23[11];
    OUTLINED_FUNCTION_30_0(v23 + 7, v24);
    LOBYTE(v20) = 0;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v25 + 8))(v14, v13, v24, v25);
    uint64_t v22 = 0;
  }
  *(unsigned char *)(v0 + 909) = v22;
  *(void *)(v0 + 616) = v21;
  if (!v21)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v51 = Logger.logObject.getter();
    uint64_t v52 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_0(v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(void *)&v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, (uint64_t *)v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v51, (os_log_type_t)v20, "#GetContactHandleIntentStrategy failed to fetch contact for identifier: %s, throwing exception", v53, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_53();
    *uint64_t v54 = v14;
    v54[1] = v13;
LABEL_29:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(*(void *)(v0 + 592));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    goto LABEL_30;
  }
  uint64_t v30 = *(void *)(v0 + 216);
  uint64_t v31 = (void *)v21;
  uint64_t v32 = OUTLINED_FUNCTION_41();
  v83 = v31;
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(v31, v32 & 1);
  ContactHandleIntent = GetContactHandleIntentStrategy.shouldAuthStateAllowPunchout()();
  if ((OUTLINED_FUNCTION_41() & 1) != 0
    || (uint64_t v34 = *(void *)(v30 + 40),
        __swift_project_boxed_opaque_existential_1((void *)(v30 + 16), v34),
        (DeviceState.supportsCompactView.getter(v34) & ContactHandleIntent & 1) == 0))
  {
    uint64_t v37 = swift_bridgeObjectRelease();
  }
  else
  {
    AppUtil.buildPunchoutFor(contactIdentifier:)();
    uint64_t v36 = v35;
    uint64_t v37 = swift_bridgeObjectRelease();
    if (v36)
    {
      os_log_type_t v38 = (void *)Logger.logObject.getter();
      uint64_t v39 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_0(v39))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_49(&dword_22D49E000, v40, v41, "#GetContactHandleIntentStrategy SiriKitEventSender Sending UUFR ready for contact app punchout.");
        OUTLINED_FUNCTION_2();
      }
      id v42 = *(void *)(v0 + 216);

      __swift_project_boxed_opaque_existential_1((void *)(v42 + 208), *(void *)(v42 + 232));
      type metadata accessor for SiriKitEvent();
      static SiriKitEvent.uufrReady()();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      uint64_t v43 = v36;
      os_log_type_t v44 = Logger.logObject.getter();
      uint64_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(void *)&v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        uint64_t v47 = objc_msgSend(v43, sel_description);
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, (uint64_t *)v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_22D49E000, v44, v45, "#GetContactHandleIntentStrategy Constructed intent handled response for iOS, returning punchout for contact: %s.", v46, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      uint64_t v74 = *(void *)(v0 + 576);
      uint64_t v75 = *(void *)(v0 + 568);
      uint64_t v76 = *(void *)(v0 + 560);
      uint64_t v77 = *(void *)(v0 + 552);
      uint64_t v78 = *(uint64_t **)(v0 + 200);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      char v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_22D59FB50;
      *(void *)(v79 + 32) = v43;
      *(void *)&v84[0] = v79;
      specialized Array._endMutation()();
      uint64_t v85 = 0;
      memset(v84, 0, sizeof(v84));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v77, v74, v76);
      __swift_storeEnumTagSinglePayload(v77, 0, 1, v76);
      uint64_t v80 = type metadata accessor for AceOutput();
      v81 = MEMORY[0x263F6FFF0];
      v78[3] = v80;
      v78[4] = v81;
      __swift_allocate_boxed_opaque_existential_1(v78);
      AceOutput.init(commands:flowActivity:nlContextUpdate:)();

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      os_log_type_t v82 = *(void *)(v0 + 592);
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v82);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_38_0();
LABEL_30:
      OUTLINED_FUNCTION_36_0();
      __asm { BRAA            X1, X16 }
    }
  }
  if (specialized ContactsStrategy.isSmartEnabled.getter(v37))
  {
    uint64_t v57 = (void *)Logger.logObject.getter();
    uint64_t v58 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_0(v58))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_49(&dword_22D49E000, v59, v60, "#GetContactHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet");
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for ContactsLabelCATsModern();
    static CATOption.defaultMode.getter();
    *(void *)(v0 + 624) = CATWrapperSimple.__allocating_init(options:globals:)();
    *(void *)(v0 + 632) = CNContact.toDialogPerson(useConversationalName:)();
    char v61 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v61;
    *char v61 = v0;
    v61[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_36_0();
    return ContactsLabelCATsModern.quickActionButtonLabels(contact:)(v62);
  }
  else
  {
    uint64_t v65 = *(void *)(v0 + 384);
    type metadata accessor for DialogPerson();
    OUTLINED_FUNCTION_30_0((void *)(v30 + 16), *(void *)(v30 + 40));
    uint64_t v66 = v31;
    dispatch thunk of DeviceState.siriLocale.getter();
    *(void *)(v0 + 856) = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v66, 0, v65, 0);
    __swift_project_boxed_opaque_existential_1((void *)(v30 + 16), *(void *)(v30 + 40));
    OUTLINED_FUNCTION_47();
    *(void *)(v0 + 864) = DeviceState.toSiriKitDeviceState.getter();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    *(void *)(v0 + 872) = v67;
    *uint64_t v67 = v68;
    v67[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_36_0();
    return GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)(v69, v70, v71, v72);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v7 + 648) = v6;
  *(void *)(v7 + 656) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  void (*v34)(void);
  void (*v35)(void);
  void (*v36)(void);
  void (*v37)(void);
  void (*v38)(void);
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;

  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v51 = *(void *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactsLabelCATContainer.LabelType, String)>);
  uint64_t v2 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactsLabelCATContainer.LabelType, String))
             - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  uint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22D59FE50;
  uint64_t v6 = v5 + v4;
  uint64_t v7 = (uint64_t *)(v5 + v4 + v2[14]);
  *(_DWORD *)(v0 + 892) = *MEMORY[0x263F6CDD8];
  uint64_t v8 = *(void (**)(void))(v1 + 104);
  *(void *)(v0 + 664) = v8;
  *(void *)(v0 + 672) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  OUTLINED_FUNCTION_15_1();
  v8();
  *(unsigned char *)(v0 + 907) = 1;
  *uint64_t v7 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v7[1] = v9;
  uint64_t v10 = (uint64_t *)(v6 + v3 + v2[14]);
  *(_DWORD *)(v0 + 896) = *MEMORY[0x263F6CDD0];
  OUTLINED_FUNCTION_15_1();
  v8();
  *(unsigned char *)(v0 + 904) = 7;
  *uint64_t v10 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v10[1] = v11;
  uint64_t v12 = (uint64_t *)(v6 + 2 * v3 + v2[14]);
  *(_DWORD *)(v0 + 900) = *MEMORY[0x263F6CDE0];
  OUTLINED_FUNCTION_15_1();
  v8();
  *(unsigned char *)(v0 + 908) = 8;
  uint8_t *v12 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v12[1] = v13;
  uint64_t v14 = (uint64_t *)(v6 + 3 * v3 + v2[14]);
  OUTLINED_FUNCTION_15_1();
  v8();
  *(unsigned char *)(v0 + 905) = 9;
  *uint64_t v14 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v14[1] = v15;
  uint64_t v16 = (uint64_t *)(v6 + 4 * v3 + v2[14]);
  OUTLINED_FUNCTION_15_1();
  v8();
  *(unsigned char *)(v0 + 906) = 14;
  *uint64_t v16 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v16[1] = v17;
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, MEMORY[0x263F6CE18]);
  uint64_t v18 = (void *)Dictionary.init(dictionaryLiteral:)();
  *(void *)(v0 + 680) = v18;
  OUTLINED_FUNCTION_30_0((void *)(v51 + 16), *(void *)(v51 + 40));
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    *(void *)(v0 + 688) = *(void *)(*(void *)(v0 + 216) + 104);
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    *(void *)(v0 + 696) = v19;
    *uint64_t v19 = v20;
    v19[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_42();
    return ContactsLabelCATs.phone()();
  }
  else
  {
    uint64_t v23 = *(void **)(v0 + 616);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 376);
    uint64_t v49 = *(void *)(v0 + 368);
    uint64_t v50 = *(unint64_t **)(v0 + 416);
    uint64_t v26 = *(void **)(v0 + 216);
    uint64_t v27 = v26[13];
    OUTLINED_FUNCTION_30_0(v26 + 2, v26[5]);
    uint64_t v28 = v23;
    swift_retain();
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v29 = Locale.identifier.getter();
    uint64_t v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v49);
    ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)(v18, v28, v27, v29, v31, v50);
    uint64_t v32 = v28;
    GetContactDirectInvocationsModel.init(contact:)(v32);
    type metadata accessor for CNContact();
    uint64_t v33 = v32;
    CodableContact.init(wrappedValue:)();
    OUTLINED_FUNCTION_32_0();
    v34();
    OUTLINED_FUNCTION_48();
    v35();
    OUTLINED_FUNCTION_32_0();
    v36();
    GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)();
    OUTLINED_FUNCTION_32_0();
    v37();
    OUTLINED_FUNCTION_48();
    v38();
    type metadata accessor for GetContactCATsModern();
    type metadata accessor for CATGlobals();
    outlined init with copy of DeviceState((uint64_t)(v26 + 2), v0 + 144);
    CATGlobals.__allocating_init(device:)();
    static CATOption.defaultMode.getter();
    *(void *)(v0 + 784) = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for DialogPerson();
    OUTLINED_FUNCTION_30_0(v26 + 2, v26[5]);
    uint64_t v39 = v33;
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v40 = (void *)OUTLINED_FUNCTION_43();
    *(void *)(v0 + 792) = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v40, v41, v42, v43);
    __swift_project_boxed_opaque_existential_1(v26 + 2, v26[5]);
    *(void *)(v0 + 800) = DeviceState.toSiriKitDeviceState.getter();
    os_log_type_t v44 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v44;
    *os_log_type_t v44 = v0;
    v44[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_42();
    return GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(v45, v46, v47);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 704) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t, void, uint64_t);
  uint64_t v25;

  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v6 = TemplatingResult.sections.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 712) = v7;
  *(void *)(v0 + 720) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v4);
  specialized Collection.first.getter(v6, v2);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for TemplatingSection();
  *(void *)(v0 + 728) = v8;
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 536), &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v9 = *(void *)(v0 + 680);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 680);
    uint64_t v24 = *(void (**)(uint64_t, void, uint64_t))(v0 + 664);
    uint64_t v23 = *(_DWORD *)(v0 + 892);
    OUTLINED_FUNCTION_40();
    uint64_t v22 = v11;
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_23();
    v12();
    uint64_t v13 = TemplatingText.text.getter();
    uint64_t v14 = OUTLINED_FUNCTION_12_2();
    v15(v14);
    v24(v2, v23, v22);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v1, v2, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = v10;
    swift_bridgeObjectRelease();
    uint64_t v17 = OUTLINED_FUNCTION_18_1();
    v18(v17);
  }
  *(void *)(v0 + 736) = v9;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 744) = v19;
  *uint64_t v19 = v20;
  v19[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ContactsLabelCATs.email()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 752) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void, uint64_t);
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(uint64_t, void, uint64_t);
  unsigned int v25;
  uint64_t v26;

  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 528);
  uint64_t v5 = *(void *)(v0 + 504);
  uint64_t v6 = *(void *)(v0 + 472);
  uint64_t v7 = TemplatingResult.sections.getter();
  v3(v5, v6);
  specialized Collection.first.getter(v7, v4);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v4, 1, v2) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 528), &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v8 = *(void *)(v0 + 736);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 736);
    uint64_t v25 = *(_DWORD *)(v0 + 900);
    OUTLINED_FUNCTION_40();
    uint64_t v23 = v10;
    uint64_t v24 = v11;
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_23();
    v12();
    uint64_t v13 = TemplatingText.text.getter();
    uint64_t v14 = OUTLINED_FUNCTION_12_2();
    v15(v14);
    v24(v2, v25, v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v1, v2, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = v9;
    swift_bridgeObjectRelease();
    uint64_t v17 = OUTLINED_FUNCTION_18_1();
    v18(v17);
  }
  *(void *)(v0 + 760) = v8;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 768) = v19;
  *uint64_t v19 = v20;
  v19[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  uint64_t v21 = *(void *)(v0 + 496);
  return ContactsLabelCATs.address()(v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 776) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, void, uint64_t);
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void (*v29)(void);
  void (*v30)(void);
  void (*v31)(void);
  void (*v32)(void);
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  void (*v52)(uint64_t, void, uint64_t);
  unsigned int v53;

  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 520);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v6 = *(void *)(v0 + 472);
  uint64_t v7 = TemplatingResult.sections.getter();
  v3(v5, v6);
  specialized Collection.first.getter(v7, v4);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v4, 1, v2) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 520), &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v49 = *(void **)(v0 + 760);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 760);
    uint64_t v53 = *(_DWORD *)(v0 + 896);
    OUTLINED_FUNCTION_40();
    uint64_t v51 = v9;
    uint64_t v52 = v10;
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_23();
    v11();
    uint64_t v12 = TemplatingText.text.getter();
    uint64_t v13 = OUTLINED_FUNCTION_12_2();
    v14(v13);
    v52(v2, v53, v51);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v1, v2, isUniquelyReferenced_nonNull_native);
    uint64_t v49 = v8;
    swift_bridgeObjectRelease();
    uint64_t v16 = OUTLINED_FUNCTION_18_1();
    v17(v16);
  }
  uint64_t v18 = *(void **)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 384);
  uint64_t v20 = *(void *)(v0 + 376);
  os_log_type_t v44 = *(void *)(v0 + 368);
  uint64_t v45 = *(unint64_t **)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v47 = *(void *)(v0 + 352);
  uint64_t v48 = *(void *)(v0 + 336);
  uint64_t v46 = *(void *)(v0 + 360);
  uint64_t v22 = *(void **)(v0 + 216);
  uint64_t v23 = v22[13];
  OUTLINED_FUNCTION_30_0(v22 + 2, v22[5]);
  uint64_t v24 = v18;
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v25 = Locale.identifier.getter();
  uint64_t v27 = v26;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v44);
  ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)(v49, v24, v23, v25, v27, v45);
  uint64_t v28 = v24;
  GetContactDirectInvocationsModel.init(contact:)(v28);
  type metadata accessor for CNContact();
  uint64_t v50 = v28;
  CodableContact.init(wrappedValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v47, v46, v48);
  OUTLINED_FUNCTION_48();
  v29();
  OUTLINED_FUNCTION_32_0();
  v30();
  GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)();
  OUTLINED_FUNCTION_32_0();
  v31();
  OUTLINED_FUNCTION_48();
  v32();
  type metadata accessor for GetContactCATsModern();
  type metadata accessor for CATGlobals();
  outlined init with copy of DeviceState((uint64_t)(v22 + 2), v0 + 144);
  CATGlobals.__allocating_init(device:)();
  static CATOption.defaultMode.getter();
  *(void *)(v0 + 784) = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for DialogPerson();
  OUTLINED_FUNCTION_30_0(v22 + 2, v22[5]);
  uint64_t v33 = v50;
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v34 = (void *)OUTLINED_FUNCTION_43();
  *(void *)(v0 + 792) = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v34, v35, v36, v37);
  __swift_project_boxed_opaque_existential_1(v22 + 2, v22[5]);
  *(void *)(v0 + 800) = DeviceState.toSiriKitDeviceState.getter();
  os_log_type_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v38;
  char *v38 = v0;
  v38[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_42();
  return GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(v39, v40, v41);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v7 + 816) = v6;
  *(void *)(v7 + 824) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = v0[72];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[27];
  static DialogPhase.completion.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_1(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v7);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v5, v8, "#GetContactHandleIntentStrategy makeIntentHandledResponse generating SMART Dialog");
    OUTLINED_FUNCTION_2();
  }
  uint64_t v9 = (void *)v0[102];
  uint64_t v11 = v0[33];
  uint64_t v10 = v0[34];
  uint64_t v12 = v0[32];

  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[104] = ResponseFactory.init()();
  v0[11] = v12;
  v0[12] = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v10, v12);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22D59FB50;
  *(void *)(v14 + 32) = v9;
  uint64_t v22 = v14;
  specialized Array._endMutation()();
  v0[105] = v22;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB10] + MEMORY[0x263F6FB10]);
  uint64_t v15 = v9;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v0[106] = (uint64_t)v16;
  *uint64_t v16 = v17;
  v16[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  uint64_t v18 = v0[31];
  uint64_t v19 = v0[25];
  return v21(v19, v0 + 8, v22, v18);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 64;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 880) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

uint64_t GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  uint64_t v29 = (void *)v28[102];
  uint64_t v47 = (void *)v28[77];
  uint64_t v30 = v28[71];
  OUTLINED_FUNCTION_54();
  uint64_t v31 = v28[50];
  uint64_t v32 = v28[43];
  uint64_t v50 = v28[42];
  uint64_t v51 = v28[45];
  uint64_t v48 = v28[39];
  uint64_t v49 = v28[41];
  uint64_t v33 = v28[33];
  uint64_t v53 = v28[34];
  uint64_t v54 = v28[49];
  uint64_t v34 = v28[31];
  uint64_t v52 = v28[32];
  uint64_t v36 = v28[29];
  uint64_t v35 = v28[30];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  OUTLINED_FUNCTION_44();
  v37();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v51, v50);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a23, v54);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v53, v52);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a25, a24);
  OUTLINED_FUNCTION_3_1();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v30 + 8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_4_3();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, v47, v48, v49, v50, v51,
           v52,
           v53,
           v54,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  void (*v42)(void);
  uint64_t v43;
  uint64_t (*v44)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  uint64_t v29 = *(void *)(v28 + 216);
  uint64_t v30 = *(void *)(v29 + 104);
  outlined init with copy of DeviceState(v29 + 16, v28 + 24);
  *(void *)(v28 + 16) = v30;
  swift_retain();
  uint64_t v31 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v32 = objc_msgSend(v31, sel_isMe);

  if (v32)
  {
    uint64_t v33 = objc_msgSend(v32, sel_BOOLValue);
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v54 = *(void **)(v28 + 616);
  uint64_t v34 = *(void *)(v28 + 576);
  uint64_t v35 = *(void *)(v28 + 568);
  uint64_t v52 = *(void *)(v28 + 560);
  uint64_t v36 = *(void *)(v28 + 552);
  uint64_t v53 = *(void *)(v28 + 488);
  uint64_t v55 = *(void *)(v28 + 480);
  uint64_t v56 = *(void *)(v28 + 472);
  uint64_t v37 = *(void *)(v28 + 216);
  uint64_t v38 = *(uint64_t **)(v28 + 200);
  Views.buildViews(for:isMe:mockGlobals:)(v54, v33);
  outlined destroy of Views(v28 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v37 + 16), *(void *)(v37 + 40));
  OUTLINED_FUNCTION_47();
  DeviceState.isVox.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v34, v52);
  __swift_storeEnumTagSinglePayload(v36, 0, 1, v52);
  uint64_t v39 = type metadata accessor for AceOutput();
  *(_OWORD *)(v28 + 120) = 0u;
  *(void *)(v28 + 136) = 0;
  *(_OWORD *)(v28 + 104) = 0u;
  uint64_t v40 = MEMORY[0x263F6FFF0];
  v38[3] = v39;
  v38[4] = v40;
  __swift_allocate_boxed_opaque_existential_1(v38);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v28 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v36, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_23();
  v41();
  OUTLINED_FUNCTION_44();
  v42();
  OUTLINED_FUNCTION_3_1();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v28 + 104);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_4_3();
  return v44(v43, v44, v45, v46, v47, v48, v49, v50, v28 + 104, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           v52,
           v53,
           v34,
           v54,
           v55,
           v56,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_23_1();
  uint64_t v29 = OUTLINED_FUNCTION_27_1();
  v30(v29);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 656));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_9_0();

  uint64_t v30 = OUTLINED_FUNCTION_10_1();
  v31(v30);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 704));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_9_0();

  uint64_t v30 = OUTLINED_FUNCTION_10_1();
  v31(v30);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 752));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_9_0();

  uint64_t v30 = OUTLINED_FUNCTION_10_1();
  v31(v30);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 776));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  uint64_t v29 = *(void **)(v28 + 616);
  uint64_t v46 = *(int *)(v28 + 888);
  uint64_t v30 = *(void *)(v28 + 568);
  OUTLINED_FUNCTION_54();
  uint64_t v31 = *(void *)(v28 + 400);
  uint64_t v32 = *(void *)(v28 + 344);
  uint64_t v47 = *(void *)(v28 + 336);
  uint64_t v48 = *(void *)(v28 + 360);
  uint64_t v33 = *(void *)(v28 + 320);
  uint64_t v34 = *(void *)(v28 + 328);
  uint64_t v35 = *(void *)(v28 + 312);
  uint64_t v50 = *(void *)(v28 + 272);
  uint64_t v51 = *(void *)(v28 + 392);
  uint64_t v49 = *(void *)(v28 + 256);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v48, v47);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a23, v51);
  OUTLINED_FUNCTION_44();
  v36();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a25, a24);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 824));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14, a15, a16, v46, v47, v48,
           v49,
           v50,
           v51,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_23_1();
  uint64_t v29 = OUTLINED_FUNCTION_27_1();
  v30(v29);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_26_1();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_0_1(*(void *)(v28 + 880));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  uint64_t v104 = a3;
  id v95 = a2;
  id v9 = objc_msgSend(a2, sel_emailAddresses);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62) {
    goto LABEL_65;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v88 = (uint64_t)a6;
    uint64_t v91 = a1;
    if (v11) {
      break;
    }
    a1 = (void *)MEMORY[0x263F8EE80];
LABEL_21:
    swift_bridgeObjectRelease();
    id v35 = objc_msgSend(v95, sel_phoneNumbers);
    unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v36 >> 62)
    {
      OUTLINED_FUNCTION_45();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v37)
      {
LABEL_23:
        if (v37 < 1) {
          goto LABEL_71;
        }
        OUTLINED_FUNCTION_52();
        do
        {
          if (v98) {
            id v38 = (id)MEMORY[0x230F854E0](v6, v36);
          }
          else {
            id v38 = *(id *)(v36 + 8 * v6 + 32);
          }
          uint64_t v39 = v38;
          id v40 = objc_msgSend(v38, sel_label, v88, v91);
          if (v40)
          {
            uint64_t v41 = v40;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          uint64_t v42 = OUTLINED_FUNCTION_35_0();
          unint64_t v10 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v42, v43, v44, v45, 2, v104);
          unint64_t v47 = v46;
          swift_bridgeObjectRelease();
          a6 = (unint64_t *)objc_msgSend(v39, sel_identifier);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          swift_isUniquelyReferenced_nonNull_native();
          OUTLINED_FUNCTION_28_1();
          OUTLINED_FUNCTION_20_1();
          if (v23) {
            goto LABEL_60;
          }
          char v49 = v48;
          int v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          if (OUTLINED_FUNCTION_46(v50, v51, v52, v53, v54, v55, v56, v57, v90, v93, v94, (uint64_t)v95, v96, v97, v98, (uint64_t)v39, v102, v103, v104,
                 (char)a1))
          {
            OUTLINED_FUNCTION_28_1();
            if ((v49 & 1) != (v58 & 1)) {
              goto LABEL_73;
            }
          }
          a1 = *(void **)v106;
          if (v49)
          {
            OUTLINED_FUNCTION_34_0();
            *a6 = v10;
            a6[1] = v47;
          }
          else
          {
            OUTLINED_FUNCTION_6_2();
            if (v23) {
              goto LABEL_63;
            }
            *(void *)(*(void *)v106 + 16) = v59;
            swift_bridgeObjectRetain();
          }
          ++v6;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v36 = v97;
        }
        while (v96 != v6);
      }
    }
    else
    {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v37) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    id v60 = objc_msgSend(v95, sel_postalAddresses);
    unint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v61 >> 62)
    {
      OUTLINED_FUNCTION_45();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v62)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();

        return swift_release();
      }
    }
    else
    {
      uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v62) {
        goto LABEL_56;
      }
    }
    if (v62 < 1) {
      goto LABEL_72;
    }
    OUTLINED_FUNCTION_52();
    while (1)
    {
      if (v98) {
        id v63 = (id)MEMORY[0x230F854E0](v6, v61);
      }
      else {
        id v63 = *(id *)(v61 + 8 * v6 + 32);
      }
      os_log_type_t v64 = v63;
      id v65 = objc_msgSend(v63, sel_label, v88, v91);
      if (v65)
      {
        uint64_t v66 = v65;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v67 = OUTLINED_FUNCTION_35_0();
      unint64_t v10 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v67, v68, v69, v70, 3, v104);
      unint64_t v72 = v71;
      swift_bridgeObjectRelease();
      uint64_t v101 = v64;
      a6 = (unint64_t *)objc_msgSend(v64, sel_identifier);
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      OUTLINED_FUNCTION_28_1();
      OUTLINED_FUNCTION_20_1();
      if (v23) {
        break;
      }
      unint64_t v79 = v77;
      char v80 = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)a6))
      {
        unint64_t v81 = OUTLINED_FUNCTION_28_1();
        if ((v80 & 1) != (v82 & 1)) {
          goto LABEL_73;
        }
        unint64_t v79 = v81;
      }
      if (v80)
      {
        OUTLINED_FUNCTION_34_0();
        *a6 = v10;
        a6[1] = v72;
      }
      else
      {
        a1[(v79 >> 6) + 8] |= 1 << v79;
        v83 = (uint64_t *)(a1[6] + 16 * v79);
        uint64_t *v83 = v73;
        v83[1] = v75;
        uint64_t v84 = (unint64_t *)(a1[7] + 16 * v79);
        *uint64_t v84 = v10;
        v84[1] = v72;
        uint64_t v85 = a1[2];
        BOOL v23 = __OFADD__(v85, 1);
        uint64_t v86 = v85 + 1;
        if (v23) {
          goto LABEL_64;
        }
        a1[2] = v86;
        swift_bridgeObjectRetain();
      }
      ++v6;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v61 = v97;
      if (v96 == v6) {
        goto LABEL_56;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v98 = v10 & 0xC000000000000001;
    a1 = (void *)MEMORY[0x263F8EE80];
    uint64_t v96 = v11;
    uint64_t v97 = v10;
    while (1)
    {
      if (v98) {
        id v12 = (id)MEMORY[0x230F854E0](v6, v10);
      }
      else {
        id v12 = *(id *)(v10 + 8 * v6 + 32);
      }
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v12, sel_label, v88, v91);
      if (v14)
      {
        uint64_t v15 = v14;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v16 = OUTLINED_FUNCTION_35_0();
      unint64_t v10 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v16, v17, v18, v19, 1, v104);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      a6 = (unint64_t *)objc_msgSend(v13, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      swift_isUniquelyReferenced_nonNull_native();
      OUTLINED_FUNCTION_28_1();
      OUTLINED_FUNCTION_20_1();
      if (v23) {
        break;
      }
      char v24 = v22;
      int v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (OUTLINED_FUNCTION_46(v25, v26, v27, v28, v29, v30, v31, v32, v89, v92, v94, (uint64_t)v95, v96, v97, v98, (uint64_t)v13, v102, v103, v104,
             (char)a1))
      {
        OUTLINED_FUNCTION_28_1();
        if ((v24 & 1) != (v33 & 1)) {
          goto LABEL_73;
        }
      }
      a1 = *(void **)v105;
      if (v24)
      {
        OUTLINED_FUNCTION_34_0();
        *a6 = v10;
        a6[1] = v21;
      }
      else
      {
        OUTLINED_FUNCTION_6_2();
        if (v23) {
          goto LABEL_62;
        }
        *(void *)(*(void *)v105 + 16) = v34;
        swift_bridgeObjectRetain();
      }
      ++v6;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = v97;
      if (v96 == v6) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  __swift_project_boxed_opaque_existential_1((void *)(a2 + 16), *(void *)(a2 + 40));
  DeviceState.isVox.getter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a3, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

Swift::Bool __swiftcall GetContactHandleIntentStrategy.shouldAuthStateAllowPunchout()()
{
  uint64_t v1 = type metadata accessor for UnlockDevicePolicy();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_30_0((void *)(v0 + 16), *(void *)(v0 + 40));
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  char v5 = dispatch thunk of DeviceState.isAuthenticated(for:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5 & 1;
}

uint64_t GetContactHandleIntentStrategy.__ivar_destroyer()
{
  outlined destroy of AppUtil(v0 + 168);
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + 208);
}

uint64_t GetContactHandleIntentStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsUnsupportedValueStrategy.deinit();
  outlined destroy of AppUtil(v0 + 168);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 208);
  return MEMORY[0x270FA0228](v0, 248, 7);
}

uint64_t type metadata accessor for GetContactHandleIntentStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactHandleIntentStrategy;
  if (!type metadata singleton initialization cache for GetContactHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactHandleIntentStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66378](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66380](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66358](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66370](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66368](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactHandleIntentStrategy = type metadata accessor for GetContactHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactHandleIntentStrategy;
  return MEMORY[0x270F66348](a1, a2, ContactHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow;
  return GetContactHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)();
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in GetContactHandleIntentStrategy()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for GetContactHandleIntentStrategy);
}

uint64_t outlined destroy of AppUtil(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Views(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for CNContact()
{
  unint64_t result = lazy cache variable for type metadata for CNContact;
  if (!lazy cache variable for type metadata for CNContact)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  }
  return result;
}

uint64_t partial apply for closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  return closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11SiriKitFlow0C8Activity_pSgWOhTm_1(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 80) = a1;
  uint64_t v4 = v1[74];
  uint64_t v5 = v1[28];
  *(void *)(v2 - 96) = v1[31];
  *(void *)(v2 - 88) = v5;
  return outlined destroy of Signpost.OpenSignpost(v4);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  uint64_t v3 = v0[31];
  *(void *)(v1 - 96) = v0[34];
  *(void *)(v1 - 88) = v3;
  *(void *)(v1 - 80) = v0[28];
  return static os_signpost_type_t.end.getter();
}

void OUTLINED_FUNCTION_6_2()
{
  *(void *)(v1 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  uint64_t v6 = (void *)(*(void *)(v1 + 48) + 16 * v3);
  *uint64_t v6 = v4;
  v6[1] = v0;
  uint64_t v7 = (void *)(*(void *)(v1 + 56) + 16 * v3);
  *uint64_t v7 = v2;
  v7[1] = v5;
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return v0;
}

void OUTLINED_FUNCTION_19_1(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

void OUTLINED_FUNCTION_23_1()
{
  uint64_t v2 = *(void **)(v0 + 616);
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return *(unsigned __int8 *)(v0 + 909);
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_28_1()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void *OUTLINED_FUNCTION_30_0(void *a1, uint64_t a2)
{
  return __swift_project_boxed_opaque_existential_1(a1, a2);
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_41()
{
  __swift_project_boxed_opaque_existential_1(v1, v0);
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_bridgeObjectRetain();
}

BOOL OUTLINED_FUNCTION_46(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v21, v20);
}

uint64_t OUTLINED_FUNCTION_47()
{
  return v0;
}

void OUTLINED_FUNCTION_49(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_53()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_54()
{
  *(void *)(v2 - 88) = *(void *)(v1 + 560);
  *(void *)(v2 - 80) = v0;
  *(void *)(v2 - 96) = *(void *)(v1 + 416);
}

uint64_t DateComponents.setImplicitYear(from:now:qualifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v124 = a2;
  uint64_t v119 = a3;
  uint64_t v120 = type metadata accessor for TerminalElement.Qualifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v116 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v108 = v8 - v7;
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?));
  MEMORY[0x270FA5388](v118);
  OUTLINED_FUNCTION_4_4();
  uint64_t v112 = v9;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v10);
  uint64_t v115 = (uint64_t)&v106 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  MEMORY[0x270FA5388](v12 - 8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v114 = v13;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_25();
  uint64_t v117 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_25();
  uint64_t v109 = v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  Swift::Int v20 = (char *)&v106 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_5_4();
  MEMORY[0x270FA5388](v22);
  char v24 = (char *)&v106 - v23;
  uint64_t v125 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v123 = v25;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_4_4();
  uint64_t v110 = v27;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_25();
  uint64_t v111 = v29;
  OUTLINED_FUNCTION_17();
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  char v33 = (char *)&v106 - v32;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_25();
  uint64_t v113 = v34;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_25();
  uint64_t v121 = v36;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v37);
  unint64_t v122 = (char *)&v106 - v38;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DayOfWeek?);
  MEMORY[0x270FA5388](v39 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v42 = v41 - v40;
  uint64_t v43 = type metadata accessor for TerminalElement.Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v45 = v44;
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_15();
  uint64_t v49 = v48 - v47;
  TerminalElement.Date.year.getter();
  char v51 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v49, a1, v43);
  if ((v51 & 1) == 0)
  {
    uint64_t v52 = OUTLINED_FUNCTION_9_1();
    return v53(v52);
  }
  TerminalElement.Date.dayOfWeek.getter();
  uint64_t v55 = OUTLINED_FUNCTION_9_1();
  v56(v55);
  uint64_t v57 = type metadata accessor for TerminalElement.DayOfWeek();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v42, 1, v57);
  uint64_t result = _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v42, &demangling cache variable for type metadata for TerminalElement.DayOfWeek?);
  if (EnumTagSinglePayload == 1)
  {
    DateComponents.day.getter();
    if (v59)
    {
      DateComponents.day.getter();
      DateComponents.day.setter();
    }
    DateComponents.date.getter();
    uint64_t v60 = v125;
    OUTLINED_FUNCTION_6_3((uint64_t)v24, 1, v125);
    if (v65)
    {
      uint64_t v61 = (uint64_t)v24;
    }
    else
    {
      id v63 = v122;
      uint64_t v62 = v123;
      os_log_type_t v64 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
      v64(v122, v24, v60);
      DateComponents.date.getter();
      OUTLINED_FUNCTION_6_3(v3, 1, v60);
      if (!v65)
      {
        v64(v121, (char *)v3, v60);
        uint64_t v66 = *MEMORY[0x263F72878];
        uint64_t v67 = v116;
        uint64_t v68 = v120;
        v107 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 104);
        v107(v20, v66, v120);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v68);
        uint64_t v69 = v115;
        uint64_t v70 = v115 + *(int *)(v118 + 48);
        outlined init with copy of TerminalElement.Qualifier?(v119, v115);
        outlined init with copy of TerminalElement.Qualifier?((uint64_t)v20, v70);
        OUTLINED_FUNCTION_6_3(v69, 1, v68);
        if (v71)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v20, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
          OUTLINED_FUNCTION_6_3(v70, 1, v68);
          if (v72) {
            uint64_t v73 = &demangling cache variable for type metadata for TerminalElement.Qualifier?;
          }
          else {
            uint64_t v73 = &demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?);
          }
          if (v72) {
            char v74 = -1;
          }
          else {
            char v74 = 0;
          }
        }
        else
        {
          uint64_t v75 = v109;
          outlined init with copy of TerminalElement.Qualifier?(v69, v109);
          OUTLINED_FUNCTION_6_3(v70, 1, v68);
          if (v76)
          {
            _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v20, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v75, v68);
            char v74 = 0;
            uint64_t v73 = &demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?);
          }
          else
          {
            unint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32);
            uint64_t v78 = v67;
            uint64_t v79 = v108;
            v77(v108, v70, v68);
            lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier();
            char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
            char v80 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
            v80(v79, v68);
            uint64_t v81 = v75;
            uint64_t v82 = v68;
            uint64_t v73 = &demangling cache variable for type metadata for TerminalElement.Qualifier?;
            _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v20, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            v80(v81, v82);
            uint64_t v69 = v115;
            uint64_t v60 = v125;
          }
        }
        uint64_t v83 = v117;
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v69, v73);
        uint64_t v84 = v123;
        uint64_t v85 = *(void (**)(void))(v123 + 16);
        uint64_t v86 = v113;
        OUTLINED_FUNCTION_1_0();
        v85();
        OUTLINED_FUNCTION_1_0();
        v85();
        if (v74)
        {
          char v87 = static Date.> infix(_:_:)();
          uint64_t v88 = *(void (**)(void))(v84 + 8);
          ((void (*)(char *, uint64_t))v88)(v33, v60);
          ((void (*)(uint64_t, uint64_t))v88)(v86, v60);
          uint64_t v89 = v114;
          if (v87)
          {
            uint64_t result = DateComponents.year.getter();
            uint64_t v83 = v117;
            if (v90)
            {
LABEL_57:
              __break(1u);
              goto LABEL_58;
            }
            BOOL v91 = __OFSUB__(result--, 1);
            uint64_t v60 = v125;
            if (v91)
            {
              __break(1u);
            }
            else
            {
              DateComponents.year.setter();
              uint64_t result = DateComponents.year.getter();
              if (v92)
              {
LABEL_58:
                __break(1u);
                goto LABEL_59;
              }
              BOOL v91 = __OFSUB__(result--, 1);
              if (!v91)
              {
                DateComponents.yearForWeekOfYear.setter();
                goto LABEL_34;
              }
            }
            __break(1u);
            goto LABEL_55;
          }
          uint64_t v60 = v125;
          uint64_t v83 = v117;
        }
        else
        {
          uint64_t v88 = *(void (**)(void))(v84 + 8);
          OUTLINED_FUNCTION_3_2();
          v88();
          OUTLINED_FUNCTION_3_2();
          v88();
          uint64_t v89 = v114;
        }
LABEL_34:
        uint64_t v93 = v120;
        v107((char *)v83, *MEMORY[0x263F72870], v120);
        __swift_storeEnumTagSinglePayload(v83, 0, 1, v93);
        uint64_t v94 = v112;
        uint64_t v95 = v112 + *(int *)(v118 + 48);
        outlined init with copy of TerminalElement.Qualifier?(v119, v112);
        outlined init with copy of TerminalElement.Qualifier?(v83, v95);
        OUTLINED_FUNCTION_6_3(v94, 1, v93);
        if (v65)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v83, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
          OUTLINED_FUNCTION_6_3(v95, 1, v93);
          uint64_t v96 = v122;
          if (v65)
          {
            _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v94, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            OUTLINED_FUNCTION_1_0();
            v85();
            OUTLINED_FUNCTION_1_0();
            v85();
            goto LABEL_45;
          }
        }
        else
        {
          outlined init with copy of TerminalElement.Qualifier?(v94, v89);
          OUTLINED_FUNCTION_6_3(v95, 1, v93);
          if (!v97)
          {
            uint64_t v98 = v116;
            uint64_t v99 = v108;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v108, v95, v93);
            lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier();
            LODWORD(v125) = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v100 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
            v100(v99, v93);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v117, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            v100(v89, v93);
            _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v94, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            uint64_t v101 = v111;
            OUTLINED_FUNCTION_1_0();
            v85();
            uint64_t v102 = v110;
            uint64_t v96 = v122;
            OUTLINED_FUNCTION_1_0();
            v85();
            if (v125)
            {
LABEL_45:
              char v103 = static Date.< infix(_:_:)();
              OUTLINED_FUNCTION_3_2();
              v88();
              OUTLINED_FUNCTION_3_2();
              v88();
              if (v103)
              {
                uint64_t result = DateComponents.year.getter();
                if (v104)
                {
LABEL_59:
                  __break(1u);
                  goto LABEL_60;
                }
                BOOL v91 = __OFADD__(result++, 1);
                if (!v91)
                {
                  DateComponents.year.setter();
                  uint64_t result = DateComponents.year.getter();
                  if (v105)
                  {
LABEL_60:
                    __break(1u);
                    return result;
                  }
                  BOOL v91 = __OFADD__(result++, 1);
                  if (!v91)
                  {
                    DateComponents.yearForWeekOfYear.setter();
                    goto LABEL_51;
                  }
                  goto LABEL_56;
                }
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
LABEL_51:
              ((void (*)(char *, uint64_t))v88)(v121, v60);
              return ((uint64_t (*)(char *, uint64_t))v88)(v96, v60);
            }
LABEL_43:
            ((void (*)(uint64_t, uint64_t))v88)(v102, v60);
            ((void (*)(uint64_t, uint64_t))v88)(v101, v60);
            goto LABEL_51;
          }
          _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v83, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
          (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v89, v93);
          uint64_t v96 = v122;
        }
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v94, &demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?));
        uint64_t v101 = v111;
        OUTLINED_FUNCTION_1_0();
        v85();
        uint64_t v102 = v110;
        ((void (*)(uint64_t, char *, uint64_t))v85)(v110, v96, v60);
        goto LABEL_43;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
      uint64_t v61 = v3;
    }
    return _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v61, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  return result;
}

uint64_t outlined init with copy of TerminalElement.Qualifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier;
  if (!lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier)
  {
    type metadata accessor for TerminalElement.Qualifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier);
  }
  return result;
}

Swift::Bool __swiftcall DateComponents.hasYearOnly()()
{
  uint64_t v1 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_5_4();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v16 - v6;
  DateComponents.year.getter();
  char v9 = v8;
  uint64_t v10 = *(void (**)(void))(v3 + 16);
  OUTLINED_FUNCTION_10_2();
  v10();
  if (v9)
  {
    BOOL v12 = 0;
  }
  else
  {
    DateComponents.day.getter();
    BOOL v12 = v11 & 1;
  }
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v7, v1);
  OUTLINED_FUNCTION_10_2();
  v10();
  if (v12)
  {
    DateComponents.month.getter();
    LOBYTE(v12) = v14 & 1;
  }
  v13(v0, v1);
  return v12;
}

uint64_t OUTLINED_FUNCTION_6_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return v0;
}

uint64_t type metadata accessor for ContactsLabelCATsModern()
{
  uint64_t result = type metadata singleton initialization cache for ContactsLabelCATsModern;
  if (!type metadata singleton initialization cache for ContactsLabelCATsModern) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactsLabelCATsModern()
{
  return swift_initClassMetadata2();
}

SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional __swiftcall ContactsLabelCATsModern.ContactsLabelDialogIDs.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x13) {
    return (SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional)19;
  }
  else {
    return (SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional)v1;
  }
}

void ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 5:
    case 6:
    case 10:
    case 11:
    case 16:
    case 18:
      OUTLINED_FUNCTION_12_3();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional *a2@<X8>)
{
  result.value = ContactsLabelCATsModern.ContactsLabelDialogIDs.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(void *a1@<X8>)
{
  ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t ContactsLabelCATsModern.cancelAsLabel()()
{
  OUTLINED_FUNCTION_37();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  OUTLINED_FUNCTION_3_3();
  *unint64_t v1 = v2;
  v1[1] = ContactsLabelCATsModern.cancelAsLabel();
  OUTLINED_FUNCTION_12_3();
  return v4(0xD000000000000014);
}

uint64_t ContactsLabelCATsModern.saveAsLabel()()
{
  OUTLINED_FUNCTION_37();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  OUTLINED_FUNCTION_3_3();
  *unint64_t v1 = v2;
  v1[1] = ContactsLabelCATsModern.saveAsLabel();
  OUTLINED_FUNCTION_12_3();
  return v4(0xD000000000000012);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t ContactsLabelCATsModern.savedAsLabel()()
{
  OUTLINED_FUNCTION_37();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  OUTLINED_FUNCTION_3_3();
  *unint64_t v1 = v2;
  v1[1] = ContactsLabelCATsModern.cancelAsLabel();
  OUTLINED_FUNCTION_12_3();
  return v4(0xD000000000000013);
}

uint64_t ContactsLabelCATsModern.ageUnitsAsLabels(age:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsLabelCATsModern.ageUnitsAsLabels(age:));
}

uint64_t ContactsLabelCATsModern.ageUnitsAsLabels(age:)()
{
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22D59FD50;
  *(void *)(v2 + 32) = 6645601;
  *(void *)(v2 + 40) = 0xE300000000000000;
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for DialogDuration();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  uint64_t v7 = (uint64_t (*)(unint64_t))((int)*MEMORY[0x263F6D0C0] + MEMORY[0x263F6D0C0]);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  OUTLINED_FUNCTION_3_3();
  *uint64_t v4 = v5;
  v4[1] = ContactsLabelCATsModern.ageUnitsAsLabels(age:);
  OUTLINED_FUNCTION_12_3();
  return v7(0xD000000000000016);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_9_2();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:));
}

uint64_t ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 40) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_5(v3, (__n128)xmmword_22D59FD40);
  v3[3].n128_u64[0] = v2;
  v3[4].n128_u64[1] = v4;
  strcpy((char *)&v3[5], "birthdayInfo");
  v3[5].n128_u8[13] = 0;
  v3[5].n128_u16[7] = -5120;
  uint64_t v5 = 0;
  if (v1)
  {
    uint64_t v5 = type metadata accessor for DialogCalendar();
  }
  else
  {
    v3[6].n128_u64[1] = 0;
    v3[7].n128_u64[0] = 0;
  }
  unsigned __int8 v6 = *(unsigned char *)(v0 + 64);
  v3[6].n128_u64[0] = v1;
  v3[7].n128_u64[1] = v5;
  v3[8].n128_u64[0] = 0x7961646F547369;
  v3[8].n128_u64[1] = 0xE700000000000000;
  v3[10].n128_u64[1] = MEMORY[0x263F8D4F8];
  v3[9].n128_u8[0] = v6;
  uint64_t v10 = (uint64_t (*)(unint64_t))((int)*MEMORY[0x263F6D0C0] + MEMORY[0x263F6D0C0]);
  swift_retain();
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  OUTLINED_FUNCTION_3_3();
  *uint64_t v7 = v8;
  v7[1] = ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:);
  OUTLINED_FUNCTION_12_3();
  return v10(0xD00000000000001CLL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *unsigned __int8 v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_9_2();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ContactsLabelCATsModern.quickActionButtonLabels(contact:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsLabelCATsModern.quickActionButtonLabels(contact:));
}

uint64_t ContactsLabelCATsModern.quickActionButtonLabels(contact:)()
{
  OUTLINED_FUNCTION_37();
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[4] = v2;
  v2[4].n128_u64[1] = OUTLINED_FUNCTION_4_5(v2, (__n128)xmmword_22D59FD50);
  v2[3].n128_u64[0] = v1;
  uint64_t v5 = (uint64_t (*)(unint64_t))((int)*MEMORY[0x263F6D0C0] + MEMORY[0x263F6D0C0]);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  *uint64_t v3 = v0;
  v3[1] = ContactsLabelCATsModern.ageUnitsAsLabels(age:);
  OUTLINED_FUNCTION_12_3();
  return v5(0xD000000000000025);
}

uint64_t ContactsLabelCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ContactsLabelCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsLabelCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_15();
  outlined init with copy of URL?(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v14 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v14;
}

uint64_t ContactsLabelCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t ContactsLabelCATsModern.__deallocating_deinit()
{
  uint64_t v0 = CATWrapperSimple.deinit();
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ObjC metadata update function for ContactsLabelCATsModern()
{
  return type metadata accessor for ContactsLabelCATsModern();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEE)
  {
    if (a2 + 18 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 18) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 19;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v5 = v6 - 19;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D4B4974);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  return &type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs;
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_4_5(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x746361746E6F63;
  a1[2].n128_u64[1] = 0xE700000000000000;
  return type metadata accessor for DialogPerson();
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return swift_task_alloc();
}

id ContactService.contactStore.getter()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEA58]), sel_init);
    unsigned int v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t one-time initialization function for current()
{
  type metadata accessor for ContactService();
  swift_allocObject();
  uint64_t result = ContactService.().init()();
  static ContactService.current = result;
  return result;
}

uint64_t static ContactService.current.getter()
{
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t ContactService.cachedMeCard.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t ContactService.().init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_clearCachedMeCard, *MEMORY[0x263EFE120], 0);

  return v0;
}

uint64_t ContactService.clearCachedMeCard()()
{
  return ContactService.cachedMeCard.setter(0);
}

uint64_t static ContactService.defaultProperties.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D5A0080;
  id v1 = (void *)*MEMORY[0x263EFDFE0];
  id v2 = (void *)*MEMORY[0x263EFE040];
  id v3 = (void **)MEMORY[0x263EFDFC8];
  *(void *)(v0 + 32) = *MEMORY[0x263EFDFE0];
  *(void *)(v0 + 40) = v2;
  unsigned int v4 = *v3;
  id v5 = (void *)*MEMORY[0x263EFE038];
  *(void *)(v0 + 48) = *v3;
  *(void *)(v0 + 56) = v5;
  unsigned int v6 = (void *)*MEMORY[0x263EFDFB8];
  BOOL v7 = (void *)*MEMORY[0x263EFE048];
  *(void *)(v0 + 64) = *MEMORY[0x263EFDFB8];
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = (void *)*MEMORY[0x263EFE050];
  uint64_t v9 = (void *)*MEMORY[0x263EFE088];
  uint64_t v10 = (void **)MEMORY[0x263EFE090];
  *(void *)(v0 + 80) = *MEMORY[0x263EFE050];
  *(void *)(v0 + 88) = v9;
  uint64_t v11 = *v10;
  uint64_t v68 = (void *)*MEMORY[0x263EFE080];
  uint64_t v12 = *MEMORY[0x263EFE080];
  *(void *)(v0 + 96) = v11;
  *(void *)(v0 + 104) = v12;
  uint64_t v66 = (void *)*MEMORY[0x263EFE098];
  uint64_t v69 = (void *)*MEMORY[0x263EFE078];
  uint64_t v13 = *MEMORY[0x263EFE078];
  *(void *)(v0 + 112) = *MEMORY[0x263EFE098];
  *(void *)(v0 + 120) = v13;
  uint64_t v67 = (void *)*MEMORY[0x263EFE140];
  uint64_t v70 = (void *)*MEMORY[0x263EFE068];
  uint64_t v14 = *MEMORY[0x263EFE068];
  uint64_t v15 = (void **)MEMORY[0x263EFDF70];
  *(void *)(v0 + 128) = *MEMORY[0x263EFE140];
  *(void *)(v0 + 136) = v14;
  char v71 = *v15;
  char v74 = (void *)*MEMORY[0x263EFE018];
  uint64_t v16 = *MEMORY[0x263EFE018];
  *(void *)(v0 + 144) = v71;
  *(void *)(v0 + 152) = v16;
  char v72 = (void *)*MEMORY[0x263EFE070];
  uint64_t v75 = (void *)*MEMORY[0x263EFDF80];
  uint64_t v17 = *MEMORY[0x263EFDF80];
  *(void *)(v0 + 160) = *MEMORY[0x263EFE070];
  *(void *)(v0 + 168) = v17;
  uint64_t v73 = (void *)*MEMORY[0x263EFE0A0];
  char v76 = (void *)*MEMORY[0x263EFE150];
  uint64_t v18 = *MEMORY[0x263EFE150];
  uint64_t v19 = (void **)MEMORY[0x263EFE0F8];
  *(void *)(v0 + 176) = *MEMORY[0x263EFE0A0];
  *(void *)(v0 + 184) = v18;
  unint64_t v77 = *v19;
  char v80 = (void *)*MEMORY[0x263EFE010];
  uint64_t v20 = *MEMORY[0x263EFE010];
  *(void *)(v0 + 192) = v77;
  *(void *)(v0 + 200) = v20;
  uint64_t v78 = (void *)*MEMORY[0x263EFDF48];
  uint64_t v81 = (void *)*MEMORY[0x263EFE058];
  uint64_t v21 = *MEMORY[0x263EFE058];
  *(void *)(v0 + 208) = *MEMORY[0x263EFDF48];
  *(void *)(v0 + 216) = v21;
  uint64_t v79 = (void *)*MEMORY[0x263EFE148];
  uint64_t v82 = (void *)*MEMORY[0x263EFDF68];
  uint64_t v22 = *MEMORY[0x263EFDF68];
  uint64_t v23 = (void **)MEMORY[0x263EFDFF8];
  *(void *)(v0 + 224) = *MEMORY[0x263EFE148];
  *(void *)(v0 + 232) = v22;
  uint64_t v83 = *v23;
  char v24 = *v23;
  uint64_t v25 = *MEMORY[0x263EFDFF0];
  uint64_t v85 = (void *)*MEMORY[0x263EFDFF0];
  *(void *)(v0 + 240) = v24;
  *(void *)(v0 + 248) = v25;
  uint64_t v84 = (void *)*MEMORY[0x263EFE060];
  uint64_t v26 = *MEMORY[0x263EFE0B8];
  char v87 = (void *)*MEMORY[0x263EFE0B8];
  *(void *)(v0 + 256) = *MEMORY[0x263EFE060];
  *(void *)(v0 + 264) = v26;
  uint64_t v86 = (void *)*MEMORY[0x263EFE110];
  uint64_t v27 = *MEMORY[0x263EFDF40];
  uint64_t v88 = (void *)*MEMORY[0x263EFDF40];
  uint64_t v89 = v0;
  *(void *)(v0 + 272) = *MEMORY[0x263EFE110];
  *(void *)(v0 + 280) = v27;
  specialized Array._endMutation()();
  uint64_t v28 = (void *)*MEMORY[0x263EFE0C8];
  id v29 = v1;
  id v30 = v2;
  id v31 = v4;
  id v32 = v5;
  id v33 = v6;
  id v34 = v7;
  id v35 = v8;
  id v36 = v9;
  id v37 = v11;
  id v38 = v68;
  id v39 = v66;
  id v40 = v69;
  id v41 = v67;
  id v42 = v70;
  id v43 = v71;
  id v44 = v74;
  id v45 = v72;
  id v46 = v75;
  id v47 = v73;
  id v48 = v76;
  id v49 = v77;
  id v50 = v80;
  id v51 = v78;
  id v52 = v81;
  id v53 = v79;
  id v54 = v82;
  id v55 = v83;
  id v56 = v85;
  id v57 = v84;
  id v58 = v87;
  id v59 = v86;
  id v60 = v88;
  id v61 = v28;
  MEMORY[0x230F850D0]();
  OUTLINED_FUNCTION_5_6();
  if (v62) {
    OUTLINED_FUNCTION_7_2();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v63 = (id)*MEMORY[0x263EFE0C0];
  MEMORY[0x230F850D0]();
  OUTLINED_FUNCTION_5_6();
  if (v62) {
    OUTLINED_FUNCTION_7_2();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v64 = (id)*MEMORY[0x263EFDF88];
  MEMORY[0x230F850D0]();
  OUTLINED_FUNCTION_5_6();
  if (v62) {
    OUTLINED_FUNCTION_7_2();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return v89;
}

void *static ContactService.defaultPropertiesString.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22D5A0090;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v5;
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v8;
  *(void *)(inited + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 168) = v10;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v11;
  *(void *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 200) = v12;
  *(void *)(inited + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 216) = v13;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v14;
  *(void *)(inited + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 248) = v15;
  *(void *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 264) = v16;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v17;
  *(void *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 296) = v18;
  *(void *)(inited + 304) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 312) = v19;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 328) = v20;
  *(void *)(inited + 336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 344) = v21;
  *(void *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 360) = v22;
  *(void *)(inited + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 376) = v23;
  *(void *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 392) = v24;
  *(void *)(inited + 400) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 408) = v25;
  *(void *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 424) = v26;
  *(void *)(inited + 432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 440) = v27;
  *(void *)(inited + 448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 456) = v28;
  *(void *)(inited + 464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 472) = v29;
  *(void *)(inited + 480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 488) = v30;
  *(void *)(inited + 496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 504) = v31;
  *(void *)(inited + 512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 520) = v32;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, 32, 1, inited);
  id v37 = v36;
  v36[2] = 32;
  v36[66] = v33;
  v36[67] = v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_14_2();
  if (v39)
  {
    OUTLINED_FUNCTION_13_1(v38);
    id v37 = v44;
  }
  v37[2] = 32;
  id v40 = &v37[2 * v0];
  v40[4] = v33;
  v40[5] = v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_14_2();
  if (v39)
  {
    OUTLINED_FUNCTION_13_1(v41);
    id v37 = v45;
  }
  v37[2] = 32;
  id v42 = &v37[2 * v0];
  v42[4] = v33;
  v42[5] = v35;
  return v37;
}

Swift::Bool __swiftcall ContactService.isAuthorized()()
{
  uint64_t v1 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = v0 + *(int *)(v1 + 20);
  *(void *)uint64_t v4 = "CheckAuthorizationStatus";
  *(void *)(v4 + 8) = 24;
  *(unsigned char *)(v4 + 16) = 2;
  id v5 = objc_msgSend(self, sel_authorizationStatusForEntityType_, 0);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = v5 == (id)3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v20 = v6;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v11 = BinaryInteger.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v8, v9, "[ContactsService] Contacts App authorization status: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t v6 = v20;
    OUTLINED_FUNCTION_2();
  }

  if (v5 != (id)3)
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_22D49E000, v13, v14, "[ContactsService] Requesting authorization to access Contacts App...", v15, 2u);
      OUTLINED_FUNCTION_2();
    }

    id v16 = ContactService.contactStore.getter();
    aBlock[4] = (uint64_t)partial apply for closure #1 in ContactService.isAuthorized();
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_requestAccessForEntityType_completionHandler_, 0, v17);
    _Block_release(v17);
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_beginAccess();
  char v18 = *(unsigned char *)(v6 + 16);
  swift_release();
  return v18;
}

void closure #1 in ContactService.isAuthorized()(char a1, void *a2, uint64_t a3)
{
  id v5 = &unk_26AF0A000;
  if (a2)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
    id v8 = a2;
    id v9 = a2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v24[0] = v13;
      *(_DWORD *)unint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v10, v11, "[ContactsService] Error occurred when trying to gain access to Contacts App: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v13, -1, -1);
      id v16 = v12;
      id v5 = (void *)&unk_26AF0A000;
      MEMORY[0x230F85DE0](v16, -1, -1);
    }
    else
    {
    }
  }
  uint64_t v17 = (unsigned char *)(a3 + 16);
  if (a1)
  {
    swift_beginAccess();
    *uint64_t v17 = 1;
    if (v5[270] != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriContacts);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "[ContactsService] User has authorized access to Contacts App.";
LABEL_17:
      _os_log_impl(&dword_22D49E000, v19, v20, v22, v21, 2u);
      MEMORY[0x230F85DE0](v21, -1, -1);
    }
  }
  else
  {
    swift_beginAccess();
    *uint64_t v17 = 0;
    if (v5[270] != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriContacts);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "[ContactsService] User has NOT authorized access to Contacts App.";
      goto LABEL_17;
    }
  }
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

CNContact_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.fetchContact(matchingIdentifier:)(Swift::String matchingIdentifier)
{
  object = matchingIdentifier._object;
  uint64_t countAndFlagsBits = matchingIdentifier._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v8 = &v6[*(int *)(v3 + 20)];
  *(void *)id v8 = "FetchContactByID";
  *((void *)v8 + 1) = 16;
  v8[16] = 2;
  id v9 = ContactService.contactStore.getter();
  uint64_t v10 = (void *)MEMORY[0x230F84F70](countAndFlagsBits, object);
  type metadata accessor for ContactService();
  static ContactService.defaultProperties.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19[0] = 0;
  unint64_t v12 = (objc_class *)objc_msgSend(v9, sel_unifiedContactWithIdentifier_keysToFetch_error_, v10, isa, v19);

  id v13 = v19[0];
  if (!v12)
  {
    uint64_t v14 = v13;
    unint64_t v15 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v6, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  uint64_t v17 = v12;
  result.value.super.Class isa = v17;
  result.is_nil = v16;
  return result;
}

CNContact_optional __swiftcall ContactService.getMeCard()()
{
  uint64_t v29 = type metadata accessor for ContactsError();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = v0 + *(int *)(v4 + 20);
  *(void *)uint64_t v6 = "FetchMeCard";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  id v7 = *(void **)(v1 + 24);
  if (v7)
  {
    id v8 = v7;
    static os_signpost_type_t.end.getter();
LABEL_7:
    os_signpost(_:dso:log:name:signpostID:)();
    goto LABEL_8;
  }
  swift_retain();
  id v9 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfCSo9CNContactC_s5Error_pTgm5092_s19SiriContactsIntents14ContactServiceC11fetchMeCard33_C7DADC940B50ACE7E9088A70F979DA7CLLs6a5OySo9c3Cs5D14_pGyFAIyKXEfU_0fG7Intents0iJ0CAKXDXMTTf1c_n();
  id v7 = v9;
  if ((v10 & 1) == 0)
  {
    id v11 = v9;
    ContactService.cachedMeCard.setter((uint64_t)v7);
    outlined consume of Result<CNContact, Error>(v7);
    static os_signpost_type_t.end.getter();
    goto LABEL_7;
  }
  id v14 = v9;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  id v16 = v7;
  id v17 = v7;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    v27[1] = v20 + 4;
    uint64_t v21 = (uint64_t)v28;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    uint64_t v22 = Error.localizedDescription.getter();
    unint64_t v24 = v23;
    outlined destroy of Signpost.OpenSignpost(v21, (void (*)(void))type metadata accessor for ContactsError);
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v25 = Error.localizedDescription.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Result<CNContact, Error>(v7);
    outlined consume of Result<CNContact, Error>(v7);
    _os_log_impl(&dword_22D49E000, v18, v19, "%s: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    outlined consume of Result<CNContact, Error>(v7);
  }
  else
  {
    outlined consume of Result<CNContact, Error>(v7);
    outlined consume of Result<CNContact, Error>(v7);
  }
  outlined consume of Result<CNContact, Error>(v7);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = 0;
LABEL_8:
  outlined destroy of Signpost.OpenSignpost(v0, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  id v13 = (objc_class *)v7;
  result.value.super.Class isa = v13;
  result.is_nil = v12;
  return result;
}

id closure #1 in ContactService.fetchMeCard()@<X0>(uint64_t *a1@<X2>, void *a2@<X8>)
{
  v11[1] = *(id *)MEMORY[0x263EF8340];
  id v4 = ContactService.contactStore.getter();
  static ContactService.defaultProperties.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  id v6 = objc_msgSend(v4, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v11);

  id v7 = v11[0];
  if (v6)
  {
    *a2 = v6;
    return v7;
  }
  else
  {
    id v9 = v11[0];
    uint64_t v10 = _convertNSErrorToError(_:)();

    id result = (id)swift_willThrow();
    *a1 = v10;
  }
  return result;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfCSo9CNContactC_s5Error_pTgm5092_s19SiriContactsIntents14ContactServiceC11fetchMeCard33_C7DADC940B50ACE7E9088A70F979DA7CLLs6a5OySo9c3Cs5D14_pGyFAIyKXEfU_0fG7Intents0iJ0CAKXDXMTTf1c_n()
{
  closure #1 in ContactService.fetchMeCard()(&v1, &v2);
  swift_release();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.setMeCardNickName(toNickname:forMeCard:)(Swift::String toNickname, CNContact forMeCard)
{
  object = toNickname._object;
  uint64_t countAndFlagsBits = toNickname._countAndFlagsBits;
  v26[4] = *(id *)MEMORY[0x263EF8340];
  [(objc_class *)forMeCard.super.isa mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CNMutableContact();
  OUTLINED_FUNCTION_18_2();
  id v4 = (void *)MEMORY[0x230F84F70](countAndFlagsBits, object);
  objc_msgSend(v25, sel_setNickname_, v4);

  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB48]), sel_init);
  objc_msgSend(v5, sel_updateContact_, v25);
  id v6 = ContactService.contactStore.getter();
  v26[0] = 0;
  LODWORD(countAndFlagsBits) = objc_msgSend(v6, sel_executeSaveRequest_error_, v5, v26);

  if (countAndFlagsBits)
  {
    uint64_t v7 = one-time initialization token for siriContacts;
    id v8 = v26[0];
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
    uint64_t v10 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_11_2(v11))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_16_0(&dword_22D49E000, v12, v13, "[ContactsService] Nickname was updated successfully!");
      OUTLINED_FUNCTION_2();
    }
  }
  else
  {
    id v14 = v26[0];
    uint64_t v15 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
    id v17 = v15;
    id v18 = v15;
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      OUTLINED_FUNCTION_24();
      v26[0] = (id)OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_6_5(4.8149e-34);
      uint64_t v21 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v26);
      OUTLINED_FUNCTION_8_2();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_21_1(&dword_22D49E000, v23, v24, "[ContactsService] Call to setMeCardNickName() threw an exception: %s");
      OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_53();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.deleteMeCardNickName(forMeCard:)(CNContact forMeCard)
{
  v23[4] = *(id *)MEMORY[0x263EF8340];
  [(objc_class *)forMeCard.super.isa mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CNMutableContact();
  OUTLINED_FUNCTION_18_2();
  objc_msgSend(v22, sel_setValue_forKeyPath_, 0, *MEMORY[0x263EFE050]);
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB48]), sel_init);
  objc_msgSend(v1, sel_updateContact_, v22);
  id v2 = ContactService.contactStore.getter();
  v23[0] = 0;
  unsigned int v3 = objc_msgSend(v2, sel_executeSaveRequest_error_, v1, v23);

  if (!v3)
  {
    id v11 = v23[0];
    uint64_t v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    id v14 = v12;
    id v15 = v12;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      OUTLINED_FUNCTION_24();
      v23[0] = (id)OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_6_5(4.8149e-34);
      uint64_t v18 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)v23);
      OUTLINED_FUNCTION_8_2();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_21_1(&dword_22D49E000, v20, v21, "[ContactsService] Call to deleteMeCardNickName() threw an exception: %s");
      OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_53();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_13;
  }
  uint64_t v4 = one-time initialization token for siriContacts;
  id v5 = v23[0];
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_11_2(v8))
  {

LABEL_13:
    goto LABEL_14;
  }
  *(_WORD *)OUTLINED_FUNCTION_20() = 0;
  OUTLINED_FUNCTION_16_0(&dword_22D49E000, v9, v10, "[ContactsService] Nickname was deleted successfully!");
  OUTLINED_FUNCTION_2();

LABEL_14:
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.setMeCardRelationship(relationLabel:contactName:forMeCard:)(Swift::String relationLabel, Swift::String contactName, CNContact forMeCard)
{
  object = contactName._object;
  uint64_t countAndFlagsBits = contactName._countAndFlagsBits;
  v44[4] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v7 = forMeCard.super.isa;
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v40 = countAndFlagsBits;
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_24();
    v44[0] = (id)OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v10 = 136315138;
    id v11 = [(objc_class *)v7 contactRelations];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = MEMORY[0x230F85100](v13, v12);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v8, v9, "#ContactService contactRelations: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t countAndFlagsBits = v40;
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = CNLabeledValue<>.init(relationLabel:contactName:)(relationLabel._countAndFlagsBits, (uint64_t)relationLabel._object, countAndFlagsBits, object);
  id v18 = [(objc_class *)v7 contactRelations];
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = v19;
  uint64_t v20 = v17;
  MEMORY[0x230F850D0]();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  [(objc_class *)v7 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CNMutableContact();
  swift_dynamicCast();
  uint64_t v21 = v42;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v42 setContactRelations:isa];

  uint64_t v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB48]), sel_init);
  [v23 updateContact:v42];
  id v24 = ContactService.contactStore.getter();
  v44[0] = 0;
  LODWORD(isa) = objc_msgSend(v24, sel_executeSaveRequest_error_, v23, v44);

  if (isa)
  {
    id v25 = v44[0];
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_22_0(&dword_22D49E000, v28, v29, "[ContactsService] Relationship was updated successfully!");
      OUTLINED_FUNCTION_2();
      uint64_t v30 = v20;
    }
    else
    {
      uint64_t v30 = v26;
      unint64_t v26 = v42;
      uint64_t v21 = v23;
      uint64_t v23 = v20;
    }
  }
  else
  {
    id v31 = v44[0];
    uint64_t v32 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v33 = v32;
    id v34 = v32;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)OUTLINED_FUNCTION_24();
      v44[0] = (id)OUTLINED_FUNCTION_35();
      *(_DWORD *)id v37 = 136315138;
      swift_getErrorValue();
      uint64_t v38 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v35, v36, "[ContactsService] Call to setMeCardRelationship() threw an exception: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_20_2();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)(Swift::String relationLabel, Swift::String contactName, CNContact forMeCard)
{
  uint64_t countAndFlagsBits = relationLabel._countAndFlagsBits;
  object = relationLabel._object;
  v53[4] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v50 = (uint64_t)object;
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)OUTLINED_FUNCTION_24();
    v53[0] = (id)OUTLINED_FUNCTION_35();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)v53);
    OUTLINED_FUNCTION_1_2();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v6, v7, "[ContactsService] Relation label: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v9 = forMeCard.super.isa;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = &off_2649B0000;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_24();
    v53[0] = (id)OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v13 = 136315138;
    id v14 = [(objc_class *)v9 contactRelations];
    unint64_t v15 = v9;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = MEMORY[0x230F85100](v17, v16);
    unint64_t v20 = v19;
    uint64_t v12 = &off_2649B0000;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)v53);
    OUTLINED_FUNCTION_1_2();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_type_t v9 = v15;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v10, v11, "[ContactsService] Relations before: %s", v13, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  id v21 = [v9 (SEL)v12[68]];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Array<A>.removeAllWhere(contactName:relationLabel:)(contactName._countAndFlagsBits, (uint64_t)contactName._object, countAndFlagsBits, v50, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_11_2(v25))
  {
    unint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_24();
    v53[0] = (id)OUTLINED_FUNCTION_35();
    *(_DWORD *)unint64_t v26 = 136315138;
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = MEMORY[0x230F85100](v27, v22);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, (uint64_t *)v53);
    OUTLINED_FUNCTION_1_2();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v24, (os_log_type_t)v12, "[ContactsService] Relations after: %s", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  [(objc_class *)v9 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CNMutableContact();
  swift_dynamicCast();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v52, sel_setContactRelations_, isa);

  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB48]), sel_init);
  objc_msgSend(v32, sel_updateContact_, v52);
  id v33 = ContactService.contactStore.getter();
  v53[0] = 0;
  unsigned int v34 = objc_msgSend(v33, sel_executeSaveRequest_error_, v32, v53);

  if (v34)
  {
    id v35 = v53[0];
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_22_0(&dword_22D49E000, v38, v39, "[ContactsService] Relationship was deleted successfully!");
      OUTLINED_FUNCTION_2();
    }
  }
  else
  {
    id v40 = v53[0];
    unint64_t v41 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v42 = v41;
    id v43 = v41;
    id v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)OUTLINED_FUNCTION_24();
      v53[0] = (id)OUTLINED_FUNCTION_35();
      *(_DWORD *)id v46 = 136315138;
      swift_getErrorValue();
      uint64_t v47 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v53);
      OUTLINED_FUNCTION_1_2();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v44, v45, "[ContactsService] Call to deleteMeCardRelationship() threw an exception: %s", v46, 0xCu);
      OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_20_2();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t ContactService.deinit()
{
  return v0;
}

uint64_t ContactService.__deallocating_deinit()
{
  ContactService.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

unint64_t protocol witness for ContactServiceProtocol.fetchContact(matchingIdentifier:) in conformance ContactService(uint64_t a1, uint64_t a2)
{
  return (unint64_t)ContactService.fetchContact(matchingIdentifier:)(*(Swift::String *)&a1);
}

BOOL protocol witness for ContactServiceProtocol.isAuthorized() in conformance ContactService()
{
  return ContactService.isAuthorized()();
}

unint64_t protocol witness for ContactServiceProtocol.getMeCard() in conformance ContactService()
{
  return (unint64_t)ContactService.getMeCard()();
}

void protocol witness for ContactServiceProtocol.setMeCardNickName(toNickname:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, CNContact a3)
{
}

void protocol witness for ContactServiceProtocol.deleteMeCardNickName(forMeCard:) in conformance ContactService(CNContact a1)
{
}

void protocol witness for ContactServiceProtocol.setMeCardRelationship(relationLabel:contactName:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CNContact a5)
{
}

void protocol witness for ContactServiceProtocol.deleteMeCardRelationship(relationLabel:contactName:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CNContact a5)
{
}

uint64_t sub_22D4B79DC()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

void partial apply for closure #1 in ContactService.isAuthorized()(char a1, void *a2)
{
  closure #1 in ContactService.isAuthorized()(a1, a2, v2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata accessor for ContactService()
{
  return self;
}

void outlined consume of Result<CNContact, Error>(id a1)
{
}

unint64_t lazy protocol witness table accessor for type ContactsError and conformance ContactsError()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsError and conformance ContactsError;
  if (!lazy protocol witness table cache variable for type ContactsError and conformance ContactsError)
  {
    type metadata accessor for ContactsError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError);
  }
  return result;
}

uint64_t outlined destroy of Signpost.OpenSignpost(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t type metadata accessor for CNMutableContact()
{
  unint64_t result = lazy cache variable for type metadata for CNMutableContact;
  if (!lazy cache variable for type metadata for CNMutableContact)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNMutableContact);
  }
  return result;
}

uint64_t dispatch thunk of ContactServiceProtocol.fetchContact(matchingIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ContactServiceProtocol.isAuthorized()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContactServiceProtocol.getMeCard()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContactServiceProtocol.setMeCardNickName(toNickname:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ContactServiceProtocol.deleteMeCardNickName(forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ContactServiceProtocol.setMeCardRelationship(relationLabel:contactName:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of ContactServiceProtocol.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 56))();
}

uint64_t method lookup function for ContactService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactService);
}

uint64_t dispatch thunk of ContactService.isAuthorized()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ContactService.fetchContact(matchingIdentifier:)()
{
  OUTLINED_FUNCTION_10_3();
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of ContactService.getMeCard()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ContactService.setMeCardNickName(toNickname:forMeCard:)()
{
  OUTLINED_FUNCTION_10_3();
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of ContactService.deleteMeCardNickName(forMeCard:)()
{
  OUTLINED_FUNCTION_10_3();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of ContactService.setMeCardRelationship(relationLabel:contactName:forMeCard:)()
{
  OUTLINED_FUNCTION_10_3();
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of ContactService.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)()
{
  OUTLINED_FUNCTION_10_3();
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t OUTLINED_FUNCTION_6_5(float a1)
{
  *id v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_3()
{
  return swift_arrayDestroy();
}

BOOL OUTLINED_FUNCTION_11_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_13_1(unint64_t a1@<X8>)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

void OUTLINED_FUNCTION_16_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_21_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_22_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t dispatch thunk of ModifyOperationProtocol.stringify.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ModifyOperation.stringify.getter(unint64_t a1)
{
  if (a1 < 4) {
    return *(void *)&aUnknown[8 * a1];
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t static ModifyOperation.from(_:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  BOOL v4 = a1 == 0x6574656C6564 && a2 == 0xE600000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 3;
  }
  BOOL v6 = a1 == 0x6563616C706572 && a2 == 0xE700000000000000;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_8_3();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22D59FB50;
  *(void *)(v13 + 32) = a1;
  uint64_t v24 = v13;
  specialized Array._endMutation()();
  uint64_t v14 = v24;
  uint64_t v15 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v15);
  swift_retain();
  MEMORY[0x230F83510](v14, v12);
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v12, &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v16);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v7, v1);
  Siri_Nlu_External_UserStatedTask.init(_:)(v1, MEMORY[0x263F715F8], MEMORY[0x263F715F0], v17, v18, v19, v20, v21, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, vars0,
    vars8);
  swift_release();
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

void Siri_Nlu_External_UserStatedTask.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  Siri_Nlu_External_UserStatedTask.init(_:)(a1, MEMORY[0x263F715F8], MEMORY[0x263F715F0], a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void (*v23)(uint64_t);
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  OUTLINED_FUNCTION_10();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v29 = OUTLINED_FUNCTION_10_0(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_15();
  uint64_t v32 = v31 - v30;
  id v33 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_0_0();
  id v35 = v34;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_11_3();
  uint64_t v39 = v37 - v38;
  unint64_t v41 = MEMORY[0x270FA5388](v40);
  id v43 = (char *)&a9 - v42;
  v25(v41);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v27, v32);
  if (__swift_getEnumTagSinglePayload(v32, 1, v33) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v27, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v43, v32, v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v39, v43, v33);
    v23(v39);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v27, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v43, v33);
  }
  OUTLINED_FUNCTION_8();
}

uint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  unint64_t v0 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      goto LABEL_5;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x230F854E0](0, v1);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
  }
LABEL_5:
  swift_bridgeObjectRelease();
  return v2;
}

void Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v56 = type metadata accessor for Google_Protobuf_StringValue();
  OUTLINED_FUNCTION_0_0();
  uint64_t v58 = v1;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_4();
  uint64_t v55 = v3;
  uint64_t v57 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v8 = v7;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_12_4();
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  uint64_t v24 = OUTLINED_FUNCTION_10_0(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_4();
  uint64_t v52 = v25;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v16);
  uint64_t v26 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0, v12);
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    uint64_t v48 = v5;
    uint64_t v46 = 1;
    uint64_t v47 = v52;
    uint64_t v32 = v57;
    goto LABEL_21;
  }
  uint64_t v50 = v26;
  uint64_t v51 = v5;
  uint64_t v28 = v5 + 16;
  uint64_t v29 = *(void (**)(void))(v5 + 16);
  unint64_t v30 = v26 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
  id v54 = (void (**)(uint64_t, uint64_t))(v58 + 8);
  uint64_t v58 = *(void *)(v28 + 56);
  id v59 = (void (**)(uint64_t, uint64_t))(v28 - 8);
  swift_bridgeObjectRetain();
  uint64_t v31 = v8;
  uint64_t v32 = v57;
  id v53 = v11;
  while (1)
  {
    OUTLINED_FUNCTION_14_3();
    v29();
    Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
    OUTLINED_FUNCTION_10_4();
    BOOL v34 = v34 && v33 == 0xE800000000000000;
    if (v34)
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v29)(v31, v11, v32);
    }
    else
    {
      char v35 = OUTLINED_FUNCTION_7_3();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_14_3();
      v29();
      if ((v35 & 1) == 0)
      {
        os_log_type_t v36 = *v59;
        (*v59)(v31, v32);
        goto LABEL_16;
      }
    }
    uint64_t v37 = v28;
    uint64_t v38 = v55;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v39 = v31;
    uint64_t v40 = Google_Protobuf_StringValue.value.getter();
    uint64_t v42 = v41;
    (*v54)(v38, v56);
    OUTLINED_FUNCTION_17_1();
    if (v40 == v43 && v42 == 0xE700000000000000) {
      break;
    }
    char v45 = OUTLINED_FUNCTION_6_6();
    swift_bridgeObjectRelease();
    os_log_type_t v36 = *v59;
    uint64_t v32 = v57;
    (*v59)(v39, v57);
    if (v45) {
      goto LABEL_20;
    }
    uint64_t v31 = v39;
    uint64_t v28 = v37;
    uint64_t v11 = v53;
LABEL_16:
    v36((uint64_t)v11, v32);
    v30 += v58;
    if (!--v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = 1;
      uint64_t v48 = v51;
      uint64_t v47 = v52;
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v57;
  (*v59)(v39, v57);
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v47 = v52;
  uint64_t v48 = v51;
  OUTLINED_FUNCTION_13_2();
  v49();
  uint64_t v46 = 0;
LABEL_21:
  __swift_storeEnumTagSinglePayload(v47, v46, 1, v32);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v47, 1, v32) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v47, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  }
  else
  {
    Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v32);
  }
  OUTLINED_FUNCTION_8();
}

void Siri_Nlu_External_UserDialogAct.contactIds.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v74 = type metadata accessor for Google_Protobuf_StringValue();
  OUTLINED_FUNCTION_0_0();
  uint64_t v85 = v0;
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_3_4();
  uint64_t v73 = v2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v81 = v7;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v8);
  uint64_t v83 = (char *)&v71 - v9;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v10);
  char v80 = (char *)&v71 - v11;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_0_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_15();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_0_0();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_15();
  uint64_t v28 = v27 - v26;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v22);
  uint64_t v29 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
  unint64_t v30 = (char *)MEMORY[0x263F8EE78];
  uint64_t v86 = (char *)MEMORY[0x263F8EE78];
  uint64_t v79 = *(void *)(v29 + 16);
  if (v79)
  {
    unint64_t v31 = 0;
    uint64_t v77 = v5 + 16;
    uint64_t v78 = v5;
    uint64_t v32 = (void (**)(void))(v5 + 8);
    char v72 = (void (**)(uint64_t, uint64_t))(v85 + 8);
    uint64_t v82 = (void (**)(void))(v5 + 32);
    uint64_t v33 = v5;
    uint64_t v75 = v14;
    uint64_t v76 = v29;
    while (1)
    {
      if (v31 >= *(void *)(v29 + 16))
      {
        __break(1u);
        return;
      }
      unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v84 = *(void *)(v33 + 72);
      uint64_t v85 = (char *)v34;
      char v35 = *(void (**)(void))(v33 + 16);
      ((void (*)(char *, unint64_t, uint64_t))v35)(v14, v29 + v34 + v84 * v31, v3);
      Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
      OUTLINED_FUNCTION_10_4();
      BOOL v37 = v37 && v36 == 0xE800000000000000;
      uint64_t v38 = v32;
      if (v37)
      {
        swift_bridgeObjectRelease();
        ((void (*)(char *, char *, uint64_t))v35)(v80, v14, v3);
      }
      else
      {
        char v39 = OUTLINED_FUNCTION_7_3();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_14_3();
        v35();
        if ((v39 & 1) == 0)
        {
          uint64_t v32 = v38;
          uint64_t v40 = *v38;
          uint64_t v41 = OUTLINED_FUNCTION_2_4();
          v40(v41);
          uint64_t v14 = v75;
          goto LABEL_16;
        }
      }
      uint64_t v42 = v73;
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      uint64_t v43 = Google_Protobuf_StringValue.value.getter();
      uint64_t v45 = v44;
      (*v72)(v42, v74);
      OUTLINED_FUNCTION_17_1();
      if (v43 == v46 && v45 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = v38;
        uint64_t v50 = OUTLINED_FUNCTION_2_4();
        v51(v50);
        uint64_t v14 = v75;
LABEL_18:
        uint64_t v52 = *v82;
        OUTLINED_FUNCTION_13_2();
        v52();
        id v53 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          id v53 = v86;
        }
        unint64_t v54 = *((void *)v53 + 2);
        if (v54 >= *((void *)v53 + 3) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          id v53 = v86;
        }
        *((void *)v53 + 2) = v54 + 1;
        OUTLINED_FUNCTION_13_2();
        v52();
        uint64_t v86 = v53;
        goto LABEL_23;
      }
      char v48 = OUTLINED_FUNCTION_6_6();
      swift_bridgeObjectRelease();
      uint64_t v32 = v38;
      uint64_t v40 = *v38;
      uint64_t v49 = OUTLINED_FUNCTION_2_4();
      v40(v49);
      uint64_t v14 = v75;
      if (v48) {
        goto LABEL_18;
      }
LABEL_16:
      ((void (*)(char *, uint64_t))v40)(v14, v3);
LABEL_23:
      uint64_t v29 = v76;
      ++v31;
      uint64_t v33 = v78;
      if (v79 == v31)
      {
        unint64_t v30 = v86;
        goto LABEL_26;
      }
    }
  }
  uint64_t v33 = v5;
LABEL_26:
  swift_bridgeObjectRelease();
  uint64_t v55 = *((void *)v30 + 2);
  if (v55)
  {
    uint64_t v57 = *(char **)(v33 + 16);
    uint64_t v56 = v33 + 16;
    uint64_t v58 = &v30[(*(unsigned __int8 *)(v56 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 64)];
    uint64_t v84 = *(void *)(v56 + 56);
    uint64_t v85 = v57;
    id v59 = (void (**)(uint64_t, uint64_t))(v56 - 8);
    uint64_t v83 = v30;
    swift_retain();
    uint64_t v60 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v61 = v81;
      uint64_t v62 = v56;
      ((void (*)(uint64_t, char *, uint64_t))v85)(v81, v58, v3);
      uint64_t v63 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
      uint64_t v65 = v64;
      (*v59)(v61, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1, v60);
        uint64_t v60 = v69;
      }
      unint64_t v67 = *(void *)(v60 + 16);
      unint64_t v66 = *(void *)(v60 + 24);
      if (v67 >= v66 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, v60);
        uint64_t v60 = v70;
      }
      *(void *)(v60 + 16) = v67 + 1;
      uint64_t v68 = v60 + 16 * v67;
      *(void *)(v68 + 32) = v63;
      *(void *)(v68 + 40) = v65;
      v58 += v84;
      --v55;
      uint64_t v56 = v62;
    }
    while (v55);
    swift_release_n();
  }
  else
  {
    swift_release();
  }
  OUTLINED_FUNCTION_8();
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)(uint64_t a1)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, MEMORY[0x263F715D8], MEMORY[0x263F715D0]);
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)(uint64_t a1)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, MEMORY[0x263F71740], MEMORY[0x263F71738]);
}

#error "22D4B9204: call analysis failed (funcsize=112)"

void static Siri_Nlu_External_SystemOffered.from(_:)()
{
  OUTLINED_FUNCTION_10();
  v21[0] = v1;
  v21[1] = v2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_8_3();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_11_3();
  uint64_t v16 = v14 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v21 - v18;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v20(v9, (char *)v21[0], v3);
  Siri_Nlu_External_UserDialogAct.init()();
  v20(v0, v9, v3);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  Siri_Nlu_External_SystemOffered.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v16, v19, v10);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v10);
  OUTLINED_FUNCTION_8();
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[5] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

uint64_t ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_28_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_27_2();
  *(void *)(v10 + 48) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_35_1(v12, (__n128)xmmword_22D59FD50);
  uint64_t v14 = OUTLINED_FUNCTION_17_2((uint64_t)v13, (uint64_t)"requestedNickname");
  OUTLINED_FUNCTION_34_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_1(v16);
  if (v17)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_41_0();
  }
  else
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_25_2();
    v18();
  }
  uint64_t v19 = OUTLINED_FUNCTION_6_4();
  uint64_t v20 = (void *)OUTLINED_FUNCTION_31_1(v19);
  *uint64_t v20 = v21;
  v20[1] = ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v26(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)()
{
  OUTLINED_FUNCTION_4();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v7);
  v1[8] = OUTLINED_FUNCTION_31();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

uint64_t ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = v10[11];
  uint64_t v12 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = swift_allocObject();
  v10[12] = v13;
  *(_OWORD *)(v13 + 16) = xmmword_22D5A01D0;
  *(void *)(v13 + 32) = 0xD000000000000015;
  *(void *)(v13 + 40) = 0x800000022D5A7640;
  outlined init with copy of URL?(v12, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_39_0(v14);
  if (v15)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 72) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v16();
  }
  uint64_t v17 = v10[10];
  uint64_t v18 = v10[4];
  *(void *)(v13 + 80) = 0xD000000000000014;
  *(void *)(v13 + 88) = 0x800000022D5A77C0;
  outlined init with copy of URL?(v18, v17, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v17, 1, v12);
  uint64_t v20 = v10[10];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v10[10], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 120) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_13_3();
  outlined init with copy of URL?(v22, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_2();
  if (v15)
  {
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 168) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_11_4();
  outlined init with copy of URL?(v24, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_3();
  if (v15)
  {
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 216) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v25();
  }
  uint64_t v26 = (void *)OUTLINED_FUNCTION_6_4();
  v10[13] = v26;
  *uint64_t v26 = v10;
  v26[1] = ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v31(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)()
{
  OUTLINED_FUNCTION_4();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v7);
  v1[8] = OUTLINED_FUNCTION_31();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = v10[11];
  uint64_t v12 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = swift_allocObject();
  v10[12] = v13;
  *(_OWORD *)(v13 + 16) = xmmword_22D5A01D0;
  *(void *)(v13 + 32) = 0x4E64657461647075;
  *(void *)(v13 + 40) = 0xEF656D616E6B6369;
  outlined init with copy of URL?(v12, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_39_0(v14);
  if (v15)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 72) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v16();
  }
  uint64_t v17 = v10[10];
  uint64_t v18 = v10[4];
  *(void *)(v13 + 80) = 0xD000000000000010;
  *(void *)(v13 + 88) = 0x800000022D5A7760;
  outlined init with copy of URL?(v18, v17, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v17, 1, v12);
  uint64_t v20 = v10[10];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v10[10], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 120) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_13_3();
  outlined init with copy of URL?(v22, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_2();
  if (v15)
  {
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 168) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_11_4();
  outlined init with copy of URL?(v24, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_3();
  if (v15)
  {
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 216) = v12;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v25();
  }
  uint64_t v26 = (void *)OUTLINED_FUNCTION_6_4();
  v10[13] = v26;
  *uint64_t v26 = v10;
  v26[1] = ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v31(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 104) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  *(void *)(v1 + 16) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v7);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_31();
  *(void *)(v1 + 64) = swift_task_alloc();
  *(void *)(v1 + 72) = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  char v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v10 + 80) = v13;
  *(_OWORD *)(v13 + 16) = xmmword_22D5A01D0;
  OUTLINED_FUNCTION_17_2(v13, (uint64_t)"updatedRelationship");
  outlined init with copy of URL?(v12, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_2();
  if (v15)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 72) = v14;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v16();
  }
  uint64_t v17 = *(void *)(v10 + 64);
  uint64_t v18 = *(void *)(v10 + 32);
  *(void *)(v13 + 80) = 0x4E746361746E6F63;
  *(void *)(v13 + 88) = 0xEB00000000656D61;
  outlined init with copy of URL?(v18, v17, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_3();
  if (v15)
  {
    outlined destroy of URL?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 120) = v14;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v19();
  }
  uint64_t v20 = *(void *)(v10 + 56);
  uint64_t v21 = *(void *)(v10 + 40);
  *(void *)(v13 + 128) = 0x704F796669646F6DLL;
  *(void *)(v13 + 136) = 0xEF6E6F6974617265;
  outlined init with copy of URL?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v14) == 1)
  {
    outlined destroy of URL?(*(void *)(v10 + 56), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }
  else
  {
    *(void *)(v13 + 168) = v14;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 144));
    OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_3_5();
    v22();
  }
  char v23 = *(unsigned char *)(v10 + 104);
  *(void *)(v13 + 176) = 0x4D6563696F567369;
  *(void *)(v13 + 184) = 0xEB0000000065646FLL;
  *(void *)(v13 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v13 + 192) = v23;
  uint64_t v24 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v10 + 88) = v24;
  *uint64_t v24 = v10;
  v24[1] = ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v29(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

uint64_t ModifyContactAttributeCATs.promptForNickname()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  char v3 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 16) = v3;
  *char v3 = v0;
  v3[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  uint64_t v4 = MEMORY[0x263F8EE78];
  return v6(v2, 0xD000000000000028, 0x800000022D5A76D0, v4);
}

uint64_t ModifyContactAttributeCATs.promptForRelationship(contact:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ModifyContactAttributeCATs.promptForRelationship(contact:));
}

uint64_t ModifyContactAttributeCATs.promptForRelationship(contact:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_27_2();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_22_1(v2, (__n128)xmmword_22D59FD50);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_18_3();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_32_1(v4);
  *uint64_t v5 = v6;
  v5[1] = ModifyContactAttributeCATs.promptForRelationship(contact:);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_30_1();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5();
    return v10();
  }
}

uint64_t ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[5] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_28_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_27_2();
  *(void *)(v10 + 48) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_35_1(v12, (__n128)xmmword_22D59FD50);
  uint64_t v14 = OUTLINED_FUNCTION_17_2((uint64_t)v13, (uint64_t)"requestedRelationship");
  OUTLINED_FUNCTION_34_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_1(v16);
  if (v17)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_41_0();
  }
  else
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_25_2();
    v18();
  }
  uint64_t v19 = OUTLINED_FUNCTION_6_4();
  uint64_t v20 = (void *)OUTLINED_FUNCTION_31_1(v19);
  *uint64_t v20 = v21;
  v20[1] = ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v26(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t ModifyContactAttributeCATs.relationshipExists()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = dispatch thunk of ContactsUnsupportedFlow.execute();
  uint64_t v4 = MEMORY[0x263F8EE78];
  return v6(v2, 0xD000000000000029, 0x800000022D5A7610, v4);
}

uint64_t ModifyContactAttributeCATs.relationshipNotFound(contact:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ModifyContactAttributeCATs.relationshipNotFound(contact:));
}

uint64_t ModifyContactAttributeCATs.relationshipNotFound(contact:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_27_2();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_22_1(v2, (__n128)xmmword_22D59FD50);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_18_3();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_32_1(v4);
  *uint64_t v5 = v6;
  v5[1] = ModifyContactAttributeCATs.relationshipNotFound(contact:);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_30_1();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5();
    return v10();
  }
}

uint64_t ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:));
}

uint64_t ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22D5A01E0;
  OUTLINED_FUNCTION_36_1();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  uint64_t v6 = 0;
  if (v1)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  char v7 = *(unsigned char *)(v0 + 64);
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 88) = 0x800000022D5A75C0;
  *(void *)(v2 + 120) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v2 + 96) = v7;
  uint64_t v12 = (uint64_t (*)(void))((int)*MEMORY[0x263F6D058] + MEMORY[0x263F6D058]);
  *(void *)(v2 + 72) = v6;
  *(void *)(v2 + 80) = 0xD000000000000016;
  swift_retain();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_32_1(v8);
  *uint64_t v9 = v10;
  v9[1] = ModifyContactAttributeCATs.relationshipNotFound(contact:);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_30_1();
  return v12();
}

uint64_t ModifyContactAttributeCATs.unsupportedDeviceIdiom(contactAttributeType:device:)()
{
  OUTLINED_FUNCTION_4();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ModifyContactAttributeCATs.unsupportedDeviceIdiom(contactAttributeType:device:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = v10[6];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)swift_allocObject();
  v10[7] = v12;
  uint64_t v13 = OUTLINED_FUNCTION_35_1(v12, (__n128)xmmword_22D5A01E0);
  uint64_t v14 = OUTLINED_FUNCTION_17_2((uint64_t)v13, (uint64_t)"contactAttributeType");
  OUTLINED_FUNCTION_34_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v11, 1, v16) == 1)
  {
    outlined destroy of URL?(v10[6], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_41_0();
  }
  else
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_25_2();
    v17();
  }
  unint64_t v18 = v10[4];
  OUTLINED_FUNCTION_36_1();
  v12[5].n128_u64[0] = v19;
  v12[5].n128_u64[1] = v20;
  uint64_t v21 = 0;
  if (v18)
  {
    uint64_t v21 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[6].n128_u64[1] = 0;
    v12[7].n128_u64[0] = 0;
  }
  v12[6].n128_u64[0] = v18;
  v12[7].n128_u64[1] = v21;
  OUTLINED_FUNCTION_18_3();
  uint64_t v22 = (void *)swift_task_alloc();
  v10[8] = v22;
  *uint64_t v22 = v10;
  v22[1] = ModifyContactAttributeCATs.unsupportedDeviceIdiom(contactAttributeType:device:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v27(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[5] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

uint64_t ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_28_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_27_2();
  *(void *)(v10 + 48) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_35_1(v12, (__n128)xmmword_22D59FD50);
  uint64_t v14 = OUTLINED_FUNCTION_17_2((uint64_t)v13, (uint64_t)"contactAttributeType");
  OUTLINED_FUNCTION_34_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_1(v16);
  if (v17)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_41_0();
  }
  else
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_25_2();
    v18();
  }
  uint64_t v19 = OUTLINED_FUNCTION_6_4();
  unint64_t v20 = (void *)OUTLINED_FUNCTION_31_1(v19);
  *unint64_t v20 = v21;
  v20[1] = ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_29_1();
  return v26(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t ModifyContactAttributeCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ModifyContactAttributeCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ModifyContactAttributeCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_10_0(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v11, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v12 = ContactsCommonCATs.init(templateDir:options:globals:)((uint64_t)v11, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1, &demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t ModifyContactAttributeCATs.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ModifyContactAttributeCATs()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeCATs;
  if (!type metadata singleton initialization cache for ModifyContactAttributeCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeCATs()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ModifyContactAttributeCATs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModifyContactAttributeCATs);
}

uint64_t ObjC metadata update function for ModifyContactAttributeCATs()
{
  return type metadata accessor for ModifyContactAttributeCATs();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v1 + 176) = 0x704F796669646F6DLL;
  *(void *)(v1 + 184) = 0xEF6E6F6974617265;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 128) = 0x4E746361746E6F63;
  *(void *)(v1 + 136) = 0xEB00000000656D61;
  return result;
}

double OUTLINED_FUNCTION_14_4()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_1(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_17_2@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_20_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_22_1(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x746361746E6F63;
  a1[2].n128_u64[1] = 0xE700000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_31_1(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of URL?(v3, v4, a3);
}

__n128 *OUTLINED_FUNCTION_35_1(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t *OUTLINED_FUNCTION_40_0()
{
  *(void *)(v2 + 72) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

double OUTLINED_FUNCTION_41_0()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t ContactsBirthdayInfo.__allocating_init(contact:shouldAccountForYearless:)(void *a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v17 = OUTLINED_FUNCTION_10_0(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v23 = v22;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_15();
  uint64_t v27 = v26 - v25;
  CNContact.timezonedBirthdate.getter(v20);
  if (__swift_getEnumTagSinglePayload(v20, 1, v21) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v27, v20, v21);
    uint64_t v29 = a1;
    if (a2)
    {
      CNContact.timezonedBirthday.getter(v8);
      if (__swift_getEnumTagSinglePayload(v8, 1, v9) == 1)
      {
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for DateComponents?);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v8, v9);
        DateComponents.year.getter();
        if (v30)
        {
          type metadata accessor for DialogDateFormatter.Builder();
          OUTLINED_FUNCTION_1_4();
          DialogDateFormatter.Builder.init()();
          dispatch thunk of DialogDateFormatter.Builder.withOmitYear(_:)();
          swift_release();
          dispatch thunk of DialogDateFormatter.Builder.build()();
          swift_release();
          type metadata accessor for ContactsBirthdayInfo.Builder(0);
          *(void *)(OUTLINED_FUNCTION_1_4() + 16) = 0;
          uint64_t v35 = type metadata accessor for SpeakableString();
          OUTLINED_FUNCTION_8_4(v35);
          OUTLINED_FUNCTION_1_4();
          DialogCalendar.Builder.init()();
          swift_retain();
          uint64_t v38 = a1;
          dispatch thunk of DialogCalendar.Builder.withDateFormatter(_:)();
          swift_release();
          swift_release();
          Date.timeIntervalSince1970.getter();
          uint64_t v36 = dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
          swift_release();
          uint64_t v37 = ContactsBirthdayInfo.Builder.withBirthday(_:)(v36);
          swift_release();
          swift_release();
          type metadata accessor for ContactsBirthdayInfo(0);
          OUTLINED_FUNCTION_1_4();
          uint64_t v28 = ContactsBirthdayInfo.init(builder:)(v37);
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
          goto LABEL_9;
        }
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
      }
    }
    type metadata accessor for ContactsBirthdayInfo.Builder(0);
    *(void *)(OUTLINED_FUNCTION_1_4() + 16) = 0;
    uint64_t v31 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_8_4(v31);
    OUTLINED_FUNCTION_1_4();
    DialogCalendar.Builder.init()();
    Date.timeIntervalSince1970.getter();
    uint64_t v32 = dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
    swift_release();
    uint64_t v33 = ContactsBirthdayInfo.Builder.withBirthday(_:)(v32);
    swift_release();
    swift_release();
    type metadata accessor for ContactsBirthdayInfo(0);
    OUTLINED_FUNCTION_1_4();
    uint64_t v28 = ContactsBirthdayInfo.init(builder:)(v33);

LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v21);
    return v28;
  }

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v20, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return 0;
}

uint64_t DialogCalendar.init(contact:mockGlobals:)(void *a1, void *a2)
{
  id v129 = a2;
  uint64_t v3 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v125 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v127 = (char *)&v117 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v11 = OUTLINED_FUNCTION_10_0(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_4();
  uint64_t v126 = v12;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v117 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v117 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v20 = OUTLINED_FUNCTION_10_0(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_15();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_4_4();
  uint64_t v123 = v28;
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v117 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v117 - v33;
  id v128 = a1;
  CNContact.timezonedBirthday.getter(v23);
  if (__swift_getEnumTagSinglePayload(v23, 1, v24) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v23, &demangling cache variable for type metadata for DateComponents?);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriContacts);
    uint64_t v36 = (void *)Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    BOOL v38 = OUTLINED_FUNCTION_7_4(v37);
    id v39 = v129;
    if (v38)
    {
      uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v40);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v41, v42, "[DialogCalendar] no birthday set, returning nil");
      OUTLINED_FUNCTION_4_6();
    }

    return 0;
  }
  uint64_t v121 = v24;
  uint64_t v122 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v34, v23, v24);
  static DateComponents.startOfToday.getter();
  uint64_t v124 = v32;
  DateComponents.year.getter();
  uint64_t v43 = v3;
  uint64_t v44 = v5;
  if (v45) {
    goto LABEL_15;
  }
  DateComponents.year.setter();
  DateComponents.yearForWeekOfYear.setter();
  DateComponents.date.getter();
  OUTLINED_FUNCTION_10_5((uint64_t)v18);
  if (v50)
  {
    uint64_t v46 = (uint64_t)v18;
LABEL_14:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v46, (uint64_t *)&demangling cache variable for type metadata for Date?);
    goto LABEL_15;
  }
  Date.timeIntervalSince1970.getter();
  double v48 = v47;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v18, v43);
  DateComponents.date.getter();
  OUTLINED_FUNCTION_10_5((uint64_t)v16);
  if (v50)
  {
    uint64_t v46 = (uint64_t)v16;
    goto LABEL_14;
  }
  Date.timeIntervalSince1970.getter();
  double v84 = v83;
  v49(v16, v43);
  uint64_t v85 = DateComponents.year.getter();
  if ((v86 & 1) == 0)
  {
    uint64_t v118 = v85;
    type metadata accessor for DialogCalendar.Builder();
    OUTLINED_FUNCTION_1_4();
    DialogCalendar.Builder.init()();
    dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
    swift_release();
    type metadata accessor for DialogCalendar();
    OUTLINED_FUNCTION_1_4();
    uint64_t v87 = DialogCalendar.init(builder:)();
    if (v129)
    {
      id v88 = v129;
      dispatch thunk of DialogCalendar.mockGlobals.setter();
    }
    uint64_t v89 = v124;
    if (v48 >= v84 || (dispatch thunk of DialogCalendar.isYesterday.getter() & 1) != 0) {
      int v119 = 0;
    }
    else {
      int v119 = dispatch thunk of DialogCalendar.withinPastWeek.getter() ^ 1;
    }
    uint64_t v90 = DateComponents.month.getter();
    char v92 = v91;
    uint64_t v93 = DateComponents.month.getter();
    uint64_t v120 = v87;
    if (v92)
    {
      uint64_t v102 = OUTLINED_FUNCTION_5_7();
      v103(v102);
    }
    else
    {
      uint64_t v94 = v93;
      (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v123, v89, v121);
      if (v90 != v94)
      {
        OUTLINED_FUNCTION_13_4();
        v95();
        goto LABEL_44;
      }
    }
    uint64_t v104 = DateComponents.day.getter();
    char v106 = v105;
    uint64_t v107 = DateComponents.day.getter();
    char v109 = v108;
    OUTLINED_FUNCTION_13_4();
    v110();
    if (v106)
    {
      if ((((v109 & 1) == 0) & v119) == 0) {
        goto LABEL_56;
      }
      goto LABEL_45;
    }
    if ((v109 & 1) == 0)
    {
      if ((v119 & (v104 != v107)) == 0)
      {
LABEL_56:
        if (one-time initialization token for siriContacts == -1)
        {
LABEL_57:
          uint64_t v111 = type metadata accessor for Logger();
          __swift_project_value_buffer(v111, (uint64_t)static Logger.siriContacts);
          uint64_t v112 = (void *)Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_7_4(v113))
          {
            uint64_t v114 = (_WORD *)OUTLINED_FUNCTION_20();
            OUTLINED_FUNCTION_32(v114);
            OUTLINED_FUNCTION_2_5(&dword_22D49E000, v115, v116, "[DialogCalendar] birthday has not passed yet this year, keep birthday year as current year");
            OUTLINED_FUNCTION_4_6();
          }

          goto LABEL_60;
        }
LABEL_62:
        swift_once();
        goto LABEL_57;
      }
LABEL_45:
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v96 = type metadata accessor for Logger();
      __swift_project_value_buffer(v96, (uint64_t)static Logger.siriContacts);
      char v97 = (void *)Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v98))
      {
        uint64_t v99 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v99);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v100, v101, "[DialogCalendar] birthday passed already this year, set the birthday year to next year");
        OUTLINED_FUNCTION_4_6();
      }

      if (!__OFADD__(v118, 1))
      {
        DateComponents.year.setter();
        DateComponents.yearForWeekOfYear.setter();
LABEL_60:
        swift_release();
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_62;
    }
LABEL_44:
    if ((v119 & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_45;
  }
LABEL_15:
  uint64_t v51 = (uint64_t)v126;
  DateComponents.date.getter();
  OUTLINED_FUNCTION_10_5(v51);
  if (v50)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v51, (uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v52 = v122;
    id v53 = v124;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.siriContacts);
    uint64_t v55 = (void *)Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    BOOL v57 = OUTLINED_FUNCTION_7_4(v56);
    id v58 = v129;
    if (v57)
    {
      id v59 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v59);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v60, v61, "[DialogCalendar] no date set for timezoned birthday, returning nil");
      OUTLINED_FUNCTION_4_6();
    }

    uint64_t v62 = *(void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v63 = v121;
    v62(v53, v121);
    v62(v34, v63);
    return 0;
  }
  uint64_t v65 = v127;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v127, v51, v43);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.siriContacts);
  uint64_t v67 = v125;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v125, v65, v43);
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t v126 = v34;
    uint64_t v72 = v44;
    uint64_t v73 = v71;
    uint64_t v131 = v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v130 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v76 = *(void (**)(void))(v72 + 8);
    OUTLINED_FUNCTION_13_4();
    v76();
    _os_log_impl(&dword_22D49E000, v68, v69, "[DialogCalendar] timezonedBirthdate: %s", v70, 0xCu);
    swift_arrayDestroy();
    uint64_t v34 = v126;
    MEMORY[0x230F85DE0](v73, -1, -1);
    OUTLINED_FUNCTION_4_6();
  }
  else
  {
    uint64_t v76 = *(void (**)(void))(v44 + 8);
    ((void (*)(uint64_t, uint64_t))v76)(v67, v43);
  }

  id v77 = v129;
  uint64_t v78 = v122;
  uint64_t v79 = v124;
  type metadata accessor for DialogCalendar.Builder();
  OUTLINED_FUNCTION_1_4();
  DialogCalendar.Builder.init()();
  Date.timeIntervalSince1970.getter();
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
  swift_release();
  swift_retain();
  uint64_t v64 = dispatch thunk of DialogCalendar.__allocating_init(builder:)();
  if (v77)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.mockGlobals.setter();
    swift_release();
  }
  swift_release();

  OUTLINED_FUNCTION_13_4();
  v76();
  char v80 = *(void (**)(char *, uint64_t))(v78 + 8);
  uint64_t v81 = v121;
  v80(v79, v121);
  v80(v34, v81);
  return v64;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_2_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_4_6()
{
  JUMPOUT(0x230F85DE0);
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return *(void *)(v0 - 176);
}

BOOL OUTLINED_FUNCTION_7_4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for DialogCalendar.Builder();
}

uint64_t OUTLINED_FUNCTION_10_5(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for Parse();
  v4[15] = v5;
  OUTLINED_FUNCTION_1(v5);
  v4[16] = v6;
  v4[17] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for Input();
  v4[18] = v7;
  OUTLINED_FUNCTION_1(v7);
  v4[19] = v8;
  v4[20] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  v4[21] = v9;
  OUTLINED_FUNCTION_1(v9);
  v4[22] = v10;
  v4[23] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

uint64_t GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  *(void *)(v0 + 192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v4 = ParameterIdentifier.name.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  v8.SiriContactsIntents::GetContactAttributeSlots value = GetContactAttributeSlots.init(rawValue:)(v7).value;
  *(SiriContactsIntents::GetContactAttributeSlots_optional *)(v0 + 233) = v8;
  if (v8.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    *uint64_t v9 = v4;
    v9[1] = (uint64_t)v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
    return v10();
  }
  else
  {
    SiriContactsIntents::GetContactAttributeSlots value = v8.value;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    *(void *)(v0 + 200) = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_24();
      v31[0] = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v16 = 136315138;
      *(unsigned char *)(v0 + 232) = value;
      uint64_t v17 = String.init<A>(describing:)();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v14, v15, "#GetContactAttributeNeedsValueStrategy Slot: %s.", v16, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }

    (*(void (**)(void, void, void))(*(void *)(v0 + 152) + 16))(*(void *)(v0 + 160), *(void *)(v0 + 96), *(void *)(v0 + 144));
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_24();
      v31[0] = OUTLINED_FUNCTION_35();
      *(_DWORD *)uint64_t v21 = 136315138;
      Input.parse.getter();
      uint64_t v22 = String.init<A>(describing:)();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = OUTLINED_FUNCTION_13_5();
      v25(v24);
      _os_log_impl(&dword_22D49E000, v19, v20, "#GetContactAttributeNeedsValueStrategy Parse: %s.", v21, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      uint64_t v26 = OUTLINED_FUNCTION_13_5();
      v27(v26);
    }

    uint64_t v28 = *(void *)(v0 + 112);
    Input.parse.getter();
    uint64_t v29 = ParameterResolutionRecord.intent.getter();
    *(void *)(v0 + 208) = v29;
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v30;
    *uint64_t v30 = v0;
    v30[1] = GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v28 + 176, v29, (uint64_t)&protocol witness table for GetContactAttributeIntent);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v4 = (void *)v3[26];
  uint64_t v5 = v3[17];
  uint64_t v6 = v3[16];
  Swift::String v7 = v3[15];
  SiriContactsIntents::GetContactAttributeSlots_optional v8 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v9 = v8;
  *(void *)(v11 + 224) = v10;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  void *v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    type metadata accessor for GetContactAttributeIntent();
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = v0 + 16;
      if (GetContactAttributeSlots.rawValue.getter(*(unsigned char *)(v0 + 233)) == 0x6374614D69726973
        && v5 == 0xEB00000000736568)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::String v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0) {
          goto LABEL_15;
        }
      }
      uint64_t v11 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v12 = objc_msgSend(v11, sel_contactAttributeToGet);

      objc_msgSend(v3, sel_setContactAttributeToGet_, v12);
LABEL_15:
      uint64_t v13 = v1;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_24();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412290;
        *(void *)(v0 + 64) = v3;
        uint64_t v17 = v13;
        uint64_t v4 = v0 + 16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v3;

        _os_log_impl(&dword_22D49E000, v14, v15, "#GetContactAttributeNeedsValueStrategy Converted ContactIntent to SK intent: %@", v16, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      unint64_t v18 = *(unsigned char *)(v0 + 233);
      uint64_t v19 = (void *)ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 40) = &type metadata for GetContactAttributeSlots;
      *(void *)(v0 + 48) = &protocol witness table for GetContactAttributeSlots;
      *(unsigned char *)(v0 + 16) = v18;
      specialized SiriKitContactIntent.value(forSlot:)(v25, v4);

      __swift_destroy_boxed_opaque_existential_1Tm(v4);
      goto LABEL_19;
    }
  }
  SiriContactsIntents::GetContactAttributeSlots_optional v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_24();
    *(void *)&v25[0] = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000022D5A78F0, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v8, v9, "#GetContactAttributeNeedsValueStrategy parseValueResponse: failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  memset(v25, 0, sizeof(v25));
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for GetContactAttributeIntent();
LABEL_19:
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  os_log_type_t v20 = *(void *)(v0 + 88);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<GetContactAttributeIntent>);
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v22();
}

uint64_t GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v3[6] = v4;
  OUTLINED_FUNCTION_1(v4);
  v3[7] = v5;
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[10] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v3[11] = v6;
  OUTLINED_FUNCTION_1(v6);
  v3[12] = v7;
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ParameterIdentifier();
  v3[15] = v8;
  OUTLINED_FUNCTION_1(v8);
  v3[16] = v9;
  v3[17] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v51 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  *(void *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v4 = ParameterIdentifier.name.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  v8.SiriContactsIntents::GetContactAttributeSlots value = GetContactAttributeSlots.init(rawValue:)(v7).value;
  if (v8.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_20_2();
    *uint64_t v9 = v4;
LABEL_3:
    v9[1] = (uint64_t)v6;
    goto LABEL_4;
  }
  SiriContactsIntents::GetContactAttributeSlots value = v8.value;
  uint64_t v49 = v4;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v48 = v0 + 16;
    uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v50 = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(unsigned char *)(v0 + 184) = value;
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v14, v15, "#GetContactAttributeNeedsValueStrategy Slot: %s.", v16, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  if (value == SiriContactsIntents_GetContactAttributeSlots_contactAttributeToGet)
  {
    uint64_t v19 = (void *)ParameterResolutionRecord.intent.getter();
    GetContactAttributeIntent.requestedName.getter();
    uint64_t v21 = v20;

    if (v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = (void *)ParameterResolutionRecord.intent.getter();
      Class isa = (Class)objc_msgSend(v29, sel_isMe);

      if (!isa)
      {
        type metadata accessor for NSNumber();
        Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      }
      unsigned int v31 = [(objc_class *)isa BOOLValue];

      if (v31)
      {
        uint64_t v32 = *(void **)(v0 + 40);
        swift_bridgeObjectRelease();
        uint64_t v33 = v32[10];
        uint64_t v34 = v32[11];
        __swift_project_boxed_opaque_existential_1(v32 + 7, v33);
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 24))(v33, v34);
        if (!v35)
        {
          type metadata accessor for ContactsError();
          lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
          OUTLINED_FUNCTION_20_2();
LABEL_4:
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          OUTLINED_FUNCTION_3_6();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_5();
          OUTLINED_FUNCTION_4_2();
          __asm { BRAA            X1, X16 }
        }
        uint64_t v36 = (void *)v35;
        CNContact.formattedFullName.getter();
      }
      else
      {
        id v39 = (void *)ParameterResolutionRecord.intent.getter();
        uint64_t v40 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v39, (SEL *)&selRef_contactIdentifier);
        if (!v41) {
          goto LABEL_29;
        }
        uint64_t v42 = v40;
        uint64_t v43 = v41;
        uint64_t v44 = *(void **)(v0 + 40);
        uint64_t v45 = v44[10];
        uint64_t v46 = v44[11];
        __swift_project_boxed_opaque_existential_1(v44 + 7, v45);
        double v47 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8))(v42, v43, v45, v46);
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_29:
          type metadata accessor for ContactsError();
          lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
          OUTLINED_FUNCTION_20_2();
          *uint64_t v9 = v49;
          goto LABEL_3;
        }
        swift_bridgeObjectRelease();
        CNContact.formattedFullName.getter();
      }
    }
    uint64_t v22 = *(void *)(v0 + 80);
    SpeakableString.init(print:speak:)();
    uint64_t v23 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v22, 0, 1, v23);
    uint64_t v24 = (void *)ParameterResolutionRecord.intent.getter();
    id v25 = objc_msgSend(v24, sel_isMe);

    if (v25)
    {
      objc_msgSend(v25, sel_BOOLValue);
    }
    os_log_type_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v37;
    *os_log_type_t v37 = v0;
    v37[1] = GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
    OUTLINED_FUNCTION_4_2();
    return GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v26;
    *uint64_t v26 = v0;
    v26[1] = GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
    OUTLINED_FUNCTION_4_2();
    return ContactsCommonCATs.promptForContact()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(*(void *)(v2 + 80));
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[9];
  uint64_t v3 = (uint64_t *)v0[3];
  uint64_t v4 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v5 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v4, (SEL *)&selRef_contactIdentifier);
  static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(v5, v6, 0, 0, 0, 0);
  swift_bridgeObjectRelease();
  Swift::String v7 = type metadata accessor for AceOutput();
  SiriContactsIntents::GetContactAttributeSlots_optional v8 = MEMORY[0x263F6FFF0];
  v3[3] = v7;
  v3[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v3);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v2);
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[12];
  uint64_t v12 = OUTLINED_FUNCTION_9_4();
  v13(v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t (*v24)(void);
  uint64_t v26;

  uint64_t v1 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v2 = objc_msgSend(v1, sel_contactAttributeToGet);

  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v3, (SEL *)&selRef_handleLabel);
    uint64_t v6 = v5;
    Swift::String v7 = objc_msgSend(v3, sel_contactAttributeType);
    if (v6)
    {
      SiriContactsIntents::GetContactAttributeSlots_optional v8 = (uint64_t)v7;
      uint64_t v9 = String.mapToNLAttributeValue(forType:)((uint64_t)v7, v4, v6);
      uint64_t v11 = v10;
      uint64_t v4 = String.mapToNLContactTypeValue(forType:)(v8, v4, v6);
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = v4;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v13 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v14 = v0[13];
  os_log_type_t v15 = v0[8];
  uint64_t v16 = (uint64_t *)v0[3];
  static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(0, 0, v9, v11, v4, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for AceOutput();
  unint64_t v18 = MEMORY[0x263F6FFF0];
  v16[3] = v17;
  v16[4] = v18;
  __swift_allocate_boxed_opaque_existential_1(v16);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v14, v15);

  uint64_t v19 = v0[13];
  uint64_t v20 = v0[11];
  uint64_t v21 = v0[12];
  uint64_t v22 = OUTLINED_FUNCTION_9_4();
  v23(v22);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v24();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_3_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_3_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t GetContactAttributeNeedsValueStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsUnsupportedValueStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  return MEMORY[0x270FA0228](v0, 216, 7);
}

uint64_t type metadata accessor for GetContactAttributeNeedsValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeNeedsValueStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactAttributeNeedsValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(a1, (SEL *)&selRef_handleLabel);
}

uint64_t outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return v0;
}

uint64_t type metadata instantiation function for ContactsUnsetRelationshipFlowStrategy()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for ContactsUnsetRelationshipFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  OUTLINED_FUNCTION_23_2();
  v3[5] = v4;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:));
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)()
{
  OUTLINED_FUNCTION_65();
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + 304);
  type metadata accessor for ParameterResolutionRecord();
  id v3 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 320) + 16))(v2);
  uint64_t v6 = v5;

  if (v6)
  {
    uint64_t v7 = v0[4];
    SiriContactsIntents::GetContactAttributeSlots_optional v8 = (uint64_t *)v0[2];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: String, locale: Locale));
    *SiriContactsIntents::GetContactAttributeSlots_optional v8 = v4;
    v8[1] = v6;
    __swift_project_boxed_opaque_existential_1((void *)(v7 + 16), *(void *)(v7 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v9 = *MEMORY[0x263F6FB60];
    type metadata accessor for RelationshipLabel();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t *, uint64_t))(v10 + 104))(v8, v9);
    OUTLINED_FUNCTION_38_0();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = OUTLINED_FUNCTION_21_0(v12, (uint64_t)static Logger.siriContacts);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v15);
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v16, v17, "#ContactsUnsetRelationshipFlowStrategy parseRequestedRelationship throwing error");
      OUTLINED_FUNCTION_4_6();
    }

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v18 = OUTLINED_FUNCTION_53();
    OUTLINED_FUNCTION_81(v18, v19);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
  }
  return v11();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  OUTLINED_FUNCTION_23_2();
  v4[6] = v5;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:));
}

uint64_t ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v28 = *(void *)(v0 + 16);
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v2 = (void *)ParameterResolutionRecord.intent.getter();
  id v3 = objc_msgSend(v1, sel_firstName);
  uint64_t v4 = (void *)MEMORY[0x230F84F70](0x6D614E7473726966, 0xE900000000000065);
  OUTLINED_FUNCTION_21_2();

  uint64_t v5 = (void *)OUTLINED_FUNCTION_51_0();
  id v6 = objc_msgSend(v1, sel_fullName);
  OUTLINED_FUNCTION_57();
  SiriContactsIntents::GetContactAttributeSlots_optional v8 = v7;
  OUTLINED_FUNCTION_21_2();

  uint64_t v9 = (void *)OUTLINED_FUNCTION_51_0();
  id v10 = objc_msgSend(v1, sel_lastName);
  OUTLINED_FUNCTION_57();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_21_2();

  uint64_t v13 = (void *)OUTLINED_FUNCTION_51_0();
  id v14 = objc_msgSend(v1, sel_middleName);
  os_log_type_t v15 = (void *)MEMORY[0x230F84F70](0x614E656C6464696DLL, 0xEA0000000000656DLL);
  OUTLINED_FUNCTION_21_2();

  uint64_t v16 = (void *)OUTLINED_FUNCTION_51_0();
  id v17 = objc_msgSend(v1, sel_nickName);
  OUTLINED_FUNCTION_57();
  uint64_t v19 = v18;
  OUTLINED_FUNCTION_21_2();

  uint64_t v20 = (void *)OUTLINED_FUNCTION_51_0();
  uint64_t v21 = RelationshipLabel.asUnboundedSemanticValue.getter();
  uint64_t v22 = (void *)MEMORY[0x230F84F70](v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)MEMORY[0x230F84F70](0x52746361746E6F63, 0xEF6E6F6974616C65);
  objc_msgSend(v20, sel_setValue_forKey_, v22, v23);

  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  id v24 = v1;
  OUTLINED_FUNCTION_51_0();
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  uint64_t v25 = type metadata accessor for IntentPromptAnswer();
  __swift_storeEnumTagSinglePayload(v28, 0, 1, v25);
  OUTLINED_FUNCTION_38_0();
  return v26();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OUTLINED_FUNCTION_49_0(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptForNameInput", a3);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for Parse();
  v0[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[5] = v4;
  v0[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_65();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  Input.parse.getter();
  static UnsetRelationshipPerson.from(parse:)(v1, v2);
  uint64_t v3 = OUTLINED_FUNCTION_20_4();
  v4(v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v5();
}

uint64_t static UnsetRelationshipPerson.from(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v131 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsetRelationshipPerson?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v113 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnsetRelationshipPerson();
  uint64_t v110 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v109 = (uint64_t)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v116 = (uint64_t)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v112 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  uint64_t v111 = (uint64_t)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for USOParse();
  uint64_t v10 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v124 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ContactNLv3Intent();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v123 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for PersonIntentNode();
  uint64_t v115 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v114 = (uint64_t)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for NLIntent();
  uint64_t v127 = *(void *)(v18 - 8);
  uint64_t v128 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v122 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v106 - v21;
  uint64_t v23 = type metadata accessor for Parse();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v133 = (char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v134 = (char *)&v106 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  id v129 = (char *)&v106 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v106 - v31;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v126 = v22;
  uint64_t v118 = v12;
  uint64_t v119 = v10;
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriContacts);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v132 = a1;
  v35(v32, a1, v23);
  uint64_t v130 = (uint8_t *)v34;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v121 = v5;
    id v39 = (uint8_t *)v38;
    uint64_t v108 = swift_slowAlloc();
    v135[0] = v108;
    *(_DWORD *)id v39 = 136315138;
    uint64_t v107 = v39 + 4;
    v35(v129, (uint64_t)v32, v23);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v41 = v24;
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v24 + 8);
    v43(v32, v23);
    _os_log_impl(&dword_22D49E000, v36, v37, "#ContactsUnsetRelationshipFlowStrategy parse: %s", v39, 0xCu);
    uint64_t v44 = v108;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v44, -1, -1);
    uint64_t v45 = v39;
    uint64_t v5 = v121;
    MEMORY[0x230F85DE0](v45, -1, -1);
  }
  else
  {
    uint64_t v41 = v24;
    uint64_t v43 = *(void (**)(char *, uint64_t))(v24 + 8);
    v43(v32, v23);
  }

  uint64_t v46 = v23;
  uint64_t v48 = v133;
  double v47 = v134;
  uint64_t v49 = v132;
  uint64_t v50 = (void (*)(char *, char *, uint64_t))v35;
  v35(v134, v132, v46);
  int v51 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v47, v46);
  if (v51 == *MEMORY[0x263F6FF50])
  {
    (*(void (**)(char *, uint64_t))(v41 + 96))(v47, v46);
    id v53 = v126;
    uint64_t v52 = v127;
    uint64_t v54 = v128;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v126, v47, v128);
    uint64_t v55 = (uint64_t)v122;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v122, v53, v54);
    uint64_t v56 = (uint64_t)v123;
    uint64_t v64 = ContactNLv3Intent.init(intent:)(v55, v57, v58, v59, v60, v61, v62, v63, v106, (uint64_t)v107);
    uint64_t v65 = (uint64_t)v124;
    ContactNLv3Intent.person.getter(v64, v66, v67, v68, v69, v70, v71, v72, v106, (uint64_t)v107, v108, v109, v110, v111, v112, v113, v114, v115, v116,
      v117);
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(v56, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    uint64_t v73 = v125;
    if (__swift_getEnumTagSinglePayload(v65, 1, v125) == 1)
    {
      outlined destroy of ConfirmationResponse?(v65, (uint64_t)&demangling cache variable for type metadata for PersonIntentNode?);
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl(&dword_22D49E000, v74, v75, "#ContactsUnsetRelationshipFlowStrategy Found no Person Node in NLv3 Intent, returning nil for UnsetRelationshipPerson", v76, 2u);
        MEMORY[0x230F85DE0](v76, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
LABEL_23:
      uint64_t v88 = v131;
      uint64_t v89 = 1;
      return __swift_storeEnumTagSinglePayload(v88, v89, 1, v5);
    }
    uint64_t v84 = v115;
    uint64_t v85 = v114;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v114, v65, v73);
    v135[3] = v73;
    v135[4] = MEMORY[0x263F72890];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v135);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v84 + 16))(boxed_opaque_existential_1, v85, v73);
    uint64_t v87 = v131;
    static UnsetRelationshipPerson.from(personNode:)();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v73);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v135);
    uint64_t v88 = v87;
LABEL_15:
    uint64_t v89 = 0;
    return __swift_storeEnumTagSinglePayload(v88, v89, 1, v5);
  }
  if (v51 == *MEMORY[0x263F6FF80])
  {
    (*(void (**)(char *, uint64_t))(v41 + 96))(v47, v46);
    uint64_t v77 = v119;
    uint64_t v78 = v118;
    uint64_t v79 = v120;
    (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v47, v120);
    uint64_t v80 = v116;
    USOParse.preferredUserDialogAct.getter(v116);
    uint64_t v81 = v117;
    if (__swift_getEnumTagSinglePayload(v80, 1, v117) == 1)
    {
      uint64_t v82 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
      uint64_t v83 = v80;
    }
    else
    {
      uint64_t v96 = v112;
      uint64_t v97 = v111;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v111, v80, v81);
      uint64_t v98 = v113;
      static UnsetRelationshipPerson.from(userDialogAct:)(v113);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v81);
      if (__swift_getEnumTagSinglePayload(v98, 1, v5) != 1)
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
        char v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32);
        uint64_t v104 = v109;
        v103(v109, v113, v5);
        uint64_t v105 = v131;
        v103(v131, v104, v5);
        uint64_t v88 = v105;
        goto LABEL_15;
      }
      uint64_t v82 = &demangling cache variable for type metadata for UnsetRelationshipPerson?;
      uint64_t v83 = v113;
    }
    outlined destroy of ConfirmationResponse?(v83, (uint64_t)v82);
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v101 = 0;
      _os_log_impl(&dword_22D49E000, v99, v100, "#ContactsUnsetRelationshipFlowStrategy Found no common_Person in USO parse, returning nil for UnsetRelationshipPerson", v101, 2u);
      MEMORY[0x230F85DE0](v101, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    goto LABEL_23;
  }
  v35(v48, v49, v46);
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v121 = v5;
    char v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v132 = swift_slowAlloc();
    v135[0] = v132;
    *(_DWORD *)char v92 = 136315138;
    uint64_t v130 = v92 + 4;
    v50(v129, v48, v46);
    uint64_t v93 = String.init<A>(describing:)();
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v135);
    uint64_t v5 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v43(v133, v46);
    _os_log_impl(&dword_22D49E000, v90, v91, "#ContactsUnsetRelationshipFlowStrategy Encountered unexpected parse type %s, returning nil for UnsetRelationshipPerson", v92, 0xCu);
    uint64_t v95 = v132;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v95, -1, -1);
    MEMORY[0x230F85DE0](v92, -1, -1);
  }
  else
  {
    v43(v48, v46);
  }

  __swift_storeEnumTagSinglePayload(v131, 1, 1, v5);
  return ((uint64_t (*)(char *, uint64_t))v43)(v134, v46);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[10] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  v1[11] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[12] = v6;
  v1[13] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  OUTLINED_FUNCTION_10_0(v7);
  v1[14] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v8);
  v1[15] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  OUTLINED_FUNCTION_10_0(v9);
  v1[16] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for TemplatingResult();
  v1[17] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[18] = v11;
  v1[19] = OUTLINED_FUNCTION_31();
  v1[20] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 168) = v1;
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  return ContactsCommonCATs.unsupportedRelationshipNotFound()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = *(void *)(v0 + 120);
  RelationshipLabel.asUnboundedSemanticValue.getter();
  OUTLINED_FUNCTION_26_2();
  uint64_t v2 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 184) = v3;
  *uint64_t v3 = v4;
  v3[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  return ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 120);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 192) = v0;
  swift_task_dealloc();
  outlined destroy of ConfirmationResponse?(v6, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_13_4();
    v9();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_67();
  uint64_t v48 = *(void *)(v22 + 144);
  uint64_t v50 = *(void *)(v22 + 152);
  uint64_t v23 = *(void *)(v22 + 128);
  uint64_t v24 = *(void *)(v22 + 112);
  uint64_t v51 = *(void *)(v22 + 120);
  uint64_t v45 = *(void *)(v22 + 88);
  uint64_t v46 = *(void *)(v22 + 160);
  uint64_t v25 = *(void *)(v22 + 80);
  uint64_t v44 = *(void *)(v22 + 72);
  uint64_t v26 = *(uint64_t **)(v22 + 56);
  uint64_t v47 = *(void *)(v22 + 136);
  __swift_storeEnumTagSinglePayload(v23, 0, 1, v47);
  uint64_t v27 = type metadata accessor for BehaviorAfterSpeaking();
  __swift_storeEnumTagSinglePayload(v24, 1, 1, v27);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v23, v24);
  outlined destroy of ConfirmationResponse?(v24, (uint64_t)&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  outlined destroy of ConfirmationResponse?(v23, (uint64_t)&demangling cache variable for type metadata for TemplatingResult?);
  uint64_t v49 = *(void *)(v48 + 8);
  OUTLINED_FUNCTION_27_3();
  v28();
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_1(v29);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()();
  NLContextUpdate.nluSystemDialogActs.setter();
  OUTLINED_FUNCTION_89();
  v30();
  OUTLINED_FUNCTION_41_1(v25);
  uint64_t v31 = type metadata accessor for AceOutput();
  *(_OWORD *)(v22 + 32) = 0u;
  *(void *)(v22 + 48) = 0;
  *(_OWORD *)(v22 + 16) = 0u;
  uint64_t v32 = MEMORY[0x263F6FFF0];
  v26[3] = v31;
  v26[4] = v32;
  __swift_allocate_boxed_opaque_existential_1(v26);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of ConfirmationResponse?(v22 + 16, (uint64_t)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of ConfirmationResponse?(v25, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_42_0();
  v33();
  OUTLINED_FUNCTION_27_3();
  v34();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_58();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, v22 + 16, a10, v44, v45, v46, v47, v49, v50, v23, v24, v51,
           a20,
           a21,
           a22);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OUTLINED_FUNCTION_49_0(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptForContactDisambiguationInput", a3);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:));
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<SAPerson>);
  swift_bridgeObjectRetain();
  uint64_t v1 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  v1[9] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[10] = v6;
  v1[11] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for Parse();
  v1[12] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[13] = v8;
  v1[14] = OUTLINED_FUNCTION_31();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Signpost.OpenSignpost();
  v1[17] = v9;
  OUTLINED_FUNCTION_10_0(v9);
  v1[18] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_66();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v16 = v14[17];
  uint64_t v15 = v14[18];
  uint64_t v17 = v14[16];
  uint64_t v18 = v14[12];
  uint64_t v19 = v14[13];
  id v20 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v21 = v15 + *(int *)(v16 + 20);
  *(void *)uint64_t v21 = "ParseUnsetRelationDisambiguationResult";
  *(void *)(v21 + 8) = 38;
  *(unsigned char *)(v21 + 16) = 2;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v19 + 88))(v17, v18) != *MEMORY[0x263F6FF70]) {
    goto LABEL_13;
  }
  uint64_t v22 = v14[15];
  uint64_t v24 = v14[10];
  uint64_t v23 = v14[11];
  uint64_t v25 = v14[9];
  OUTLINED_FUNCTION_89();
  v26();
  uint64_t v27 = OUTLINED_FUNCTION_87();
  v28(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000025 && v29 == 0x800000022D5A6480)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
    (*(void (**)(void, void))(v14[10] + 8))(v14[11], v14[9]);
LABEL_13:
    uint64_t v43 = *(void (**)(void))(v14[13] + 8);
    OUTLINED_FUNCTION_42_0();
    v43();
    Input.parse.getter();
    Swift::String v44 = Parse.toContactId(existingCandidates:)(MEMORY[0x263F8EE78]);
    if (v45)
    {
      OUTLINED_FUNCTION_42_0();
      v43();
      goto LABEL_25;
    }
    uint64_t v46 = (void *)v14[8];
    OUTLINED_FUNCTION_42_0();
    v43();
    uint64_t v47 = v46[10];
    uint64_t v48 = v46[11];
    __swift_project_boxed_opaque_existential_1(v46 + 7, v47);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v48 + 8))(v44._countAndFlagsBits, v44._object, v47, v48);
    id v53 = (void *)v49;
    if (!v49)
    {
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      uint64_t v50 = OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_81(v50, v51);
      *uint64_t v52 = v44;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    id v54 = v53;
    v55.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    id v56 = SAPerson.init(contact:isMe:)(v53, v55.super.super.isa);
    v14[2] = v56;
    OUTLINED_FUNCTION_62();
    static DisambiguationResult.chosenItem(_:)();

LABEL_19:
    uint64_t v57 = v14[18];
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(v57, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    goto LABEL_26;
  }
LABEL_8:
  Swift::Int v31 = Parse.DirectInvocation.getSelectionIndex()();
  if (!v32)
  {
    uint64_t v35 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SAPerson>);
    uint64_t v36 = PaginatedItemContainer.items.getter();
    uint64_t v37 = type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
    Array.subscript.getter(v35, v36, v37, (uint64_t)(v14 + 3));
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)v14[3];
    if (!v38)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      uint64_t v59 = (void *)OUTLINED_FUNCTION_21_0(v58, (uint64_t)static Logger.siriContacts);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_7_4(v60))
      {
        uint64_t v61 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v61);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v62, v63, "#ContactsUnsetRelationshipFlowStrategy User selected item out of bounds");
        OUTLINED_FUNCTION_4_6();
      }
      a10 = v14[16];

      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      uint64_t v64 = OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_81(v64, v65);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      OUTLINED_FUNCTION_31_2();
      v66();
      OUTLINED_FUNCTION_27_3();
      v67();
      goto LABEL_25;
    }
    uint64_t v39 = v14[16];
    uint64_t v40 = v14[12];
    uint64_t v41 = v14[13];
    v14[4] = v38;
    static DisambiguationResult.chosenItem(_:)();
    OUTLINED_FUNCTION_31_2();
    v42();

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_13_4();
  v33();
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_42_0();
  v34();
LABEL_25:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(v14[18], (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
LABEL_26:
  OUTLINED_FUNCTION_25_3();
  return v69(v68, v69, v70, v71, v72, v73, v74, v75, a9, a10, a11, a12, a13, a14);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v5 = type metadata accessor for PaginationStyle();
  OUTLINED_FUNCTION_10_0(v5);
  v1[7] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
  v1[8] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for Signpost.OpenSignpost();
  v1[11] = v8;
  OUTLINED_FUNCTION_10_0(v8);
  v1[12] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 120) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "MakePromptForUnsetRelationDisambiguation";
  *(void *)(v5 + 8) = 40;
  *(unsigned char *)(v5 + 16) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SAPerson>);
  *(void *)(v0 + 16) = PaginatedItemContainer.items.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAPerson]);
  swift_getWitnessTable();
  Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  static PaginationStyle.noPagination()();
  OUTLINED_FUNCTION_87();
  PaginatedItemContainer.init(items:paginationStyle:)();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 104) = v6;
  *uint64_t v6 = v7;
  v6[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  return ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = OUTLINED_FUNCTION_35_2();
  v2(v1);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(v0, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_37();
  uint64_t v1 = OUTLINED_FUNCTION_35_2();
  v2(v1);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(v0, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = outlined bridged method (pb) of @objc SAPerson.internalGUID.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.actionForPromptToSaveRelationship(input:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptToSaveRelationship", 0, a3);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = OUTLINED_FUNCTION_21_0(v10, (uint64_t)static Logger.siriContacts);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_22D49E000, v11, v12, a3, v13, 2u);
    MEMORY[0x230F85DE0](v13, -1, -1);
  }

  return ContactsUnsetRelationshipFlowStrategy.unsetRelationshipActionForInput(_:resolveRecord:shouldExpectPerson:)(a1, a2, a4 & 1, a5);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_10_0(v3);
  v0[4] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for Parse();
  v0[5] = v4;
  OUTLINED_FUNCTION_1(v4);
  v0[6] = v5;
  v0[7] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_65();
  uint64_t v1 = *(void *)(v0 + 32);
  Input.parse.getter();
  Parse.confirmationResponse.getter();
  uint64_t v2 = OUTLINED_FUNCTION_20_4();
  v3(v2);
  uint64_t v4 = type metadata accessor for ConfirmationResponse();
  if (__swift_getEnumTagSinglePayload(v1, 1, v4) == 1)
  {
    outlined destroy of ConfirmationResponse?(*(void *)(v0 + 32), (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = OUTLINED_FUNCTION_21_0(v5, (uint64_t)static Logger.siriContacts);
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v8);
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v9, v10, "#ContactsUnsetRelationshipFlowStrategy parsePromptToSaveRelationshipResponse throwing error");
      OUTLINED_FUNCTION_4_6();
    }

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_53();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
  }
  else
  {
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v12 + 32))();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
  }
  return v11();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[31] = v2;
  v1[32] = v0;
  v1[29] = v3;
  v1[30] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[33] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[34] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[35] = v7;
  v1[36] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_0(v8);
  v1[37] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v9);
  v1[38] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v1[39] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[40] = v11;
  v1[41] = OUTLINED_FUNCTION_2_1();
  uint64_t v12 = type metadata accessor for ContactsSnippetPluginModel();
  v1[42] = v12;
  OUTLINED_FUNCTION_1(v12);
  v1[43] = v13;
  v1[44] = OUTLINED_FUNCTION_2_1();
  uint64_t v14 = type metadata accessor for ContactsSnippetFlowState();
  v1[45] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[46] = v15;
  v1[47] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v1[48] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[49] = v17;
  v1[50] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v1[51] = v18;
  OUTLINED_FUNCTION_1(v18);
  v1[52] = v19;
  v1[53] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v1[54] = v20;
  OUTLINED_FUNCTION_1(v20);
  v1[55] = v21;
  v1[56] = OUTLINED_FUNCTION_2_1();
  uint64_t v22 = type metadata accessor for ContactsLabelCATContainer();
  v1[57] = v22;
  OUTLINED_FUNCTION_1(v22);
  v1[58] = v23;
  v1[59] = OUTLINED_FUNCTION_31();
  v1[60] = swift_task_alloc();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v24);
  v1[61] = OUTLINED_FUNCTION_31();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  uint64_t v25 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v25);
  v1[70] = OUTLINED_FUNCTION_2_1();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v1[71] = v26;
  OUTLINED_FUNCTION_1(v26);
  v1[72] = v27;
  v1[73] = OUTLINED_FUNCTION_31();
  v1[74] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v28, v29, v30);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 632) = v7;
  *(void *)(v8 + 640) = v0;
  swift_task_dealloc();
  uint64_t v9 = v1[69];
  uint64_t v10 = v1[68];
  uint64_t v11 = v1[67];
  uint64_t v12 = v1[66];
  swift_release();
  outlined destroy of ConfirmationResponse?(v12, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v11, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v10, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v9, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  type metadata accessor for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_82();
  *(void *)(v0 + 648) = OUTLINED_FUNCTION_45_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 656) = v1;
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  return static ContactsLabelCATContainer.modifyConfirmationCATs(from:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 192;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  v3[88] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[63];
    uint64_t v8 = v3[61];
    swift_bridgeObjectRelease();
    outlined destroy of ConfirmationResponse?(v8, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_62();
    outlined destroy of ConfirmationResponse?(v9, v10);
    outlined destroy of ConfirmationResponse?(v7, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    uint64_t v11 = v3[62];
    outlined destroy of ConfirmationResponse?(v3[61], (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of ConfirmationResponse?(v11, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_87();
    outlined destroy of ConfirmationResponse?(v12, v13);
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

id ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_66();
  if (ContactsStrategy.isSmartEnabled.getter())
  {
    v1[17] = &type metadata for InstalledAppsProvider;
    v1[18] = &protocol witness table for InstalledAppsProvider;
    uint64_t v2 = OUTLINED_FUNCTION_32_2();
    uint64_t v4 = (void *)v3(v2);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = objc_msgSend(v4, sel_identifier);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_92();
    }
    uint64_t v24 = (void *)v1[30];
    OUTLINED_FUNCTION_44_0();
    v1[75] = v25;
    swift_bridgeObjectRelease();
    if (objc_msgSend(v24, sel_internalGUID))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_92();
    }
    OUTLINED_FUNCTION_44_0();
    v1[76] = v26;
    swift_bridgeObjectRelease();
    outlined init with copy of ContactServiceProtocol(v0, (uint64_t)(v1 + 19));
    id result = OUTLINED_FUNCTION_91();
    if (result)
    {
      uint64_t v27 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v28 = OUTLINED_FUNCTION_34_2();
      v29(v28);

      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 19));
      uint64_t v30 = (void *)v1[30];
      objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEAF0]), sel_init);
      id result = objc_msgSend(v30, sel_prefix);
      if (result)
      {
        Swift::Int v31 = result;
        uint64_t v32 = (void *)v1[30];
        OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setNamePrefix_);

        id v33 = objc_msgSend(v32, sel_firstName);
        OUTLINED_FUNCTION_28_3((uint64_t)v33, sel_setFirstName_);

        id result = objc_msgSend(v32, sel_middleName);
        if (result)
        {
          uint64_t v34 = result;
          uint64_t v35 = (void *)v1[30];
          OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setMiddleName_);

          id v36 = objc_msgSend(v35, sel_lastName);
          OUTLINED_FUNCTION_28_3((uint64_t)v36, sel_setLastName_);

          id result = objc_msgSend(v35, sel_suffix);
          if (result)
          {
            uint64_t v37 = result;
            OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setNameSuffix_);

            type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            CodableContact.init(wrappedValue:)();
            uint64_t v46 = v1[69];
            uint64_t v47 = v1[68];
            uint64_t v48 = v1[67];
            uint64_t v49 = v1[66];
            type metadata accessor for ModifyContactAttributeCATsModern();
            OUTLINED_FUNCTION_82();
            v1[77] = OUTLINED_FUNCTION_45_0();
            RelationshipLabel.asUnboundedSemanticValue.getter();
            OUTLINED_FUNCTION_26_2();
            uint64_t v50 = type metadata accessor for SpeakableString();
            OUTLINED_FUNCTION_56(v46);
            __swift_storeEnumTagSinglePayload(v47, 1, 1, v50);
            uint64_t v51 = (void *)CodableContact.wrappedValue.getter();
            CNContact.formattedFullName.getter();

            OUTLINED_FUNCTION_26_2();
            OUTLINED_FUNCTION_56(v48);
            OUTLINED_FUNCTION_22_2();
            OUTLINED_FUNCTION_56(v49);
            uint64_t v52 = (void *)swift_task_alloc();
            v1[78] = v52;
            *uint64_t v52 = v1;
            v52[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
            OUTLINED_FUNCTION_25_3();
            return (id)ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)();
          }
LABEL_23:
          __break(1u);
          return result;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v7 = v1[65];
  uint64_t v8 = v1[32];
  uint64_t v9 = (void *)v1[30];
  outlined init with copy of ContactServiceProtocol(v8 + 16, (uint64_t)(v1 + 3));
  uint64_t v10 = *(void *)(v8 + 104);
  v1[2] = 10;
  v1[8] = v10;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  v1[86] = v11;
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v1 + 2));
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_71(v7, 1);
  outlined init with copy of ContactServiceProtocol(v8 + 56, (uint64_t)(v1 + 9));
  OUTLINED_FUNCTION_76();
  id result = objc_msgSend(v9, sel_internalGUID);
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v13 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = OUTLINED_FUNCTION_33();
  v15(v14);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 9));
  uint64_t v16 = v1[32];
  uint64_t v17 = (void *)v1[30];
  type metadata accessor for DialogPerson();
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 16), *(void *)(v16 + 40));
  id v18 = v17;
  OUTLINED_FUNCTION_78();
  id v19 = *(id *)(v16 + 120);
  OUTLINED_FUNCTION_72();
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v20, v21, v22, v23);
  dispatch thunk of DialogPerson.fullName.getter();
  uint64_t v38 = v1[65];
  uint64_t v40 = v1[63];
  uint64_t v39 = v1[64];
  uint64_t v41 = v1[61];
  uint64_t v42 = v1[62];
  swift_release();
  outlined destroy of ConfirmationResponse?(v38, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined init with take of SpeakableString?(v39, v38);
  RelationshipLabel.asUnboundedSemanticValue.getter();
  OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_71(v40, 0);
  OUTLINED_FUNCTION_71(v42, 1);
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_71(v41, 0);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v1[87] = v43;
  *uint64_t v43 = v44;
  v43[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_25_3();
  return (id)ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)();
}

#error "22D4C241C: call analysis failed (funcsize=235)"

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  uint64_t v27 = *(void **)(v26 + 608);
  uint64_t v28 = *(void **)(v26 + 600);
  uint64_t v47 = *(void *)(v26 + 568);
  uint64_t v48 = *(void *)(v26 + 592);
  uint64_t v29 = *(void *)(v26 + 464);
  uint64_t v45 = *(void *)(v26 + 456);
  uint64_t v46 = *(void *)(v26 + 480);
  uint64_t v43 = *(void *)(v26 + 432);
  uint64_t v44 = *(void *)(v26 + 448);
  uint64_t v50 = *(void *)(v26 + 352);
  uint64_t v49 = *(void *)(v26 + 336);

  OUTLINED_FUNCTION_44();
  v30();
  OUTLINED_FUNCTION_42_0();
  v31();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v46, v45);
  OUTLINED_FUNCTION_27_3();
  v32();
  outlined destroy of AppUtil(v26 + 112);
  OUTLINED_FUNCTION_31_2();
  v33();
  OUTLINED_FUNCTION_6_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_38_1();
  return v35(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, v43, v44, v45, v46, v47,
           v48,
           v49,
           v50,
           v26 + 112,
           a24,
           a25,
           a26);
}

{
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  uint64_t v27 = v26[86];
  uint64_t v28 = v26[65];
  uint64_t v29 = v26[36];
  uint64_t v30 = v26[33];
  uint64_t v32 = (uint64_t *)v26[29];
  Swift::Int v31 = v26[30];
  id v33 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v30, 1, 1, v33);
  type metadata accessor for ContactsCommonCATs();
  uint64_t v34 = type metadata accessor for AceOutput();
  uint64_t v35 = MEMORY[0x263F6FFF0];
  v32[3] = v34;
  v32[4] = v35;
  __swift_allocate_boxed_opaque_existential_1(v32);
  ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v29, v27, v31, 1, v30);
  swift_bridgeObjectRelease();
  outlined destroy of ConfirmationResponse?(v30, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_31_2();
  v36();
  outlined destroy of ConfirmationResponse?(v28, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_6_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_38_1();
  return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  uint64_t v27 = *(void **)(v26 + 600);

  uint64_t v28 = OUTLINED_FUNCTION_20_4();
  v29(v28);
  outlined destroy of AppUtil(v26 + 112);
  OUTLINED_FUNCTION_4_7(*(void *)(v26 + 640));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  outlined destroy of ConfirmationResponse?(*(void *)(v26 + 520), (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_4_7(*(void *)(v26 + 704));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t default argument 3 of ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)()
{
  return 1;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[26] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[27] = v6;
  v1[28] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_0(v7);
  v1[29] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v8);
  v1[30] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[31] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[32] = v10;
  v1[33] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for ContactsSnippetPluginModel();
  v1[34] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[35] = v12;
  v1[36] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for ContactsSnippetFlowState();
  v1[37] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[38] = v14;
  v1[39] = OUTLINED_FUNCTION_2_1();
  uint64_t v15 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v1[40] = v15;
  OUTLINED_FUNCTION_1(v15);
  v1[41] = v16;
  v1[42] = OUTLINED_FUNCTION_2_1();
  uint64_t v17 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v1[43] = v17;
  OUTLINED_FUNCTION_1(v17);
  v1[44] = v18;
  v1[45] = OUTLINED_FUNCTION_2_1();
  uint64_t v19 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v1[46] = v19;
  OUTLINED_FUNCTION_1(v19);
  v1[47] = v20;
  v1[48] = OUTLINED_FUNCTION_2_1();
  uint64_t v21 = type metadata accessor for ContactsLabelCATContainer();
  v1[49] = v21;
  OUTLINED_FUNCTION_1(v21);
  v1[50] = v22;
  v1[51] = OUTLINED_FUNCTION_31();
  v1[52] = swift_task_alloc();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v23);
  v1[53] = OUTLINED_FUNCTION_31();
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  uint64_t v24 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v24);
  v1[60] = OUTLINED_FUNCTION_2_1();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v1[61] = v25;
  OUTLINED_FUNCTION_1(v25);
  v1[62] = v26;
  v1[63] = OUTLINED_FUNCTION_31();
  v1[64] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v27, v28, v29);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 552) = v7;
  *(void *)(v8 + 560) = v0;
  swift_task_dealloc();
  uint64_t v9 = v1[59];
  uint64_t v10 = v1[58];
  uint64_t v11 = v1[57];
  swift_release();
  outlined destroy of ConfirmationResponse?(v11, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v10, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v9, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  type metadata accessor for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_82();
  *(void *)(v0 + 568) = OUTLINED_FUNCTION_45_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 576) = v1;
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
  return static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 136;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 616) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 432);
  outlined destroy of ConfirmationResponse?(*(void *)(v1 + 424), (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of ConfirmationResponse?(v5, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

id ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_66();
  if (ContactsStrategy.isSmartEnabled.getter())
  {
    v1[10] = &type metadata for InstalledAppsProvider;
    v1[11] = &protocol witness table for InstalledAppsProvider;
    uint64_t v2 = OUTLINED_FUNCTION_32_2();
    uint64_t v4 = (void *)v3(v2);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = objc_msgSend(v4, sel_identifier);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_92();
    }
    uint64_t v27 = (void *)v1[23];
    OUTLINED_FUNCTION_44_0();
    v1[65] = v28;
    swift_bridgeObjectRelease();
    if (objc_msgSend(v27, sel_internalGUID))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_92();
    }
    OUTLINED_FUNCTION_44_0();
    v1[66] = v29;
    swift_bridgeObjectRelease();
    outlined init with copy of ContactServiceProtocol(v0, (uint64_t)(v1 + 12));
    id result = OUTLINED_FUNCTION_91();
    if (result)
    {
      uint64_t v30 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = OUTLINED_FUNCTION_34_2();
      v32(v31);

      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 12));
      id v33 = (void *)v1[23];
      objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEAF0]), sel_init);
      id result = objc_msgSend(v33, sel_prefix);
      if (result)
      {
        uint64_t v34 = result;
        uint64_t v35 = (void *)v1[23];
        OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setNamePrefix_);

        id v36 = objc_msgSend(v35, sel_firstName);
        OUTLINED_FUNCTION_28_3((uint64_t)v36, sel_setFirstName_);

        id result = objc_msgSend(v35, sel_middleName);
        if (result)
        {
          uint64_t v37 = result;
          uint64_t v38 = (void *)v1[23];
          OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setMiddleName_);

          id v39 = objc_msgSend(v38, sel_lastName);
          OUTLINED_FUNCTION_28_3((uint64_t)v39, sel_setLastName_);

          id result = objc_msgSend(v38, sel_suffix);
          if (result)
          {
            uint64_t v40 = result;
            OUTLINED_FUNCTION_28_3((uint64_t)result, sel_setNameSuffix_);

            type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            CodableContact.init(wrappedValue:)();
            uint64_t v41 = v1[58];
            uint64_t v42 = v1[59];
            uint64_t v43 = v1[57];
            uint64_t v44 = v1[25];
            type metadata accessor for ModifyContactAttributeCATsModern();
            OUTLINED_FUNCTION_82();
            v1[67] = OUTLINED_FUNCTION_45_0();
            RelationshipLabel.asUnboundedSemanticValue.getter();
            OUTLINED_FUNCTION_26_2();
            type metadata accessor for SpeakableString();
            OUTLINED_FUNCTION_41_1(v42);
            uint64_t v45 = (void *)CodableContact.wrappedValue.getter();
            CNContact.formattedFullName.getter();

            OUTLINED_FUNCTION_26_2();
            OUTLINED_FUNCTION_41_1(v41);
            OUTLINED_FUNCTION_22_2();
            OUTLINED_FUNCTION_41_1(v43);
            OUTLINED_FUNCTION_85((void *)(v44 + 16));
            uint64_t v46 = (void *)swift_task_alloc();
            v1[68] = v46;
            *uint64_t v46 = v1;
            v46[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
            OUTLINED_FUNCTION_25_3();
            return (id)ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)();
          }
          goto LABEL_22;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v7 = v1[56];
  uint64_t v8 = v1[25];
  uint64_t v48 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v48);
  if (OUTLINED_FUNCTION_85((void *)(v8 + 16)))
  {
    uint64_t v9 = (void *)v1[23];
    outlined init with copy of ContactServiceProtocol(v1[25] + 56, (uint64_t)(v1 + 2));
    OUTLINED_FUNCTION_76();
    id result = objc_msgSend(v9, sel_internalGUID);
    if (!result)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    uint64_t v11 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = OUTLINED_FUNCTION_33();
    v13(v12);

    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 2));
  }
  uint64_t v14 = (void *)v1[23];
  type metadata accessor for DialogPerson();
  OUTLINED_FUNCTION_77();
  id v15 = v14;
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_73();
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v16, v17, v18, v19);
  dispatch thunk of DialogPerson.fullName.getter();
  uint64_t v21 = v1[55];
  uint64_t v20 = v1[56];
  uint64_t v23 = v1[53];
  uint64_t v22 = v1[54];
  swift_release();
  outlined destroy of ConfirmationResponse?(v20, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  outlined init with take of SpeakableString?(v21, v20);
  RelationshipLabel.asUnboundedSemanticValue.getter();
  OUTLINED_FUNCTION_26_2();
  __swift_storeEnumTagSinglePayload(v22, 0, 1, v48);
  OUTLINED_FUNCTION_22_2();
  __swift_storeEnumTagSinglePayload(v23, 0, 1, v48);
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 16), *(void *)(v8 + 40));
  OUTLINED_FUNCTION_87();
  DeviceState.isVox.getter();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v1[76] = v24;
  *uint64_t v24 = v25;
  v24[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_25_3();
  return (id)ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)();
}

#error "22D4C3D44: call analysis failed (funcsize=206)"

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_67();
  uint64_t v23 = *(void **)(v22 + 528);
  uint64_t v24 = *(void **)(v22 + 520);
  uint64_t v43 = *(void *)(v22 + 488);
  uint64_t v44 = *(void *)(v22 + 512);
  uint64_t v25 = *(void *)(v22 + 400);
  uint64_t v41 = *(void *)(v22 + 392);
  uint64_t v42 = *(void *)(v22 + 416);
  uint64_t v39 = *(void *)(v22 + 368);
  uint64_t v40 = *(void *)(v22 + 384);
  uint64_t v46 = *(void *)(v22 + 288);
  uint64_t v45 = *(void *)(v22 + 272);

  OUTLINED_FUNCTION_44();
  v26();
  OUTLINED_FUNCTION_42_0();
  v27();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v42, v41);
  OUTLINED_FUNCTION_27_3();
  v28();
  outlined destroy of AppUtil(v22 + 56);
  OUTLINED_FUNCTION_31_2();
  v29();
  OUTLINED_FUNCTION_13_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_58();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, v39, v40, v41, v42, v43, v44, v45, v46, v22 + 56,
           a20,
           a21,
           a22);
}

{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_67();
  uint64_t v23 = *(void *)(v22 + 448);
  ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)(*(uint64_t **)(v22 + 176));
  uint64_t v24 = OUTLINED_FUNCTION_62();
  v25(v24);
  outlined destroy of ConfirmationResponse?(v23, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_58();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  uint64_t v25 = *(void **)(v24 + 520);

  uint64_t v26 = OUTLINED_FUNCTION_20_4();
  v27(v26);
  outlined destroy of AppUtil(v24 + 56);
  OUTLINED_FUNCTION_11_5(*(void *)(v24 + 560));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_37_1();
  return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

{
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  outlined destroy of ConfirmationResponse?(*(void *)(v24 + 448), (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_5(*(void *)(v24 + 616));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_37_1();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_31_1(v0);
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:);
  return ContactsCommonCATs.promptCancelled()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_37();
  ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)(*(uint64_t **)(v0 + 16));
  OUTLINED_FUNCTION_27_3();
  v1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v2();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_31_1(v0);
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:);
  return ContactsCommonCATs.unsupportedAction()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_31_1(v0);
  *uint64_t v1 = v2;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:);
  return ContactsCommonCATs.genericError()();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_76();
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  uint64_t v6 = type metadata accessor for AceOutput();
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  uint64_t v7 = MEMORY[0x263F6FFF0];
  a1[3] = v6;
  a1[4] = v7;
  __swift_allocate_boxed_opaque_existential_1(a1);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of ConfirmationResponse?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of ConfirmationResponse?(v1, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.getActionForInput(input:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_4();
  uint64_t v104 = v4;
  uint64_t v108 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v106 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v105 = v7;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v8);
  uint64_t v107 = (char *)&v99 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v11 = OUTLINED_FUNCTION_10_0(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_4();
  uint64_t v111 = v12;
  uint64_t v13 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_4_4();
  uint64_t v109 = v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  uint64_t v110 = (char *)&v99 - v19;
  OUTLINED_FUNCTION_17();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v99 - v23;
  Input.parse.getter();
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v15 + 88);
  int v26 = v25(v24, v13);
  int v27 = *MEMORY[0x263F6FF70];
  if (v26 != *MEMORY[0x263F6FF50] && v26 != v27 && v26 != *MEMORY[0x263F6FF80])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    uint64_t v41 = (void *)OUTLINED_FUNCTION_21_0(v40, (uint64_t)static Logger.siriContacts);
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v42))
    {
      uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v43);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v44, v45, "#ContactsUnsetRelationshipFlowStrategy: Received unsupported parse type, returning .ignore() actionForInput");
      OUTLINED_FUNCTION_4_6();
    }

    static ActionForInput.ignore()();
    OUTLINED_FUNCTION_44();
    return v46();
  }
  int v101 = *MEMORY[0x263F6FF80];
  uint64_t v102 = v25;
  uint64_t v103 = a1;
  uint64_t v100 = v15;
  uint64_t v30 = *(void (**)(void))(v15 + 8);
  OUTLINED_FUNCTION_31_2();
  v30();
  Input.parse.getter();
  Parse.cancelOrContactIntent.getter();
  __int16 v32 = v31;
  OUTLINED_FUNCTION_31_2();
  v30();
  if (v32)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = (void *)OUTLINED_FUNCTION_21_0(v47, (uint64_t)static Logger.siriContacts);
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v49))
    {
      uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v50);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v51, v52, "#ContactsUnsetRelationshipFlowStrategy: .cancel() actionForInput");
      OUTLINED_FUNCTION_4_6();
    }

    return static ActionForInput.cancel()();
  }
  else
  {
    if ((v32 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v34 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v35))
      {
        uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v36);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v37, v38, "#ContactsUnsetRelationshipFlowStrategy: .ignore() actionForInput");
        OUTLINED_FUNCTION_4_6();
      }

      return static ActionForInput.ignore()();
    }
    Input.parse.getter();
    uint64_t v53 = OUTLINED_FUNCTION_61();
    int v55 = v54(v53);
    OUTLINED_FUNCTION_31_2();
    v30();
    if (v55 == v27)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      uint64_t v57 = (void *)OUTLINED_FUNCTION_21_0(v56, (uint64_t)static Logger.siriContacts);
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_7_4(v58)) {
        goto LABEL_40;
      }
      uint64_t v59 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v59);
      uint64_t v62 = "#ContactsUnsetRelationshipFlowStrategy: Direct Invocation parse, returning .handle()";
LABEL_39:
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v60, v61, v62);
      OUTLINED_FUNCTION_4_6();
LABEL_40:

      return static ActionForInput.handle()();
    }
    Input.parse.getter();
    uint64_t v63 = v111;
    Parse.confirmationResponse.getter();
    OUTLINED_FUNCTION_31_2();
    v30();
    uint64_t v64 = type metadata accessor for ConfirmationResponse();
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v63, 1, v64);
    outlined destroy of ConfirmationResponse?(v63, (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
    if (EnumTagSinglePayload != 1)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      uint64_t v57 = (void *)OUTLINED_FUNCTION_21_0(v74, (uint64_t)static Logger.siriContacts);
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_7_4(v75)) {
        goto LABEL_40;
      }
      uint64_t v76 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v76);
      uint64_t v62 = "#ContactsUnsetRelationshipFlowStrategy: confirmation response parse, returning .handle()";
      goto LABEL_39;
    }
    uint64_t v66 = v109;
    Input.parse.getter();
    uint64_t v67 = OUTLINED_FUNCTION_61();
    int v69 = v68(v67);
    if (v69 != v101)
    {
      OUTLINED_FUNCTION_31_2();
      v30();
LABEL_42:
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v57 = (void *)OUTLINED_FUNCTION_21_0(v77, (uint64_t)static Logger.siriContacts);
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v78))
      {
        uint64_t v79 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v79);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v80, v81, "#ContactsUnsetRelationshipFlowStrategy: .handle() actionForInput");
        OUTLINED_FUNCTION_4_6();
      }
      goto LABEL_40;
    }
    (*(void (**)(uint64_t, uint64_t))(v100 + 96))(v66, v13);
    uint64_t v70 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v107, v66, v108);
    char v71 = USOParse.isOrdinalDisambiguation.getter();
    OUTLINED_FUNCTION_89();
    v72();
    if (v71)
    {
      uint64_t v73 = *(void (**)(void))(v70 + 8);
      OUTLINED_FUNCTION_13_4();
      v73();
LABEL_48:
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = (void *)OUTLINED_FUNCTION_21_0(v83, (uint64_t)static Logger.siriContacts);
      os_log_type_t v85 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v85))
      {
        char v86 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v86);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v87, v88, "#ContactsUnsetRelationshipFlowStrategy: disambiguation task parse, returning .handle()");
        OUTLINED_FUNCTION_4_6();
      }

      static ActionForInput.handle()();
      OUTLINED_FUNCTION_13_4();
      return ((uint64_t (*)(void))v73)();
    }
    char v82 = USOParse.isContactDisambiguation.getter();
    uint64_t v73 = *(void (**)(void))(v70 + 8);
    OUTLINED_FUNCTION_27_3();
    v73();
    if (v82) {
      goto LABEL_48;
    }
    uint64_t v89 = v104;
    USOParse.preferredUserDialogAct.getter(v104);
    uint64_t v90 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    if (__swift_getEnumTagSinglePayload(v89, 1, v90) == 1)
    {
      outlined destroy of ConfirmationResponse?(v89, (uint64_t)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_59:
      long long v112 = 0u;
      long long v113 = 0u;
      goto LABEL_60;
    }
    uint64_t v91 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v89, v90);
    if (!v91) {
      goto LABEL_59;
    }
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (!*((void *)&v113 + 1))
    {
LABEL_60:
      OUTLINED_FUNCTION_27_3();
      v73();
      outlined destroy of ConfirmationResponse?((uint64_t)&v112, (uint64_t)&demangling cache variable for type metadata for Any?);
      goto LABEL_42;
    }
    outlined init with take of Any(&v112, v114);
    outlined init with copy of Any((uint64_t)v114, (uint64_t)&v112);
    type metadata accessor for UsoTask_update_common_Person();
    if (swift_dynamicCast())
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v114);
      OUTLINED_FUNCTION_27_3();
      v73();
      goto LABEL_42;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    unint64_t v94 = (void *)OUTLINED_FUNCTION_21_0(v93, (uint64_t)static Logger.siriContacts);
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v95))
    {
      uint64_t v96 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v96);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v97, v98, "#ContactsUnsetRelationshipFlowStrategy: Received a non-update-person task type, returning .ignore()");
      OUTLINED_FUNCTION_4_6();
    }

    static ActionForInput.ignore()();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v114);
    OUTLINED_FUNCTION_27_3();
    return ((uint64_t (*)(void))v73)();
  }
}

uint64_t ContactsUnsetRelationshipFlowStrategy.unsetRelationshipActionForInput(_:resolveRecord:shouldExpectPerson:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v77 = a3;
  uint64_t v76 = a2;
  uint64_t v82 = a1;
  uint64_t v80 = a4;
  OUTLINED_FUNCTION_23_2();
  uint64_t v78 = v5;
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v72 = v7;
  uint64_t v73 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_60();
  uint64_t v81 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_4_4();
  os_log_type_t v75 = v16;
  OUTLINED_FUNCTION_17();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v71 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v71 - v21;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  char v71 = v9;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v79 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriContacts);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = v14;
    int v27 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)int v27 = 0;
    _os_log_impl(&dword_22D49E000, v24, v25, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput", v27, 2u);
    uint64_t v28 = v27;
    uint64_t v14 = v26;
    MEMORY[0x230F85DE0](v28, -1, -1);
  }

  Input.parse.getter();
  Parse.confirmationResponse.getter();
  uint64_t v74 = v14;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v30 = v22;
  uint64_t v31 = v81;
  v29(v30, v81);
  uint64_t v32 = type metadata accessor for ConfirmationResponse();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v4, 1, v32);
  outlined destroy of ConfirmationResponse?(v4, (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_89();
  v34();
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v51 = OUTLINED_FUNCTION_70();
    v52(v51);
    goto LABEL_14;
  }
  Input.parse.getter();
  char v35 = Parse.isUSODisambiguationTask.getter();
  v29(v20, v31);
  uint64_t v36 = OUTLINED_FUNCTION_70();
  v37(v36);
  if (v35)
  {
LABEL_14:
    uint64_t v53 = (void *)Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v54))
    {
      int v55 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v55);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v56, v57, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput detected a confirmation or disambig response, deferring to getActionForInput");
      OUTLINED_FUNCTION_4_6();
    }

    goto LABEL_17;
  }
  uint64_t v38 = static ContactsDisambiguationStrategy.extractCurrentContext(from:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  if (v77 & 1) != 0 && !*(void *)(v38 + 16) || (Optional<A>.isNilOrEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = v80;
    swift_bridgeObjectRelease();
    uint64_t v45 = (void *)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v46))
    {
      uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v47);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v48, v49, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput deferring to getActionForInput");
      OUTLINED_FUNCTION_4_6();
    }

    uint64_t v50 = v44;
    return ContactsUnsetRelationshipFlowStrategy.getActionForInput(input:)(v50);
  }
  uint64_t v59 = v75;
  Input.parse.getter();
  uint64_t v60 = v74;
  uint64_t v61 = v81;
  if ((*(unsigned int (**)(char *, uint64_t))(v74 + 88))(v59, v81) != *MEMORY[0x263F6FF80])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29(v59, v61);
LABEL_17:
    uint64_t v50 = v80;
    return ContactsUnsetRelationshipFlowStrategy.getActionForInput(input:)(v50);
  }
  (*(void (**)(char *, uint64_t))(v60 + 96))(v59, v61);
  uint64_t v62 = (uint64_t)v71;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v59, v73);
  char v63 = static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)(v62, v39, v41, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
  {
    OUTLINED_FUNCTION_44();
    v70();
    goto LABEL_17;
  }
  uint64_t v64 = (void *)Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v65))
  {
    uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v66);
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v67, v68, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput encountered parse for different contact, ignoring");
    OUTLINED_FUNCTION_4_6();
  }

  static ActionForInput.ignore()();
  OUTLINED_FUNCTION_44();
  return v69();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.deinit()
{
  uint64_t v0 = ContactsUnsupportedValueStrategy.deinit();
  swift_release();
  return v0;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsUnsetRelationshipFlowStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 184, 7);
}

uint64_t type metadata accessor for ContactsUnsetRelationshipFlowStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for UnsupportedUnsetRelationshipFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F667E8](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 48) = v9;
  long long v10 = *(_OWORD *)(a3 + 320);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 304);
  *(_OWORD *)(v4 + 32) = v10;
  uint64_t v11 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F667F8](a1, a2, v11, a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptForNameInput(_:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForPersonName(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66800](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66808](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F667F0](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  return ContactsUnsetRelationshipFlowStrategy.paginationStyle(resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptForContactDisambiguationInput(_:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForContactDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66810](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66818](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptToSaveRelationship(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsUnsetRelationshipFlowStrategy.actionForPromptToSaveRelationship(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parsePromptToSaveRelationshipResponse(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v13;
  long long v14 = *(_OWORD *)(a5 + 320);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a5 + 304);
  *(_OWORD *)(v6 + 32) = v14;
  uint64_t v15 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  void *v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F667C0](a1, a2, a3, a4, v15, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v13;
  long long v14 = *(_OWORD *)(a5 + 320);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a5 + 304);
  *(_OWORD *)(v6 + 32) = v14;
  uint64_t v15 = type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
  void *v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F667C8](a1, a2, a3, a4, v15, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)();
}

uint64_t static UnsetRelationshipPerson.from(userDialogAct:)@<X0>(uint64_t a1@<X8>)
{
  if (Siri_Nlu_External_UserDialogAct.usoTask.getter())
  {
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (*((void *)&v17 + 1))
    {
      outlined init with take of Any(&v16, v18);
      outlined init with copy of Any((uint64_t)v18, (uint64_t)&v16);
      type metadata accessor for UsoTask_setIdentity_common_Person();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
        swift_release();
        if (v15)
        {
          dispatch thunk of UsoEntity_common_Person.name.getter();
          uint64_t v3 = v2;
          swift_release();
          if (v3)
          {
LABEL_19:
            UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)();
            swift_release();
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
            uint64_t v12 = type metadata accessor for UnsetRelationshipPerson();
            __swift_storeEnumTagSinglePayload(a1, 0, 1, v12);
            return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
          }
        }
        swift_release();
        goto LABEL_21;
      }
      type metadata accessor for UsoTask_update_common_Person();
      if (!swift_dynamicCast())
      {
LABEL_21:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
LABEL_22:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
        goto LABEL_23;
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      swift_release();
      if (!v15 || (dispatch thunk of UsoEntity_common_Person.name.getter(), uint64_t v5 = v4, swift_release(), !v5))
      {
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
        if (v15)
        {
          dispatch thunk of UsoEntity_common_Person.name.getter();
          uint64_t v7 = v6;
          swift_bridgeObjectRelease();
          swift_release();
          if (v7) {
            goto LABEL_14;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
        swift_release();
        goto LABEL_22;
      }
LABEL_14:
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_22D49E000, v9, v10, "#ContactsUnsetRelationshipFlowStrategy returning UnsetRelationshipPerson", v11, 2u);
        MEMORY[0x230F85DE0](v11, -1, -1);
      }

      goto LABEL_19;
    }
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  outlined destroy of ConfirmationResponse?((uint64_t)&v16, (uint64_t)&demangling cache variable for type metadata for Any?);
LABEL_23:
  uint64_t v14 = type metadata accessor for UnsetRelationshipPerson();
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v14);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  return closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)();
}

uint64_t outlined init with copy of ContactServiceProtocol(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_51();
  (*v3)(a2);
  return a2;
}

uint64_t outlined destroy of ConfirmationViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1)
{
  return closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc SAPerson.internalGUID.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_internalGUID);
  if (!v1) {
    return 0;
  }
  long long v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for CNContact(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined destroy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)OUTLINED_FUNCTION_81(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t))(v4 + 8))(v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_4_7@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 80) = a1;
  *(void *)(v2 - 88) = *(void *)(v1 + 264);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  uint64_t v3 = *(void *)(v0 + 264);
  *(void *)(v1 - 88) = *(void *)(v0 + 288);
  *(void *)(v1 - 80) = v3;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_5@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 80) = a1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  return v0;
}

id OUTLINED_FUNCTION_21_2()
{
  return objc_msgSend(v1, (SEL)(v0 + 1688), v2, v3);
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return SpeakableString.init(print:speak:)();
}

id OUTLINED_FUNCTION_28_3(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  uint64_t v1 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_41_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return SAClientBoundCommand.data.getter();
}

void OUTLINED_FUNCTION_44_0()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_49_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  return ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, a3, 1, a4);
}

uint64_t OUTLINED_FUNCTION_50()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

void OUTLINED_FUNCTION_57()
{
  JUMPOUT(0x230F84F70);
}

uint64_t OUTLINED_FUNCTION_59(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = a21;
  *(void *)(v21 - 80) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_62()
{
  return v0;
}

id OUTLINED_FUNCTION_69()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return MEMORY[0x270F646B8](a1, a2, a3, a4, a5, a18, a17, v18, v19);
}

uint64_t OUTLINED_FUNCTION_75()
{
  return swift_task_dealloc();
}

void *OUTLINED_FUNCTION_76()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

void *OUTLINED_FUNCTION_77()
{
  uint64_t v3 = *(void *)(v0 + 40);
  return __swift_project_boxed_opaque_existential_1(v1, v3);
}

uint64_t OUTLINED_FUNCTION_78()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_81(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_82()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_85(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_87()
{
  return v0;
}

id OUTLINED_FUNCTION_91()
{
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return [v2 (SEL)(v3 + 3155)];
}

void OUTLINED_FUNCTION_92()
{
}

id CNLabeledValue<>.init(relationLabel:contactName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v21._uint64_t countAndFlagsBits = a3;
  v21._object = a4;
  uint64_t v6 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v11 = v9 + *(int *)(v6 + 20);
  *(void *)uint64_t v11 = "RelationshipLabelValueForKey";
  *(void *)(v11 + 8) = 28;
  *(unsigned char *)(v11 + 16) = 2;
  if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v12 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Dictionary.subscript.getter(a1, a2, v12);
  uint64_t v15 = v14;
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v15)
  {
    a1 = v13;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = a2;
  }
  id v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v9);
  swift_bridgeObjectRelease();
  long long v17 = (void *)MEMORY[0x230F84F70](a1, v15);
  swift_bridgeObjectRelease();
  type metadata accessor for CNContactRelation();
  Class isa = CNContactRelation.__allocating_init(name:)(v21).super.isa;
  id v19 = objc_msgSend(v16, sel_initWithLabel_value_, v17, isa);

  return v19;
}

id CNLabeledValue<>.init(address:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB30]), sel_init);
  uint64_t v11 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_street);
  if (v12)
  {
    uint64_t v13 = v12;
    MEMORY[0x230F84F70](v11);
    OUTLINED_FUNCTION_2_6();
    uint64_t v14 = MEMORY[0x230F84F70](0x746565727473, 0xE600000000000000);
    OUTLINED_FUNCTION_0_2(v14);
  }
  uint64_t v15 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_subLocality);
  if (v16)
  {
    long long v17 = v16;
    MEMORY[0x230F84F70](v15);
    OUTLINED_FUNCTION_2_6();
    uint64_t v18 = MEMORY[0x230F84F70](0x6C61636F4C627573, 0xEB00000000797469);
    OUTLINED_FUNCTION_0_2(v18);
  }
  uint64_t v19 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_city);
  if (v20)
  {
    Swift::String v21 = v20;
    MEMORY[0x230F84F70](v19);
    OUTLINED_FUNCTION_2_6();
    uint64_t v22 = MEMORY[0x230F84F70](2037672291, 0xE400000000000000);
    OUTLINED_FUNCTION_0_2(v22);
  }
  uint64_t v23 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_subAdministrativeArea);
  if (v24)
  {
    os_log_type_t v25 = v24;
    MEMORY[0x230F84F70](v23);
    OUTLINED_FUNCTION_2_6();
    uint64_t v26 = MEMORY[0x230F84F70](0xD000000000000015, 0x800000022D5A79F0);
    OUTLINED_FUNCTION_0_2(v26);
  }
  uint64_t v27 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_state);
  if (v28)
  {
    uint64_t v29 = v28;
    MEMORY[0x230F84F70](v27);
    OUTLINED_FUNCTION_2_6();
    uint64_t v30 = MEMORY[0x230F84F70](0x6574617473, 0xE500000000000000);
    OUTLINED_FUNCTION_0_2(v30);
  }
  uint64_t v31 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_postalCode);
  if (v32)
  {
    uint64_t v33 = v32;
    MEMORY[0x230F84F70](v31);
    OUTLINED_FUNCTION_2_6();
    uint64_t v34 = MEMORY[0x230F84F70](0x6F436C6174736F70, 0xEA00000000006564);
    OUTLINED_FUNCTION_0_2(v34);
  }
  uint64_t v35 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_country);
  if (v36)
  {
    uint64_t v37 = v36;
    MEMORY[0x230F84F70](v35);
    OUTLINED_FUNCTION_2_6();
    uint64_t v38 = MEMORY[0x230F84F70](0x7972746E756F63, 0xE700000000000000);
    OUTLINED_FUNCTION_0_2(v38);
  }
  uint64_t v39 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_isoCountryCode);
  if (v40)
  {
    uint64_t v41 = v40;
    MEMORY[0x230F84F70](v39);
    OUTLINED_FUNCTION_2_6();
    uint64_t v42 = MEMORY[0x230F84F70](0x746E756F434F5349, 0xEE0065646F437972);
    OUTLINED_FUNCTION_0_2(v42);
  }
  id v43 = a1;
  uint64_t v44 = outlined bridged method (ob) of @objc INObject.identifier.getter(v43);
  if (v45)
  {
    uint64_t v46 = v44;
    uint64_t v47 = v45;
  }
  else
  {
    UUID.init()();
    uint64_t v46 = UUID.uuidString.getter();
    uint64_t v47 = v48;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  }
  uint64_t v49 = (void *)MEMORY[0x230F84F70](v46, v47);
  swift_bridgeObjectRelease();
  uint64_t v50 = outlined bridged method (pb) of @objc PostalAddress.street.getter(v43, (SEL *)&selRef_handleLabel);
  if (!v51) {
    uint64_t v50 = static String.EMPTY.getter();
  }
  uint64_t v52 = v50;
  uint64_t v53 = v51;
  id v54 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  int v55 = (void *)MEMORY[0x230F84F70](v52, v53);
  swift_bridgeObjectRelease();
  id v56 = v10;
  id v57 = objc_msgSend(v54, sel_initWithIdentifier_label_value_, v49, v55, v56);

  return v57;
}

uint64_t CNLabeledValue<>.buildMapsURL(contact:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = self;
  id v14 = objc_msgSend(v3, sel_value);
  id v15 = objc_msgSend(v13, sel_singleLineStringFromPostalAddress_addCountryName_, v14, 0);

  if (!v15) {
    goto LABEL_7;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v51[0] = v16;
  v51[1] = v18;
  static CharacterSet.urlPathAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = MEMORY[0x263F8D310];
  uint64_t v20 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
  swift_bridgeObjectRelease();
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_22D59FE50;
    *(void *)(v23 + 56) = v19;
    unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v23 + 64) = v24;
    *(void *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v22;
    unsigned int v25 = objc_msgSend(a1, sel_iOSLegacyIdentifier);
    uint64_t v26 = MEMORY[0x263F8E548];
    uint64_t v27 = MEMORY[0x263F8E5B0];
    *(void *)(v23 + 96) = MEMORY[0x263F8E548];
    *(void *)(v23 + 104) = v27;
    *(_DWORD *)(v23 + 72) = v25;
    unsigned int v28 = objc_msgSend(v3, sel_iOSLegacyIdentifier);
    *(void *)(v23 + 136) = v26;
    *(void *)(v23 + 144) = v27;
    *(_DWORD *)(v23 + 112) = v28;
    id v29 = objc_msgSend(a1, sel_identifier);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    *(void *)(v23 + 176) = v19;
    *(void *)(v23 + 184) = v24;
    *(void *)(v23 + 152) = v30;
    *(void *)(v23 + 160) = v32;
    id v33 = objc_msgSend(v3, sel_identifier);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)(v23 + 216) = v19;
    *(void *)(v23 + 224) = v24;
    *(void *)(v23 + 192) = v34;
    *(void *)(v23 + 200) = v36;
    uint64_t v37 = String.init(format:_:)();
    unint64_t v39 = v38;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v51[0] = v44;
      *(_DWORD *)id v43 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v41, v42, "#buildMapsURL Building Maps punchout URL from string: %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v44, -1, -1);
      MEMORY[0x230F85DE0](v43, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    URL.init(string:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.siriContacts);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_22D49E000, v46, v47, "#buildMapsURL Failed to format CNPostalAddress into percent encoded string, returning nil", v48, 2u);
      MEMORY[0x230F85DE0](v48, -1, -1);
    }

    uint64_t v49 = type metadata accessor for URL();
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v49);
  }
}

CNContactRelation __swiftcall CNContactRelation.__allocating_init(name:)(Swift::String name)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x230F84F70](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithName_, v4);

  return (CNContactRelation)v5;
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.street.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_street);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.city.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_city);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.subAdministrativeArea.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_subAdministrativeArea);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.state.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_state);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.postalCode.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_postalCode);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.country.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_country);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.isoCountryCode.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_isoCountryCode);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.handleLabel.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_handleLabel);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.street.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t type metadata accessor for CNContactRelation()
{
  unint64_t result = lazy cache variable for type metadata for CNContactRelation;
  if (!lazy cache variable for type metadata for CNContactRelation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContactRelation);
  }
  return result;
}

id OUTLINED_FUNCTION_0_2(uint64_t a1)
{
  return objc_msgSend(v1, (SEL)(v3 + 1688), v2, a1);
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ContactsLabelCATs()
{
  uint64_t result = type metadata singleton initialization cache for ContactsLabelCATs;
  if (!type metadata singleton initialization cache for ContactsLabelCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactsLabelCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsLabelCATs.address()(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_6_4();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_8(v2);
  *uint64_t v3 = v4;
  v3[1] = ContactsLabelCATs.address();
  uint64_t v5 = MEMORY[0x263F8EE78];
  return v7(a1, 0xD000000000000015, 0x800000022D5A7BF0, v5);
}

uint64_t ContactsLabelCATs.address()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.age()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.birthday()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.call()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.cancel()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.email()()
{
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = ContactsLabelCATs.email();
  uint64_t v3 = OUTLINED_FUNCTION_2_7();
  return v4(v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.message()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.nickName()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.openContacts()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.phone()()
{
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = ContactsLabelCATs.address();
  uint64_t v3 = OUTLINED_FUNCTION_2_7();
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.relationship(relationship:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22D59FD50;
  uint64_t v7 = (uint64_t *)(v6 + 48);
  strcpy((char *)(v6 + 32), "relationship");
  *(unsigned char *)(v6 + 45) = 0;
  *(_WORD *)(v6 + 46) = -5120;
  _s10Foundation3URLVSgWOcTm_0(a1, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v5, 1, v8) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }
  else
  {
    *(void *)(v6 + 72) = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(boxed_opaque_existential_1, v5, v8);
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t ContactsLabelCATs.relationshipRemoved()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.save()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.siriSettings()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.yes()()
{
  return OUTLINED_FUNCTION_0_3();
}

uint64_t ContactsLabelCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ContactsLabelCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsLabelCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_15();
  _s10Foundation3URLVSgWOcTm_0(a1, v11 - v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v12 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(a1, &demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t ContactsLabelCATs.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ObjC metadata update function for ContactsLabelCATs()
{
  return type metadata accessor for ContactsLabelCATs();
}

uint64_t _s10Foundation3URLVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_8(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t RedirectToCompanionFlow.__allocating_init(parse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = OUTLINED_FUNCTION_6_9();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  Input.init(parse:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  uint64_t v11 = type metadata accessor for Input();
  __swift_storeEnumTagSinglePayload(v10, 0, 2, v11);
  type metadata accessor for RedirectToCompanionFlow(0);
  uint64_t v12 = swift_allocObject();
  outlined init with take of RedirectToCompanionFlow.State(v10, v12 + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state);
  return v12;
}

uint64_t type metadata accessor for RedirectToCompanionFlow.State(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow.State);
}

uint64_t type metadata accessor for RedirectToCompanionFlow(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow);
}

uint64_t outlined init with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL RedirectToCompanionFlow.on(input:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_6_9();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000070, 0x800000022D5A7C10, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v7, v8, "%s:%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  uint64_t v10 = v1 + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state;
  swift_beginAccess();
  outlined init with copy of RedirectToCompanionFlow.State(v10, v5);
  uint64_t v11 = type metadata accessor for Input();
  BOOL v12 = __swift_getEnumTagSinglePayload(v5, 2, v11) == 0;
  outlined destroy of RedirectToCompanionFlow.State(v5);
  return v12;
}

uint64_t RedirectToCompanionFlow.execute()()
{
  OUTLINED_FUNCTION_4();
  v1[10] = v2;
  v1[11] = v0;
  uint64_t v3 = type metadata accessor for ExecuteOnRemoteDeviceSpecification();
  v1[12] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[13] = v4;
  v1[14] = OUTLINED_FUNCTION_2_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentityCheckFlowStrategy.HandoffConfiguration?);
  v1[15] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for UserIdentityCheckFlowStrategy();
  v1[16] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[17] = v6;
  v1[18] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration();
  v1[19] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[20] = v8;
  v1[21] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for CompanionDeviceInfoRequirement();
  v1[22] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[23] = v10;
  v1[24] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for FlowUnhandledReason();
  v1[25] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[26] = v12;
  v1[27] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_6_9();
  v1[28] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for Input();
  v1[29] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[30] = v14;
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  return MEMORY[0x270FA2498](RedirectToCompanionFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumTagSinglePayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[5];
  void *v39;
  uint64_t v40;

  unint64_t v39 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000070, 0x800000022D5A7C10, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xE900000000000029, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v2, v3, "%s:%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v7 = v0[11] + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state;
  swift_beginAccess();
  outlined init with copy of RedirectToCompanionFlow.State(v7, v6);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v6, 2, v5);
  if (EnumTagSinglePayload)
  {
    if (EnumTagSinglePayload == 1)
    {
      uint64_t v9 = v0[28];
      static ExecuteResponse.complete()();
      outlined destroy of RedirectToCompanionFlow.State(v9);
    }
    else
    {
      unint64_t v24 = v0[26];
      uint64_t v23 = v0[27];
      unsigned int v25 = v0[25];
      (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v23, *MEMORY[0x263F6F698], v25);
      static ExecuteResponse.unhandled(reason:)();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    }
  }
  else
  {
    id v29 = v0[32];
    uint64_t v32 = v0[31];
    uint64_t v37 = v0[30];
    uint64_t v10 = v0[29];
    uint64_t v12 = v0[23];
    uint64_t v11 = v0[24];
    uint64_t v13 = v0[22];
    uint64_t v14 = v0[20];
    uint64_t v35 = v0[19];
    uint64_t v36 = v0[21];
    unsigned int v28 = v0[18];
    id v15 = v0[15];
    id v33 = v0[17];
    uint64_t v34 = v0[16];
    uint64_t v16 = v0[13];
    uint64_t v30 = v0[14];
    uint64_t v31 = v0[12];
    (*(void (**)(void))(v37 + 32))();
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy();
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, *MEMORY[0x263F6FE38], v13);
    static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v17 = type metadata accessor for SimpleHandoffStrategy();
    uint64_t v18 = swift_allocObject();
    v38[3] = v17;
    v38[4] = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy, v19, (void (*)(uint64_t))type metadata accessor for SimpleHandoffStrategy);
    v38[0] = v18;
    swift_retain();
    UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v36, v35);
    __swift_storeEnumTagSinglePayload(v15, 0, 1, v35);
    UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)();
    UserIdentityCheckFlowStrategy.requireSpeechProfile.setter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v32, v29, v10);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v30, *MEMORY[0x263F6FF08], v31);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for ExecuteOnRemoteFlow();
    swift_allocObject();
    v0[5] = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v20 = type metadata accessor for CommonFlowGuard();
    OUTLINED_FUNCTION_1(v20);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D5A01E0;
    static CommonFlowGuard.ensuringUserIdentity(using:)();
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)();
    uint64_t v21 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
    swift_bridgeObjectRelease();
    v0[6] = v21;
    type metadata accessor for GuardFlow();
    uint64_t v22 = Flow.guarded<A>(by:)();
    swift_release();
    swift_release();
    v0[7] = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v28, v34);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v36, v35);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v29, v10);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecuteOnRemoteFlowResult();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (void **)((char *)&v62 - v13);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v62 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for RedirectToCompanionFlow.State(0);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v69 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  unint64_t v24 = (char *)&v62 - v23;
  outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(a1, (uint64_t)v19);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: ExecuteOnRemoteFlowResult));
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v25) == 1)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriContacts);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl(&dword_22D49E000, v27, v28, "ExecuteOnRemote guard flows failed, assuming a server redirect or handoff should have happened, doing nothing.", v29, 2u);
      MEMORY[0x230F85DE0](v29, -1, -1);
    }

    uint64_t v30 = type metadata accessor for Input();
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 2, v30);
    outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>((uint64_t)v19);
  }
  else
  {
    uint64_t v67 = a2;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v16, v19, v4);
    uint64_t v31 = v16;
    uint64_t v32 = *(void (**)(void **))(v5 + 16);
    uint64_t v68 = v31;
    v32(v14);
    if ((*(unsigned int (**)(void **, uint64_t))(v5 + 88))(v14, v4) == *MEMORY[0x263F6F2D8])
    {
      (*(void (**)(void **, uint64_t))(v5 + 96))(v14, v4);
      id v33 = *v14;
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriContacts);
      id v35 = v33;
      id v36 = v33;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v70 = (uint64_t)v33;
        v71[0] = v40;
        *(_DWORD *)unint64_t v39 = 136315138;
        uint64_t v66 = v39 + 4;
        id v41 = v33;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v42 = String.init<A>(describing:)();
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_22D49E000, v37, v38, "ExecuteOnRemote failed with an error=%s: Possible server redirect. Will redirect this input to server as a fallback.", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v40, -1, -1);
        MEMORY[0x230F85DE0](v39, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v68, v4);
      a2 = v67;
      uint64_t v57 = type metadata accessor for Input();
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 2, 2, v57);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
      uint64_t v45 = v68;
      ((void (*)(char *, char *, uint64_t))v32)(v11, v68, v4);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      LODWORD(v66) = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        os_log_t v64 = v46;
        uint64_t v49 = (uint8_t *)v48;
        uint64_t v65 = swift_slowAlloc();
        v71[0] = v65;
        char v63 = v49;
        *(_DWORD *)uint64_t v49 = 136315138;
        ((void (*)(char *, char *, uint64_t))v32)(v8, v11, v4);
        uint64_t v50 = String.init<A>(describing:)();
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
        v52(v11, v4);
        id v54 = v63;
        os_log_t v53 = v64;
        _os_log_impl(&dword_22D49E000, v64, (os_log_type_t)v66, "ExecuteOnRemote flow completed with: %s", v63, 0xCu);
        uint64_t v55 = v65;
        swift_arrayDestroy();
        MEMORY[0x230F85DE0](v55, -1, -1);
        MEMORY[0x230F85DE0](v54, -1, -1);

        id v56 = v68;
      }
      else
      {

        uint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
        v52(v11, v4);
        id v56 = v45;
      }
      v52(v56, v4);
      uint64_t v58 = type metadata accessor for Input();
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 2, v58);
      v52((char *)v14, v4);
      a2 = v67;
    }
  }
  uint64_t v59 = v69;
  outlined init with copy of RedirectToCompanionFlow.State((uint64_t)v24, v69);
  uint64_t v60 = a2 + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state;
  swift_beginAccess();
  outlined assign with take of RedirectToCompanionFlow.State(v59, v60);
  swift_endAccess();
  return outlined destroy of RedirectToCompanionFlow.State((uint64_t)v24);
}

uint64_t RedirectToCompanionFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t RedirectToCompanionFlow.deinit()
{
  outlined destroy of RedirectToCompanionFlow.State(v0 + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state);
  return v0;
}

uint64_t RedirectToCompanionFlow.__deallocating_deinit()
{
  outlined destroy of RedirectToCompanionFlow.State(v0 + OBJC_IVAR____TtC19SiriContactsIntents23RedirectToCompanionFlow_state);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

BOOL protocol witness for Flow.on(input:) in conformance RedirectToCompanionFlow()
{
  return RedirectToCompanionFlow.on(input:)();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RedirectToCompanionFlow()
{
  return RedirectToCompanionFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToCompanionFlow()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return RedirectToCompanionFlow.execute()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RedirectToCompanionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RedirectToCompanionFlow(0);
  return MEMORY[0x270F66CE8](v3, a2);
}

uint64_t SimpleHandoffStrategy.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance SimpleHandoffStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return MEMORY[0x270F66778](a1, a2, a3);
}

uint64_t outlined init with copy of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SimpleHandoffStrategy()
{
  return self;
}

uint64_t partial apply for closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1)
{
  return closure #1 in RedirectToCompanionFlow.execute()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>;
  if (!lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Flow in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow, 255, (void (*)(uint64_t))type metadata accessor for RedirectToCompanionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow, 255, (void (*)(uint64_t))type metadata accessor for RedirectToCompanionFlow);
}

uint64_t ObjC metadata update function for RedirectToCompanionFlow()
{
  return type metadata accessor for RedirectToCompanionFlow(0);
}

uint64_t type metadata completion function for RedirectToCompanionFlow()
{
  uint64_t result = type metadata accessor for RedirectToCompanionFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for RedirectToCompanionFlow(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RedirectToCompanionFlow);
}

uint64_t dispatch thunk of RedirectToCompanionFlow.on(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RedirectToCompanionFlow.execute()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 128) + **(int **)(*(void *)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return v6(a1);
}

uint64_t dispatch thunk of RedirectToCompanionFlow.execute(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RedirectToCompanionFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Input();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D4CB720);
}

uint64_t sub_22D4CB720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 3) {
    return EnumTagSinglePayload - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D4CB77C);
}

uint64_t sub_22D4CB77C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Input();
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  return __swift_getEnumTagSinglePayload(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  return __swift_storeEnumTagSinglePayload(a1, a2, 2, v4);
}

uint64_t type metadata completion function for RedirectToCompanionFlow.State()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return type metadata accessor for RedirectToCompanionFlow.State(0) - 8;
}

uint64_t MissingMeCardViewBuilder.makeViewsForWatch()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for Watch.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForMac()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v8 = 0;
    _os_log_impl(&dword_22D49E000, v6, v7, "#MissingMeCardViewBuilder Constructing punchout button for macOS.", v8, 2u);
    MEMORY[0x230F85DE0](v8, -1, -1);
  }

  ContactsLabelCATs.openContacts()();
  uint64_t v9 = specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)(v1 + 48, v4);
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4);
  return v9;
}

uint64_t MissingMeCardViewBuilder.makeViewsForCarPlay()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for CarPlay.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForCarDND()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for CarDND.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForWatch()(const char *a1)
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v4, a1, v5, 2u);
    MEMORY[0x230F85DE0](v5, -1, -1);
  }

  return MEMORY[0x263F8EE78];
}

uint64_t MissingMeCardViewBuilder.makeViewsForIOS()()
{
  return MissingMeCardViewBuilder.makeViewsForIOS()("#MissingMeCardViewBuilder Constructing punchout button for iOS.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForXROS()()
{
  return MissingMeCardViewBuilder.makeViewsForIOS()("#MissingMeCardViewBuilder Constructing punchout button for XR.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForIOS()(const char *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v2);
  os_log_type_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v8 = 0;
    _os_log_impl(&dword_22D49E000, v6, v7, a1, v8, 2u);
    MEMORY[0x230F85DE0](v8, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  long long v15 = xmmword_22D59FB50;
  *(_OWORD *)(v9 + 16) = xmmword_22D59FB50;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = v15;
  if (one-time initialization token for iosSiriSettings != -1) {
    swift_once();
  }
  static AppUtil.buildPunchoutFor(string:)();
  *(void *)(v10 + 32) = v11;
  uint64_t v16 = v10;
  specialized Array._endMutation()();
  ContactsLabelCATs.siriSettings()();
  Result<>.firstPrint.getter();
  uint64_t v13 = v12;
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4);
  if (!v13) {
    static String.EMPTY.getter();
  }
  type metadata accessor for SAUIButton();
  *(void *)(v9 + 32) = SAUIButton.init(commands:text:)();
  uint64_t v16 = v9;
  specialized Array._endMutation()();
  return v16;
}

uint64_t outlined destroy of Result<TemplatingResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for SAUIButton()
{
  unint64_t result = lazy cache variable for type metadata for SAUIButton;
  if (!lazy cache variable for type metadata for SAUIButton)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIButton);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MissingMeCardViewBuilder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MissingMeCardViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 48);
}

uint64_t initializeWithCopy for MissingMeCardViewBuilder(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a2 + 48;
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = v6;
  int v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  v8(a1 + 48, v5, v7);
  return a1;
}

uint64_t *assignWithCopy for MissingMeCardViewBuilder(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 6, a2 + 6);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for MissingMeCardViewBuilder(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MissingMeCardViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MissingMeCardViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MissingMeCardViewBuilder()
{
  return &type metadata for MissingMeCardViewBuilder;
}

void UsoEntityBuilder_common_Person.init(name:contactId:handle:)()
{
  void (*v11)(uint64_t *__return_ptr, id *);
  uint64_t v12;
  uint64_t v13;
  id v14;

  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of UsoEntityBuilder_common_Person.__allocating_init()();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)();
  swift_bridgeObjectRelease();
  UsoIdentifier.init(value:appBundleId:namespace:)();
  swift_retain();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  swift_release();
  if (v1)
  {
    uint64_t v8 = one-time initialization token for transformer;
    id v9 = v1;
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
    __swift_project_value_buffer(v10, (uint64_t)static Transformer<>.transformer);
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, id *))Transformer.transform.getter();
    uint64_t v14 = v9;
    v11(&v13, &v14);
    swift_release();
    if (v13)
    {
      dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)();
      swift_release();
    }
  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  OUTLINED_FUNCTION_8();
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(void *a1)
{
  return UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(a1, MEMORY[0x263F73490], MEMORY[0x263F73478], MEMORY[0x263F73480]);
}

void static UsoEntityBuilder_common_PhoneNumber.from(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_9();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_7();
  type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_PhoneNumber.init()();
  id v4 = objc_msgSend(v1, sel_label);
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_msgSend(v1, sel_value);
  id v7 = objc_msgSend(v6, sel_stringValue);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setValue(value:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v8 = OUTLINED_FUNCTION_2_8();
  v9(v8);
  OUTLINED_FUNCTION_1_5();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  uint64_t v10 = OUTLINED_FUNCTION_6_10();
  v11(v10);
  OUTLINED_FUNCTION_8();
}

uint64_t UsoEntityBuilder_common_EmailAddress.init(emailAddress:)(void *a1)
{
  return UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(a1, MEMORY[0x263F734F8], MEMORY[0x263F734E0], MEMORY[0x263F734E8]);
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(void *a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t))
{
  uint64_t v7 = a2();
  swift_retain();
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v8)
  {
    uint64_t v9 = String.sanitizeCNLabel.getter();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    a3(v9, v11);
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a1);
  if (v13)
  {
    a4(v12);
    swift_bridgeObjectRelease();
  }
  swift_release();

  return v7;
}

void static UsoEntityBuilder_common_EmailAddress.from(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_9();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_7();
  type metadata accessor for UsoEntityBuilder_common_EmailAddress();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_EmailAddress.init()();
  id v4 = objc_msgSend(v1, sel_label);
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch thunk of UsoEntityBuilder_common_EmailAddress.setLabel(value:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_msgSend(v1, sel_value);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_EmailAddress.setValue(value:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v7 = OUTLINED_FUNCTION_2_8();
  v8(v7);
  OUTLINED_FUNCTION_1_5();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  uint64_t v9 = OUTLINED_FUNCTION_6_10();
  v10(v9);
  OUTLINED_FUNCTION_8();
}

void static UsoEntityBuilder_common_PostalAddress.from(_:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_4();
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_4();
  type metadata accessor for UsoEntityBuilder_common_PostalAddress();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_PostalAddress.init()();
  id v4 = objc_msgSend(v1, sel_label);
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
    dispatch thunk of UsoEntityBuilder_common_PostalAddress.setLabel(value:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_msgSend(v1, sel_value);
  type metadata accessor for UsoEntityBuilder_common_GeographicArea();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_GeographicArea.init()();
  id v7 = objc_msgSend(v6, sel_street);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  OUTLINED_FUNCTION_9_5();
  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreet(value:)();
  swift_release();
  OUTLINED_FUNCTION_7_5();
  UsoEntityBuilder_common_GeographicArea.init()();
  id v8 = objc_msgSend(v6, sel_city);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  OUTLINED_FUNCTION_9_5();
  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCity(value:)();
  swift_release();
  OUTLINED_FUNCTION_7_5();
  UsoEntityBuilder_common_GeographicArea.init()();
  id v9 = objc_msgSend(v6, sel_state);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  OUTLINED_FUNCTION_9_5();
  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setProvince(value:)();
  swift_release();
  id v10 = objc_msgSend(v6, sel_postalCode);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setPostalCode(value:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
  UsoEntityBuilder_common_GeographicArea.init()();
  id v11 = objc_msgSend(v6, sel_country);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  OUTLINED_FUNCTION_9_5();
  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCountry(value:)();
  swift_release();
  CNLabeledValue<>.formattedString.getter();
  dispatch thunk of UsoEntityBuilder_common_PostalAddress.setValue(value:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v12 = OUTLINED_FUNCTION_10_6();
  v13(v12);
  OUTLINED_FUNCTION_1_5();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  uint64_t v14 = OUTLINED_FUNCTION_10_6();
  v15(v14);
  OUTLINED_FUNCTION_8();
}

uint64_t outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_handleValue);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return UsoIdentifier.init(value:appBundleId:namespace:)();
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return v0;
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for Watch, an unsupported idiom.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForMac()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v4, "[ModifyNicknameUnsupportedViewBuilder] Constructing PersonSnippet with all display properties for macOS.", v5, 2u);
    MEMORY[0x230F85DE0](v5, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  id v7 = *(void **)(v1 + 80);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v8 = v7;
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  outlined init with copy of AppUtil(v1, (uint64_t)v11);
  *(void *)(v6 + 32) = SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v8, 0, isa, (uint64_t)v11);
  v11[0] = v6;
  specialized Array._endMutation()();
  return v11[0];
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForCarPlay()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for CarPlay.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForCarDND()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for CarDND.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForIOS()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_22D49E000, v7, v8, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet-like CardSnippet for iOS.", v9, 2u);
    MEMORY[0x230F85DE0](v9, -1, -1);
  }

  uint64_t v10 = v1[11];
  outlined init with copy of AppUtil((uint64_t)v1, (uint64_t)v19);
  uint64_t v18 = v10;
  v19[5] = 0;
  type metadata accessor for ContactAttribute();
  swift_retain();
  id v11 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1(v1 + 5, v1[8]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v17[5] = Locale.identifier.getter();
  v17[6] = v12;
  v17[3] = 45;
  v17[4] = 0xE100000000000000;
  v17[1] = 95;
  v17[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  uint64_t v14 = v13;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)&v18);
  if (!v14) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22D59FB50;
  *(void *)(v15 + 32) = v14;
  uint64_t v18 = v15;
  specialized Array._endMutation()();
  return v18;
}

uint64_t outlined init with copy of AppUtil(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of CompactViews(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ModifyNicknameUnsupportedViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);

  return swift_release();
}

uint64_t initializeWithCopy for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void **)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  id v8 = v6;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for ModifyNicknameUnsupportedViewBuilder(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  long long v4 = (void *)a2[10];
  long long v5 = (void *)a1[10];
  a1[10] = (uint64_t)v4;
  id v6 = v4;

  a1[11] = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifyNicknameUnsupportedViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyNicknameUnsupportedViewBuilder()
{
  return &type metadata for ModifyNicknameUnsupportedViewBuilder;
}

id ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v10 = v9;
  uint64_t v32 = a4;
  uint64_t v33 = a6;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    UUID.init()();
    a2 = UUID.uuidString.getter();
    a3 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  id v22 = objc_allocWithZone(v10);
  uint64_t v23 = static String.EMPTY.getter();
  unint64_t v24 = (void *)MEMORY[0x230F84F70](v23);
  swift_bridgeObjectRelease();
  id v25 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(a2, a3, (uint64_t)v24, v22);

  id v26 = v25;
  objc_msgSend(v26, sel_setContactAttributeType_, a1);
  if (a5)
  {
    uint64_t v27 = (void *)MEMORY[0x230F84F70](v32, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = 0;
  }
  objc_msgSend(v26, sel_setHandleLabel_, v27, v32);

  if (a7)
  {
    os_log_type_t v28 = (void *)MEMORY[0x230F84F70](v33, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v28 = 0;
  }
  objc_msgSend(v26, sel_setHandleValue_, v28);

  objc_msgSend(v26, sel_setAgeDateTime_, a8);
  id v29 = v26;
  if (a9)
  {
    type metadata accessor for PostalAddress();
    id v30 = a9;
    id v29 = PostalAddress.__allocating_init(labeledAddress:)(v30);
    objc_msgSend(v26, sel_setPostalAddress_, v29);
  }
  return v26;
}

id PostalAddress.__allocating_init(labeledAddress:)(void *a1)
{
  unint64_t v2 = v1;
  id v4 = objc_allocWithZone(v2);
  id v5 = objc_msgSend(a1, sel_identifier);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = CNLabeledValue<>.formattedString.getter();
  uint64_t v10 = (void *)MEMORY[0x230F84F70](v9);
  swift_bridgeObjectRelease();
  id v11 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v6, v8, (uint64_t)v10, v4);

  id v12 = v11;
  id v13 = objc_msgSend(a1, sel_label);
  objc_msgSend(v12, sel_setHandleLabel_, v13);

  id v14 = OUTLINED_FUNCTION_2_9();
  id v15 = objc_msgSend(v14, sel_street);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v16, v17, v18, (SEL *)&selRef_setStreet_);
  id v19 = OUTLINED_FUNCTION_2_9();
  id v20 = objc_msgSend(v19, sel_subLocality);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v21, v22, v23, (SEL *)&selRef_setSubLocality_);
  id v24 = OUTLINED_FUNCTION_2_9();
  id v25 = objc_msgSend(v24, sel_city);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v26, v27, v28, (SEL *)&selRef_setCity_);
  id v29 = OUTLINED_FUNCTION_2_9();
  id v30 = objc_msgSend(v29, sel_subAdministrativeArea);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v31, v32, v33, (SEL *)&selRef_setSubAdministrativeArea_);
  id v34 = OUTLINED_FUNCTION_2_9();
  id v35 = objc_msgSend(v34, sel_state);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v36, v37, v38, (SEL *)&selRef_setState_);
  id v39 = OUTLINED_FUNCTION_2_9();
  id v40 = objc_msgSend(v39, sel_postalCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v41, v42, v43, (SEL *)&selRef_setPostalCode_);
  id v44 = OUTLINED_FUNCTION_2_9();
  id v45 = objc_msgSend(v44, sel_country);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v46, v47, v48, (SEL *)&selRef_setCountry_);
  id v49 = OUTLINED_FUNCTION_2_9();
  id v50 = objc_msgSend(v49, sel_ISOCountryCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_4(v51, v52, v53, (SEL *)&selRef_setIsoCountryCode_);

  return v12;
}

uint64_t ContactAttribute.getINPersonHandleLabel.getter()
{
  uint64_t v1 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = MEMORY[0x230F84F70](v1);
  swift_bridgeObjectRelease();
  return v3;
}

void outlined bridged method (mbnn) of @objc PostalAddress.street.setter(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = (id)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

void OUTLINED_FUNCTION_0_4(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v5, v6, v4, a4);
}

void OUTLINED_FUNCTION_1_6()
{
}

id OUTLINED_FUNCTION_2_9()
{
  return [v0 (SEL)(v1 + 3992)];
}

uint64_t dispatch thunk of ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)()
{
  OUTLINED_FUNCTION_4();
  *(unsigned char *)(v1 + 176) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  *(void *)(v1 + 48) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v1 + 56) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(void *)(v1 + 64) = swift_task_alloc();
  *(void *)(v1 + 72) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  *(void *)(v1 + 80) = v6;
  *(void *)(v1 + 88) = *(void *)(v6 - 8);
  *(void *)(v1 + 96) = swift_task_alloc();
  *(void *)(v1 + 104) = swift_task_alloc();
  *(void *)(v1 + 112) = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  uint64_t v1 = DeviceState.toSiriKitDeviceState.getter();
  *(void *)(v0 + 120) = v1;
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *char v2 = v0;
  v2[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
  uint64_t v3 = *(void *)(v0 + 112);
  return ContactsCommonCATs.meCardSetup(device:)(v3, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  type metadata accessor for ModifyContactAttributeCATs();
  if (swift_dynamicCastClass())
  {
    uint64_t v1 = *(void *)(v0 + 56);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    char v2 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
    return ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v5;
    *uint64_t v5 = v0;
    v5[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(unsigned char *)(v0 + 176);
    return ContactsCommonCATs.unsupportedMissingMeCard(isMe:)(v6, v7);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 152) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_27_0();
  char v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[6];
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v6, v3);
  uint64_t v8 = OUTLINED_FUNCTION_2_10();
  v9(v8);
  uint64_t v10 = OUTLINED_FUNCTION_9_6();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v10);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v5, v7);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for TemplatingResult?);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(v2, v3);
  v11(v1, v3);
  OUTLINED_FUNCTION_10_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = v10[14];
  uint64_t v13 = v10[11];
  uint64_t v12 = v10[12];
  uint64_t v14 = v10[10];
  uint64_t v15 = v10[8];
  uint64_t v16 = v10[6];
  uint64_t v17 = OUTLINED_FUNCTION_2_10();
  v18(v17);
  uint64_t v19 = OUTLINED_FUNCTION_9_6();
  __swift_storeEnumTagSinglePayload(v16, 1, 1, v19);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v15, v16);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v15, &demangling cache variable for type metadata for TemplatingResult?);
  id v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v20(v12, v14);
  v20(v11, v14);
  OUTLINED_FUNCTION_10_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_11();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  swift_release();
  OUTLINED_FUNCTION_1_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_10();
  v11(v10);
  OUTLINED_FUNCTION_1_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_10();
  v11(v10);
  OUTLINED_FUNCTION_1_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_10()
{
  return *(void *)(v0 + 112);
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return type metadata accessor for BehaviorAfterSpeaking();
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return swift_task_dealloc();
}

uint64_t CNContact.toDialogPerson(useConversationalName:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  type metadata accessor for DialogPerson.Builder();
  swift_allocObject();
  DialogPerson.Builder.init()();
  id v7 = objc_msgSend(v0, sel_organizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  SpeakableString.init(print:speak:)();
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11();
  dispatch thunk of DialogPerson.Builder.withCompany(_:)();
  swift_release();
  OUTLINED_FUNCTION_9_7();
  id v8 = objc_msgSend(v0, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_11_6();
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  OUTLINED_FUNCTION_9_7();
  id v9 = objc_msgSend(v1, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_2_11();
  dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
  swift_release();
  OUTLINED_FUNCTION_9_7();
  id v10 = objc_msgSend(v1, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_11_6();
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  OUTLINED_FUNCTION_9_7();
  id v11 = objc_msgSend(v1, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_2_11();
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  swift_release();
  OUTLINED_FUNCTION_9_7();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  id v12 = objc_msgSend(v1, sel_termsOfAddress);
  type metadata accessor for NSTermOfAddress();
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_17;
    }
  }
  else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
  if ((v13 & 0xC000000000000001) != 0) {
    id v14 = (id)MEMORY[0x230F854E0](0, v13);
  }
  else {
    id v14 = *(id *)(v13 + 32);
  }
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v16 = outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(v15);
  if (!v16)
  {

    goto LABEL_18;
  }
  unint64_t v17 = v16;
  if (v16 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:

    goto LABEL_17;
  }
LABEL_8:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v17 & 0xC000000000000001) == 0, v17);
  if ((v17 & 0xC000000000000001) != 0) {
    id v18 = (id)MEMORY[0x230F854E0](0, v17);
  }
  else {
    id v18 = *(id *)(v17 + 32);
  }
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v19, sel_pronoun);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for DialogPronoun.Builder();
  swift_allocObject();
  DialogPronoun.Builder.init()();
  SpeakableString.init(print:speak:)();
  OUTLINED_FUNCTION_2_11();
  dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)();
  swift_release();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of DialogPronoun.Builder.build()();
  dispatch thunk of DialogPerson.Builder.withPronoun(_:)();

  swift_release();
  swift_release();
  swift_release();
LABEL_18:
  uint64_t v22 = dispatch thunk of DialogPerson.Builder.build()();
  swift_release();
  return v22;
}

uint64_t CNContact.timezonedBirthdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_11_3();
  uint64_t v6 = v4 - v5;
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v15 - v8;
  CNContact.timezonedBirthday.getter((uint64_t)&v15 - v8);
  uint64_t v10 = type metadata accessor for DateComponents();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v9, &demangling cache variable for type metadata for DateComponents?);
  if (EnumTagSinglePayload != 1)
  {
    CNContact.timezonedBirthday.getter(v6);
    OUTLINED_FUNCTION_12_5(v6);
    if (!v12)
    {
      DateComponents.date.getter();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
    }
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for DateComponents?);
  }
  uint64_t v13 = type metadata accessor for Date();
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v13);
}

uint64_t CNContact.timezonedBirthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_5_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_11_3();
  uint64_t v11 = v9 - v10;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v31 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v31 - v16;
  id v18 = objc_msgSend(v3, sel_birthday);
  if (v18)
  {
    uint64_t v19 = v18;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = type metadata accessor for DateComponents();
    uint64_t v21 = v11;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v20 = type metadata accessor for DateComponents();
    uint64_t v21 = v11;
    uint64_t v22 = 1;
  }
  OUTLINED_FUNCTION_10_8(v21, v22);
  outlined init with take of DateComponents?(v11, (uint64_t)v15);
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_12_5((uint64_t)v15);
  if (v27)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_10_8((uint64_t)v17, 1);
LABEL_9:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v17, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v28 = a1;
    uint64_t v29 = 1;
    return OUTLINED_FUNCTION_10_8(v28, v29);
  }
  OUTLINED_FUNCTION_0_5();
  uint64_t v24 = v23;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v17, v15, v20);
  static TimeZone.current.getter();
  uint64_t v26 = type metadata accessor for TimeZone();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v26);
  DateComponents.timeZone.setter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v20);
  OUTLINED_FUNCTION_10_8((uint64_t)v17, 0);
  OUTLINED_FUNCTION_12_5((uint64_t)v17);
  if (v27) {
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v17, v20);
  uint64_t v28 = a1;
  uint64_t v29 = 0;
  return OUTLINED_FUNCTION_10_8(v28, v29);
}

id CNContact.init(from:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v4 = outlined bridged method (pb) of @objc Contact.givenName.getter(a1);
  if (v5)
  {
    MEMORY[0x230F84F70](v4);
    OUTLINED_FUNCTION_5_8();
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v6 = (void *)MEMORY[0x230F84F70](0x6D614E6E65766967, 0xE900000000000065);
  objc_msgSend(v3, sel_setValue_forKeyPath_, v1, v6);

  swift_unknownObjectRelease();
  id v7 = v3;
  uint64_t v8 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_nickName);
  if (v9)
  {
    uint64_t v6 = v9;
    MEMORY[0x230F84F70](v8);
    OUTLINED_FUNCTION_5_8();
  }
  uint64_t v10 = MEMORY[0x230F84F70](0x656D616E6B63696ELL, 0xE800000000000000);
  OUTLINED_FUNCTION_1_8(v10);

  swift_unknownObjectRelease();
  id v11 = v7;
  uint64_t v12 = outlined bridged method (pb) of @objc Contact.middleName.getter(a1);
  if (v13)
  {
    uint64_t v6 = v13;
    MEMORY[0x230F84F70](v12);
    OUTLINED_FUNCTION_5_8();
  }
  uint64_t v14 = MEMORY[0x230F84F70](0x614E656C6464696DLL, 0xEA0000000000656DLL);
  OUTLINED_FUNCTION_1_8(v14);

  swift_unknownObjectRelease();
  id v15 = v11;
  uint64_t v16 = outlined bridged method (pb) of @objc Contact.familyName.getter(a1);
  if (v17)
  {
    uint64_t v6 = v17;
    MEMORY[0x230F84F70](v16);
    OUTLINED_FUNCTION_5_8();
  }
  uint64_t v18 = MEMORY[0x230F84F70](0x614E796C696D6166, 0xEA0000000000656DLL);
  OUTLINED_FUNCTION_1_8(v18);

  swift_unknownObjectRelease();
  id v19 = v15;
  uint64_t v20 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_namePrefix);
  if (v21)
  {
    uint64_t v6 = v21;
    MEMORY[0x230F84F70](v20);
    OUTLINED_FUNCTION_5_8();
  }
  uint64_t v22 = MEMORY[0x230F84F70](0x66657250656D616ELL, 0xEA00000000007869);
  OUTLINED_FUNCTION_1_8(v22);

  swift_unknownObjectRelease();
  id v23 = v19;
  uint64_t v24 = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_nameSuffix);
  if (v25)
  {
    uint64_t v6 = v25;
    MEMORY[0x230F84F70](v24);
    OUTLINED_FUNCTION_5_8();
  }
  uint64_t v26 = MEMORY[0x230F84F70](0x66667553656D616ELL, 0xEA00000000007869);
  OUTLINED_FUNCTION_1_8(v26);
  swift_unknownObjectRelease();

  return v23;
}

uint64_t CNContact.requestedName(_:)(uint64_t a1)
{
  switch(a1)
  {
    case 6:
      id v2 = objc_msgSend(v1, sel_nickname);
      goto LABEL_7;
    case 8:
      id v2 = objc_msgSend(v1, sel_familyName);
      goto LABEL_7;
    case 7:
      id v2 = objc_msgSend(v1, sel_givenName);
LABEL_7:
      id v3 = v2;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v4;
  }
  return CNContact.formattedFullName.getter();
}

uint64_t CNContact.formattedBirthdateString.getter()
{
  uint64_t v2 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v10 = OUTLINED_FUNCTION_10_0(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_11_3();
  uint64_t v13 = v11 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v18 = OUTLINED_FUNCTION_10_0(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_15();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_5();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_5_0();
  CNContact.timezonedBirthdate.getter(v21);
  if (__swift_getEnumTagSinglePayload(v21, 1, v22) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v1, v21, v22);
    id v27 = objc_msgSend(v0, sel_birthday);
    if (v27)
    {
      uint64_t v28 = v27;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = type metadata accessor for DateComponents();
      uint64_t v30 = v13;
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v29 = type metadata accessor for DateComponents();
      uint64_t v30 = v13;
      uint64_t v31 = 1;
    }
    __swift_storeEnumTagSinglePayload(v30, v31, 1, v29);
    outlined init with take of DateComponents?(v13, (uint64_t)v16);
    type metadata accessor for DateComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v29) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for DateComponents?);
    }
    else
    {
      DateComponents.year.getter();
      char v33 = v32;
      (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v16, v29);
      if ((v33 & 1) == 0)
      {
        id v34 = self;
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v36 = objc_msgSend(v34, sel_localizedStringFromDate_dateStyle_timeStyle_, isa, 3, 0);

        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_11:

        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v22);
        return v26;
      }
    }
    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
    uint64_t v38 = self;
    id v39 = (void *)MEMORY[0x230F84F70](0x644D4D4D4DLL, 0xE500000000000000);
    static Locale.current.getter();
    Class v40 = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
    id v41 = objc_msgSend(v38, sel_dateFormatFromTemplate_options_locale_, v39, 0, v40);

    objc_msgSend(v37, sel_setDateFormat_, v41);
    Class v42 = Date._bridgeToObjectiveC()().super.isa;
    id v36 = objc_msgSend(v37, sel_stringFromDate_, v42);

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_11;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v21, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return static String.EMPTY.getter();
}

uint64_t outlined bridged method (pb) of @objc Contact.namePrefix.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_namePrefix);
}

uint64_t outlined bridged method (pb) of @objc Contact.nameSuffix.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_nameSuffix);
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSTermOfAddress()
{
  unint64_t result = lazy cache variable for type metadata for NSTermOfAddress;
  if (!lazy cache variable for type metadata for NSTermOfAddress)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTermOfAddress);
  }
  return result;
}

id OUTLINED_FUNCTION_1_8(uint64_t a1)
{
  return objc_msgSend(v1, (SEL)(v3 + 2123), v2, a1);
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_7()
{
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_10_8(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_5(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for SiriKitIntentHandler();
  v0[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[5] = v4;
  v0[6] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  id v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22D49E000, v2, v3, "#ModifyContactAttributeHandleIntentStrategy makeIntentExecutionBehavior", v4, 2u);
    MEMORY[0x230F85DE0](v4, -1, -1);
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v9 = (void *)v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  swift_allocObject();
  swift_retain();
  uint64_t v11 = ContactResolver.init()();
  uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for ModifyContactAttributeIntent();
  uint64_t v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  uint64_t v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[32] = v2;
  v1[33] = v0;
  v1[31] = v3;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v1[34] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[35] = v5;
  v1[36] = OUTLINED_FUNCTION_31();
  v1[37] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  v1[38] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[39] = v7;
  v1[40] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v8);
  v1[41] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[42] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[43] = v10;
  v1[44] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for ContactsSnippetPluginModel();
  v1[45] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[46] = v12;
  v1[47] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v13);
  v1[48] = OUTLINED_FUNCTION_2_1();
  uint64_t v14 = type metadata accessor for ContactsSnippetFlowState();
  v1[49] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[50] = v15;
  v1[51] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_10_0(v16);
  v1[52] = OUTLINED_FUNCTION_2_1();
  uint64_t v17 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v1[53] = v17;
  OUTLINED_FUNCTION_1(v17);
  v1[54] = v18;
  v1[55] = OUTLINED_FUNCTION_31();
  v1[56] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Signpost.OpenSignpost();
  v1[57] = v19;
  OUTLINED_FUNCTION_10_0(v19);
  v1[58] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = type metadata accessor for Locale();
  v1[59] = v20;
  OUTLINED_FUNCTION_10_0(v20);
  v1[60] = OUTLINED_FUNCTION_2_1();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v21);
  v1[61] = OUTLINED_FUNCTION_31();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[76] = swift_task_alloc();
  v1[77] = swift_task_alloc();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_10_0(v22);
  v1[78] = OUTLINED_FUNCTION_31();
  v1[79] = swift_task_alloc();
  uint64_t v23 = type metadata accessor for SpeakableString();
  v1[80] = v23;
  OUTLINED_FUNCTION_1(v23);
  v1[81] = v24;
  v1[82] = OUTLINED_FUNCTION_31();
  v1[83] = swift_task_alloc();
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  v1[86] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v25, v26, v27);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = *(void **)(v1 + 728);
  uint64_t v3 = *(void **)(v1 + 720);
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_26_3();
  v6();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[81];
  uint64_t v4 = v0[80];
  uint64_t v5 = v0[74];
  uint64_t v6 = v0[73];
  uint64_t v7 = v0[33];
  OUTLINED_FUNCTION_26_2();
  type metadata accessor for ModifyContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  v0[94] = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v5, v2, v4);
  OUTLINED_FUNCTION_24_1(v5);
  v8(v6, v1, v4);
  OUTLINED_FUNCTION_24_1(v6);
  OUTLINED_FUNCTION_38_2((void *)(v7 + 16));
  DeviceState.isVox.getter();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[95] = v9;
  *uint64_t v9 = v0;
  v9[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  OUTLINED_FUNCTION_12_6();
  return ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[96] = v5;
  v3[97] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[74];
    uint64_t v7 = v3[73];
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v3[74];
    uint64_t v9 = v3[73];
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (*v6)(void);
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = *(void **)(v1 + 816);
  uint64_t v3 = *(void **)(v1 + 808);
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_31_2();
  v6();
  OUTLINED_FUNCTION_23_3();
  v7();
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_12_6();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = v0[86];
  uint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  uint64_t v3 = v0[71];
  uint64_t v4 = v0[69];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_26_2();
  type metadata accessor for ModifyContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  v0[105] = CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_16_3(v3);
  dispatch thunk of DialogPerson.fullName.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v7, v2);
  OUTLINED_FUNCTION_16_3(v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[106] = v5;
  *uint64_t v5 = v0;
  v5[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[107] = v5;
  v3[108] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[71];
    uint64_t v7 = v3[70];
    uint64_t v8 = v3[69];
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v3[71];
    uint64_t v10 = v3[70];
    uint64_t v11 = v3[69];
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, &demangling cache variable for type metadata for SpeakableString?);
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 160;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  v3[114] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[66];
    uint64_t v8 = v3[65];
    swift_bridgeObjectRelease();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    uint64_t v7 = v3[66];
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3[65], &demangling cache variable for type metadata for SpeakableString?);
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  v3[117] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = v3 + 61;
    uint64_t v7 = v3[61];
    uint64_t v8 = v9[1];
    swift_bridgeObjectRelease();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    uint64_t v8 = v3[62];
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3[61], &demangling cache variable for type metadata for SpeakableString?);
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,id a34,id a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_28_4();
  uint64_t v43 = (void *)v42[33];
  uint64_t v44 = v43[10];
  uint64_t v45 = v43[11];
  __swift_project_boxed_opaque_existential_1(v43 + 7, v44);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
  v42[87] = v46;
  if (!v46)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v73 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v226 = v73;
    swift_willThrow();
LABEL_40:
    OUTLINED_FUNCTION_0_6();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_4_11();
    return v132(v131, v132, v133, v134, v135, v136, v137, v138, a9, v226, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42);
  }
  uint64_t v47 = (void *)v46;
  uint64_t v48 = (void *)IntentResolutionRecord.intent.getter();
  id v49 = objc_msgSend(v48, sel_modifyOperation);

  ModifyOperation.stringify.getter((unint64_t)v49);
  uint64_t v50 = OUTLINED_FUNCTION_26_2();
  uint64_t v51 = &off_2649B0000;
  if (specialized ContactsStrategy.isSmartEnabled.getter(v50))
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v52 = MEMORY[0x263F8EE78];
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.siriContacts);
    id v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      id v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v56 = 0;
      _os_log_impl(&dword_22D49E000, v54, v55, "#ModifyContactAttributeHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet", v56, 2u);
      MEMORY[0x230F85DE0](v56, -1, -1);
    }

    v42[30] = v52;
    uint64_t v57 = (void *)IntentResolutionRecord.intent.getter();
    id v58 = objc_msgSend(v57, sel_contactAttributeToModify);

    if (v58 == (id)6)
    {
      uint64_t v94 = v42[60];
      os_log_type_t v95 = (void *)v42[33];
      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(v95 + 2, v95[5]);
      id v96 = v47;
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v97 = (void *)v95[15];
      id v98 = v97;
      v42[98] = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v96, 0, v94, (uint64_t)v97);
      DialogPerson.nickname.getter();
      uint64_t v99 = (void *)IntentResolutionRecord.intent.getter();
      uint64_t v100 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v99);
      if (!v101) {
        uint64_t v100 = static String.EMPTY.getter();
      }
      uint64_t v102 = v100;
      uint64_t v103 = v101;
      v42[100] = v101;
      v42[99] = v100;
      uint64_t v105 = v42[54];
      uint64_t v104 = (uint64_t *)v42[55];
      uint64_t v106 = v42[53];
      uint64_t v107 = v42[50];
      uint64_t v230 = v42[49];
      uint64_t v233 = v42[51];
      v42[101] = IntentResolutionRecord.intent.getter();
      v42[102] = IntentResolutionRecord.intentResponse.getter();
      *uint64_t v104 = v102;
      v104[1] = v103;
      (*(void (**)(uint64_t *, void, uint64_t))(v105 + 104))(v104, *MEMORY[0x263F6CF28], v106);
      (*(void (**)(uint64_t, void, uint64_t))(v107 + 104))(v233, *MEMORY[0x263F6CDC0], v230);
      type metadata accessor for ContactsLabelCATsModern();
      swift_bridgeObjectRetain();
      static CATOption.defaultMode.getter();
      v42[103] = CATWrapperSimple.__allocating_init(options:globals:)();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      v42[104] = (uint64_t)v108;
      *uint64_t v108 = v109;
      v108[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      goto LABEL_75;
    }
    if (v58 == (id)10)
    {
      uint64_t v59 = v42[32];
      __swift_storeEnumTagSinglePayload(v42[77], 1, 1, v42[80]);
      uint64_t v60 = (void *)IntentResolutionRecord.intent.getter();
      uint64_t v61 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v60);
      if (!v61) {
        goto LABEL_14;
      }
      OUTLINED_FUNCTION_30_2(v61);
      id v62 = v52 ? (id)MEMORY[0x230F854E0](0, v59) : *(id *)(v59 + 32);
      char v63 = v62;
      swift_bridgeObjectRelease();
      uint64_t v64 = outlined bridged method (ob) of @objc INObject.identifier.getter(v63);
      if (!v65) {
        goto LABEL_14;
      }
      uint64_t v66 = v64;
      uint64_t v67 = v65;
      uint64_t v68 = v43[10];
      uint64_t v69 = v43[11];
      __swift_project_boxed_opaque_existential_1(v43 + 7, v68);
      v214 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 8))(v66, v67, v68, v69);
      swift_bridgeObjectRelease();
      if (v214)
      {
        v151 = v42 + 76;
        uint64_t v237 = v42[77];
        uint64_t v215 = v42[60];
        v216 = (void *)v42[33];
        type metadata accessor for DialogPerson();
        __swift_project_boxed_opaque_existential_1(v216 + 2, v216[5]);
        id v217 = v214;
        uint64_t v51 = &off_2649B0000;
        dispatch thunk of DeviceState.siriLocale.getter();
        v218 = (void *)v216[15];
        id v219 = v218;
        DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v217, 0, v215, (uint64_t)v218);
        dispatch thunk of DialogPerson.fullName.getter();
        swift_release();

        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v237, &demangling cache variable for type metadata for SpeakableString?);
      }
      else
      {
LABEL_14:
        uint64_t v70 = (void *)OUTLINED_FUNCTION_35_3();
        id v71 = objc_msgSend(v70, sel_updatedRelationship);

        if (!v71 || (outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v71), !v72))
        {
          static String.EMPTY.getter();
          swift_bridgeObjectRelease();
        }
        uint64_t v150 = v42[77];
        v151 = v42 + 75;
        uint64_t v152 = v42[75];
        OUTLINED_FUNCTION_26_2();
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v150, &demangling cache variable for type metadata for SpeakableString?);
        OUTLINED_FUNCTION_24_1(v152);
      }
      outlined init with take of SpeakableString?(*v151, v42[77]);
      v153 = (void *)IntentResolutionRecord.intentResponse.getter();
      id v154 = [v153 (SEL)v51[136]];

      if (v154 && (uint64_t v155 = outlined bridged method (ob) of @objc ContactRelation.relationship.getter(v154), v156))
      {
        uint64_t v157 = v155;
        uint64_t v158 = v156;
      }
      else
      {
        uint64_t v157 = static String.EMPTY.getter();
        uint64_t v158 = v159;
        swift_bridgeObjectRelease();
      }
      v42[89] = v158;
      v42[88] = v157;
      if (one-time initialization token for contactsLog != -1) {
        swift_once();
      }
      uint64_t v160 = v42[57];
      uint64_t v161 = v42[58];
      id v162 = (id)static Signpost.contactsLog;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      uint64_t v163 = v161 + *(int *)(v160 + 20);
      *(void *)uint64_t v163 = "RelationshipLabelValueForKey";
      *(void *)(v163 + 8) = 28;
      *(unsigned char *)(v163 + 16) = 2;
      if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v164 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
      swift_bridgeObjectRetain();
      uint64_t v165 = specialized Dictionary.subscript.getter(v157, v158, v164);
      uint64_t v167 = v166;
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (v167)
      {
        uint64_t v157 = v165;
        uint64_t v158 = v167;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      uint64_t v196 = v42[58];
      v197 = (uint64_t *)v42[56];
      uint64_t v198 = v42[54];
      uint64_t v199 = v42[52];
      uint64_t v200 = v42[50];
      uint64_t v229 = v42[53];
      uint64_t v232 = v42[49];
      uint64_t v235 = v42[51];
      uint64_t v201 = v42[33];
      uint64_t v227 = v42[59];
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v196);
      v202 = self;
      v203 = (void *)MEMORY[0x230F84F70](v157, v158);
      swift_bridgeObjectRelease();
      id v204 = objc_msgSend(v202, sel_localizedStringForLabel_, v203);

      uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v207 = v206;

      v42[28] = v205;
      v42[29] = v207;
      __swift_project_boxed_opaque_existential_1((void *)(v201 + 16), *(void *)(v201 + 40));
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_storeEnumTagSinglePayload(v199, 0, 1, v227);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v208 = StringProtocol.capitalized(with:)();
      uint64_t v210 = v209;
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v199, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      uint64_t *v197 = v208;
      v197[1] = v210;
      (*(void (**)(uint64_t *, void, uint64_t))(v198 + 104))(v197, *MEMORY[0x263F6CF20], v229);
      v42[90] = IntentResolutionRecord.intent.getter();
      v42[91] = IntentResolutionRecord.intentResponse.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v200 + 104))(v235, *MEMORY[0x263F6CDC0], v232);
      type metadata accessor for ContactsLabelCATsModern();
      static CATOption.defaultMode.getter();
      v42[92] = CATWrapperSimple.__allocating_init(options:globals:)();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      v42[93] = (uint64_t)v211;
      void *v211 = v212;
      v211[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
LABEL_75:
      OUTLINED_FUNCTION_4_11();
      return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)();
    }
    uint64_t v110 = v42[86];
    uint64_t v111 = v42[81];
    uint64_t v112 = v42[80];
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v113 = OUTLINED_FUNCTION_4_1();
    swift_storeEnumTagMultiPayload();
    uint64_t v226 = v113;
    swift_willThrow();

    goto LABEL_39;
  }
  a33 = v43;
  a37 = v43 + 7;
  uint64_t v74 = (void *)IntentResolutionRecord.intent.getter();
  a35 = objc_msgSend(v74, (SEL)&selRef_contactHandleAlternatives + 6);

  os_log_type_t v75 = (void *)IntentResolutionRecord.intent.getter();
  a34 = objc_msgSend(v75, (SEL)&dword_2649B0030 + 2);

  uint64_t v76 = (void *)IntentResolutionRecord.intentResponse.getter();
  id v77 = objc_msgSend(v76, sel_updatedRelationship);

  if (v77)
  {
    uint64_t v78 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v77);
    uint64_t v80 = v79;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v80 = 0;
  }
  uint64_t v81 = (void *)OUTLINED_FUNCTION_35_3();
  id v82 = objc_msgSend(v81, sel_updatedRelationship);

  if (v82)
  {
    id v82 = (id)outlined bridged method (ob) of @objc ContactRelation.relationship.getter(v82);
    uint64_t v84 = v83;
  }
  else
  {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v42[33];
  a36 = (void *)(v85 + 16);
  outlined init with copy of DeviceState(v85 + 16, (uint64_t)(v42 + 9));
  uint64_t v86 = *(void *)(v85 + 104);
  v42[17] = (uint64_t)&type metadata for InstalledAppsProvider;
  v42[18] = (uint64_t)&protocol witness table for InstalledAppsProvider;
  v42[2] = (uint64_t)v47;
  v42[3] = (uint64_t)a35;
  v42[4] = (uint64_t)a34;
  v42[5] = v78;
  v42[6] = v80;
  v42[7] = (uint64_t)v82;
  v42[8] = v84;
  v42[19] = v86;
  id v87 = v47;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  v42[112] = v88;
  outlined destroy of ModifyContactAttributeViewBuilder((uint64_t)(v42 + 2));
  uint64_t v89 = (void *)IntentResolutionRecord.intent.getter();
  id v90 = objc_msgSend(v89, sel_contactAttributeToModify);

  if (v90 != (id)6)
  {
    if (v90 != (id)10)
    {
      uint64_t v110 = v42[86];
      uint64_t v111 = v42[81];
      uint64_t v112 = v42[80];
      swift_bridgeObjectRelease();
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      uint64_t v130 = OUTLINED_FUNCTION_4_1();
      swift_storeEnumTagMultiPayload();
      uint64_t v226 = v130;
      swift_willThrow();

LABEL_39:
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
      goto LABEL_40;
    }
    uint64_t v91 = (void *)OUTLINED_FUNCTION_35_3();
    id v92 = objc_msgSend(v91, sel_updatedRelationship);

    if (!v92 || (outlined bridged method (ob) of @objc ContactRelation.relationship.getter(v92), !v93))
    {
      static String.EMPTY.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v139 = v42[80];
    uint64_t v140 = v42[68];
    uint64_t v142 = v42[39];
    uint64_t v141 = v42[40];
    uint64_t v143 = v42[38];
    uint64_t v144 = v42[32];
    uint64_t v145 = v42[33];
    OUTLINED_FUNCTION_26_2();
    __swift_storeEnumTagSinglePayload(v140, 1, 1, v139);
    OUTLINED_FUNCTION_38_2(a36);
    uint64_t v146 = DeviceState.isVox.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v142 + 16))(v141, v144, v143);
    if (v146)
    {
      OUTLINED_FUNCTION_17_3();
      v147();
      v148 = &off_2649B0000;
      v149 = a33;
    }
    else
    {
      uint64_t v146 = IntentResolutionRecord.intent.getter();
      id v168 = objc_msgSend((id)v146, sel_modifyOperation);

      OUTLINED_FUNCTION_17_3();
      v169();
      BOOL v170 = v168 == (id)3;
      v148 = &off_2649B0000;
      v149 = a33;
      if (!v170)
      {
LABEL_70:
        uint64_t v188 = v42[86];
        uint64_t v189 = v42[80];
        uint64_t v190 = v42[66];
        uint64_t v191 = v42[65];
        v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42[81] + 16);
        v192(v190, v42[83], v189);
        OUTLINED_FUNCTION_25_4(v190);
        v192(v191, v188, v189);
        OUTLINED_FUNCTION_25_4(v191);
        OUTLINED_FUNCTION_38_2(a36);
        DeviceState.isVox.getter();
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        v42[113] = (uint64_t)v193;
        void *v193 = v194;
        v193[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
        OUTLINED_FUNCTION_4_11();
        return ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)();
      }
    }
    uint64_t v171 = v42[32];
    v172 = (void *)IntentResolutionRecord.intent.getter();
    uint64_t v173 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v172);
    if (!v173) {
      goto LABEL_65;
    }
    OUTLINED_FUNCTION_30_2(v173);
    id v174 = v146 ? (id)MEMORY[0x230F854E0](0, v171) : *(id *)(v171 + 32);
    v175 = v174;
    swift_bridgeObjectRelease();
    uint64_t v176 = outlined bridged method (ob) of @objc INObject.identifier.getter(v175);
    if (!v177) {
      goto LABEL_65;
    }
    uint64_t v178 = v176;
    uint64_t v179 = v177;
    uint64_t v180 = v149[10];
    uint64_t v181 = v149[11];
    __swift_project_boxed_opaque_existential_1(a37, v180);
    v220 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 8))(v178, v179, v180, v181);
    swift_bridgeObjectRelease();
    if (v220)
    {
      v186 = v42 + 76;
      uint64_t v238 = v42[68];
      uint64_t v221 = v42[60];
      uint64_t v222 = v42[33];
      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(a36, *(void *)(v145 + 40));
      id v223 = v220;
      dispatch thunk of DeviceState.siriLocale.getter();
      v224 = *(void **)(v222 + 120);
      id v225 = v224;
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v223, 0, v221, (uint64_t)v224);
      dispatch thunk of DialogPerson.fullName.getter();
      swift_release();

      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v238, &demangling cache variable for type metadata for SpeakableString?);
    }
    else
    {
LABEL_65:
      v182 = (void *)OUTLINED_FUNCTION_35_3();
      id v183 = [v182 (SEL)v148[136]];

      if (!v183 || (outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v183), !v184))
      {
        static String.EMPTY.getter();
        swift_bridgeObjectRelease();
      }
      uint64_t v185 = v42[68];
      v186 = v42 + 67;
      uint64_t v187 = v42[67];
      OUTLINED_FUNCTION_26_2();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v185, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_25_4(v187);
    }
    outlined init with take of SpeakableString?(*v186, v42[68]);
    goto LABEL_70;
  }
  uint64_t v114 = (void *)IntentResolutionRecord.intent.getter();
  outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v114);
  uint64_t v115 = v87;
  if (!v116) {
    static String.EMPTY.getter();
  }
  uint64_t v236 = v42[86];
  uint64_t v117 = v42[81];
  uint64_t v118 = v42[80];
  uint64_t v228 = v42[82];
  uint64_t v119 = v42[60];
  uint64_t v231 = v42[62];
  uint64_t v234 = v42[61];
  uint64_t v120 = v42[33];
  OUTLINED_FUNCTION_26_2();
  type metadata accessor for DialogPerson();
  __swift_project_boxed_opaque_existential_1(a36, *(void *)(v120 + 40));
  id v121 = v115;
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v122 = *(void **)(v120 + 120);
  id v123 = v122;
  v42[115] = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v121, 0, v119, (uint64_t)v122);
  DialogPerson.nickname.getter();
  dispatch thunk of DialogPerson.fullName.getter();
  uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16);
  v124(v231, v228, v118);
  OUTLINED_FUNCTION_16_3(v231);
  v124(v234, v236, v118);
  OUTLINED_FUNCTION_16_3(v234);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v42[116] = (uint64_t)v125;
  *uint64_t v125 = v126;
  *(void *)(v127 + 8) = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  OUTLINED_FUNCTION_4_11();
  return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)();
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x230F850D0](*(id *)(v12 + 768));
  OUTLINED_FUNCTION_39_2();
  if (v13) {
    OUTLINED_FUNCTION_34_3();
  }
  uint64_t v14 = *(void **)(v12 + 768);
  uint64_t v15 = *(void *)(v12 + 680);
  uint64_t v16 = *(void *)(v12 + 648);
  uint64_t v40 = *(void *)(v12 + 616);
  uint64_t v17 = *(void *)(v12 + 448);
  uint64_t v19 = *(void *)(v12 + 424);
  uint64_t v18 = *(void *)(v12 + 432);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v20 = v16 + 8;
  OUTLINED_FUNCTION_31_2();
  v21();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v40, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = *(uint64_t **)(v12 + 624);
  outlined init with copy of ModifyContactAttributeSnippetModel?(*(void *)(v12 + 632), (uint64_t)v22);
  uint64_t v23 = type metadata accessor for ModifyContactAttributeSnippetModel();
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_6();
    uint64_t v25 = OUTLINED_FUNCTION_37_2();
    v26(v25);
    uint64_t v27 = OUTLINED_FUNCTION_21_3();
    v28(v27);
    static DialogPhase.completion.getter();
    uint64_t v29 = (void *)swift_task_alloc();
    v29[2] = v20;
    v29[3] = v19;
    v29[4] = v14;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    *(void *)(v12 + 872) = ResponseFactory.init()();
    *(void *)(v12 + 184) = v15;
    *(void *)(v12 + 192) = lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
    __swift_allocate_boxed_opaque_existential_1(v22);
    OUTLINED_FUNCTION_27_4();
    v30();
    *(void *)(v12 + 880) = *(void *)(v12 + 240);
    uint64_t v31 = (void *)OUTLINED_FUNCTION_36_2();
    *(void *)(v12 + 888) = v31;
    *uint64_t v31 = v12;
    v31[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_20_5();
    OUTLINED_FUNCTION_12_6();
    return v36(v32, v33, v34, v35, v36, v37, v38, v39, v40, a10, a11, a12);
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  void (*v29)(void);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x230F850D0](*(id *)(v12 + 856));
  OUTLINED_FUNCTION_39_2();
  if (v14) {
    OUTLINED_FUNCTION_34_3();
  }
  uint64_t v15 = *(void **)(v12 + 856);
  uint64_t v16 = *(void *)(v12 + 784);
  uint64_t v17 = *(void *)(v12 + 648);
  uint64_t v18 = *(void *)(v12 + 576);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();

  uint64_t v19 = v17 + 8;
  OUTLINED_FUNCTION_23_3();
  v20();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = *(uint64_t **)(v12 + 624);
  outlined init with copy of ModifyContactAttributeSnippetModel?(*(void *)(v12 + 632), (uint64_t)v21);
  uint64_t v22 = type metadata accessor for ModifyContactAttributeSnippetModel();
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_6();
    uint64_t v24 = OUTLINED_FUNCTION_37_2();
    v25(v24);
    uint64_t v26 = OUTLINED_FUNCTION_21_3();
    v27(v26);
    static DialogPhase.completion.getter();
    uint64_t v28 = (void *)swift_task_alloc();
    v28[2] = v13;
    v28[3] = v19;
    v28[4] = v15;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    *(void *)(v12 + 872) = ResponseFactory.init()();
    *(void *)(v12 + 184) = v16;
    *(void *)(v12 + 192) = lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
    __swift_allocate_boxed_opaque_existential_1(v21);
    OUTLINED_FUNCTION_27_4();
    v29();
    *(void *)(v12 + 880) = *(void *)(v12 + 240);
    uint64_t v30 = (void *)OUTLINED_FUNCTION_36_2();
    *(void *)(v12 + 888) = v30;
    *uint64_t v30 = v12;
    v30[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_20_5();
    OUTLINED_FUNCTION_12_6();
    return v35(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12);
  }
  return result;
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  OUTLINED_FUNCTION_32_3();
  uint64_t v41 = *(void *)(v40 + 632);
  uint64_t v56 = *(void *)(v40 + 376);
  uint64_t v42 = *(void *)(v40 + 352);
  uint64_t v44 = *(void *)(v40 + 336);
  uint64_t v43 = *(void *)(v40 + 344);

  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v41, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_23_3();
  v45();
  OUTLINED_FUNCTION_31_2();
  v46();
  OUTLINED_FUNCTION_1_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_29_2();
  return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           v56,
           a37,
           a38,
           a39,
           a40);
}

{
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  uint64_t (*v52)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_32_3();
  uint64_t v41 = v40[112];
  uint64_t v42 = (void *)v40[87];
  uint64_t v61 = v40[83];
  id v62 = v40[86];
  uint64_t v43 = v40[81];
  uint64_t v60 = v40[68];
  uint64_t v44 = v40[37];
  uint64_t v46 = v40[34];
  uint64_t v45 = v40[35];
  uint64_t v47 = (uint64_t *)v40[31];
  uint64_t v48 = type metadata accessor for AceOutput();
  uint64_t v49 = MEMORY[0x263F6FFF0];
  v47[3] = v48;
  v47[4] = v49;
  __swift_allocate_boxed_opaque_existential_1(v47);
  ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(v44, v41, (uint64_t)v42);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v60, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v50 = *(void (**)(void))(v43 + 8);
  OUTLINED_FUNCTION_26_3();
  v50();
  OUTLINED_FUNCTION_26_3();
  v50();
  OUTLINED_FUNCTION_1_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_29_2();
  return v52(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           v60,
           v61,
           v62,
           a37,
           a38,
           a39,
           a40);
}

{
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  OUTLINED_FUNCTION_32_3();
  uint64_t v41 = v40[112];
  uint64_t v42 = (void *)v40[87];
  id v62 = v40[82];
  char v63 = v40[86];
  uint64_t v43 = v40[81];
  uint64_t v60 = v40[63];
  uint64_t v61 = v40[64];
  uint64_t v45 = v40[35];
  uint64_t v44 = v40[36];
  uint64_t v59 = v40[34];
  uint64_t v46 = (uint64_t *)v40[31];
  uint64_t v47 = type metadata accessor for AceOutput();
  uint64_t v48 = MEMORY[0x263F6FFF0];
  v46[3] = v47;
  v46[4] = v48;
  __swift_allocate_boxed_opaque_existential_1(v46);
  ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(v44, v41, (uint64_t)v42);
  swift_bridgeObjectRelease();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v59);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v60, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v61, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v49 = *(void (**)(void))(v43 + 8);
  OUTLINED_FUNCTION_31_2();
  v49();
  OUTLINED_FUNCTION_31_2();
  v49();
  OUTLINED_FUNCTION_1_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_29_2();
  return v51(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           v59,
           v60,
           v61,
           v62,
           v63,
           a37,
           a38,
           a39,
           a40);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_28_4();
  uint64_t v43 = *(void *)(v42 + 648);
  uint64_t v44 = *(void *)(v42 + 632);
  uint64_t v45 = *(void *)(v42 + 616);

  uint64_t v46 = *(void (**)(void))(v43 + 8);
  OUTLINED_FUNCTION_23_3();
  v46();
  OUTLINED_FUNCTION_31_2();
  v47();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v45, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v44, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_23_3();
  v46();
  uint64_t v57 = *(void *)(v42 + 776);
  OUTLINED_FUNCTION_0_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_4_11();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           v57,
           a39,
           a40,
           a41,
           a42);
}

{
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t (*v49)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;

  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_28_4();
  uint64_t v43 = (void *)v42[87];
  uint64_t v44 = v42[81];
  uint64_t v45 = v42[79];
  uint64_t v46 = v42[72];
  swift_release();

  uint64_t v47 = *(void (**)(void))(v44 + 8);
  OUTLINED_FUNCTION_18_4();
  v47();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v46, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v45, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_18_4();
  v47();
  uint64_t v57 = v42[108];
  OUTLINED_FUNCTION_0_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_4_11();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           v57,
           a39,
           a40,
           a41,
           a42);
}

{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t (*v47)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_28_4();
  uint64_t v43 = *(void *)(v42 + 648);
  uint64_t v44 = *(void *)(v42 + 544);

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v44, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v45 = *(void (**)(void))(v43 + 8);
  OUTLINED_FUNCTION_17_3();
  v45();
  OUTLINED_FUNCTION_17_3();
  v45();
  uint64_t v55 = *(void *)(v42 + 912);
  OUTLINED_FUNCTION_0_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_4_11();
  return v47(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           v55,
           a39,
           a40,
           a41,
           a42);
}

{
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t (*v49)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;

  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_28_4();
  uint64_t v43 = (void *)v42[87];
  uint64_t v44 = v42[81];
  uint64_t v46 = v42[63];
  uint64_t v45 = v42[64];
  swift_release();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v46, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v45, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v47 = *(void (**)(void))(v44 + 8);
  OUTLINED_FUNCTION_18_4();
  v47();
  OUTLINED_FUNCTION_18_4();
  v47();
  uint64_t v57 = v42[117];
  OUTLINED_FUNCTION_0_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_4_11();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           v57,
           a39,
           a40,
           a41,
           a42);
}

uint64_t closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(a3, 0);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(a3, 0);
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t type metadata accessor for ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeHandleIntentStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66378](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66380](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66358](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66370](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66368](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return MEMORY[0x270F66348](a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsUnsupportedFlow;
  return ModifyContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)();
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in ModifyContactAttributeHandleIntentStrategy()
{
  return lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeHandleIntentStrategy);
}

uint64_t outlined destroy of ModifyContactAttributeViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ModifyContactAttributeSnippetModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  return closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  uint64_t v3 = v0[48];
  *(void *)(v1 - 152) = v0[51];
  *(void *)(v1 - 144) = v3;
  uint64_t v4 = v0[44];
  *(void *)(v1 - 136) = v0[47];
  *(void *)(v1 - 128) = v4;
  uint64_t v5 = v0[40];
  *(void *)(v1 - 120) = v0[41];
  *(void *)(v1 - 112) = v5;
  uint64_t v6 = v0[36];
  *(void *)(v1 - 104) = v0[37];
  *(void *)(v1 - 96) = v6;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  uint64_t v3 = v0[48];
  *(void *)(v1 - 144) = v0[51];
  *(void *)(v1 - 136) = v3;
  uint64_t v4 = v0[44];
  *(void *)(v1 - 128) = v0[47];
  *(void *)(v1 - 120) = v4;
  uint64_t v5 = v0[40];
  *(void *)(v1 - 112) = v0[41];
  *(void *)(v1 - 104) = v5;
  uint64_t v6 = v0[36];
  *(void *)(v1 - 96) = v0[37];
  *(void *)(v1 - 88) = v6;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return *(void *)(v0 + 248);
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_25_4(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_30_2(uint64_t a1)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_2(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 248) = v18;
  *(void *)(v9 + 256) = v8;
  *(unsigned char *)(v9 + 505) = a8;
  *(void *)(v9 + 232) = a6;
  *(void *)(v9 + 240) = a7;
  *(unsigned char *)(v9 + 504) = a5;
  *(void *)(v9 + 216) = a3;
  *(void *)(v9 + 224) = a4;
  *(void *)(v9 + 200) = a1;
  *(void *)(v9 + 208) = a2;
  uint64_t v10 = type metadata accessor for SpeakableString();
  *(void *)(v9 + 264) = v10;
  *(void *)(v9 + 272) = *(void *)(v10 - 8);
  *(void *)(v9 + 280) = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v11);
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = swift_task_alloc();
  *(void *)(v9 + 304) = swift_task_alloc();
  *(void *)(v9 + 312) = swift_task_alloc();
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  *(void *)(v9 + 336) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_0(v12);
  *(void *)(v9 + 344) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

#error "22D4D488C: call analysis failed (funcsize=619)"

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  v2[2] = v1;
  v2[3] = v4;
  v2[4] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  OUTLINED_FUNCTION_20_6();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  swift_release();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  v3[8] = v1;
  v3[9] = v5;
  v3[10] = v0;
  OUTLINED_FUNCTION_25_5();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_25_5();
  uint64_t v8 = *(void *)(v2 + 328);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of SpeakableString?(v8);
  }
  else
  {
    outlined destroy of SpeakableString?(v8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  v3[11] = v2;
  v3[12] = v5;
  v3[13] = v1;
  OUTLINED_FUNCTION_31_3();
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_31_3();
  uint64_t v8 = *(void *)(v0 + 320);
  if (v1)
  {
    swift_release();

    outlined destroy of SpeakableString?(v8);
  }
  else
  {
    outlined destroy of SpeakableString?(v8);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  v3[14] = v2;
  v3[15] = v5;
  v3[16] = v1;
  OUTLINED_FUNCTION_31_3();
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_31_3();
  uint64_t v8 = *(void *)(v0 + 312);
  if (v1)
  {
    swift_release();

    outlined destroy of SpeakableString?(v8);
  }
  else
  {
    outlined destroy of SpeakableString?(v8);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  v3[17] = v1;
  v3[18] = v5;
  v3[19] = v0;
  OUTLINED_FUNCTION_25_5();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_25_5();
  uint64_t v8 = *(void *)(v2 + 304);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of SpeakableString?(v8);
  }
  else
  {
    outlined destroy of SpeakableString?(v8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  v3[20] = v1;
  v3[21] = v5;
  v3[22] = v0;
  OUTLINED_FUNCTION_25_5();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_25_5();
  uint64_t v8 = *(void *)(v2 + 288);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of SpeakableString?(v8);
  }
  else
  {
    outlined destroy of SpeakableString?(v8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

#error "22D4D5120: call analysis failed (funcsize=44)"

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_28_5(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, 0xD000000000000028);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_28_5(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, 0xD00000000000002DLL);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_30_3(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, v20);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_28_5(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, 0xD000000000000029);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_29_3(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, v20);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_30_3(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, v20);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_18_5();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v17 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_29_3(v17, v18);
  OUTLINED_FUNCTION_5_9(v19, v20);
  OUTLINED_FUNCTION_1_10();
  swift_release();
  outlined destroy of SpeakableString?(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_4_2();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

#error "22D4D53D4: call analysis failed (funcsize=44)"

#error "22D4D56EC: call analysis failed (funcsize=44)"

#error "22D4D59AC: call analysis failed (funcsize=44)"

#error "22D4D5C74: call analysis failed (funcsize=44)"

#error "22D4D5F84: call analysis failed (funcsize=44)"

#error "22D4D6294: call analysis failed (funcsize=44)"

uint64_t GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 144) = a7;
  *(void *)(v9 + 152) = v8;
  *(unsigned char *)(v9 + 257) = a8;
  *(void *)(v9 + 128) = a4;
  *(void *)(v9 + 136) = a6;
  *(unsigned char *)(v9 + 256) = a5;
  *(void *)(v9 + 112) = a2;
  *(void *)(v9 + 120) = a3;
  *(void *)(v9 + 104) = a1;
  uint64_t v10 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_0(v10);
  *(void *)(v9 + 160) = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v11);
  *(void *)(v9 + 168) = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

#error "22D4D65F8: call analysis failed (funcsize=238)"

uint64_t GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)()
{
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  v2[2] = v1;
  v2[3] = v4;
  v2[4] = v0;
  OUTLINED_FUNCTION_20_6();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_32_4();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_37();
  swift_release();
  outlined destroy of SpeakableString?(*(void *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_12_1();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v1 = OUTLINED_FUNCTION_13_7();
  OUTLINED_FUNCTION_34_4(v1, v2);
  OUTLINED_FUNCTION_17_4(v3, v4);
  OUTLINED_FUNCTION_22_3();
  swift_release();
  outlined destroy of SpeakableString?(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_32_4();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  void *v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  OUTLINED_FUNCTION_20_6();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_32_4();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_37();
  swift_release();
  outlined destroy of SpeakableString?(*(void *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_12_1();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  uint64_t v1 = OUTLINED_FUNCTION_13_7();
  OUTLINED_FUNCTION_34_4(v1, v2);
  OUTLINED_FUNCTION_17_4(v3, v4);
  OUTLINED_FUNCTION_22_3();
  swift_release();
  outlined destroy of SpeakableString?(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_32_4();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  void *v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  v2[8] = v1;
  v2[9] = v4;
  v2[10] = v0;
  OUTLINED_FUNCTION_20_6();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_32_4();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_37();
  swift_release();
  outlined destroy of SpeakableString?(*(void *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_12_1();
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_65();
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  OUTLINED_FUNCTION_13_7();
  OUTLINED_FUNCTION_17_4(v1, 0xD000000000000027);
  OUTLINED_FUNCTION_22_3();
  swift_release();
  outlined destroy of SpeakableString?(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_32_4();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t GetContactAttributeCATsModern.hasSameLabels(matches:alternatives:)(unint64_t a1, unint64_t a2)
{
  if (!a1) {
    goto LABEL_8;
  }
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_4;
    }
LABEL_8:
    if (a2)
    {
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v10) {
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v8) {
          goto LABEL_16;
        }
      }
      if (v8 >= 2)
      {
        unint64_t v5 = swift_bridgeObjectRetain();
        uint64_t v6 = a2;
        goto LABEL_13;
      }
    }
LABEL_16:
    char v9 = 0;
    return v9 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v4 < 2) {
    goto LABEL_16;
  }
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = a1;
LABEL_13:
  char v9 = specialized Sequence.allSatisfy(_:)(v5, v6);
  return v9 & 1;
}

uint64_t GetContactAttributeCATsModern.hasAnyMatchingLabels(matches:alternatives:)(void *a1, void *a2)
{
  if (a1) {
    unint64_t v3 = (unint64_t)a1;
  }
  else {
    unint64_t v3 = MEMORY[0x263F8EE78];
  }
  if (v3 >> 62) {
    goto LABEL_57;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (v4)
    {
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_59;
      }
      for (uint64_t i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0) {
          id v7 = (id)MEMORY[0x230F854E0](i, v3);
        }
        else {
          id v7 = *(id *)(v3 + 8 * i + 32);
        }
        uint64_t v8 = v7;
        outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
        if (v9)
        {
          uint64_t v10 = String.sanitizeCNLabel.getter();
          uint64_t v12 = v11;

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, v5);
            uint64_t v5 = v16;
          }
          unint64_t v14 = *(void *)(v5 + 16);
          unint64_t v13 = *(void *)(v5 + 24);
          if (v14 >= v13 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v5);
            uint64_t v5 = v17;
          }
          *(void *)(v5 + 16) = v14 + 1;
          uint64_t v15 = v5 + 16 * v14;
          *(void *)(v15 + 32) = v10;
          *(void *)(v15 + 40) = v12;
        }
        else
        {
        }
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v18 = *(void *)(v5 + 16);
    if (!v18) {
      break;
    }
    a2 = (void *)MEMORY[0x263F8EE80];
    uint64_t v83 = (void *)MEMORY[0x263F8EE80];
    uint64_t v19 = (uint64_t *)(v5 + 40);
    while (1)
    {
      uint64_t v21 = *(v19 - 1);
      uint64_t v20 = *v19;
      swift_bridgeObjectRetain_n();
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
      uint64_t v24 = a2[2];
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        break;
      }
      char v27 = v22;
      if (a2[3] < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, 1);
        a2 = v83;
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
        if ((v27 & 1) != (v29 & 1)) {
          goto LABEL_81;
        }
        unint64_t v23 = v28;
      }
      if (v27)
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = a2[7];
        uint64_t v30 = *(void *)(v3 + 8 * v23);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v3 + 8 * v23) = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30);
          uint64_t v30 = v40;
          *(void *)(v3 + 8 * v23) = v40;
        }
        unint64_t v33 = *(void *)(v30 + 16);
        unint64_t v32 = *(void *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30);
          uint64_t v30 = v41;
          *(void *)(v3 + 8 * v23) = v41;
        }
        *(void *)(v30 + 16) = v33 + 1;
        uint64_t v34 = v30 + 16 * v33;
        *(void *)(v34 + 32) = v21;
        *(void *)(v34 + 40) = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_22D59FD50;
        *(void *)(v35 + 32) = v21;
        *(void *)(v35 + 40) = v20;
        a2[(v23 >> 6) + 8] |= 1 << v23;
        id v36 = (uint64_t *)(a2[6] + 16 * v23);
        *id v36 = v21;
        v36[1] = v20;
        *(void *)(a2[7] + 8 * v23) = v35;
        uint64_t v37 = a2[2];
        BOOL v38 = __OFADD__(v37, 1);
        uint64_t v39 = v37 + 1;
        if (v38) {
          goto LABEL_56;
        }
        a2[2] = v39;
      }
      v19 += 2;
      if (!--v18) {
        goto LABEL_76;
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  if (a2) {
    unint64_t v3 = (unint64_t)a2;
  }
  else {
    unint64_t v3 = MEMORY[0x263F8EE78];
  }
  if (v3 >> 62)
  {
LABEL_59:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    if (v42) {
      goto LABEL_41;
    }
LABEL_60:
    uint64_t v44 = MEMORY[0x263F8EE78];
    goto LABEL_61;
  }
  uint64_t v42 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v42) {
    goto LABEL_60;
  }
LABEL_41:
  if (v42 < 1) {
    goto LABEL_80;
  }
  uint64_t v43 = 0;
  uint64_t v44 = MEMORY[0x263F8EE78];
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v45 = (id)MEMORY[0x230F854E0](v43, v3);
    }
    else {
      id v45 = *(id *)(v3 + 8 * v43 + 32);
    }
    uint64_t v46 = v45;
    outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v45);
    if (v47)
    {
      uint64_t v48 = String.sanitizeCNLabel.getter();
      uint64_t v50 = v49;

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
        uint64_t v44 = v54;
      }
      unint64_t v52 = *(void *)(v44 + 16);
      unint64_t v51 = *(void *)(v44 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v44);
        uint64_t v44 = v55;
      }
      *(void *)(v44 + 16) = v52 + 1;
      uint64_t v53 = v44 + 16 * v52;
      *(void *)(v53 + 32) = v48;
      *(void *)(v53 + 40) = v50;
    }
    else
    {
    }
    ++v43;
  }
  while (v42 != v43);
LABEL_61:
  swift_bridgeObjectRelease_n();
  uint64_t v56 = *(void *)(v44 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  a2 = (void *)MEMORY[0x263F8EE80];
  uint64_t v84 = (void *)MEMORY[0x263F8EE80];
  uint64_t v57 = (uint64_t *)(v44 + 40);
  while (1)
  {
    uint64_t v59 = *(v57 - 1);
    uint64_t v58 = *v57;
    swift_bridgeObjectRetain_n();
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
    uint64_t v62 = a2[2];
    BOOL v63 = (v60 & 1) == 0;
    uint64_t v64 = v62 + v63;
    if (__OFADD__(v62, v63)) {
      break;
    }
    char v65 = v60;
    if (a2[3] < v64)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v64, 1);
      a2 = v84;
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      if ((v65 & 1) != (v67 & 1)) {
        goto LABEL_81;
      }
      unint64_t v61 = v66;
    }
    if (v65)
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = a2[7];
      uint64_t v69 = *(void *)(v68 + 8 * v61);
      char v70 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v68 + 8 * v61) = v69;
      if ((v70 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v69 + 16) + 1, 1, v69);
        uint64_t v69 = v78;
        *(void *)(v68 + 8 * v61) = v78;
      }
      unint64_t v72 = *(void *)(v69 + 16);
      unint64_t v71 = *(void *)(v69 + 24);
      if (v72 >= v71 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1, v69);
        uint64_t v69 = v79;
        *(void *)(v68 + 8 * v61) = v79;
      }
      *(void *)(v69 + 16) = v72 + 1;
      uint64_t v73 = v69 + 16 * v72;
      *(void *)(v73 + 32) = v59;
      *(void *)(v73 + 40) = v58;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_22D59FD50;
      *(void *)(v74 + 32) = v59;
      *(void *)(v74 + 40) = v58;
      a2[(v61 >> 6) + 8] |= 1 << v61;
      os_log_type_t v75 = (uint64_t *)(a2[6] + 16 * v61);
      *os_log_type_t v75 = v59;
      v75[1] = v58;
      *(void *)(a2[7] + 8 * v61) = v74;
      uint64_t v76 = a2[2];
      BOOL v38 = __OFADD__(v76, 1);
      uint64_t v77 = v76 + 1;
      if (v38) {
        goto LABEL_79;
      }
      a2[2] = v77;
    }
    v57 += 2;
    if (!--v56)
    {
LABEL_76:
      swift_bridgeObjectRelease();
      uint64_t v80 = specialized _NativeDictionary.filter(_:)((uint64_t)a2);
      swift_release();
      unint64_t v81 = v80[2];
      swift_release();
      return v81 != 0;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v14 = (void *)MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0;
      while (v6 != v8)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v9 = (id)MEMORY[0x230F854E0](v8, a1);
        }
        else {
          id v9 = *(id *)(a1 + 8 * v8 + 32);
        }
        uint64_t v10 = v9;
        uint64_t v12 = v9;
        closure #1 in Optional<A>.toContactsAddressHandles(localeString:)(&v12, a2, a3, &v13);

        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return (uint64_t)v10;
        }
        ++v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v8)
        {
          uint64_t v10 = v14;
          swift_bridgeObjectRelease();
          return (uint64_t)v10;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x230F854E0](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      unint64_t v14 = v7;
      char v10 = closure #1 in implicit closure #1 in Array<A>.hasSameLabels.getter(&v14, a2);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      char v11 = v10;

      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v12 = 0;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v12 = 1;
  return v12 & 1;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    unint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *unint64_t v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  v8[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, (void *)((char *)v8 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0)));
    uint64_t v5 = OUTLINED_FUNCTION_36_3();
    if (v1) {
      swift_willThrow();
    }
    else {
      return v5;
    }
  }
  else
  {
    uint64_t v6 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v6);
    uint64_t v2 = OUTLINED_FUNCTION_36_3();
    MEMORY[0x230F85DE0](v6, -1, -1);
  }
  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16) >= 2uLL)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0) {
      break;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    BOOL v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *BOOL v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v26 = 0;
  unint64_t v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    BOOL v28 = v24 == v27;
    if (v24 == v27) {
      unint64_t v24 = 0;
    }
    v26 |= v28;
    uint64_t v29 = *(void *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  uint64_t v2 = *(void *)(v0 + 336);
  return outlined destroy of SpeakableString?(v2);
}

uint64_t OUTLINED_FUNCTION_5_9@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_10_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_17_4@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_5(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_29_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_30_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_34_4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t *OUTLINED_FUNCTION_36_3()
{
  return specialized closure #1 in _NativeDictionary.filter(_:)(v2, v1, v0);
}

uint64_t type metadata accessor for GetContactAttributeCATs()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeCATs;
  if (!type metadata singleton initialization cache for GetContactAttributeCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactAttributeCATs()
{
  return swift_initClassMetadata2();
}

void GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
}

{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  BOOL v30 = v2;
  uint64_t v31 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  unint64_t v13 = OUTLINED_FUNCTION_10_0(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  unint64_t v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = swift_allocObject();
  OUTLINED_FUNCTION_2_13((__n128 *)v17, (__n128)xmmword_22D5A07E0);
  unint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(v1);
  *(void *)(v17 + 48) = v11;
  *(void *)(v17 + 72) = v18;
  *(void *)(v17 + 80) = 0xD000000000000012;
  *(void *)(v17 + 88) = 0x800000022D5A8000;
  *(void *)(v17 + 96) = v9;
  OUTLINED_FUNCTION_16_4();
  *(void *)(v17 + 120) = v19;
  *(void *)(v17 + 128) = v20;
  OUTLINED_FUNCTION_15_5();
  *(void *)(v17 + 136) = v21;
  outlined init with copy of URL?(v7, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v16, 1, v22) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v16, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
  }
  else
  {
    *(void *)(v17 + 168) = v22;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 144));
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v23 + 32))();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_0_7();
  *(void *)(v17 + 176) = v24;
  *(void *)(v17 + 184) = v25;
  if (v5)
  {
    type metadata accessor for DialogPerson();
    char v26 = v5;
  }
  else
  {
    char v26 = 0;
    *(void *)(v17 + 200) = 0;
    *(void *)(v17 + 208) = 0;
  }
  *(void *)(v17 + 192) = v26;
  OUTLINED_FUNCTION_7_7();
  *(void *)(v17 + 216) = v27;
  *(void *)(v17 + 224) = v28;
  *(void *)(v17 + 232) = 0xE400000000000000;
  uint64_t v29 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v17 + 240) = v30 & 1;
  *(void *)(v17 + 264) = v29;
  *(void *)(v17 + 272) = 0x4D6563696F567369;
  *(void *)(v17 + 280) = 0xEB0000000065646FLL;
  *(void *)(v17 + 312) = v29;
  *(unsigned char *)(v17 + 288) = v31 & 1;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

void GetContactAttributeCATs.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
}

void GetContactAttributeCATs.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
}

void GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
}

{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;

  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  uint64_t v33 = v2;
  uint64_t v31 = v3;
  unint64_t v32 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  unint64_t v14 = OUTLINED_FUNCTION_10_0(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = v16 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v18 = swift_allocObject();
  OUTLINED_FUNCTION_2_13((__n128 *)v18, (__n128)xmmword_22D5A07F0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v1);
  *(void *)(v18 + 48) = v12;
  *(void *)(v18 + 72) = v19;
  *(void *)(v18 + 80) = 0xD000000000000012;
  *(void *)(v18 + 88) = 0x800000022D5A8000;
  *(void *)(v18 + 96) = v10;
  OUTLINED_FUNCTION_16_4();
  *(void *)(v18 + 120) = v20;
  *(void *)(v18 + 128) = v21;
  OUTLINED_FUNCTION_15_5();
  *(void *)(v18 + 136) = v22;
  outlined init with copy of URL?(v8, v17, &demangling cache variable for type metadata for SpeakableString?);
  unint64_t v23 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v17, 1, v23) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of URL?(v17, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
  }
  else
  {
    *(void *)(v18 + 168) = v23;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 144));
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v24 + 32))();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_0_7();
  *(void *)(v18 + 176) = v25;
  *(void *)(v18 + 184) = v26;
  if (v6)
  {
    type metadata accessor for DialogPerson();
    unint64_t v27 = v6;
  }
  else
  {
    unint64_t v27 = 0;
    *(void *)(v18 + 200) = 0;
    *(void *)(v18 + 208) = 0;
  }
  *(void *)(v18 + 192) = v27;
  OUTLINED_FUNCTION_7_7();
  *(void *)(v18 + 216) = v28;
  *(void *)(v18 + 224) = v29;
  BOOL v30 = MEMORY[0x263F8D4F8];
  *(void *)(v18 + 232) = 0xE400000000000000;
  *(unsigned char *)(v18 + 240) = v31 & 1;
  *(void *)(v18 + 264) = v30;
  strcpy((char *)(v18 + 272), "hasSameLabels");
  *(_WORD *)(v18 + 286) = -4864;
  *(unsigned char *)(v18 + 288) = v32 & 1;
  *(void *)(v18 + 312) = v30;
  *(void *)(v18 + 320) = 0x4D6563696F567369;
  *(void *)(v18 + 328) = 0xEB0000000065646FLL;
  *(void *)(v18 + 360) = v30;
  *(unsigned char *)(v18 + 336) = v33 & 1;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

uint64_t GetContactAttributeCATs.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(unint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_4_12(v8, (__n128)xmmword_22D5A01D0);
  if (a1)
  {
    uint64_t v9 = type metadata accessor for DialogCalendar();
    unint64_t v10 = a1;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = 0;
    v8[3].n128_u64[1] = 0;
    v8[4].n128_u64[0] = 0;
  }
  v8[3].n128_u64[0] = v10;
  v8[4].n128_u64[1] = v9;
  v8[5].n128_u64[0] = 0x6F666E49656761;
  v8[5].n128_u64[1] = 0xE700000000000000;
  if (a2)
  {
    type metadata accessor for ContactsAgeInfo();
    unint64_t v11 = a2;
  }
  else
  {
    unint64_t v11 = 0;
    v8[6].n128_u64[1] = 0;
    v8[7].n128_u64[0] = 0;
  }
  v8[6].n128_u64[0] = v11;
  OUTLINED_FUNCTION_17_5();
  v8[7].n128_u64[1] = v12;
  v8[8].n128_u64[0] = v13;
  v8[8].n128_u64[1] = 0xE700000000000000;
  if (a3)
  {
    type metadata accessor for DialogPerson();
    unint64_t v14 = a3;
  }
  else
  {
    unint64_t v14 = 0;
    v8[9].n128_u64[1] = 0;
    v8[10].n128_u64[0] = 0;
  }
  v8[9].n128_u64[0] = v14;
  OUTLINED_FUNCTION_7_7();
  v8[10].n128_u64[1] = v15;
  v8[11].n128_u64[0] = v16;
  v8[11].n128_u64[1] = 0xE400000000000000;
  v8[13].n128_u64[1] = MEMORY[0x263F8D4F8];
  v8[12].n128_u8[0] = a4 & 1;
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_11_8();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t GetContactAttributeCATs.intentHandledShowBirthday(birthdayInfo:contact:isMe:)(unint64_t a1, unint64_t a2, char a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_4_12(v6, (__n128)xmmword_22D59FD40);
  if (a1)
  {
    type metadata accessor for DialogCalendar();
    unint64_t v7 = a1;
  }
  else
  {
    unint64_t v7 = 0;
    v6[3].n128_u64[1] = 0;
    v6[4].n128_u64[0] = 0;
  }
  v6[3].n128_u64[0] = v7;
  OUTLINED_FUNCTION_17_5();
  v6[4].n128_u64[1] = v8;
  v6[5].n128_u64[0] = v9;
  v6[5].n128_u64[1] = 0xE700000000000000;
  if (a2)
  {
    type metadata accessor for DialogPerson();
    unint64_t v10 = a2;
  }
  else
  {
    unint64_t v10 = 0;
    v6[6].n128_u64[1] = 0;
    v6[7].n128_u64[0] = 0;
  }
  v6[6].n128_u64[0] = v10;
  OUTLINED_FUNCTION_7_7();
  v6[7].n128_u64[1] = v11;
  v6[8].n128_u64[0] = v12;
  v6[8].n128_u64[1] = 0xE400000000000000;
  v6[10].n128_u64[1] = MEMORY[0x263F8D4F8];
  v6[9].n128_u8[0] = a3 & 1;
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_11_8();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t GetContactAttributeCATs.intentHandledShowCompany(isMe:companyName:contact:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_10_0(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22D59FD40;
  OUTLINED_FUNCTION_7_7();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = 0xE400000000000000;
  uint64_t v14 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v12 + 48) = a1;
  uint64_t v15 = v12 + 96;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = 0x4E796E61706D6F63;
  *(void *)(v12 + 88) = 0xEB00000000656D61;
  outlined init with copy of URL?(a2, v10, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_10_5(v10);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
  }
  else
  {
    *(void *)(v11 + 120) = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v15);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v18 + 32))();
  }
  OUTLINED_FUNCTION_0_7();
  *(void *)(v11 + 128) = v19;
  *(void *)(v11 + 136) = v20;
  if (a3)
  {
    uint64_t v21 = type metadata accessor for DialogPerson();
    uint64_t v22 = a3;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    *(void *)(v11 + 152) = 0;
    *(void *)(v11 + 160) = 0;
  }
  *(void *)(v11 + 144) = v22;
  *(void *)(v11 + 168) = v21;
  swift_retain();
  OUTLINED_FUNCTION_11_8();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

void GetContactAttributeCATs.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
}

void GetContactAttributeCATs.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v32 = v0;
  int v31 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  char v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_10_0(v10);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v30[-v15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_22D5A07E0;
  *(void *)(v17 + 32) = 0x656D616E6B63696ELL;
  *(void *)(v17 + 40) = 0xEF74736575716552;
  uint64_t v18 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v17 + 48) = v9;
  *(void *)(v17 + 72) = v18;
  *(void *)(v17 + 80) = 0x656D614E7473616CLL;
  *(void *)(v17 + 88) = 0xEF74736575716552;
  *(unsigned char *)(v17 + 96) = v7;
  uint64_t v19 = (uint64_t *)(v17 + 144);
  *(void *)(v17 + 120) = v18;
  *(void *)(v17 + 128) = 0x756C6156656D616ELL;
  *(void *)(v17 + 136) = 0xE900000000000065;
  outlined init with copy of URL?(v5, (uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_10_5((uint64_t)v16);
  if (v21)
  {
    outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
  }
  else
  {
    *(void *)(v17 + 168) = v20;
    __swift_allocate_boxed_opaque_existential_1(v19);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v22 + 32))();
  }
  char v23 = v31;
  OUTLINED_FUNCTION_0_7();
  *(void *)(v17 + 176) = v24;
  *(void *)(v17 + 184) = v25;
  if (v3)
  {
    type metadata accessor for DialogPerson();
    uint64_t v26 = v3;
  }
  else
  {
    uint64_t v26 = 0;
    *(void *)(v17 + 200) = 0;
    *(void *)(v17 + 208) = 0;
  }
  *(void *)(v17 + 192) = v26;
  OUTLINED_FUNCTION_7_7();
  *(void *)(v17 + 216) = v27;
  *(void *)(v17 + 224) = v28;
  *(void *)(v17 + 232) = 0xE400000000000000;
  *(unsigned char *)(v17 + 240) = v23 & 1;
  *(void *)(v17 + 264) = v18;
  strcpy((char *)(v17 + 272), "nicknameValue");
  *(_WORD *)(v17 + 286) = -4864;
  if (!v3) {
    goto LABEL_11;
  }
  swift_retain();
  DialogPerson.nickname.getter();
  OUTLINED_FUNCTION_10_5((uint64_t)v14);
  if (v21)
  {
    outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
LABEL_11:
    *(_OWORD *)(v17 + 288) = 0u;
    *(_OWORD *)(v17 + 304) = 0u;
    goto LABEL_12;
  }
  *(void *)(v17 + 312) = v20;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 288));
  OUTLINED_FUNCTION_51();
  (*(void (**)(void))(v29 + 32))();
LABEL_12:
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

void GetContactAttributeCATs.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
}

uint64_t GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v5);
  *(void *)(v1 + 40) = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v3 = swift_allocObject();
  *(void *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_22D5A01E0;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0x4E746361746E6F63;
  *(void *)(v3 + 40) = 0xEB00000000656D61;
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v1, 1, v5) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = *(unsigned char *)(v0 + 72);
  *(void *)(v3 + 80) = 1699574633;
  *(void *)(v3 + 88) = 0xE400000000000000;
  *(void *)(v3 + 120) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v3 + 96) = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D058]
                                                                                     + MEMORY[0x263F6D058]);
  char v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v8;
  *char v8 = v0;
  v8[1] = GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:);
  char v9 = *(void *)(v0 + 16);
  return v11(v9, 0xD00000000000002DLL, 0x800000022D5A7FD0, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GetContactAttributeCATs.unsupportedContactAttribute()(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D058]
                                                                                    + MEMORY[0x263F6D058]);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = GetContactAttributeCATs.unsupportedContactAttribute();
  uint64_t v4 = MEMORY[0x263F8EE78];
  return v6(a1, 0xD00000000000002FLL, 0x800000022D5A7FA0, v4);
}

uint64_t GetContactAttributeCATs.unsupportedContactAttribute()()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void GetContactAttributeCATs.__allocating_init(templateDir:options:globals:)()
{
}

void GetContactAttributeCATs.init(templateDir:options:globals:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_10_0(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  outlined init with copy of URL?(v3, v12 - v11, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v1, v4);
  ContactsCommonCATs.init(templateDir:options:globals:)(v13, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_8();
}

uint64_t ObjC metadata update function for GetContactAttributeCATs()
{
  return type metadata accessor for GetContactAttributeCATs();
}

__n128 *OUTLINED_FUNCTION_2_13(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x676E69686374616DLL;
  result[2].n128_u64[1] = 0xEF73656C646E6148;
  return result;
}

__n128 *OUTLINED_FUNCTION_4_12(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "birthdayInfo");
  result[2].n128_u8[13] = 0;
  result[2].n128_u16[7] = -5120;
  return result;
}

void specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, a2, a3, a4, a5, (uint64_t)specialized closure #1 in static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(void);
  void (*v91)(void);
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  int64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  void (**v102)(uint64_t, char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (**v106)(void);
  uint64_t v107;
  void (*v108)(void);
  void (*v109)(void);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  void (*v128)(void);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  uint64_t v136;
  void (*v137)(uint64_t);
  void *v138;
  os_log_type_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t);
  void *v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  void (*v148)(uint64_t);
  char v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(void);
  void (*v156)(uint64_t);
  uint64_t v157;
  void (*v158)(void);
  uint64_t v159;
  void (*v160)(uint64_t);
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  long long v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t);
  void *v169;
  os_log_type_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t);
  void *v175;
  NSObject *v176;
  os_log_type_t v177;
  uint64_t v178;
  void (*v179)(uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (**v183)(uint64_t, char *, uint64_t);
  void (*v184)(void);
  void (*v185)(uint64_t);
  uint64_t v186;
  void (*v187)(void);
  void (*v188)(uint64_t);
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  long long v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t);
  void *v197;
  os_log_type_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t);
  void *v203;
  NSObject *v204;
  os_log_type_t v205;
  uint64_t v206;
  void (*v207)(uint64_t);
  void (*v208)(void);
  uint64_t v209;
  uint64_t v210[3];
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (**v222)(uint64_t, char *, uint64_t);
  uint64_t v223;
  long long v224;
  long long v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  uint64_t v232[6];

  OUTLINED_FUNCTION_10();
  a19 = v20;
  a20 = v21;
  id v217 = v22;
  uint64_t v212 = v23;
  v211 = v24;
  v210[0] = v25;
  uint64_t v27 = v26;
  uint64_t v227 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_0();
  v220 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_4_4();
  uint64_t v222 = v30;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_25();
  id v219 = v32;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_58_0();
  uint64_t v226 = v34;
  uint64_t v229 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_0();
  *(void *)&id v225 = v35;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_4_4();
  *(void *)&v224 = v37;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v38);
  v210[1] = (uint64_t)v210 - v39;
  OUTLINED_FUNCTION_17();
  uint64_t v41 = MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_42_1(v41, v42, v43, v44, v45, v46, v47, v48, v210[0]);
  uint64_t v230 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  OUTLINED_FUNCTION_0_0();
  uint64_t v221 = v49;
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_11_3();
  uint64_t v53 = v51 - v52;
  uint64_t v55 = MEMORY[0x270FA5388](v54);
  uint64_t v57 = (uint64_t *)((char *)v210 - v56);
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_25();
  id v223 = v58;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v59);
  OUTLINED_FUNCTION_58_0();
  uint64_t v228 = v60;
  v216 = type metadata accessor for OrdinalDisplayHintsBuilder();
  OUTLINED_FUNCTION_0_0();
  v214 = v61;
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_15();
  char v65 = v64 - v63;
  unint64_t v66 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v67);
  OUTLINED_FUNCTION_15();
  char v70 = v69 - v68;
  if (one-time initialization token for contactsLog != -1) {
    goto LABEL_82;
  }
  while (1)
  {
    unint64_t v71 = (id)static Signpost.contactsLog;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    unint64_t v72 = *(int *)(v66 + 20);
    uint64_t v215 = v70;
    uint64_t v73 = v70 + v72;
    *(void *)uint64_t v73 = "BuildDisplayHints";
    *(void *)(v73 + 8) = 17;
    uint64_t v213 = v73;
    *(unsigned char *)(v73 + 16) = 2;
    v218 = v65;
    OrdinalDisplayHintsBuilder.init(referenceNode:)();
    v232[3] = MEMORY[0x263F8EE78];
    v232[4] = MEMORY[0x263F8EE78];
    char v65 = v27;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0) {
        unint64_t v66 = v27;
      }
      else {
        unint64_t v66 = v27 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v74 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    os_log_type_t v75 = MEMORY[0x263F8EE78];
    if (!v74) {
      goto LABEL_21;
    }
    if (v74 == 1) {
      break;
    }
    v232[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 & ~(v74 >> 63), 0);
    if (v74 < 0)
    {
      __break(1u);
LABEL_88:
      uint64_t v78 = (id)MEMORY[0x230F854E0](0, v27);
LABEL_9:
      uint64_t v79 = v78;
      uint64_t v80 = v210[0];
      if ((unint64_t)v210[0] >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v180 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v181 = v230[12];
        v230 += 12;
        uint64_t v83 = (uint64_t)v57 + v181;
        if (!v180) {
          goto LABEL_91;
        }
        swift_bridgeObjectRetain();
        v182 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v182) {
          goto LABEL_91;
        }
LABEL_11:
        uint64_t v84 = v211;
        if ((unint64_t)(v211 - 1) >= 3) {
          goto LABEL_91;
        }
        uint64_t v85 = objc_msgSend(v79, sel_identifier);
        char v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v87 = v86;

        uint64_t v88 = DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(v83, v70, v87, v84, v80);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v81 = *(void *)((v210[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v82 = v230[12];
        v230 += 12;
        uint64_t v83 = (uint64_t)v57 + v82;
        if (v81) {
          goto LABEL_11;
        }
LABEL_91:
        uint64_t v88 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v83, v79);
      }
      uint64_t *v57 = v88;
      OUTLINED_FUNCTION_57_0();
      char v65 = v229;
      OUTLINED_FUNCTION_18_6();
      uint64_t v222 = v183;
      OUTLINED_FUNCTION_10_10();
      v184();
      uint64_t v185 = *(void (**)(uint64_t))(v70 + 8);
      swift_bridgeObjectRetain();
      v186 = OUTLINED_FUNCTION_60_0();
      v185(v186);
      outlined destroy of SemanticValue?(v75, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      specialized Array.append<A>(contentsOf:)();
      specialized Array.append<A>(contentsOf:)();
      v232[0] = MEMORY[0x263F8EE78];
      OUTLINED_FUNCTION_27_6();
      outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v57, v75);
      OUTLINED_FUNCTION_55_0(*v230);
      OUTLINED_FUNCTION_10_10();
      v187();
      uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))(v225 + 32);
      uint64_t v188 = *(void (**)(uint64_t))(v225 + 32);
      uint64_t v189 = OUTLINED_FUNCTION_32_5((uint64_t)&a11);
      v188(v189);
      outlined destroy of SemanticValue?(v75, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      uint64_t v190 = v232[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_25_6();
        uint64_t v190 = v232[0];
      }
      id v121 = *(uint64_t **)(v190 + 16);
      if ((unint64_t)v121 >= *(void *)(v190 + 24) >> 1) {
        OUTLINED_FUNCTION_38_3();
      }
      uint64_t v191 = OUTLINED_FUNCTION_7_8();
      v188(v191);
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      OUTLINED_FUNCTION_54_0();
      if ((unint64_t)(v211 - 1) <= 2) {
        goto LABEL_52;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_53_0();
      if (!v65) {
        goto LABEL_107;
      }
      OUTLINED_FUNCTION_11_9();
      v192 = one-time initialization token for siriContacts;
      id v223 = (uint64_t)v102;
      swift_bridgeObjectRetain();
      if (v192 != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_36_4();
      OUTLINED_FUNCTION_23_4();
      *(void *)&v193 = 136315138;
      id v225 = v193;
      OUTLINED_FUNCTION_49_1(v194, MEMORY[0x263F8EE58]);
      do
      {
        uint64_t v195 = OUTLINED_FUNCTION_1_11((uint64_t)v102, (uint64_t)static Logger.siriContacts);
        v196(v195);
        v197 = (void *)Logger.logObject.getter();
        uint64_t v198 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_8_8(v198))
        {
          OUTLINED_FUNCTION_24();
          v232[0] = OUTLINED_FUNCTION_9_8();
          OUTLINED_FUNCTION_14_5();
          DisplayHint.description.getter();
          uint64_t v231 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v199, v200, v232);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v201 = OUTLINED_FUNCTION_2_14();
          v202(v201);
          OUTLINED_FUNCTION_31_4();
          OUTLINED_FUNCTION_34_5(v203, v204, v205, "DisplayHint: %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3_9();
          uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))v229;
          OUTLINED_FUNCTION_2();
        }
        else
        {
          uint64_t v206 = OUTLINED_FUNCTION_5_10();
          v207(v206);
        }

        OUTLINED_FUNCTION_44_1();
      }
      while (!v149);
      goto LABEL_106;
    }
    uint64_t v89 = 0;
    os_log_type_t v75 = v232[0];
    do
    {
      if ((v65 & 0xC000000000000001) != 0) {
        id v90 = (void (*)(void))MEMORY[0x230F854E0](v89, v65);
      }
      else {
        id v90 = (void (*)(void))*(id *)(v65 + 8 * v89 + 32);
      }
      uint64_t v91 = v90;
      id v92 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v53 + v230[12], v90);

      *(void *)uint64_t v53 = v92;
      v232[0] = v75;
      uint64_t v94 = *(void *)(v75 + 16);
      uint64_t v93 = *(void *)(v75 + 24);
      if (v94 >= v93 >> 1)
      {
        uint64_t v97 = OUTLINED_FUNCTION_37_4(v93);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97, v98, v99);
        os_log_type_t v75 = v232[0];
      }
      ++v89;
      *(void *)(v75 + 16) = v94 + 1;
      OUTLINED_FUNCTION_24_3();
      outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)(v53, v75 + v95 + *(void *)(v96 + 72) * v94);
    }
    while (v74 != v89);
LABEL_21:
    uint64_t v100 = v75;
    uint64_t v101 = *(void *)(v75 + 16);
    uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))MEMORY[0x263F8EE78];
    id v219 = v100;
    if (!v101)
    {
      uint64_t v120 = v100;
LABEL_44:
      specialized Array.append<A>(contentsOf:)();
      id v121 = *(uint64_t **)(v120 + 16);
      uint64_t v122 = v229;
      if (v121)
      {
        v232[0] = (uint64_t)v102;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_24_3();
        uint64_t v124 = v120 + v123;
        uint64_t v126 = *(void *)(v125 + 72);
        uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))(v225 + 16);
        char v65 = v225 + 32;
        do
        {
          uint64_t v127 = v228;
          outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v124, (uint64_t)v228);
          (*v102)(v223 + v230[12], (char *)v127 + v230[12], v122);
          uint64_t v128 = *(void (**)(void))v65;
          OUTLINED_FUNCTION_56_0();
          v128();
          outlined destroy of SemanticValue?((uint64_t)v127, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
          id v129 = v232[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_25_6();
            id v129 = v232[0];
          }
          uint64_t v131 = *(void *)(v129 + 16);
          uint64_t v130 = *(void *)(v129 + 24);
          if (v131 >= v130 >> 1)
          {
            OUTLINED_FUNCTION_37_4(v130);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            id v129 = v232[0];
          }
          *(void *)(v129 + 16) = v131 + 1;
          uint64_t v122 = v229;
          OUTLINED_FUNCTION_56_0();
          v128();
          v232[0] = v129;
          v124 += v126;
          id v121 = (uint64_t *)((char *)v121 - 1);
        }
        while (v121);
      }
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
LABEL_52:
      OrdinalDisplayHintsBuilder.build(for:)();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
      OUTLINED_FUNCTION_53_0();
      if (!v65) {
        goto LABEL_107;
      }
      uint64_t v132 = v220;
      OUTLINED_FUNCTION_11_9();
      uint64_t v133 = one-time initialization token for siriContacts;
      uint64_t v222 = v102;
      swift_bridgeObjectRetain();
      if (v133 != -1) {
        swift_once();
      }
      uint64_t v134 = OUTLINED_FUNCTION_36_4();
      uint64_t v230 = (int *)(v132 + 8);
      *(void *)&id v225 = v232;
      *(void *)&uint64_t v135 = 136315138;
      v224 = v135;
      id v223 = MEMORY[0x263F8EE58] + 8;
      uint64_t v228 = v121;
      uint64_t v229 = v134;
      do
      {
        uint64_t v136 = OUTLINED_FUNCTION_1_11(v134, (uint64_t)static Logger.siriContacts);
        v137(v136);
        uint64_t v138 = (void *)Logger.logObject.getter();
        uint64_t v139 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_8_8(v139))
        {
          OUTLINED_FUNCTION_24();
          v232[0] = OUTLINED_FUNCTION_9_8();
          *(_DWORD *)id v121 = v224;
          DisplayHint.description.getter();
          uint64_t v231 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v232);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v142 = OUTLINED_FUNCTION_2_14();
          v143(v142);
          OUTLINED_FUNCTION_31_4();
          OUTLINED_FUNCTION_34_5(v144, v145, v146, "DisplayHint: %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3_9();
          id v121 = v228;
          uint64_t v134 = v229;
          OUTLINED_FUNCTION_2();
        }
        else
        {
          v147 = OUTLINED_FUNCTION_5_10();
          v148(v147);
        }

        OUTLINED_FUNCTION_44_1();
      }
      while (!v149);
LABEL_106:
      swift_bridgeObjectRelease();
      goto LABEL_107;
    }
    OUTLINED_FUNCTION_24_3();
    uint64_t v27 = v103 + v104;
    uint64_t v222 = *(void (***)(uint64_t, char *, uint64_t))(v105 + 72);
    uint64_t v106 = (void (**)(void))(v225 + 8);
    swift_bridgeObjectRetain();
    uint64_t v107 = MEMORY[0x263F8EE78];
    while (1)
    {
      outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v27, (uint64_t)v57);
      unint64_t v66 = *v57;
      *uint64_t v228 = *v57;
      OUTLINED_FUNCTION_10_10();
      v108();
      uint64_t v109 = *v106;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_41_2();
      v109();
      outlined destroy of SemanticValue?((uint64_t)v57, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      uint64_t v53 = *(void *)(v66 + 16);
      char v70 = *(void *)(v107 + 16);
      char v65 = v70 + v53;
      if (__OFADD__(v70, v53)) {
        break;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v65 > *(void *)(v107 + 24) >> 1)
      {
        if (v70 <= v65) {
          uint64_t v111 = v70 + v53;
        }
        else {
          uint64_t v111 = v70;
        }
        uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v111, 1, v107);
      }
      if (*(void *)(v66 + 16))
      {
        uint64_t v112 = *(void *)(v107 + 16);
        if ((*(void *)(v107 + 24) >> 1) - v112 < v53) {
          goto LABEL_80;
        }
        uint64_t v113 = (*(unsigned __int8 *)(v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80);
        uint64_t v114 = *(void *)(v220 + 72);
        uint64_t v115 = v107 + v113 + v114 * v112;
        if (v66 + v113 < v115 + v114 * v53 && v115 < v66 + v113 + v114 * v53)
        {
          OUTLINED_FUNCTION_33_1();
          OUTLINED_FUNCTION_45_1();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v53)
        {
          uint64_t v117 = *(void *)(v107 + 16);
          uint64_t v118 = __OFADD__(v117, v53);
          uint64_t v119 = v117 + v53;
          if (v118) {
            goto LABEL_81;
          }
          *(void *)(v107 + 16) = v119;
        }
      }
      else if (v53)
      {
        goto LABEL_79;
      }
      swift_bridgeObjectRelease();
      v27 += (uint64_t)v222;
      if (!--v101)
      {
        uint64_t v120 = v219;
        swift_bridgeObjectRelease();
        uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))MEMORY[0x263F8EE78];
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
  uint64_t v76 = OUTLINED_FUNCTION_35_4();
  *(_OWORD *)(v76 + 16) = xmmword_22D59FD50;
  uint64_t v57 = (uint64_t *)(v76 + v66);
  uint64_t v77 = v27 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0, v27);
  *(void *)&v224 = v76;
  if ((v212 & 1) == 0)
  {
    if (v77) {
      goto LABEL_88;
    }
    uint64_t v78 = *(id *)(v27 + 32);
    goto LABEL_9;
  }
  if (v77) {
    uint64_t v150 = (id)MEMORY[0x230F854E0](0, v27);
  }
  else {
    uint64_t v150 = *(id *)(v27 + 32);
  }
  v151 = v150;
  uint64_t v152 = DisplayHintFactory.buildContactCardDisplayHint(contact:)((uint64_t)v57 + v230[12], v150);

  uint64_t *v57 = v152;
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_18_6();
  uint64_t v226 = v153;
  id v154 = v229;
  OUTLINED_FUNCTION_10_10();
  v155();
  uint64_t v156 = *(void (**)(uint64_t))(v70 + 8);
  swift_bridgeObjectRetain();
  uint64_t v157 = OUTLINED_FUNCTION_60_0();
  v156(v157);
  outlined destroy of SemanticValue?(v75, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  v232[0] = MEMORY[0x263F8EE78];
  OUTLINED_FUNCTION_27_6();
  outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v57, v75);
  OUTLINED_FUNCTION_55_0(v230[12]);
  OUTLINED_FUNCTION_10_10();
  v158();
  uint64_t v159 = v225 + 32;
  uint64_t v160 = *(void (**)(uint64_t))(v225 + 32);
  uint64_t v161 = OUTLINED_FUNCTION_32_5((uint64_t)&a10);
  v160(v161);
  outlined destroy of SemanticValue?(v75, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  id v162 = v232[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_25_6();
    id v162 = v232[0];
  }
  if (*(void *)(v162 + 16) >= *(void *)(v162 + 24) >> 1) {
    OUTLINED_FUNCTION_38_3();
  }
  uint64_t v163 = OUTLINED_FUNCTION_7_8();
  v160(v163);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  OUTLINED_FUNCTION_54_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_0();
  if (v154)
  {
    OUTLINED_FUNCTION_11_9();
    uint64_t v164 = one-time initialization token for siriContacts;
    id v223 = v159;
    swift_bridgeObjectRetain();
    if (v164 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_36_4();
    OUTLINED_FUNCTION_23_4();
    *(void *)&uint64_t v165 = 136315138;
    id v225 = v165;
    OUTLINED_FUNCTION_49_1(v166, MEMORY[0x263F8EE58]);
    do
    {
      uint64_t v167 = OUTLINED_FUNCTION_1_11(v159, (uint64_t)static Logger.siriContacts);
      v168(v167);
      v169 = (void *)Logger.logObject.getter();
      BOOL v170 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_8(v170))
      {
        OUTLINED_FUNCTION_24();
        v232[0] = OUTLINED_FUNCTION_9_8();
        OUTLINED_FUNCTION_14_5();
        DisplayHint.description.getter();
        uint64_t v231 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v172, v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v173 = OUTLINED_FUNCTION_2_14();
        v174(v173);
        OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_34_5(v175, v176, v177, "DisplayHint: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3_9();
        uint64_t v159 = v229;
        OUTLINED_FUNCTION_2();
      }
      else
      {
        uint64_t v178 = OUTLINED_FUNCTION_5_10();
        v179(v178);
      }

      OUTLINED_FUNCTION_44_1();
    }
    while (!v149);
    goto LABEL_106;
  }
LABEL_107:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter();
  swift_endAccess();
  static ContactsContextProvider.contactResponseTargets.getter();
  swift_beginAccess();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  swift_endAccess();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23();
  v208();
  uint64_t v209 = v215;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v209);
  OUTLINED_FUNCTION_8();
}

{
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, a2, a3, a4, a5, (uint64_t)specialized closure #1 in static ContactsContextProvider.disambiguate(contacts:), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (**v105)(char *, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (*v109)(void);
  void (*v110)(char *, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  BOOL v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (**v128)(void, char *, uint64_t);
  void (**v129)(void);
  char *v130;
  void (*v131)(void);
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t *v143;
  long long v144;
  uint64_t v145;
  void *v146;
  os_log_type_t v147;
  uint64_t v148;
  unint64_t v149;
  void (*v150)(void);
  void *v151;
  NSObject *v152;
  os_log_type_t v153;
  void (*v154)(void);
  id v155;
  void *v156;
  uint64_t v157;
  void (*v158)(void);
  void (*v159)(void);
  uint64_t *v160;
  uint64_t v161;
  void (*v162)(void);
  void (*v163)(void);
  uint64_t v164;
  long long v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t);
  void *v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t);
  void *v176;
  NSObject *v177;
  os_log_type_t v178;
  uint64_t v179;
  void (*v180)(uint64_t);
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(void);
  void (*v187)(void);
  void (*v188)(void);
  void (*v189)(void);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  long long v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t);
  void *v197;
  os_log_type_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t);
  void *v204;
  NSObject *v205;
  os_log_type_t v206;
  uint64_t v207;
  void (*v208)(uint64_t);
  uint64_t v209[3];
  unint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  long long v225;
  long long v226;
  uint64_t *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  void (**v231)(uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233[2];
  uint64_t *v234;
  uint64_t v235;

  OUTLINED_FUNCTION_10();
  a19 = v20;
  a20 = v21;
  id v217 = v22;
  v218 = v23;
  uint64_t v212 = v24;
  v211 = v25;
  uint64_t v210 = v26;
  uint64_t v28 = v27;
  uint64_t v228 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_0();
  uint64_t v222 = v29;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_4_4();
  v224 = v31;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_25();
  uint64_t v221 = v33;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_58_0();
  uint64_t v213 = v35;
  uint64_t v230 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_0();
  uint64_t v227 = v36;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_4_4();
  *(void *)&uint64_t v226 = v38;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v39);
  v209[1] = (uint64_t)v209 - v40;
  OUTLINED_FUNCTION_17();
  uint64_t v42 = MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_42_1(v42, v43, v44, v45, v46, v47, v48, v49, v209[0]);
  uint64_t v231 = (void (**)(uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  OUTLINED_FUNCTION_0_0();
  id v223 = v50;
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_11_3();
  uint64_t v54 = v52 - v53;
  uint64_t v56 = MEMORY[0x270FA5388](v55);
  uint64_t v58 = (uint64_t *)((char *)v209 - v57);
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_25();
  *(void *)&id v225 = v59;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v60);
  OUTLINED_FUNCTION_58_0();
  uint64_t v229 = v61;
  v216 = type metadata accessor for OrdinalDisplayHintsBuilder();
  OUTLINED_FUNCTION_0_0();
  uint64_t v215 = v62;
  MEMORY[0x270FA5388](v63);
  OUTLINED_FUNCTION_15();
  unint64_t v66 = v65 - v64;
  char v67 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v68);
  OUTLINED_FUNCTION_15();
  unint64_t v71 = v70 - v69;
  if (one-time initialization token for contactsLog != -1) {
    goto LABEL_85;
  }
  while (1)
  {
    unint64_t v72 = (id)static Signpost.contactsLog;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    uint64_t v73 = (uint64_t)"BuildDisplayHints";
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v74 = v71 + *(int *)(v67 + 20);
    *(void *)uint64_t v74 = "BuildDisplayHints";
    *(void *)(v74 + 8) = 17;
    v214 = v74;
    *(unsigned char *)(v74 + 16) = 2;
    v220 = v66;
    OrdinalDisplayHintsBuilder.init(referenceNode:)();
    v233[1] = MEMORY[0x263F8EE78];
    uint64_t v234 = (uint64_t *)MEMORY[0x263F8EE78];
    os_log_type_t v75 = v28;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v76 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v77 = MEMORY[0x263F8EE78];
    id v219 = v71;
    if (!v76) {
      goto LABEL_21;
    }
    if (v76 == 1) {
      break;
    }
    v233[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76 & ~(v76 >> 63), 0);
    if (v76 < 0)
    {
      __break(1u);
LABEL_88:
      uint64_t v79 = (id)MEMORY[0x230F854E0](0, v28);
LABEL_9:
      uint64_t v80 = v79;
      unint64_t v81 = v210;
      if (v210 >> 62)
      {
        swift_bridgeObjectRetain();
        v182 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        id v183 = *((int *)v231 + 12);
        v231 += 6;
        uint64_t v84 = (uint64_t)v58 + v183;
        if (!v182) {
          goto LABEL_93;
        }
        swift_bridgeObjectRetain();
        uint64_t v184 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v184) {
          goto LABEL_93;
        }
LABEL_11:
        uint64_t v85 = v211;
        if ((unint64_t)(v211 - 1) >= 3) {
          goto LABEL_93;
        }
        uint64_t v86 = objc_msgSend(v80, sel_identifier);
        uint64_t v73 = (uint64_t)v58;
        id v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v75 = v88;

        DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(v84, v87, v75, v85, v81);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v82 = *(void *)((v210 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v83 = *((int *)v231 + 12);
        v231 += 6;
        uint64_t v84 = (uint64_t)v58 + v83;
        if (v82) {
          goto LABEL_11;
        }
LABEL_93:
        DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v84, v80);
      }
      OUTLINED_FUNCTION_40_2();
      OUTLINED_FUNCTION_17_6();
      v224 = v185;
      OUTLINED_FUNCTION_10_10();
      v186();
      uint64_t v187 = *(void (**)(void))(v75 + 8);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_41_2();
      v187();
      OUTLINED_FUNCTION_48_0();
      specialized Array.append<A>(contentsOf:)();
      specialized Array.append<A>(contentsOf:)();
      v233[0] = MEMORY[0x263F8EE78];
      OUTLINED_FUNCTION_27_6();
      outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v226, v73);
      OUTLINED_FUNCTION_52_1(*(int *)v231);
      OUTLINED_FUNCTION_10_10();
      v188();
      uint64_t v189 = (void (*)(void))v227[4];
      OUTLINED_FUNCTION_51_1();
      v189();
      OUTLINED_FUNCTION_48_0();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        OUTLINED_FUNCTION_26_5();
      }
      uint64_t v134 = v213;
      OUTLINED_FUNCTION_50_0();
      if (v117) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_16_5();
      OUTLINED_FUNCTION_51_1();
      v189();
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      OUTLINED_FUNCTION_54_0();
      uint64_t v190 = v220;
      if ((unint64_t)(v211 - 1) <= 2) {
        goto LABEL_52;
      }
      swift_bridgeObjectRelease();
      uint64_t v191 = (uint64_t)v234;
      if (v234[2])
      {
        OUTLINED_FUNCTION_28_6();
        v192 = one-time initialization token for siriContacts;
        v224 = v191;
        swift_bridgeObjectRetain();
        if (v192 != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_36_4();
        OUTLINED_FUNCTION_22_4();
        *(void *)&v193 = 136315138;
        uint64_t v226 = v193;
        *(void *)&id v225 = MEMORY[0x263F8EE58] + 8;
        uint64_t v229 = (char *)v73;
        uint64_t v230 = v194;
        do
        {
          uint64_t v195 = OUTLINED_FUNCTION_1_11(v190, (uint64_t)static Logger.siriContacts);
          v196(v195);
          v197 = (void *)Logger.logObject.getter();
          uint64_t v198 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_8_8(v198))
          {
            OUTLINED_FUNCTION_24();
            uint64_t v199 = OUTLINED_FUNCTION_9_8();
            OUTLINED_FUNCTION_15_6(v199);
            DisplayHint.description.getter();
            uint64_t v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v200, v201, v233);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v202 = OUTLINED_FUNCTION_2_14();
            v203(v202);
            OUTLINED_FUNCTION_31_4();
            OUTLINED_FUNCTION_34_5(v204, v205, v206, "DisplayHint: %s");
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3_9();
            uint64_t v190 = v230;
            OUTLINED_FUNCTION_2();
          }
          else
          {
            uint64_t v207 = OUTLINED_FUNCTION_5_10();
            v208(v207);
          }

          OUTLINED_FUNCTION_44_1();
        }
        while (!v181);
        uint64_t v191 = v224;
        swift_bridgeObjectRelease();
        unint64_t v71 = v219;
      }
      v218(v191, v217);
      goto LABEL_62;
    }
    uint64_t v89 = 0;
    uint64_t v77 = v233[0];
    id v90 = v28;
    uint64_t v91 = v28 & 0xC000000000000001;
    do
    {
      if (v91) {
        id v92 = (id)MEMORY[0x230F854E0](v89, v90);
      }
      else {
        id v92 = *(id *)(v90 + 8 * v89 + 32);
      }
      uint64_t v93 = v92;
      uint64_t v94 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v54 + *((int *)v231 + 12), v92);

      *(void *)uint64_t v54 = v94;
      v233[0] = v77;
      id v96 = *(void *)(v77 + 16);
      os_log_type_t v95 = *(void *)(v77 + 24);
      if (v96 >= v95 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
        uint64_t v77 = v233[0];
      }
      ++v89;
      *(void *)(v77 + 16) = v96 + 1;
      OUTLINED_FUNCTION_21_4();
      outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)(v54, v77 + v97 + *(void *)(v98 + 72) * v96);
    }
    while (v76 != v89);
LABEL_21:
    uint64_t v99 = v77;
    uint64_t v100 = *(void *)(v77 + 16);
    uint64_t v101 = MEMORY[0x263F8EE78];
    uint64_t v221 = v99;
    if (!v100)
    {
      id v121 = v99;
LABEL_44:
      specialized Array.append<A>(contentsOf:)();
      uint64_t v122 = *(void *)(v121 + 16);
      id v123 = v230;
      if (v122)
      {
        v233[0] = v101;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_21_4();
        uint64_t v125 = v121 + v124;
        uint64_t v127 = *(void *)(v126 + 72);
        uint64_t v128 = (void (**)(void, char *, uint64_t))(v227 + 2);
        id v129 = (void (**)(void))(v227 + 4);
        do
        {
          uint64_t v130 = v229;
          outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v125, (uint64_t)v229);
          (*v128)(v225 + *((int *)v231 + 12), &v130[*((int *)v231 + 12)], v123);
          uint64_t v131 = *v129;
          OUTLINED_FUNCTION_56_0();
          v131();
          outlined destroy of SemanticValue?((uint64_t)v130, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
          uint64_t v132 = v233[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_26_5();
            uint64_t v132 = v233[0];
          }
          uint64_t v133 = *(void *)(v132 + 16);
          if (v133 >= *(void *)(v132 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v132 = v233[0];
          }
          *(void *)(v132 + 16) = v133 + 1;
          id v123 = v230;
          OUTLINED_FUNCTION_56_0();
          v131();
          v233[0] = v132;
          v125 += v127;
          --v122;
        }
        while (v122);
      }
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
      unint64_t v71 = v219;
      uint64_t v134 = v213;
LABEL_52:
      OrdinalDisplayHintsBuilder.build(for:)();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
      uint64_t v135 = v234;
      uint64_t v136 = v234[2];
      if (v136)
      {
        OUTLINED_FUNCTION_28_6();
        uint64_t v138 = (char *)v135 + v137;
        uint64_t v139 = v135;
        uint64_t v140 = one-time initialization token for siriContacts;
        id v223 = v139;
        swift_bridgeObjectRetain();
        if (v140 != -1) {
          swift_once();
        }
        uint64_t v141 = a16;
        uint64_t v142 = (char *)type metadata accessor for Logger();
        uint64_t v143 = &a9;
        uint64_t v231 = (void (**)(uint64_t, uint64_t))&v235;
        *(void *)&uint64_t v226 = v233;
        *(void *)&uint64_t v144 = 136315138;
        id v225 = v144;
        v224 = MEMORY[0x263F8EE58] + 8;
        uint64_t v145 = v228;
        uint64_t v229 = v142;
        uint64_t v230 = v141;
        uint64_t v227 = &a9;
        do
        {
          __swift_project_value_buffer((uint64_t)v142, (uint64_t)static Logger.siriContacts);
          ((void (*)(uint64_t, char *, uint64_t))*v143)(v134, v138, v145);
          uint64_t v146 = (void *)Logger.logObject.getter();
          v147 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_8_8(v147))
          {
            OUTLINED_FUNCTION_24();
            v233[0] = OUTLINED_FUNCTION_9_8();
            OUTLINED_FUNCTION_14_5();
            DisplayHint.description.getter();
            uint64_t v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v149, v233);
            uint64_t v141 = v230;
            uint64_t v145 = v228;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_23();
            v150();
            OUTLINED_FUNCTION_31_4();
            OUTLINED_FUNCTION_34_5(v151, v152, v153, "DisplayHint: %s");
            swift_arrayDestroy();
            uint64_t v143 = v227;
            OUTLINED_FUNCTION_2();
            uint64_t v142 = v229;
            OUTLINED_FUNCTION_2();
          }
          else
          {
            (*v231)(v134, v145);
          }

          v138 += v141;
          --v136;
        }
        while (v136);
        uint64_t v135 = v223;
        swift_bridgeObjectRelease();
        unint64_t v71 = v219;
      }
      v218((uint64_t)v135, v217);
LABEL_62:
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    OUTLINED_FUNCTION_21_4();
    uint64_t v28 = v102 + v103;
    v224 = *(void *)(v104 + 72);
    uint64_t v105 = (void (**)(char *, uint64_t))(v227 + 1);
    swift_bridgeObjectRetain();
    char v67 = MEMORY[0x263F8EE78];
    while (1)
    {
      outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v28, (uint64_t)v58);
      uint64_t v106 = v230;
      uint64_t v107 = &v229[*((int *)v231 + 12)];
      uint64_t v108 = *v58;
      *(void *)uint64_t v229 = *v58;
      OUTLINED_FUNCTION_10_10();
      v109();
      uint64_t v110 = *v105;
      swift_bridgeObjectRetain();
      v110(v107, v106);
      outlined destroy of SemanticValue?((uint64_t)v58, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      uint64_t v54 = *(void *)(v108 + 16);
      unint64_t v66 = *(void *)(v67 + 16);
      unint64_t v71 = v66 + v54;
      if (__OFADD__(v66, v54)) {
        break;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v71 > *(void *)(v67 + 24) >> 1)
      {
        if (v66 <= v71) {
          uint64_t v112 = v66 + v54;
        }
        else {
          uint64_t v112 = v66;
        }
        char v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v112, 1, v67);
      }
      if (*(void *)(v108 + 16))
      {
        uint64_t v113 = *(void *)(v67 + 16);
        if ((*(void *)(v67 + 24) >> 1) - v113 < v54) {
          goto LABEL_83;
        }
        uint64_t v114 = (*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
        uint64_t v115 = *(void *)(v222 + 72);
        uint64_t v116 = v67 + v114 + v115 * v113;
        uint64_t v117 = v108 + v114 >= v116 + v115 * v54 || v116 >= v108 + v114 + v115 * v54;
        if (!v117)
        {
          OUTLINED_FUNCTION_33_1();
          OUTLINED_FUNCTION_45_1();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v54)
        {
          uint64_t v118 = *(void *)(v67 + 16);
          uint64_t v119 = __OFADD__(v118, v54);
          uint64_t v120 = v118 + v54;
          if (v119) {
            goto LABEL_84;
          }
          *(void *)(v67 + 16) = v120;
        }
      }
      else if (v54)
      {
        goto LABEL_82;
      }
      swift_bridgeObjectRelease();
      v28 += v224;
      if (!--v100)
      {
        id v121 = v221;
        swift_bridgeObjectRelease();
        uint64_t v101 = MEMORY[0x263F8EE78];
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
  uint64_t v73 = OUTLINED_FUNCTION_35_4();
  *(_OWORD *)(v73 + 16) = xmmword_22D59FD50;
  uint64_t v58 = (uint64_t *)((char *)v58 + v73);
  uint64_t v78 = v28 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v28 & 0xC000000000000001) == 0, v28);
  id v223 = (uint64_t *)v73;
  *(void *)&uint64_t v226 = v58;
  if ((v212 & 1) == 0)
  {
    if (v78) {
      goto LABEL_88;
    }
    uint64_t v79 = *(id *)(v28 + 32);
    goto LABEL_9;
  }
  if (v78) {
    uint64_t v155 = (id)MEMORY[0x230F854E0](0, v28);
  }
  else {
    uint64_t v155 = *(id *)(v28 + 32);
  }
  uint64_t v156 = v155;
  DisplayHintFactory.buildContactCardDisplayHint(contact:)((uint64_t)v58 + *((int *)v231 + 12), v155);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_17_6();
  uint64_t v221 = v157;
  OUTLINED_FUNCTION_10_10();
  v158();
  uint64_t v159 = *(void (**)(void))(v75 + 8);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_41_2();
  v159();
  uint64_t v160 = &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue);
  OUTLINED_FUNCTION_48_0();
  uint64_t v161 = MEMORY[0x263F6F8E8];
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  v233[0] = MEMORY[0x263F8EE78];
  OUTLINED_FUNCTION_27_6();
  outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v226, v73);
  OUTLINED_FUNCTION_52_1(*((int *)v231 + 12));
  OUTLINED_FUNCTION_10_10();
  v162();
  uint64_t v163 = (void (*)(void))v227[4];
  OUTLINED_FUNCTION_51_1();
  v163();
  OUTLINED_FUNCTION_48_0();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    OUTLINED_FUNCTION_26_5();
  }
  OUTLINED_FUNCTION_50_0();
  if (v117) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_51_1();
  v163();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  OUTLINED_FUNCTION_54_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_0();
  if (v161)
  {
    OUTLINED_FUNCTION_11_9();
    uint64_t v164 = one-time initialization token for siriContacts;
    id v223 = &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue);
    swift_bridgeObjectRetain();
    if (v164 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_36_4();
    OUTLINED_FUNCTION_22_4();
    *(void *)&uint64_t v165 = 136315138;
    uint64_t v226 = v165;
    *(void *)&id v225 = MEMORY[0x263F8EE58] + 8;
    uint64_t v229 = (char *)v73;
    uint64_t v230 = v166;
    do
    {
      uint64_t v167 = OUTLINED_FUNCTION_1_11((uint64_t)v160, (uint64_t)static Logger.siriContacts);
      v168(v167);
      v169 = (void *)Logger.logObject.getter();
      BOOL v170 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_8(v170))
      {
        OUTLINED_FUNCTION_24();
        uint64_t v171 = OUTLINED_FUNCTION_9_8();
        OUTLINED_FUNCTION_15_6(v171);
        DisplayHint.description.getter();
        uint64_t v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v173, v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v174 = OUTLINED_FUNCTION_2_14();
        v175(v174);
        OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_34_5(v176, v177, v178, "DisplayHint: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3_9();
        uint64_t v160 = (uint64_t *)v230;
        OUTLINED_FUNCTION_2();
      }
      else
      {
        uint64_t v179 = OUTLINED_FUNCTION_5_10();
        v180(v179);
      }

      OUTLINED_FUNCTION_44_1();
    }
    while (!v181);
    uint64_t v160 = v223;
    swift_bridgeObjectRelease();
    unint64_t v71 = v219;
  }
  v218((uint64_t)v160, v217);
  swift_bridgeObjectRelease();
LABEL_63:
  OUTLINED_FUNCTION_23();
  v154();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v71);
  OUTLINED_FUNCTION_8();
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x230F854F0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2, v3 + 16 * v10 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v11 = *(void *)(v3 + 16);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *(void *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)()
{
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void (*v3)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void (*v9)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  OUTLINED_FUNCTION_10();
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v2;
  uint64_t v11 = v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v5 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = v10();
  }
  if (!*(void *)(v11 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  BOOL v12 = *(void *)(v6 + 16);
  uint64_t v13 = (*(void *)(v6 + 24) >> 1) - v12;
  uint64_t v14 = *(void *)(v8(0) - 8);
  if (v13 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v9(v11 + v15, v5, v6 + v15 + *(void *)(v14 + 72) * v12);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v6;
    OUTLINED_FUNCTION_8();
    return;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  uint64_t v17 = __OFADD__(v16, v5);
  uint64_t v18 = v16 + v5;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t DisplayHintFactory.buildContactCardDisplayHint(contact:)(uint64_t a1, void *a2)
{
  uint64_t v54 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  uint64_t v4 = v3 - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v53 = (uint64_t *)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v50 = (uint64_t *)((char *)&v49 - v8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v55 = (uint64_t *)((char *)&v49 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t *)((char *)&v49 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v49 + *(int *)(v4 + 56) - v14;
  uint64_t v51 = (uint64_t)&v49 - v14;
  unint64_t v52 = v15;
  uint64_t v16 = (uint64_t *)((char *)&v49 - v14);
  id v17 = objc_msgSend(a2, sel_identifier);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  id v21 = objc_msgSend(a2, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)((uint64_t)v15, v18, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v16 = v23;
  uint64_t v24 = *(int *)(v4 + 56);
  uint64_t v49 = v13;
  uint64_t v25 = (uint64_t)v13 + v24;
  swift_bridgeObjectRetain();
  id v26 = objc_msgSend(a2, sel_identifier);
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  id v30 = objc_msgSend(a2, sel_postalAddresses);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(v25, v27, v29, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t *v13 = v32;
  uint64_t v33 = v55;
  uint64_t v34 = (uint64_t)v55 + *(int *)(v4 + 56);
  swift_bridgeObjectRetain();
  id v35 = objc_msgSend(a2, sel_identifier);
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  id v39 = objc_msgSend(a2, sel_emailAddresses);
  unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v41 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(v34, v36, v38, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v33 = v41;
  uint64_t v42 = v50;
  uint64_t v43 = (uint64_t)v50 + *(int *)(v4 + 56);
  swift_bridgeObjectRetain();
  *uint64_t v42 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v43, a2);
  uint64_t v56 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  uint64_t v44 = v56;
  outlined destroy of SemanticValue?((uint64_t)v42, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  outlined destroy of SemanticValue?((uint64_t)v55, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  outlined destroy of SemanticValue?((uint64_t)v49, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  id v45 = (char *)v53 + *(int *)(v4 + 56);
  *uint64_t v53 = v23;
  uint64_t v46 = type metadata accessor for SemanticValue();
  uint64_t v47 = *(void *)(v46 - 8);
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v45, v52, v46);
  outlined destroy of SemanticValue?(v51, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v54, v45, v46);
  return v44;
}

uint64_t DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SemanticValue();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v58 = (char *)&v56 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v59 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v56 = (char *)&v56 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v65 = type metadata accessor for DisplayHint();
  uint64_t v62 = *(void *)(v65 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v65);
  char v60 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v57 = (char *)&v56 - v20;
  MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&v56 - v21;
  id v23 = objc_msgSend(a2, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  SemanticValue.init(string:label:)();
  uint64_t v24 = CNContact.formattedFullName.getter();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  if (v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a1, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v4);
    CNContact.formattedFullName.getter();
    SemanticValue.init(string:label:)();
    DisplayHint.init(idValue:displayValue:)();
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v30 = *(void *)(v28 + 16);
    unint64_t v29 = *(void *)(v28 + 24);
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28);
    }
    uint64_t v31 = v65;
    *(void *)(v28 + 16) = v30 + 1;
    uint64_t v32 = v62;
    (*(void (**)(unint64_t, char *, uint64_t))(v62 + 32))(v28+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v30, v22, v31);
  }
  else
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t v32 = v62;
  }
  id v33 = objc_msgSend(a2, sel_givenName);
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;

  swift_bridgeObjectRelease();
  uint64_t v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0) {
    uint64_t v37 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    uint64_t v38 = v64;
    uint64_t v39 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v56, a1, v64);
    __swift_storeEnumTagSinglePayload(v39, 0, 1, v38);
    id v40 = objc_msgSend(a2, sel_givenName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SemanticValue.init(string:label:)();
    uint64_t v41 = v57;
    DisplayHint.init(idValue:displayValue:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
    }
    unint64_t v43 = *(void *)(v28 + 16);
    unint64_t v42 = *(void *)(v28 + 24);
    uint64_t v44 = v64;
    if (v43 >= v42 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v28);
    }
    *(void *)(v28 + 16) = v43 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v43, v41, v65);
  }
  else
  {
    uint64_t v44 = v64;
  }
  id v45 = objc_msgSend(a2, sel_familyName);
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v47;

  swift_bridgeObjectRelease();
  uint64_t v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0) {
    uint64_t v49 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v49)
  {
    uint64_t v50 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v59, a1, v44);
    __swift_storeEnumTagSinglePayload(v50, 0, 1, v44);
    id v51 = objc_msgSend(a2, sel_familyName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SemanticValue.init(string:label:)();
    unint64_t v52 = v60;
    DisplayHint.init(idValue:displayValue:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
    }
    unint64_t v54 = *(void *)(v28 + 16);
    unint64_t v53 = *(void *)(v28 + 24);
    if (v54 >= v53 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v28);
    }
    *(void *)(v28 + 16) = v54 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v54, v52, v65);
  }
  return v28;
}

uint64_t DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v62 = a4;
  uint64_t v60 = type metadata accessor for SemanticValue();
  uint64_t v7 = *(void *)(v60 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v60);
  unint64_t v54 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v53 = (char *)&v45 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v52 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v51 = (char *)&v45 - v14;
  uint64_t v15 = type metadata accessor for DisplayHint();
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v59 = (char *)&v45 - v19;
  swift_bridgeObjectRetain();
  uint64_t v61 = a1;
  SemanticValue.init(string:label:)();
  if (!(a5 >> 62))
  {
    uint64_t v20 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    unint64_t v46 = a5 & 0xC000000000000001;
    uint64_t v57 = v55 + 32;
    uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v23 = MEMORY[0x263F8EE78];
    unint64_t v45 = 0x800000022D5A6630;
    uint64_t v49 = v15;
    unint64_t v50 = a5;
    uint64_t v47 = v20;
    unint64_t v48 = v18;
    do
    {
      if (v46) {
        id v24 = (id)MEMORY[0x230F854E0](v22, a5);
      }
      else {
        id v24 = *(id *)(a5 + 8 * v22 + 32);
      }
      unint64_t v25 = v24;
      outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v24);
      if (v26)
      {
        uint64_t v27 = String.sanitizeCNLabel.getter();
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = static String.EMPTY.getter();
        uint64_t v29 = v30;
      }
      uint64_t v31 = *v58;
      uint64_t v32 = (uint64_t)v51;
      uint64_t v33 = v60;
      (*v58)(v51, v61, v60);
      __swift_storeEnumTagSinglePayload(v32, 0, 1, v33);
      String.mapToNLAttributeValue(forType:)(v62, v27, v29);
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
      }
      unint64_t v35 = *(void *)(v23 + 16);
      unint64_t v34 = *(void *)(v23 + 24);
      id v56 = v25;
      if (v35 >= v34 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v23);
      }
      *(void *)(v23 + 16) = v35 + 1;
      unint64_t v36 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      uint64_t v37 = *(void *)(v55 + 72);
      unint64_t v38 = v23 + v36 + v37 * v35;
      uint64_t v39 = *(void (**)(unint64_t, char *, uint64_t))(v55 + 32);
      v39(v38, v59, v15);
      uint64_t v40 = (uint64_t)v52;
      uint64_t v41 = v60;
      v31(v52, v61, v60);
      __swift_storeEnumTagSinglePayload(v40, 0, 1, v41);
      String.mapToNLContactTypeValue(forType:)(v62, v27, v29);
      swift_bridgeObjectRelease();
      SemanticValue.init(string:label:)();
      unint64_t v42 = v48;
      DisplayHint.init(idValue:displayValue:)();
      unint64_t v44 = *(void *)(v23 + 16);
      unint64_t v43 = *(void *)(v23 + 24);
      if (v44 >= v43 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v23);
      }
      ++v22;
      *(void *)(v23 + 16) = v44 + 1;
      uint64_t v15 = v49;
      v39(v23 + v36 + v44 * v37, v42, v49);

      a5 = v50;
    }
    while (v47 != v22);
    swift_bridgeObjectRelease();
    return v23;
  }
  __break(1u);
  return result;
}

uint64_t specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v61 = type metadata accessor for SemanticValue();
  uint64_t v6 = *(void *)(v61 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v61);
  unint64_t v54 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v53 = (char *)&v45 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  unint64_t v52 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v51 = (char *)&v45 - v13;
  uint64_t v60 = type metadata accessor for DisplayHint();
  uint64_t v55 = *(void *)(v60 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v60);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)&v45 - v17;
  swift_bridgeObjectRetain();
  uint64_t v62 = a1;
  SemanticValue.init(string:label:)();
  if (!(a4 >> 62))
  {
    uint64_t v18 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v18 >= 1)
  {
    uint64_t v20 = 0;
    unint64_t v48 = a4 & 0xC000000000000001;
    uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v21 = MEMORY[0x263F8EE78];
    uint64_t v57 = v55 + 32;
    uint64_t v46 = v18;
    unint64_t v47 = 0x800000022D5A6630;
    uint64_t v49 = v16;
    unint64_t v50 = a4;
    do
    {
      if (v48) {
        id v22 = (id)MEMORY[0x230F854E0](v20, a4);
      }
      else {
        id v22 = *(id *)(a4 + 8 * v20 + 32);
      }
      uint64_t v23 = v22;
      id v24 = objc_msgSend(v22, sel_label);
      if (v24)
      {
        unint64_t v25 = v24;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = String.sanitizeCNLabel.getter();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = static String.EMPTY.getter();
        uint64_t v28 = v29;
      }
      uint64_t v30 = *v58;
      uint64_t v31 = (uint64_t)v51;
      uint64_t v32 = v61;
      (*v58)(v51, v62, v61);
      __swift_storeEnumTagSinglePayload(v31, 0, 1, v32);
      String.mapToNLAttributeValue(forType:)(2, v26, v28);
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      unint64_t v34 = *(void *)(v21 + 16);
      unint64_t v33 = *(void *)(v21 + 24);
      id v56 = v23;
      if (v34 >= v33 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v21);
      }
      *(void *)(v21 + 16) = v34 + 1;
      unint64_t v35 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      uint64_t v36 = *(void *)(v55 + 72);
      unint64_t v37 = v21 + v35 + v36 * v34;
      unint64_t v38 = *(void (**)(unint64_t, char *, uint64_t))(v55 + 32);
      v38(v37, v59, v60);
      uint64_t v39 = (uint64_t)v52;
      uint64_t v40 = v61;
      v30(v52, v62, v61);
      __swift_storeEnumTagSinglePayload(v39, 0, 1, v40);
      String.mapToNLContactTypeValue(forType:)(2, v26, v28);
      swift_bridgeObjectRelease();
      SemanticValue.init(string:label:)();
      uint64_t v41 = v49;
      DisplayHint.init(idValue:displayValue:)();
      unint64_t v43 = *(void *)(v21 + 16);
      unint64_t v42 = *(void *)(v21 + 24);
      if (v43 >= v42 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v21);
      }
      uint64_t v44 = v46;
      ++v20;
      *(void *)(v21 + 16) = v43 + 1;
      v38(v21 + v35 + v43 * v36, v41, v60);

      a4 = v50;
    }
    while (v44 != v20);
    swift_bridgeObjectRelease();
    return v21;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(unint64_t, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  void (**v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v64 = type metadata accessor for SemanticValue();
  uint64_t v6 = *(void *)(v64 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v64);
  uint64_t v57 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v56 = (char *)&v48 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v55 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v63 = type metadata accessor for DisplayHint();
  uint64_t v58 = *(void *)(v63 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v63);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)&v48 - v18;
  swift_bridgeObjectRetain();
  uint64_t v65 = a1;
  SemanticValue.init(string:label:)();
  if (!(a4 >> 62))
  {
    uint64_t v19 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_3;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_40;
  }
LABEL_3:
  if (v19 >= 1)
  {
    uint64_t v21 = 0;
    id v51 = a4 & 0xC000000000000001;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    id v22 = MEMORY[0x263F8EE78];
    uint64_t v60 = v58 + 32;
    uint64_t v49 = v19;
    unint64_t v50 = 0x800000022D5A6630;
    unint64_t v53 = v14;
    unint64_t v54 = a4;
    unint64_t v52 = v17;
    do
    {
      if (v51) {
        uint64_t v23 = (id)MEMORY[0x230F854E0](v21, a4);
      }
      else {
        uint64_t v23 = *(id *)(a4 + 8 * v21 + 32);
      }
      id v24 = v23;
      unint64_t v25 = objc_msgSend(v23, sel_label);
      if (v25)
      {
        uint64_t v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = String.sanitizeCNLabel.getter();
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = static String.EMPTY.getter();
        uint64_t v29 = v30;
      }
      uint64_t v31 = v64;
      uint64_t v59 = *v61;
      v59(v14, v65, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v31);
      uint64_t v32 = v27 == 7174503 && v29 == 0xE300000000000000;
      if (!v32 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v33 = v27 == 1701670760 && v29 == 0xE400000000000000;
        if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          unint64_t v34 = v27 == 1802661751 && v29 == 0xE400000000000000;
          if (!v34
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v27 != 0x6C6F6F686373 || v29 != 0xE600000000000000))
          {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
      }
      unint64_t v37 = *(void *)(v22 + 16);
      uint64_t v36 = *(void *)(v22 + 24);
      if (v37 >= v36 >> 1) {
        id v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v22);
      }
      *(void *)(v22 + 16) = v37 + 1;
      unint64_t v38 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      uint64_t v39 = *(void *)(v58 + 72);
      uint64_t v40 = v22 + v38 + v39 * v37;
      uint64_t v41 = *(void (**)(unint64_t, char *, uint64_t))(v58 + 32);
      v41(v40, v62, v63);
      unint64_t v42 = (uint64_t)v55;
      unint64_t v43 = v64;
      v59(v55, v65, v64);
      __swift_storeEnumTagSinglePayload(v42, 0, 1, v43);
      SemanticValue.init(string:label:)();
      uint64_t v44 = v52;
      DisplayHint.init(idValue:displayValue:)();
      uint64_t v46 = *(void *)(v22 + 16);
      uint64_t v45 = *(void *)(v22 + 24);
      if (v46 >= v45 >> 1) {
        id v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v22);
      }
      unint64_t v47 = v49;
      ++v21;
      *(void *)(v22 + 16) = v46 + 1;
      v41(v22 + v38 + v46 * v39, v44, v63);

      uint64_t v14 = v53;
      a4 = v54;
    }
    while (v47 != v21);
    swift_bridgeObjectRelease();
    return v22;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  char v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  BOOL v47;
  int v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (**v63)(char *, uint64_t, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  unint64_t v66 = type metadata accessor for SemanticValue();
  uint64_t v6 = *(void *)(v66 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v66);
  uint64_t v61 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v60 = (char *)&v53 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)&v53 - v14;
  uint64_t v59 = type metadata accessor for DisplayHint();
  uint64_t v62 = *(void *)(v59 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v64 = (char *)&v53 - v17;
  swift_bridgeObjectRetain();
  char v67 = a1;
  SemanticValue.init(string:label:)();
  uint64_t v68 = MEMORY[0x263F8EE78];
  if (!(a4 >> 62))
  {
    uint64_t v18 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_3;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = result;
  if (!result) {
    goto LABEL_75;
  }
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v63 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    unint64_t v54 = v62 + 32;
    uint64_t v55 = a4 & 0xC000000000000001;
    unint64_t v53 = 0x800000022D5A6630;
    id v56 = v18;
    uint64_t v57 = a4;
    do
    {
      if (v55) {
        uint64_t v21 = (id)MEMORY[0x230F854E0](v20, a4);
      }
      else {
        uint64_t v21 = *(id *)(a4 + 8 * v20 + 32);
      }
      id v22 = v21;
      uint64_t v23 = (uint64_t)v13;
      id v24 = objc_msgSend(v21, sel_label, v53, v54);
      if (v24)
      {
        unint64_t v25 = v24;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = String.sanitizeCNLabel.getter();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = static String.EMPTY.getter();
        uint64_t v28 = v29;
      }
      uint64_t v30 = *v63;
      uint64_t v32 = (uint64_t)v65;
      uint64_t v31 = v66;
      (*v63)(v65, v67, v66);
      __swift_storeEnumTagSinglePayload(v32, 0, 1, v31);
      unint64_t v33 = v26 == 1802661751 && v28 == 0xE400000000000000;
      unint64_t v34 = v33;
      if (!v33
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && (v26 != 0x6C616E6F73726570 || v28 != 0xE800000000000000))
      {
        uint64_t v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v37 = v26 == 1701670760 && v28 == 0xE400000000000000;
        unint64_t v38 = v37;
        if ((v36 & 1) == 0 && !v38 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v39 = v26 == 0x6C6F6F686373 && v28 == 0xE600000000000000;
          if (!v39
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v26 != 0x726568746FLL || v28 != 0xE500000000000000))
          {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      uint64_t v41 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41);
      }
      unint64_t v43 = *(void *)(v41 + 16);
      unint64_t v42 = *(void *)(v41 + 24);
      if (v43 >= v42 >> 1) {
        uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v41);
      }
      *(void *)(v41 + 16) = v43 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v62 + 32))(v41+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v43, v64, v59);
      uint64_t v68 = v41;
      uint64_t v13 = (char *)v23;
      uint64_t v44 = v66;
      v30((char *)v23, v67, v66);
      __swift_storeEnumTagSinglePayload(v23, 0, 1, v44);
      a4 = v57;
      if ((v34 & 1) != 0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v26 == 0x6C616E6F73726570 ? (uint64_t v45 = v28 == 0xE800000000000000) : (uint64_t v45 = 0),
            v45
         || ((uint64_t v46 = _stringCompareWithSmolCheck(_:_:expecting:)(), v26 == 1701670760)
           ? (unint64_t v47 = v28 == 0xE400000000000000)
           : (unint64_t v47 = 0),
             !v47 ? (unint64_t v48 = 0) : (unint64_t v48 = 1),
             (v46 & 1) != 0
          || v48
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || (v26 == 0x6C6F6F686373 ? (uint64_t v49 = v28 == 0xE600000000000000) : (uint64_t v49 = 0),
              v49
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
           || (v26 == 0x726568746FLL ? (unint64_t v50 = v28 == 0xE500000000000000) : (unint64_t v50 = 0),
               v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))))
      {
        swift_bridgeObjectRelease();
      }
      ++v20;
      SemanticValue.init(string:label:)();
      id v51 = (uint64_t)v58;
      DisplayHint.init(idValue:displayValue:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v52 = *(void *)(v68 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v52);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v51);
    }
    while (v56 != v20);
    swift_bridgeObjectRelease();
    return v68;
  }
  return result;
}

void DisplayHint.description.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  MEMORY[0x270FA5388](v0 - 8);
  OUTLINED_FUNCTION_11_3();
  uint64_t v3 = v1 - v2;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v45 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v45 = 40;
  unint64_t v46 = 0xE100000000000000;
  DisplayHint.displayValue.getter();
  type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_12_5((uint64_t)v12);
  if (v13)
  {
    outlined destroy of SemanticValue?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)0xE300000000000000;
    uint64_t v14 = 7104878;
    goto LABEL_6;
  }
  uint64_t v14 = SemanticValue.label.getter();
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_23();
  v17();
  if (!v16) {
    goto LABEL_5;
  }
LABEL_6:
  v18._uint64_t countAndFlagsBits = v14;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  DisplayHint.displayValue.getter();
  OUTLINED_FUNCTION_12_5((uint64_t)v10);
  if (v13)
  {
    outlined destroy of SemanticValue?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  }
  else
  {
    SemanticValue.string.getter();
    uint64_t v21 = v20;
    OUTLINED_FUNCTION_19_4();
    OUTLINED_FUNCTION_23();
    v22();
    if (v21)
    {
      uint64_t v23 = String.debugDescription.getter();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  unint64_t v25 = (void *)0xE300000000000000;
  uint64_t v23 = 7104878;
LABEL_12:
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x203E3D2029;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  uint64_t v29 = v45;
  unint64_t v28 = v46;
  uint64_t v45 = 40;
  unint64_t v46 = 0xE100000000000000;
  DisplayHint.idValue.getter();
  OUTLINED_FUNCTION_12_5((uint64_t)v7);
  if (v13)
  {
    outlined destroy of SemanticValue?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)0xE300000000000000;
    uint64_t v30 = 7104878;
    goto LABEL_17;
  }
  uint64_t v30 = SemanticValue.label.getter();
  uint64_t v32 = v31;
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_23();
  v33();
  if (!v32) {
    goto LABEL_16;
  }
LABEL_17:
  v34._uint64_t countAndFlagsBits = v30;
  v34._object = v32;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  DisplayHint.idValue.getter();
  OUTLINED_FUNCTION_12_5(v3);
  if (v13)
  {
    outlined destroy of SemanticValue?(v3, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_22:
    uint64_t v39 = MEMORY[0x230F85370](7104878, 0xE300000000000000);
    goto LABEL_23;
  }
  SemanticValue.string.getter();
  uint64_t v37 = v36;
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_23();
  v38();
  if (!v37) {
    goto LABEL_22;
  }
  uint64_t v39 = specialized Collection.prefix(_:)(30);
LABEL_23:
  v40._uint64_t countAndFlagsBits = MEMORY[0x230F84FD0](v39);
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 41;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  uint64_t v42 = v45;
  unint64_t v43 = (void *)v46;
  uint64_t v45 = v29;
  unint64_t v46 = v28;
  swift_bridgeObjectRetain();
  v44._uint64_t countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = type metadata accessor for DisplayHint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v6;
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * a1;
  return v8(v10, a2, v9);
}

uint64_t outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SemanticValue?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_23();
  v3();
  return a1;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SASTTemplateItem]);
            unint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            uint64_t v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t **, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t **a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SASTTemplateItem]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
  }
  return result;
}

uint64_t (*specialized Array.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    uint64_t v7 = MEMORY[0x230F854E0](a2, a3);
  }
  else {
    uint64_t v7 = swift_unknownObjectRetain();
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_1_11(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_2_14()
{
  return v0;
}

void OUTLINED_FUNCTION_3_9()
{
  JUMPOUT(0x230F85DE0);
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_7_8()
{
  *(void *)(v0 + 16) = v1;
  return v0
       + ((*(unsigned __int8 *)(*(void *)(v3 - 192) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 192) + 80))
       + *(void *)(*(void *)(v3 - 192) + 72) * v2;
}

BOOL OUTLINED_FUNCTION_8_8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return swift_slowAlloc();
}

__n128 OUTLINED_FUNCTION_14_5()
{
  __n128 result = *(__n128 *)(v1 - 192);
  *uint64_t v0 = result.n128_u32[0];
  return result;
}

__n128 OUTLINED_FUNCTION_15_6(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  __n128 result = *(__n128 *)(v2 - 176);
  *uint64_t v1 = result.n128_u32[0];
  return result;
}

unint64_t OUTLINED_FUNCTION_16_5()
{
  *(void *)(v0 + 16) = v1;
  return v0
       + ((*(unsigned __int8 *)(*(void *)(v3 - 160) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 160) + 80))
       + *(void *)(*(void *)(v3 - 160) + 72) * v2;
}

void OUTLINED_FUNCTION_17_6()
{
  **(void **)(v1 - 192) = *v0;
}

void OUTLINED_FUNCTION_18_6()
{
  **(void **)(v1 - 216) = *v0;
}

void OUTLINED_FUNCTION_22_4()
{
  *(void *)(v1 - 128) = v0 + 8;
  *(void *)(v1 - 160) = v1 - 112;
}

void OUTLINED_FUNCTION_23_4()
{
  *(void *)(v1 - 144) = v0 + 8;
  *(void *)(v1 - 176) = v1 - 128;
}

void OUTLINED_FUNCTION_25_6()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_26_5()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_27_6()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_32_5@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void OUTLINED_FUNCTION_34_5(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_35_4()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_36_4()
{
  return type metadata accessor for Logger();
}

BOOL OUTLINED_FUNCTION_37_4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_38_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  *uint64_t v0 = v1;
  *(void *)(v3 - 112) = v2;
  uint64_t v5 = *(void *)(v3 - 144);
  return outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v0, v5);
}

void OUTLINED_FUNCTION_42_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 320) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return outlined destroy of SemanticValue?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_49_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 208) = a2 + 8;
  *(void *)(v3 - 160) = v2;
  *(void *)(v3 - 152) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_52_1@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

void OUTLINED_FUNCTION_54_0()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_55_0@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  *(void *)(v2 - 128) = v0;
  uint64_t v4 = *(void *)(v2 - 160);
  return outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v1, v4);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return v0;
}

uint64_t ContactsCommonCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1, &demangling cache variable for type metadata for URL?);
  return v10;
}

uint64_t ContactsCommonCATs.genericError()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.meCardSetup(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsCommonCATs.meCardSetup(device:));
}

uint64_t ContactsCommonCATs.meCardSetup(device:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_27_2();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22D59FD50;
  *(void *)(v2 + 32) = 0x656369766564;
  *(void *)(v2 + 40) = 0xE600000000000000;
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  uint64_t v7 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D058]
                                                                                    + MEMORY[0x263F6D058]);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = ContactsCommonCATs.meCardSetup(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD00000000000001ALL, 0x800000022D5A81F0, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ContactsCommonCATs.promptCancelled()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.promptForContact()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.unsupportedAction()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.unsupportedAuthFailed()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_13_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_2();
  *(void *)(v1 + 48) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D59FD50;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = 0x800000022D5A8130;
  outlined init with copy of URL?(v0, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_1(v6);
  if (v7)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v8 + 32))();
  }
  uint64_t v9 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v1 + 56) = v9;
  *uint64_t v9 = v1;
  v9[1] = ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:);
  OUTLINED_FUNCTION_1_3();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

uint64_t ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)()
{
  OUTLINED_FUNCTION_4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_13_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_2();
  *(void *)(v1 + 48) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_22D59FD50;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = 0x800000022D5A80E0;
  outlined init with copy of URL?(v0, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_1(v6);
  if (v7)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_51();
    (*(void (**)(void))(v8 + 32))();
  }
  uint64_t v9 = (void *)OUTLINED_FUNCTION_6_4();
  *(void *)(v1 + 56) = v9;
  *uint64_t v9 = v1;
  v9[1] = ContactsCommonCATs.unsupportedContactNotFound(requestedContact:);
  OUTLINED_FUNCTION_1_3();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

uint64_t ContactsCommonCATs.unsupportedLearnPronunciation()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.unsupportedMissingMeCard(isMe:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 56) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_2_3((uint64_t)ContactsCommonCATs.unsupportedMissingMeCard(isMe:));
}

uint64_t ContactsCommonCATs.unsupportedMissingMeCard(isMe:)()
{
  OUTLINED_FUNCTION_37();
  char v1 = *(unsigned char *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_27_2();
  *(void *)(v2 + 32) = 1699574633;
  *(void *)(v2 + 40) = 0xE400000000000000;
  *(void *)(v2 + 72) = MEMORY[0x263F8D4F8];
  uint64_t v3 = (int *)MEMORY[0x263F6D058];
  *(unsigned char *)(v2 + 48) = v1;
  uint64_t v7 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((char *)v3 + *v3);
  *(void *)(v0 + 32) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22D59FD50;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = ContactsCommonCATs.unsupportedMissingMeCard(isMe:);
  uint64_t v5 = *(void *)(v0 + 16);
  return v7(v5, 0xD000000000000027, 0x800000022D5A80B0, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ContactsCommonCATs.unsupportedRelationshipNotFound()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v0 = OUTLINED_FUNCTION_6_4();
  char v1 = (void *)OUTLINED_FUNCTION_4_8(v0);
  *char v1 = v2;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_8_9();
  return v3();
}

uint64_t ContactsCommonCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ContactsCommonCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsCommonCATs.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ContactsCommonCATs()
{
  uint64_t result = type metadata singleton initialization cache for ContactsCommonCATs;
  if (!type metadata singleton initialization cache for ContactsCommonCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactsCommonCATs()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ContactsCommonCATs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactsCommonCATs);
}

uint64_t ObjC metadata update function for ContactsCommonCATs()
{
  return type metadata accessor for ContactsCommonCATs();
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return v0;
}

uint64_t GetContactAttributeCATs.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, void *a10)
{
  unint64_t v11 = v10;
  int v149 = a8;
  unint64_t v160 = a1;
  unint64_t v161 = a2;
  uint64_t v154 = a9;
  uint64_t v162 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v134 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_15();
  uint64_t v133 = v20 - v19;
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v158);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_25();
  uint64_t v146 = (void **)v22;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_25();
  uint64_t v145 = v24;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_25();
  v151 = v27;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_58_0();
  uint64_t v143 = v30;
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v152 = v31;
  uint64_t v153 = v32;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_25();
  uint64_t v147 = v37;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2_15();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_58_0();
  uint64_t v138 = v40;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v42 = OUTLINED_FUNCTION_10_0(v41);
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_2_15();
  uint64_t v44 = MEMORY[0x270FA5388](v43);
  unint64_t v46 = (char *)&v131 - v45;
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_58_0();
  uint64_t v163 = v47;
  uint64_t v48 = type metadata accessor for Locale();
  uint64_t v49 = OUTLINED_FUNCTION_10_0(v48);
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_15();
  uint64_t v52 = v51 - v50;
  uint64_t v53 = type metadata accessor for DialogPerson();
  id v54 = a4;
  swift_bridgeObjectRetain();
  uint64_t v155 = a6;
  Locale.init(identifier:)();
  id v156 = v54;
  int v157 = a5;
  uint64_t v150 = v53;
  uint64_t v159 = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v54, a5, v52, 0);
  uint64_t v55 = a3;
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a3);
  if (v56)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
    SpeakableString.init(print:speak:)();
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
  }
  __swift_storeEnumTagSinglePayload(v163, v57, 1, v162);
  unint64_t v58 = v160;
  uint64_t v59 = v161;
  int v148 = GetContactAttributeCATsModern.hasSameLabels(matches:alternatives:)(v160, v161);
  switch((unint64_t)OUTLINED_FUNCTION_19_5())
  {
    case 1uLL:
      Optional<A>.toContactsEmailHandles.getter(v58, v60, v61, v62, v63, v64, v65, v66, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141,
        v142,
        v143,
        v144,
        v145,
        (uint64_t)v146);
      uint64_t v55 = v76;
      Optional<A>.toContactsEmailHandles.getter(v59, v77, v78, v79, v80, v81, v82, v83, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141,
        v142,
        v143,
        v144,
        v145,
        (uint64_t)v146);
      OUTLINED_FUNCTION_20_7();
      OUTLINED_FUNCTION_23_5();
      OUTLINED_FUNCTION_6_12();
      OUTLINED_FUNCTION_17_7();
      GetContactAttributeCATs.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v46);
      if (OUTLINED_FUNCTION_15_7() != 1) {
        goto LABEL_22;
      }
      goto LABEL_9;
    case 2uLL:
      Optional<A>.toContactsPhoneHandles.getter(v58, v60, v61, v62, v63, v64, v65, v66, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141,
        v142,
        v143,
        v144,
        v145,
        (uint64_t)v146);
      uint64_t v55 = v88;
      Optional<A>.toContactsPhoneHandles.getter(v59, v89, v90, v91, v92, v93, v94, v95, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141,
        v142,
        v143,
        v144,
        v145,
        (uint64_t)v146);
      OUTLINED_FUNCTION_20_7();
      OUTLINED_FUNCTION_23_5();
      OUTLINED_FUNCTION_6_12();
      OUTLINED_FUNCTION_17_7();
      GetContactAttributeCATs.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v46);
      if (OUTLINED_FUNCTION_15_7() != 1) {
        goto LABEL_22;
      }
LABEL_9:
      OUTLINED_FUNCTION_16_6();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();

      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      uint64_t v84 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_5_11(v84, v85);
      goto LABEL_37;
    case 3uLL:
      if (v58)
      {
        uint64_t v96 = (uint64_t)v46;
        swift_bridgeObjectRetain();
        uint64_t v97 = a7;
        unint64_t v98 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v58, v155, a7);
      }
      else
      {
        uint64_t v97 = a7;
        uint64_t v96 = (uint64_t)v46;
        unint64_t v98 = MEMORY[0x263F8EE78];
      }
      uint64_t v114 = v162;
      if (!__swift_getEnumTagSinglePayload(v163, 1, v162))
      {
        uint64_t v115 = v134;
        uint64_t v116 = v133;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16))(v133, v163, v114);
        v165._uint64_t countAndFlagsBits = SpeakableString.print.getter();
        int v117 = ContactNLIntent.ContactPostalAddressField.init(rawValue:)(v165);
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v162);
        BOOL v118 = v117 == 5;
        uint64_t v119 = v162;
        if (!v118)
        {
          if (v98 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v120 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v121 = (uint64_t)v132;
          if (v120)
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v98 & 0xC000000000000001) == 0, v98);
            if ((v98 & 0xC000000000000001) != 0)
            {
              uint64_t v130 = MEMORY[0x230F854E0](0, v98);
              swift_bridgeObjectRelease();
              outlined init with copy of SpeakableString?(v130 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel, v121);
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v122 = *(void *)(v98 + 32);
              swift_retain();
              swift_bridgeObjectRelease();
              outlined init with copy of SpeakableString?(v122 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel, v121);
              swift_release();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            __swift_storeEnumTagSinglePayload(v121, 1, 1, v119);
          }
          outlined assign with take of SpeakableString?(v121, v163);
        }
      }
      unint64_t v123 = v161;
      if (v161)
      {
        swift_bridgeObjectRetain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v123, v155, v97);
      }
      outlined init with copy of SpeakableString?(v163, v96);
      swift_retain();
      OUTLINED_FUNCTION_6_12();
      uint64_t v124 = v146;
      GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of SpeakableString?(v96);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v164 = *v124;
        uint64_t v125 = v164;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        swift_willThrowTypedImpl();

        type metadata accessor for ContactsError();
        lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
        uint64_t v126 = OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_18_7(v126, v127);
        goto LABEL_37;
      }
      id v129 = *(void (**)(void))(v153 + 32);
      OUTLINED_FUNCTION_8_10();
      v129();
      swift_release();
      OUTLINED_FUNCTION_8_10();
      v129();
      break;
    case 4uLL:
      unint64_t v99 = type metadata accessor for DialogCalendar();
      id v100 = a10;
      id v101 = v156;
      unint64_t v102 = DialogCalendar.init(contact:mockGlobals:)(v101, a10);
      type metadata accessor for ContactsAgeInfo();
      unint64_t v103 = ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v101, (void (*)(uint64_t, char *, uint64_t))v55, 0);
      OUTLINED_FUNCTION_23_5();
      GetContactAttributeCATs.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(v102, v103, v99, v157 & 1);
      swift_release();
      swift_release();
      swift_release();
      if (OUTLINED_FUNCTION_15_7() != 1) {
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_16_6();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();

      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      uint64_t v104 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_5_11(v104, v105);
      uint64_t v87 = v106 - 2;
      goto LABEL_37;
    case 5uLL:
      type metadata accessor for DialogCalendar();
      id v107 = a10;
      uint64_t v55 = (void *)DialogCalendar.init(contact:mockGlobals:)(v156, a10);
      OUTLINED_FUNCTION_23_5();
      GetContactAttributeCATs.intentHandledShowBirthday(birthdayInfo:contact:isMe:)((unint64_t)v55, (unint64_t)v46, v157 & 1);
      swift_release();
      swift_release();
      if (OUTLINED_FUNCTION_15_7() != 1) {
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_16_6();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();

      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      uint64_t v108 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_5_11(v108, v109);
      uint64_t v87 = v110 + 3;
      goto LABEL_37;
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      OUTLINED_FUNCTION_19_5();
      unint64_t v161 = v11;
      OUTLINED_FUNCTION_19_5();
      id v67 = OUTLINED_FUNCTION_19_5();
      id v68 = v156;
      CNContact.requestedName(_:)((uint64_t)v67);
      SpeakableString.init(print:speak:)();
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v162);
      id v69 = v68;
      swift_bridgeObjectRetain();
      Locale.init(identifier:)();
      uint64_t v55 = (void *)DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v69, 1, v52, 0);
      char v70 = v151;
      GetContactAttributeCATs.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)();
      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v46);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_22;
      }
      uint64_t v164 = *v70;
      unint64_t v71 = v164;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();

      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      uint64_t v72 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_5_11(v72, v73);
      OUTLINED_FUNCTION_9_10(v75, v74 - 1);
      goto LABEL_19;
    case 0xBuLL:
      uint64_t v55 = v46;
      uint64_t v111 = v159;
      DialogPerson.company.getter();
      swift_retain();
      GetContactAttributeCATs.intentHandledShowCompany(isMe:companyName:contact:)(v157 & 1, (uint64_t)v55, v111);
      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v55);
      if (OUTLINED_FUNCTION_15_7() == 1)
      {
        OUTLINED_FUNCTION_16_6();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        swift_willThrowTypedImpl();

        type metadata accessor for ContactsError();
        lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
        uint64_t v112 = OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_18_7(v112, v113);
LABEL_37:
        OUTLINED_FUNCTION_9_10(v86, v87);
        swift_storeEnumTagMultiPayload();
LABEL_38:
        swift_willThrow();
        swift_release();
      }
      else
      {
LABEL_22:
        OUTLINED_FUNCTION_14_6();
        OUTLINED_FUNCTION_8_10();
        ((void (*)(void))v55)();
        swift_release();
        OUTLINED_FUNCTION_8_10();
        ((void (*)(void))v55)();
      }
      break;
    default:
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      OUTLINED_FUNCTION_20_2();
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_38;
  }
  return outlined destroy of SpeakableString?(v163);
}

uint64_t GetContactAttributeCATs.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v95 = a1;
  HIDWORD(v97) = a8;
  uint64_t v100 = a6;
  HIDWORD(v102) = a5;
  uint64_t v96 = a2;
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v99);
  OUTLINED_FUNCTION_4_4();
  uint64_t v90 = (void **)v13;
  OUTLINED_FUNCTION_17();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void **)((char *)&v87 - v16);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (void **)((char *)&v87 - v18);
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v91 = v21;
  uint64_t v92 = v20;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_4_4();
  uint64_t v89 = v22;
  OUTLINED_FUNCTION_17();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v87 - v25;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_58_0();
  uint64_t v88 = v27;
  uint64_t v28 = type metadata accessor for Locale();
  uint64_t v29 = OUTLINED_FUNCTION_10_0(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_15();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = OUTLINED_FUNCTION_10_0(v33);
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_15();
  uint64_t v37 = v36 - v35;
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a3);
  uint64_t v93 = a9;
  if (v38)
  {
    SpeakableString.init(print:speak:)();
    uint64_t v39 = type metadata accessor for SpeakableString();
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v39 = type metadata accessor for SpeakableString();
    uint64_t v40 = 1;
  }
  uint64_t v101 = v37;
  __swift_storeEnumTagSinglePayload(v37, v40, 1, v39);
  type metadata accessor for DialogPerson();
  id v41 = a4;
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v41, BYTE4(v102) & 1, v32, 0);
  id v42 = objc_msgSend(a3, sel_contactAttributeType);
  if (v42 == (id)1)
  {
    Optional<A>.toContactsEmailHandles.getter(v95, v43, v44, v45, v46, v47, v48, v49, v87, v88, v89, (uint64_t)v90, v91, v92, v93, v94, v95, v96, v97,
      v98,
      v99,
      v100,
      v101,
      v102);
    Optional<A>.toContactsEmailHandles.getter(v96, v63, v64, v65, v66, v67, v68, v69, v87, v88, v89, (uint64_t)v90, v91, v92, v93, v94, v95, v96, v97,
      v98,
      v99,
      v100,
      v101,
      v102);
    swift_retain();
    uint64_t v70 = v101;
    GetContactAttributeCATs.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v77 = v92;
      uint64_t v78 = *(void (**)(char *, void **, uint64_t))(v91 + 32);
      v78(v26, v17, v92);
      swift_release();
      outlined destroy of SpeakableString?(v70);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v78)(v93, v26, v77);
    }
    unint64_t v103 = *v17;
    unint64_t v71 = v103;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    uint64_t v72 = OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_11_10(v72, v73);
    goto LABEL_20;
  }
  if (v42 != (id)3)
  {
    if (v42 != (id)2)
    {
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      OUTLINED_FUNCTION_20_2();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      return outlined destroy of SpeakableString?(v101);
    }
    Optional<A>.toContactsPhoneHandles.getter(v95, v43, v44, v45, v46, v47, v48, v49, v87, v88, v89, (uint64_t)v90, v91, v92, v93, v94, v95, v96, v97,
      v98,
      v99,
      v100,
      v101,
      v102);
    Optional<A>.toContactsPhoneHandles.getter(v96, v50, v51, v52, v53, v54, v55, v56, v87, v88, v89, (uint64_t)v90, v91, v92, v93, v94, v95, v96, v97,
      v98,
      v99,
      v100,
      v101,
      v102);
    swift_retain();
    OUTLINED_FUNCTION_10_11();
    uint64_t v57 = v101;
    GetContactAttributeCATs.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      os_log_type_t v75 = *(void (**)(void))(v91 + 32);
      OUTLINED_FUNCTION_13_9();
      v75();
      swift_release();
      outlined destroy of SpeakableString?(v57);
      OUTLINED_FUNCTION_13_9();
      return ((uint64_t (*)(void))v75)();
    }
    unint64_t v103 = *v19;
    unint64_t v58 = v103;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    uint64_t v59 = OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_11_10(v59, v60);
LABEL_20:
    OUTLINED_FUNCTION_9_10(v61, v62);
    goto LABEL_21;
  }
  unint64_t v74 = v95;
  if (v95)
  {
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v74, v100, a7);
  }
  uint64_t v79 = v90;
  unint64_t v80 = v96;
  if (v96)
  {
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v80, v100, a7);
  }
  swift_retain();
  OUTLINED_FUNCTION_10_11();
  uint64_t v81 = v101;
  GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v103 = *v79;
    uint64_t v82 = v103;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    uint64_t v83 = OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_11_10(v83, v84);
    uint64_t v62 = v85 | 2;
    goto LABEL_20;
  }
  uint64_t v86 = *(void (**)(void))(v91 + 32);
  OUTLINED_FUNCTION_13_9();
  v86();
  swift_release();
  outlined destroy of SpeakableString?(v81);
  OUTLINED_FUNCTION_13_9();
  return ((uint64_t (*)(void))v86)();
}

void OUTLINED_FUNCTION_2_15()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_5_11(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_9_10(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_10_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_10(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_16_6()
{
  *(void *)(v1 - 72) = *v0;
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_7(uint64_t a1, uint64_t a2)
{
  return a2;
}

id OUTLINED_FUNCTION_19_5()
{
  return [v0 (SEL)(v1 + 431)];
}

uint64_t OUTLINED_FUNCTION_20_7()
{
  uint64_t v3 = *(void *)(v1 - 112);
  return outlined init with copy of SpeakableString?(v3, v0);
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return swift_retain();
}

uint64_t DialogDuration.init(_:mockGlobals:)()
{
  OUTLINED_FUNCTION_0_8();
  type metadata accessor for DialogDuration.Builder();
  swift_allocObject();
  DialogDuration.Builder.init()();
  dispatch thunk of DialogDuration.Builder.withSecs(_:)();
  swift_release();
  uint64_t v1 = dispatch thunk of DialogDuration.__allocating_init(builder:)();
  if (v0)
  {
    swift_retain();
    dispatch thunk of DialogDuration.mockGlobals.setter();
    swift_release();
  }
  return v1;
}

uint64_t DialogCalendar.init(_:mockGlobals:)()
{
  OUTLINED_FUNCTION_0_8();
  type metadata accessor for DialogCalendar.Builder();
  swift_allocObject();
  DialogCalendar.Builder.init()();
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
  swift_release();
  uint64_t v1 = dispatch thunk of DialogCalendar.__allocating_init(builder:)();
  if (v0)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.mockGlobals.setter();
    swift_release();
  }
  return v1;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return 0;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, MEMORY[0x263F74140], a2);
}

{
  return specialized Collection.first.getter(a1, MEMORY[0x263F71570], a2);
}

{
  return specialized Collection.first.getter(a1, MEMORY[0x263F72710], a2);
}

{
  return specialized Collection.first.getter(a1, MEMORY[0x263F727E0], a2);
}

{
  return specialized Collection.first.getter(a1, MEMORY[0x263F6FBA8], a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0);
  uint64_t v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80)), v6);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v8, 1, v7);
}

uint64_t protocol witness for ContactResolverProtocol.makeRecommendations(queries:config:) in conformance ContactResolver()
{
  return dispatch thunk of ContactResolver.makeRecommendations(queries:config:)();
}

uint64_t Recommendation<A>.assignConfidence()()
{
  uint64_t v2 = type metadata accessor for Contact();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_10();
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = (uint64_t *)(v17 - v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17 - v16, v0, v12);
  uint64_t v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v18, v12);
  if (v19 == *MEMORY[0x263F6D398])
  {
    uint64_t v20 = OUTLINED_FUNCTION_4_13();
    v21(v20);
    OUTLINED_FUNCTION_12_9();
    v22();
    Contact.id.getter();
    OUTLINED_FUNCTION_8_11();
    uint64_t v23 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0) {
      uint64_t v23 = (unint64_t)v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v23)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
      uint64_t v24 = v2;
      unint64_t v25 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_22D59FD50;
      static Contact.confidenceScore = 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 16))(v26 + v25, v11, v24);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v24);
      return v26;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.siriContacts);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_22D49E000, v49, v50, "ContactResolver: Contact resolved but no ID is present, will not consider as a match", v51, 2u);
      MEMORY[0x230F85DE0](v51, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v2);
    return MEMORY[0x263F8EE78];
  }
  if (v19 == *MEMORY[0x263F6D380])
  {
    uint64_t v27 = OUTLINED_FUNCTION_4_13();
    v28(v27);
    OUTLINED_FUNCTION_12_9();
    v29();
    uint64_t v30 = Contact.id.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0) {
      uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v33)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
      uint64_t v34 = v2;
      unint64_t v35 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_22D59FD50;
      static Contact.confidenceScore = 0;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v26 + v35, v1, v34);
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v1, v34);
      return v26;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.siriContacts);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_22D49E000, v53, v54, "ContactResolver: Contact resolved but no ID is present, will not consider as a match", v55, 2u);
      MEMORY[0x230F85DE0](v55, -1, -1);
    }

    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v1, v2);
    return MEMORY[0x263F8EE78];
  }
  if (v19 != *MEMORY[0x263F6D388])
  {
    if (v19 != *MEMORY[0x263F6D390])
    {
      MEMORY[0x270FA5388](v19);
      *(&v57 - 2) = v0;
      fatalError(_:file:line:)((uint64_t (*)(void))partial apply for implicit closure #1 in Recommendation<A>.assignConfidence());
    }
    return MEMORY[0x263F8EE78];
  }
  uint64_t v36 = OUTLINED_FUNCTION_4_13();
  v37(v36);
  uint64_t v38 = *v18;
  uint64_t v39 = *(void *)(*v18 + 16);
  if (!v39)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v60 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v26 = v60;
  id v41 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v40 = v4 + 16;
  uint64_t v42 = *(unsigned __int8 *)(v40 + 64);
  uint64_t v57 = v38;
  uint64_t v58 = (v42 + 32) & ~v42;
  uint64_t v59 = v41;
  uint64_t v43 = v38 + v58;
  uint64_t v44 = *(void *)(v40 + 56);
  uint64_t v45 = (void (**)(uint64_t, char *, uint64_t))(v40 + 16);
  do
  {
    v59(v8, v43, v2);
    static Contact.confidenceScore = 0;
    uint64_t v60 = v26;
    uint64_t v46 = v2;
    unint64_t v47 = *(void *)(v26 + 16);
    if (v47 >= *(void *)(v26 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v26 = v60;
    }
    *(void *)(v26 + 16) = v47 + 1;
    (*v45)(v26 + v58 + v47 * v44, v8, v46);
    v43 += v44;
    --v39;
    uint64_t v2 = v46;
  }
  while (v39);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t Contact.asHighConfidenceMatch.getter@<X0>(uint64_t a1@<X8>)
{
  return Contact.asHighConfidenceMatch.getter(1, a1);
}

uint64_t Contact.asLowConfidenceMatch.getter@<X0>(uint64_t a1@<X8>)
{
  return Contact.asHighConfidenceMatch.getter(0, a1);
}

uint64_t Contact.asHighConfidenceMatch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static Contact.confidenceScore = a1;
  uint64_t v4 = type metadata accessor for Contact();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v2, v4);
}

unint64_t implicit closure #1 in Recommendation<A>.assignConfidence()()
{
  uint64_t v0 = type metadata accessor for ContactsError();
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  lazy protocol witness table accessor for type Recommendation<Contact> and conformance Recommendation<A>();
  *uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v2[1] = v3;
  swift_storeEnumTagMultiPayload();
  unint64_t v4 = ContactsError.errorDescription.getter();
  outlined destroy of ContactsError((uint64_t)v2);
  return v4;
}

uint64_t Contact.formattedFullName.getter()
{
  uint64_t v1 = type metadata accessor for PersonNameComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_5_0();
  PersonNameComponents.init()();
  Contact.namePrefix.getter();
  PersonNameComponents.namePrefix.setter();
  Contact.givenName.getter();
  PersonNameComponents.givenName.setter();
  Contact.middleName.getter();
  PersonNameComponents.middleName.setter();
  Contact.familyName.getter();
  PersonNameComponents.familyName.setter();
  Contact.nameSuffix.getter();
  PersonNameComponents.nameSuffix.setter();
  uint64_t v5 = self;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v5, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v8;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PersonNameComponents();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  PersonNameComponents.init()();
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v1);
  PersonNameComponents.namePrefix.setter();
  outlined bridged method (pb) of @objc Contact.givenName.getter(v1);
  PersonNameComponents.givenName.setter();
  outlined bridged method (pb) of @objc Contact.middleName.getter(v1);
  PersonNameComponents.middleName.setter();
  outlined bridged method (pb) of @objc Contact.familyName.getter(v1);
  PersonNameComponents.familyName.setter();
  outlined bridged method (pb) of @objc Contact.nameSuffix.getter(v1);
  PersonNameComponents.nameSuffix.setter();
  uint64_t v6 = self;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = objc_msgSend(v6, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

BOOL Contact.isEmpty.getter()
{
  type metadata accessor for Contact();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  v53[1] = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_25();
  uint64_t v57 = v6;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_25();
  unint64_t v58 = v8;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_25();
  uint64_t v56 = v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_25();
  uint64_t v55 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_25();
  uint64_t v59 = v14;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_25();
  uint64_t v54 = v16;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_13_10();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = Contact.namePrefix.getter();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v24 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v23)
  {
    BOOL v25 = 0;
  }
  else
  {
    uint64_t v26 = Contact.nameSuffix.getter();
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v25 = v29 == 0;
  }
  uint64_t v30 = *(void (**)(void))(v2 + 8);
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (!v25)
  {
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_1_12();
    v24();
LABEL_37:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_3_10();
    v24();
LABEL_38:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_1_12();
    v24();
LABEL_39:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_3_10();
    v24();
LABEL_40:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_1_12();
    v24();
    goto LABEL_41;
  }
  uint64_t v31 = Contact.givenName.getter();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  if ((v33 & 0x2000000000000000) != 0) {
    uint64_t v34 = HIBYTE(v33) & 0xF;
  }
  else {
    uint64_t v34 = v31 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v34) {
    goto LABEL_37;
  }
  uint64_t v35 = Contact.middleName.getter();
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if ((v37 & 0x2000000000000000) != 0) {
    uint64_t v38 = HIBYTE(v37) & 0xF;
  }
  else {
    uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_2_16();
  v30();
  uint64_t v39 = v54;
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v38) {
    goto LABEL_38;
  }
  Contact.familyName.getter();
  OUTLINED_FUNCTION_8_11();
  if ((v0 & 0x2000000000000000) != 0) {
    uint64_t v40 = HIBYTE(v0) & 0xF;
  }
  else {
    uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_2_16();
  v30();
  unint64_t v41 = v59;
  OUTLINED_FUNCTION_1_12();
  v24();
  uint64_t v42 = v57;
  if (v40) {
    goto LABEL_39;
  }
  Contact.organizationName.getter();
  OUTLINED_FUNCTION_8_11();
  if ((v41 & 0x2000000000000000) != 0) {
    uint64_t v43 = HIBYTE(v41) & 0xF;
  }
  else {
    uint64_t v43 = v41 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v43) {
    goto LABEL_40;
  }
  uint64_t v59 = *(void *)(Contact.contactRelations.getter() + 16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v59)
  {
LABEL_41:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_3_10();
    v24();
LABEL_42:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_3_10();
    v24();
    goto LABEL_43;
  }
  uint64_t v59 = Contact.nickname.getter();
  unint64_t v45 = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = HIBYTE(v45) & 0xF;
  BOOL v47 = (v45 & 0x2000000000000000) == 0;
  unint64_t v48 = v58;
  if (v47) {
    uint64_t v46 = v59 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v59 = v46;
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v59) {
    goto LABEL_42;
  }
  uint64_t v49 = *(void *)(Contact.handles.getter() + 16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v49)
  {
LABEL_43:
    OUTLINED_FUNCTION_2_16();
    v30();
    OUTLINED_FUNCTION_3_10();
    v24();
LABEL_44:
    BOOL v51 = 0;
    goto LABEL_45;
  }
  Contact.id.getter();
  OUTLINED_FUNCTION_8_11();
  if ((v48 & 0x2000000000000000) != 0) {
    uint64_t v50 = HIBYTE(v48) & 0xF;
  }
  else {
    uint64_t v50 = v42 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_2_16();
  v30();
  OUTLINED_FUNCTION_1_12();
  v24();
  if (v50) {
    goto LABEL_44;
  }
  BOOL v51 = Contact.isMe.getter() == 2;
LABEL_45:
  OUTLINED_FUNCTION_2_16();
  v30();
  return v51;
}

uint64_t Contact.asContactQuery.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_4();
  uint64_t v51 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  uint64_t v50 = v6;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_4();
  uint64_t v53 = v10;
  uint64_t v11 = type metadata accessor for ContactHandle.HandleType();
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  uint64_t v14 = OUTLINED_FUNCTION_10_0(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  uint64_t v19 = OUTLINED_FUNCTION_10_0(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for ContactOntologySource();
  OUTLINED_FUNCTION_0_0();
  uint64_t v25 = v24;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_5_0();
  ContactQuery.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v0, *MEMORY[0x263F6D408], v23);
  ContactQuery.ontologySource.setter();
  Contact.givenName.getter();
  ContactQuery.fullName.setter();
  Contact.isMe.getter();
  ContactQuery.isMe.setter();
  uint64_t v27 = Contact.handles.getter();
  specialized Collection.first.getter(v27, MEMORY[0x263F6D358], v17);
  swift_bridgeObjectRelease();
  uint64_t v28 = type metadata accessor for ContactHandle();
  if (__swift_getEnumTagSinglePayload(v17, 1, v28) == 1)
  {
    outlined destroy of ContactHandle?(v17);
    uint64_t v29 = 1;
  }
  else
  {
    ContactHandle.type.getter();
    ContactHandle.label.getter();
    ContactHandle.value.getter();
    ContactHandleQuery.init(type:label:value:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v17, v28);
    uint64_t v29 = 0;
  }
  uint64_t v30 = type metadata accessor for ContactHandleQuery();
  __swift_storeEnumTagSinglePayload(v22, v29, 1, v30);
  ContactQuery.handle.setter();
  Contact.middleName.getter();
  ContactQuery.middleName.setter();
  Contact.nickname.getter();
  ContactQuery.nickname.setter();
  Contact.namePrefix.getter();
  ContactQuery.namePrefix.setter();
  Contact.nameSuffix.getter();
  ContactQuery.nameSuffix.setter();
  Contact.organizationName.getter();
  ContactQuery.organizationName.setter();
  Contact.previousFamilyName.getter();
  ContactQuery.previousFamilyName.setter();
  uint64_t v31 = Contact.contactRelations.getter();
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    uint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    uint64_t v33 = v8 + 16;
    uint64_t v52 = v34;
    unint64_t v35 = v31 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    uint64_t v36 = *(void *)(v33 + 56);
    unint64_t v37 = (void (**)(uint64_t, uint64_t))(v33 - 8);
    uint64_t v38 = MEMORY[0x263F8EE78];
    do
    {
      v52(v53, v35, v54);
      uint64_t v39 = Contact.LabeledValue.label.getter();
      uint64_t v41 = v40;
      (*v37)(v53, v54);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, v38);
        uint64_t v38 = v45;
      }
      unint64_t v43 = *(void *)(v38 + 16);
      unint64_t v42 = *(void *)(v38 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v38);
        uint64_t v38 = v46;
      }
      *(void *)(v38 + 16) = v43 + 1;
      uint64_t v44 = v38 + 16 * v43;
      *(void *)(v44 + 32) = v39;
      *(void *)(v44 + 40) = v41;
      v35 += v36;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x263F8EE78];
  }
  if (!*(void *)(v38 + 16)) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = type metadata accessor for ContactQuery();
  __swift_storeEnumTagSinglePayload(v51, 1, 1, v47);
  ContactRelationshipQuery.init(label:fromContact:)();
  uint64_t v48 = type metadata accessor for ContactRelationshipQuery();
  __swift_storeEnumTagSinglePayload(v50, 0, 1, v48);
  return ContactQuery.relationship.setter();
}

uint64_t specialized OptionSet<>.init()()
{
  return 0;
}

uint64_t dispatch thunk of ContactResolverProtocol.makeRecommendations(queries:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unint64_t partial apply for implicit closure #1 in Recommendation<A>.assignConfidence()()
{
  return implicit closure #1 in Recommendation<A>.assignConfidence()();
}

unint64_t lazy protocol witness table accessor for type Recommendation<Contact> and conformance Recommendation<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>;
  if (!lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Recommendation<Contact>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>);
  }
  return result;
}

uint64_t outlined destroy of ContactsError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactsError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ContactHandle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = dispatch thunk of UsoTaskBuilder_noVerb_common_Person.__allocating_init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  id v7 = a5;
  swift_retain();
  UsoEntityBuilder_common_Person.init(name:contactId:handle:)();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  swift_release();
  swift_release();

  return v6;
}

void ContactNLv3Intent.toSiriKitIntent(referenceResolver:previousIntent:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v33 = v0;
  uint64_t v1 = type metadata accessor for ContactNLv3Intent();
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = (uint8_t *)(v4 - v3);
  uint64_t v6 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v35 = MEMORY[0x263F8D310];
  unint64_t v36 = lazy protocol witness table accessor for type String and conformance String();
  strcpy(v34, "NLv3IntentOnly");
  v34[15] = -18;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22D59FD50;
  outlined init with copy of DeviceState((uint64_t)v34, v11 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = v10 + *(int *)(v6 + 20);
  *(void *)uint64_t v12 = "ToSiriKitIntent";
  *(void *)(v12 + 8) = 15;
  *(unsigned char *)(v12 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  if (ContactNLv3Intent.isUnsupportedAction.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = OUTLINED_FUNCTION_21_0(v13, (uint64_t)static Logger.siriContacts);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_22D49E000, v14, v15, "#ContactNLv3Intent.toSiriKitIntent: found unsupported parse, returning nil", v16, 2u);
      OUTLINED_FUNCTION_2();
    }
  }
  else if (ContactNLv3Intent.isModifyContactAttribute.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = (void *)OUTLINED_FUNCTION_21_0(v17, (uint64_t)static Logger.siriContacts);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_11_2(v19))
    {
      *(_WORD *)OUTLINED_FUNCTION_20() = 0;
      OUTLINED_FUNCTION_16_0(&dword_22D49E000, v20, v21, "#ContactNLv3Intent.toSiriKitIntent: converting parse to ModifyContactAttributeIntent");
      OUTLINED_FUNCTION_2();
    }

    type metadata accessor for ModifyContactAttributeIntent();
    OUTLINED_FUNCTION_16_7();
    outlined init with copy of DeviceState(v33, (uint64_t)v34);
    ModifyContactAttributeIntent.__allocating_init(_:referenceResolver:)((uint64_t)v5, (uint64_t)v34);
  }
  else
  {
    ContactNLv3Intent.isGetContactAttribute.getter();
    if (v22)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      uint64_t v24 = (void *)OUTLINED_FUNCTION_21_0(v23, (uint64_t)static Logger.siriContacts);
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_11_2(v25))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_16_0(&dword_22D49E000, v26, v27, "#ContactNLv3Intent.toSiriKitIntent: converting parse to GetContactAttributeIntent");
        OUTLINED_FUNCTION_2();
      }

      type metadata accessor for GetContactAttributeIntent();
      OUTLINED_FUNCTION_16_7();
      outlined init with copy of DeviceState(v33, (uint64_t)v34);
      GetContactAttributeIntent.__allocating_init(_:referenceResolver:)(v5, (uint64_t)v34);
    }
    else if (ContactNLv3Intent.isGetContact.getter())
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      uint64_t v29 = (void *)OUTLINED_FUNCTION_21_0(v28, (uint64_t)static Logger.siriContacts);
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_11_2(v30))
      {
        *(_WORD *)OUTLINED_FUNCTION_20() = 0;
        OUTLINED_FUNCTION_16_0(&dword_22D49E000, v31, v32, "#ContactNLv3Intent.toSiriKitIntent: converting parse to GetContactIntent");
        OUTLINED_FUNCTION_2();
      }

      type metadata accessor for GetContactIntent();
      OUTLINED_FUNCTION_16_7();
      outlined init with copy of DeviceState(v33, (uint64_t)v34);
      GetContactIntent.__allocating_init(_:referenceResolver:)((uint64_t)v5, (uint64_t)v34);
    }
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of ContactNLv3Intent(v10, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_8();
}

uint64_t ContactNLv3Intent.isUnsupportedAction.getter()
{
  uint64_t v2 = type metadata accessor for ContactNLv3Intent();
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_10_12();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - v7;
  char v9 = ContactNLv3Intent.isAskingForAllContacts.getter(v6);
  OUTLINED_FUNCTION_5_12();
  if (v9)
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v8, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_20_8();
LABEL_4:
    outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_12_10();
    goto LABEL_5;
  }
  char v10 = ContactNLv3Intent.isDeleteContacts.getter(3);
  outlined destroy of ContactNLv3Intent((uint64_t)v8, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_20_8();
  if (v10) {
    goto LABEL_4;
  }
  char v13 = ContactNLv3Intent.isDeleteContacts.getter(2);
  outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_12_10();
  if ((v13 & 1) == 0)
  {
    ContactNLv3Intent.isModifyUnsupportedAttribute.getter();
    char v11 = v14;
    goto LABEL_6;
  }
LABEL_5:
  char v11 = 1;
LABEL_6:
  outlined destroy of ContactNLv3Intent(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  return v11 & 1;
}

uint64_t ContactNLv3Intent.isModifyContactAttribute.getter()
{
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_8_12();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v11[-v5];
  ContactNLv3Intent.hasModifyVerb.getter();
  char v8 = v7;
  OUTLINED_FUNCTION_15_8();
  if (v8) {
    goto LABEL_6;
  }
  if (one-time initialization token for setNickName != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v12)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    outlined destroy of ContactNLv3Intent((uint64_t)v6, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_5_12();
LABEL_7:
    outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_12_10();
    goto LABEL_8;
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v6, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_5_12();
  if (one-time initialization token for setRelationship != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_12_10();
  if (one-time initialization token for removeRelationship != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (!v12)
  {
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v9 = 1;
LABEL_9:
  outlined destroy of ContactNLv3Intent(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  return v9;
}

void ContactNLv3Intent.isGetContactAttribute.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v5 = v1;
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_10_12();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_8_12();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_9_11();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v19 - v11;
  if (one-time initialization token for contactAttributes != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  uint64_t v13 = *(void *)(IntentNodeTraversable.values<A>(forNode:)() + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of ContactNLv3Intent(v5, (uint64_t)v12);
  if (v13)
  {
    char v19 = 50;
    char v14 = ContactNLv3Intent.containsAttribute(_:)();
    outlined destroy of ContactNLv3Intent((uint64_t)v12, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_15_8();
    if ((v14 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v12, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_15_8();
  }
  if (one-time initialization token for contactType != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v20)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    outlined destroy of ContactNLv3Intent(v4, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_5_12();
    outlined destroy of ContactNLv3Intent(v3, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_20_8();
    goto LABEL_12;
  }
  outlined destroy of ContactNLv3Intent(v4, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_5_12();
  ContactNLv3Intent.isPronounceName.getter();
  char v18 = v17;
  outlined destroy of ContactNLv3Intent(v3, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_20_8();
  if ((v18 & 1) == 0)
  {
    outlined destroy of ContactNLv3Intent(v2, (void (*)(void))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_12_10();
    goto LABEL_16;
  }
LABEL_12:
  ContactNLv3Intent.hasModifyVerb.getter();
  char v16 = v15;
  outlined destroy of ContactNLv3Intent(v2, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_12_10();
  if ((v16 & 1) == 0) {
    ContactNLv3Intent.isLearnPronunciation.getter();
  }
LABEL_16:
  outlined destroy of ContactNLv3Intent(v0, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_8();
}

#error "22D4E4878: call analysis failed (funcsize=212)"

uint64_t ContactNLv3Intent.getSiriKitIntentType()()
{
  if (ContactNLv3Intent.isUnsupportedAction.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    uint64_t v1 = (void *)OUTLINED_FUNCTION_21_0(v0, (uint64_t)static Logger.siriContacts);
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v2))
    {
      uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v3);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v4, v5, "#ContactNLv3Intent.getSiriKitIntentType: found unsupported parse, returning nil");
      OUTLINED_FUNCTION_2();
    }

    return 0;
  }
  if (ContactNLv3Intent.isModifyContactAttribute.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)OUTLINED_FUNCTION_21_0(v7, (uint64_t)static Logger.siriContacts);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v10);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v11, v12, "#ContactNLv3Intent.getSiriKitIntentType: ModifyContactAttributeIntent");
      OUTLINED_FUNCTION_2();
    }

    return type metadata accessor for ModifyContactAttributeIntent();
  }
  else
  {
    ContactNLv3Intent.isGetContactAttribute.getter();
    if (v13)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      char v15 = (void *)OUTLINED_FUNCTION_21_0(v14, (uint64_t)static Logger.siriContacts);
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v16))
      {
        char v17 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v17);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v18, v19, "#ContactNLv3Intent.getSiriKitIntentType: GetContactAttributeIntent");
        OUTLINED_FUNCTION_2();
      }

      return type metadata accessor for GetContactAttributeIntent();
    }
    else
    {
      if ((ContactNLv3Intent.isGetContact.getter() & 1) == 0) {
        return 0;
      }
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      uint64_t v21 = (void *)OUTLINED_FUNCTION_21_0(v20, (uint64_t)static Logger.siriContacts);
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v22))
      {
        uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v23);
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v24, v25, "#ContactNLv3Intent.getSiriKitIntentType: GetContactIntent");
        OUTLINED_FUNCTION_2();
      }

      return type metadata accessor for GetContactIntent();
    }
  }
}

#error "22D4E4D54: call analysis failed (funcsize=150)"

uint64_t ContactNLv3Intent.isDeleteContacts.getter()
{
  return ContactNLv3Intent.isDeleteContacts.getter(3);
}

uint64_t ContactNLv3Intent.isCreateContacts.getter()
{
  return ContactNLv3Intent.isDeleteContacts.getter(2);
}

uint64_t ContactNLv3Intent.isDeleteContacts.getter(uint64_t a1)
{
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v4 == 17) {
    char v2 = 0;
  }
  else {
    char v2 = specialized == infix<A>(_:_:)(v4, a1);
  }
  return v2 & 1;
}

void ContactNLv3Intent.isModifyUnsupportedAttribute.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v3 = v0;
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v37 = (uint64_t)&v36 - v8;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_8_12();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_9_11();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  os_log_type_t v16 = (char *)&v36 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  os_log_type_t v22 = (char *)&v36 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v36 - v23;
  char v25 = ContactNLv3Intent.hasFreshVerb.getter();
  outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v24);
  if (v25)
  {
    if (one-time initialization token for contactVerb != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v39 != 17)
    {
      char v26 = specialized == infix<A>(_:_:)(v39, 4);
      outlined destroy of ContactNLv3Intent((uint64_t)v24, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v22);
      if ((v26 & 1) == 0) {
        goto LABEL_6;
      }
      char v27 = ContactNLv3Intent.isModifyOtherContactNickname.getter();
      outlined init with copy of ContactNLv3Intent((uint64_t)v22, (uint64_t)v19);
      if (v27)
      {
        outlined destroy of ContactNLv3Intent((uint64_t)v19, (void (*)(void))type metadata accessor for ContactNLv3Intent);
        outlined init with copy of ContactNLv3Intent((uint64_t)v22, (uint64_t)v16);
      }
      else
      {
        char v28 = ContactNLv3Intent.hasAddressAttribute.getter();
        outlined destroy of ContactNLv3Intent((uint64_t)v19, (void (*)(void))type metadata accessor for ContactNLv3Intent);
        outlined init with copy of ContactNLv3Intent((uint64_t)v22, (uint64_t)v16);
        if ((v28 & 1) == 0)
        {
          char v43 = 52;
          char v31 = ContactNLv3Intent.containsAttribute(_:)();
          outlined destroy of ContactNLv3Intent((uint64_t)v16, (void (*)(void))type metadata accessor for ContactNLv3Intent);
          OUTLINED_FUNCTION_15_8();
          if ((v31 & 1) == 0)
          {
            BOOL v32 = ContactNLv3Intent.hasEmailAttribute.getter();
            outlined destroy of ContactNLv3Intent(v2, (void (*)(void))type metadata accessor for ContactNLv3Intent);
            outlined init with copy of ContactNLv3Intent((uint64_t)v22, (uint64_t)v12);
            if (!v32)
            {
              BOOL v33 = ContactNLv3Intent.hasPhoneAttribute.getter();
              outlined destroy of ContactNLv3Intent((uint64_t)v12, (void (*)(void))type metadata accessor for ContactNLv3Intent);
              OUTLINED_FUNCTION_5_12();
              if (!v33)
              {
                char v42 = 50;
                char v34 = ContactNLv3Intent.containsAttribute(_:)();
                outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
                uint64_t v29 = v37;
                outlined init with copy of ContactNLv3Intent((uint64_t)v22, v37);
                if ((v34 & 1) == 0)
                {
                  char v41 = 51;
                  char v35 = ContactNLv3Intent.containsAttribute(_:)();
                  outlined destroy of ContactNLv3Intent(v29, (void (*)(void))type metadata accessor for ContactNLv3Intent);
                  uint64_t v30 = v38;
                  outlined init with copy of ContactNLv3Intent((uint64_t)v22, v38);
                  if ((v35 & 1) == 0)
                  {
                    char v40 = 53;
                    ContactNLv3Intent.containsAttribute(_:)();
                  }
                  goto LABEL_16;
                }
LABEL_15:
                outlined destroy of ContactNLv3Intent(v29, (void (*)(void))type metadata accessor for ContactNLv3Intent);
                uint64_t v30 = v38;
                outlined init with copy of ContactNLv3Intent((uint64_t)v22, v38);
LABEL_16:
                outlined destroy of ContactNLv3Intent(v30, (void (*)(void))type metadata accessor for ContactNLv3Intent);
                goto LABEL_6;
              }
LABEL_14:
              outlined destroy of ContactNLv3Intent(v1, (void (*)(void))type metadata accessor for ContactNLv3Intent);
              uint64_t v29 = v37;
              outlined init with copy of ContactNLv3Intent((uint64_t)v22, v37);
              goto LABEL_15;
            }
LABEL_13:
            outlined destroy of ContactNLv3Intent((uint64_t)v12, (void (*)(void))type metadata accessor for ContactNLv3Intent);
            OUTLINED_FUNCTION_5_12();
            goto LABEL_14;
          }
LABEL_12:
          outlined destroy of ContactNLv3Intent(v2, (void (*)(void))type metadata accessor for ContactNLv3Intent);
          outlined init with copy of ContactNLv3Intent((uint64_t)v22, (uint64_t)v12);
          goto LABEL_13;
        }
      }
      outlined destroy of ContactNLv3Intent((uint64_t)v16, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_15_8();
      goto LABEL_12;
    }
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v24, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v22);
LABEL_6:
  outlined destroy of ContactNLv3Intent((uint64_t)v22, (void (*)(void))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_8();
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent)
  {
    type metadata accessor for ContactNLv3Intent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent);
  }
  return result;
}

uint64_t outlined init with copy of ContactNLv3Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactNLv3Intent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PersonIntentNode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ContactNLv3Intent(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_10()
{
  return outlined init with copy of ContactNLv3Intent(v1, v0);
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  return outlined init with copy of ContactNLv3Intent(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20_8()
{
  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t type metadata accessor for GetContactCATsModern()
{
  uint64_t result = type metadata singleton initialization cache for GetContactCATsModern;
  if (!type metadata singleton initialization cache for GetContactCATsModern) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 64) = a1;
  return MEMORY[0x270FA2498](GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:), 0, 0);
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 40) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_22D59FD40;
  *(void *)(v3 + 32) = 1699574633;
  *(void *)(v3 + 40) = 0xE400000000000000;
  uint64_t v4 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v3 + 48) = v2;
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = 0xD000000000000010;
  *(void *)(v3 + 88) = 0x800000022D5A80E0;
  if (v1)
  {
    uint64_t v5 = type metadata accessor for DialogPerson();
    uint64_t v6 = v1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = 0;
  }
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)(v3 + 96) = v6;
  *(void *)(v3 + 120) = v5;
  *(void *)(v3 + 128) = 0x656369766564;
  *(void *)(v3 + 136) = 0xE600000000000000;
  uint64_t v8 = 0;
  if (v7)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v3 + 152) = 0;
    *(void *)(v3 + 160) = 0;
  }
  *(void *)(v3 + 144) = v7;
  *(void *)(v3 + 168) = v8;
  uint64_t v11 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D0C8]
                                                                            + MEMORY[0x263F6D0C8]);
  swift_retain();
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v9;
  *uint64_t v9 = v0;
  v9[1] = GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:);
  return v11(0xD000000000000020, 0x800000022D5A8350, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t GetContactCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return GetContactCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t GetContactCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_15();
  outlined init with copy of URL?(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v14 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v14;
}

uint64_t GetContactCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t ObjC metadata update function for GetContactCATsModern()
{
  return type metadata accessor for GetContactCATsModern();
}

uint64_t type metadata completion function for ContactsUnsupportedValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_23_2();
  *(void *)(v1 + 24) = v2;
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v1 = ParameterResolutionRecord.intent.getter();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  uint64_t v4 = *v2;
  v3[44] = *v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v5);
  v3[45] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v6);
  v3[46] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v3[47] = v7;
  OUTLINED_FUNCTION_1(v7);
  v3[48] = v8;
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = *(void *)(v4 + 224);
  uint64_t v9 = type metadata accessor for ParameterResolutionRecord();
  v3[54] = v9;
  OUTLINED_FUNCTION_1(v9);
  v3[55] = v10;
  v3[56] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

uint64_t ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v74 = v0;
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter();
  id v2 = objc_msgSend(v1, sel_unsupportedReason);

  v3.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v2).value;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 336);
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t type = v10;
    SiriContactsIntents::SiriKitContactUnsupportedReason value = v3.value;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v70 = (void *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v12 = _typeName(_:qualified:)();
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(unsigned char *)(v0 + 600) = value;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    uint64_t v14 = Optional.debugDescription.getter();
    *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2112;
    uint64_t v16 = ParameterResolutionRecord.result.getter();
    *(void *)(v0 + 320) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v70 = v16;
    uint64_t v17 = OUTLINED_FUNCTION_25_7();
    v18(v17);
    _os_log_impl(&dword_22D49E000, v9, type, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", (uint8_t *)v11, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    v3.SiriContactsIntents::SiriKitContactUnsupportedReason value = value;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_25_7();
    v20(v19);
  }

  if (ContactsStrategy.isSmartEnabled.getter())
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_22D49E000, v21, v22, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v23, 2u);
      OUTLINED_FUNCTION_2();
    }
  }
  switch(v3.value)
  {
    case SiriContactsIntents_SiriKitContactUnsupportedReason_authFailed:
      OUTLINED_FUNCTION_23_6();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 568) = v24;
      *uint64_t v24 = v25;
      v24[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_7_10();
      __asm { BRAA            X2, X16 }
      return result;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard:
      uint64_t v32 = *(void *)(v0 + 424);
      uint64_t v33 = *(void *)(v0 + 344);
      uint64_t v34 = *(void *)(v0 + 352);
      *(void *)(v0 + 456) = *(void *)(v33 + 104);
      outlined init with copy of DeviceState(v33 + 16, v0 + 264);
      swift_retain();
      char v35 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v34 + 248) + 24))(v32);

      if (v36)
      {
        objc_msgSend(v36, sel_BOOLValue);
      }
      uint64_t v57 = *(uint64_t **)(v0 + 328);
      uint64_t v58 = type metadata accessor for AceOutput();
      uint64_t v59 = MEMORY[0x263F6FFF0];
      v57[3] = v58;
      v57[4] = v59;
      __swift_allocate_boxed_opaque_existential_1(v57);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 464) = v60;
      *uint64_t v60 = v61;
      v60[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_7_10();
      return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)();
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFound:
      uint64_t v37 = *(uint64_t **)(v0 + 328);
      *(void *)(v0 + 480) = ParameterResolutionRecord.intent.getter();
      uint64_t v38 = type metadata accessor for AceOutput();
      uint64_t v39 = MEMORY[0x263F6FFF0];
      v37[3] = v38;
      v37[4] = v39;
      __swift_allocate_boxed_opaque_existential_1(v37);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 488) = v40;
      *char v40 = v41;
      v40[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      goto LABEL_33;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForCompany:
      char v42 = (void *)ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 504) = v42;
      swift_getObjectType();
      if (dynamic_cast_existential_1_conditional((uint64_t)v42))
      {
        uint64_t v44 = v43;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v44 + 40))(ObjectType, v44);
        if (!v46) {
          static String.EMPTY.getter();
        }
        uint64_t v47 = *(void *)(v0 + 368);
        SpeakableString.init(print:speak:)();
        uint64_t v48 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v47, 0, 1, v48);
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v0 + 512) = v49;
        *uint64_t v49 = v50;
        v49[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_7_10();
        __asm { BRAA            X3, X16 }
      }
      uint64_t v64 = *(uint64_t **)(v0 + 328);

      *(void *)(v0 + 528) = ParameterResolutionRecord.intent.getter();
      uint64_t v65 = type metadata accessor for AceOutput();
      uint64_t v66 = MEMORY[0x263F6FFF0];
      v64[3] = v65;
      v64[4] = v66;
      __swift_allocate_boxed_opaque_existential_1(v64);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 536) = v67;
      *uint64_t v67 = v68;
      v67[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
LABEL_33:
      OUTLINED_FUNCTION_7_10();
      return ContactsUnsupportedValueStrategy.noContactsFound(intent:)();
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation:
      OUTLINED_FUNCTION_23_6();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 552) = v53;
      *uint64_t v53 = v54;
      v53[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_7_10();
      __asm { BRAA            X2, X16 }
      return result;
    default:
      OUTLINED_FUNCTION_23_6();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 584) = v28;
      *char v28 = v29;
      v28[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_7_10();
      __asm { BRAA            X2, X16 }
      return result;
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 472) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3 + 264);
  swift_release();
  if (!v0)
  {
    OUTLINED_FUNCTION_20_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 496) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    OUTLINED_FUNCTION_20_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  uint64_t v5 = *(void *)(v4 + 368);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v7 = v6;
  *(void *)(v8 + 520) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_33_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = *(void **)(v1 + 504);
  uint64_t v4 = OUTLINED_FUNCTION_10_13();
  uint64_t v5 = OUTLINED_FUNCTION_14_7(v4);
  *(_OWORD *)(v1 + 240) = 0u;
  *(void *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 224) = 0u;
  uint64_t v6 = MEMORY[0x263F6FFF0];
  v2[3] = v5;
  v2[4] = v6;
  __swift_allocate_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_6_13();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1 + 224, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v7 = OUTLINED_FUNCTION_15_9();
  v8(v7);
  OUTLINED_FUNCTION_12_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 544) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    OUTLINED_FUNCTION_20_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *(void *)(v6 + 560) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_33_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = OUTLINED_FUNCTION_10_13();
  uint64_t v4 = OUTLINED_FUNCTION_14_7(v3);
  *(_OWORD *)(v1 + 200) = 0u;
  *(void *)(v1 + 216) = 0;
  *(_OWORD *)(v1 + 184) = 0u;
  uint64_t v5 = MEMORY[0x263F6FFF0];
  v2[3] = v4;
  v2[4] = v5;
  __swift_allocate_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1 + 184, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = OUTLINED_FUNCTION_15_9();
  v7(v6);
  OUTLINED_FUNCTION_12_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *(void *)(v6 + 576) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = *(void *)(v0 + 400);
  id v2 = *(void *)(v0 + 384);
  uint64_t v12 = *(void *)(v0 + 376);
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(uint64_t **)(v0 + 328);
  outlined init with copy of DeviceState(v4 + 16, v0 + 16);
  uint64_t v6 = *(void *)(v4 + 104);
  *(void *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(void *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(void *)(v0 + 56) = v6;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v7);
  uint64_t v8 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 160) = 0u;
  *(void *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  uint64_t v9 = MEMORY[0x263F6FFF0];
  v5[3] = v8;
  v5[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 144, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  OUTLINED_FUNCTION_12_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *(void *)(v6 + 592) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_33_0();
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3 = OUTLINED_FUNCTION_10_13();
  uint64_t v4 = OUTLINED_FUNCTION_14_7(v3);
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  uint64_t v5 = MEMORY[0x263F6FFF0];
  v2[3] = v4;
  v2[4] = v5;
  __swift_allocate_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = OUTLINED_FUNCTION_15_9();
  v7(v6);
  OUTLINED_FUNCTION_12_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v8();
}

uint64_t ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v10 + 328));
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 328);

  __swift_deallocate_boxed_opaque_existential_1(v11);
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 328);

  __swift_deallocate_boxed_opaque_existential_1(v11);
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_3_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t ContactsUnsupportedValueStrategy.noContactsFound(intent:)()
{
  OUTLINED_FUNCTION_4();
  v1[10] = v2;
  v1[11] = v0;
  v1[9] = v3;
  OUTLINED_FUNCTION_23_2();
  v1[12] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[13] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_10_0(v6);
  v1[14] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v7);
  v1[15] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  v1[16] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[17] = v9;
  v1[18] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_33_0();
  uint64_t v1 = *(void **)(v0[11] + 96);
  (*(void (**)(void))(*(void *)(v0[12] + 248) + 40))(*(void *)(v0[12] + 224));
  if (v2)
  {
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v5 = String.sanitizeHomophones.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[7] = v5;
    v0[8] = v7;
    __swift_project_boxed_opaque_existential_1((void *)(v4 + 16), *(void *)(v4 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v8 = type metadata accessor for Locale();
    OUTLINED_FUNCTION_26_6(v8);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.capitalized(with:)();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
  }
  SpeakableString.init(print:speak:)();
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_26_6(v9);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for ContactsCommonCATs
                                                             + *v1
                                                             + 512)
                                                 + **(int **)(class metadata base offset for ContactsCommonCATs
                                                            + *v1
                                                            + 512));
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v0[19] = v10;
  *uint64_t v10 = v11;
  v10[1] = ContactsUnsupportedValueStrategy.noContactsFound(intent:);
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[15];
  return v15(v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v7 = v6;
  *(void *)(v8 + 160) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v6();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t ContactsUnsupportedValueStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactsStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 168, 7);
}

uint64_t type metadata accessor for ContactsUnsupportedValueStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 272)
                                                + **(int **)(**(void **)v2 + 272));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for Flow.execute() in conformance ContactsUnsupportedFlow;
  return v8(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>()
{
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 56) = v9;
  uint64_t v10 = *(void *)(a3 + 256);
  long long v11 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 32) = v11;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = type metadata accessor for ContactsUnsupportedValueStrategy();
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return MEMORY[0x270F664F0](a1, a2, v12, a4);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

uint64_t type metadata accessor for GetContactUnsupportedValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for GetContactUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactUnsupportedValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t outlined destroy of ErrorViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x230F85DE0);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_10_13()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_7(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_15_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_25_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_6(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

id GetContactIntent.__allocating_init(_:referenceResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_5_13();
  id v14 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  ContactNLv3Intent.isMeCardRequest.getter();
  char v16 = v15;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(integerLiteral:)(v16 & 1).super.super.isa;
  OUTLINED_FUNCTION_1_14((uint64_t)isa, sel_setIsMe_);

  uint64_t v18 = (void *)a1;
  ContactNLv3Intent.person.getter(v19, v20, v21, v22, v23, v24, v25, v26, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
    v58);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of PersonIntentNode?((uint64_t)v9);
    if (one-time initialization token for contactId != -1) {
      swift_once();
    }
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v48)
    {
      uint64_t v27 = String.sanitizeContactIdURL.getter(v47, v48);
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(v27, v29, v14);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_22D59FB50;
      type metadata accessor for SiriMatch();
      id v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      *(void *)(v30 + 32) = @nonobjc INObject.init(identifier:display:)(v27, v29, v27, v29);
      uint64_t v47 = v30;
      specialized Array._endMutation()();
      outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(v47, v14);
    }
    else
    {
      SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, v4, (uint64_t)&protocol witness table for GetContactIntent);
    }

    __swift_destroy_boxed_opaque_existential_1Tm(a2);
    outlined destroy of ContactNLv3Intent(a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v3, v9, v10);
    OUTLINED_FUNCTION_3_12();
    uint64_t v32 = PersonIntentNodeContaining.firstName.getter();
    if (v33)
    {
      MEMORY[0x230F84F70](v32);
      uint64_t v32 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v32, sel_setFirstName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v34 = PersonIntentNodeContaining.nickName.getter();
    if (v35)
    {
      MEMORY[0x230F84F70](v34);
      uint64_t v34 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v34, sel_setNickName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v36 = PersonIntentNodeContaining.lastName.getter();
    if (v37)
    {
      MEMORY[0x230F84F70](v36);
      uint64_t v36 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v36, sel_setLastName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v38 = PersonIntentNodeContaining.fullName.getter();
    if (v39)
    {
      MEMORY[0x230F84F70](v38);
      uint64_t v38 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v38, sel_setFullName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v40 = PersonIntentNodeContaining.middleName.getter();
    if (v41)
    {
      MEMORY[0x230F84F70](v40);
      uint64_t v40 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v40, sel_setMiddleName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v42 = PersonIntentNodeContaining.company.getter();
    if (v43)
    {
      MEMORY[0x230F84F70](v42);
      uint64_t v42 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v42, sel_setOrganizationName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v44 = PersonIntentNodeContaining.relationship.getter();
    if (v45)
    {
      MEMORY[0x230F84F70](v44);
      uint64_t v44 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v44, sel_setContactRelation_);

    __swift_destroy_boxed_opaque_existential_1Tm(a2);
    outlined destroy of ContactNLv3Intent(a1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, v10);
  }
  return v14;
}

uint64_t GetContactIntent.siriInferenceContact.getter()
{
  uint64_t v2 = v0;
  type metadata accessor for ContactHandle.HandleType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v35 = v4;
  uint64_t v36 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContactHandle();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_5_13();
  Contact.init()();
  outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v0);
  if (v10) {
    Contact.id.setter();
  }
  uint64_t Contact = outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
  if (v12)
  {
    uint64_t v33 = Contact;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact.LabeledValue<String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
    static String.EMPTY.getter();
    v37[0] = static String.EMPTY.getter();
    v37[1] = v13;
    Contact.LabeledValue.init(id:label:value:)();
    Contact.contactRelations.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_fullName);
  if (v14) {
    Contact.givenName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_firstName);
  if (v15) {
    Contact.givenName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_middleName);
  if (v16) {
    Contact.middleName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_lastName);
  if (v17) {
    Contact.familyName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_nickName);
  if (v18) {
    Contact.nickname.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
  if (v19) {
    Contact.organizationName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_phoneNumber);
  if (v20)
  {
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x263F6D328], v36);
    OUTLINED_FUNCTION_4_14();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    uint64_t v21 = (void (*)(void *, void))Contact.handles.modify();
    uint64_t v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v24 = *(void *)(*v23 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v25 = *v23;
    *(void *)(v25 + 16) = v24 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v25+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v24, v1, v6);
    v21(v37, 0);
  }
  uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, (SEL *)&selRef_emailAddress);
  if (v27)
  {
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x263F6D320], v36);
    OUTLINED_FUNCTION_4_14();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    uint64_t v28 = (uint64_t (*)(void *, void))Contact.handles.modify();
    uint64_t v30 = v29;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v31 = *(void *)(*v30 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v32 = *v30;
    *(void *)(v32 + 16) = v31 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v32+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v31, v1, v6);
    return v28(v37, 0);
  }
  return result;
}

uint64_t GetContactIntent.requestedName.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_fullName);
  if (!v2)
  {
    uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_firstName);
    if (!v3)
    {
      uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_middleName);
      if (!v4)
      {
        uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_lastName);
        if (!v5) {
          return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_nickName);
        }
      }
    }
  }
  return result;
}

uint64_t GetContactIntent.requestedRelationship.getter()
{
  return outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
}

uint64_t GetContactIntent.requestedCompanyName.getter()
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
}

uint64_t GetContactIntent.handleTypePreference.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ContactHandleTypePreference();
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v2);
}

uint64_t protocol witness for SiriKitContactIntent.handleTypePreference.getter in conformance GetContactIntent@<X0>(uint64_t a1@<X8>)
{
  return GetContactIntent.handleTypePreference.getter(a1);
}

char *GetContactIntentResponse.__allocating_init(contactIdentifiers:code:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = GetContactIntentResponse.init(code:userActivity:)(a2, 0);
  uint64_t v7 = v6;
  if (a1)
  {
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setContactIdentifiers_, v8.super.isa);

  return v6;
}

uint64_t outlined destroy of ContactNLv3Intent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactNLv3Intent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9DBA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  objc_msgSend(a3, sel_setContactIdentifier_, v4);
}

void outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(uint64_t a1, void *a2)
{
  type metadata accessor for SiriMatch();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setSiriMatches_, isa);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.fullName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_fullName);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.organizationName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_organizationName);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_phoneNumber);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_emailAddress);
}

id OUTLINED_FUNCTION_1_14(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return 0;
}

uint64_t type metadata accessor for GetContactCATs()
{
  uint64_t result = type metadata singleton initialization cache for GetContactCATs;
  if (!type metadata singleton initialization cache for GetContactCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GetContactCATs()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 72) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  return MEMORY[0x270FA2498](GetContactCATs.intentHandledResponse(isMe:requestedContact:device:), 0, 0);
}

uint64_t GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_22D59FD40;
  *(void *)(v3 + 32) = 1699574633;
  *(void *)(v3 + 40) = 0xE400000000000000;
  uint64_t v4 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v3 + 48) = v2;
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = 0xD000000000000010;
  *(void *)(v3 + 88) = 0x800000022D5A80E0;
  if (v1)
  {
    uint64_t v5 = type metadata accessor for DialogPerson();
    uint64_t v6 = v1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = 0;
  }
  uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v3 + 96) = v6;
  *(void *)(v3 + 120) = v5;
  *(void *)(v3 + 128) = 0x656369766564;
  *(void *)(v3 + 136) = 0xE600000000000000;
  uint64_t v8 = 0;
  if (v7)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v3 + 152) = 0;
    *(void *)(v3 + 160) = 0;
  }
  *(void *)(v3 + 144) = v7;
  *(void *)(v3 + 168) = v8;
  uint64_t v12 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x263F6D058]
                                                                                     + MEMORY[0x263F6D058]);
  swift_retain();
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v9;
  *uint64_t v9 = v0;
  v9[1] = GetContactCATs.intentHandledResponse(isMe:requestedContact:device:);
  uint64_t v10 = *(void *)(v0 + 16);
  return v12(v10, 0xD000000000000020, 0x800000022D5A8350, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  char v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](GetContactCATs.intentHandledResponse(isMe:requestedContact:device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GetContactCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return GetContactCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t GetContactCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = ContactsCommonCATs.init(templateDir:options:globals:)((uint64_t)v10, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t ObjC metadata update function for GetContactCATs()
{
  return type metadata accessor for GetContactCATs();
}

#error "22D4E9CBC: call analysis failed (funcsize=176)"

#error "22D4E9FA4: call analysis failed (funcsize=204)"

uint64_t static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22D59FD50;
  String.uppercased()();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_34_6();
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v6;
  v10._object = v7;
  Swift::String v11 = ContactNLv3Constants.boundValue(_:)(v10);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v9 + 32) = v11;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_22D5A0B00;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_26_7();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 32) = 0xD000000000000012;
  *(void *)(v12 + 40) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_10_14();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 48) = 0xD000000000000012;
  *(void *)(v12 + 56) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_37_5();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 64) = 0xD000000000000012;
  *(void *)(v12 + 72) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_4();
  Swift::String v16 = String.firstLetterCapitalized()();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 80) = 0xD000000000000012;
  *(void *)(v12 + 88) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_8();
  Swift::String v17 = String.firstLetterCapitalized()();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 96) = 0xD000000000000012;
  *(void *)(v12 + 104) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  Swift::String v18 = String.firstLetterCapitalized()();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 112) = 0xD000000000000012;
  *(void *)(v12 + 120) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_26_7();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 128) = 0xD000000000000012;
  *(void *)(v12 + 136) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_26_7();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 144) = 0xD000000000000012;
  *(void *)(v12 + 152) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_8();
  Swift::String v21 = String.firstLetterCapitalized()();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 160) = 0xD000000000000012;
  *(void *)(v12 + 168) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  Swift::String v22 = String.firstLetterCapitalized()();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 176) = 0xD000000000000012;
  *(void *)(v12 + 184) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_7_11();
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_41_3();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 192) = 0xD000000000000012;
  *(void *)(v12 + 200) = 0x800000022D5A83F0;
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  type metadata accessor for MachineUtteranceBuilder();
  OUTLINED_FUNCTION_1_4();
  MachineUtteranceBuilder.init()();
  if (a4)
  {
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
  }
  if (a6)
  {
    OUTLINED_FUNCTION_13_11();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
  }
  dispatch thunk of MachineUtteranceBuilder.build()();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_39_3();
  if (v26) {
    dispatch thunk of MachineUtteranceBuilder.build()();
  }
  NLContextUpdate.nlInput.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v27 = OUTLINED_FUNCTION_29_4();
  OUTLINED_FUNCTION_1(v27);
  uint64_t v28 = OUTLINED_FUNCTION_17_8();
  *(_OWORD *)(v28 + 16) = xmmword_22D59FD50;
  uint64_t v29 = v28 + v25;
  if (a2 | a6 | a4) {
    static ContactsContextProvider.makeSDAForRequestCommonPerson(contactIdentifier:)(a1, a2, v29);
  }
  else {
    static ContactsContextProvider.makeSDAForSummariseCommonPerson()(v29);
  }
  NLContextUpdate.nluSystemDialogActs.setter();
  return swift_release();
}

uint64_t static ContactsContextProvider.confirm(person:attribute:)(uint64_t a1, uint64_t a2, int a3)
{
  HIDWORD(v34) = a3;
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_2_18();
  NLContextUpdate.weightedPromptStrict.setter();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22D59FD40;
  String.uppercased()();
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = (void *)MEMORY[0x263F8D310];
  OUTLINED_FUNCTION_15_10(v4, v6, v7, v8, v9, v10, v11, v12, MEMORY[0x263F8D310], v4, v4, v4, a1, v34, a2, 95, 0xE100000000000000, 32);
  uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  Swift::String v15 = v14;
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  Swift::String v17 = ContactNLv3Constants.boundValue(_:)(v16);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v3 + 32) = v17;
  OUTLINED_FUNCTION_11_11();
  uint64_t v18 = OUTLINED_FUNCTION_3_13();
  Swift::String v20 = v19;
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  Swift::String v22 = ContactNLv3Constants.boundValue(_:)(v21);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v3 + 48) = v22;
  OUTLINED_FUNCTION_6_14();
  OUTLINED_FUNCTION_3_13();
  OUTLINED_FUNCTION_34_6();
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = v4;
  v23._object = v5;
  Swift::String v24 = ContactNLv3Constants.boundValue(_:)(v23);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v3 + 64) = v24;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  if (v33)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_22D59FB50;
    *(void *)(v25 + 32) = v33;
    specialized Array._endMutation()();
    id v26 = v33;
    NLContextUpdate.applicationContextObjects.setter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_1(v27);
  unint64_t v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForConfirmation(_:)(v37, v35 & 1, (uint64_t (*)(void, void))(v30 + v29));
  OUTLINED_FUNCTION_42_2();
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t static ContactsContextProvider.contactResponseTargets.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D59FE50;
  OUTLINED_FUNCTION_8_13();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_11();
  Swift::String v2 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_27_8(v2);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = 0xD000000000000012;
  *(void *)(v0 + 40) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_8_13();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_41_3();
  OUTLINED_FUNCTION_27_8(v3);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 48) = 0xD000000000000012;
  *(void *)(v0 + 56) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_8_13();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_41_3();
  OUTLINED_FUNCTION_27_8(v4);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 64) = 0xD000000000000012;
  *(void *)(v0 + 72) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_8_13();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_12();
  Swift::String v5 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_27_8(v5);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = 0xD000000000000012;
  *(void *)(v0 + 88) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_8_13();
  swift_bridgeObjectRelease();
  Swift::String v6 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_27_8(v6);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = 0xD000000000000012;
  *(void *)(v0 + 104) = 0x800000022D5A83F0;
  return v0;
}

unint64_t static ContactsContextProvider.canonicalDomainName.getter()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_8();
  Swift::String v0 = String.firstLetterCapitalized()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t static ContactsContextProvider.makeSDAForRequestCommonPerson(contactIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = a3;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v35 - v7;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Swift::String v14 = (char *)&v35 - v13;
  uint64_t v15 = type metadata accessor for UsoIdentifier();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoTaskBuilder_request_common_Person();
  swift_allocObject();
  uint64_t v19 = UsoTaskBuilder_request_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  uint64_t v39 = UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setSelect(value:)();
  if (a2)
  {
    swift_bridgeObjectRetain();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  static Siri_Nlu_External_SystemPrompted.from(_:)(v19);
  uint64_t v20 = v38;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  uint64_t v21 = v19;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriContacts);
  uint64_t v23 = v40;
  uint64_t v24 = v41;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v25(v42, v20, v41);
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    unint64_t v29 = v42;
    uint64_t v30 = (uint8_t *)v28;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = v21;
    uint64_t v44 = v37;
    *(_DWORD *)uint64_t v30 = 136315138;
    char v35 = v30 + 4;
    v25(v36, (uint64_t)v29, v24);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v24);
    _os_log_impl(&dword_22D49E000, v26, v27, "#ContactsContextProvider Returning SystemPrompted for handle GetContactAttributeIntent: %s", v30, 0xCu);
    uint64_t v33 = v37;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v33, -1, -1);
    MEMORY[0x230F85DE0](v30, -1, -1);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v42, v24);

    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)()
{
  return swift_endAccess();
}

uint64_t static ContactsContextProvider.makeSDAForDisambiguateGetContactAttribute(contact:handles:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v77 = a3;
  uint64_t v4 = (uint8_t *)type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v5 = *((void *)v4 - 1);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v74 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v73 - v8;
  uint64_t v80 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v10 = *(void *)(v80 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v80);
  os_log_type_t v75 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v76 = (char *)&v73 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v79 = (char *)&v73 - v15;
  uint64_t v92 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v16 = *(void *)(v92 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v92);
  uint64_t v91 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v90 = (char *)&v73 - v19;
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v97 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v100 = MEMORY[0x263F8EE78];
  uint64_t v96 = (uint64_t)v9;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (char *)v96;
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v26 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v95 = v4;
  uint64_t v78 = v5;
  if (v26)
  {
    uint64_t v94 = v26;
    uint64_t result = type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    uint64_t v89 = result;
    if (v94 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v81 = v10;
    uint64_t v28 = 0;
    uint64_t v86 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v87 = a2 & 0xC000000000000001;
    uint64_t v84 = (void (**)(char *, char *, uint64_t))(v21 + 16);
    uint64_t v85 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v83 = v21 + 32;
    uint64_t v82 = v21 + 8;
    unint64_t v88 = a2;
    do
    {
      if (v87) {
        id v29 = (id)MEMORY[0x230F854E0](v28, a2);
      }
      else {
        id v29 = *(id *)(a2 + 8 * v28 + 32);
      }
      uint64_t v30 = v29;
      uint64_t v31 = v93;
      uint64_t v32 = CNContact.formattedFullName.getter();
      uint64_t v34 = v33;
      id v35 = objc_msgSend(v31, sel_identifier);
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      id v39 = v30;
      uint64_t v40 = UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(v32, v34, v36, v38, v30);
      uint64_t v41 = v90;
      static Siri_Nlu_External_UserStatedTask.from(_:)(v40);
      Siri_Nlu_External_UserDialogAct.init()();
      uint64_t v42 = v92;
      (*v86)(v91, v41, v92);
      Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
      (*v85)(v41, v42);
      (*v84)(v97, v25, v20);
      uint64_t v43 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v45 = *(void *)(v43 + 16);
      unint64_t v44 = *(void *)(v43 + 24);
      if (v45 >= v44 >> 1) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v43);
      }
      ++v28;
      *(void *)(v43 + 16) = v45 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v43+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v45, v97, v20);

      swift_release();
      uint64_t v100 = v43;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
      uint64_t v4 = v95;
      uint64_t v9 = (char *)v96;
      a2 = v88;
    }
    while (v94 != v28);
    swift_bridgeObjectRelease();
    uint64_t v46 = v80;
    uint64_t v10 = v81;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = v80;
  }
  uint64_t v47 = v79;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v49 = __swift_project_value_buffer(v48, (uint64_t)static Logger.siriContacts);
  uint64_t v50 = v100;
  swift_bridgeObjectRetain();
  uint64_t v94 = v49;
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 134217984;
    uint64_t v4 = v95;
    v99[1] = *(void *)(v50 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v51, v52, "#ContactsContextProvider %ld SystemGaveOptions for contact attribute disambiguation", v53, 0xCu);
    uint64_t v54 = v53;
    uint64_t v9 = (char *)v96;
    MEMORY[0x230F85DE0](v54, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v55 = v100;
  Siri_Nlu_External_SystemGaveOptions.init()();
  MEMORY[0x230F83120](v55);
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v57 = v76;
  v56(v76, v47, v46);
  uint64_t v58 = v77;
  Siri_Nlu_External_SystemDialogAct.init()();
  v56(v75, v57, v46);
  uint64_t v59 = v46;
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  uint64_t v60 = *(char **)(v10 + 8);
  uint64_t v81 = v10 + 8;
  uint64_t v97 = v60;
  ((void (*)(char *, uint64_t))v60)(v57, v46);
  uint64_t v61 = v78;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint8_t *))(v78 + 16);
  v62(v9, v58, v4);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    v99[0] = v96;
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v94 = (uint64_t)(v65 + 4);
    uint64_t v95 = v65;
    v62(v74, (uint64_t)v9, v4);
    uint64_t v66 = String.init<A>(describing:)();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint8_t *))(v61 + 8))(v9, v4);
    os_log_type_t v68 = v64;
    uint64_t v69 = v95;
    _os_log_impl(&dword_22D49E000, v63, v68, "#ContactsContextProvider Returning SystemDialogAct for contact attribute disambiguation %s", v95, 0xCu);
    uint64_t v70 = v96;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v70, -1, -1);
    MEMORY[0x230F85DE0](v69, -1, -1);

    unint64_t v71 = v79;
    uint64_t v72 = v80;
  }
  else
  {

    (*(void (**)(char *, uint8_t *))(v61 + 8))(v9, v4);
    unint64_t v71 = v47;
    uint64_t v72 = v59;
  }
  return ((uint64_t (*)(char *, uint64_t))v97)(v71, v72);
}

uint64_t static ContactsContextProvider.makeSDAForSummariseCommonPerson()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  os_log_type_t v27 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v25 - v6;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v25 - v13;
  type metadata accessor for UsoTaskBuilder_summarise_common_Person();
  swift_allocObject();
  uint64_t v15 = UsoTaskBuilder_summarise_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  uint64_t v28 = UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)();
  uint64_t v29 = v15;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v15);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v17(v7, a1, v2);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v31 = v26;
    *(_DWORD *)uint64_t v20 = 136315138;
    v25[1] = v20 + 4;
    v17(v27, (uint64_t)v7, v2);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    _os_log_impl(&dword_22D49E000, v18, v19, "#ContactsContextProvider Returning SystemPrompted for handle GetContactIntent: %s", v20, 0xCu);
    uint64_t v23 = v26;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v23, -1, -1);
    MEMORY[0x230F85DE0](v20, -1, -1);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);

    swift_release();
  }
  return swift_release();
}

void static ContactsContextProvider.makeSDAForNeedsValueModifyRelationship()()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = v1;
  type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v33 = v4;
  uint64_t v34 = v3;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_4();
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v30 - v12;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  OUTLINED_FUNCTION_1_4();
  uint64_t updated = UsoTaskBuilder_update_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_1_4();
  uint64_t v15 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonRelationship();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_PersonRelationship.init()();
  dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)();
  swift_release();
  uint64_t v35 = v15;
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)();
  uint64_t v36 = updated;
  static Siri_Nlu_External_SystemPrompted.from(_:)(updated);
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_89();
  v16();
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
  uint64_t v18 = v34;
  os_log_type_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v19(v0, v2, v34);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v37 = v31;
    *(_DWORD *)unint64_t v22 = 136315138;
    v30[1] = v22 + 4;
    v19(v32, v0, v18);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v37);
    OUTLINED_FUNCTION_35_5(v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = OUTLINED_FUNCTION_23_7();
    v27(v26);
    _os_log_impl(&dword_22D49E000, v20, v21, "#ContactsContextProvider Returning SystemPrompted for prompt for relationship in Modify Relationship: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
    swift_release();
  }
  else
  {
    uint64_t v28 = OUTLINED_FUNCTION_23_7();
    v29(v28);

    swift_release();
  }
  swift_release();
  OUTLINED_FUNCTION_8();
}

uint64_t static ContactsContextProvider.needsValueModifyNickname()()
{
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.dictationPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D5A01E0;
  OUTLINED_FUNCTION_11_11();
  unint64_t v1 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_15_10(v1, v2, v3, v4, v5, v6, v7, v8, MEMORY[0x263F8D310], v1, v1, v1, v27, v28, v29, 95, 0xE100000000000000, 32);
  uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  Swift::String v13 = ContactNLv3Constants.boundValue(_:)(v12);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 32) = v13;
  OUTLINED_FUNCTION_6_14();
  uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  Swift::String v18 = ContactNLv3Constants.boundValue(_:)(v17);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 48) = v18;
  NLContextUpdate.dictationPromptAbortValues.setter();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_22D59FD50;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  Swift::String v20 = String.firstLetterCapitalized()();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 32) = 0xD000000000000012;
  *(void *)(v19 + 40) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_42_2();
  NLContextUpdate.dictationPromptTargetNodes.setter();
  type metadata accessor for MachineUtteranceBuilder();
  OUTLINED_FUNCTION_1_4();
  MachineUtteranceBuilder.init()();
  OUTLINED_FUNCTION_12_12();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
  swift_release();
  dispatch thunk of MachineUtteranceBuilder.build()();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_39_3();
  if (v23) {
    dispatch thunk of MachineUtteranceBuilder.build()();
  }
  NLContextUpdate.nlInput.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v24 = OUTLINED_FUNCTION_29_4();
  OUTLINED_FUNCTION_1(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_8();
  *(_OWORD *)(v25 + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForNeedsValueModifyNickname()(v25 + v22);
  NLContextUpdate.nluSystemDialogActs.setter();
  return swift_release();
}

uint64_t static ContactsContextProvider.makeSDAForNeedsValueModifyNickname()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v29 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v32 = (char *)&v27 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  Swift::String v12 = (char *)&v27 - v11;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  swift_allocObject();
  uint64_t updated = UsoTaskBuilder_update_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  uint64_t v14 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonName();
  swift_allocObject();
  UsoEntityBuilder_common_PersonName.init()();
  dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)();
  swift_release();
  uint64_t v33 = v14;
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)();
  uint64_t v34 = updated;
  static Siri_Nlu_External_SystemPrompted.from(_:)(updated);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  uint64_t v16 = v31;
  Swift::String v17 = v32;
  Swift::String v18 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v18(v32, a1, v2);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  uint64_t v30 = v19;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v36 = v28;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v27 = v21 + 4;
    v18(v29, (uint64_t)v17, v2);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v2);
    uint64_t v24 = v30;
    _os_log_impl(&dword_22D49E000, v30, v20, "#ContactsContextProvider Returning SystemPrompted for prompt for Modify Nickname: %s", v21, 0xCu);
    uint64_t v25 = v28;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v25, -1, -1);
    MEMORY[0x230F85DE0](v21, -1, -1);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v2);

    swift_release();
  }
  return swift_release();
}

uint64_t static ContactsContextProvider.needsValueRelatedSiriMatches()()
{
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.dictationPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22D5A01E0;
  OUTLINED_FUNCTION_11_11();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_21_5();
  OUTLINED_FUNCTION_34_6();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = v0;
  v3._object = v1;
  Swift::String v4 = ContactNLv3Constants.boundValue(_:)(v3);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v2 + 32) = v4;
  OUTLINED_FUNCTION_6_14();
  uint64_t v5 = OUTLINED_FUNCTION_21_5();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  Swift::String v9 = ContactNLv3Constants.boundValue(_:)(v8);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v2 + 48) = v9;
  OUTLINED_FUNCTION_42_2();
  NLContextUpdate.dictationPromptAbortValues.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v10 = OUTLINED_FUNCTION_29_4();
  OUTLINED_FUNCTION_1(v10);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()();
  return NLContextUpdate.nluSystemDialogActs.setter();
}

void static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v32 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_4_4();
  uint64_t v31 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v29 - v13;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  OUTLINED_FUNCTION_1_4();
  uint64_t updated = UsoTaskBuilder_update_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_1_4();
  UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setReference(value:)();
  swift_release();
  uint64_t v33 = updated;
  static Siri_Nlu_External_SystemPrompted.from(_:)(updated);
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_89();
  v16();
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v8);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
  Swift::String v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v18(v0, v2, v3);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v34 = v30;
    *(_DWORD *)uint64_t v21 = 136315138;
    v29[1] = v21 + 4;
    v18(v31, v0, v3);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v34);
    OUTLINED_FUNCTION_35_5(v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = OUTLINED_FUNCTION_24_4();
    v26(v25);
    _os_log_impl(&dword_22D49E000, v19, v20, "#ContactsContextProvider Returning SystemPrompted for prompt for related person name in Modify Relationship: %s", v21, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
    swift_release();
  }
  else
  {
    uint64_t v27 = OUTLINED_FUNCTION_24_4();
    v28(v27);

    swift_release();
  }
  OUTLINED_FUNCTION_8();
}

uint64_t static ContactsContextProvider.disambiguate(contacts:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_25_8();
  NLContextUpdate.currentDomainName.setter();
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, MEMORY[0x263F8EE78], 0, 1, (uint64_t)v8, v9, v10, v11, v16[0], v16[1], v16[2], v16[3], v16[4], v16[5], v16[6], v16[7], v16[8], v16[9], v16[10],
    v16[11]);
  static RREntity.makeDisambiguationGroup(with:)();
  OUTLINED_FUNCTION_39();
  NLContextUpdate.rrEntities.setter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_1(v12);
  OUTLINED_FUNCTION_22_6();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22D59FD50;
  static ContactsContextProvider.makeSDAForDisambiguateContacts(_:)(a1, v13 + v1);
  OUTLINED_FUNCTION_39();
  NLContextUpdate.nluSystemDialogActs.setter();
  swift_endAccess();
  OUTLINED_FUNCTION_89();
  v14();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t specialized closure #1 in static ContactsContextProvider.disambiguate(contacts:)()
{
  OUTLINED_FUNCTION_39();
  swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter();
  swift_endAccess();
  static ContactsContextProvider.canonicalDomainName.getter();
  OUTLINED_FUNCTION_39();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D59FD50;
  String.uppercased()();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v1 = OUTLINED_FUNCTION_31_5();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  Swift::String v5 = ContactNLv3Constants.boundValue(_:)(v4);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_39();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  swift_endAccess();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22D5A01D0;
  OUTLINED_FUNCTION_16_8();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_41_3();
  OUTLINED_FUNCTION_40_3(v8);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 32) = 0xD000000000000012;
  *(void *)(v6 + 40) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_16_8();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_40_3(v9);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 48) = 0xD000000000000012;
  *(void *)(v6 + 56) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_16_8();
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_40_3(v10);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 64) = 0xD000000000000012;
  *(void *)(v6 + 72) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_16_8();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_4();
  Swift::String v11 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_40_3(v11);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 80) = 0xD000000000000012;
  *(void *)(v6 + 88) = 0x800000022D5A83F0;
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_42_2();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  return swift_endAccess();
}

uint64_t static ContactsContextProvider.makeSDAForDisambiguateContacts(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unint64_t v67 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v67 - v6;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v76 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  os_log_type_t v68 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v69 = (char *)&v67 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v67 - v13;
  uint64_t v87 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v15 = *(void *)(v87 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v87);
  uint64_t v86 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v85 = (char *)&v67 - v18;
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v89 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v67 - v23;
  uint64_t v92 = MEMORY[0x263F8EE78];
  uint64_t v88 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    a1 = v88;
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v75 = v8;
  uint64_t v73 = v3;
  uint64_t v74 = v14;
  unint64_t v71 = v7;
  if (v25)
  {
    uint64_t result = type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    uint64_t v84 = result;
    if (v25 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v83 = v25;
    uint64_t v27 = 0;
    uint64_t v81 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    unint64_t v82 = a1 & 0xC000000000000001;
    uint64_t v79 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v80 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v77 = v20 + 8;
    uint64_t v78 = v20 + 32;
    do
    {
      if (v82) {
        id v28 = (id)MEMORY[0x230F854E0](v27, a1);
      }
      else {
        id v28 = *(id *)(a1 + 8 * v27 + 32);
      }
      uint64_t v29 = v28;
      uint64_t v30 = CNContact.formattedFullName.getter();
      uint64_t v32 = v31;
      id v33 = objc_msgSend(v29, sel_identifier);
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      uint64_t v37 = UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(v30, v32, v34, v36, 0);
      uint64_t v38 = v85;
      static Siri_Nlu_External_UserStatedTask.from(_:)(v37);
      Siri_Nlu_External_UserDialogAct.init()();
      uint64_t v39 = v87;
      (*v81)(v86, v38, v87);
      Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
      (*v80)(v38, v39);
      (*v79)(v89, v24, v19);
      uint64_t v40 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, v40);
      }
      unint64_t v42 = *(void *)(v40 + 16);
      unint64_t v41 = *(void *)(v40 + 24);
      if (v42 >= v41 >> 1) {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v40);
      }
      ++v27;
      *(void *)(v40 + 16) = v42 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v40+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v42, v89, v19);
      swift_release();

      uint64_t v92 = v40;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v19);
      a1 = v88;
    }
    while (v83 != v27);
    swift_bridgeObjectRelease();
    uint64_t v8 = v75;
    uint64_t v14 = v74;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.siriContacts);
  uint64_t v44 = v92;
  swift_bridgeObjectRetain();
  unint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 134217984;
    v91[1] = *(void *)(v44 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v45, v46, "#ContactsContextProvider %ld SystemGaveOptions for contact attribute disambiguation", v47, 0xCu);
    MEMORY[0x230F85DE0](v47, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v48 = v92;
  Siri_Nlu_External_SystemGaveOptions.init()();
  MEMORY[0x230F83120](v48);
  uint64_t v49 = v76;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  uint64_t v51 = v69;
  v50(v69, v14, v8);
  uint64_t v52 = v70;
  Siri_Nlu_External_SystemDialogAct.init()();
  v50(v68, v51, v8);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  uint64_t v54 = *(char **)(v49 + 8);
  uint64_t v53 = v49 + 8;
  uint64_t v89 = v54;
  ((void (*)(char *, uint64_t))v54)(v51, v8);
  uint64_t v55 = v72;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v57 = v71;
  uint64_t v58 = v52;
  uint64_t v59 = v73;
  v56(v71, v58, v73);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    uint64_t v76 = v53;
    uint64_t v88 = v63;
    v91[0] = v63;
    *(_DWORD *)uint64_t v62 = 136315138;
    uint64_t v87 = (uint64_t)(v62 + 4);
    v56(v67, (uint64_t)v57, v59);
    uint64_t v64 = String.init<A>(describing:)();
    uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
    _os_log_impl(&dword_22D49E000, v60, v61, "#ContactsContextProvider Returning SystemDialogAct for contact disambiguation %s", v62, 0xCu);
    uint64_t v66 = v88;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v66, -1, -1);
    MEMORY[0x230F85DE0](v62, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v89)(v74, v75);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
    return ((uint64_t (*)(char *, uint64_t))v89)(v14, v75);
  }
}

uint64_t static ContactsContextProvider.makeSDAForConfirmation(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void, void)@<X8>)
{
  unint64_t v45 = (char *)a1;
  unint64_t v42 = a3;
  char v3 = a2 & 1;
  uint64_t v43 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v46 = *(void *)(v43 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v43);
  unint64_t v41 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v39 - v6;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)v39 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v39 - v20;
  static ContactsContextProvider.buildWantedToProceed(for:)((uint64_t)v45, v3);
  static Siri_Nlu_External_SystemOffered.from(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  unint64_t v45 = v21;
  v22(v19, v21, v12);
  uint64_t v23 = v42;
  Siri_Nlu_External_SystemDialogAct.init()();
  v22(v16, v19, v12);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  uint64_t v26 = *(void (**)(void, void))(v13 + 8);
  uint64_t v24 = v13 + 8;
  uint64_t v25 = (uint64_t (*)(void, void))v26;
  uint64_t v44 = v12;
  v26(v19, v12);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriContacts);
  id v28 = *(void (**)(char *, uint64_t (*)(void, void), uint64_t))(v46 + 16);
  uint64_t v29 = v43;
  v28(v7, v23, v43);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    unint64_t v42 = v25;
    uint64_t v33 = v46;
    v39[2] = v24;
    uint64_t v34 = (uint8_t *)v32;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v48 = v40;
    *(_DWORD *)uint64_t v34 = 136315138;
    v39[1] = v34 + 4;
    v28(v41, (uint64_t (*)(void, void))v7, v29);
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v29);
    _os_log_impl(&dword_22D49E000, v30, v31, "#ContactsContextProvider Returning SystemOffered for confirm ModifyContactAttributeIntent: %s", v34, 0xCu);
    uint64_t v37 = v40;
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v37, -1, -1);
    MEMORY[0x230F85DE0](v34, -1, -1);

    return v42(v45, v44);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v29);
    return v25(v45, v44);
  }
}

uint64_t static ContactsContextProvider.buildWantedToProceed(for:)(uint64_t a1, char a2)
{
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  swift_allocObject();
  uint64_t updated = UsoTaskBuilder_update_common_Person.init()();
  if ((a2 & 1) == 0 && a1 == 6)
  {
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_PersonName();
    swift_allocObject();
    UsoEntityBuilder_common_PersonName.init()();
    dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)();
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)();
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)();
    swift_release();
    swift_release();
  }
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(updated);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_2_18()
{
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_6_14()
{
  *(unsigned char *)(v0 - 81) = 4;
  return String.uppercased()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_7_11()
{
  *(void *)(v1 - 112) = 0;
  *(void *)(v1 - 104) = v0;
  _StringGuts.grow(_:)(20);
}

void OUTLINED_FUNCTION_8_13()
{
  _StringGuts.grow(_:)(20);
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  *(unsigned char *)(v0 - 81) = 4;
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_12_12()
{
  return 0x56746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_13_11()
{
  return 0x54746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  *(void *)(v2 - 112) = v0;
  *(void *)(v2 - 104) = v1;
  return 0x6E6F73726570;
}

char *OUTLINED_FUNCTION_15_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  return &a18;
}

void OUTLINED_FUNCTION_16_8()
{
  _StringGuts.grow(_:)(20);
}

uint64_t OUTLINED_FUNCTION_17_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return NLContextUpdate.init()();
}

uint64_t OUTLINED_FUNCTION_21_5()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_23_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return 0x746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_27_8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

uint64_t OUTLINED_FUNCTION_31_5()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return type metadata accessor for Siri_Nlu_External_SystemPrompted();
}

uint64_t OUTLINED_FUNCTION_35_5(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_37_5()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  return 0x75466E6F73726570;
}

void OUTLINED_FUNCTION_40_3(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_42_2()
{
  return v0;
}

uint64_t GetContactAttributeIntent.requestedName.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_fullName);
  if (!v2)
  {
    uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_firstName);
    if (!v3)
    {
      uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_middleName);
      if (!v4)
      {
        uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_lastName);
        if (!v5) {
          return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_nickName);
        }
      }
    }
  }
  return result;
}

id GetContactAttributeIntent.__allocating_init(_:referenceResolver:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_5_13();
  id v14 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  ContactNLv3Intent.isMeCardRequest.getter();
  char v16 = v15;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(integerLiteral:)(v16 & 1).super.super.isa;
  OUTLINED_FUNCTION_1_14((uint64_t)isa, sel_setIsMe_);

  uint64_t v18 = a1;
  ContactNLv3Intent.person.getter(v19, v20, v21, v22, v23, v24, v25, v26, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
    v64);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of PersonIntentNode?((uint64_t)v9);
    if (one-time initialization token for contactId != -1) {
      swift_once();
    }
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v54)
    {
      uint64_t v27 = String.sanitizeContactIdURL.getter(v53, v54);
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(v27, v29, v14);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_22D59FB50;
      type metadata accessor for SiriMatch();
      id v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      *(void *)(v30 + 32) = @nonobjc INObject.init(identifier:display:)(v27, v29, v27, v29);
      uint64_t v53 = v30;
      specialized Array._endMutation()();
      outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(v53, v14);
    }
    else
    {
      SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, v4, (uint64_t)&protocol witness table for GetContactAttributeIntent);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v3, v9, v10);
    OUTLINED_FUNCTION_3_12();
    uint64_t v32 = PersonIntentNodeContaining.firstName.getter();
    if (v33)
    {
      MEMORY[0x230F84F70](v32);
      uint64_t v32 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v32, sel_setFirstName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v34 = PersonIntentNodeContaining.nickName.getter();
    if (v35)
    {
      MEMORY[0x230F84F70](v34);
      uint64_t v34 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v34, sel_setNickName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v36 = PersonIntentNodeContaining.lastName.getter();
    if (v37)
    {
      MEMORY[0x230F84F70](v36);
      uint64_t v36 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v36, sel_setLastName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v38 = PersonIntentNodeContaining.fullName.getter();
    if (v39)
    {
      MEMORY[0x230F84F70](v38);
      uint64_t v38 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v38, sel_setFullName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v40 = PersonIntentNodeContaining.middleName.getter();
    if (v41)
    {
      MEMORY[0x230F84F70](v40);
      uint64_t v40 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v40, sel_setMiddleName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v42 = PersonIntentNodeContaining.company.getter();
    if (v43)
    {
      MEMORY[0x230F84F70](v42);
      uint64_t v42 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v42, sel_setOrganizationName_);

    OUTLINED_FUNCTION_3_12();
    uint64_t v44 = PersonIntentNodeContaining.relationship.getter();
    if (v45)
    {
      MEMORY[0x230F84F70](v44);
      uint64_t v44 = OUTLINED_FUNCTION_2_17();
    }
    else
    {
      uint64_t v18 = 0;
    }
    OUTLINED_FUNCTION_1_14(v44, sel_setContactRelation_);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, v10);
  }
  type metadata accessor for ContactAttribute();
  uint64_t v46 = ContactNLv3Intent.requestedContactAttribute.getter();
  uint64_t v47 = ContactNLv3Intent.requestedContactAttributeLabel.getter();
  uint64_t v49 = v48;
  uint64_t v50 = (void *)static DateTimeUtil.getRequestedAgeDateTime(from:)(a1);
  id v51 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v46, 0, 0, v47, v49, 0, 0, v50, 0);
  OUTLINED_FUNCTION_1_14((uint64_t)v51, sel_setContactAttributeToGet_);

  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  outlined destroy of ContactNLv3Intent((uint64_t)a1);
  return v14;
}

uint64_t GetContactAttributeIntent.siriInferenceContact.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ContactHandle.HandleType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v5);
  uint64_t v35 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContactHandle();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_5_13();
  Contact.init()();
  outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v0);
  if (v11) {
    Contact.id.setter();
  }
  outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact.LabeledValue<String>>);
    uint64_t v33 = v9;
    uint64_t v34 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
    static String.EMPTY.getter();
    v37[0] = static String.EMPTY.getter();
    v37[1] = v13;
    Contact.LabeledValue.init(id:label:value:)();
    uint64_t v9 = v33;
    uint64_t v1 = v34;
    Contact.contactRelations.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_fullName);
  if (v14) {
    Contact.givenName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_firstName);
  if (v15) {
    Contact.givenName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_middleName);
  if (v16) {
    Contact.middleName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_lastName);
  if (v17) {
    Contact.familyName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_nickName);
  if (v18) {
    Contact.nickname.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
  if (v19) {
    Contact.organizationName.setter();
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_phoneNumber);
  if (v20)
  {
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v35, *MEMORY[0x263F6D328], v3);
    OUTLINED_FUNCTION_4_14();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    uint64_t v21 = (void (*)(void *, void))Contact.handles.modify();
    uint64_t v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v24 = *(void *)(*v23 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
    uint64_t v25 = *v23;
    *(void *)(v25 + 16) = v24 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v25+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v24, v1, v7);
    v21(v37, 0);
  }
  uint64_t result = outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, (SEL *)&selRef_emailAddress);
  if (v27)
  {
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v35, *MEMORY[0x263F6D320], v3);
    OUTLINED_FUNCTION_4_14();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    uint64_t v28 = (uint64_t (*)(void *, void))Contact.handles.modify();
    uint64_t v30 = v29;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v31 = *(void *)(*v30 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
    uint64_t v32 = *v30;
    *(void *)(v32 + 16) = v31 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v31, v1, v7);
    return v28(v37, 0);
  }
  return result;
}

uint64_t GetContactAttributeIntent.requestedRelationship.getter()
{
  return outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
}

uint64_t GetContactAttributeIntent.requestedCompanyName.getter()
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
}

uint64_t GetContactAttributeIntent.handleTypePreference.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_contactAttributeToGet);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_contactAttributeType);

    if (v5 == (id)2)
    {
      static ContactHandleTypePreference.preferPhone.getter();
LABEL_7:
      uint64_t v9 = 0;
      goto LABEL_9;
    }
  }
  id v6 = objc_msgSend(v1, sel_contactAttributeToGet);
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_contactAttributeType);

    if (v8 == (id)1)
    {
      static ContactHandleTypePreference.preferEmail.getter();
      goto LABEL_7;
    }
  }
  uint64_t v9 = 1;
LABEL_9:
  uint64_t v10 = type metadata accessor for ContactHandleTypePreference();
  return __swift_storeEnumTagSinglePayload(a1, v9, 1, v10);
}

char *GetContactAttributeIntentResponse.__allocating_init(contactIdentifiers:code:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = GetContactAttributeIntentResponse.init(code:userActivity:)(a2, 0);
  uint64_t v7 = v6;
  if (a1)
  {
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setContactIdentifiers_, v8.super.isa);

  return v6;
}

id SAPerson.init(contact:isMe:)(void *a1, void *a2)
{
  uint64_t v93 = a1;
  id v94 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v92 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v87 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_4();
  uint64_t v90 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v16 - 8);
  OUTLINED_FUNCTION_3_4();
  uint64_t v91 = v17;
  uint64_t v18 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v24 = v23 - v22;
  id v25 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v25);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (!v27)
  {
    id v28 = v25;
    uint64_t v88 = v13;
    id v29 = v28;
    UUID.init()();
    uint64_t v30 = UUID.uuidString.getter();
    uint64_t v89 = v11;
    uint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
    uint64_t v11 = v89;
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v30, v32, v29, (SEL *)&selRef_setAceId_);

    uint64_t v13 = v88;
  }
  id v33 = v25;
  uint64_t v34 = v93;
  if (v93)
  {
    uint64_t v35 = self;
    id v36 = v25;
    id v33 = v34;
    id v37 = objc_msgSend(v35, sel_assistantIDFromContact_, v33);
    if (v37)
    {
      uint64_t v38 = v90;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = v91;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v91, v38, v11);
      __swift_storeEnumTagSinglePayload(v39, 0, 1, v11);
      if (__swift_getEnumTagSinglePayload(v39, 1, v11) == 1)
      {
        id v37 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v40);
        id v37 = v41;
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v11);
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(v91, 1, 1, v11);
    }
    objc_msgSend(v36, sel_setIdentifier_, v37);

    id v42 = objc_msgSend(v33, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v43, v44, v45, (SEL *)&selRef_setInternalGUID_);
    id v46 = objc_msgSend(v33, sel_birthday);
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = (uint64_t)v92;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v49 = type metadata accessor for DateComponents();
      uint64_t v50 = v48;
      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v49 = type metadata accessor for DateComponents();
      uint64_t v48 = (uint64_t)v92;
      uint64_t v50 = (uint64_t)v92;
      uint64_t v51 = 1;
    }
    __swift_storeEnumTagSinglePayload(v50, v51, 1, v49);
    outlined init with take of DateComponents?(v48, (uint64_t)v6);
    type metadata accessor for DateComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v49) == 1)
    {
      outlined destroy of DateComponents?((uint64_t)v6);
      uint64_t v52 = type metadata accessor for Date();
      __swift_storeEnumTagSinglePayload(v10, 1, 1, v52);
      Class isa = 0;
    }
    else
    {
      DateComponents.date.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v49 - 8) + 8))(v6, v49);
      uint64_t v54 = v10;
      uint64_t v55 = type metadata accessor for Date();
      Class isa = 0;
      if (__swift_getEnumTagSinglePayload(v54, 1, v55) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v54, v55);
      }
    }
    objc_msgSend(v36, sel_setBirthday_, isa);

    id v56 = objc_msgSend(v33, sel_organizationName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v57, v58, v59, (SEL *)&selRef_setCompany_);
    id v60 = objc_msgSend(v33, sel_givenName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v61, v62, v63, (SEL *)&selRef_setFirstName_);
    uint64_t v64 = CNContact.formattedFullName.getter();
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v64, v65, v36, (SEL *)&selRef_setFullName_);
    id v66 = objc_msgSend(v33, sel_familyName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v67, v68, v69, (SEL *)&selRef_setLastName_);
    objc_msgSend(v36, sel_setMe_, v94);
    id v70 = objc_msgSend(v33, sel_middleName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v71, v72, v73, (SEL *)&selRef_setMiddleName_);
    id v74 = objc_msgSend(v33, sel_nickname);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v75, v76, v77, (SEL *)&selRef_setNickName_);
    id v78 = objc_msgSend(v33, sel_namePrefix);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v79, v80, v81, (SEL *)&selRef_setPrefix_);
    id v82 = objc_msgSend(v33, sel_nameSuffix);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_2_19();
    OUTLINED_FUNCTION_1_15(v83, v84, v85, (SEL *)&selRef_setSuffix_);
  }
  return v25;
}

id SAUIButton.init(commands:text:)()
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_4_16()), sel_init);
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v2, v3);
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v1, v0, v3, (SEL *)&selRef_setText_);

  return v3;
}

id SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = v13 - v12;
  id v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (!v17)
  {
    id v18 = v15;
    UUID.init()();
    id v36 = a1;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a4;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
    uint64_t v25 = v22;
    a4 = v21;
    a3 = v20;
    a2 = v19;
    a1 = v36;
    outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v25, v24, v18, (SEL *)&selRef_setAceId_);
  }
  id v26 = v15;
  id v27 = AppUtil.buildSash()();
  objc_msgSend(v26, sel_setSash_, v27);

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v28, v29, v26, (SEL *)&selRef_setItemType_);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPerson);
  id v31 = a1;
  id v32 = a3;
  *(void *)(v30 + 32) = SAPerson.init(contact:isMe:)(a1, v32);
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v30, v26, (unint64_t *)&lazy cache variable for type metadata for SAPerson, 0x263F64B28, (SEL *)&selRef_setPersons_);
  if (a2 == 3 || a2 == 2 || a2 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v33 = OUTLINED_FUNCTION_6_15();
    *(_OWORD *)(v33 + 16) = xmmword_22D59FD50;
    *(void *)(v33 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v33 + 40) = v34;
  }
  else
  {
    type metadata accessor for ContactService();
    uint64_t v33 = (uint64_t)static ContactService.defaultPropertiesString.getter();
  }
  outlined bridged method (mbnn) of @objc SAABPersonSnippet.displayProperties.setter(v33, v26);

  outlined destroy of AppUtil(a4);
  return v26;
}

id SAABPersonSnippet.init(_:isMe:)(void *a1, void *a2)
{
  uint64_t v4 = &type metadata for InstalledAppsProvider;
  uint64_t v5 = &protocol witness table for InstalledAppsProvider;
  return SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(a1, 0, a2, (uint64_t)v3);
}

id SAStartLocalRequest.init(clientBoundCommands:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v3 = v2;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  objc_msgSend(v2, sel_setClientBoundCommands_, v4.super.isa);

  return v2;
}

id SASTHeaderItem.init(header:text:)()
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_4_16()), sel_init);
  objc_msgSend(v3, sel_setHeader_, v2);
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v1, v0, v3, (SEL *)&selRef_setText_);

  return v3;
}

id SASTLineDetailItem.init(title:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v2, sel_setTitle_, a1);

  return v2;
}

id SAUIDecoratedText.init(text:regions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(a1, a2, v6, (SEL *)&selRef_setText_);
  if (a3)
  {
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRegions_, v7.super.isa);

  return v6;
}

id SATextDecorationRegion.init(start:length:property:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v8, sel_setStart_, a1);
  objc_msgSend(v8, sel_setLength_, a2);
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(a3, a4, v8, (SEL *)&selRef_setProperty_);

  return v8;
}

id SASTPropertyListItem.init(decoratedTitle:decoratedValues:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v4, sel_setDecoratedTitle_, a1);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a2, v4, &lazy cache variable for type metadata for SAUIDecoratedText, 0x263F64F38, (SEL *)&selRef_setDecoratedValues_);

  return v4;
}

id SASTColumnDataListItem.init(title:decoratedRows:action:)(void *a1, uint64_t a2, void *a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setTitle_, a1);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a2, v6, &lazy cache variable for type metadata for SAUIDecoratedText, 0x263F64F38, (SEL *)&selRef_setDecoratedRows_);
  objc_msgSend(v6, sel_setAction_, a3);

  return v6;
}

id SASTButtonItem.init(action:centered:decoratedLabel:)(void *a1, char a2, void *a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setAction_, a1);
  objc_msgSend(v6, sel_setCentered_, a2 & 1);
  objc_msgSend(v6, sel_setDecoratedLabel_, a3);

  return v6;
}

id SAUIConfirmationView.init(confirmCommands:confirmText:denyCommands:denyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(a1, v12, (SEL *)&selRef_setConfirmCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a2, a3, v12);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(a4, v12, (SEL *)&selRef_setDenyCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a5, a6, v12);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
  id v13 = SAUIConfirmationOption.init(commands:label:)(a1, a2, a3);
  id v14 = SAUIConfirmationOption.init(commands:label:)(a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = OUTLINED_FUNCTION_6_15();
  *(_OWORD *)(v15 + 16) = xmmword_22D5A0B60;
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v14;
  uint64_t v19 = v15;
  specialized Array._endMutation()();
  id v16 = v13;
  id v17 = v14;
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v19, v12, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption, 0x263F64F20, (SEL *)&selRef_setAllConfirmationOptions_);

  return v12;
}

id SAUIConfirmationOption.init(commands:label:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v7 = v6;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setCommands_, v8.super.isa);

  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(a2, a3, v6, (SEL *)&selRef_setLabel_);
  return v6;
}

void outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(uint64_t a1, void *a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  type metadata accessor for CNContact(0, a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, *a5, isa);
}

void outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setCommands_, isa);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  objc_msgSend(a3, sel_setConfirmText_, v4);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(uint64_t a1, void *a2, SEL *a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, *a3, isa);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  objc_msgSend(a3, sel_setDenyText_, v4);
}

uint64_t outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_aceId);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SAABPersonSnippet.displayProperties.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setDisplayProperties_, isa);
}

uint64_t outlined destroy of DateComponents?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void OUTLINED_FUNCTION_1_15(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v4, v5, v6, a4);
}

void OUTLINED_FUNCTION_2_19()
{
}

uint64_t OUTLINED_FUNCTION_4_16()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return swift_allocObject();
}

uint64_t type metadata completion function for ContactsDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[25] = v2;
  v1[26] = v0;
  v1[24] = v3;
  OUTLINED_FUNCTION_23_2();
  v1[27] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowedPaginationParameters?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[28] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v6);
  v1[29] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[30] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[31] = v8;
  v1[32] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for Signpost.OpenSignpost();
  v1[33] = v9;
  OUTLINED_FUNCTION_10_0(v9);
  v1[34] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 368) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "MakePromptForDisambiguation";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = OUTLINED_FUNCTION_21_0(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = _typeName(_:qualified:)();
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v7, v8, "#ContactsDisambiguationStrategy<%s> Running makePromptForDisambiguation()", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
  *(void *)(v0 + 176) = PaginatedItemContainer.items.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_38_5();
  type metadata accessor for CNContact();
  swift_getWitnessTable();
  uint64_t v12 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    id v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (v13)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    uint64_t v15 = specialized ContiguousArray.reserveCapacity(_:)();
    if (v13 < 0)
    {
      __break(1u);
      return MEMORY[0x270F65F50](v15, v16, v17, v18, v19, v20);
    }
    uint64_t v21 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        uint64_t v22 = (id)MEMORY[0x230F854E0](v21, v12);
      }
      else {
        uint64_t v22 = *(id *)(v12 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      ++v21;
      objc_msgSend(objc_allocWithZone(MEMORY[0x263F0FD18]), sel_initWithContact_, v22);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      OUTLINED_FUNCTION_17_9();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v13 != v21);
    uint64_t v14 = v38;
  }
  *(void *)(v0 + 280) = v14;
  uint64_t v24 = *(void *)(v0 + 208);
  static DialogPhase.clarification.getter();
  uint64_t v25 = swift_task_alloc();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v12;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  id v26 = ContactsStrategy.isSmartEnabled.getter();
  id v27 = *(void **)(v24 + 120);
  uint64_t v28 = *(void *)(v0 + 208);
  if ((v26 & 1) == 0)
  {
    if (v27)
    {
      outlined init with copy of DeviceState(v28 + 16, v0 + 56);
      type metadata accessor for ContactResolutionPatternGenerator();
      OUTLINED_FUNCTION_1_4();
      uint64_t v30 = v27;
      OUTLINED_FUNCTION_24_5();
    }
    else
    {
      outlined init with copy of DeviceState(v28 + 16, v0 + 16);
      type metadata accessor for CATGlobals();
      CATGlobals.__allocating_init()();
      OUTLINED_FUNCTION_38_5();
      type metadata accessor for ContactResolutionPatternGenerator();
      OUTLINED_FUNCTION_1_4();
      OUTLINED_FUNCTION_18_9();
    }
    *(void *)(v0 + 312) = ContactResolutionPatternGenerator.init(appBundleId:globals:deviceState:)();
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v35 = type metadata accessor for WindowedPaginationParameters();
    __swift_storeEnumTagSinglePayload(v34, 1, 1, v35);
    id v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v36;
    *id v36 = v0;
    v36[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v20 = *(void *)(v0 + 224);
    id v16 = 0xD000000000000025;
    id v17 = 0x800000022D5A64B0;
    uint64_t v19 = 0x800000022D5A6480;
    uint64_t v15 = v14;
    id v18 = 0xD000000000000025;
    return MEMORY[0x270F65F50](v15, v16, v17, v18, v19, v20);
  }
  if (v27)
  {
    outlined init with copy of DeviceState(v28 + 16, v0 + 136);
    type metadata accessor for ContactResolutionSnippetGenerator();
    OUTLINED_FUNCTION_1_4();
    uint64_t v29 = v27;
    OUTLINED_FUNCTION_24_5();
  }
  else
  {
    outlined init with copy of DeviceState(v28 + 16, v0 + 96);
    type metadata accessor for CATGlobals();
    CATGlobals.__allocating_init()();
    OUTLINED_FUNCTION_38_5();
    type metadata accessor for ContactResolutionSnippetGenerator();
    OUTLINED_FUNCTION_1_4();
    OUTLINED_FUNCTION_18_9();
  }
  *(void *)(v0 + 288) = ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)();
  id v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v31;
  *id v31 = v0;
  v31[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  id v32 = *(void *)(v0 + 256);
  uint64_t v33 = *(void *)(v0 + 192);
  return MEMORY[0x270F65F98](v33, v14, 0xD000000000000025, 0x800000022D5A6480, v32);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 304) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_65();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_12_13();
  v2(v1);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 328) = v7;
  *(void *)(v8 + 336) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v1 + 224), &demangling cache variable for type metadata for WindowedPaginationParameters?);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_1_4();
  v0[43] = ResponseFactory.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB20] + MEMORY[0x263F6FB20]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[44] = v1;
  *uint64_t v1 = v0;
  v1[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[24];
  return v6(v4, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_65();
  uint64_t v1 = *(void *)(v0 + 312);

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_12_13();
  v3(v2);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_65();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_4_17();
  v2(v1);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_65();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_4_17();
  v2(v1);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_65();

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_4_17();
  v3(v2);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v4();
}

uint64_t static ContactsDisambiguationStrategy.extractCurrentContext(from:)()
{
  uint64_t v2 = *(void *)(v0 + 224);
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v3 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 240) + 32))(v2);
  uint64_t v54 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v9 = v8;
    unint64_t v1 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    if (v1 >= v10 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v1 + 1, 1, v8);
      uint64_t v9 = v52;
    }
    *(void *)(v9 + 16) = v1 + 1;
    unint64_t v11 = v9 + 16 * v1;
    *(void *)(v11 + 32) = v6;
    *(void *)(v11 + 40) = v7;
    uint64_t v54 = v9;
  }
  uint64_t v12 = (void *)ParameterResolutionRecord.result.getter();
  unint64_t v13 = specialized INIntentResolutionResult.typedDisambiguationItems<A>()();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_7;
    }
LABEL_21:
    uint64_t v16 = MEMORY[0x263F8EE78];
    goto LABEL_22;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_21;
  }
LABEL_7:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v15 = 0;
  uint64_t v16 = MEMORY[0x263F8EE78];
  do
  {
    if ((v13 & 0xC000000000000001) != 0) {
      id v17 = (id)MEMORY[0x230F854E0](v15, v13);
    }
    else {
      id v17 = *(id *)(v13 + 8 * v15 + 32);
    }
    id v18 = v17;
    uint64_t v19 = outlined bridged method (pb) of @objc INObject.identifier.getter(v17);
    uint64_t v21 = v20;

    if (v21)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v25 = OUTLINED_FUNCTION_30_4();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25, v26, v27, v16);
        uint64_t v16 = v28;
      }
      unint64_t v23 = *(void *)(v16 + 16);
      unint64_t v22 = *(void *)(v16 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v16);
        uint64_t v16 = v29;
      }
      *(void *)(v16 + 16) = v23 + 1;
      uint64_t v24 = v16 + 16 * v23;
      *(void *)(v24 + 32) = v19;
      *(void *)(v24 + 40) = v21;
    }
    ++v15;
  }
  while (v14 != v15);
LABEL_22:
  swift_bridgeObjectRelease_n();
  specialized Array.append<A>(contentsOf:)(v16);
  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)v3)) {
    goto LABEL_44;
  }
  uint64_t v31 = v30;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v31 + 16);
  unint64_t v1 = v3;
  v33(ObjectType, v31);
  unint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 104))(ObjectType, v31);
  if (!v34)
  {
LABEL_43:

LABEL_44:
    return v54;
  }
  unint64_t v13 = v34;
  if (!(v34 >> 62))
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    goto LABEL_26;
  }
LABEL_46:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v35 = result;
LABEL_26:
  unint64_t v53 = v1;
  if (!v35)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
LABEL_42:
    swift_bridgeObjectRelease_n();
    specialized Array.append<A>(contentsOf:)(v38);
    unint64_t v1 = v53;
    goto LABEL_43;
  }
  if (v35 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = MEMORY[0x263F8EE78];
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v39 = (id)MEMORY[0x230F854E0](v37, v13);
      }
      else {
        id v39 = *(id *)(v13 + 8 * v37 + 32);
      }
      uint64_t v40 = v39;
      uint64_t v41 = outlined bridged method (pb) of @objc INObject.identifier.getter(v39);
      uint64_t v43 = v42;

      if (v43)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v47 = OUTLINED_FUNCTION_30_4();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47, v48, v49, v38);
          uint64_t v38 = v50;
        }
        unint64_t v45 = *(void *)(v38 + 16);
        unint64_t v44 = *(void *)(v38 + 24);
        if (v45 >= v44 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v38);
          uint64_t v38 = v51;
        }
        *(void *)(v38 + 16) = v45 + 1;
        uint64_t v46 = v38 + 16 * v45;
        *(void *)(v46 + 32) = v41;
        *(void *)(v46 + 40) = v43;
      }
      ++v37;
    }
    while (v35 != v37);
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

uint64_t static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_38_5();
  uint64_t v5 = (uint8_t *)type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v13 = OUTLINED_FUNCTION_10_0(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = v15 - v14;
  uint64_t v100 = 0;
  uint64_t v101 = MEMORY[0x263F8EE78];
  uint64_t v99 = 0;
  USOParse.preferredUserDialogAct.getter(v15 - v14);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload(v16, 1, v17) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    long long v97 = 0u;
    long long v98 = 0u;
    goto LABEL_32;
  }
  uint64_t v18 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  if (!v18) {
    goto LABEL_8;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((void *)&v98 + 1)) {
    goto LABEL_32;
  }
  outlined init with copy of Any?((uint64_t)&v97, (uint64_t)v93);
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_13_12())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v94)
    {
      uint64_t v19 = UsoEntity_common_Person.contactIds.getter();
      swift_release();
    }
    else
    {
      uint64_t v19 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v19;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    goto LABEL_24;
  }
  type metadata accessor for UsoTask_read_common_Person();
  if (OUTLINED_FUNCTION_13_12()) {
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_13_12())
  {
    uint64_t v21 = UsoTask_request_common_Person.contactIds.getter();
    swift_bridgeObjectRelease();
    uint64_t v101 = v21;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
    swift_release();
    uint64_t v22 = v94;
    if (v94)
    {
      uint64_t v23 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
      swift_release();
      if (v23)
      {
        UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
        uint64_t v22 = v24;
        uint64_t v26 = v25;
        swift_release();
        swift_release();
LABEL_80:
        swift_bridgeObjectRelease();
        uint64_t v99 = v22;
        uint64_t v100 = v26;
        goto LABEL_31;
      }
      swift_release();
      uint64_t v22 = 0;
    }
    else
    {
      swift_release();
    }
    uint64_t v26 = 0;
    goto LABEL_80;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_13_12())
  {
LABEL_10:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    if (v94)
    {
      uint64_t v20 = UsoEntity_common_Person.contactIds.getter();
      swift_release();
    }
    else
    {
      uint64_t v20 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v20;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    goto LABEL_24;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
    swift_release();
    if (v94)
    {
      uint64_t v27 = UsoEntity_common_Person.contactIds.getter();
      swift_release();
    }
    else
    {
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v27;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
LABEL_24:
    swift_release();
    uint64_t v28 = v94;
    if (v94)
    {
      uint64_t v29 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
      swift_release();
      if (v29)
      {
        UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
        uint64_t v28 = v30;
        uint64_t v32 = v31;
        swift_release();
        swift_release();
LABEL_30:
        swift_bridgeObjectRelease();
        uint64_t v99 = v28;
        uint64_t v100 = v32;
        goto LABEL_31;
      }
      swift_release();
      uint64_t v28 = 0;
    }
    else
    {
      swift_release();
    }
    uint64_t v32 = 0;
    goto LABEL_30;
  }
LABEL_31:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v93);
LABEL_32:
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)&v97, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  os_log_type_t v33 = __swift_project_value_buffer((uint64_t)v5, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  uint64_t v90 = v11;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v89 = a4;
    uint64_t v36 = OUTLINED_FUNCTION_29_5();
    *(void *)&long long v97 = OUTLINED_FUNCTION_39_4();
    *(_DWORD *)uint64_t v36 = 136315394;
    os_log_type_t v87 = v33;
    swift_beginAccess();
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = v5;
    uint64_t v39 = MEMORY[0x263F8D310];
    uint64_t v40 = MEMORY[0x230F85100](v37, MEMORY[0x263F8D310]);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    v93[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v44 = MEMORY[0x230F85100](v43, v39);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v47 = v44;
    uint64_t v5 = v38;
    v93[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, (uint64_t *)&v97);
    os_log_type_t v33 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42_3();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v34, v35, "#ContactsDisambiguationStrategy isRequestForDifferentContact contactIds: %s, current IDs are %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    a4 = v89;
    OUTLINED_FUNCTION_2();
  }
  else
  {

    OUTLINED_FUNCTION_42_3();
  }
  swift_beginAccess();
  if (*(void *)(v101 + 16))
  {
    uint64_t v48 = swift_bridgeObjectRetain();
    uint64_t v49 = specialized Set.init<A>(_:)(v48);
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = specialized Set.init<A>(_:)(v50);
    uint64_t v52 = specialized _NativeSet.intersection(_:)(v51, v49);
    swift_bridgeObjectRelease();
    uint64_t v53 = *(void *)(v52 + 16);
    swift_release();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    if (v53)
    {
      if (v56)
      {
        uint64_t v57 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl(&dword_22D49E000, v54, v55, "#ContactsDisambiguationStrategy isRequestForDifferentContact returning false", v57, 2u);
        OUTLINED_FUNCTION_2();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v58 = 0;
      return v58 & 1;
    }
    if (v56)
    {
      uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v5 = 0;
      os_log_type_t v66 = v55;
      uint64_t v67 = "#ContactsDisambiguationStrategy isRequestForDifferentContact returning true";
      uint64_t v68 = v54;
LABEL_55:
      _os_log_impl(&dword_22D49E000, v68, v66, v67, v5, 2u);
      OUTLINED_FUNCTION_2();
      goto LABEL_56;
    }
    goto LABEL_56;
  }
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v61 = 0;
    _os_log_impl(&dword_22D49E000, v59, v60, "#ContactsDisambiguationStrategy isRequestForDifferentContact no contact IDs found in response parse", v61, 2u);
    OUTLINED_FUNCTION_2();
  }

  if (!a4)
  {
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v69))
    {
      id v70 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v70);
      uint64_t v67 = "#ContactsDisambiguationStrategy isRequestForDifferentContact no current relationship from intent, returning true";
      uint64_t v68 = v54;
      os_log_type_t v66 = v33;
      goto LABEL_55;
    }
LABEL_56:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v58 = 1;
    return v58 & 1;
  }
  Swift::String v62 = String.lowercased()();
  if (v100)
  {
    Swift::String v63 = String.lowercased()();
    if (v62._countAndFlagsBits == v63._countAndFlagsBits && v62._object == v63._object) {
      char v65 = 1;
    }
    else {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v71 = v90;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v65 = 0;
    uint64_t v71 = v90;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_89();
  v72();
  swift_bridgeObjectRetain_n();
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v75 = 136315906;
    os_log_type_t v88 = v74;
    swift_beginAccess();
    uint64_t v94 = v99;
    uint64_t v95 = v100;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v76 = String.init<A>(describing:)();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    BOOL v78 = (v65 & 1) == 0;
    if (v65) {
      uint64_t v79 = 0x6465686374616DLL;
    }
    else {
      uint64_t v79 = 0x20746F6E20646964;
    }
    if (v65) {
      unint64_t v80 = 0xE700000000000000;
    }
    else {
      unint64_t v80 = 0xED0000686374616DLL;
    }
    if (v65) {
      uint64_t v81 = 0x6E6F6320656D6173;
    }
    else {
      uint64_t v81 = 0xD000000000000011;
    }
    char v92 = v65;
    uint64_t v82 = v7;
    if (v78) {
      unint64_t v83 = 0x800000022D5A8560;
    }
    else {
      unint64_t v83 = 0xEC00000074636174;
    }
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 22) = 2080;
    uint64_t v94 = a3;
    uint64_t v95 = a4;
    swift_bridgeObjectRetain();
    uint64_t v84 = String.init<A>(describing:)();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 32) = 2080;
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v73, v88, "#ContactsDisambiguationStrategy isRequestForDifferentContact identifiyingRelationship from parse \"%s\" %s the current \"%s\", so %s.", (uint8_t *)v75, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    (*(void (**)(uint64_t, uint8_t *))(v82 + 8))(v90, v5);
    char v65 = v92;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint8_t *))(v7 + 8))(v71, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v58 = v65 ^ 1;
  return v58 & 1;
}

uint64_t ContactsDisambiguationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v98 = a3;
  OUTLINED_FUNCTION_23_2();
  uint64_t v96 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  uint64_t v95 = type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v93 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_4();
  uint64_t v91 = v12;
  MEMORY[0x270FA5388](v13);
  char v92 = (char *)&v89 - v14;
  uint64_t v15 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v17 = v16;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v89 - v20;
  uint64_t v22 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_4_4();
  uint64_t v90 = v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v89 - v28;
  uint64_t v97 = a1;
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v21, v15) != *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_44();
    v42();
    uint64_t v43 = v96;
    return static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void *)(v43 + 224), v98);
  }
  (*(void (**)(char *, uint64_t))(v17 + 96))(v21, v15);
  uint64_t v89 = v24;
  uint64_t v30 = OUTLINED_FUNCTION_17_9();
  v31(v30);
  uint64_t v32 = v22;
  if (USOParse.isOrdinalDisambiguation.getter())
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    unint64_t v34 = (void *)OUTLINED_FUNCTION_21_0(v33, (uint64_t)static Logger.siriContacts);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v36);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v37, v38, "#ContactsDisambiguationStrategy actionForInput ordinal disambiguation, returning .handle()");
      OUTLINED_FUNCTION_2();
    }

    static ActionForInput.handle()();
    uint64_t v39 = OUTLINED_FUNCTION_17_9();
    return v40(v39);
  }
  Input.parse.getter();
  Parse.confirmationResponse.getter();
  OUTLINED_FUNCTION_44();
  v44();
  uint64_t v45 = v95;
  if (__swift_getEnumTagSinglePayload(v9, 1, v95) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, &demangling cache variable for type metadata for ConfirmationResponse?);
    uint64_t v46 = v89;
    goto LABEL_26;
  }
  uint64_t v47 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v92, v9, v45);
  uint64_t v48 = v91;
  OUTLINED_FUNCTION_89();
  v49();
  int v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 88))(v48, v45);
  uint64_t v46 = v89;
  if (v50 == *MEMORY[0x263F6FC98])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    uint64_t v52 = (void *)OUTLINED_FUNCTION_21_0(v51, (uint64_t)static Logger.siriContacts);
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v53))
    {
      uint64_t v54 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v54);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v55, v56, "#ContactsDisambiguationStrategy actionForInput user accepted, returning .handle()");
      OUTLINED_FUNCTION_2();
    }

    static ActionForInput.handle()();
LABEL_24:
    OUTLINED_FUNCTION_44();
    v63();
LABEL_32:
    uint64_t v75 = OUTLINED_FUNCTION_17_9();
    return v76(v75);
  }
  if (v50 == *MEMORY[0x263F6FC90])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    char v58 = (void *)OUTLINED_FUNCTION_21_0(v57, (uint64_t)static Logger.siriContacts);
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v59))
    {
      os_log_type_t v60 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v60);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v61, v62, "#ContactsDisambiguationStrategy actionForInput user rejected, returning .cancel()");
      OUTLINED_FUNCTION_2();
    }

    static ActionForInput.cancel()();
    goto LABEL_24;
  }
  uint64_t v64 = *(void (**)(void))(v47 + 8);
  OUTLINED_FUNCTION_44();
  v64();
  ((void (*)(uint64_t, uint64_t))v64)(v48, v45);
LABEL_26:
  uint64_t v43 = v96;
  uint64_t v65 = static ContactsDisambiguationStrategy.extractCurrentContext(from:)();
  char v68 = static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)((uint64_t)v29, v65, v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    id v70 = (void *)OUTLINED_FUNCTION_21_0(v69, (uint64_t)static Logger.siriContacts);
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v71))
    {
      uint64_t v72 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v72);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v73, v74, "#ContactsDisambiguationStrategy actionForInput encountered parse for different contact, ignoring");
      OUTLINED_FUNCTION_2();
    }

    static ActionForInput.ignore()();
    goto LABEL_32;
  }
  char v77 = USOParse.isOrdinalDisambiguation.getter();
  uint64_t v78 = v90;
  OUTLINED_FUNCTION_89();
  v79();
  if ((v77 & 1) == 0)
  {
    char v81 = USOParse.isContactDisambiguation.getter();
    unint64_t v80 = *(void (**)(void))(v46 + 8);
    OUTLINED_FUNCTION_40_4();
    v80();
    if (v81) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_17_9();
    OUTLINED_FUNCTION_40_4();
    v80();
    return static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void *)(v43 + 224), v98);
  }
  unint64_t v80 = *(void (**)(void))(v46 + 8);
  ((void (*)(uint64_t, uint64_t))v80)(v78, v32);
LABEL_36:
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v82 = type metadata accessor for Logger();
  unint64_t v83 = (void *)OUTLINED_FUNCTION_21_0(v82, (uint64_t)static Logger.siriContacts);
  os_log_type_t v84 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v84))
  {
    unint64_t v85 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v85);
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v86, v87, "#ContactsDisambiguationStrategy actionForInput returning .handle()");
    OUTLINED_FUNCTION_2();
  }

  static ActionForInput.handle()();
  uint64_t v88 = OUTLINED_FUNCTION_17_9();
  return ((uint64_t (*)(uint64_t))v80)(v88);
}

uint64_t ContactsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[6] = v2;
  v1[7] = *(void *)(*(void *)v0 + 224);
  uint64_t v3 = type metadata accessor for ParameterResolutionRecord();
  v1[8] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[9] = v4;
  v1[10] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for Signpost.OpenSignpost();
  v1[11] = v5;
  OUTLINED_FUNCTION_10_0(v5);
  v1[12] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t);
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  NSObject *log;
  uint64_t v52;
  void *v53;
  uint64_t v54;

  os_log_type_t v53 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = v0[11];
  unint64_t v1 = v0[12];
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v4 = "MakeDisambiguationItemContainer";
  *(void *)(v4 + 8) = 31;
  *(unsigned char *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[8];
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    log = v10;
    uint64_t v12 = OUTLINED_FUNCTION_29_5();
    int v50 = (void *)swift_slowAlloc();
    uint64_t v52 = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2112;
    uint64_t v15 = ParameterResolutionRecord.result.getter();
    v0[5] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v10) = (_BYTE)v50;
    *int v50 = v15;
    uint64_t v16 = OUTLINED_FUNCTION_27_9();
    v17(v16);
    _os_log_impl(&dword_22D49E000, log, v11, "#ContactsDisambiguationStrategy<%s> Intent resolution result: %@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_27_9();
    v19(v18);
  }
  uint64_t v20 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v21 = specialized INIntentResolutionResult.typedDisambiguationItems<A>()();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v22 = result;
    if (!result) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v22) {
      goto LABEL_24;
    }
  }
  if (v22 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v24 = 0;
  uint64_t v25 = MEMORY[0x263F8EE78];
  do
  {
    if ((v21 & 0xC000000000000001) != 0) {
      uint64_t v26 = (id)MEMORY[0x230F854E0](v24, v21);
    }
    else {
      uint64_t v26 = *(id *)(v21 + 8 * v24 + 32);
    }
    uint64_t v27 = v26;
    uint64_t v28 = outlined bridged method (pb) of @objc INObject.identifier.getter(v26);
    uint64_t v10 = v29;

    if (v10)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v33 = OUTLINED_FUNCTION_30_4();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v34, v35, v25);
        uint64_t v25 = v36;
      }
      uint64_t v31 = *(void *)(v25 + 16);
      uint64_t v30 = *(void *)(v25 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v25);
        uint64_t v25 = v37;
      }
      *(void *)(v25 + 16) = v31 + 1;
      uint64_t v32 = v25 + 16 * v31;
      *(void *)(v32 + 32) = v28;
      *(void *)(v32 + 40) = v10;
    }
    ++v24;
  }
  while (v22 != v24);
LABEL_24:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain_n();
  uint64_t v38 = Logger.logObject.getter();
  uint64_t v39 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_0(v39))
  {
    uint64_t v40 = OUTLINED_FUNCTION_29_5();
    uint64_t v52 = OUTLINED_FUNCTION_39_4();
    *(_DWORD *)uint64_t v40 = 136315394;
    unint64_t v41 = _typeName(_:qualified:)();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v44 = MEMORY[0x230F85100](v43, MEMORY[0x263F8D310]);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v38, (os_log_type_t)v10, "#ContactsDisambiguationStrategy<%s> Contact identifiers retrieved from disambiguation items: %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v47 = v0[12];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<String>);
  OUTLINED_FUNCTION_1_4();
  uint64_t v48 = BasicDisambiguationItemContainer.init(_:_:)();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v47);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v49 = (uint64_t (*)(uint64_t))v0[1];
  return v49(v48);
}

uint64_t ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[21] = v2;
  v1[22] = v3;
  v1[19] = v4;
  v1[20] = v5;
  uint64_t v6 = *v0;
  v1[23] = *v0;
  v1[24] = *(void *)(v6 + 224);
  uint64_t v7 = type metadata accessor for IntentPromptAnswer();
  v1[25] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[26] = v8;
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation();
  v1[29] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[30] = v10;
  v1[31] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for Parse();
  v1[32] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[33] = v12;
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Signpost.OpenSignpost();
  v1[37] = v13;
  OUTLINED_FUNCTION_10_0(v13);
  v1[38] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  BOOL v8;
  void (*v9)(uint64_t);
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  void (*v41)(void);
  uint64_t (*v42)(void);
  uint64_t v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(void);
  uint64_t v83;
  uint64_t v84;
  long long v85;
  long long v86;
  uint64_t v87;
  uint64_t v88;

  uint64_t v87 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 296);
  unint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v4 = "ParseDisambiguationResult";
  *(void *)(v4 + 8) = 25;
  *(unsigned char *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = (void *)Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = OUTLINED_FUNCTION_4_0(v7);
  uint64_t v9 = (void (*)(uint64_t))MEMORY[0x263F8EE58];
  if (v8)
  {
    uint64_t v10 = (_DWORD *)swift_slowAlloc();
    *(void *)&unint64_t v85 = OUTLINED_FUNCTION_35();
    *uint64_t v10 = 136315138;
    uint64_t v11 = _typeName(_:qualified:)();
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v85);
    uint64_t v9 = (void (*)(uint64_t))MEMORY[0x263F8EE58];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_36_5(&dword_22D49E000, v13, v14, "#ContactsDisambiguationStrategy<%s> Running parseDisambiguationResult()");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 264);
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v15, v16) != *MEMORY[0x263F6FF70]) {
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 248);
  uint64_t v23 = *(void *)(v0 + 232);
  OUTLINED_FUNCTION_89();
  v24();
  (*(void (**)(uint64_t, uint64_t))(v20 + 96))(v18, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v18, v23);
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000025 && v25 == 0x800000022D5A6480)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
LABEL_22:
    Input.parse.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    uint64_t v43 = PaginatedItemContainer.items.getter();
    uint64_t v45 = Parse.toContactId(existingCandidates:)((Swift::OpaquePointer)v43);
    if (v44)
    {
      swift_bridgeObjectRelease();

      uint64_t v46 = OUTLINED_FUNCTION_22_7();
      v9(v46);
      uint64_t v33 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v47 = OUTLINED_FUNCTION_22_7();
      v9(v47);
      swift_bridgeObjectRelease();
      uint64_t v33 = String.sanitizeContactIdURL.getter(v45._countAndFlagsBits, (unint64_t)v45._object);
      uint64_t v32 = v48;
      swift_bridgeObjectRelease();
    }
LABEL_25:
    uint64_t v49 = *(void *)(v0 + 192);
    ((void (*)(void, void))v9)(*(void *)(v0 + 288), *(void *)(v0 + 256));
    os_log_type_t v84 = v33;
    if (v49 == type metadata accessor for GetContactIntent()
      || (int v50 = *(void *)(v0 + 192), v50 == type metadata accessor for GetContactAttributeIntent()))
    {
      type metadata accessor for ParameterResolutionRecord();
      uint64_t v51 = (void *)ParameterResolutionRecord.intent.getter();
      if (v32)
      {
        swift_bridgeObjectRetain();
        uint64_t v56 = OUTLINED_FUNCTION_17_9();
        uint64_t v57 = MEMORY[0x230F84F70](v56);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v57 = 0;
      }
      char v58 = MEMORY[0x230F84F70](0xD000000000000011, 0x800000022D5A67D0);
      objc_msgSend(v51, sel_setValue_forKey_, v57, v58);
      swift_unknownObjectRelease();
    }
    else
    {
      type metadata accessor for ParameterResolutionRecord();
      uint64_t v51 = (void *)ParameterResolutionRecord.intent.getter();
      type metadata accessor for ModifyContactAttributeIntent();
      uint64_t v52 = (void *)swift_dynamicCastClass();
      if (!v52) {
        goto LABEL_38;
      }
      os_log_type_t v53 = objc_msgSend(v52, sel_relatedContact);
      if (!v53) {
        goto LABEL_38;
      }
      uint64_t v54 = v53;
      if (v32)
      {
        swift_bridgeObjectRetain();
        uint64_t v55 = MEMORY[0x230F84F70](v33, v32);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v55 = 0;
      }
      os_log_type_t v59 = (void *)MEMORY[0x230F84F70](0x696669746E656469, 0xEA00000000007265);
      objc_msgSend(v54, sel_setValue_forKey_, v55, v59);

      swift_unknownObjectRelease();
      os_log_type_t v60 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v61 = v54;
      char v58 = MEMORY[0x230F84F70](0x43646574616C6572, 0xEE00746361746E6FLL);
      objc_msgSend(v60, sel_setValue_forKey_, v61, v58);
    }
    uint64_t v51 = (void *)v58;
LABEL_38:
    Swift::String v63 = *(void *)(v0 + 184);
    uint64_t v62 = *(void *)(v0 + 192);
    uint64_t v64 = *(void *)(v0 + 176);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    *(void *)(v0 + 136) = PaginatedItemContainer.items.getter();
    uint64_t v65 = swift_task_alloc();
    *(void *)(v65 + 16) = v62;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v63 + 232);
    *(void *)(v65 + 40) = *(void *)(v63 + 248);
    *(void *)(v65 + 48) = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    swift_getWitnessTable();
    Sequence.first(where:)();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    uint64_t v66 = *(void *)(v0 + 56);
    if (v66)
    {
      uint64_t v67 = *(void *)(v0 + 48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      char v68 = Logger.logObject.getter();
      uint64_t v69 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v68, v69))
      {
        id v70 = OUTLINED_FUNCTION_29_5();
        *(void *)&unint64_t v85 = OUTLINED_FUNCTION_39_4();
        *(_DWORD *)id v70 = 136315394;
        os_log_type_t v71 = _typeName(_:qualified:)();
        *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v66, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_22D49E000, v68, v69, "#ContactsDisambiguationStrategy<%s> Returning user-selected contact: %s.", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      *((void *)&v86 + 1) = MEMORY[0x263F8D310];
      *(void *)&unint64_t v85 = v67;
      *((void *)&v85 + 1) = v66;
      type metadata accessor for ParameterResolutionRecord();
      ParameterResolutionRecord.intent.getter();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      uint64_t v73 = Logger.logObject.getter();
      uint64_t v74 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v73, (os_log_type_t)v74))
      {
        uint64_t v75 = OUTLINED_FUNCTION_29_5();
        *(void *)&unint64_t v85 = OUTLINED_FUNCTION_39_4();
        *(_DWORD *)uint64_t v75 = 136315394;
        uint64_t v76 = _typeName(_:qualified:)();
        *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2080;
        *(void *)(v0 + 80) = v84;
        *(void *)(v0 + 88) = v32;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v78 = String.init<A>(describing:)();
        *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_42_3();
        _os_log_impl(&dword_22D49E000, v73, (os_log_type_t)v74, "#ContactsDisambiguationStrategy<%s> Returning contact selected from contact picker: %s.", (uint8_t *)v75, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
        OUTLINED_FUNCTION_42_3();
      }

      if (v32)
      {
        *((void *)&v86 + 1) = MEMORY[0x263F8D310];
        *(void *)&unint64_t v85 = v84;
        *((void *)&v85 + 1) = v32;
      }
      else
      {
        unint64_t v85 = 0u;
        uint64_t v86 = 0u;
      }
      type metadata accessor for ParameterResolutionRecord();
      ParameterResolutionRecord.intent.getter();
    }
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    unint64_t v80 = *(void *)(v0 + 304);
    static DisambiguationResult.chosenItem(_:)();
    OUTLINED_FUNCTION_40_4();
    v81();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v80);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    goto LABEL_51;
  }
LABEL_12:
  uint64_t v27 = Parse.DirectInvocation.userData.getter();
  if (!v27)
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    goto LABEL_17;
  }
  specialized Dictionary.subscript.getter(0x7865646E69, 0xE500000000000000, v27, (_OWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
LABEL_17:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  if (swift_dynamicCast())
  {
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 128);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    uint64_t v30 = PaginatedItemContainer.items.getter();
    Array.subscript.getter(v29, v30, MEMORY[0x263F8D310], v0 + 64);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_44();
    v31();
    uint64_t v33 = *(void *)(v0 + 64);
    uint64_t v32 = *(void *)(v0 + 72);
    uint64_t v9 = *(void (**)(uint64_t))(v28 + 8);
    goto LABEL_25;
  }
LABEL_18:
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_22D49E000, v34, v35, "Could not find index in userData", v36, 2u);
    OUTLINED_FUNCTION_2();
  }
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v38 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 264);
  unint64_t v83 = *(void *)(v0 + 256);

  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  swift_allocError();
  OUTLINED_FUNCTION_89();
  v40();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  OUTLINED_FUNCTION_40_4();
  v41();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v83);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v37);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
LABEL_51:
  return v42();
}

uint64_t ContactsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameter:)()
{
  OUTLINED_FUNCTION_4();
  v0[3] = v1;
  OUTLINED_FUNCTION_23_2();
  v0[4] = v2;
  uint64_t v3 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v3);
  v0[5] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v0[6] = v4;
  OUTLINED_FUNCTION_1(v4);
  v0[7] = v5;
  v0[8] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v6);
  v0[9] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_21_0(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_0(v3))
  {
    uint64_t v4 = (_DWORD *)swift_slowAlloc();
    uint64_t v11 = OUTLINED_FUNCTION_35();
    *uint64_t v4 = 136315138;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_36_5(&dword_22D49E000, v7, v8, "#ContactsDisambiguationStrategy<%s> Running makeFlowCancelledResponse()");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for ContactsCommonCATsModern();
  static CATOption.defaultMode.getter();
  v0[10] = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[11] = v9;
  *uint64_t v9 = v0;
  v9[1] = ContactsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameter:);
  return ContactsCommonCATsModern.cancellationAcknowledgement()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    *(void *)(v5 + 104) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_65();
  uint64_t v1 = (void *)v0[13];
  static DialogPhase.canceled.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_1_4();
  v0[14] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22D59FB50;
  *(void *)(v2 + 32) = v1;
  uint64_t v9 = v2;
  specialized Array._endMutation()();
  v0[15] = v9;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB28] + MEMORY[0x263F6FB28]);
  uint64_t v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = ContactsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameter:);
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[3];
  return v8(v6, v9, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_65();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v4();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  type metadata accessor for ParameterResolutionRecord();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t v12 = v11;

  if (v12)
  {
    if (v8 == v10 && v12 == v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[10];
  uint64_t v8 = a2[11];
  __swift_project_boxed_opaque_existential_1(a2 + 7, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(v5, v6, v7, v8);
  if (v3)
  {

    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = type metadata accessor for ResponseType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.disambiguate(contacts:)(a3);
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F6FA28], v4);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t ContactsDisambiguationStrategy.__deallocating_deinit()
{
  ContactsStrategy.deinit();
  OUTLINED_FUNCTION_35_6();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for ContactsDisambiguationStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance ContactsDisambiguationStrategy<A1, B1>()
{
  return MEMORY[0x270F66620]();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContactsDisambiguationStrategy();
  return MEMORY[0x230F82210](a1, v5, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsDisambiguationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 240);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsDisambiguationStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66628](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v11;
  long long v12 = *(_OWORD *)(a4 + 240);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(v5 + 32) = v12;
  uint64_t v13 = type metadata accessor for ContactsDisambiguationStrategy();
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66638](a1, a2, a3, v13, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 48) = v9;
  long long v10 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 32) = v10;
  uint64_t v11 = type metadata accessor for ContactsDisambiguationStrategy();
  *Swift::Int v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66630](a1, a2, v11, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 48) = v9;
  long long v10 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 32) = v10;
  uint64_t v11 = type metadata accessor for ContactsDisambiguationStrategy();
  *Swift::Int v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F66648](a1, a2, v11, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ContactsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 48) = v15;
  long long v16 = *(_OWORD *)(a6 + 240);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a6 + 224);
  *(_OWORD *)(v7 + 32) = v16;
  uint64_t v17 = type metadata accessor for ContactsDisambiguationStrategy();
  *uint64_t v15 = v7;
  v15[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v17, a7);
}

uint64_t GetContactDisambiguationStrategy.__deallocating_deinit()
{
  ContactsUnsupportedValueStrategy.deinit();
  OUTLINED_FUNCTION_35_6();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for GetContactDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactDisambiguationStrategy);
}

uint64_t type metadata accessor for GCAContactsDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GCAContactsDisambiguationStrategy);
}

uint64_t type metadata accessor for ModifyContactAttributeDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ModifyContactAttributeDisambiguationStrategy);
}

uint64_t type metadata completion function for GetContactDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactsDisambiguationStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, v2, a2);
}

uint64_t partial apply for closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1)
{
  return closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, v1[6], v1[2], v1[3], v1[4]) & 1;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    Swift::Int v6 = (void *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v6, v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x230F85DE0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) >= *(void *)(a3 + 16))
  {
    int64_t v34 = 0;
    uint64_t v60 = a3 + 56;
    uint64_t v61 = 0;
    uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
    if (v35 < 64) {
      uint64_t v36 = ~(-1 << v35);
    }
    else {
      uint64_t v36 = -1;
    }
    unint64_t v37 = v36 & *(void *)(a3 + 56);
    int64_t v63 = (unint64_t)(v35 + 63) >> 6;
    uint64_t v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          unint64_t v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          unint64_t v40 = v39 | (v34 << 6);
        }
        else
        {
          int64_t v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63) {
            goto LABEL_79;
          }
          unint64_t v42 = *(void *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            int64_t v34 = v41 + 1;
            if (v41 + 1 >= v63) {
              goto LABEL_79;
            }
            unint64_t v42 = *(void *)(v60 + 8 * v34);
            if (!v42)
            {
              int64_t v34 = v41 + 2;
              if (v41 + 2 >= v63) {
                goto LABEL_79;
              }
              unint64_t v42 = *(void *)(v60 + 8 * v34);
              if (!v42)
              {
                int64_t v43 = v41 + 3;
                if (v43 >= v63) {
                  goto LABEL_79;
                }
                unint64_t v42 = *(void *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    int64_t v34 = v43 + 1;
                    if (__OFADD__(v43, 1)) {
                      goto LABEL_85;
                    }
                    if (v34 >= v63) {
                      break;
                    }
                    unint64_t v42 = *(void *)(v60 + 8 * v34);
                    ++v43;
                    if (v42) {
                      goto LABEL_61;
                    }
                  }
LABEL_79:
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
                }
                int64_t v34 = v43;
              }
            }
          }
LABEL_61:
          unint64_t v37 = (v42 - 1) & v42;
          unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
        uint64_t v46 = *v44;
        uint64_t v45 = v44[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v47 = Hasher._finalize()();
        uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
        unint64_t v49 = v47 & ~v48;
        if ((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49)) {
          break;
        }
LABEL_78:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v50 = *(void *)(a4 + 48);
      uint64_t v51 = (void *)(v50 + 16 * v49);
      BOOL v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v53 = ~v48;
        do
        {
          unint64_t v49 = (v49 + 1) & v53;
          if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
            goto LABEL_78;
          }
          uint64_t v54 = (void *)(v50 + 16 * v49);
          BOOL v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_83;
      }
    }
  }
  int64_t v6 = 0;
  uint64_t v58 = a4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  int64_t v59 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v61 = 0;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v62 = v6;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v13);
    int64_t v15 = v6 + 1;
    if (!v14)
    {
      int64_t v15 = v6 + 2;
      if (v6 + 2 >= v59) {
        goto LABEL_79;
      }
      unint64_t v14 = *(void *)(v58 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 3;
        if (v6 + 3 >= v59) {
          goto LABEL_79;
        }
        unint64_t v14 = *(void *)(v58 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v62 = v15;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = 1 << v22;
    if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) == 0) {
      goto LABEL_36;
    }
    uint64_t v25 = *(void *)(a3 + 48);
    uint64_t v26 = (void *)(v25 + 16 * v22);
    BOOL v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v28 = ~v21;
      for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
      {
        unint64_t v30 = i & v28;
        if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
          break;
        }
        uint64_t v31 = (void *)(v25 + 16 * v30);
        BOOL v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v23 = v30 >> 6;
          uint64_t v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v6 = v62;
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  uint64_t v16 = v6 + 4;
  if (v6 + 4 >= v59) {
    goto LABEL_79;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_35:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_17()
{
  return *(void *)(v0 + 256);
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  return *(void *)(v0 + 256);
}

uint64_t OUTLINED_FUNCTION_13_12()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_18_9()
{
  return 0xD00000000000001BLL;
}

uint64_t OUTLINED_FUNCTION_22_7()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_24_5()
{
  return 0xD00000000000001BLL;
}

uint64_t OUTLINED_FUNCTION_27_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_5()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  return 0;
}

void OUTLINED_FUNCTION_36_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_38_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t UsoIdentifierNamespace.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = 0x65746C615F727361;
      break;
    case 3:
      uint64_t v3 = 0x54656E6F6870;
      goto LABEL_6;
    case 4:
      uint64_t v3 = 0x546C69616D65;
LABEL_6:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7079000000000000;
      break;
    case 5:
      uint64_t result = 0x5473736572646461;
      break;
    case 6:
      uint64_t result = 0xD000000000000011;
      break;
    case 7:
      uint64_t result = 0x54746361746E6F63;
      break;
    case 8:
      uint64_t result = 0x6369746E616D6573;
      break;
    default:
      uint64_t result = 0x64695F6D657469;
      break;
  }
  return result;
}

uint64_t UsoIdentifierAppBundle.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000015;
  }
  else {
    return 0x73746361746E6F43;
  }
}

uint64_t one-time initialization function for contactsUnlockPolicy()
{
  uint64_t v0 = type metadata accessor for UnlockDevicePolicy();
  __swift_allocate_value_buffer(v0, static Constants.contactsUnlockPolicy);
  __swift_project_value_buffer(v0, (uint64_t)static Constants.contactsUnlockPolicy);
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

uint64_t static Constants.contactsUnlockPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for contactsUnlockPolicy != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UnlockDevicePolicy();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Constants.contactsUnlockPolicy);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

void one-time initialization function for identifier()
{
}

uint64_t static UsoIdentifierNamespace.attributeType(for:)(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  v5.SiriContactsIntents::SiriKitContactUnsupportedReason value = UsoIdentifierNamespace.init(rawValue:)(v4).value;
  if ((v5.value - 3) > 2u) {
    return 0;
  }
  else {
    return qword_22D5A0E60[v5.value - 3];
  }
}

SiriContactsIntents::UsoIdentifierNamespace_optional __swiftcall UsoIdentifierNamespace.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return (SiriContactsIntents::UsoIdentifierNamespace_optional)9;
  }
  else {
    return (SiriContactsIntents::UsoIdentifierNamespace_optional)v3;
  }
}

uint64_t UsoAttributeName.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::UsoIdentifierNamespace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::UsoIdentifierNamespace_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = UsoIdentifierNamespace.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void one-time initialization function for GivenName()
{
}

void one-time initialization function for NickName()
{
}

void one-time initialization function for FamilyName()
{
}

uint64_t UsoCommonPersonAttribute.rawValue.getter(char a1)
{
  if (a1) {
    return 0x636974656E6F6870;
  }
  else {
    return 1701667182;
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t getEnumTagSinglePayload for UsoIdentifierNamespace(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for UsoIdentifierNamespace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D4F68B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
  }
  return result;
}

void OUTLINED_FUNCTION_0_9(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t ContactsBirthdayInfo.Builder.withBirthday(_:)(uint64_t a1)
{
  if (a1) {
    a1 = dispatch thunk of DialogCalendar.Builder.build()();
  }
  *(void *)(v1 + 16) = a1;
  swift_release();
  return swift_retain();
}

uint64_t ContactsBirthdayInfo.Builder.__deallocating_deinit()
{
  swift_release();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents20ContactsBirthdayInfo7Builder_durationUntilBirthday);
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

unint64_t static ContactsBirthdayInfo.catTypeName.getter()
{
  return 0xD000000000000015;
}

uint64_t static ContactsBirthdayInfo.isDialogType.getter()
{
  return 0;
}

uint64_t ContactsBirthdayInfo.init(builder:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_5_0();
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = *(void *)(a1 + 16);
  outlined init with copy of SpeakableString?(a1 + OBJC_IVAR____TtCC19SiriContactsIntents20ContactsBirthdayInfo7Builder_durationUntilBirthday, v2);
  swift_retain();
  swift_release();
  outlined init with take of SpeakableString?(v2, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  return v1;
}

void ContactsBirthdayInfo.getProperty(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_5_0();
  BOOL v9 = a1 == 0x7961646874726962 && a2 == 0xE800000000000000;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a1 == 0xD000000000000015 && a2 == 0x800000022D5A68F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday, v4);
      uint64_t v11 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload(v4, 1, v11) != 1)
      {
        *(void *)(a3 + 24) = v11;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(boxed_opaque_existential_1, v4, v11);
        return;
      }
      outlined destroy of SpeakableString?(v4);
    }
LABEL_15:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  uint64_t v10 = *(void *)(v3 + 24);
  if (!v10) {
    goto LABEL_15;
  }
  *(void *)(a3 + 24) = type metadata accessor for DialogCalendar();
  *(void *)a3 = v10;
  swift_retain();
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional __swiftcall ContactsBirthdayInfo.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsBirthdayInfo.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriContactsIntents_ContactsBirthdayInfo_CodingKeys_durationUntilBirthday;
  }
  else {
    v4.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriContactsIntents_ContactsBirthdayInfo_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional __swiftcall ContactsBirthdayInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional)2;
}

uint64_t ContactsBirthdayInfo.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ContactsBirthdayInfo.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000015;
  }
  else {
    return 0x7961646874726962;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsBirthdayInfo.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsBirthdayInfo.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsBirthdayInfo.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsBirthdayInfo.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsBirthdayInfo.CodingKeys.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsBirthdayInfo.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsBirthdayInfo.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  return ContactsBirthdayInfo.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsBirthdayInfo.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsBirthdayInfo.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContactsBirthdayInfo.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsBirthdayInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsBirthdayInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsBirthdayInfo.deinit()
{
  swift_release();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  return v0;
}

uint64_t ContactsBirthdayInfo.__deallocating_deinit()
{
  ContactsBirthdayInfo.deinit();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t ObjC metadata update function for ContactsBirthdayInfo()
{
  return type metadata accessor for ContactsBirthdayInfo(0);
}

uint64_t type metadata accessor for ContactsBirthdayInfo(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsBirthdayInfo);
}

void type metadata completion function for ContactsBirthdayInfo()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsBirthdayInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsBirthdayInfo.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for DialogCalendar();
  lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t ContactsBirthdayInfo.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsBirthdayInfo.init(from:)(a1);
  return v2;
}

void type metadata accessor for SpeakableString?()
{
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
    }
  }
}

uint64_t ObjC metadata update function for ContactsBirthdayInfo.Builder()
{
  return type metadata accessor for ContactsBirthdayInfo.Builder(0);
}

uint64_t type metadata accessor for ContactsBirthdayInfo.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsBirthdayInfo.Builder);
}

void type metadata completion function for ContactsBirthdayInfo.Builder()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsBirthdayInfo.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsBirthdayInfo.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsBirthdayInfo(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
    OUTLINED_FUNCTION_5_14();
    *(void *)(v1 + 24) = v12;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    OUTLINED_FUNCTION_5_14();
    uint64_t v10 = OUTLINED_FUNCTION_4_18();
    v11(v10);
    outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

uint64_t protocol witness for CATType.toDictionary.getter in conformance ContactsBirthdayInfo()
{
  return MEMORY[0x270F65130]();
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsBirthdayInfo()
{
  return 0xD000000000000015;
}

void *protocol witness for CATType.mockGlobals.getter in conformance ContactsBirthdayInfo()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void protocol witness for CATType.mockGlobals.setter in conformance ContactsBirthdayInfo(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = a1;
}

uint64_t (*protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo())()
{
  return protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo;
}

void protocol witness for CATType.getProperty(_:) in conformance ContactsBirthdayInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsBirthdayInfo@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsBirthdayInfo.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsBirthdayInfo(void *a1)
{
  return ContactsBirthdayInfo.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsBirthdayInfo()
{
  return lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo, (void (*)(uint64_t))type metadata accessor for ContactsBirthdayInfo);
}

uint64_t base witness table accessor for Encodable in ContactsBirthdayInfo()
{
  return lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(&lazy protocol witness table cache variable for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo, (void (*)(uint64_t))type metadata accessor for ContactsBirthdayInfo);
}

uint64_t lazy protocol witness table accessor for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContactsBirthdayInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactsBirthdayInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D4F7984);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ContactsBirthdayInfo.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsBirthdayInfo.CodingKeys()
{
  return &type metadata for ContactsBirthdayInfo.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(void *a1, void (*a2)(uint64_t, char *, uint64_t), void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v152 = v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  v151 = (char *)v138 - v12;
  OUTLINED_FUNCTION_17();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v138 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)v138 - v18;
  MEMORY[0x270FA5388](v17);
  unint64_t v21 = (char *)v138 - v20;
  uint64_t v22 = type metadata accessor for DateComponents();
  uint64_t v153 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_4_4();
  uint64_t v146 = v23;
  OUTLINED_FUNCTION_17();
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v138 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v147 = (uint64_t)v138 - v28;
  OUTLINED_FUNCTION_17();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  MEMORY[0x270FA5388](v30);
  uint64_t v150 = (char *)v138 - v31;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v32);
  uint64_t v154 = (char *)v138 - v33;
  static DateTimeUtil.getRequestedAgeInterval(contact:contactAttribute:)(a1, a2);
  if (v34)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
    unint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v43))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v44, v45, "#ContactsAgeInfo.init: age could not be computed, returning nil");
      OUTLINED_FUNCTION_2();
    }

    return 0;
  }
  uint64_t v142 = v8;
  uint64_t v35 = (uint64_t)a1;
  uint64_t v36 = type metadata accessor for DialogDuration();
  id v145 = a3;
  uint64_t v141 = a3;
  uint64_t v143 = v36;
  uint64_t v149 = DialogDuration.init(_:mockGlobals:)();
  type metadata accessor for ContactsAgeInfo.Builder();
  swift_initStackObject();
  uint64_t v144 = ContactsAgeInfo.Builder.init()();
  id v37 = objc_msgSend(a2, sel_ageDateTime);
  uint64_t v148 = v22;
  if (!v37)
  {
    OUTLINED_FUNCTION_13_13((uint64_t)v21, 1);
    uint64_t v46 = v35;
LABEL_13:
    static DateComponents.startOfToday.getter();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v21, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v47 = v153;
    goto LABEL_15;
  }
  uint64_t v38 = v37;
  id v39 = objc_msgSend(v37, sel_dateComponents);

  if (v39)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  uint64_t v22 = v148;
  __swift_storeEnumTagSinglePayload((uint64_t)v19, v40, 1, v148);
  outlined init with take of DateComponents?((uint64_t)v19, (uint64_t)v21);
  uint64_t v46 = v35;
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22) == 1) {
    goto LABEL_13;
  }
  uint64_t v47 = v153;
  (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v154, v21, v22);
LABEL_15:
  id v48 = objc_msgSend((id)v46, sel_birthday);
  if (!v48)
  {
    OUTLINED_FUNCTION_13_13((uint64_t)v16, 1);
    goto LABEL_21;
  }
  unint64_t v49 = v48;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = *(void (**)(void))(v47 + 32);
  OUTLINED_FUNCTION_5_15();
  v50();
  OUTLINED_FUNCTION_13_13((uint64_t)v16, 0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v22) == 1)
  {
LABEL_21:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for DateComponents?);
    int64_t v59 = (uint8_t *)v149;
LABEL_25:
    uint64_t v61 = v152;
    goto LABEL_26;
  }
  ((void (*)(char *, char *, uint64_t))v50)(v150, v16, v22);
  uint64_t v51 = (void (*)(void))DateComponents.month.getter();
  uint64_t v47 = v52;
  uint64_t v53 = DateComponents.month.getter();
  uint64_t v140 = a2;
  if (v47)
  {
    uint64_t v83 = OUTLINED_FUNCTION_2_20();
    ((void (*)(uint64_t))v51)(v83);
    OUTLINED_FUNCTION_5_15();
    v51();
  }
  else
  {
    uint64_t v54 = v147;
    BOOL v55 = (void (*)(void))v53;
    uint64_t v56 = v153;
    uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v153 + 16);
    v57(v147, v154, v22);
    v57((uint64_t)v27, v150, v22);
    uint64_t v58 = v150;
    uint64_t v47 = v56;
    if (v51 != v55)
    {
      uint64_t v60 = *(void (**)(void))(v56 + 8);
      ((void (*)(char *, uint64_t))v60)(v27, v22);
      ((void (*)(uint64_t, uint64_t))v60)(v54, v22);
      int64_t v59 = (uint8_t *)v149;
LABEL_24:
      ((void (*)(char *, uint64_t))v60)(v58, v22);
      a2 = v140;
      goto LABEL_25;
    }
  }
  uint64_t v147 = DateComponents.day.getter();
  char v85 = v84;
  uint64_t v86 = DateComponents.day.getter();
  uint64_t v87 = v47;
  char v89 = v88;
  uint64_t v60 = *(void (**)(void))(v87 + 8);
  OUTLINED_FUNCTION_6_16();
  v60();
  OUTLINED_FUNCTION_6_16();
  v60();
  if (v85)
  {
    int64_t v59 = (uint8_t *)v149;
    uint64_t v58 = v150;
    if (v89) {
      goto LABEL_44;
    }
LABEL_56:
    uint64_t v47 = v153;
    goto LABEL_24;
  }
  int64_t v59 = (uint8_t *)v149;
  if (v89)
  {
    uint64_t v47 = v153;
    uint64_t v58 = v150;
    goto LABEL_24;
  }
  uint64_t v58 = v150;
  if (v147 != v86) {
    goto LABEL_56;
  }
LABEL_44:
  uint64_t v90 = dispatch thunk of DialogDuration.valueInYears.getter();
  int v92 = v91;
  double v93 = round(*(double *)&v90);
  if (v91) {
    double v94 = *(double *)&v90;
  }
  else {
    double v94 = v93;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v95 = type metadata accessor for Logger();
  __swift_project_value_buffer(v95, (uint64_t)static Logger.siriContacts);
  uint64_t v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    LODWORD(v147) = v92;
    uint64_t v98 = OUTLINED_FUNCTION_24();
    uint64_t v139 = *(void *)&v94;
    uint64_t v99 = (uint8_t *)v98;
    uint64_t v100 = swift_slowAlloc();
    *(_DWORD *)uint64_t v99 = 136315138;
    uint64_t v157 = v100;
    v138[1] = v99 + 4;
    uint64_t v155 = v139;
    char v156 = v147 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    uint64_t v101 = String.init<A>(describing:)();
    uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, &v157);
    int64_t v59 = (uint8_t *)v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v92) = v147;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v96, v97, "#ContactsAgeInfo.init: birthday is today or on the date requested, setting ageInYearsAsInteger to %s", v99, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    double v94 = *(double *)&v139;
    OUTLINED_FUNCTION_2();
  }

  OUTLINED_FUNCTION_6_16();
  v60();
  uint64_t v61 = v152;
  uint64_t v47 = v153;
  uint64_t v125 = v144;
  *(double *)(v144 + 24) = v94;
  *(unsigned char *)(v125 + 32) = v92 & 1;
  a2 = v140;
LABEL_26:
  id v62 = objc_msgSend(a2, sel_ageDateTime);
  if (v62)
  {
    int64_t v63 = v62;
    id v64 = objc_msgSend(v62, sel_dateComponents);

    if (v64)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v65 = 1;
    }
    uint64_t v66 = (uint64_t)v151;
    OUTLINED_FUNCTION_13_13(v61, v65);
    outlined init with take of DateComponents?(v61, v66);
    if (__swift_getEnumTagSinglePayload(v66, 1, v22))
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v66, &demangling cache variable for type metadata for DateComponents?);
      goto LABEL_58;
    }
    uint64_t v67 = v146;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v146, v66, v22);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v66, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v68 = (uint64_t)v142;
    DateComponents.date.getter();
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v69(v67, v22);
    uint64_t v70 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload(v68, 1, v70) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v68, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v22 = v148;
      goto LABEL_58;
    }
    Date.timeIntervalSince1970.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v68, v70);
    type metadata accessor for DialogCalendar();
    id v71 = v145;
    DialogCalendar.init(_:mockGlobals:)();
    id v72 = objc_msgSend(a2, sel_ageDateTime);
    if (v72)
    {
      uint64_t v73 = v72;
      id v74 = objc_msgSend(v72, sel_qualifier);

      if (v74 == (id)2)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v126 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_4_19(v126, (uint64_t)static Logger.siriContacts);
        uint64_t v127 = Logger.logObject.getter();
        os_log_type_t v128 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v127, v128))
        {
          uint64_t v153 = v46;
          uint64_t v46 = 12;
          OUTLINED_FUNCTION_24();
          uint64_t v152 = OUTLINED_FUNCTION_9_12();
          uint64_t v155 = v152;
          OUTLINED_FUNCTION_3_14(4.8149e-34);
          uint64_t v129 = OUTLINED_FUNCTION_7_12();
          uint64_t v131 = OUTLINED_FUNCTION_15_11(v129, v130);
          OUTLINED_FUNCTION_1_16(v131);
          OUTLINED_FUNCTION_10_15();
          OUTLINED_FUNCTION_14_9();
          OUTLINED_FUNCTION_16_9(&dword_22D49E000, v132, v133, "#ContactsAgeInfo.init: found minus qualifier, setting past age to %s");
          OUTLINED_FUNCTION_18_10();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          OUTLINED_FUNCTION_10_15();
        }
        uint64_t v135 = swift_retain();
        ContactsAgeInfo.Builder.withPastAge(_:)(v135);
        goto LABEL_84;
      }
      if (v74 == (id)1)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v75 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_4_19(v75, (uint64_t)static Logger.siriContacts);
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v153 = v46;
          uint64_t v46 = 12;
          OUTLINED_FUNCTION_24();
          uint64_t v152 = OUTLINED_FUNCTION_9_12();
          uint64_t v155 = v152;
          OUTLINED_FUNCTION_3_14(4.8149e-34);
          uint64_t v78 = OUTLINED_FUNCTION_7_12();
          uint64_t v80 = OUTLINED_FUNCTION_15_11(v78, v79);
          OUTLINED_FUNCTION_1_16(v80);
          OUTLINED_FUNCTION_10_15();
          OUTLINED_FUNCTION_14_9();
          OUTLINED_FUNCTION_16_9(&dword_22D49E000, v81, v82, "#ContactsAgeInfo.init: found plus qualifier, setting future age to %s");
          OUTLINED_FUNCTION_18_10();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          OUTLINED_FUNCTION_10_15();
        }
        uint64_t v134 = swift_retain();
        ContactsAgeInfo.Builder.withFutureAge(_:)(v134);
LABEL_84:
        swift_release();
        uint64_t v136 = swift_retain();
        uint64_t v137 = ContactsAgeInfo.Builder.withRequestedDate(_:)(v136);
        swift_release();
        swift_release();
        type metadata accessor for ContactsAgeInfo();
        swift_allocObject();
        uint64_t v116 = ContactsAgeInfo.init(builder:)(v137);
        swift_release();
        swift_release();

        swift_release();
LABEL_72:
        v69((uint64_t)v154, v148);
        return v116;
      }
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    os_log_type_t v104 = __swift_project_value_buffer(v103, (uint64_t)static Logger.siriContacts);
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.debug.getter();
    BOOL v107 = OUTLINED_FUNCTION_7_4(v106);
    uint64_t v22 = v148;
    if (v107)
    {
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl(&dword_22D49E000, v105, v104, "#ContactsAgeInfo.init: found nil or unknown qualifier", v108, 2u);
      uint64_t v47 = v153;
      OUTLINED_FUNCTION_2();
      swift_release();
    }
    else
    {

      swift_release();
    }
  }
LABEL_58:
  double v109 = COERCE_DOUBLE(dispatch thunk of DialogDuration.valueInDays.getter());
  if ((v110 & 1) != 0 || v109 >= 0.0)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v117 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_19(v117, (uint64_t)static Logger.siriContacts);
    BOOL v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      OUTLINED_FUNCTION_24();
      uint64_t v155 = OUTLINED_FUNCTION_9_12();
      *(_DWORD *)int64_t v59 = 136315138;
      uint64_t v157 = (uint64_t)v59;
      swift_retain();
      uint64_t v120 = OUTLINED_FUNCTION_7_12();
      uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, &v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v118, v119, "#ContactsAgeInfo.init: setting age to %s", v59, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v153;
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {

      OUTLINED_FUNCTION_10_15();
    }
    uint64_t v122 = swift_retain();
    uint64_t v123 = ContactsAgeInfo.Builder.withAge(_:)(v122);
    swift_release();
    type metadata accessor for ContactsAgeInfo();
    swift_allocObject();
    uint64_t v116 = ContactsAgeInfo.init(builder:)(v123);
    swift_release();

    swift_release();
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    goto LABEL_72;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v111 = type metadata accessor for Logger();
  __swift_project_value_buffer(v111, (uint64_t)static Logger.siriContacts);
  uint64_t v112 = (void *)Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v113))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v114, v115, "#ContactsAgeInfo.init: current age is negative, returning nil");
    OUTLINED_FUNCTION_2();
  }

  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v47 + 8))(v154, v22);
  return 0;
}

uint64_t OUTLINED_FUNCTION_1_16(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_2_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_14(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 224) = v1 + 1;
  *(void *)(v2 - 176) = *(void *)(v2 - 240);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_4_19(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_9_12()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_13_13(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_15_11(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 192));
}

void OUTLINED_FUNCTION_16_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_18_10()
{
  return swift_arrayDestroy();
}

uint64_t GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[34] = v2;
  v1[35] = v0;
  v1[33] = v3;
  type metadata accessor for CATOption();
  v1[36] = OUTLINED_FUNCTION_2_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[37] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v1[38] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[39] = v5;
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  v1[43] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[44] = v7;
  v1[45] = OUTLINED_FUNCTION_2_1();
  v1[46] = type metadata accessor for Signpost.OpenSignpost();
  v1[47] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  SiriContactsIntents::GetContactAttributeSlots_optional v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_27_0();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v4 = os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 480) = v5;
  uint64_t v6 = v1 + v5;
  *(void *)uint64_t v6 = "MakeGetContactAttributeUnsupportedValueOutput";
  *(void *)(v6 + 8) = 45;
  *(unsigned char *)(v6 + 16) = 2;
  if (specialized ContactsStrategy.isSmartEnabled.getter(v4))
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_22D49E000, v8, v9, "#GetContactAttributeUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v10, 2u);
      MEMORY[0x230F85DE0](v10, -1, -1);
    }
  }
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v14 = ParameterIdentifier.name.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  v18.SiriContactsIntents::SiriKitContactUnsupportedReason value = GetContactAttributeSlots.init(rawValue:)(v17).value;
  if (v18.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault) {
    goto LABEL_21;
  }
  if (GetContactAttributeSlots.rawValue.getter(v18.value) == 0xD000000000000015 && v19 == 0x800000022D5A6820)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_21:
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    *(void *)(v0 + 464) = v30;
    *uint64_t v30 = v31;
    v30[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_6_11();
    __asm { BR              X2 }
  }
LABEL_14:
  unint64_t v21 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v22 = objc_msgSend(v21, sel_unsupportedReason);

  uint64_t v23 = GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)((uint64_t)v22);
  if (v24)
  {
LABEL_24:
    type metadata accessor for ContactsCommonCATs();
    static CATOption.defaultMode.getter();
    *(void *)(v0 + 440) = CATWrapper.__allocating_init(options:globals:)();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    *(void *)(v0 + 448) = v34;
    *char v34 = v35;
    v34[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_6_11();
    return ContactsCommonCATs.unsupportedAction()();
  }
  switch(v23)
  {
    case 1:
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 424) = v37;
      *id v37 = v38;
      v37[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_6_11();
      return ContactsCommonCATs.unsupportedAuthFailed()();
    case 2:
      uint64_t v40 = *(void *)(v0 + 280);
      type metadata accessor for ContactsLabelCATs();
      static CATOption.defaultMode.getter();
      *(void *)(v0 + 400) = CATWrapper.__allocating_init(options:globals:)();
      outlined init with copy of DeviceState(v40 + 16, v0 + 184);
      uint64_t v41 = (void *)ParameterResolutionRecord.intent.getter();
      unint64_t v42 = objc_msgSend(v41, sel_isMe);

      if (v42)
      {
        objc_msgSend(v42, sel_BOOLValue);
      }
      os_log_type_t v43 = *(uint64_t **)(v0 + 264);
      uint64_t v44 = type metadata accessor for AceOutput();
      uint64_t v45 = MEMORY[0x263F6FFF0];
      v43[3] = v44;
      v43[4] = v45;
      __swift_allocate_boxed_opaque_existential_1(v43);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 408) = v46;
      *uint64_t v46 = v47;
      v46[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_6_11();
      return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)();
    case 3:
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 384) = v25;
      *uint64_t v25 = v26;
      v25[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_6_11();
      return GetContactAttributeCATs.unsupportedContactAttribute()(v27);
    default:
      goto LABEL_24;
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = v2 + 184;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 416) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 432) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 456) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 472) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_66();
  uint64_t v33 = *(void *)(v14 + 304);
  uint64_t v16 = *(void *)(v14 + 296);
  uint64_t v17 = OUTLINED_FUNCTION_14_10();
  uint64_t v20 = OUTLINED_FUNCTION_19_7(v16, v18, v19, v17);
  *(_OWORD *)(v14 + 240) = 0u;
  *(void *)(v14 + 256) = 0;
  *(_OWORD *)(v14 + 224) = 0u;
  uint64_t v21 = MEMORY[0x263F6FFF0];
  v15[3] = v20;
  v15[4] = v21;
  __swift_allocate_boxed_opaque_existential_1(v15);
  OUTLINED_FUNCTION_8_14();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14 + 224, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v22 = OUTLINED_FUNCTION_15_12();
  v23(v22);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, v14 + 224, a10, v33, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_66();
  uint64_t v15 = *(void *)(v14 + 328);
  uint64_t v16 = *(void *)(v14 + 312);
  uint64_t v35 = *(void *)(v14 + 304);
  uint64_t v36 = *(void *)(v14 + 376);
  uint64_t v17 = *(void *)(v14 + 296);
  uint64_t v18 = *(void *)(v14 + 280);
  uint64_t v19 = *(uint64_t **)(v14 + 264);
  outlined init with copy of DeviceState(v18 + 16, v14 + 16);
  uint64_t v20 = *(void *)(v18 + 104);
  *(void *)(v14 + 88) = &type metadata for InstalledAppsProvider;
  *(void *)(v14 + 96) = &protocol witness table for InstalledAppsProvider;
  *(void *)(v14 + 56) = v20;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v14 + 16);
  uint64_t v21 = type metadata accessor for NLContextUpdate();
  uint64_t v24 = OUTLINED_FUNCTION_19_7(v17, v22, v23, v21);
  *(_OWORD *)(v14 + 160) = 0u;
  *(void *)(v14 + 176) = 0;
  *(_OWORD *)(v14 + 144) = 0u;
  uint64_t v25 = MEMORY[0x263F6FFF0];
  v19[3] = v24;
  v19[4] = v25;
  __swift_allocate_boxed_opaque_existential_1(v19);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14 + 144, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v35);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, v14 + 144, v35, v36, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  OUTLINED_FUNCTION_66();
  uint64_t v16 = *(void *)(v14 + 296);
  uint64_t v33 = *(void *)(v14 + 304);
  uint64_t v17 = OUTLINED_FUNCTION_14_10();
  uint64_t v20 = OUTLINED_FUNCTION_19_7(v16, v18, v19, v17);
  *(_OWORD *)(v14 + 120) = 0u;
  *(void *)(v14 + 136) = 0;
  *(_OWORD *)(v14 + 104) = 0u;
  uint64_t v21 = MEMORY[0x263F6FFF0];
  v15[3] = v20;
  v15[4] = v21;
  __swift_allocate_boxed_opaque_existential_1(v15);
  OUTLINED_FUNCTION_8_14();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v22 = OUTLINED_FUNCTION_15_12();
  v23(v22);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, v14 + 104, a10, v33, a12, a13, a14);
}

void GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_6_17();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_6_11();
  __asm { BRAA            X1, X16 }
}

uint64_t GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_6_17();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_6_17();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v10 + 264));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_6_17();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_27_0();
  swift_release();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_18_0();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t type metadata accessor for GetContactAttributeUnsupportedValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for GetContactAttributeUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  uint64_t v2 = *(void *)(v0 + 376);
  return outlined destroy of Signpost.OpenSignpost(v2);
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  uint64_t v2 = *(void *)(v0 + 376);
  return outlined destroy of Signpost.OpenSignpost(v2);
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_8_14()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_15_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
  return type metadata accessor for AceOutput();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForWatch()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForMac()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForCarPlay()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForCarDND()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForIOS()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForXROS()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t static DateTimeUtil.getRequestedAgeInterval(contact:contactAttribute:)(void *a1, void (*a2)(uint64_t, char *, uint64_t))
{
  os_log_type_t v77 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_4_4();
  uint64_t v73 = v6;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v69 - v8;
  uint64_t v10 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_4_4();
  uint64_t v75 = v14;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_25();
  uint64_t v72 = v16;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_58_0();
  uint64_t v78 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v20 = OUTLINED_FUNCTION_10_0(v19);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_25();
  uint64_t v76 = v24;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v69 - v26;
  uint64_t v28 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v30 = v29;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_4_4();
  uint64_t v74 = v32;
  OUTLINED_FUNCTION_17();
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_35_7();
  id v35 = objc_msgSend(a1, sel_birthday);
  if (!v35)
  {
    OUTLINED_FUNCTION_42_4();
    goto LABEL_8;
  }
  uint64_t v36 = v35;
  uint64_t v70 = v12;
  uint64_t v71 = v10;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  id v37 = *(void (**)(void))(v30 + 32);
  OUTLINED_FUNCTION_27_10();
  v37();
  OUTLINED_FUNCTION_24_6();
  __swift_storeEnumTagSinglePayload(v38, v39, v40, v28);
  OUTLINED_FUNCTION_6_3((uint64_t)v27, 1, v28);
  if (v41)
  {
LABEL_8:
    uint64_t v47 = &demangling cache variable for type metadata for DateComponents?;
    uint64_t v48 = (uint64_t)v27;
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_27_10();
  v37();
  DateComponents.year.getter();
  if (v42)
  {
    OUTLINED_FUNCTION_23_8();
    v50();
    return 0;
  }
  DateComponents.date.getter();
  uint64_t v43 = OUTLINED_FUNCTION_39_5();
  uint64_t v44 = v71;
  OUTLINED_FUNCTION_6_3(v43, v45, v71);
  if (v41)
  {
    OUTLINED_FUNCTION_23_8();
    v46();
    uint64_t v47 = (uint64_t *)&demangling cache variable for type metadata for Date?;
    uint64_t v48 = (uint64_t)v9;
LABEL_9:
    outlined destroy of SemanticValue?(v48, v47);
    return 0;
  }
  uint64_t v51 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
  v51(v78, v9, v44);
  id v52 = objc_msgSend(v77, sel_ageDateTime);
  if (!v52)
  {
    uint64_t v56 = v76;
    OUTLINED_FUNCTION_42_4();
LABEL_19:
    outlined destroy of SemanticValue?(v56, &demangling cache variable for type metadata for DateComponents?);
    goto LABEL_20;
  }
  uint64_t v53 = v52;
  os_log_type_t v77 = v51;
  id v54 = objc_msgSend(v52, sel_dateComponents);

  if (v54)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = 1;
  }
  uint64_t v56 = v76;
  __swift_storeEnumTagSinglePayload((uint64_t)v23, v55, 1, v28);
  outlined init with take of DateComponents?((uint64_t)v23, v56);
  OUTLINED_FUNCTION_6_3(v56, 1, v28);
  if (v41) {
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_27_10();
  v37();
  DateComponents.year.getter();
  if (v61)
  {
    OUTLINED_FUNCTION_13_4();
    v65();
  }
  else
  {
    uint64_t v62 = v73;
    DateComponents.date.getter();
    uint64_t v63 = v71;
    OUTLINED_FUNCTION_6_3(v62, 1, v71);
    if (!v41)
    {
      v77(v72, (char *)v62, v63);
      Date.timeIntervalSince(_:)();
      uint64_t v59 = v66;
      uint64_t v67 = *(void (**)(void))(v70 + 8);
      OUTLINED_FUNCTION_27_3();
      v67();
      uint64_t v68 = *(void (**)(void))(v30 + 8);
      OUTLINED_FUNCTION_23_8();
      v68();
      OUTLINED_FUNCTION_27_3();
      v67();
      OUTLINED_FUNCTION_23_8();
      v68();
      return v59;
    }
    OUTLINED_FUNCTION_13_4();
    v64();
    outlined destroy of SemanticValue?(v62, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
LABEL_20:
  uint64_t v57 = v70;
  static Date.startOfTodayGMT.getter();
  Date.timeIntervalSince(_:)();
  uint64_t v59 = v58;
  uint64_t v60 = *(void (**)(void))(v57 + 8);
  OUTLINED_FUNCTION_27_3();
  v60();
  OUTLINED_FUNCTION_27_3();
  v60();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v28);
  return v59;
}

uint64_t static DateTimeUtil.getRequestedAgeDateTime(from:)()
{
  OUTLINED_FUNCTION_4();
  v0[3] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_10_0(v2);
  v0[4] = OUTLINED_FUNCTION_31();
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TimeZone();
  v0[7] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[8] = v4;
  v0[9] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for Calendar();
  v0[10] = v5;
  OUTLINED_FUNCTION_1(v5);
  v0[11] = v6;
  v0[12] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for DateComponents();
  v0[13] = v7;
  OUTLINED_FUNCTION_1(v7);
  v0[14] = v8;
  v0[15] = OUTLINED_FUNCTION_31();
  v0[16] = swift_task_alloc();
  v0[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  v0[18] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[19] = v10;
  v0[20] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  v0[21] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[22] = v12;
  v0[23] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for DateTimeResolutionSpec();
  v0[24] = v13;
  OUTLINED_FUNCTION_1(v13);
  v0[25] = v14;
  v0[26] = OUTLINED_FUNCTION_2_1();
  uint64_t v15 = type metadata accessor for DateTimeResolver();
  v0[27] = v15;
  OUTLINED_FUNCTION_1(v15);
  v0[28] = v16;
  v0[29] = OUTLINED_FUNCTION_2_1();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  OUTLINED_FUNCTION_10_0(v17);
  v0[30] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  v0[31] = v18;
  OUTLINED_FUNCTION_1(v18);
  v0[32] = v19;
  v0[33] = OUTLINED_FUNCTION_31();
  v0[34] = swift_task_alloc();
  v0[35] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for Signpost.OpenSignpost();
  v0[36] = v20;
  OUTLINED_FUNCTION_10_0(v20);
  v0[37] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 344) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "AgeDateTime";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = UsoEntity_common_Date.toDate()();
  *(void *)(v0 + 304) = v6;
  if (v6)
  {
    type metadata accessor for DateTime.Time();
    swift_allocObject();
    swift_retain();
    DateTime.Time.init(withHour:)();
    *(void *)(v0 + 312) = type metadata accessor for DateTime();
    swift_allocObject();
    *(void *)(v0 + 320) = DateTime.init(withDate:time:)();
    DateTimeResolver.init()();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v7;
    *uint64_t v7 = v0;
    v7[1] = static DateTimeUtil.getRequestedAgeDateTime(from:);
    return static DateTimeUtil.requestContext()();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v9 = *(void *)(v0 + 296);
    OUTLINED_FUNCTION_11_12();
    outlined destroy of Signpost.OpenSignpost(v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  *(void *)(v1 + 336) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v2, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  void (*v7)(uint64_t);
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void (*v33)(void);
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void (*v55)(void);
  id v56;
  uint64_t v57;
  void *v58;
  os_log_type_t v59;
  _WORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(id);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  uint64_t v78;
  void (*v79)(void);
  uint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  void (*v83)(void);
  uint64_t v84;
  void *v85;
  os_log_type_t v86;
  _WORD *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  void *v93;
  uint64_t v94;

  double v93 = v0;
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], *MEMORY[0x263F6D428], v0[21]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F6D418], v3);
  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, MEMORY[0x263F6D6D8]);
  Dictionary.init(dictionaryLiteral:)();
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  DateTimeResolver.makeRecommendation(value:context:spec:)();
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[28];
  swift_release();
  OUTLINED_FUNCTION_3_2();
  v6();
  uint64_t v7 = (void (*)(uint64_t))(v5 + 8);
  OUTLINED_FUNCTION_23_3();
  v8();
  OUTLINED_FUNCTION_24_6();
  __swift_storeEnumTagSinglePayload(v9, v10, v11, v4);
  OUTLINED_FUNCTION_27_10();
  v12();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v13 = v0[32];
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  uint64_t v15 = *(void (**)(uint64_t))(v13 + 16);
  uint64_t v16 = OUTLINED_FUNCTION_38_6();
  v15(v16);
  uint64_t v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    int v91 = v15;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    int v92 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    lazy protocol witness table accessor for type Recommendation<DateTime> and conformance Recommendation<A>();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v7 = (void (*)(uint64_t))v21;
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = OUTLINED_FUNCTION_34_7();
    v7(v22);
    _os_log_impl(&dword_22D49E000, v17, v18, "#getRequestedAgeDateTime ### datetime recommendation: %s", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t v15 = v91;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v23 = OUTLINED_FUNCTION_34_7();
    v7(v23);
  }
  uint64_t v24 = v0[32];
  uint64_t v25 = v0[33];
  uint64_t v26 = v0[31];
  ((void (*)(uint64_t, void, uint64_t))v15)(v25, v0[35], v26);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v25, v26);
  uint64_t v28 = v27 == *MEMORY[0x263F6D398] || v27 == *MEMORY[0x263F6D380];
  if (v28)
  {
    uint64_t v30 = v0[11];
    uint64_t v29 = v0[12];
    uint64_t v31 = v0[10];
    (*(void (**)(void, void))(v0[32] + 96))(v0[33], v0[31]);
    static Calendar.current.getter();
    static TimeZone.current.getter();
    uint64_t v32 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    OUTLINED_FUNCTION_23_3();
    v33();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    uint64_t v34 = objc_msgSend(v32, sel_startDateComponents);

    if (v34)
    {
      id v35 = v0[13];
      uint64_t v36 = v0[14];
      id v37 = v0[6];
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = *(void (**)(void))(v36 + 32);
      OUTLINED_FUNCTION_27_10();
      v38();
      OUTLINED_FUNCTION_24_6();
      __swift_storeEnumTagSinglePayload(v39, v40, v41, v35);
      OUTLINED_FUNCTION_6_3(v37, 1, v35);
      if (!v28)
      {
        char v42 = v0[16];
        uint64_t v43 = v0[17];
        uint64_t v45 = v0[13];
        uint64_t v44 = v0[14];
        OUTLINED_FUNCTION_27_10();
        v38();
        type metadata accessor for AgeDateTime();
        uint64_t v46 = OUTLINED_FUNCTION_19_8();
        v47(v46);
        uint64_t v48 = static DateTimeUtil.getQualifier(for:)();
        uint64_t v90 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v42, v48);
        swift_release();
LABEL_35:
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
        OUTLINED_FUNCTION_13_4();
        v83();
        goto LABEL_28;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(v0[6], 1, 1, v0[13]);
    }
    uint64_t v66 = v0[6];
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_13_4();
    v67();
    uint64_t v68 = v66;
LABEL_26:
    outlined destroy of SemanticValue?(v68, &demangling cache variable for type metadata for DateComponents?);
LABEL_27:
    uint64_t v90 = 0;
    goto LABEL_28;
  }
  if (v27 != *MEMORY[0x263F6D388])
  {
    uint64_t v58 = (void *)Logger.logObject.getter();
    uint64_t v59 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_6_1(v59))
    {
      uint64_t v60 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v60);
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v61, v62, "#getRequestedAgeDateTime DateTimeValue recommendation had no valid value, returning nil.");
      OUTLINED_FUNCTION_2();
    }
    uint64_t v63 = v0[35];
    id v64 = v0[31];
    swift_release();

    swift_release();
    ((void (*)(uint64_t, uint64_t))v7)(v63, v64);
    uint64_t v65 = OUTLINED_FUNCTION_43_1();
    v7(v65);
    goto LABEL_27;
  }
  unint64_t v49 = (uint64_t *)v0[33];
  (*(void (**)(uint64_t *, void))(v0[32] + 96))(v49, v0[31]);
  uint64_t v50 = *v49;
  if ((unint64_t)*v49 >> 62)
  {
    swift_bridgeObjectRetain();
    char v84 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v84) {
      goto LABEL_17;
    }
  }
  else if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v50 & 0xC000000000000001) == 0, v50);
    if ((v50 & 0xC000000000000001) != 0) {
      MEMORY[0x230F854E0](0, v50);
    }
    else {
      swift_retain();
    }
    uint64_t v51 = v0[9];
    id v52 = v0[7];
    uint64_t v53 = v0[8];
    swift_bridgeObjectRelease();
    static Calendar.current.getter();
    static TimeZone.current.getter();
    id v54 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    OUTLINED_FUNCTION_23_3();
    v55();
    uint64_t v56 = objc_msgSend(v54, sel_startDateComponents);

    if (v56)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v57 = 0;
    }
    else
    {
      uint64_t v57 = 1;
    }
    uint64_t v72 = v0[13];
    uint64_t v73 = v0[5];
    __swift_storeEnumTagSinglePayload(v0[4], v57, 1, v72);
    uint64_t v74 = OUTLINED_FUNCTION_38_6();
    outlined init with take of DateComponents?(v74, v75);
    if (__swift_getEnumTagSinglePayload(v73, 1, v72) == 1)
    {
      uint64_t v76 = v0[5];
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_13_4();
      v77();
      uint64_t v68 = v76;
      goto LABEL_26;
    }
    uint64_t v43 = v0[15];
    uint64_t v78 = v0[16];
    uint64_t v45 = v0[13];
    uint64_t v44 = v0[14];
    OUTLINED_FUNCTION_11();
    v79();
    type metadata accessor for AgeDateTime();
    uint64_t v80 = OUTLINED_FUNCTION_19_8();
    v81(v80);
    uint64_t v82 = static DateTimeUtil.getQualifier(for:)();
    uint64_t v90 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v78, v82);
    swift_release();
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  char v85 = (void *)Logger.logObject.getter();
  uint64_t v86 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_6_1(v86))
  {
    uint64_t v87 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v87);
    OUTLINED_FUNCTION_8_1(&dword_22D49E000, v88, v89, "#getRequestedAgeDateTime DateTimeValue recommendation had no valid value, returning nil.");
    OUTLINED_FUNCTION_2();
  }
  swift_release();

  swift_release();
  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_13_4();
  ((void (*)(void))v7)();
  uint64_t v90 = 0;
LABEL_28:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v69 = v0[37];
  OUTLINED_FUNCTION_11_12();
  outlined destroy of Signpost.OpenSignpost(v69);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v70 = (uint64_t (*)(id))v0[1];
  return v70(v90);
}

uint64_t static DateTimeUtil.requestContext()()
{
  type metadata accessor for Date();
  v0[2] = swift_task_alloc();
  type metadata accessor for Calendar();
  v0[3] = swift_task_alloc();
  type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v0[4] = swift_task_alloc();
  type metadata accessor for TimeZone();
  v0[5] = swift_task_alloc();
  type metadata accessor for Locale();
  v0[6] = swift_task_alloc();
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](static DateTimeUtil.requestContext(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static TimeZone.autoupdatingCurrent.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = static DateTimeUtil.requestContext();
  uint64_t v2 = *(void *)(v0 + 32);
  return static DateTimeUtil.hemisphere()(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  static Calendar.autoupdatingCurrent.getter();
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  swift_allocObject();
  OUTLINED_FUNCTION_43_1();
  uint64_t v1 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t static DateTimeUtil.getQualifier(for:)()
{
  uint64_t v0 = type metadata accessor for DateComponents();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  static DateComponents.startOfToday.getter();
  DateComponents.date.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    uint64_t v11 = (uint64_t)v9;
LABEL_5:
    outlined destroy of SemanticValue?(v11, (uint64_t *)&demangling cache variable for type metadata for Date?);
    return 0;
  }
  Date.timeIntervalSince1970.getter();
  double v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
  v14(v9, v10);
  DateComponents.date.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v10) == 1)
  {
    uint64_t v11 = (uint64_t)v7;
    goto LABEL_5;
  }
  Date.timeIntervalSince1970.getter();
  double v17 = v16;
  v14(v7, v10);
  if (v13 >= v17) {
    return 2 * (v17 < v13);
  }
  else {
    return 1;
  }
}

uint64_t static DateTimeUtil.getRequestedAgeDateTime(from:)(uint8_t *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar.Component?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_18_11(v6);
  uint64_t v142 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_0_0();
  uint64_t v137 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_18_11(v9);
  uint64_t v147 = type metadata accessor for TerminalElement.Qualifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v144 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_4();
  uint64_t v141 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_58_0();
  uint64_t v145 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Interval?);
  uint64_t v16 = OUTLINED_FUNCTION_10_0(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_4();
  uint64_t v154 = v17;
  uint64_t v155 = type metadata accessor for TerminalElement.Interval();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_4_4();
  uint64_t v146 = v20;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_25();
  uint64_t v153 = v22;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_25();
  uint64_t v149 = v24;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_18_11(v26);
  type metadata accessor for Calendar();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_18_11(v28);
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v151 = v29;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_4_4();
  uint64_t v150 = v31;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_25();
  uint64_t v160 = v33;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_58_0();
  uint64_t v158 = v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimePeriod?);
  uint64_t v37 = OUTLINED_FUNCTION_10_0(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_12_4();
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Period?);
  uint64_t v39 = OUTLINED_FUNCTION_10_0(v38);
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_4_4();
  uint64_t v140 = v40;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_35_7();
  type metadata accessor for TerminalElement.Period();
  OUTLINED_FUNCTION_0_0();
  uint64_t v156 = v43;
  uint64_t v157 = v42;
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_4_4();
  uint64_t v138 = v44;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_58_0();
  uint64_t v143 = v46;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Date?);
  uint64_t v48 = OUTLINED_FUNCTION_10_0(v47);
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_15();
  uint64_t v51 = v50 - v49;
  type metadata accessor for TerminalElement.Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v161 = v52;
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_3_4();
  uint64_t v159 = v53;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  uint64_t v55 = OUTLINED_FUNCTION_10_0(v54);
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_15();
  uint64_t v58 = v57 - v56;
  uint64_t v59 = type metadata accessor for TerminalElement.DateTimeValue();
  OUTLINED_FUNCTION_0_0();
  uint64_t v163 = v60;
  MEMORY[0x270FA5388](v61);
  OUTLINED_FUNCTION_3_4();
  uint64_t v162 = v62;
  if (one-time initialization token for contactAgeDate != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  OUTLINED_FUNCTION_6_3(v58, 1, v59);
  if (v70)
  {
    outlined destroy of SemanticValue?(v58, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.siriContacts);
    id v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v66);
      _os_log_impl(&dword_22D49E000, v64, v65, "#getRequestedAgeDateTime user didn't provide a date time reference for age computation. returning nil.", a1, 2u);
      OUTLINED_FUNCTION_2();
    }

    return 0;
  }
  uint64_t v67 = v59;
  uint64_t v68 = v162;
  uint64_t v135 = v67;
  OUTLINED_FUNCTION_11();
  v69();
  TerminalElement.DateTimeValue.startDate.getter();
  OUTLINED_FUNCTION_6_3(v51, 1, v161);
  if (!v70)
  {
    OUTLINED_FUNCTION_11();
    v76();
    uint64_t v77 = TerminalElement.Date.periods.getter();
    specialized Collection.first.getter(v77, v2);
    swift_bridgeObjectRelease();
    uint64_t v78 = type metadata accessor for TerminalElement.DateTimePeriod();
    OUTLINED_FUNCTION_6_3(v2, 1, v78);
    uint64_t v80 = v156;
    if (v79)
    {
      outlined destroy of SemanticValue?(v2, &demangling cache variable for type metadata for TerminalElement.DateTimePeriod?);
      __swift_storeEnumTagSinglePayload(v1, 1, 1, v157);
    }
    else
    {
      TerminalElement.DateTimePeriod.period.getter();
      OUTLINED_FUNCTION_23();
      v89();
      uint64_t v71 = v157;
      OUTLINED_FUNCTION_6_3(v1, 1, v157);
      if (!v90) {
        goto LABEL_40;
      }
    }
    outlined destroy of SemanticValue?(v1, &demangling cache variable for type metadata for TerminalElement.Period?);
    static DateComponents.startOfToday.getter();
    static Calendar.gregorianCurrent.getter();
    static DateTimeUtil.dateComponents(from:now:localCalendar:)(v158, v148, v160);
    OUTLINED_FUNCTION_23();
    v91();
    if (one-time initialization token for contactAttributes != -1) {
      swift_once();
    }
    uint64_t v92 = IntentNodeTraversable.values<A>(forNode:)();
    static DateTimeUtil.qualifier(for:requestedDateComponents:now:)(v92, v160, v158, v152);
    swift_bridgeObjectRelease();
    DateComponents.setImplicitYear(from:now:qualifier:)(v159, v158, v152);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.siriContacts);
    outlined init with copy of TerminalElement.Qualifier?(v152, v149);
    double v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 136315394;
      outlined init with copy of TerminalElement.Qualifier?(v149, v153);
      uint64_t v97 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of SemanticValue?(v149, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
      *(_WORD *)(v96 + 12) = 2080;
      OUTLINED_FUNCTION_40_5();
      lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22D49E000, v94, v95, "#getRequestedAgeDateTime user asked for age with qualifier: %s on specific date: %s", (uint8_t *)v96, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      outlined destroy of SemanticValue?(v149, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
    }

    type metadata accessor for AgeDateTime();
    OUTLINED_FUNCTION_40_5();
    OUTLINED_FUNCTION_89();
    v101();
    outlined init with copy of TerminalElement.Qualifier?(v152, v153);
    id v88 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v150, v153);
    outlined destroy of SemanticValue?(v152, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
    unint64_t v102 = *(void (**)(void))(v151 + 8);
    OUTLINED_FUNCTION_33_3();
    v102();
    OUTLINED_FUNCTION_23();
    v103();
    OUTLINED_FUNCTION_6_18();
    v104();
    OUTLINED_FUNCTION_33_3();
    v102();
    return (uint64_t)v88;
  }
  outlined destroy of SemanticValue?(v51, &demangling cache variable for type metadata for TerminalElement.Date?);
  uint64_t v71 = v154;
  TerminalElement.DateTimeValue.interval.getter();
  uint64_t v72 = OUTLINED_FUNCTION_39_5();
  OUTLINED_FUNCTION_6_3(v72, v73, v155);
  if (v70)
  {
    OUTLINED_FUNCTION_6_18();
    v74();
    uint64_t v75 = &demangling cache variable for type metadata for TerminalElement.Interval?;
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_11();
  v81();
  uint64_t v71 = v146;
  TerminalElement.Interval.qualifier.getter();
  uint64_t v82 = OUTLINED_FUNCTION_39_5();
  OUTLINED_FUNCTION_6_3(v82, v83, v147);
  if (v84)
  {
    OUTLINED_FUNCTION_23_3();
    v85();
    OUTLINED_FUNCTION_6_18();
    v86();
    uint64_t v75 = &demangling cache variable for type metadata for TerminalElement.Qualifier?;
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_11();
  v105();
  uint64_t v106 = TerminalElement.Interval.quantity.getter();
  if (v107)
  {
    OUTLINED_FUNCTION_27_3();
    v117();
    OUTLINED_FUNCTION_23_3();
    v118();
    OUTLINED_FUNCTION_6_18();
    v119();
    return 0;
  }
  uint64_t v108 = v106;
  double v109 = *(double *)&v106;
  (*(void (**)(uint64_t, void, uint64_t))(v144 + 104))(v141, *MEMORY[0x263F72870], v147);
  char v110 = MEMORY[0x230F834E0](v145, v141);
  uint64_t v80 = *(void *)(v144 + 8);
  OUTLINED_FUNCTION_27_3();
  uint64_t result = ((uint64_t (*)(void))v80)();
  if (v110)
  {
    uint64_t v112 = v142;
    uint64_t v71 = v140;
    if ((~v108 & 0x7FF0000000000000) != 0)
    {
      uint64_t v68 = v162;
      if (v109 > -9.22337204e18)
      {
        double v113 = v109;
        if (v109 >= 9.22337204e18)
        {
          __break(1u);
LABEL_40:
          OUTLINED_FUNCTION_11();
          v114();
          uint64_t v115 = v68;
          id v88 = static DateTimeUtil.ageDateTime(for:)(v143);
          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v143, v71);
          OUTLINED_FUNCTION_23();
          v116();
          (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v115, v135);
          return (uint64_t)v88;
        }
        goto LABEL_46;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  double v113 = -v109;
  uint64_t v112 = v142;
  uint64_t v71 = v140;
  if ((~COERCE__INT64(-v109) & 0x7FF0000000000000) == 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v109 >= 9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v109 > -9.22337204e18)
  {
LABEL_46:
    TerminalElement.Interval.period.getter();
    uint64_t v120 = OUTLINED_FUNCTION_39_5();
    OUTLINED_FUNCTION_6_3(v120, v121, v157);
    if (!v70)
    {
      OUTLINED_FUNCTION_11();
      v125();
      static DateTimeUtil.calendarComponent(for:)(v138, v139);
      OUTLINED_FUNCTION_6_3(v139, 1, v112);
      if (!v126)
      {
        OUTLINED_FUNCTION_11();
        v131();
        id v88 = static DateTimeUtil.ageDateTime(for:nlQuantity:qualifier:)(v136, (uint64_t)v113, v145);
        (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v136, v142);
        OUTLINED_FUNCTION_3_2();
        v132();
        OUTLINED_FUNCTION_27_3();
        v133();
        OUTLINED_FUNCTION_23_3();
        v134();
        (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v135);
        return (uint64_t)v88;
      }
      OUTLINED_FUNCTION_3_2();
      v127();
      OUTLINED_FUNCTION_27_3();
      v128();
      OUTLINED_FUNCTION_23_3();
      v129();
      OUTLINED_FUNCTION_6_18();
      v130();
      uint64_t v75 = &demangling cache variable for type metadata for Calendar.Component?;
      uint64_t v87 = v139;
      goto LABEL_22;
    }
    OUTLINED_FUNCTION_27_3();
    v122();
    OUTLINED_FUNCTION_23_3();
    v123();
    OUTLINED_FUNCTION_6_18();
    v124();
    uint64_t v75 = &demangling cache variable for type metadata for TerminalElement.Period?;
LABEL_21:
    uint64_t v87 = v71;
LABEL_22:
    outlined destroy of SemanticValue?(v87, v75);
    return 0;
  }
LABEL_56:
  __break(1u);
  return result;
}

id static DateTimeUtil.ageDateTime(for:)(uint64_t a1)
{
  uint64_t v78 = a1;
  uint64_t v1 = type metadata accessor for Calendar.Component();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v71 = (char *)&v70 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v73 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimeZone();
  uint64_t v76 = *(void *)(v12 - 8);
  uint64_t v77 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v74 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DateComponents();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v75 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TerminalElement.Period();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v72 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  char v70 = (char *)&v70 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v70 - v25;
  uint64_t v27 = type metadata accessor for Calendar();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v80 = v27;
  uint64_t v81 = v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.gregorianCurrent.getter();
  static Date.startOfToday.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v78, v16);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
  if (v31 == *MEMORY[0x263F72868])
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F07870], v1);
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v20);
    uint64_t v33 = v20;
    uint64_t v34 = v30;
    if (EnumTagSinglePayload == 1)
    {
      (*(void (**)(char *, uint64_t))(v79 + 8))(v26, v33);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v80);
      uint64_t v35 = (uint64_t)v8;
LABEL_18:
      outlined destroy of SemanticValue?(v35, (uint64_t *)&demangling cache variable for type metadata for Date?);
      return 0;
    }
    uint64_t v48 = v79;
    uint64_t v49 = v72;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v72, v8, v33);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.siriContacts);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl(&dword_22D49E000, v51, v52, "#getRequestedAgeDateTime user asked for age yesterday. returning yesterday's date components.", v53, 2u);
      MEMORY[0x230F85DE0](v53, -1, -1);
    }

    type metadata accessor for AgeDateTime();
    uint64_t v54 = v74;
    Calendar.timeZone.getter();
    uint64_t v55 = (uint64_t)v75;
    Calendar.dateComponents(in:from:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v54, v77);
    id v47 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v55, 2);
    uint64_t v56 = *(void (**)(char *, uint64_t))(v48 + 8);
    v56(v49, v33);
    v56(v26, v33);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v34, v80);
  }
  else
  {
    uint64_t v36 = v30;
    if (v31 == *MEMORY[0x263F72840])
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.siriContacts);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v79;
      if (v40)
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl(&dword_22D49E000, v38, v39, "#getRequestedAgeDateTime user asked for age today. returning today's date components.", v42, 2u);
        MEMORY[0x230F85DE0](v42, -1, -1);
      }

      type metadata accessor for AgeDateTime();
      uint64_t v43 = v74;
      Calendar.timeZone.getter();
      uint64_t v44 = (uint64_t)v75;
      Calendar.dateComponents(in:from:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v43, v77);
      uint64_t v45 = type metadata accessor for TerminalElement.Qualifier();
      uint64_t v46 = v73;
      __swift_storeEnumTagSinglePayload(v73, 1, 1, v45);
      id v47 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v44, v46);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v20);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v36, v80);
    }
    else
    {
      if (v31 != *MEMORY[0x263F72858])
      {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v26, v20);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v80);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
        return 0;
      }
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F07870], v1);
      uint64_t v57 = (uint64_t)v71;
      uint64_t v58 = v30;
      Calendar.date(byAdding:value:to:wrappingComponents:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v59 = v20;
      if (__swift_getEnumTagSinglePayload(v57, 1, v20) == 1)
      {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v26, v20);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v80);
        uint64_t v35 = v57;
        goto LABEL_18;
      }
      uint64_t v60 = v79;
      uint64_t v61 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v70, v57, v20);
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      __swift_project_value_buffer(v62, (uint64_t)static Logger.siriContacts);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        os_log_type_t v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v65 = 0;
        _os_log_impl(&dword_22D49E000, v63, v64, "#getRequestedAgeDateTime user asked for age tomorrow. returning tomorrow's date components.", v65, 2u);
        MEMORY[0x230F85DE0](v65, -1, -1);
      }

      type metadata accessor for AgeDateTime();
      uint64_t v66 = v74;
      Calendar.timeZone.getter();
      uint64_t v67 = (uint64_t)v75;
      Calendar.dateComponents(in:from:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v77);
      id v47 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v67, 1);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v60 + 8);
      v68(v61, v59);
      v68(v26, v59);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v58, v80);
    }
  }
  return v47;
}

uint64_t static DateTimeUtil.dateComponents(from:now:localCalendar:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_4_4();
  uint64_t v51 = v10;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v42 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v15 = OUTLINED_FUNCTION_10_0(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  uint64_t v20 = OUTLINED_FUNCTION_10_0(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_15();
  uint64_t v23 = v22 - v21;
  uint64_t result = TerminalElement.Date.month.getter();
  uint64_t v26 = 0;
  if ((v25 & 1) == 0 && (uint64_t v26 = result + 1, __OFADD__(result, 1)))
  {
    __break(1u);
  }
  else
  {
    uint64_t v45 = v26;
    int v44 = v25 & 1;
    uint64_t v27 = type metadata accessor for Calendar();
    OUTLINED_FUNCTION_15_0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v23, a2, v27);
    uint64_t v46 = v23;
    OUTLINED_FUNCTION_24_6();
    __swift_storeEnumTagSinglePayload(v29, v30, v31, v27);
    Calendar.timeZone.getter();
    type metadata accessor for TimeZone();
    OUTLINED_FUNCTION_24_6();
    __swift_storeEnumTagSinglePayload(v32, v33, v34, v35);
    uint64_t v52 = TerminalElement.Date.year.getter();
    LOBYTE(v27) = v36;
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v37(v13, a1, v6);
    uint64_t v49 = v18;
    uint64_t v50 = a3;
    uint64_t v47 = a1;
    if (v27)
    {
      uint64_t v52 = DateComponents.year.getter();
      int v43 = v38 & 1;
    }
    else
    {
      int v43 = 0;
    }
    os_log_type_t v39 = *(void (**)(void))(v8 + 8);
    uint64_t v48 = v8 + 8;
    ((void (*)(char *, uint64_t))v39)(v13, v6);
    v42[2] = TerminalElement.Date.dayOfMonth.getter();
    v42[1] = TerminalElement.Date.dayOfWeekOrdinalValue.getter();
    TerminalElement.Date.year.getter();
    char v41 = v40;
    v37(v51, v47, v6);
    if (v41) {
      DateComponents.year.getter();
    }
    OUTLINED_FUNCTION_13_4();
    v39();
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  }
  return result;
}

uint64_t static DateTimeUtil.qualifier(for:requestedDateComponents:now:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DateComponents();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v50 = a3;
  if (v14)
  {
    uint64_t v48 = a2;
    uint64_t v49 = a4;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    while (1)
    {
      char v52 = *(unsigned char *)(a1 + v15 + 32);
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      if (v17 == 1953718640 && v16 == 0xE400000000000000) {
        break;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_12;
      }
      if (v14 == ++v15)
      {
        swift_bridgeObjectRelease();
        char v20 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    char v20 = 1;
LABEL_13:
    a2 = v48;
    a4 = v49;
  }
  else
  {
    char v20 = 0;
  }
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21(v13, a2, v8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
LABEL_17:
    uint64_t result = DateComponents.year.getter();
    if (v24)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = result;
      uint64_t result = DateComponents.year.getter();
      if ((v26 & 1) == 0)
      {
        uint64_t v27 = result;
        uint64_t v28 = type metadata accessor for TerminalElement.Qualifier();
        uint64_t v29 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104);
        if (v27 < v25)
        {
LABEL_20:
          uint64_t v30 = (unsigned int *)MEMORY[0x263F72870];
LABEL_38:
          v29(a4, *v30, v28);
          uint64_t v39 = a4;
          uint64_t v40 = 0;
          uint64_t v38 = v28;
          return __swift_storeEnumTagSinglePayload(v39, v40, 1, v38);
        }
LABEL_37:
        uint64_t v30 = (unsigned int *)MEMORY[0x263F72878];
        goto LABEL_38;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  Swift::Bool v22 = DateComponents.hasYearOnly()();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v9 + 8);
  v46(v13, v8);
  if (v22) {
    goto LABEL_17;
  }
  if (v14)
  {
    uint64_t v48 = a2;
    uint64_t v49 = a4;
    swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    while (1)
    {
      char v51 = *(unsigned char *)(a1 + v31 + 32);
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      if (v33 == 0x657275747566 && v32 == 0xE600000000000000) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_33;
      }
      if (v14 == ++v31)
      {
        swift_bridgeObjectRelease();
        a2 = v48;
        a4 = v49;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    char v41 = v47;
    v21(v47, v48, v8);
    v46(v41, v8);
    a4 = v49;
  }
  else
  {
LABEL_30:
    char v36 = v47;
    v21(v47, a2, v8);
    Swift::Bool v37 = DateComponents.hasYearOnly()();
    v46(v36, v8);
    if (!v37)
    {
      uint64_t v38 = type metadata accessor for TerminalElement.Qualifier();
      uint64_t v39 = a4;
      uint64_t v40 = 1;
      return __swift_storeEnumTagSinglePayload(v39, v40, 1, v38);
    }
  }
  uint64_t result = DateComponents.year.getter();
  if (v42)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v43 = result;
  uint64_t result = DateComponents.year.getter();
  if ((v44 & 1) == 0)
  {
    uint64_t v45 = result;
    uint64_t v28 = type metadata accessor for TerminalElement.Qualifier();
    uint64_t v29 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104);
    if (v43 >= v45) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t static DateTimeUtil.calendarComponent(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TerminalElement.Period();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x263F72850])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F078C8];
  }
  else if (v8 == *MEMORY[0x263F72848])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F078C0];
  }
  else if (v8 == *MEMORY[0x263F72820])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F07890];
  }
  else if (v8 == *MEMORY[0x263F72818])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F07870];
  }
  else if (v8 == *MEMORY[0x263F72828])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F07830];
  }
  else if (v8 == *MEMORY[0x263F72838])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F078A8];
  }
  else
  {
    if (v8 != *MEMORY[0x263F72830])
    {
      uint64_t v13 = type metadata accessor for Calendar.Component();
      __swift_storeEnumTagSinglePayload(a2, 1, 1, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    uint64_t v9 = (unsigned int *)MEMORY[0x263F078A0];
  }
  uint64_t v10 = *v9;
  uint64_t v11 = type metadata accessor for Calendar.Component();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a2, v10, v11);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v11);
}

id static DateTimeUtil.ageDateTime(for:nlQuantity:qualifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v149 = a3;
  uint64_t v147 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  uint64_t v7 = OUTLINED_FUNCTION_10_0(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_4();
  uint64_t v143 = v8;
  uint64_t v146 = type metadata accessor for TerminalElement.Qualifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v140 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_4_4();
  uint64_t v131 = v11;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_25();
  uint64_t v132 = v13;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_18_11(v15);
  uint64_t v136 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_0_0();
  uint64_t v135 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_4();
  uint64_t v148 = v18;
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_0();
  uint64_t v144 = v20;
  uint64_t v145 = v19;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_4_4();
  uint64_t v137 = v21;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_25();
  uint64_t v139 = v23;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_25();
  uint64_t v142 = v25;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_58_0();
  uint64_t v138 = v27;
  uint64_t v134 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_0_0();
  uint64_t v133 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_4_4();
  uint64_t v129 = v30;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_35_7();
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v33 = OUTLINED_FUNCTION_10_0(v32);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_12_4();
  uint64_t v34 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v36 = v35;
  uint64_t v38 = MEMORY[0x270FA5388](v37);
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)&v120 - v39;
  uint64_t v41 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_0_0();
  uint64_t v43 = v42;
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_15();
  uint64_t v47 = v46 - v45;
  static Calendar.gregorianCurrent.getter();
  static Date.startOfToday.getter();
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v48 = *(void *)(v36 + 8);
  uint64_t v147 = v36 + 8;
  uint64_t v141 = v48;
  OUTLINED_FUNCTION_13_4();
  v49();
  OUTLINED_FUNCTION_6_3(v4, 1, v34);
  if (v50)
  {
    OUTLINED_FUNCTION_33_3();
    v51();
    outlined destroy of SemanticValue?(v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
    return 0;
  }
  else
  {
    uint64_t v127 = v43;
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
    uint64_t v128 = v34;
    v53(v40, v4, v34);
    uint64_t v54 = v133;
    (*(void (**)(uint64_t, void, uint64_t))(v133 + 104))(v3, *MEMORY[0x263F078A0], v134);
    char v55 = MEMORY[0x230F81FD0](a1, v3);
    uint64_t v56 = *(void *)(v54 + 8);
    uint64_t v123 = v54 + 8;
    uint64_t v122 = v56;
    OUTLINED_FUNCTION_13_4();
    v57();
    Calendar.timeZone.getter();
    char v126 = v40;
    uint64_t v125 = v47;
    uint64_t v124 = v41;
    if (v55)
    {
      Calendar.dateComponents(in:from:)();
      OUTLINED_FUNCTION_23_3();
      v58();
      DateComponents.month.setter();
      DateComponents.day.setter();
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.siriContacts);
      uint64_t v60 = v140;
      uint64_t v61 = *(void (**)(void))(v140 + 16);
      uint64_t v62 = v130;
      uint64_t v63 = v146;
      OUTLINED_FUNCTION_22_8();
      v61();
      os_log_type_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        uint64_t v148 = (void (*)(void, void, void))swift_slowAlloc();
        uint64_t v152 = v148;
        *(_DWORD *)uint64_t v66 = 136315394;
        OUTLINED_FUNCTION_22_8();
        v61();
        uint64_t v67 = String.init<A>(describing:)();
        uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v63);
        *(_WORD *)(v66 + 12) = 2080;
        uint64_t v69 = v138;
        OUTLINED_FUNCTION_40_5();
        lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
        uint64_t v70 = v145;
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v64, v65, "#getRequestedAgeDateTime user asked for age on year interval. qualifier: %s, date: %s", (uint8_t *)v66, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v63);

        uint64_t v70 = v145;
        uint64_t v69 = v138;
      }
      type metadata accessor for AgeDateTime();
      OUTLINED_FUNCTION_40_5();
      uint64_t v98 = v144;
      OUTLINED_FUNCTION_89();
      v99();
      OUTLINED_FUNCTION_22_8();
      v61();
      OUTLINED_FUNCTION_24_6();
      __swift_storeEnumTagSinglePayload(v100, v101, v102, v63);
      uint64_t v103 = OUTLINED_FUNCTION_38_6();
      id v52 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v103, v104);
      OUTLINED_FUNCTION_13_4();
      v105();
      OUTLINED_FUNCTION_23();
      v106();
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v69, v70);
    }
    else
    {
      uint64_t v130 = v3;
      Calendar.dateComponents(in:from:)();
      OUTLINED_FUNCTION_23_3();
      v73();
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.siriContacts);
      uint64_t v75 = *(void (**)(void))(v54 + 16);
      OUTLINED_FUNCTION_22_8();
      v75();
      uint64_t v76 = v140;
      uint64_t v77 = v131;
      uint64_t v148 = *(void (**)(void, void, void))(v140 + 16);
      uint64_t v135 = v140 + 16;
      v148(v131, v149, v146);
      uint64_t v78 = v144;
      uint64_t v79 = *(void *)(v144 + 16);
      uint64_t v80 = v145;
      uint64_t v138 = v144 + 16;
      uint64_t v136 = v79;
      OUTLINED_FUNCTION_89();
      v81();
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = swift_slowAlloc();
        uint64_t v133 = swift_slowAlloc();
        uint64_t v152 = (void (*)(void, void, void))v133;
        *(_DWORD *)uint64_t v84 = 136315650;
        os_log_t v121 = v82;
        OUTLINED_FUNCTION_22_8();
        v75();
        uint64_t v85 = String.init<A>(describing:)();
        uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_13_4();
        v87();
        *(_WORD *)(v84 + 12) = 2080;
        uint64_t v88 = v146;
        OUTLINED_FUNCTION_22_8();
        v89();
        OUTLINED_FUNCTION_38_6();
        uint64_t v90 = String.init<A>(describing:)();
        uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v88);
        *(_WORD *)(v84 + 22) = 2080;
        lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
        uint64_t v92 = v145;
        uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v95 = *(void (**)(void))(v144 + 8);
        OUTLINED_FUNCTION_13_4();
        v95();
        os_log_t v96 = v121;
        _os_log_impl(&dword_22D49E000, v121, v83, "#getRequestedAgeDateTime user asked for age on %s interval. qualifier: %s, date: %s", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();

        uint64_t v97 = v88;
        uint64_t v80 = v92;
      }
      else
      {
        OUTLINED_FUNCTION_13_4();
        v107();
        uint64_t v108 = v146;
        OUTLINED_FUNCTION_33_3();
        v109();
        os_log_type_t v95 = *(void (**)(void))(v78 + 8);
        OUTLINED_FUNCTION_27_3();
        v95();

        uint64_t v97 = v108;
      }
      type metadata accessor for AgeDateTime();
      uint64_t v110 = v142;
      uint64_t v111 = v139;
      OUTLINED_FUNCTION_89();
      v112();
      uint64_t v113 = v143;
      OUTLINED_FUNCTION_22_8();
      v114();
      OUTLINED_FUNCTION_24_6();
      __swift_storeEnumTagSinglePayload(v115, v116, v117, v97);
      id v52 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v110, v113);
      ((void (*)(uint64_t, uint64_t))v95)(v111, v80);
      OUTLINED_FUNCTION_13_4();
      v118();
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v125, v124);
    }
  }
  return v52;
}

uint64_t static DateTimeUtil.hemisphere()(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](static DateTimeUtil.hemisphere(), 0, 0);
}

uint64_t static DateTimeUtil.hemisphere()()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F648F0]), sel_init);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(v4, v5, v3);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = NSNumber.init(integerLiteral:)(300).super.super.isa;
  objc_msgSend(v3, sel_setMaxAge_, isa);

  *(_DWORD *)(v0 + 136) = *MEMORY[0x263F6D448];
  uint64_t v7 = *(void (**)(uint64_t))(v2 + 104);
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v1);
  static AceService.currentAsync.getter();
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v10;
  uint64_t v11 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SABaseCommand);
  *uint64_t v10 = v0;
  v10[1] = static DateTimeUtil.hemisphere();
  return MEMORY[0x270F67CE0](v3, v8, v11, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  *(void *)(v2 + 128) = v1;
  swift_task_dealloc();
  if (v0) {

  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  double v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(void);
  uint64_t (*v19)(void);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = *(void **)(v0 + 128);
  if (v1)
  {
    id v3 = (void *)v1;
    uint64_t v4 = *(void **)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 80);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
    uint64_t v5 = *(_DWORD *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 64);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    objc_msgSend(v3, sel_latitude);
    uint64_t v8 = v7;

    OUTLINED_FUNCTION_43_1();
    OUTLINED_FUNCTION_33_3();
    v9();
    if (v8 <= 0.0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = *MEMORY[0x263F6D440];
    }
    v22(v21, v10, v6);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
    uint64_t v12 = (void *)Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_6_1(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v14);
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v15, v16, "#getCurrentLocation - submitted SAGetRequestOrigin command but either failed or could not cast to SASetRequestOrigin. returning nil");
      OUTLINED_FUNCTION_2();
      uint64_t v17 = *(void **)(v0 + 96);
    }
    else
    {
      uint64_t v17 = v12;
      uint64_t v12 = *(void **)(v0 + 96);
    }
  }
  OUTLINED_FUNCTION_44_2();
  OUTLINED_FUNCTION_11();
  v18();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v11;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = (void *)Logger.logObject.getter();
  id v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_6_1(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_8_1(&dword_22D49E000, v5, v6, "#getCurrentLocation - submitted SAGetRequestOrigin command but either failed or could not cast to SASetRequestOrigin. returning nil");
    OUTLINED_FUNCTION_2();
    uint64_t v7 = *(void **)(v0 + 96);
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v2 = *(void **)(v0 + 96);
  }

  OUTLINED_FUNCTION_44_2();
  OUTLINED_FUNCTION_11();
  v8();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

unint64_t lazy protocol witness table accessor for type Recommendation<DateTime> and conformance Recommendation<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>;
  if (!lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Recommendation<DateTime>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setDesiredAccuracy_, v4);
}

uint64_t lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_18_11@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_5()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return *(void *)(v0 + 56);
}

uint64_t type metadata completion function for ContactAttributeDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t specialized INIntentResolutionResult.typedDisambiguationItems<A>()()
{
  id v1 = objc_msgSend(v0, sel_disambiguationItems);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v5, (uint64_t)v10);
      outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
      if (!swift_dynamicCast())
      {
        outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INCustomObject);
        if (!swift_dynamicCast()) {
          specialized fatalError(_:file:line:)();
        }
        if (!(id)INTypedObjectWithCustomObject()) {
          specialized fatalError(_:file:line:)();
        }
      }
      uint64_t v6 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      MEMORY[0x230F850D0](v6);
      if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v3 = v11;
  }
  swift_bridgeObjectRelease();
  return v3;
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  unsigned char v9[32];
  unsigned char v10[32];
  uint64_t v11;

  id v1 = objc_msgSend(v0, sel_disambiguationItems);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v5, (uint64_t)v10);
      outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
      type metadata accessor for ContactAttribute();
      if (!swift_dynamicCast())
      {
        outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INCustomObject);
        if (!swift_dynamicCast()) {
          specialized fatalError(_:file:line:)();
        }
        if (!(id)INTypedObjectWithCustomObject()) {
          specialized fatalError(_:file:line:)();
        }
      }
      uint64_t v6 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      MEMORY[0x230F850D0](v6);
      if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v3 = v11;
  }
  swift_bridgeObjectRelease();
  return v3;
}

void ContactAttributeDisambiguationStrategy.actionForInput(_:resolveRecord:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_23_2();
  uint64_t v54 = v2;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v56 = v4;
  uint64_t v57 = v3;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v55 = v6 - v5;
  uint64_t v7 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_89();
  v22();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v53 = v7;
    uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v58 = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v26 = Input.description.getter();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v58);
    OUTLINED_FUNCTION_37_6(v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_2();
    v29();
    _os_log_impl(&dword_22D49E000, v23, v24, "#ContactAttributeDisambiguationStrategy input: %s", v25, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t v7 = v53;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
  }

  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v56 + 88))(v55, v57) != *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_33_3();
    v31();
    uint64_t v32 = *(void *)(v54 + 224);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(v56 + 96))(v55, v57);
  OUTLINED_FUNCTION_11();
  v30();
  if ((USOParse.isOrdinalDisambiguation.getter() & 1) == 0)
  {
    uint64_t v32 = *(void *)(v54 + 224);
    type metadata accessor for ParameterResolutionRecord();
    uint64_t v33 = (void *)ParameterResolutionRecord.intent.getter();
    id v34 = objc_msgSend(v33, sel_siriMatches);

    if (v34)
    {
      type metadata accessor for SiriMatch();
      unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v35 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v39) {
          goto LABEL_14;
        }
      }
      else if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_14:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v35 & 0xC000000000000001) == 0, v35);
        if ((v35 & 0xC000000000000001) != 0) {
          id v36 = (id)MEMORY[0x230F854E0](0, v35);
        }
        else {
          id v36 = *(id *)(v35 + 32);
        }
        uint64_t v37 = v36;
        swift_bridgeObjectRelease();
        id v38 = objc_msgSend(v37, sel_identifier);

        if (v38)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
    }
LABEL_21:
    static ContactAttributeDisambiguationStrategy.isRequestForDifferentContact(_:currentContactId:)();
    char v41 = v40;
    swift_bridgeObjectRelease();
    if (v41)
    {
      uint64_t v42 = (void *)Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v43))
      {
        uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v44);
        uint64_t v47 = "#ContactAttributeDisambiguationStrategy received request_common_Person for another contact which is not a "
              "disambiguation response, ignoring here.";
LABEL_27:
        OUTLINED_FUNCTION_2_5(&dword_22D49E000, v45, v46, v47);
        OUTLINED_FUNCTION_2();
        goto LABEL_28;
      }
      goto LABEL_28;
    }
    uint64_t v48 = ParameterResolutionRecord.intent.getter();
    id v49 = objc_msgSend((id)v48, sel_contactAttributeToGet);

    OUTLINED_FUNCTION_58_1();
    static ContactAttributeDisambiguationStrategy.isRequestForDifferentContactAttribute(_:contactAttributeToGet:)();
    LOBYTE(v48) = v50;

    if (v48)
    {
      uint64_t v42 = (void *)Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_7_4(v51))
      {
        id v52 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v52);
        uint64_t v47 = "#ContactAttributeDisambiguationStrategy received request for a different contact attribute which is not a "
              "disambiguation response, ignoring here.";
        goto LABEL_27;
      }
LABEL_28:

      static ActionForInput.ignore()();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
      goto LABEL_29;
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
LABEL_10:
    static StrategyUtil.getActionForInput<A>(input:intentType:)(v32, v1);
    goto LABEL_29;
  }
  static ActionForInput.handle()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
LABEL_29:
  OUTLINED_FUNCTION_8();
}

void static ContactAttributeDisambiguationStrategy.isRequestForDifferentContact(_:currentContactId:)()
{
  OUTLINED_FUNCTION_10();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v13 = OUTLINED_FUNCTION_10_0(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_4();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v44 - v15;
  uint64_t v48 = MEMORY[0x263F8EE78];
  USOParse.preferredUserDialogAct.getter((uint64_t)v44 - v15);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_6_3((uint64_t)v16, 1, v17);
  if (v38)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    OUTLINED_FUNCTION_42_5();
    goto LABEL_9;
  }
  uint64_t v18 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_16_10();
  v19();
  if (!v18) {
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_44_3();
  swift_release();
  if (!v47)
  {
LABEL_9:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v46, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_20_10())
  {
    uint64_t v20 = UsoTask_request_common_Person.contactIds.getter();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v48 = v20;
    goto LABEL_20;
  }
LABEL_10:
  USOParse.preferredUserDialogAct.getter(v0);
  OUTLINED_FUNCTION_6_3(v0, 1, v17);
  if (v38)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_18:
    OUTLINED_FUNCTION_42_5();
    goto LABEL_19;
  }
  uint64_t v21 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_16_10();
  v22();
  if (!v21) {
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_44_3();
  swift_release();
  if (!v47)
  {
LABEL_19:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v46, &demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_20_10())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v46[0])
    {
      uint64_t v23 = UsoEntity_common_Person.contactIds.getter();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v23 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v48 = v23;
  }
LABEL_20:
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_89();
  v25();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    v46[0] = v44[0];
    *(_DWORD *)uint64_t v28 = 136315394;
    v44[2] = v11;
    OUTLINED_FUNCTION_40_5();
    v44[1] = v5;
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = MEMORY[0x230F85100](v29, MEMORY[0x263F8D310]);
    v44[3] = v24;
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    if (v2) {
      uint64_t v33 = v4;
    }
    else {
      uint64_t v33 = 7104878;
    }
    if (v2) {
      unint64_t v34 = v2;
    }
    else {
      unint64_t v34 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v26, v27, "#GCADisambiguationStrategy isRequestForDifferentContact contactIds: %s, current is %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    OUTLINED_FUNCTION_23_3();
    v35();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  }
  OUTLINED_FUNCTION_40_5();
  uint64_t v36 = *(void *)(v48 + 16);
  if (v36)
  {
    if (v2)
    {
      uint64_t v37 = (void *)(v48 + 40);
      do
      {
        BOOL v38 = *(v37 - 1) == v4 && *v37 == v2;
        if (v38) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          break;
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    uint64_t v39 = (void *)Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v40))
    {
      char v41 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v41);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v42, v43, "#GCADisambiguationStrategy isRequestForDifferentContact no contact IDs found in response parse, treating as follow-up for same contact");
      OUTLINED_FUNCTION_2();
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

void static ContactAttributeDisambiguationStrategy.isRequestForDifferentContactAttribute(_:contactAttributeToGet:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v120 = v1;
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v118 = v3;
  uint64_t v119 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_3();
  uint64_t v6 = v4 - v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_8_12();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v115 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_4();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v115 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v115 - v17;
  uint64_t v125 = MEMORY[0x263F8EE78];
  USOParse.preferredUserDialogAct.getter((uint64_t)&v115 - v17);
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_21:
    OUTLINED_FUNCTION_42_5();
    goto LABEL_22;
  }
  uint64_t v20 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_16_10();
  v21();
  if (!v20) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_44_3();
  swift_release();
  if (!v124)
  {
LABEL_22:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v123, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_20_10())
  {
    uint64_t v22 = v122;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
    swift_release();
    if (v123[0])
    {
      uint64_t v117 = v22;
      uint64_t v23 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (v23)
      {
        uint64_t v24 = OUTLINED_FUNCTION_13_14();
        swift_release();
        if (v24)
        {
          uint64_t v25 = *(void *)(v24 + 16);
          if (v25)
          {
            uint64_t v118 = *(void *)(v118 + 16);
            OUTLINED_FUNCTION_36_6();
            uint64_t v27 = v24 + v26;
            uint64_t v29 = *(void *)(v28 + 56);
            uint64_t v116 = v24;
            swift_bridgeObjectRetain();
            uint64_t v30 = MEMORY[0x263F8EE78];
            do
            {
              ((void (*)(char *, uint64_t, uint64_t))v118)(v10, v27, v119);
              uint64_t v31 = UsoIdentifier.namespace.getter();
              if (!v32)
              {
                uint64_t v31 = 0;
                unint64_t v32 = 0xE000000000000000;
              }
              v33.SiriContactsIntents::SiriKitContactUnsupportedReason value = UsoIdentifierNamespace.init(rawValue:)(*(Swift::String *)&v31).value;
              OUTLINED_FUNCTION_31_2();
              v34();
              if (v33.value != SiriContactsIntents_UsoIdentifierNamespace_unknownDefault)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  OUTLINED_FUNCTION_34_8();
                  uint64_t v30 = v37;
                }
                unint64_t v36 = *(void *)(v30 + 16);
                unint64_t v35 = *(void *)(v30 + 24);
                if (v36 >= v35 >> 1)
                {
                  OUTLINED_FUNCTION_43_2(v35);
                  uint64_t v30 = v38;
                }
                *(void *)(v30 + 16) = v36 + 1;
                *(SiriContactsIntents::UsoIdentifierNamespace_optional *)(v30 + v36 + 32) = v33;
              }
              v27 += v29;
              --v25;
            }
            while (v25);
            goto LABEL_110;
          }
LABEL_111:
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v30 = MEMORY[0x263F8EE78];
          goto LABEL_112;
        }
      }
    }
    swift_release();
  }
LABEL_23:
  USOParse.preferredUserDialogAct.getter((uint64_t)v16);
  OUTLINED_FUNCTION_6_3((uint64_t)v16, 1, v19);
  if (v104)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_44:
    OUTLINED_FUNCTION_42_5();
    goto LABEL_45;
  }
  uint64_t v39 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_16_10();
  v40();
  if (!v39) {
    goto LABEL_44;
  }
  OUTLINED_FUNCTION_44_3();
  swift_release();
  if (!v124)
  {
LABEL_45:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v123, &demangling cache variable for type metadata for Any?);
    goto LABEL_46;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_20_10())
  {
    uint64_t v41 = v122;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v123[0])
    {
      uint64_t v42 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (v42)
      {
        uint64_t v43 = OUTLINED_FUNCTION_13_14();
        swift_release();
        if (v43)
        {
          uint64_t v44 = *(void *)(v43 + 16);
          if (v44)
          {
            uint64_t v45 = *(void *)(v118 + 16);
            uint64_t v117 = v41;
            uint64_t v118 = v45;
            OUTLINED_FUNCTION_36_6();
            uint64_t v47 = v43 + v46;
            uint64_t v49 = *(void *)(v48 + 56);
            uint64_t v116 = v43;
            swift_bridgeObjectRetain();
            uint64_t v30 = MEMORY[0x263F8EE78];
            do
            {
              uint64_t v50 = OUTLINED_FUNCTION_43_1();
              ((void (*)(uint64_t))v118)(v50);
              uint64_t v51 = UsoIdentifier.namespace.getter();
              if (!v52)
              {
                uint64_t v51 = 0;
                unint64_t v52 = 0xE000000000000000;
              }
              v53.SiriContactsIntents::SiriKitContactUnsupportedReason value = UsoIdentifierNamespace.init(rawValue:)(*(Swift::String *)&v51).value;
              OUTLINED_FUNCTION_23_3();
              v54();
              if (v53.value != SiriContactsIntents_UsoIdentifierNamespace_unknownDefault)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  OUTLINED_FUNCTION_34_8();
                  uint64_t v30 = v57;
                }
                unint64_t v56 = *(void *)(v30 + 16);
                unint64_t v55 = *(void *)(v30 + 24);
                if (v56 >= v55 >> 1)
                {
                  OUTLINED_FUNCTION_43_2(v55);
                  uint64_t v30 = v58;
                }
                *(void *)(v30 + 16) = v56 + 1;
                *(SiriContactsIntents::UsoIdentifierNamespace_optional *)(v30 + v56 + 32) = v53;
              }
              v47 += v49;
              --v44;
            }
            while (v44);
LABEL_110:
            swift_release();
            swift_bridgeObjectRelease_n();
LABEL_112:
            swift_bridgeObjectRelease();
            uint64_t v125 = v30;
            uint64_t v59 = v120;
            goto LABEL_69;
          }
          goto LABEL_111;
        }
      }
    }
    swift_release();
  }
LABEL_46:
  USOParse.preferredUserDialogAct.getter(v0);
  OUTLINED_FUNCTION_6_3(v0, 1, v19);
  if (v104)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v59 = v120;
LABEL_67:
    OUTLINED_FUNCTION_42_5();
    goto LABEL_68;
  }
  uint64_t v60 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_16_10();
  v61();
  uint64_t v59 = v120;
  if (!v60) {
    goto LABEL_67;
  }
  OUTLINED_FUNCTION_44_3();
  swift_release();
  if (!v124)
  {
LABEL_68:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v123, &demangling cache variable for type metadata for Any?);
    goto LABEL_69;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (OUTLINED_FUNCTION_20_10())
  {
    uint64_t v62 = v122;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    if (v123[0]
      && (uint64_t v63 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter(), swift_release(), v63)
      && (uint64_t v64 = OUTLINED_FUNCTION_13_14(), swift_release(), v64))
    {
      uint64_t v65 = *(void *)(v64 + 16);
      if (v65)
      {
        uint64_t v66 = *(void *)(v118 + 16);
        uint64_t v117 = v62;
        uint64_t v118 = v66;
        OUTLINED_FUNCTION_36_6();
        uint64_t v68 = v64 + v67;
        uint64_t v70 = *(void *)(v69 + 56);
        uint64_t v71 = (void (**)(uint64_t, uint64_t))(v69 - 8);
        uint64_t v116 = v64;
        swift_bridgeObjectRetain();
        uint64_t v72 = MEMORY[0x263F8EE78];
        do
        {
          uint64_t v73 = v119;
          ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v6, v68, v119);
          uint64_t v74 = UsoIdentifier.namespace.getter();
          if (!v75)
          {
            uint64_t v74 = 0;
            unint64_t v75 = 0xE000000000000000;
          }
          v76.SiriContactsIntents::SiriKitContactUnsupportedReason value = UsoIdentifierNamespace.init(rawValue:)(*(Swift::String *)&v74).value;
          (*v71)(v6, v73);
          if (v76.value != SiriContactsIntents_UsoIdentifierNamespace_unknownDefault)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v72 + 16) + 1, 1, v72);
              uint64_t v72 = v79;
            }
            unint64_t v78 = *(void *)(v72 + 16);
            unint64_t v77 = *(void *)(v72 + 24);
            if (v78 >= v77 >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v72);
              uint64_t v72 = v80;
            }
            *(void *)(v72 + 16) = v78 + 1;
            *(SiriContactsIntents::UsoIdentifierNamespace_optional *)(v72 + v78 + 32) = v76;
          }
          v68 += v70;
          --v65;
        }
        while (v65);
        swift_release();
        swift_bridgeObjectRelease_n();
        uint64_t v59 = v120;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v72 = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v125 = v72;
    }
    else
    {
      swift_release();
    }
  }
LABEL_69:
  if (!*(void *)(v125 + 16))
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.siriContacts);
    unint64_t v94 = (void *)Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_20(v95))
    {
      os_log_t v96 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_47_0(v96);
      uint64_t v99 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute no relevant namespace candidates found, returning true";
      goto LABEL_98;
    }
    goto LABEL_99;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v81 = type metadata accessor for Logger();
  __swift_project_value_buffer(v81, (uint64_t)static Logger.siriContacts);
  id v82 = v59;
  os_log_type_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = swift_slowAlloc();
    v123[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v85 = 136315394;
    OUTLINED_FUNCTION_40_5();
    uint64_t v86 = swift_bridgeObjectRetain();
    uint64_t v87 = MEMORY[0x230F85100](v86, &type metadata for UsoIdentifierNamespace);
    unint64_t v89 = v88;
    swift_bridgeObjectRelease();
    uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2080;
    uint64_t v121 = (uint64_t)v120;
    id v90 = v82;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttribute?);
    uint64_t v91 = String.init<A>(describing:)();
    uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v59 = v120;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v83, v84, "#GCADisambiguationStrategy isRequestForDifferentContactAttribute follow-up namespaces: %s, current is %s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  OUTLINED_FUNCTION_40_5();
  uint64_t v100 = v125;
  uint64_t v101 = *(void *)(v125 + 16);
  if (v101)
  {
    swift_bridgeObjectRetain();
    uint64_t v102 = 0;
    while (1)
    {
      int v103 = *(unsigned __int8 *)(v100 + v102 + 32);
      if (v103 == 5)
      {
        if (v59 && objc_msgSend(v82, sel_contactAttributeType) == (id)3)
        {
          swift_bridgeObjectRelease();
          unint64_t v94 = (void *)Logger.logObject.getter();
          os_log_type_t v110 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_4_20(v110))
          {
            uint64_t v112 = (_WORD *)OUTLINED_FUNCTION_20();
            OUTLINED_FUNCTION_47_0(v112);
            uint64_t v99 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to postal address request, returning false";
            goto LABEL_98;
          }
          goto LABEL_99;
        }
      }
      else if (v103 == 4)
      {
        if (v59 && objc_msgSend(v82, sel_contactAttributeType) == (id)1)
        {
          swift_bridgeObjectRelease();
          unint64_t v94 = (void *)Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.debug.getter();
          if (!OUTLINED_FUNCTION_4_20(v113)) {
            goto LABEL_99;
          }
          uint64_t v114 = (_WORD *)OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_47_0(v114);
          uint64_t v99 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to email request, returning false";
LABEL_98:
          OUTLINED_FUNCTION_54_1(&dword_22D49E000, v97, v98, v99);
          OUTLINED_FUNCTION_2();
          goto LABEL_99;
        }
      }
      else
      {
        BOOL v104 = v103 != 3 || v59 == 0;
        if (!v104 && objc_msgSend(v82, sel_contactAttributeType) == (id)2)
        {
          swift_bridgeObjectRelease();
          unint64_t v94 = (void *)Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_4_20(v107))
          {
            double v109 = (_WORD *)OUTLINED_FUNCTION_20();
            OUTLINED_FUNCTION_47_0(v109);
            uint64_t v99 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to phone number request, returning false";
            goto LABEL_98;
          }
          goto LABEL_99;
        }
      }
      if (v101 == ++v102)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  unint64_t v94 = (void *)Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_20(v105))
  {
    uint64_t v106 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_47_0(v106);
    uint64_t v99 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute returning true";
    goto LABEL_98;
  }
LABEL_99:

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8();
}

uint64_t ContactAttributeDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v0[4] = v1;
  uint64_t v2 = type metadata accessor for ParameterResolutionRecord();
  v0[5] = v2;
  OUTLINED_FUNCTION_1(v2);
  v0[6] = v3;
  v0[7] = OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for Signpost.OpenSignpost();
  v0[8] = v4;
  OUTLINED_FUNCTION_10_0(v4);
  v0[9] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  uint64_t *v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(void);
  void *v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  unint64_t v36 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_49_2();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v4 = "MakeDisambiguationItemContainer";
  *(void *)(v4 + 8) = 31;
  *(unsigned char *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = v0 + 3;
  unint64_t v34 = v0;
  uint64_t v6 = v0 + 4;
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  uint64_t v8 = OUTLINED_FUNCTION_58_1();
  v9(v8);
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    SiriContactsIntents::UsoIdentifierNamespace_optional v33 = v10;
    uint64_t v12 = v5;
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_24();
    unint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v14 = ParameterResolutionRecord.result.getter();
    void *v12 = v14;
    uint64_t v10 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v32 = v14;
    OUTLINED_FUNCTION_31_2();
    v15();
    _os_log_impl(&dword_22D49E000, v33, v11, "#ContactAttributeDisambiguationStrategy Intent resolution result: %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    (*(void (**)(void, void))(v6[2] + 8))(v6[3], v6[1]);
  }

  uint64_t v16 = v34;
  uint64_t v17 = (void *)ParameterResolutionRecord.result.getter();
  specialized INIntentResolutionResult.typedDisambiguationItems<A>()();

  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (_DWORD *)OUTLINED_FUNCTION_24();
    unint64_t v35 = OUTLINED_FUNCTION_35();
    *uint64_t v20 = 136315138;
    uint64_t v21 = type metadata accessor for ContactAttribute();
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = MEMORY[0x230F85100](v22, v21);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    v34[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_66_0(&dword_22D49E000, v26, v27, "#ContactAttributeDisambiguationStrategy Contact attributes retrieved from disambiguation items: %s");
    swift_arrayDestroy();
    uint64_t v16 = v34;
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v28 = v16[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<ContactAttribute>);
  uint64_t v29 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v28, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(uint64_t))v16[1];
  return v30(v29);
}

uint64_t ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_10_0(v7);
  v5[29] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for NLIntent();
  v5[30] = v8;
  OUTLINED_FUNCTION_1(v8);
  v5[31] = v9;
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = *(void *)(v6 + 224);
  uint64_t v10 = type metadata accessor for ParameterResolutionRecord();
  v5[35] = v10;
  OUTLINED_FUNCTION_1(v10);
  v5[36] = v11;
  v5[37] = OUTLINED_FUNCTION_2_1();
  uint64_t v12 = type metadata accessor for IntentPromptAnswer();
  v5[38] = v12;
  OUTLINED_FUNCTION_1(v12);
  v5[39] = v13;
  v5[40] = OUTLINED_FUNCTION_31();
  v5[41] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for USOParse();
  v5[42] = v14;
  OUTLINED_FUNCTION_1(v14);
  v5[43] = v15;
  v5[44] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = type metadata accessor for Parse();
  v5[45] = v16;
  OUTLINED_FUNCTION_1(v16);
  v5[46] = v17;
  v5[47] = OUTLINED_FUNCTION_31();
  v5[48] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Input();
  v5[49] = v18;
  OUTLINED_FUNCTION_1(v18);
  v5[50] = v19;
  v5[51] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = type metadata accessor for Signpost.OpenSignpost();
  v5[52] = v20;
  OUTLINED_FUNCTION_10_0(v20);
  v5[53] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v21, v22, v23);
}

uint64_t ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v181 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  id v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_49_2();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = *(int *)(v3 + 20);
  *(_DWORD *)(v0 + 464) = v5;
  uint64_t v6 = v2 + v5;
  *(void *)uint64_t v6 = "ParseDisambiguationResult";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v0 + 432) = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_20(v14))
  {
    uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_24();
    uint64_t v1 = OUTLINED_FUNCTION_35();
    *(void *)&long long v179 = v1;
    *(_DWORD *)uint64_t v15 = 136315138;
    Input.parse.getter();
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = OUTLINED_FUNCTION_59_0();
    v19(v18);
    _os_log_impl(&dword_22D49E000, v13, (os_log_type_t)v11, "#ContactAttributeDisambiguationStrategy Running parseDisambiguationResult() %s", v15, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    uint64_t v7 = (void *)(v0 + 40);
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_59_0();
    v21(v20);
  }

  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v22 = *(void *)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 360);
  *uint64_t v7 = 0;
  v7[1] = 0;
  Input.parse.getter();
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v22, v24);
  if (v25 == *MEMORY[0x263F6FF50])
  {
    uint64_t v27 = *(void *)(v0 + 256);
    uint64_t v26 = *(void *)(v0 + 264);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v29 = *(void *)(v0 + 248);
    (*(void (**)(void, void))(*(void *)(v0 + 368) + 96))(*(void *)(v0 + 376), *(void *)(v0 + 360));
    OUTLINED_FUNCTION_11();
    v30();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v26, v28);
    ContactNLv3Intent.init(intent:)(v27, v31, v32, v33, v34, v35, v36, v37, v159, v161);
    os_log_type_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ContactAttribute>);
    uint64_t v39 = PaginatedItemContainer.items.getter();
    uint64_t v40 = type metadata accessor for ContactAttribute();
    uint64_t v41 = MEMORY[0x230F85140](v39, v40);
    swift_bridgeObjectRelease();
    Swift::Int_optional v183 = ContactNLv3Intent.arrayIndexForReference(arrayLength:)(v41);
    if (v183.is_nil || v183.value < 0 || v183.value >= v41)
    {
      uint64_t v71 = ContactNLv3Intent.requestedContactAttributeLabel.getter();
      if (v72)
      {
        OUTLINED_FUNCTION_48_1(v71, v72);
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.debug.getter();
        BOOL v75 = OUTLINED_FUNCTION_4_20(v74);
        uint64_t v76 = *(void *)(v0 + 264);
        uint64_t v77 = *(void *)(v0 + 248);
        uint64_t v78 = *(void *)(v0 + 232);
        if (v75)
        {
          uint64_t v172 = *(void *)(v0 + 240);
          uint64_t v168 = *(void *)(v0 + 232);
          uint64_t v79 = (uint8_t *)OUTLINED_FUNCTION_24();
          *(void *)&long long v179 = OUTLINED_FUNCTION_35();
          *(_DWORD *)uint64_t v79 = 136315138;
          *(void *)(v0 + 104) = v0 + 128;
          *(void *)(v0 + 112) = v40;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v80 = OUTLINED_FUNCTION_51_2();
          *(void *)(v0 + 120) = OUTLINED_FUNCTION_63(v80, v81, v82, v83, v84, v85, v86, v87, v160, (uint64_t)(v79 + 4), v0 + 120, v76, v168, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_42_3();
          _os_log_impl(&dword_22D49E000, v73, v38, "#ContactAttributeDisambiguationStrategy User selected attribute label by semantic reference: %s", v79, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();

          _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v169, (void (*)(void))type metadata accessor for ContactNLv3Intent);
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v165, v173);
        }
        else
        {

          OUTLINED_FUNCTION_42_3();
          _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v78, (void (*)(void))type metadata accessor for ContactNLv3Intent);
          uint64_t v89 = OUTLINED_FUNCTION_64_0();
          v91(v89, v90);
        }
      }
      else
      {
        _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(*(void *)(v0 + 232), (void (*)(void))type metadata accessor for ContactNLv3Intent);
        OUTLINED_FUNCTION_33_3();
        v88();
      }
    }
    else
    {
      PaginatedItemContainer.items.getter();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void **)(v0 + 128);
      id v43 = objc_msgSend(v42, sel_handleLabel);

      if (v43)
      {
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v46 = 0;
      }
      *(void *)(v0 + 40) = v44;
      *(void *)(v0 + 48) = v46;
      swift_bridgeObjectRetain_n();
      uint64_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.debug.getter();
      BOOL v117 = OUTLINED_FUNCTION_4_20(v116);
      uint64_t v118 = *(void *)(v0 + 264);
      uint64_t v119 = *(void *)(v0 + 232);
      if (v117)
      {
        uint64_t v175 = *(void *)(v0 + 232);
        uint64_t v120 = (uint8_t *)OUTLINED_FUNCTION_24();
        *(void *)&long long v179 = OUTLINED_FUNCTION_35();
        *(_DWORD *)uint64_t v120 = 136315138;
        *(void *)(v0 + 88) = v44;
        *(void *)(v0 + 96) = v46;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v121 = OUTLINED_FUNCTION_51_2();
        *(void *)(v0 + 144) = OUTLINED_FUNCTION_63(v121, v122, v123, v124, v125, v126, v127, v128, v160, v162, v163, (uint64_t)(v120 + 4), v118, v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_22D49E000, v115, v38, "#ContactAttributeDisambiguationStrategy User selected attribute label by ordinal reference: %s", v120, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();

        _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v176, (void (*)(void))type metadata accessor for ContactNLv3Intent);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v119, (void (*)(void))type metadata accessor for ContactNLv3Intent);
        OUTLINED_FUNCTION_64_0();
      }
      OUTLINED_FUNCTION_23_3();
      v129();
    }
    goto LABEL_37;
  }
  uint64_t v47 = *(void *)(v0 + 368);
  uint64_t v48 = *(void *)(v0 + 360);
  if (v25 != *MEMORY[0x263F6FF80])
  {
    (*(void (**)(void, uint64_t))(v47 + 8))(*(void *)(v0 + 376), v48);
LABEL_37:
    OUTLINED_FUNCTION_40_5();
    uint64_t v135 = *(void *)(v0 + 48);
    if (!v135) {
      goto LABEL_41;
    }
    uint64_t v136 = *(void *)(v0 + 40);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ContactAttribute>);
    *(void *)(v0 + 152) = PaginatedItemContainer.items.getter();
    uint64_t v137 = swift_task_alloc();
    *(void *)(v137 + 16) = v136;
    *(void *)(v137 + 24) = v135;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactAttribute]);
    swift_getWitnessTable();
    Sequence.first(where:)();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v138 = *(void **)(v0 + 168);
    if (v138)
    {
      uint64_t v139 = (void *)ParameterResolutionRecord.intent.getter();
      objc_msgSend(v139, sel_setContactHandleMatches_, 0);

      uint64_t v140 = (void *)ParameterResolutionRecord.intent.getter();
      objc_msgSend(v140, sel_setContactHandleAlternatives_, 0);

      uint64_t v141 = (void *)ParameterResolutionRecord.intent.getter();
      id v142 = v138;
      uint64_t v143 = (void *)MEMORY[0x230F84F70](0xD000000000000015, 0x800000022D5A6820);
      OUTLINED_FUNCTION_49_2();
      [v144 v145];

      id v146 = v142;
      uint64_t v147 = Logger.logObject.getter();
      os_log_type_t v148 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v147, v148))
      {
        uint64_t v149 = (uint8_t *)OUTLINED_FUNCTION_24();
        uint64_t v178 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v149 = 138412290;
        *(void *)(v0 + 136) = v146;
        id v150 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v178 = v138;

        _os_log_impl(&dword_22D49E000, v147, v148, "#ContactAttributeDisambiguationStrategy Returning user-selected contact attribute: %@.", v149, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }
      else
      {
      }
      uint64_t v155 = *(void *)(v0 + 272);
      *((void *)&v180 + 1) = type metadata accessor for ContactAttribute();
      *(void *)&long long v179 = v146;
      id v156 = v146;
      ParameterResolutionRecord.intent.getter();
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      OUTLINED_FUNCTION_62();
      static DisambiguationResult.chosenItem(_:)();

      OUTLINED_FUNCTION_62();
    }
    else
    {
LABEL_41:
      uint64_t v151 = Logger.logObject.getter();
      os_log_type_t v152 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v151, v152))
      {
        uint64_t v153 = (_WORD *)OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_32(v153);
        OUTLINED_FUNCTION_19_1(&dword_22D49E000, v151, v154, "#ContactAttributeDisambiguationStrategy No matching contact attribute found, returning nil.");
        OUTLINED_FUNCTION_2();
      }
      uint64_t v155 = *(void *)(v0 + 272);

      long long v179 = 0u;
      long long v180 = 0u;
      ParameterResolutionRecord.intent.getter();
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      static DisambiguationResult.chosenItem(_:)();
    }
    OUTLINED_FUNCTION_23_3();
    v157();
    OUTLINED_FUNCTION_17_10();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_50_1();
    os_signpost(_:dso:log:name:signpostID:)();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v155, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    return v158();
  }
  uint64_t v49 = *(void *)(v0 + 352);
  uint64_t v50 = *(void **)(v0 + 224);
  (*(void (**)(void, uint64_t))(v47 + 96))(*(void *)(v0 + 376), v48);
  uint64_t v51 = OUTLINED_FUNCTION_58_1();
  v52(v51);
  SiriContactsIntents::UsoIdentifierNamespace_optional v53 = (char *)v50[25];
  __swift_project_boxed_opaque_existential_1(v50 + 21, v50[24]);
  uint64_t v54 = OUTLINED_FUNCTION_58_1();
  if (RRReferenceResolverProtocol.resolveAttributeDisambiguationReference(from:)(v54, v55, v53))
  {
    uint64_t v56 = dispatch thunk of UsoEntity_common_ContactAddress.label.getter();
    OUTLINED_FUNCTION_48_1(v56, v57);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    BOOL v60 = OUTLINED_FUNCTION_4_20(v59);
    uint64_t v61 = *(void *)(v0 + 344);
    if (v60)
    {
      uint64_t v170 = *(void *)(v0 + 336);
      uint64_t v166 = *(void *)(v0 + 352);
      uint64_t v62 = (uint8_t *)OUTLINED_FUNCTION_24();
      uint64_t v164 = OUTLINED_FUNCTION_35();
      *(void *)&long long v179 = v164;
      *(_DWORD *)uint64_t v62 = 136315138;
      *(void *)(v0 + 56) = v1;
      *(void *)(v0 + 64) = v50;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v63 = OUTLINED_FUNCTION_51_2();
      *(void *)(v0 + 176) = OUTLINED_FUNCTION_63(v63, v64, v65, v66, v67, v68, v69, v70, v159, (uint64_t)(v62 + 4), v0 + 176, v164, v166, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_3();
      _os_log_impl(&dword_22D49E000, v58, (os_log_type_t)v49, "#ContactAttributeDisambiguationStrategy User selected attribute with label: %s", v62, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v167, v171);
    }
    else
    {
      swift_release();

      OUTLINED_FUNCTION_42_3();
      uint64_t v112 = OUTLINED_FUNCTION_64_0();
      v114(v112, v113);
    }
    goto LABEL_37;
  }
  unint64_t v92 = (void *)ParameterResolutionRecord.intent.getter();
  id v93 = objc_msgSend(v92, sel_contactAttributeToGet);

  ContactAttributeDisambiguationStrategy.extractContactAttribute(_:fromParse:)();
  uint64_t v95 = v94;
  uint64_t v97 = v96;

  if (v97)
  {
    *(void *)(v0 + 40) = v95;
    *(void *)(v0 + 48) = v97;
    swift_bridgeObjectRetain_n();
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.debug.getter();
    BOOL v100 = os_log_type_enabled(v98, v99);
    uint64_t v101 = *(void *)(v0 + 344);
    uint64_t v102 = *(void *)(v0 + 352);
    if (v100)
    {
      uint64_t v177 = *(void *)(v0 + 336);
      int v103 = (uint8_t *)OUTLINED_FUNCTION_24();
      *(void *)&long long v179 = OUTLINED_FUNCTION_35();
      *(_DWORD *)int v103 = 136315138;
      *(void *)(v0 + 72) = v95;
      *(void *)(v0 + 80) = v97;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v104 = OUTLINED_FUNCTION_51_2();
      *(void *)(v0 + 160) = OUTLINED_FUNCTION_63(v104, v105, v106, v107, v108, v109, v110, v111, v159, v161, v163, (uint64_t)(v103 + 4), v0 + 160, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v98, v99, "#ContactAttributeDisambiguationStrategy User selected attribute with label: %s", v103, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();

      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v174, v177);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v132 = OUTLINED_FUNCTION_64_0();
      v134(v132, v133);
    }
    goto LABEL_37;
  }
  *(void *)(v0 + 440) = ParameterResolutionRecord.intent.getter();
  uint64_t v130 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v130;
  *uint64_t v130 = v0;
  v130[1] = ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  return USOParse.toSiriKitIntent(previousIntent:referenceResolver:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = *(void **)(v1 + 440);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_3();
  *id v4 = v3;
  *(void *)(v6 + 456) = v5;
  swift_task_dealloc();

  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void (*v8)(void);
  void *v9;
  uint64_t v10;
  void (*v11)(void);
  void (*v12)(void);
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v3);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v1, v4, "#ContactAttributeDisambiguationStrategy User either did not select an option or we could not resolve their selection, returning nil");
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v5 = (void *)v0[57];
  if (v5)
  {
    uint64_t v6 = swift_dynamicCastClass();
    if (v6) {
      uint64_t v7 = v5;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  OUTLINED_FUNCTION_89();
  v8();
  if (!v6) {
    ParameterResolutionRecord.intent.getter();
  }
  uint64_t v9 = (void *)v0[57];
  uint64_t v10 = v0[38];
  (*(void (**)(void, void))(v0[36] + 8))(v0[37], v0[35]);
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  OUTLINED_FUNCTION_43_1();
  static DisambiguationResult.chosenItem(_:)();

  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_56_1();
  v11();
  OUTLINED_FUNCTION_31_2();
  v12();
  OUTLINED_FUNCTION_17_10();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_50_1();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v10, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v13();
}

uint64_t closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void **a1)
{
  uint64_t v1 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(*a1);
  if (v2)
  {
    uint64_t v1 = String.sanitizeCNLabel.getter();
    uint64_t v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = String.sanitizeCNLabel.getter();
  uint64_t v7 = String.convertToContactAttributeLabel.getter(v5, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (v1 == v7 && v4 == v9) {
      char v11 = 1;
    }
    else {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = 0;
  }
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[25] = v2;
  v1[26] = v0;
  v1[24] = v3;
  OUTLINED_FUNCTION_23_2();
  v1[27] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[28] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[29] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[30] = v7;
  v1[31] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v8);
  v1[32] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[33] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[34] = v10;
  v1[35] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for Locale();
  v1[36] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[37] = v12;
  v1[38] = OUTLINED_FUNCTION_31();
  v1[39] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v13);
  v1[40] = OUTLINED_FUNCTION_2_1();
  uint64_t v14 = type metadata accessor for ContactsSnippetPluginModel();
  v1[41] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[42] = v15;
  v1[43] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactAttributeSnippetModel = type metadata accessor for GetContactAttributeSnippetModel();
  v1[44] = ContactAttributeSnippetModel;
  OUTLINED_FUNCTION_1(ContactAttributeSnippetModel);
  v1[45] = v17;
  v1[46] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = type metadata accessor for NLContextUpdate();
  v1[47] = v18;
  OUTLINED_FUNCTION_1(v18);
  v1[48] = v19;
  v1[49] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = type metadata accessor for Signpost.OpenSignpost();
  v1[50] = v20;
  OUTLINED_FUNCTION_10_0(v20);
  v1[51] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  int v27;
  void *v28;
  id v29;
  id v30;
  NSObject *v31;
  uint8_t *v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  Class isa;
  id v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  id v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void);
  char v75;
  uint64_t v76;
  uint64_t *v77;
  void (*v78)(void);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  void (*v84)(uint64_t);
  uint8_t *buf;
  uint64_t v86;
  NSObject *loga;
  os_log_t log;
  id v89;
  os_log_type_t type;
  uint64_t typea;
  int v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96[2];
  uint64_t v97;
  uint64_t v98;

  uint64_t v97 = v0;
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_49_2();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 528) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v5 = "MakePromptForDisambiguation";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_22D49E000, v7, v8, "#ContactAttributeDisambiguationStrategy Running makePromptForDisambiguation()", v9, 2u);
    OUTLINED_FUNCTION_2();
  }

  type metadata accessor for ParameterResolutionRecord();
  uint64_t v10 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v11 = objc_msgSend(v10, sel_siriMatches);

  if (!v11) {
    goto LABEL_14;
  }
  type metadata accessor for SiriMatch();
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000001) == 0, v12);
  uint64_t v13 = (v12 & 0xC000000000000001) != 0 ? (id)MEMORY[0x230F854E0](0, v12) : *(id *)(v12 + 32);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = objc_msgSend(v14, sel_identifier);

  if (!v15)
  {
LABEL_14:
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
LABEL_21:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_22:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v39 = *(void *)(v0 + 408);
    OUTLINED_FUNCTION_32_6();
    _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v39, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_23;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v19 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v20 = objc_msgSend(v19, sel_isMe);

  if (v20 && (LOBYTE(v96[0]) = 2, MEMORY[0x230F85170](v20, v96), v20, (v96[0] & 1) != 0))
  {
    __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 208) + 56), *(void *)(*(void *)(v0 + 208) + 80));
    uint64_t v24 = OUTLINED_FUNCTION_62();
    uint64_t v26 = (void *)v25(v24);
    uint64_t v27 = 1;
  }
  else
  {
    uint64_t v21 = *(void **)(v0 + 208);
    uint64_t v22 = v21[10];
    uint64_t v23 = v21[11];
    __swift_project_boxed_opaque_existential_1(v21 + 7, v22);
    uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(v16, v18, v22, v23);
    uint64_t v27 = 0;
  }
  *(unsigned char *)(v0 + 532) = v27;
  *(void *)(v0 + 416) = v26;
  if (!v26)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
    NSObject *v38 = v16;
    v38[1] = v18;
    goto LABEL_21;
  }
  unint64_t v92 = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v29 = objc_msgSend(v28, sel_contactAttributeToGet);
  *(void *)(v0 + 424) = v29;

  if (!v29)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    OUTLINED_FUNCTION_4_1();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_22;
  }
  uint64_t v30 = v29;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.debug.getter();
  uint64_t v94 = v30;
  if (os_log_type_enabled(v31, type))
  {
    loga = v31;
    uint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_24();
    v96[0] = OUTLINED_FUNCTION_35();
    *(_DWORD *)uint64_t v32 = 136315138;
    buf = v32;
    uint64_t v33 = v30;
    uint64_t v34 = objc_msgSend(v33, sel_description);
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22D49E000, loga, type, "#ContactAttributeDisambiguationStrategy Attempting to create views for %s disambiguation.", buf, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v42 = (void *)ParameterResolutionRecord.intent.getter();
  id v43 = objc_msgSend(v42, sel_contactHandleMatches);

  if (v43)
  {
    type metadata accessor for ContactAttribute();
    uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v44 = 0;
  }
  *(void *)(v0 + 432) = v44;
  uint64_t v45 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v46 = objc_msgSend(v45, sel_contactHandleAlternatives);

  if (v46)
  {
    type metadata accessor for ContactAttribute();
    uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v47 = 0;
  }
  *(void *)(v0 + 440) = v47;
  typea = v47;
  uint64_t v48 = specialized ContactsStrategy.handles(matches:alternatives:)(v44, v47);
  *(void *)(v0 + 448) = v48;
  static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)(v26, v48, objc_msgSend(v94, sel_contactAttributeType), 1);
  if (ContactsStrategy.isSmartEnabled.getter())
  {
    uint64_t v49 = Logger.logObject.getter();
    uint64_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v51);
      OUTLINED_FUNCTION_19_1(&dword_22D49E000, v49, v52, "#ContactAttributeDisambiguationStrategy makeIntentHandledResponse constructing SMART snippet");
      OUTLINED_FUNCTION_2();
    }
    SiriContactsIntents::UsoIdentifierNamespace_optional v53 = *(void *)(v0 + 208);

    uint64_t v54 = v53 + 16;
    uint64_t v55 = *(void *)(v53 + 120);
    uint64_t v56 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v56;
    *uint64_t v56 = v0;
    v56[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v57 = *(void *)(v0 + 368);
    return static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:)(v57, (uint64_t)v26, (uint64_t)v94, v48, v54, v55);
  }
  log = (os_log_t)v44;
  uint64_t v58 = (void *)ParameterResolutionRecord.intent.getter();
  Class isa = (Class)objc_msgSend(v58, sel_isMe);

  if (!isa)
  {
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  }
  BOOL v60 = v94;
  static Device.current.getter();
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  uint64_t v61 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v0 + 16) = v48;
  *(void *)(v0 + 24) = v26;
  *(void *)(v0 + 32) = isa;
  *(void *)(v0 + 40) = v60;
  *(void *)(v0 + 88) = v61;
  uint64_t v89 = v26;
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of GetContactAttributeViewBuilder(v0 + 16);
  uint64_t v95 = v60;
  uint64_t v62 = Logger.logObject.getter();
  uint64_t v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    unint64_t v64 = (uint8_t *)OUTLINED_FUNCTION_24();
    v96[0] = OUTLINED_FUNCTION_35();
    *(_DWORD *)unint64_t v64 = 136315138;
    uint64_t v65 = v95;
    uint64_t v66 = objc_msgSend(v65, sel_description);
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v68;

    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22D49E000, v62, v63, "#ContactAttributeDisambiguationStrategy Attempting to create dialog for %s disambiguation.", v64, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {
  }
  uint64_t v86 = *(void *)(v0 + 248);
  uint64_t v70 = *(void **)(v0 + 208);
  __swift_project_boxed_opaque_existential_1(v70 + 2, v70[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v71 = Locale.identifier.getter();
  uint64_t v73 = v72;
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_31_2();
  v74();
  OUTLINED_FUNCTION_38_2(v70 + 2);
  BOOL v75 = DeviceState.isVox.getter();
  GetContactAttributeCATs.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)((uint64_t)log, typea, v95, v89, v92, v71, v73, v75 & 1, v86);
  id v93 = *(void *)(v0 + 376);
  uint64_t v76 = *(void *)(v0 + 224);
  uint64_t v77 = *(uint64_t **)(v0 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v70 += 2;
  OUTLINED_FUNCTION_38_2(v70);
  DeviceState.isVox.getter();
  OUTLINED_FUNCTION_89();
  v78();
  __swift_storeEnumTagSinglePayload(v76, 0, 1, v93);
  uint64_t v79 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v80 = MEMORY[0x263F6FFF0];
  v77[3] = v79;
  v77[4] = v80;
  __swift_allocate_boxed_opaque_existential_1(v77);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v76, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_23();
  v82(v81);
  OUTLINED_FUNCTION_31_2();
  v84(v83);
  OUTLINED_FUNCTION_14_11();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_50_1();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1((uint64_t)v70, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
LABEL_23:
  return v40();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 208);
  OUTLINED_FUNCTION_89();
  v5();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, *MEMORY[0x263F6CE40], v2);
  type metadata accessor for GetContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  *(void *)(v0 + 464) = CATWrapperSimple.__allocating_init(options:globals:)();
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 16), *(void *)(v4 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v6 = Locale.identifier.getter();
  uint64_t v8 = v7;
  *(void *)(v0 + 472) = v7;
  OUTLINED_FUNCTION_56_1();
  v9();
  OUTLINED_FUNCTION_38_2((void *)(v4 + 16));
  uint64_t v10 = DeviceState.isVox.getter();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v11;
  *uint64_t v11 = v0;
  v11[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  uint64_t v13 = *(void *)(v0 + 432);
  uint64_t v12 = *(void *)(v0 + 440);
  uint64_t v14 = *(void *)(v0 + 424);
  uint64_t v15 = *(unsigned char *)(v0 + 532);
  return GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(v13, v12, v14, v17, v15, v6, v8, v10 & 1);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = (void *)v0[62];
  uint64_t v2 = v0[49];
  uint64_t v4 = v0[42];
  uint64_t v3 = v0[43];
  uint64_t v5 = v0[41];
  uint64_t v6 = v0[26];
  static DialogPhase.clarification.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v6;
  v7[3] = v2;
  v7[4] = v3;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[63] = ResponseFactory.init()();
  v0[20] = v5;
  v0[21] = lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22D59FB50;
  *(void *)(v9 + 32) = v1;
  uint64_t v16 = v9;
  specialized Array._endMutation()();
  v0[64] = v16;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB10] + MEMORY[0x263F6FB10]);
  uint64_t v10 = v1;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[65] = (uint64_t)v11;
  *uint64_t v11 = v0;
  v11[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  uint64_t v12 = v0[35];
  uint64_t v13 = v0[24];
  return v15(v13, v0 + 17, v16, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = v1 + 136;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  void (*v7)(void);
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 416);
  uint64_t v2 = *(void **)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 328);

  OUTLINED_FUNCTION_33_3();
  v6();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v11);
  OUTLINED_FUNCTION_56_1();
  v7();
  OUTLINED_FUNCTION_14_11();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_50_1();
  os_signpost(_:dso:log:name:signpostID:)();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v3 + 8, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v8();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  void (*v5)(void);
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);

  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_33_3();
  v4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v3);
  OUTLINED_FUNCTION_56_1();
  v5();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void *)(v0 + 408);
  OUTLINED_FUNCTION_32_6();
  _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(v6, (void (*)(void))type metadata accessor for Signpost.OpenSignpost);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 488) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    *(void *)(v4 + 496) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

uint64_t closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  __swift_project_boxed_opaque_existential_1((void *)(a2 + 16), *(void *)(a2 + 40));
  DeviceState.isVox.getter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a3, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

void ContactAttributeDisambiguationStrategy.extractContactAttribute(_:fromParse:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v1 = OUTLINED_FUNCTION_10_0(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = v3 - v2;
  USOParse.preferredUserDialogAct.getter(v3 - v2);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_6_3(v4, 1, v5);
  if (v6)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }
  else
  {
    uint64_t v7 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_43_1();
    OUTLINED_FUNCTION_23();
    v8();
    if (v7)
    {
      uint64_t v9 = ContactAttributeDisambiguationStrategy.extractContactAddress(from:intendedAttribute:)();
      if (v10)
      {
        uint64_t v11 = v9;
        unint64_t v12 = v10;
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
        swift_bridgeObjectRetain_n();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (_DWORD *)OUTLINED_FUNCTION_24();
          uint64_t v26 = OUTLINED_FUNCTION_35();
          *uint64_t v16 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v26);
          OUTLINED_FUNCTION_37_6(v17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_66_0(&dword_22D49E000, v18, v19, "#GCAContactAttributeDisambiguationStrategy extracted contactAddress from parse as %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_release();
        goto LABEL_16;
      }
      swift_release();
    }
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
  uint64_t v21 = (void *)Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_7_4(v22))
  {
    uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v23);
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v24, v25, "#GCAContactAttributeDisambiguationStrategy Could not obtain contactAddress from UsoParse, returning nil");
    OUTLINED_FUNCTION_2();
  }

LABEL_16:
  OUTLINED_FUNCTION_8();
}

uint64_t ContactAttributeDisambiguationStrategy.extractContactAddress(from:intendedAttribute:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_3();
  uint64_t v5 = v3 - v4;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v41[-v8];
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_8_12();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v41[-v12];
  MEMORY[0x270FA5388](v11);
  os_log_type_t v15 = &v41[-v14];
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v43) {
    goto LABEL_30;
  }
  outlined init with copy of Any?((uint64_t)v42, (uint64_t)v41);
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_12_14())
  {
    OUTLINED_FUNCTION_52_2();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v40)
    {
      uint64_t v16 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (v16)
      {
        ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
        uint64_t v18 = v17;
        specialized Collection.first.getter(v17, (uint64_t)v15);
        swift_bridgeObjectRelease();
        uint64_t v19 = type metadata accessor for UsoIdentifier();
        OUTLINED_FUNCTION_6_3((uint64_t)v15, 1, v19);
        if (!v20)
        {
          UsoIdentifier.value.getter();
          OUTLINED_FUNCTION_15_13();
          swift_release();
          OUTLINED_FUNCTION_51();
          uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v29 + 8);
          uint64_t v31 = v15;
LABEL_38:
          uint64_t v35 = v19;
LABEL_41:
          v30(v31, v35);
          goto LABEL_42;
        }
        uint64_t v21 = (uint64_t)v15;
        goto LABEL_20;
      }
    }
    goto LABEL_28;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (OUTLINED_FUNCTION_12_14())
  {
    OUTLINED_FUNCTION_52_2();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
    swift_release();
    if (v40)
    {
      uint64_t v22 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (v22)
      {
        ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
        uint64_t v18 = v23;
        specialized Collection.first.getter(v23, (uint64_t)v13);
        swift_bridgeObjectRelease();
        uint64_t v19 = type metadata accessor for UsoIdentifier();
        OUTLINED_FUNCTION_6_3((uint64_t)v13, 1, v19);
        if (!v20)
        {
          UsoIdentifier.value.getter();
          OUTLINED_FUNCTION_15_13();
          swift_release();
          OUTLINED_FUNCTION_51();
          uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
          uint64_t v31 = v13;
          goto LABEL_38;
        }
        uint64_t v21 = (uint64_t)v13;
        goto LABEL_20;
      }
    }
    goto LABEL_28;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (!OUTLINED_FUNCTION_12_14())
  {
    type metadata accessor for UsoTask_read_common_Person();
    if (OUTLINED_FUNCTION_12_14())
    {
      OUTLINED_FUNCTION_52_2();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      if (!v40) {
        goto LABEL_28;
      }
      uint64_t v27 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (!v27) {
        goto LABEL_28;
      }
      ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
      uint64_t v18 = v28;
      specialized Collection.first.getter(v28, (uint64_t)v9);
      swift_bridgeObjectRelease();
      uint64_t v26 = type metadata accessor for UsoIdentifier();
      OUTLINED_FUNCTION_6_3((uint64_t)v9, 1, v26);
      if (!v20)
      {
        UsoIdentifier.value.getter();
        OUTLINED_FUNCTION_15_13();
        swift_release();
        OUTLINED_FUNCTION_51();
        uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
        uint64_t v31 = v9;
        goto LABEL_40;
      }
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v9, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v18 = dispatch thunk of UsoEntity_common_ContactAddress.label.getter();
    }
    else
    {
      type metadata accessor for UsoTask_checkExistence_common_Person();
      if (!swift_dynamicCast()) {
        goto LABEL_29;
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      if (!v40) {
        goto LABEL_28;
      }
      uint64_t v32 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
      swift_release();
      if (!v32) {
        goto LABEL_28;
      }
      ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
      specialized Collection.first.getter(v33, v5);
      swift_bridgeObjectRelease();
      uint64_t v26 = type metadata accessor for UsoIdentifier();
      OUTLINED_FUNCTION_6_3(v5, 1, v26);
      if (!v20)
      {
        uint64_t v18 = UsoIdentifier.value.getter();
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_51();
        uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v38 + 8);
        uint64_t v31 = (unsigned char *)v5;
        goto LABEL_40;
      }
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v5, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v18 = dispatch thunk of UsoEntity_common_ContactAddress.label.getter();
    }
    swift_release();
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_52_2();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (v40)
  {
    uint64_t v24 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
    swift_release();
    if (v24)
    {
      ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
      uint64_t v18 = v25;
      specialized Collection.first.getter(v25, v0);
      swift_bridgeObjectRelease();
      uint64_t v26 = type metadata accessor for UsoIdentifier();
      OUTLINED_FUNCTION_6_3(v0, 1, v26);
      if (v20)
      {
        uint64_t v21 = v0;
LABEL_20:
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v21, &demangling cache variable for type metadata for UsoIdentifier?);
        dispatch thunk of UsoEntity_common_ContactAddress.label.getter();
        OUTLINED_FUNCTION_15_13();
LABEL_21:
        swift_release();
LABEL_42:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
        goto LABEL_43;
      }
      UsoIdentifier.value.getter();
      OUTLINED_FUNCTION_15_13();
      swift_release();
      OUTLINED_FUNCTION_51();
      uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v36 + 8);
      uint64_t v31 = (unsigned char *)v0;
LABEL_40:
      uint64_t v35 = v26;
      goto LABEL_41;
    }
  }
LABEL_28:
  swift_release();
LABEL_29:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
LABEL_30:
  uint64_t v18 = 0;
LABEL_43:
  _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v42, &demangling cache variable for type metadata for Any?);
  return v18;
}

void ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)()
{
  OUTLINED_FUNCTION_10();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_11_3();
  uint64_t v45 = v6 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v40 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v13 = OUTLINED_FUNCTION_13_14();
  uint64_t v14 = (char *)MEMORY[0x263F8EE78];
  if (v13)
  {
    uint64_t v51 = *(void *)(v13 + 16);
    if (v51)
    {
      uint64_t v52 = v13;
      if (v1 && (unint64_t v15 = (unint64_t)objc_msgSend(v1, sel_contactAttributeType), v15 <= 3))
      {
        BOOL v46 = (v15 & 0xF) == 0;
        unsigned int v43 = 0x5030409u >> (8 * v15);
      }
      else
      {
        unsigned int v43 = 9;
        BOOL v46 = 1;
      }
      if (one-time initialization token for siriContacts != -1) {
LABEL_51:
      }
        swift_once();
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_24();
        uint64_t v55 = OUTLINED_FUNCTION_35();
        *(_DWORD *)uint64_t v19 = 136315138;
        if (v46)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v20 = UsoIdentifierNamespace.rawValue.getter(v43);
        }
        uint64_t v50 = v19 + 4;
        uint64_t v53 = v20;
        uint64_t v54 = v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v22 = String.init<A>(describing:)();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22D49E000, v17, v18, "#GCADisambiguationStrategy extractAddressIdentifiers targetNamespace %s", v19, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_2();
      }

      unint64_t v24 = 0;
      uint64_t v53 = (uint64_t)v14;
      uint64_t v44 = (void (**)(void))(v4 + 32);
      uint64_t v49 = (void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v50 = (uint8_t *)(v4 + 16);
      uint64_t v48 = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v41 = v4;
      unint64_t v42 = (unint64_t)"ilType";
      uint64_t v14 = v47;
      uint64_t v25 = v52;
      do
      {
        if (v24 >= *(void *)(v25 + 16))
        {
          __break(1u);
          goto LABEL_51;
        }
        uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        v26(v12, v25+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v24, v2);
        UsoIdentifier.namespace.getter();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        v26(v14, (unint64_t)v12, v2);
        if (v28)
        {
          uint64_t v29 = UsoIdentifier.namespace.getter();
          if (!v46)
          {
            unint64_t v31 = v42 | 0x8000000000000000;
            uint64_t v32 = 0xD000000000000011;
            switch((char)v43)
            {
              case 4:
                uint64_t v33 = 0x546C69616D65;
                goto LABEL_23;
              case 5:
                uint64_t v32 = 0x5473736572646461;
                unint64_t v31 = 0xEB00000000657079;
                if (!v30) {
                  goto LABEL_24;
                }
                goto LABEL_32;
              case 6:
                goto LABEL_31;
              case 7:
                uint64_t v32 = 0x54746361746E6F63;
                unint64_t v31 = 0xEB00000000657079;
LABEL_31:
                if (v30) {
                  goto LABEL_32;
                }
                goto LABEL_24;
              case 8:
                unint64_t v31 = 0xEE0065756C61765FLL;
                uint64_t v32 = 0x6369746E616D6573;
                if (!v30) {
                  goto LABEL_24;
                }
                goto LABEL_32;
              default:
                uint64_t v33 = 0x54656E6F6870;
LABEL_23:
                uint64_t v32 = v33 & 0xFFFFFFFFFFFFLL | 0x7079000000000000;
                unint64_t v31 = 0xE900000000000065;
                if (!v30)
                {
LABEL_24:
                  uint64_t v14 = v47;
                  goto LABEL_25;
                }
LABEL_32:
                if (v29 == v32 && v30 == v31)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v14 = v47;
                  goto LABEL_39;
                }
                char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v34 = *v49;
                uint64_t v14 = v47;
                (*v49)(v47, v2);
                if (v36) {
                  goto LABEL_40;
                }
                break;
            }
            goto LABEL_27;
          }
          if (!v30)
          {
LABEL_39:
            (*v49)(v14, v2);
LABEL_40:
            uint64_t v37 = *v44;
            OUTLINED_FUNCTION_11();
            v37();
            uint64_t v38 = v53;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v38 = v53;
            }
            unint64_t v39 = *(void *)(v38 + 16);
            if (v39 >= *(void *)(v38 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v38 = v53;
            }
            *(void *)(v38 + 16) = v39 + 1;
            OUTLINED_FUNCTION_11();
            v37();
            uint64_t v53 = v38;
            uint64_t v4 = v41;
            uint64_t v14 = v47;
            goto LABEL_45;
          }
LABEL_25:
          swift_bridgeObjectRelease();
        }
        uint64_t v34 = *v49;
        (*v49)(v14, v2);
LABEL_27:
        v34(v12, v2);
LABEL_45:
        ++v24;
        uint64_t v25 = v52;
      }
      while (v51 != v24);
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8();
}

uint64_t ContactAttributeDisambiguationStrategy.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
}

uint64_t ContactAttributeDisambiguationStrategy.deinit()
{
  uint64_t v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
  return v0;
}

uint64_t ContactAttributeDisambiguationStrategy.__deallocating_deinit()
{
  uint64_t v0 = ContactAttributeDisambiguationStrategy.deinit();
  return MEMORY[0x270FA0228](v0, 208, 7);
}

uint64_t type metadata accessor for ContactAttributeDisambiguationStrategy()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
  type metadata accessor for ContactAttributeDisambiguationStrategy();
  JUMPOUT(0x230F82210);
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ContactAttributeDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v5 + 16) = a1;
  }
  uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
  return v8();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  *uint64_t v10 = v5;
  v10[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66628](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  *uint64_t v10 = v5;
  v10[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66638](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66630](a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66648](a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
  type metadata accessor for ContactAttributeDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  void *v12 = v6;
  v12[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F68168](a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for ContactAttributeDisambiguationStrategy();
  *uint64_t v14 = v7;
  v14[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v15, a7);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactAttributeDisambiguationStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type ContactsError and conformance ContactsError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void **a1)
{
  return closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1) & 1;
}

uint64_t _s19SiriContactsIntents8SignpostO04OpenD0VWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v3();
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

BOOL OUTLINED_FUNCTION_4_20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13_14()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t OUTLINED_FUNCTION_15_13()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_20_10()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_34_8()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

uint64_t OUTLINED_FUNCTION_37_6(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

double OUTLINED_FUNCTION_42_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

void OUTLINED_FUNCTION_43_2(unint64_t a1@<X8>)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

_WORD *OUTLINED_FUNCTION_47_0(_WORD *result)
{
  *double result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_1(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_52_2()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_54_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_58_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return v0;
}

void OUTLINED_FUNCTION_66_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t dispatch thunk of SiriContactsFeatureFlagProviding.isSmartEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for SiriContactsFeatureFlagProvider()
{
  return &type metadata for SiriContactsFeatureFlagProvider;
}

uint64_t getEnumTagSinglePayload for SiriContactsFeatures(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SiriContactsFeatures(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *double result = a2;
        return result;
      case 2:
        *(_WORD *)double result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)double result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *double result = 0;
      break;
    case 2:
      *(_WORD *)double result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22D506B58);
    case 4:
      *(_DWORD *)double result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriContactsFeatures()
{
  return &type metadata for SiriContactsFeatures;
}

unint64_t lazy protocol witness table accessor for type SiriContactsFeatures and conformance SiriContactsFeatures()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures;
  if (!lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures;
  if (!lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures);
  }
  return result;
}

const char *SiriContactsFeatures.domain.getter()
{
  return "ResponseFramework";
}

const char *SiriContactsFeatures.feature.getter()
{
  return "SMART";
}

void SiriContactsFeatures.hash(into:)()
{
}

Swift::Int SiriContactsFeatures.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriContactsFeatures()
{
  return Hasher._finalize()();
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)MEMORY[0x230F854E0](v6, a1);
LABEL_7:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_20;
        }
        id v10 = objc_msgSend(v7, sel_value);
        id v11 = objc_msgSend(v10, sel_name);

        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_16;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_15;
        }

LABEL_16:
        ++v6;
        if (v9 == v5)
        {
          uint64_t v17 = v20;
          goto LABEL_23;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_22;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }
LABEL_22:
  uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  id v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v16 - v12;
  outlined init with copy of DeviceState(v5 + 16, (uint64_t)v18);
  outlined init with copy of NLContextUpdate?(a5, (uint64_t)v11);
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v14) == 1)
  {
    static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v11, &demangling cache variable for type metadata for NLContextUpdate?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v13, v11, v14);
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v14);
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for NLContextUpdate?);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
}

uint64_t specialized static StrategyUtil.getActionForInput<A>(input:intentType:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v50 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v49 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v7);
  id v11 = (char *)&v45 - v10;
  uint64_t v48 = type metadata accessor for ModifyContactAttributeIntent();
  Input.parse.getter();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v13 = v12(v11, v3);
  int v14 = *MEMORY[0x263F6FF70];
  if (v13 != *MEMORY[0x263F6FF50] && v13 != v14 && v13 != *MEMORY[0x263F6FF80])
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_22D49E000, v26, v27, "#getActionForInput: Received unsupported parse type, returning .ignore() actionForInput", v28, 2u);
      MEMORY[0x230F85DE0](v28, -1, -1);
    }

    static ActionForInput.ignore()();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }
  uint64_t v46 = v4;
  uint64_t v47 = v1;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v11, v3);
  Input.parse.getter();
  Parse.cancelOrContactIntent.getter();
  __int16 v19 = v18;
  v17(v9, v3);
  if (v19)
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.siriContacts);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_22D49E000, v31, v32, "#getActionForInput: .cancel() actionForInput", v33, 2u);
      MEMORY[0x230F85DE0](v33, -1, -1);
    }

    return static ActionForInput.cancel()();
  }
  else
  {
    if ((v19 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_39;
      }
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      unint64_t v24 = "#getActionForInput: .ignore() actionForInput";
LABEL_38:
      _os_log_impl(&dword_22D49E000, v21, v22, v24, v23, 2u);
      MEMORY[0x230F85DE0](v23, -1, -1);
LABEL_39:

      return static ActionForInput.ignore()();
    }
    uint64_t v34 = v51;
    Input.parse.getter();
    if (v12(v34, v3) == v14)
    {
      (*(void (**)(char *, uint64_t))(v46 + 96))(v34, v3);
      char v36 = v49;
      uint64_t v35 = v50;
      uint64_t v37 = v47;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v34, v47);
      static StrategyUtil.actionForDirectInvocation(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    }
    v17(v34, v3);
    Input.parse.getter();
    Parse.getSiriKitIntentType()();
    uint64_t v39 = v38;
    v17(v9, v3);
    if (!v39 || v48 != v39)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_39;
      }
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      unint64_t v24 = "#getActionForInput: parse intent type does not match flow's intent type, returning .ignore()";
      goto LABEL_38;
    }
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriContacts);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unsigned int v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v43 = 0;
      _os_log_impl(&dword_22D49E000, v41, v42, "#getActionForInput: .handle() actionForInput", v43, 2u);
      MEMORY[0x230F85DE0](v43, -1, -1);
    }

    return static ActionForInput.handle()();
  }
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.actionForInput(_:confirmParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v5 = OUTLINED_FUNCTION_10_0(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_11_3();
  MEMORY[0x270FA5388](v12);
  Input.parse.getter();
  Parse.isCancel.getter();
  char v14 = v13;
  uint64_t v15 = *(void (**)(void))(v10 + 8);
  OUTLINED_FUNCTION_23_3();
  v15();
  if (v14) {
    return static ActionForInput.cancel()();
  }
  Input.parse.getter();
  Parse.confirmationResponse.getter();
  OUTLINED_FUNCTION_23_3();
  v15();
  uint64_t v17 = type metadata accessor for ConfirmationResponse();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1, v17);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for ConfirmationResponse?);
  if (EnumTagSinglePayload != 1) {
    return static ActionForInput.handle()();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  __int16 v19 = (char *)IntentResolutionRecord.intent.getter();
  char v20 = ModifyContactAttributeConfirmIntentStrategy.isRequestForDifferentAttribute(_:intent:)(a1, v19);

  if ((v20 & 1) == 0) {
    return specialized static StrategyUtil.getActionForInput<A>(input:intentType:)(a2);
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  os_log_type_t v22 = OUTLINED_FUNCTION_21_0(v21, (uint64_t)static Logger.siriContacts);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl(&dword_22D49E000, v22, v23, "[ModifyContactAttributeConfirmIntentStrategy] actionForInput encountered request to modify a different attribute or confirm a different value, ignoring", v24, 2u);
    MEMORY[0x230F85DE0](v24, -1, -1);
  }

  return static ActionForInput.ignore()();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  OUTLINED_FUNCTION_4();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_10_0(v4);
  v0[5] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for Parse();
  v0[6] = v5;
  OUTLINED_FUNCTION_1(v5);
  v0[7] = v6;
  v0[8] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = OUTLINED_FUNCTION_21_0(v0, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v3);
    OUTLINED_FUNCTION_19_1(&dword_22D49E000, v1, v4, "[ModifyContactAttributeConfirmIntentStrategy] parseConfirmationResponse");
    OUTLINED_FUNCTION_4_6();
  }

  Input.parse.getter();
  Parse.confirmationResponse.getter();
  uint64_t v5 = OUTLINED_FUNCTION_17_11();
  v6(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for ModifyContactAttributeIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  return v7();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  OUTLINED_FUNCTION_4();
  v1[25] = v2;
  v1[26] = v0;
  v1[24] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[27] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[28] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[29] = v6;
  v1[30] = OUTLINED_FUNCTION_31();
  v1[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v7);
  v1[32] = OUTLINED_FUNCTION_2_1();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[33] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[34] = v9;
  v1[35] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for ContactsSnippetPluginModel();
  v1[36] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[37] = v11;
  v1[38] = OUTLINED_FUNCTION_2_1();
  uint64_t v12 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v12);
  v1[39] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for ContactsSnippetFlowState();
  v1[40] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[41] = v14;
  v1[42] = OUTLINED_FUNCTION_2_1();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_10_0(v15);
  v1[43] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v1[44] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[45] = v17;
  v1[46] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_10_0(v18);
  v1[47] = OUTLINED_FUNCTION_31();
  v1[48] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v1[49] = v19;
  OUTLINED_FUNCTION_1(v19);
  v1[50] = v20;
  v1[51] = OUTLINED_FUNCTION_31();
  v1[52] = swift_task_alloc();
  uint64_t v21 = type metadata accessor for Signpost.OpenSignpost();
  v1[53] = v21;
  OUTLINED_FUNCTION_10_0(v21);
  v1[54] = OUTLINED_FUNCTION_2_1();
  uint64_t v22 = type metadata accessor for SpeakableString();
  v1[55] = v22;
  OUTLINED_FUNCTION_1(v22);
  v1[56] = v23;
  v1[57] = OUTLINED_FUNCTION_31();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  uint64_t v24 = type metadata accessor for Locale();
  v1[60] = v24;
  OUTLINED_FUNCTION_10_0(v24);
  v1[61] = OUTLINED_FUNCTION_2_1();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v25);
  v1[62] = OUTLINED_FUNCTION_31();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v26, v27, v28);
}

{
  os_log_type_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  unint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  void (*v90)(uint64_t);
  uint64_t v91;
  void *v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;

  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v1[73] = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_1(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v0, "[ModifyContactAttributeConfirmIntentStrategy] makePromptForConfirmation", v5, 2u);
    MEMORY[0x230F85DE0](v5, -1, -1);
  }
  uint64_t v6 = v1[26];

  v1[74] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  uint64_t v7 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v8 = objc_msgSend(v7, sel_contactAttributeToModify);

  uint64_t v9 = (void *)(v6 + 16);
  outlined init with copy of DeviceState(v6 + 16, (uint64_t)(v1 + 3));
  uint64_t v10 = *(void *)(v6 + 104);
  v1[2] = v8;
  v1[8] = v10;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  v1[75] = v11;
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v1 + 2));
  uint64_t v12 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v13 = objc_msgSend(v12, sel_contactAttributeToModify);

  if (v13 != (id)6)
  {
    if (v13 != (id)10)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_36_0();
      __asm { BRAA            X1, X16 }
    }
    __swift_storeEnumTagSinglePayload(v1[72], 1, 1, v1[55]);
    uint64_t v14 = (void *)IntentResolutionRecord.intent.getter();
    uint64_t v15 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v14);
    uint64_t v127 = (void *)(v6 + 16);
    if (!v15) {
      goto LABEL_12;
    }
    uint64_t v16 = v15;
    uint64_t v17 = v15 & 0xC000000000000001;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v15 & 0xC000000000000001) == 0, v15);
    uint64_t v18 = v17 ? (id)MEMORY[0x230F854E0](0, v16) : *(id *)(v16 + 32);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v20 = outlined bridged method (ob) of @objc INObject.identifier.getter(v19);
    if (!v21) {
      goto LABEL_12;
    }
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    uint64_t v24 = (void *)v1[26];
    uint64_t v25 = v24[10];
    uint64_t v26 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v25);
    uint64_t v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8))(v22, v23, v25, v26);
    swift_bridgeObjectRelease();
    if (v68)
    {
      uint64_t v69 = v9;
      uint64_t v44 = v1 + 71;
      uint64_t v126 = v1[72];
      uint64_t v70 = v1[61];
      uint64_t v71 = v1[26];
      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(v69, *(void *)(v71 + 40));
      uint64_t v72 = v68;
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v73 = *(void **)(v71 + 120);
      os_log_type_t v74 = v73;
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v72, 0, v70, (uint64_t)v73);
      dispatch thunk of DialogPerson.fullName.getter();
      swift_release();

      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v126, &demangling cache variable for type metadata for SpeakableString?);
    }
    else
    {
LABEL_12:
      uint64_t v27 = (void *)IntentResolutionRecord.intentResponse.getter();
      uint64_t v28 = objc_msgSend(v27, sel_updatedRelationship);

      if (!v28 || (outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v28), !v29))
      {
        static String.EMPTY.getter();
        swift_bridgeObjectRelease();
      }
      unsigned int v43 = v1[72];
      uint64_t v44 = v1 + 70;
      uint64_t v45 = v1[70];
      OUTLINED_FUNCTION_26_2();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v43, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_56(v45);
    }
    uint64_t v46 = v1[69];
    uint64_t v47 = v1[55];
    uint64_t v48 = (void *)v1[26];
    outlined init with take of SpeakableString?(*v44, v1[72]);
    uint64_t v49 = (void *)IntentResolutionRecord.intent.getter();
    uint64_t v50 = objc_msgSend(v49, sel_modifyOperation);

    ModifyOperation.stringify.getter((unint64_t)v50);
    OUTLINED_FUNCTION_26_2();
    uint64_t v51 = v48[10];
    uint64_t v52 = v48[11];
    __swift_project_boxed_opaque_existential_1(v48 + 7, v51);
    uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
    v1[76] = v53;
    __swift_storeEnumTagSinglePayload(v46, 1, 1, v47);
    if (!v53) {
      goto LABEL_39;
    }
    uint64_t v54 = objc_msgSend(v53, sel_contactRelations);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    uint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = (void *)IntentResolutionRecord.intentResponse.getter();
    uint64_t v57 = objc_msgSend(v56, sel_updatedRelationship);

    if (v57)
    {
      uint64_t v58 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v57);
      if (v59)
      {
        BOOL v60 = specialized _ArrayProtocol.filter(_:)(v55, v58, v59);
        uint64_t v61 = v60;
        if (v60 >> 62)
        {
          if (_CocoaArrayWrapper.endIndex.getter()) {
            goto LABEL_30;
          }
        }
        else if (*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_30:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v61 & 0xC000000000000001) == 0, v61);
          if ((v61 & 0xC000000000000001) != 0) {
            uint64_t v62 = (id)MEMORY[0x230F854E0](0, v61);
          }
          else {
            uint64_t v62 = *(id *)(v61 + 32);
          }
          uint64_t v63 = v62;
          swift_bridgeObjectRelease();
          unint64_t v64 = objc_msgSend(v63, sel_label);

          if (v64)
          {
            uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v67 = v66;
          }
          else
          {
            uint64_t v65 = 0;
            uint64_t v67 = 0;
          }
          BOOL v75 = v1[69];
          uint64_t v76 = v1[68];
          static Dictionary<>.nlSemantic(forCNLabel:)(v65, v67);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_26_2();
          _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v75, &demangling cache variable for type metadata for SpeakableString?);
          OUTLINED_FUNCTION_56(v76);
          outlined init with take of SpeakableString?(v76, v75);
          goto LABEL_39;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v77 = (void *)IntentResolutionRecord.intentResponse.getter();
    uint64_t v78 = objc_msgSend(v77, sel_updatedRelationship);

    if (!v78
      || (outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v78, (SEL *)&selRef_relationship),
          !v79))
    {
      static String.EMPTY.getter();
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_26_2();
    uint64_t v80 = SpeakableString.print.getter();
    uint64_t v82 = v81;
    if (one-time initialization token for contactsLog != -1) {
      swift_once();
    }
    uint64_t v84 = v1[53];
    uint64_t v83 = v1[54];
    uint64_t v85 = (id)static Signpost.contactsLog;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v86 = v83 + *(int *)(v84 + 20);
    *(void *)uint64_t v86 = "RelationshipLabelValueForKey";
    *(void *)(v86 + 8) = 28;
    *(unsigned char *)(v86 + 16) = 2;
    if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v87 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
    swift_bridgeObjectRetain();
    unint64_t v88 = specialized Dictionary.subscript.getter(v80, v82, v87);
    uint64_t v90 = v89;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v90)
    {
      uint64_t v80 = v88;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v90 = (void (*)(uint64_t))v82;
    }
    uint64_t v91 = v1[54];
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v91);
    swift_bridgeObjectRelease();
    unint64_t v92 = self;
    id v93 = (void *)MEMORY[0x230F84F70](v80, v90);
    swift_bridgeObjectRelease();
    uint64_t v94 = objc_msgSend(v92, sel_localizedStringForLabel_, v93);

    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v96;

    if (specialized ContactsStrategy.isSmartEnabled.getter(v98))
    {
      BOOL v100 = v1[45];
      os_log_type_t v99 = (uint64_t *)v1[46];
      uint64_t v101 = v1[43];
      unint64_t v122 = v1[60];
      uint64_t v123 = v1[44];
      uint64_t v102 = (uint64_t *)v1[42];
      uint64_t v124 = v1[41];
      uint64_t v125 = v1[40];
      int v103 = v1[26];
      v1[77] = IntentResolutionRecord.intent.getter();
      v1[78] = IntentResolutionRecord.intentResponse.getter();
      v1[22] = v95;
      v1[23] = v97;
      __swift_project_boxed_opaque_existential_1(v127, *(void *)(v103 + 40));
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_storeEnumTagSinglePayload(v101, 0, 1, v122);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v104 = StringProtocol.capitalized(with:)();
      uint64_t v106 = v105;
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v101, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      *os_log_type_t v99 = v104;
      v99[1] = v106;
      (*(void (**)(uint64_t *, void, uint64_t))(v100 + 104))(v99, *MEMORY[0x263F6CF20], v123);
      uint64_t v107 = static ContactsDirectInvocations.confirm()();
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAStartLocalRequest);
      uint64_t v108 = SAClientBoundCommand.data.getter();
      uint64_t v110 = v109;

      uint64_t v111 = static ContactsDirectInvocations.deny()();
      uint64_t v112 = SAClientBoundCommand.data.getter();
      uint64_t v114 = v113;

      void *v102 = v108;
      v102[1] = v110;
      v102[2] = v112;
      v102[3] = v114;
      (*(void (**)(uint64_t *, void, uint64_t))(v124 + 104))(v102, *MEMORY[0x263F6CDC8], v125);
      type metadata accessor for ContactsLabelCATsModern();
      static CATOption.defaultMode.getter();
      v1[79] = CATWrapperSimple.__allocating_init(options:globals:)();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      v1[80] = v115;
      *uint64_t v115 = v116;
      v115[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
      OUTLINED_FUNCTION_36_0();
      return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v118 = OUTLINED_FUNCTION_11_13();
      v90(v118);
      uint64_t v119 = OUTLINED_FUNCTION_30_5();
      v90(v119);
      OUTLINED_FUNCTION_54_2();
      uint64_t v120 = (void *)swift_task_alloc();
      v1[88] = v120;
      *uint64_t v120 = v1;
      v120[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
      OUTLINED_FUNCTION_33_5();
      OUTLINED_FUNCTION_36_0();
      return ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)();
    }
  }
  uint64_t v30 = (void *)IntentResolutionRecord.intent.getter();
  outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v30, (SEL *)&selRef_modifyNickName);
  if (!v31) {
    static String.EMPTY.getter();
  }
  os_log_type_t v32 = v1[63];
  uint64_t v34 = v1[56];
  uint64_t v33 = v1[57];
  uint64_t v35 = v1[55];
  OUTLINED_FUNCTION_26_2();
  char v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
  v1[90] = v36;
  v1[91] = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v36(v32, v33, v35);
  __swift_storeEnumTagSinglePayload(v32, 0, 1, v35);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v1[92] = v37;
  *uint64_t v37 = v38;
  v37[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  OUTLINED_FUNCTION_36_0();
  return ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (*v6)(void);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = *(void **)(v1 + 624);
  uint64_t v3 = *(void **)(v1 + 616);
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_31_2();
  v6();
  uint64_t v7 = OUTLINED_FUNCTION_17_11();
  v8(v7);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  void (*v8)(uint64_t);
  NSObject *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void *v20;
  uint64_t v21;

  uint64_t v2 = v0[48];
  if (__swift_getEnumTagSinglePayload(v2, 1, v0[49]) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    uint64_t v3 = OUTLINED_FUNCTION_11_13();
    v1(v3);
    uint64_t v4 = OUTLINED_FUNCTION_30_5();
    v1(v4);
    OUTLINED_FUNCTION_54_2();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[88] = v5;
    *uint64_t v5 = v0;
    v5[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    OUTLINED_FUNCTION_33_5();
    return ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = OUTLINED_FUNCTION_38_7();
    v8(v7);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_6_1(v10))
    {
      uint64_t v11 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v11);
      OUTLINED_FUNCTION_19_1(&dword_22D49E000, v9, v12, "#ModifyContactAttributeConfirmIntentStrategy makePromptForConfirmation constructing SMART snippet");
      OUTLINED_FUNCTION_4_6();
    }
    uint64_t v13 = v0[67];
    uint64_t v14 = v0[66];
    uint64_t v16 = v0[58];
    uint64_t v15 = v0[59];
    uint64_t v17 = v0[55];
    uint64_t v18 = v0[56];

    type metadata accessor for ModifyContactAttributeCATsModern();
    static CATOption.defaultMode.getter();
    v0[81] = CATWrapperSimple.__allocating_init(options:globals:)();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v19(v13, v16, v17);
    OUTLINED_FUNCTION_56(v13);
    v19(v14, v15, v17);
    OUTLINED_FUNCTION_56(v14);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[82] = v20;
    *uint64_t v20 = v0;
    v20[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  void (*v10)(void);
  __n128 *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  uint64_t v4 = v2[76];
  uint64_t v5 = OUTLINED_FUNCTION_22_9();
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_37_7();
  v8(v7);
  static DialogPhase.confirmation.getter();
  uint64_t v9 = (void *)swift_task_alloc();
  _OWORD v9[2] = v0;
  v9[3] = v4;
  v9[4] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v2[85] = ResponseFactory.init()();
  v2[17] = v3;
  v2[18] = lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
  __swift_allocate_boxed_opaque_existential_1(v2 + 14);
  OUTLINED_FUNCTION_40_6();
  v10();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_50_2(v11, (__n128)xmmword_22D59FB50);
  v2[86] = v17;
  OUTLINED_FUNCTION_49_3();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v2[87] = (uint64_t)v12;
  void *v12 = v13;
  v12[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  uint64_t v14 = OUTLINED_FUNCTION_24_7();
  return v15(v14);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 112;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  v3[89] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[65];
    uint64_t v8 = v3[64];
    swift_bridgeObjectRelease();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    uint64_t v7 = v3[65];
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v3[64], &demangling cache variable for type metadata for SpeakableString?);
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *(void *)(v3 + 744) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v3 + 504), &demangling cache variable for type metadata for SpeakableString?);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (*v6)(void);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_0();
  uint64_t v2 = *(void **)(v1 + 768);
  uint64_t v3 = *(void **)(v1 + 760);
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_31_2();
  v6();
  uint64_t v7 = OUTLINED_FUNCTION_17_11();
  v8(v7);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  void (*v10)(void);
  __n128 *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  uint64_t v4 = v2[94];
  uint64_t v5 = OUTLINED_FUNCTION_22_9();
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_37_7();
  v8(v7);
  static DialogPhase.confirmation.getter();
  uint64_t v9 = (void *)swift_task_alloc();
  _OWORD v9[2] = v0;
  v9[3] = v4;
  v9[4] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v2[103] = ResponseFactory.init()();
  v2[12] = v3;
  v2[13] = lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
  __swift_allocate_boxed_opaque_existential_1(v2 + 9);
  OUTLINED_FUNCTION_40_6();
  v10();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_50_2(v11, (__n128)xmmword_22D59FB50);
  v2[104] = v17;
  OUTLINED_FUNCTION_49_3();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v2[105] = (uint64_t)v12;
  void *v12 = v13;
  v12[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  uint64_t v14 = OUTLINED_FUNCTION_24_7();
  return v15(v14);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 72;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 664) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 536);
  uint64_t v8 = *(void *)(v4 + 528);
  swift_release();
  if (!v1) {
    *(void *)(v5 + 672) = a1;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 808) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 496);
  if (!v1) {
    *(void *)(v5 + 816) = a1;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v33 = *(void **)(v32 + 608);
  uint64_t v54 = *(void *)(v32 + 576);
  uint64_t v50 = *(void *)(v32 + 552);
  uint64_t v51 = *(void *)(v32 + 472);
  uint64_t v34 = *(void *)(v32 + 448);
  uint64_t v48 = *(void *)(v32 + 416);
  uint64_t v49 = *(void *)(v32 + 464);
  uint64_t v52 = *(void *)(v32 + 288);
  uint64_t v53 = *(void *)(v32 + 304);

  OUTLINED_FUNCTION_42_0();
  v35();
  OUTLINED_FUNCTION_27_3();
  v36();
  uint64_t v37 = *(void (**)(void))(v34 + 8);
  OUTLINED_FUNCTION_56_1();
  v37();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v50, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_56_1();
  v37();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v54, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_31_2();
  v38();
  OUTLINED_FUNCTION_0_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_5_16();
  return v40(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v48,
           v49,
           v50,
           v51,
           v52,
           v53,
           v54,
           a30,
           a31,
           a32);
}

{
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  NSNumber v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  void (*v45)(void);
  uint64_t v46;
  uint64_t (*v47)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v33 = (void *)v32[76];
  uint64_t v34 = v32[75];
  uint64_t v61 = v32[59];
  uint64_t v62 = v32[72];
  os_log_type_t v59 = v32[58];
  BOOL v60 = v32[69];
  uint64_t v35 = v32[56];
  uint64_t v58 = v32[55];
  char v36 = v32[31];
  uint64_t v37 = v32[27];
  uint64_t v56 = v32[26];
  uint64_t v57 = v32[28];
  uint64_t v38 = (uint64_t *)v32[24];
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v55 = v33;
  v39.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  uint64_t v40 = SAPerson.init(contact:isMe:)(v33, v39.super.super.isa);
  uint64_t v41 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v37, 1, 1, v41);
  uint64_t v42 = type metadata accessor for AceOutput();
  uint64_t v43 = MEMORY[0x263F6FFF0];
  v38[3] = v42;
  v38[4] = v43;
  __swift_allocate_boxed_opaque_existential_1(v38);
  specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v36, v34, (uint64_t)v40, 1, v37);
  swift_bridgeObjectRelease();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v37, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_35_8();
  v44();
  uint64_t v45 = *(void (**)(void))(v35 + 8);
  OUTLINED_FUNCTION_27_3();
  v45();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v60, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_27_3();
  v45();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v62, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_5_16();
  return v47(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           v55,
           v56,
           v57,
           v58,
           v59,
           v60,
           v61,
           v62,
           a30,
           a31,
           a32);
}

{
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSNumber v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t (*v65)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v34 = (void *)v32[26];
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  uint64_t v35 = v34[10];
  char v36 = v34[11];
  __swift_project_boxed_opaque_existential_1(v34 + 7, v35);
  uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v38.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  uint64_t v39 = SAPerson.init(contact:isMe:)(v37, v38.super.super.isa);
  v32[94] = v39;
  if (specialized ContactsStrategy.isSmartEnabled.getter(v39))
  {
    uint64_t v40 = v32[45];
    uint64_t v41 = (uint64_t *)v32[46];
    uint64_t v42 = v32[44];
    uint64_t v43 = v32[41];
    uint64_t v44 = (uint64_t *)v32[42];
    uint64_t v72 = v32[40];
    v32[95] = IntentResolutionRecord.intent.getter();
    v32[96] = IntentResolutionRecord.intentResponse.getter();
    *uint64_t v41 = SpeakableString.print.getter();
    v41[1] = v45;
    (*(void (**)(uint64_t *, void, uint64_t))(v40 + 104))(v41, *MEMORY[0x263F6CF28], v42);
    uint64_t v46 = static ContactsDirectInvocations.confirm()();
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAStartLocalRequest);
    uint64_t v47 = SAClientBoundCommand.data.getter();
    uint64_t v49 = v48;

    uint64_t v50 = static ContactsDirectInvocations.deny()();
    uint64_t v51 = SAClientBoundCommand.data.getter();
    uint64_t v53 = v52;

    *uint64_t v44 = v47;
    v44[1] = v49;
    v44[2] = v51;
    v44[3] = v53;
    (*(void (**)(uint64_t *, void, uint64_t))(v43 + 104))(v44, *MEMORY[0x263F6CDC8], v72);
    type metadata accessor for ContactsLabelCATsModern();
    static CATOption.defaultMode.getter();
    v32[97] = CATWrapperSimple.__allocating_init(options:globals:)();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    v32[98] = v54;
    *uint64_t v54 = v55;
    v54[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    OUTLINED_FUNCTION_5_16();
    return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)();
  }
  else
  {
    OUTLINED_FUNCTION_14_12();
    OUTLINED_FUNCTION_48_2();
    uint64_t v58 = type metadata accessor for NLContextUpdate();
    os_log_type_t v59 = OUTLINED_FUNCTION_53_1(v58);
    BOOL v60 = MEMORY[0x263F6FFF0];
    v34[10] = v59;
    v34[11] = v60;
    __swift_allocate_boxed_opaque_existential_1(v34 + 7);
    OUTLINED_FUNCTION_34_9();
    swift_bridgeObjectRelease();

    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v36, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_35_8();
    v61();
    uint64_t v62 = OUTLINED_FUNCTION_56_2();
    v63(v62);
    OUTLINED_FUNCTION_0_10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_5_16();
    return v65(v64, v65, v66, v67, v68, v69, v70, v71, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32);
  }
}

{
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t (*v44)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  void (*v53)(uint64_t);
  NSObject *v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v35 = (uint64_t *)v32[49];
  char v36 = v32[47];
  if (__swift_getEnumTagSinglePayload(v36, 1, (uint64_t)v35) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v36, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    OUTLINED_FUNCTION_14_12();
    OUTLINED_FUNCTION_48_2();
    uint64_t v37 = type metadata accessor for NLContextUpdate();
    uint64_t v38 = OUTLINED_FUNCTION_53_1(v37);
    uint64_t v39 = MEMORY[0x263F6FFF0];
    v35[3] = v38;
    v35[4] = v39;
    __swift_allocate_boxed_opaque_existential_1(v35);
    OUTLINED_FUNCTION_34_9();
    swift_bridgeObjectRelease();

    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v33, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_35_8();
    v40();
    uint64_t v41 = OUTLINED_FUNCTION_56_2();
    v42(v41);
    OUTLINED_FUNCTION_0_10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_5_16();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = OUTLINED_FUNCTION_38_7();
    v53(v52);
    uint64_t v54 = Logger.logObject.getter();
    uint64_t v55 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_6_1(v55))
    {
      uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v56);
      OUTLINED_FUNCTION_19_1(&dword_22D49E000, v54, v57, "#ModifyContactAttributeConfirmIntentStrategy makePromptForConfirmation constructing SMART snippet");
      OUTLINED_FUNCTION_4_6();
    }
    uint64_t v58 = (void (*)(uint64_t, uint64_t, uint64_t))v32[90];
    os_log_type_t v59 = v32[62];
    BOOL v60 = v32[57];
    uint64_t v61 = v32[55];

    type metadata accessor for ModifyContactAttributeCATsModern();
    static CATOption.defaultMode.getter();
    v32[99] = CATWrapperSimple.__allocating_init(options:globals:)();
    v58(v59, v60, v61);
    __swift_storeEnumTagSinglePayload(v59, 0, 1, v61);
    uint64_t v62 = (void *)swift_task_alloc();
    v32[100] = v62;
    *uint64_t v62 = v32;
    v62[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    OUTLINED_FUNCTION_5_16();
    return ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:)();
  }
}

{
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void (*v35)(void);
  void (*v36)(void);
  void (*v37)(void);
  void (*v38)(void);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v33 = *(void **)(v32 + 752);
  uint64_t v53 = *(void *)(v32 + 456);
  uint64_t v50 = *(void *)(v32 + 408);
  uint64_t v51 = *(void *)(v32 + 440);
  uint64_t v49 = *(void *)(v32 + 392);
  uint64_t v34 = *(void *)(v32 + 296);
  uint64_t v54 = *(void *)(v32 + 304);
  uint64_t v52 = *(void *)(v32 + 288);
  uint64_t v48 = *(void *)(v32 + 240);

  OUTLINED_FUNCTION_27_3();
  v35();
  OUTLINED_FUNCTION_56_1();
  v36();
  OUTLINED_FUNCTION_31_2();
  v37();
  OUTLINED_FUNCTION_42_0();
  v38();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v54, v52);
  OUTLINED_FUNCTION_0_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_5_16();
  return v40(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v48,
           v49,
           v50,
           v51,
           v52,
           v53,
           v54,
           a30,
           a31,
           a32);
}

{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void (*v37)(void);
  void (*v38)(void);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_52_3();
  uint64_t v35 = *(void *)(v34 + 448);

  OUTLINED_FUNCTION_31_2();
  v37();
  uint64_t v38 = *(void (**)(void))(v35 + 8);
  OUTLINED_FUNCTION_23_3();
  v38();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v32, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_23_3();
  v38();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v33, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_18(*(void *)(v34 + 664));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_5_16();
  return v40(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_52_3();
  uint64_t v35 = *(void *)(v34 + 448);

  uint64_t v37 = *(void (**)(void))(v35 + 8);
  OUTLINED_FUNCTION_42_0();
  v37();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v32, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_42_0();
  v37();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v33, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_18(*(void *)(v34 + 712));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_5_16();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

{
  void *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  (*(void (**)(void, void))(v32[56] + 8))(v32[57], v32[55]);
  OUTLINED_FUNCTION_1_18(v32[93]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_5_16();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  void (*v37)(void);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_19_9();
  uint64_t v34 = *(void *)(v32 + 448);
  uint64_t v33 = *(void *)(v32 + 456);
  uint64_t v35 = *(void *)(v32 + 440);

  OUTLINED_FUNCTION_23_3();
  v36();
  OUTLINED_FUNCTION_31_2();
  v37();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  OUTLINED_FUNCTION_1_18(*(void *)(v32 + 808));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_5_16();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v7 = a3;
  v8.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  id v9 = SAPerson.init(contact:isMe:)(a3, v8.super.super.isa);
  static ContactsContextProvider.confirm(person:attribute:)((uint64_t)v9, 0, 1);

  uint64_t v10 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.isRequestForDifferentAttribute(_:intent:)(uint64_t a1, char *a2)
{
  uint64_t v126 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimitiveStringOperators?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_11_3();
  uint64_t v6 = v4 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v125 = (char *)v119 - v8;
  type metadata accessor for PrimitiveStringOperators();
  OUTLINED_FUNCTION_0_0();
  uint64_t v123 = v10;
  uint64_t v124 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_11_3();
  uint64_t v122 = v11 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v119 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v120 = (char *)v119 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v121 = (char *)v119 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v21 = OUTLINED_FUNCTION_10_0(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_15();
  unint64_t v31 = (char *)(v30 - v29);
  uint64_t v32 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v34 = v33;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_15();
  uint64_t v38 = v37 - v36;
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v27 + 88))(v31, v25) != *MEMORY[0x263F6FF80])
  {
    OUTLINED_FUNCTION_56_1();
    v40();
LABEL_15:
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    uint64_t v52 = (void *)OUTLINED_FUNCTION_21_0(v51, (uint64_t)static Logger.siriContacts);
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v53))
    {
      uint64_t v54 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v54);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v55, v56, "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute new input wasn't the expected task type, unable to determine difference");
      OUTLINED_FUNCTION_4_6();
    }

LABEL_20:
    char v57 = 0;
    return v57 & 1;
  }
  (*(void (**)(char *, uint64_t))(v27 + 96))(v31, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v38, v31, v32);
  USOParse.preferredUserDialogAct.getter(v24);
  uint64_t v39 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload(v24, 1, v39) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v24, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_12:
    long long v128 = 0u;
    long long v129 = 0u;
    goto LABEL_13;
  }
  uint64_t v41 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v24, v39);
  if (!v41) {
    goto LABEL_12;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((void *)&v129 + 1))
  {
LABEL_13:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)&v128, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v32);
    goto LABEL_15;
  }
  v119[2] = v38;
  v119[3] = v32;
  v119[1] = v34;
  uint64_t v42 = v126;
  uint64_t v43 = (char *)objc_msgSend(v126, sel_contactAttributeToModify);
  if (!UsoTask_update_common_Person.updateTaskType.getter())
  {
    uint64_t v125 = (char *)objc_msgSend(v42, sel_modifyOperation);
    uint64_t v59 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v42);
    uint64_t v48 = v60;
    swift_retain();
    OUTLINED_FUNCTION_43_3();
    swift_release();
    if ((void)v128
      && (dispatch thunk of UsoEntity_common_Person.structuredNameAsExpression.getter(),
          OUTLINED_FUNCTION_36_7(),
          dispatch thunk of CodeGenExpression.operand.getter(),
          swift_release(),
          v127)
      && (unint64_t v31 = (char *)dispatch thunk of UsoEntity_common_PersonName.nickName.getter(), v62 = v61, swift_release(), v62))
    {
      uint64_t v42 = v62;
    }
    else
    {
      OUTLINED_FUNCTION_43_3();
      if ((void)v128)
      {
        dispatch thunk of UsoEntity_common_Person.structuredName.getter();
        OUTLINED_FUNCTION_36_7();
        unint64_t v31 = (char *)dispatch thunk of UsoEntity_common_PersonName.nickName.getter();
        uint64_t v42 = v63;
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_42_6();
      }
    }
    swift_retain();
    OUTLINED_FUNCTION_43_3();
    swift_release();
    if ((void)v128)
    {
      uint64_t v50 = dispatch thunk of UsoEntity_common_Person.structuredName.getter();
      swift_release();
      if (v50)
      {
        dispatch thunk of UsoEntity_common_PersonName.nickNameAsExpression.getter();
        OUTLINED_FUNCTION_36_7();
        uint64_t v126 = v43;
        dispatch thunk of CodeGenExpression.operatorAsString.getter();
        uint64_t v67 = v66;
        swift_release();
        if (!v67)
        {
LABEL_35:
          uint64_t v50 = 0;
          char v65 = 1;
          uint64_t v64 = 6;
          uint64_t v43 = v126;
LABEL_39:
          uint64_t v46 = v59;
          id v45 = v125;
          goto LABEL_58;
        }
        PrimitiveStringOperators.init(rawValue:)();
        uint64_t v68 = v124;
        if (__swift_getEnumTagSinglePayload(v6, 1, v124) == 1)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for PrimitiveStringOperators?);
          goto LABEL_35;
        }
        uint64_t v102 = v6;
        uint64_t v103 = v123;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v16, v102, v68);
        uint64_t v104 = v122;
        (*(void (**)(uint64_t, char *, uint64_t))(v103 + 16))(v122, v16, v68);
        int v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 88))(v104, v68);
        BOOL v106 = v105 == *MEMORY[0x263F72AA8] || v105 == *MEMORY[0x263F72AB0];
        uint64_t v43 = v126;
        if (v106)
        {
          uint64_t v107 = OUTLINED_FUNCTION_55_1();
          v108(v107);
          char v65 = 0;
          uint64_t v50 = 3;
        }
        else
        {
          uint64_t v109 = v104;
          uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
          v110(v109, v68);
          uint64_t v111 = OUTLINED_FUNCTION_55_1();
          ((void (*)(uint64_t))v110)(v111);
          uint64_t v50 = 0;
          char v65 = 0;
        }
LABEL_38:
        uint64_t v64 = 6;
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    char v65 = 1;
    goto LABEL_38;
  }
  int updated = UsoTask_update_common_Person.updateTaskType.getter();
  id v45 = objc_msgSend(v42, sel_modifyOperation);
  if (updated != 1)
  {
    uint64_t v50 = 0;
    OUTLINED_FUNCTION_42_6();
    uint64_t v46 = 0;
    uint64_t v48 = 0;
    char v65 = 1;
    goto LABEL_58;
  }
  uint64_t v46 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v42);
  uint64_t v48 = v47;
  char v49 = UsoTask_update_common_Person.updateRelationshipInfoLocation.getter();
  if (v49 == 2)
  {
    uint64_t v50 = 0;
    OUTLINED_FUNCTION_42_6();
    goto LABEL_56;
  }
  if (v49)
  {
    swift_retain();
    OUTLINED_FUNCTION_43_3();
    swift_release();
    uint64_t v69 = (uint64_t)v125;
    if ((void)v128)
    {
      dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
      OUTLINED_FUNCTION_36_7();
      UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
      unint64_t v31 = v72;
      uint64_t v42 = v73;
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_42_6();
    }
    swift_retain();
    OUTLINED_FUNCTION_43_3();
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
    swift_release();
    uint64_t v69 = (uint64_t)v125;
    if ((void)v128)
    {
      dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
      OUTLINED_FUNCTION_36_7();
      UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
      unint64_t v31 = v70;
      uint64_t v42 = v71;
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_42_6();
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
  }
  swift_release();
  if (!(void)v128)
  {
    uint64_t v50 = 0;
    goto LABEL_56;
  }
  uint64_t v50 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
  swift_release();
  if (!v50)
  {
LABEL_56:
    char v65 = 1;
    goto LABEL_57;
  }
  dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter();
  OUTLINED_FUNCTION_36_7();
  swift_retain();
  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  if (!v74)
  {
LABEL_54:
    uint64_t v76 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
    uint64_t v50 = static ModifyOperation.from(_:)(v76, v77);
    swift_release_n();
    swift_bridgeObjectRelease();
    char v65 = 0;
LABEL_57:
    uint64_t v64 = 10;
    goto LABEL_58;
  }
  PrimitiveStringOperators.init(rawValue:)();
  uint64_t v75 = v124;
  if (__swift_getEnumTagSinglePayload(v69, 1, v124) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v69, &demangling cache variable for type metadata for PrimitiveStringOperators?);
    goto LABEL_54;
  }
  uint64_t v125 = v42;
  uint64_t v126 = v31;
  uint64_t v112 = v123;
  uint64_t v113 = v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v121, v69, v75);
  uint64_t v114 = v120;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v120, v113, v75);
  int v115 = (*(uint64_t (**)(char *, uint64_t))(v112 + 88))(v114, v75);
  if (v115 == *MEMORY[0x263F72AA8] || v115 == *MEMORY[0x263F72AB0])
  {
    swift_release_n();
    OUTLINED_FUNCTION_35_8();
    v117();
    char v65 = 0;
    uint64_t v50 = 3;
  }
  else
  {
    uint64_t v118 = *(void (**)(void))(v112 + 8);
    OUTLINED_FUNCTION_35_8();
    v118();
    swift_release_n();
    OUTLINED_FUNCTION_35_8();
    v118();
    uint64_t v50 = 0;
    char v65 = 0;
  }
  uint64_t v64 = 10;
  uint64_t v42 = v125;
  unint64_t v31 = v126;
LABEL_58:
  if (v43 != (char *)v64)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    unint64_t v81 = (void *)OUTLINED_FUNCTION_21_0(v80, (uint64_t)static Logger.siriContacts);
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_7_4(v82)) {
      goto LABEL_78;
    }
    uint64_t v83 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v83);
    uint64_t v86 = "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute found new attribute type different"
          " from current one, returning true";
    goto LABEL_77;
  }
  if (v45 == (id)v50) {
    char v65 = 1;
  }
  if ((v65 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    unint64_t v81 = (void *)OUTLINED_FUNCTION_21_0(v87, (uint64_t)static Logger.siriContacts);
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_7_4(v88)) {
      goto LABEL_78;
    }
    uint64_t v89 = (_WORD *)OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_32(v89);
    uint64_t v86 = "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute found new operation type different"
          " from current one, returning true";
LABEL_77:
    OUTLINED_FUNCTION_2_5(&dword_22D49E000, v84, v85, v86);
    OUTLINED_FUNCTION_4_6();
LABEL_78:
    swift_release();

    uint64_t v90 = OUTLINED_FUNCTION_20_11();
    v91(v90);
    char v57 = 1;
    return v57 & 1;
  }
  if (!v48)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    id v93 = (void *)OUTLINED_FUNCTION_21_0(v92, (uint64_t)static Logger.siriContacts);
    os_log_type_t v94 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_7_4(v94))
    {
      uint64_t v95 = (_WORD *)OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_32(v95);
      OUTLINED_FUNCTION_2_5(&dword_22D49E000, v96, v97, "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute there was no current attribute value, cannot evaluate difference, returning false");
      OUTLINED_FUNCTION_4_6();
    }
    swift_release();

    uint64_t v98 = OUTLINED_FUNCTION_20_11();
    v99(v98);
    goto LABEL_20;
  }
  if (v42)
  {
    if ((char *)v46 == v31 && v48 == v42) {
      char v79 = 1;
    }
    else {
      char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_release();
    char v79 = 0;
  }
  uint64_t v100 = OUTLINED_FUNCTION_20_11();
  v101(v100);
  swift_bridgeObjectRelease_n();
  char v57 = v79 ^ 1;
  return v57 & 1;
}

uint64_t type metadata accessor for ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeConfirmIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.actionForInput(_:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ModifyContactAttributeConfirmIntentStrategy.actionForInput(_:confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return ModifyContactAttributeConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66410](a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66418](a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66420](a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return MEMORY[0x270F66400](a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *uint64_t v10 = v5;
  v10[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  return MEMORY[0x270F66408](a1, a2, a3, v11, a5);
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(a1, (SEL *)&selRef_modifyNickName);
}

uint64_t partial apply for closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  return closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined bridged method (ob) of @objc ContactRelation.relationship.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(a1, (SEL *)&selRef_relationship);
}

uint64_t partial apply for closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  return closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  uint64_t v3 = v0[32];
  *(void *)(v1 - 112) = v0[35];
  *(void *)(v1 - 104) = v3;
  uint64_t v4 = v0[30];
  *(void *)(v1 - 96) = v0[31];
  *(void *)(v1 - 88) = v4;
  *(void *)(v1 - 80) = v0[27];
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_18@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 80) = a1;
  uint64_t v4 = v1[31];
  *(void *)(v2 - 112) = v1[32];
  *(void *)(v2 - 104) = v4;
  uint64_t v5 = v1[27];
  *(void *)(v2 - 96) = v1[30];
  *(void *)(v2 - 88) = v5;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_13()
{
  return *(void *)(v0 + 520);
}

id OUTLINED_FUNCTION_14_12()
{
  uint64_t v3 = (void *)v0[94];
  uint64_t v4 = v0[57];
  *(void *)(v1 - 88) = v0[55];
  *(void *)(v1 - 80) = v4;
  *(void *)(v1 - 96) = v0[28];
  return v3;
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_11()
{
  return *(void *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_22_9()
{
  return *(void *)(v0 + 304);
}

uint64_t OUTLINED_FUNCTION_24_7()
{
  return *(void *)(v0 + 192);
}

uint64_t OUTLINED_FUNCTION_30_5()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v2);
  return v1;
}

uint64_t OUTLINED_FUNCTION_33_5()
{
  return *(void *)(v0 + 248);
}

uint64_t OUTLINED_FUNCTION_34_9()
{
  return specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v0, v2, v3, 1, v1);
}

uint64_t OUTLINED_FUNCTION_36_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  return static ContactsContextProvider.confirm(person:attribute:)(v0, 6, 0);
}

id OUTLINED_FUNCTION_49_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_2(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_53_1(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return *(void *)(v0 - 80);
}

id Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21 = v20;
  if (a2)
  {
    uint64_t v28 = (void *)MEMORY[0x230F84F70]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = 0;
  }
  id v29 = objc_allocWithZone(v21);
  uint64_t v30 = static String.EMPTY.getter();
  unint64_t v31 = (void *)MEMORY[0x230F84F70](v30);
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v29, sel_initWithIdentifier_displayString_, v28, v31);

  id v33 = v32;
  if (a4)
  {
    uint64_t v34 = (void *)MEMORY[0x230F84F70](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = 0;
  }
  objc_msgSend(v32, sel_setGivenName_, v34);

  if (a6)
  {
    uint64_t v35 = (void *)MEMORY[0x230F84F70](a5, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = 0;
  }
  objc_msgSend(v32, sel_setMiddleName_, v35);

  if (a8)
  {
    uint64_t v36 = (void *)MEMORY[0x230F84F70](a7, a8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = 0;
  }
  objc_msgSend(v32, sel_setFamilyName_, v36);

  if (a10)
  {
    uint64_t v37 = (void *)MEMORY[0x230F84F70](a9, a10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = 0;
  }
  objc_msgSend(v32, sel_setNickName_, v37);

  if (a14)
  {
    uint64_t v39 = (void *)MEMORY[0x230F84F70](a13, a14);
    uint64_t v38 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = 0;
  }
  OUTLINED_FUNCTION_0_11(v38, sel_setNamePrefix_);

  if (a16)
  {
    uint64_t v41 = (void *)MEMORY[0x230F84F70](a15, a16);
    uint64_t v40 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = 0;
  }
  OUTLINED_FUNCTION_0_11(v40, sel_setNameSuffix_);

  if (a12)
  {
    uint64_t v43 = (void *)MEMORY[0x230F84F70](a11, a12);
    uint64_t v42 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = 0;
  }
  OUTLINED_FUNCTION_0_11(v42, sel_setFullName_);

  if (a18)
  {
    id v45 = (void *)MEMORY[0x230F84F70](a17, a18);
    uint64_t v44 = swift_bridgeObjectRelease();
  }
  else
  {
    id v45 = 0;
  }
  OUTLINED_FUNCTION_0_11(v44, sel_setPhoneNumber_);

  if (a20)
  {
    uint64_t v46 = (void *)MEMORY[0x230F84F70](a19, a20);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = 0;
  }
  objc_msgSend(v32, sel_setEmailAddress_, v46);

  return v32;
}

id OUTLINED_FUNCTION_0_11(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t Views.buildViews(for:isMe:mockGlobals:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  v53[0] = a1;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v53 - v10;
  uint64_t v12 = v2 + 1;
  __swift_project_boxed_opaque_existential_1(v2 + 1, v2[4]);
  if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0
    || (uint64_t v13 = v2[4],
        __swift_project_boxed_opaque_existential_1(v12, v3[4]),
        (DeviceState.supportsCompactView.getter(v13) & 1) == 0))
  {
    __swift_project_boxed_opaque_existential_1(v12, v3[4]);
    if (dispatch thunk of DeviceState.isWatch.getter())
    {
      uint64_t v28 = *v3;
      outlined init with copy of DeviceState((uint64_t)v12, (uint64_t)v56);
      BOOL v60 = &type metadata for InstalledAppsProvider;
      uint64_t v61 = &protocol witness table for InstalledAppsProvider;
      uint64_t v55 = v28;
      __swift_project_boxed_opaque_existential_1(v12, v3[4]);
      swift_retain();
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v29 = Locale.identifier.getter();
      OUTLINED_FUNCTION_1_19(v29, v30);
      uint64_t v31 = OUTLINED_FUNCTION_0_12();
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      unint64_t v34 = WatchViews.buildGetSnippet(contact:localeString:)(v53[0], v31, v33);
      swift_bridgeObjectRelease();
      outlined destroy of WatchViews((uint64_t)&v55);
      if (v34 >> 62)
      {
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAAceView);
        swift_bridgeObjectRetain();
        uint64_t v21 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAAceView);
        uint64_t v21 = v34;
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.siriContacts);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v25, v36)) {
        goto LABEL_33;
      }
      uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_20();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_22D49E000, v25, v36, "#Views Constructed snippet for Watch.", v37, 2u);
      uint64_t v38 = v37;
      goto LABEL_32;
    }
    __swift_project_boxed_opaque_existential_1(v12, v3[4]);
    char v39 = dispatch thunk of DeviceState.isMac.getter();
    outlined init with copy of Views((uint64_t)v3, (uint64_t)&v55);
    if (v39)
    {
      outlined destroy of Views((uint64_t)&v55);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v56, (uint64_t)v57);
      char v40 = dispatch thunk of DeviceState.isXRDevice.getter();
      outlined destroy of Views((uint64_t)&v55);
      if ((v40 & 1) == 0)
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.siriContacts);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v25, v51))
        {
          uint64_t v21 = MEMORY[0x263F8EE78];
          goto LABEL_33;
        }
        id v45 = (uint8_t *)OUTLINED_FUNCTION_20();
        *(_WORD *)id v45 = 0;
        _os_log_impl(&dword_22D49E000, v25, v51, "#Views Skipping snippet for device.", v45, 2u);
        uint64_t v21 = MEMORY[0x263F8EE78];
        goto LABEL_31;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_22D59FB50;
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
    id v42 = objc_allocWithZone(NSNumber);
    *(void *)(v41 + 32) = SAABPersonSnippet.init(_:isMe:)(v53[0], objc_msgSend(v42, sel_initWithBool_, a2 & 1));
    uint64_t v54 = v41;
    specialized Array._endMutation()();
    uint64_t v21 = v54;
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.siriContacts);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v44)) {
      goto LABEL_33;
    }
    id v45 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)id v45 = 0;
    _os_log_impl(&dword_22D49E000, v25, v44, "#Views Constructed snippet for Mac or XR.", v45, 2u);
LABEL_31:
    uint64_t v38 = v45;
LABEL_32:
    MEMORY[0x230F85DE0](v38, -1, -1);
LABEL_33:

    return v21;
  }
  uint64_t v14 = *v3;
  char v57 = &type metadata for InstalledAppsProvider;
  uint64_t v58 = &protocol witness table for InstalledAppsProvider;
  uint64_t v55 = v14;
  uint64_t v59 = 0;
  type metadata accessor for ContactAttribute();
  swift_retain();
  id v15 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(9, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1(v12, v3[4]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v16 = Locale.identifier.getter();
  OUTLINED_FUNCTION_1_19(v16, v17);
  OUTLINED_FUNCTION_0_12();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  uint64_t v19 = v18;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)&v55);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_22D59FB50;
    *(void *)(v20 + 32) = v19;
    uint64_t v55 = v20;
    specialized Array._endMutation()();
    uint64_t v21 = v55;
    uint64_t v22 = one-time initialization token for siriContacts;
    id v23 = v19;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      return v21;
    }
    uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_22D49E000, v25, v26, "#Views Constructed snippet for iOS VF/VO.", v27, 2u);
    MEMORY[0x230F85DE0](v27, -1, -1);

    goto LABEL_33;
  }
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.siriContacts);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    char v49 = (uint8_t *)OUTLINED_FUNCTION_20();
    *(_WORD *)char v49 = 0;
    _os_log_impl(&dword_22D49E000, v47, v48, "#Views Skipped snippet for iOS VF/VO.", v49, 2u);
    MEMORY[0x230F85DE0](v49, -1, -1);
  }

  return MEMORY[0x263F8EE78];
}

uint64_t outlined init with copy of Views(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Views.init(deviceState:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v4 - 8);
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  *a2 = CATWrapper.__allocating_init(options:globals:)();
  return outlined init with take of DeviceState(a1, (uint64_t)(a2 + 1));
}

uint64_t outlined destroy of WatchViews(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Views(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm(v1);
}

uint64_t initializeWithCopy for Views(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for Views(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Views(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Views(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Views(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Views()
{
  return &type metadata for Views;
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

unint64_t OUTLINED_FUNCTION_1_19(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 184) = a1;
  *(void *)(v2 - 176) = a2;
  *(void *)(v2 - 200) = 45;
  *(void *)(v2 - 192) = 0xE100000000000000;
  *(void *)(v2 - 216) = 95;
  *(void *)(v2 - 208) = 0xE100000000000000;
  return lazy protocol witness table accessor for type String and conformance String();
}

id SiriMatch.__allocating_init(identifier:fullName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  uint64_t v10 = (void *)MEMORY[0x230F84F70](a3, a4);
  id v11 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(a1, a2, (uint64_t)v10, v9);

  outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(a3, a4, v11);
  return v11;
}

void outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setFullName_, v4);
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForWatch()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for Watch, an unsupported idiom.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForMac()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22D49E000, v3, v4, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet with all display properties for macOS.", v5, 2u);
    MEMORY[0x230F85DE0](v5, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22D59FB50;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  uint64_t v7 = *v1;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v8 = v7;
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  outlined init with copy of AppUtil((uint64_t)(v1 + 12), (uint64_t)v11);
  *(void *)(v6 + 32) = SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v8, 0, isa, (uint64_t)v11);
  v11[0] = v6;
  specialized Array._endMutation()();
  return v11[0];
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForCarPlay()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for CarPlay.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForCarDND()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for CarDND.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForIOS()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_22D49E000, v8, v9, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet-like CardSnippet for iOS.", v10, 2u);
    MEMORY[0x230F85DE0](v10, -1, -1);
  }

  uint64_t v11 = *(void *)(v1 + 8);
  if (v11 != 6)
  {
    if (v11 == 10)
    {
      uint64_t v12 = *(void *)(v1 + 16);
      if ((unint64_t)(v12 - 1) < 2)
      {
        uint64_t v13 = *(void *)(v1 + 136);
        OUTLINED_FUNCTION_0_13();
        v70[0] = v13;
        uint64_t v71 = 0;
        uint64_t v14 = *(void *)(v1 + 24);
        id v15 = *(void **)(v1 + 32);
        uint64_t v16 = *(void **)v1;
        swift_retain();
        uint64_t v17 = CNContact.formattedFullName.getter();
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)(v1 + 40);
        uint64_t v21 = *(void **)(v1 + 48);
        id v22 = objc_msgSend(v16, sel_identifier);
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        v26.value._uint64_t countAndFlagsBits = v14;
        v26.value._object = v15;
        v27._uint64_t countAndFlagsBits = v17;
        v27._object = v19;
        v28.value._uint64_t countAndFlagsBits = v20;
        v28.value._object = v21;
        v29._uint64_t countAndFlagsBits = v23;
        v29._object = v25;
        unint64_t rawValue = (unint64_t)CompactViews.buildCompactSetRelationshipView(relatedContactName:meCardName:relationship:meCardContactID:)(v26, v27, v28, v29)._0._rawValue;
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        outlined destroy of CompactViews((uint64_t)v70);
LABEL_19:
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_22D59FB50;
        if (rawValue >> 62)
        {
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
          swift_bridgeObjectRetain();
          _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFCardSection);
        }
        swift_bridgeObjectRelease();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SACardSnippet);
        AppUtil.sashBundleId.getter();
        uint64_t v67 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v66 + 32) = v67;
        v70[0] = v66;
        goto LABEL_22;
      }
      if (v12 == 3)
      {
        OUTLINED_FUNCTION_0_13();
        type metadata accessor for ContactsLabelCATs();
        static CATOption.defaultMode.getter();
        v70[0] = CATWrapper.__allocating_init(options:globals:)();
        uint64_t v71 = 0;
        uint64_t v48 = *(void *)(v1 + 24);
        char v49 = *(void **)(v1 + 32);
        uint64_t v50 = *(void **)v1;
        uint64_t v51 = CNContact.formattedFullName.getter();
        os_log_type_t v53 = v52;
        id v54 = objc_msgSend(v50, sel_identifier);
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v57 = v56;

        v58.value._uint64_t countAndFlagsBits = v48;
        v58.value._object = v49;
        v59._uint64_t countAndFlagsBits = v51;
        v59._object = v53;
        v60._uint64_t countAndFlagsBits = v55;
        v60._object = v57;
        unint64_t rawValue = (unint64_t)CompactViews.buildCompactForgetRelationshipView(relatedContactName:meCardName:meCardContactID:)(v58, v59, v60)._0._rawValue;
        goto LABEL_13;
      }
    }
    goto LABEL_18;
  }
  uint64_t v31 = *(void *)(v1 + 16);
  if ((unint64_t)(v31 - 1) < 2)
  {
    uint64_t v32 = *(void **)v1;
    uint64_t v33 = *(void *)(v1 + 136);
    OUTLINED_FUNCTION_0_13();
    v70[0] = v33;
    uint64_t v71 = 0;
    swift_retain();
    id v34 = objc_msgSend(v32, sel_nickname);
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    uint64_t v38 = CNContact.formattedFullName.getter();
    char v40 = v39;
    id v41 = objc_msgSend(v32, sel_identifier);
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v44 = v43;

    v45._uint64_t countAndFlagsBits = v35;
    v45._object = v37;
    v46._uint64_t countAndFlagsBits = v38;
    v46._object = v40;
    v47._uint64_t countAndFlagsBits = v42;
    v47._object = v44;
    unint64_t rawValue = (unint64_t)CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(v45, v46, v47)._0._rawValue;
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v31 != 3)
  {
LABEL_18:
    unint64_t rawValue = MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_0_13();
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  v70[0] = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v71 = 0;
  type metadata accessor for ContactAttribute();
  id v61 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(9, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), *(void *)(v1 + 80));
  dispatch thunk of DeviceState.siriLocale.getter();
  v69[5] = Locale.identifier.getter();
  v69[6] = v62;
  v69[3] = 45;
  v69[4] = 0xE100000000000000;
  v69[1] = 95;
  v69[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  uint64_t v64 = v63;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)v70);
  if (v64)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_22D59FB50;
    *(void *)(v65 + 32) = v64;
    v70[0] = v65;
LABEL_22:
    specialized Array._endMutation()();
    return v70[0];
  }
  return MEMORY[0x263F8EE78];
}

uint64_t destroy for ModifyContactAttributeViewBuilder(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 7));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 12));
  return swift_release();
}

uint64_t initializeWithCopy for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = a1 + 56;
  uint64_t v8 = a2 + 56;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  long long v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 96, a2 + 96);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy144_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifyContactAttributeViewBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifyContactAttributeViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyContactAttributeViewBuilder()
{
  return &type metadata for ModifyContactAttributeViewBuilder;
}

uint64_t OUTLINED_FUNCTION_0_13()
{
  return outlined init with copy of AppUtil(v0 + 96, v1 - 128);
}

BOOL INIntentResolutionResult.isGetContactNeedsValue.getter()
{
  return objc_msgSend(v0, sel_unsupportedReason) != (id)1 && objc_msgSend(v0, sel_unsupportedReason) != (id)2;
}

BOOL INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter()
{
  return SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)objc_msgSend(v0, sel_unsupportedReason)).value == SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation;
}

BOOL INIntentResolutionResult.isModifyContactAttributeNeedsValue.getter()
{
  type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
  if (swift_dynamicCastClass())
  {
    if (OUTLINED_FUNCTION_0_14() == (id)1) {
      return 0;
    }
    goto LABEL_6;
  }
  type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult();
  uint64_t v0 = swift_dynamicCastClass();
  id v1 = OUTLINED_FUNCTION_0_14();
  if (!v0)
  {
    if (v1 == (id)1 || OUTLINED_FUNCTION_0_14() == (id)2) {
      return 0;
    }
    uint64_t v2 = 3;
    return OUTLINED_FUNCTION_0_14() != (id)v2;
  }
  if (v1 != (id)1)
  {
LABEL_6:
    uint64_t v2 = 2;
    return OUTLINED_FUNCTION_0_14() != (id)v2;
  }
  return 0;
}

id OUTLINED_FUNCTION_0_14()
{
  return [v0 (SEL)(v1 + 3990)];
}

uint64_t static ContactsLabelCATContainer.modifyConfirmationCATs(from:)()
{
  OUTLINED_FUNCTION_4();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  v0[4] = v3;
  OUTLINED_FUNCTION_1(v3);
  v0[5] = v4;
  v0[6] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
  return ContactsLabelCATsModern.cancelAsLabel()();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_22_10();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {

    v5[9] = MEMORY[0x263F8EE80];
    long long v9 = (void *)swift_task_alloc();
    v5[10] = v9;
    *long long v9 = v7;
    v9[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
    return ContactsLabelCATsModern.saveAsLabel()();
  }
  else
  {
    v5[8] = v3;
    OUTLINED_FUNCTION_8_0();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F6CE00], v3);
  *(unsigned char *)(v0 + 97) = 2;
  uint64_t v4 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x263F8EE80];
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v6, v1, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  *(void *)(v0 + 72) = v7;
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v9;
  *long long v9 = v0;
  v9[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
  return ContactsLabelCATsModern.saveAsLabel()();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_22_10();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0) {

  }
  else {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F6CDE8], v3);
  *(unsigned char *)(v0 + 96) = 12;
  uint64_t v4 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v6 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v6, v1, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  Dictionary.init(dictionaryLiteral:)();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v8();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  Dictionary.init(dictionaryLiteral:)();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = static ContactsLabelCATContainer.modifyIntentHandledCATs(from:);
  return ContactsLabelCATsModern.savedAsLabel()();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_37();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_22_10();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_3();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0) {

  }
  else {
    *(void *)(v5 + 32) = v3;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactsLabelCATContainer.LabelType, String)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactsLabelCATContainer.LabelType, String))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22D59FD50;
  uint64_t v4 = v3 + v2;
  uint64_t v5 = (uint64_t *)(v4 + v1[14]);
  uint64_t v6 = *MEMORY[0x263F6CDF0];
  uint64_t v7 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v4, v6, v7);
  *(unsigned char *)(v0 + 40) = 13;
  *uint64_t v5 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v5[1] = v8;
  lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType();
  Dictionary.init(dictionaryLiteral:)();
  Dictionary.init(dictionaryLiteral:)();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  swift_release();
  OUTLINED_FUNCTION_5();
  return v9();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  type metadata accessor for ContactsLabelCATContainer.LabelType();
  lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType();
  Dictionary.init(dictionaryLiteral:)();
  Dictionary.init(dictionaryLiteral:)();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  OUTLINED_FUNCTION_5();
  return v0();
}

uint64_t static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)()
{
  OUTLINED_FUNCTION_4();
  v0[17] = v1;
  v0[18] = v2;
  v0[15] = v3;
  v0[16] = v4;
  v0[13] = v5;
  v0[14] = v6;
  v0[12] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v0[19] = OUTLINED_FUNCTION_31();
  v0[20] = swift_task_alloc();
  type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v0[21] = OUTLINED_FUNCTION_31();
  v0[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v0[23] = v8;
  OUTLINED_FUNCTION_1(v8);
  v0[24] = v9;
  v0[25] = OUTLINED_FUNCTION_31();
  v0[26] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContactsSnippetFlowState();
  v0[27] = v10;
  OUTLINED_FUNCTION_1(v10);
  v0[28] = v11;
  v0[29] = OUTLINED_FUNCTION_31();
  v0[30] = swift_task_alloc();
  v0[31] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ContactsLabelCATContainer();
  v0[32] = v12;
  OUTLINED_FUNCTION_1(v12);
  v0[33] = v13;
  v0[34] = OUTLINED_FUNCTION_31();
  v0[35] = swift_task_alloc();
  v0[36] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  id v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  id v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t);
  id v88;
  id v89;
  uint64_t v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  void (*v93)(uint64_t);
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t (*v105)();
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)();
  void *v110;
  id v111;

  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 296) = v7;
  *(void *)(v0 + 304) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v6, v4);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  uint64_t v8 = (void *)(v5 + 88);
  uint64_t v10 = v9(v3, v4);
  if (v10 == *MEMORY[0x263F6CDC8])
  {
    uint64_t v11 = *(uint64_t **)(v0 + 248);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 224) + 96))(v11, *(void *)(v0 + 216));
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = v11[2];
    uint64_t v15 = v11[3];
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v14, v15);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v16;
    *uint64_t v16 = v0;
    v16[1] = static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:);
    OUTLINED_FUNCTION_4_3();
    return static ContactsLabelCATContainer.modifyConfirmationCATs(from:)();
  }
  if (v10 == *MEMORY[0x263F6CDC0])
  {
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v19;
    *uint64_t v19 = v0;
    v19[1] = static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:);
    OUTLINED_FUNCTION_4_3();
    return static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)();
  }
  if (v10 == *MEMORY[0x263F6CDB8])
  {
    static ContactsLabelCATContainer.empty.getter();
    uint64_t v21 = objc_msgSend(*(id *)(v0 + 104), sel_contactAttributeToModify);
    if (v21 == (id)6)
    {
      Swift::String v29 = OUTLINED_FUNCTION_2_22(*(void **)(v0 + 120));
      if (v30(v29))
      {
        OUTLINED_FUNCTION_3_15();
        *(void *)(v0 + 40) = &type metadata for InstalledAppsProvider;
        *(void *)(v0 + 48) = &protocol witness table for InstalledAppsProvider;
        uint64_t v32 = objc_msgSend(v31, sel_identifier);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        AppUtil.buildPunchoutFor(contactIdentifier:)();
        id v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v35 = outlined destroy of AppUtil(v3);
        uint64_t v43 = OUTLINED_FUNCTION_16_11(v35, v36, v37, v38, v39, v40, v41, v42, v97, v98, v100, v101, v102);
        v44(v43);
        ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v103, sel_modifyOperation), v104);
        type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
        Swift::String v45 = v1;
        CodableContact.init(wrappedValue:)();
        v109();
        Swift::String v46 = OUTLINED_FUNCTION_20_12();
        v47(v46);
        if (v34)
        {
          type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
          uint64_t v48 = v34;
          SAClientBoundCommand.data.getter();
        }
        OUTLINED_FUNCTION_5_17();

        uint64_t v92 = OUTLINED_FUNCTION_26_8();
        v93(v92);
        uint64_t v51 = type metadata accessor for ModifyContactAttributeSnippetModel();
        uint64_t v52 = v2;
        goto LABEL_43;
      }
    }
    else if (v21 == (id)10)
    {
      id v22 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(*(void **)(v0 + 104));
      if (v22)
      {
        OUTLINED_FUNCTION_30_2(v22);
        uint64_t v23 = v4 ? (id)MEMORY[0x230F854E0](0, v3) : *(id *)(v3 + 32);
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        outlined bridged method (ob) of @objc INObject.identifier.getter(v24);
        if (v25)
        {
          OUTLINED_FUNCTION_15_14();
          Swift::String_optional v26 = OUTLINED_FUNCTION_13_15();
          Swift::String v27 = ((uint64_t (*)(uint64_t))v1)(v26);
          if (v8)
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v96 = (void *)v27;
            swift_bridgeObjectRelease();
            if (v96)
            {
              os_log_type_t v99 = v96;
LABEL_35:
              uint64_t v67 = *(void **)(v0 + 120);
              *(void *)(v0 + 80) = &type metadata for InstalledAppsProvider;
              *(void *)(v0 + 88) = &protocol witness table for InstalledAppsProvider;
              uint64_t v68 = OUTLINED_FUNCTION_2_22(v67);
              uint64_t v70 = (void *)v69(v68);
              uint64_t v71 = v70;
              if (v70)
              {
                uint64_t v72 = objc_msgSend(v70, sel_identifier);

                static String._unconditionallyBridgeFromObjectiveC(_:)();
              }
              OUTLINED_FUNCTION_4_21();
              uint64_t v74 = v73;
              swift_bridgeObjectRelease();
              AppUtil.buildPunchoutFor(contactIdentifier:)();
              uint64_t v110 = v75;
              swift_bridgeObjectRelease();
              uint64_t v76 = OUTLINED_FUNCTION_19_10();
              v77(v76);
              ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v1, sel_modifyOperation), v100);
              type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
              uint64_t v111 = v99;
              CodableContact.init(wrappedValue:)();
              uint64_t v78 = v105();
              uint64_t v86 = OUTLINED_FUNCTION_25_9(v78, v79, v80, v81, v82, v83, v84, v85, v97, (uint64_t)v99, v100, v101, v102, (uint64_t)v103, v104, (uint64_t)v105, v106, v107, v108);
              v87(v86);
              if (v74)
              {
                type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
                os_log_type_t v88 = v74;
                SAClientBoundCommand.data.getter();
              }
              if (v110)
              {
                type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
                uint64_t v89 = v110;
                SAClientBoundCommand.data.getter();
              }
              OUTLINED_FUNCTION_6_20();

              outlined destroy of AppUtil(v0 + 56);
              uint64_t v90 = OUTLINED_FUNCTION_21_6();
              v91(v90);
              uint64_t v51 = type metadata accessor for ModifyContactAttributeSnippetModel();
              uint64_t v52 = (uint64_t)v74;
LABEL_43:
              os_log_type_t v53 = 0;
LABEL_44:
              __swift_storeEnumTagSinglePayload(v52, v53, 1, v51);
              OUTLINED_FUNCTION_11_14();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              OUTLINED_FUNCTION_5();
              OUTLINED_FUNCTION_4_3();
              __asm { BRAA            X1, X16 }
            }
          }
        }
      }
      id v54 = *(void **)(v0 + 112);
      if (v54
        && (uint64_t v55 = objc_msgSend(v54, sel_updatedRelationship)) != 0
        && (uint64_t v56 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v55), v57))
      {
        Swift::String_optional v58 = v56;
        Swift::String v59 = v57;
        type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
        Swift::String v60 = @nonobjc CNContact.init(displayName:handle:)(v58, v59, MEMORY[0x263F8EE78]);
      }
      else
      {
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        id v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)static Logger.siriContacts);
        uint64_t v62 = Logger.logObject.getter();
        uint64_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (_WORD *)swift_slowAlloc();
          *uint64_t v64 = 0;
          OUTLINED_FUNCTION_8_1(&dword_22D49E000, v65, v66, "ModifyContactAttributeSnippetModel couldn't fetch related contact for display, falling back on empty one");
          MEMORY[0x230F85DE0](v64, -1, -1);
        }

        Swift::String v60 = objc_msgSend(self, sel_emptyContact);
      }
      os_log_type_t v99 = v60;
      goto LABEL_35;
    }
    char v49 = OUTLINED_FUNCTION_18_12();
    v50(v49);
    uint64_t v51 = type metadata accessor for ModifyContactAttributeSnippetModel();
    uint64_t v52 = v3;
    os_log_type_t v53 = 1;
    goto LABEL_44;
  }
  OUTLINED_FUNCTION_4_3();
  return MEMORY[0x270F9F7C8]();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

void static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)()
{
  id v6 = objc_msgSend(*(id *)(v3 + 104), sel_contactAttributeToModify);
  if (v6 == (id)6)
  {
    uint64_t v13 = OUTLINED_FUNCTION_2_22(*(void **)(v3 + 120));
    if (v14(v13))
    {
      OUTLINED_FUNCTION_3_15();
      *(void *)(v3 + 40) = &type metadata for InstalledAppsProvider;
      *(void *)(v3 + 48) = &protocol witness table for InstalledAppsProvider;
      id v16 = objc_msgSend(v15, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      AppUtil.buildPunchoutFor(contactIdentifier:)();
      uint64_t v18 = v17;
      swift_bridgeObjectRelease();
      uint64_t v19 = outlined destroy of AppUtil(v1);
      uint64_t v27 = OUTLINED_FUNCTION_16_11(v19, v20, v21, v22, v23, v24, v25, v26, v81, v82, v84, v85, v86);
      v28(v27);
      ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v87, sel_modifyOperation), v88);
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      id v29 = v4;
      CodableContact.init(wrappedValue:)();
      v93();
      uint64_t v30 = OUTLINED_FUNCTION_20_12();
      v31(v30);
      if (v18)
      {
        type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
        id v32 = v18;
        SAClientBoundCommand.data.getter();
      }
      OUTLINED_FUNCTION_5_17();

      uint64_t v76 = OUTLINED_FUNCTION_26_8();
      v77(v76);
      uint64_t v35 = type metadata accessor for ModifyContactAttributeSnippetModel();
      uint64_t v36 = v5;
      goto LABEL_31;
    }
  }
  else if (v6 == (id)10)
  {
    uint64_t v7 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(*(void **)(v3 + 104));
    if (v7)
    {
      OUTLINED_FUNCTION_30_2(v7);
      id v8 = v0 ? (id)MEMORY[0x230F854E0](0, v1) : *(id *)(v1 + 32);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      outlined bridged method (ob) of @objc INObject.identifier.getter(v9);
      if (v10)
      {
        OUTLINED_FUNCTION_15_14();
        uint64_t v11 = OUTLINED_FUNCTION_13_15();
        uint64_t v12 = ((uint64_t (*)(uint64_t))v4)(v11);
        if (v2)
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v80 = (void *)v12;
          swift_bridgeObjectRelease();
          if (v80)
          {
            uint64_t v83 = v80;
LABEL_23:
            uint64_t v51 = *(void **)(v3 + 120);
            *(void *)(v3 + 80) = &type metadata for InstalledAppsProvider;
            *(void *)(v3 + 88) = &protocol witness table for InstalledAppsProvider;
            uint64_t v52 = OUTLINED_FUNCTION_2_22(v51);
            id v54 = (void *)v53(v52);
            uint64_t v55 = v54;
            if (v54)
            {
              id v56 = objc_msgSend(v54, sel_identifier);

              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
            OUTLINED_FUNCTION_4_21();
            Swift::String_optional v58 = v57;
            swift_bridgeObjectRelease();
            AppUtil.buildPunchoutFor(contactIdentifier:)();
            os_log_type_t v94 = v59;
            swift_bridgeObjectRelease();
            uint64_t v60 = OUTLINED_FUNCTION_19_10();
            v61(v60);
            ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v4, sel_modifyOperation), v84);
            type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            id v95 = v83;
            CodableContact.init(wrappedValue:)();
            uint64_t v62 = v89();
            uint64_t v70 = OUTLINED_FUNCTION_25_9(v62, v63, v64, v65, v66, v67, v68, v69, v81, (uint64_t)v83, v84, v85, v86, (uint64_t)v87, v88, (uint64_t)v89, v90, v91, v92);
            v71(v70);
            if (v58)
            {
              type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              id v72 = v58;
              SAClientBoundCommand.data.getter();
            }
            if (v94)
            {
              type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              id v73 = v94;
              SAClientBoundCommand.data.getter();
            }
            OUTLINED_FUNCTION_6_20();

            outlined destroy of AppUtil(v3 + 56);
            uint64_t v74 = OUTLINED_FUNCTION_21_6();
            v75(v74);
            uint64_t v35 = type metadata accessor for ModifyContactAttributeSnippetModel();
            uint64_t v36 = (uint64_t)v58;
LABEL_31:
            uint64_t v37 = 0;
LABEL_32:
            __swift_storeEnumTagSinglePayload(v36, v37, 1, v35);
            OUTLINED_FUNCTION_11_14();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            OUTLINED_FUNCTION_5();
            OUTLINED_FUNCTION_4_3();
            __asm { BRAA            X1, X16 }
          }
        }
      }
    }
    uint64_t v38 = *(void **)(v3 + 112);
    if (v38
      && (id v39 = objc_msgSend(v38, sel_updatedRelationship)) != 0
      && (uint64_t v40 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v39), v41))
    {
      uint64_t v42 = v40;
      uint64_t v43 = v41;
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      id v44 = @nonobjc CNContact.init(displayName:handle:)(v42, v43, MEMORY[0x263F8EE78]);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.siriContacts);
      Swift::String v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (_WORD *)swift_slowAlloc();
        *uint64_t v48 = 0;
        OUTLINED_FUNCTION_8_1(&dword_22D49E000, v49, v50, "ModifyContactAttributeSnippetModel couldn't fetch related contact for display, falling back on empty one");
        MEMORY[0x230F85DE0](v48, -1, -1);
      }

      id v44 = objc_msgSend(self, sel_emptyContact);
    }
    uint64_t v83 = v44;
    goto LABEL_23;
  }
  uint64_t v33 = OUTLINED_FUNCTION_18_12();
  v34(v33);
  uint64_t v35 = type metadata accessor for ModifyContactAttributeSnippetModel();
  uint64_t v36 = v1;
  uint64_t v37 = 1;
  goto LABEL_32;
}

id @nonobjc CNContact.init(displayName:handle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v4 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    v5.super.Class isa = 0;
    goto LABEL_6;
  }
  uint64_t v4 = (void *)MEMORY[0x230F84F70]();
  swift_bridgeObjectRelease();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_contactWithDisplayName_handleStrings_, v4, v5.super.isa);

  return v6;
}

uint64_t ModifyOperation.asSnippetModelModificationType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CF48];
      break;
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CF30];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CF40];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CF38];
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x22D510780);
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_12_15(a1, a2, a3);
  OUTLINED_FUNCTION_8_15();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
  if (!OUTLINED_FUNCTION_28_7()) {
    goto LABEL_5;
  }
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if (v11)
  {
    uint64_t v15 = v14[7];

    *(void *)(v15 + 8 * v10) = v3;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v5, v4, v3, v14);
    swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_12_15(a1, a2, a3);
  OUTLINED_FUNCTION_8_15();
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!OUTLINED_FUNCTION_28_7()) {
    goto LABEL_5;
  }
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_13:
    __n128 result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if (v11)
  {
    uint64_t v15 = (_OWORD *)(v14[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
    return outlined init with take of Any(v3, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v5, v4, v3, v14);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_8_15();
  if (v11)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8)) {
    goto LABEL_5;
  }
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    __n128 result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v14;
LABEL_5:
  id v16 = (void *)*v4;
  if (v13)
  {
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v19);
    return specialized _NativeDictionary._insert(at:key:value:)(v12, (uint64_t)v19, a1, v16);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v26 = a2;
  uint64_t v9 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v13 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_8_15();
  if (v16)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v14;
  char v18 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ContactsLabelCATContainer.LabelType, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = (void *)*v5;
  if (v18)
  {
    uint64_t v22 = (uint64_t *)(v21[7] + 16 * v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v24 = v26;
    *uint64_t v22 = a1;
    v22[1] = v24;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return specialized _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v12, a1, v26, v21);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  Swift::Int v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_relatedFullName);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType)
  {
    type metadata accessor for ContactsLabelCATContainer.LabelType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_22(void *a1)
{
  uint64_t v1 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

void OUTLINED_FUNCTION_3_15()
{
  uint64_t v2 = *(void *)(v0 + 288);
  *(void *)(v1 - 96) = *(void *)(v0 + 272);
  *(void *)(v1 - 88) = v2;
}

void OUTLINED_FUNCTION_4_21()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_5_17()
{
  uint64_t v5 = v2[34];
  uint64_t v6 = v2[29];
  uint64_t v7 = v2[25];
  uint64_t v8 = v2[21];
  uint64_t v9 = v2[19];
  return MEMORY[0x270F646B8](v7, v8, v9, v6, v5, v0, v1, 0, v3);
}

uint64_t OUTLINED_FUNCTION_6_20()
{
  uint64_t v6 = v2[35];
  uint64_t v7 = v2[30];
  uint64_t v8 = v2[26];
  uint64_t v9 = v2[22];
  uint64_t v10 = v2[20];
  return MEMORY[0x270F646B8](v8, v9, v10, v7, v6, v3, v4, v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_14()
{
  uint64_t v3 = *(void *)(v0 + 152);
  *(void *)(v1 - 96) = *(void *)(v0 + 160);
  *(void *)(v1 - 88) = v3;
  return swift_task_dealloc();
}

unint64_t OUTLINED_FUNCTION_12_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_14()
{
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 120), *(void *)(*(void *)(v0 + 120) + 24));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_16_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t OUTLINED_FUNCTION_18_12()
{
  return *(void *)(v0 + 288);
}

uint64_t OUTLINED_FUNCTION_19_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_12()
{
  return *(void *)(v0 - 96);
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_28_7()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t DeviceState.supportsCompactView.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_4_4();
  uint64_t v29 = v7;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v10);
  char v11 = dispatch thunk of DeviceState.isPhone.getter();
  unint64_t v12 = *(void (**)(void))(v5 + 16);
  OUTLINED_FUNCTION_2_23();
  v12();
  if (v11) {
    char v13 = 1;
  }
  else {
    char v13 = dispatch thunk of DeviceState.isPad.getter();
  }
  uint64_t v14 = *(void (**)(uint64_t))(v5 + 8);
  OUTLINED_FUNCTION_2_16();
  v14(v15);
  OUTLINED_FUNCTION_2_23();
  ((void (*)(uint64_t))v12)(v16);
  if (v13)
  {
    OUTLINED_FUNCTION_2_16();
    v14(v17);
    OUTLINED_FUNCTION_2_23();
    ((void (*)(uint64_t))v12)(v18);
  }
  else
  {
    char v19 = dispatch thunk of DeviceState.isPod.getter();
    OUTLINED_FUNCTION_2_16();
    v14(v20);
    OUTLINED_FUNCTION_2_23();
    ((void (*)(uint64_t))v12)(v21);
    if ((v19 & 1) == 0)
    {
      OUTLINED_FUNCTION_2_16();
      v14(v26);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v29, v2, a1);
      goto LABEL_10;
    }
  }
  char v22 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_2_16();
  v14(v23);
  OUTLINED_FUNCTION_2_23();
  ((void (*)(uint64_t))v12)(v24);
  if (v22)
  {
LABEL_10:
    char v25 = 0;
    goto LABEL_11;
  }
  char v25 = dispatch thunk of DeviceState.isCarDNDMode.getter() ^ 1;
LABEL_11:
  OUTLINED_FUNCTION_2_16();
  v14(v27);
  return v25 & 1;
}

uint64_t DeviceState.toSiriKitDeviceState.getter()
{
  type metadata accessor for Locale.Language();
  OUTLINED_FUNCTION_0_0();
  uint64_t v52 = v1;
  uint64_t v53 = v0;
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_4();
  uint64_t v51 = v2;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v48 = v4;
  uint64_t v49 = v3;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_4();
  uint64_t v47 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_3_4();
  uint64_t v50 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_4_4();
  uint64_t v43 = v9;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v42 - v11;
  type metadata accessor for InputOrigin();
  OUTLINED_FUNCTION_0_0();
  uint64_t v45 = v14;
  uint64_t v46 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v44 = type metadata accessor for InteractionType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SirikitDeviceState.Builder();
  swift_allocObject();
  SirikitDeviceState.Builder.init()();
  OUTLINED_FUNCTION_1_20();
  char v20 = dispatch thunk of DeviceState.isHomePod.getter();
  OUTLINED_FUNCTION_7_13(v20);
  dispatch thunk of SirikitDeviceState.Builder.withIsHomePod(_:)();
  OUTLINED_FUNCTION_5_18();
  OUTLINED_FUNCTION_1_20();
  char v21 = dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_8_16(v21);
  dispatch thunk of SirikitDeviceState.Builder.withIsWatch(_:)();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_1_20();
  char v22 = dispatch thunk of DeviceState.isMac.getter();
  OUTLINED_FUNCTION_7_13(v22);
  dispatch thunk of SirikitDeviceState.Builder.withIsMac(_:)();
  OUTLINED_FUNCTION_5_18();
  OUTLINED_FUNCTION_1_20();
  char v23 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_8_16(v23);
  dispatch thunk of SirikitDeviceState.Builder.withIsCarPlay(_:)();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_1_20();
  char v24 = dispatch thunk of DeviceState.isCarDNDMode.getter();
  OUTLINED_FUNCTION_7_13(v24);
  dispatch thunk of SirikitDeviceState.Builder.withIsCarDnD(_:)();
  OUTLINED_FUNCTION_5_18();
  OUTLINED_FUNCTION_1_20();
  char v25 = dispatch thunk of DeviceState.isAppleTV.getter();
  OUTLINED_FUNCTION_8_16(v25);
  dispatch thunk of SirikitDeviceState.Builder.withIsAppleTV(_:)();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_1_20();
  char v26 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_7_13(v26);
  dispatch thunk of SirikitDeviceState.Builder.withIsTextToSpeechEnabled(_:)();
  OUTLINED_FUNCTION_5_18();
  OUTLINED_FUNCTION_1_20();
  char v27 = dispatch thunk of DeviceState.isLockedWithPasscode.getter();
  OUTLINED_FUNCTION_8_16(v27);
  dispatch thunk of SirikitDeviceState.Builder.withIsLockedWithPasscode(_:)();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_1_20();
  char v28 = dispatch thunk of DeviceState.isEyesFree.getter();
  OUTLINED_FUNCTION_7_13(v28);
  dispatch thunk of SirikitDeviceState.Builder.withIsEyesFree(_:)();
  OUTLINED_FUNCTION_5_18();
  OUTLINED_FUNCTION_1_20();
  char v29 = dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter();
  OUTLINED_FUNCTION_8_16(v29);
  dispatch thunk of SirikitDeviceState.Builder.withIsVoiceTriggerEnabled(_:)();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_1_20();
  dispatch thunk of DeviceState.interactionType.getter();
  InteractionType.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v44);
  OUTLINED_FUNCTION_10_17();
  dispatch thunk of SirikitDeviceState.Builder.withInteractionType(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_1_20();
  dispatch thunk of DeviceState.inputOrigin.getter();
  InputOrigin.rawValue.getter();
  OUTLINED_FUNCTION_23();
  v30();
  OUTLINED_FUNCTION_10_17();
  dispatch thunk of SirikitDeviceState.Builder.withInputOrigin(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v31 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v31);
  dispatch thunk of SirikitDeviceState.Builder.withMultiUserState(_:)();
  swift_release();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  DeviceState.userAssignedDeviceName.getter();
  if (!v32) {
    static String.EMPTY.getter();
  }
  dispatch thunk of SirikitDeviceState.Builder.withUserAssignedDeviceName(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  DeviceState.userAssignedDeviceName.getter();
  uint64_t v33 = v50;
  if (!v34) {
    static String.EMPTY.getter();
  }
  dispatch thunk of SirikitDeviceState.Builder.withDeviceName(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_1_20();
  dispatch thunk of DeviceState.siriLocale.getter();
  Locale.language.getter();
  OUTLINED_FUNCTION_23();
  v35();
  Locale.Language.languageCode.getter();
  OUTLINED_FUNCTION_23();
  v36();
  uint64_t v37 = type metadata accessor for Locale.LanguageCode();
  if (__swift_getEnumTagSinglePayload(v33, 1, v37) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v33, &demangling cache variable for type metadata for Locale.LanguageCode?);
    uint64_t v38 = v43;
    __swift_storeEnumTagSinglePayload(v43, 1, 1, v31);
  }
  else
  {
    MEMORY[0x230F81EE0]();
    OUTLINED_FUNCTION_23();
    v39();
    swift_bridgeObjectRetain();
    uint64_t v38 = v43;
    SpeakableString.init(print:speak:)();
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v31);
    swift_bridgeObjectRelease();
  }
  dispatch thunk of SirikitDeviceState.Builder.withSiriLocale(_:)();
  swift_release();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v38, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v40 = dispatch thunk of SirikitDeviceState.Builder.build()();
  swift_release();
  return v40;
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_7_13(char a1)
{
  return a1 & 1;
}

uint64_t OUTLINED_FUNCTION_8_16(char a1)
{
  return a1 & 1;
}

uint64_t OUTLINED_FUNCTION_9_13()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  return v0;
}

uint64_t static Signpost.begin(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t result = type metadata accessor for Signpost.OpenSignpost();
  uint64_t v8 = a2 + *(int *)(result + 20);
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 8) = v4;
  *(unsigned char *)(v8 + 16) = v5;
  return result;
}

Swift::Void __swiftcall Signpost.OpenSignpost.end()()
{
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  type metadata accessor for Signpost.OpenSignpost();
  os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t one-time initialization function for contactsLog()
{
  type metadata accessor for OS_os_log();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Signpost.contactsLog = result;
  return result;
}

uint64_t type metadata accessor for Signpost.OpenSignpost()
{
  uint64_t result = type metadata singleton initialization cache for Signpost.OpenSignpost;
  if (!type metadata singleton initialization cache for Signpost.OpenSignpost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id static Signpost.contactsLog.getter()
{
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static Signpost.contactsLog;
  return v0;
}

void static SignpostName.relationshipLabelKeyForValue.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.relationshipLabelValueForKey.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.toSiriKitIntent.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.makeFlowForParse.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.contactsIntentHandler.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.prewarmVision.getter(uint64_t a1@<X8>)
{
}

void static SignpostName.visionSaliencyRequest.getter(uint64_t a1@<X8>)
{
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost.OpenSignpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
  }
  return a1;
}

uint64_t destroy for Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t assignWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D512210);
}

uint64_t sub_22D512210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D51226C);
}

uint64_t sub_22D51226C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Signpost.OpenSignpost()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SignpostName(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SignpostName(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignpostName()
{
  return &type metadata for SignpostName;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

void OUTLINED_FUNCTION_0_15(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 2;
}

uint64_t ContactsPhoneHandle.Builder.withPhoneLabel(print:speak:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_3();
  uint64_t v5 = v3 - v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v12 - v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v9 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v9);
  outlined init with take of SpeakableString?((uint64_t)v8, v5);
  uint64_t v10 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v5, v10);
  swift_endAccess();
  return swift_retain();
}

uint64_t ContactsPhoneHandle.Builder.__deallocating_deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle);
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

unint64_t static ContactsPhoneHandle.catTypeName.getter()
{
  return 0xD000000000000014;
}

uint64_t ContactsPhoneHandle.init(builder:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  *(void *)(v1 + 16) = 0;
  uint64_t v8 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v8, v7);
  outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
  uint64_t v9 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v9, v7);
  swift_release();
  outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
  return v1;
}

uint64_t ContactsPhoneHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_11_3();
  uint64_t v11 = v9 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - v13;
  BOOL v15 = a1 == 0x62614C656E6F6870 && a2 == 0xEA00000000006C65;
  if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel, (uint64_t)v14);
    uint64_t v16 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16) != 1)
    {
      *(void *)(a3 + 24) = v16;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(boxed_opaque_existential_1, v14, v16);
    }
    uint64_t v17 = (uint64_t)v14;
    goto LABEL_16;
  }
  if (a1 != 0x6E6148656E6F6870 || a2 != 0xEB00000000656C64)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      goto LABEL_17;
    }
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle, v11);
  uint64_t v21 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v11, 1, v21) == 1)
  {
    uint64_t v17 = v11;
LABEL_16:
    uint64_t result = outlined destroy of SpeakableString?(v17);
LABEL_17:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(void *)(a3 + 24) = v21;
  char v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v22, v11, v21);
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional __swiftcall ContactsPhoneHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsPhoneHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriContactsIntents_ContactsPhoneHandle_CodingKeys_phoneHandle;
  }
  else {
    v4.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriContactsIntents_ContactsPhoneHandle_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ContactsPhoneHandle.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E6148656E6F6870;
  }
  else {
    return 0x62614C656E6F6870;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsPhoneHandle.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsPhoneHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsPhoneHandle.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsPhoneHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsPhoneHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsPhoneHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsPhoneHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  return ContactsPhoneHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsPhoneHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsPhoneHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsPhoneHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsPhoneHandle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsPhoneHandle.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
  return v0;
}

uint64_t ContactsPhoneHandle.__deallocating_deinit()
{
  ContactsPhoneHandle.deinit();
  OUTLINED_FUNCTION_23_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t ObjC metadata update function for ContactsPhoneHandle()
{
  return type metadata accessor for ContactsPhoneHandle(0);
}

uint64_t type metadata accessor for ContactsPhoneHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsPhoneHandle);
}

void type metadata completion function for ContactsPhoneHandle()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsPhoneHandle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsPhoneHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type ContactsPhoneHandle and conformance ContactsPhoneHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  OUTLINED_FUNCTION_5_19();
  if (!v1) {
    OUTLINED_FUNCTION_5_19();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t ContactsPhoneHandle.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsPhoneHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsPhoneHandle.Builder()
{
  return type metadata accessor for ContactsPhoneHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsPhoneHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsPhoneHandle.Builder);
}

void type metadata completion function for ContactsPhoneHandle.Builder()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ContactsPhoneHandle.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_11_3();
  uint64_t v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v22 - v11;
  v22[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsPhoneHandle.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  *(void *)(v3 + 16) = 0;
  uint64_t v16 = a1[3];
  uint64_t v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v17 = (uint64_t)v23;

    type metadata accessor for ContactsPhoneHandle(0);
    swift_deallocPartialClassInstance();
    uint64_t v21 = v17;
  }
  else
  {
    v22[1] = v14;
    type metadata accessor for SpeakableString();
    char v25 = 0;
    lazy protocol witness table accessor for type ContactsPhoneHandle and conformance ContactsPhoneHandle(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    OUTLINED_FUNCTION_2_24();
    outlined init with take of SpeakableString?((uint64_t)v12, v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
    char v24 = 1;
    OUTLINED_FUNCTION_2_24();
    uint64_t v19 = OUTLINED_FUNCTION_6_21();
    v20(v19);
    outlined init with take of SpeakableString?(v9, v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
    uint64_t v21 = (uint64_t)v23;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsPhoneHandle()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsPhoneHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsPhoneHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsPhoneHandle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsPhoneHandle.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsPhoneHandle(void *a1)
{
  return ContactsPhoneHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsPhoneHandle()
{
  return lazy protocol witness table accessor for type ContactsPhoneHandle and conformance ContactsPhoneHandle(&lazy protocol witness table cache variable for type ContactsPhoneHandle and conformance ContactsPhoneHandle, (void (*)(uint64_t))type metadata accessor for ContactsPhoneHandle);
}

uint64_t base witness table accessor for Encodable in ContactsPhoneHandle()
{
  return lazy protocol witness table accessor for type ContactsPhoneHandle and conformance ContactsPhoneHandle(&lazy protocol witness table cache variable for type ContactsPhoneHandle and conformance ContactsPhoneHandle, (void (*)(uint64_t))type metadata accessor for ContactsPhoneHandle);
}

uint64_t lazy protocol witness table accessor for type ContactsPhoneHandle and conformance ContactsPhoneHandle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactsPhoneHandle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D513364);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactsPhoneHandle.CodingKeys()
{
  return &type metadata for ContactsPhoneHandle.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_2_24()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_19()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_6_21()
{
  return v0;
}

uint64_t DialogExecutionResult.responseViewIDForManifest.getter()
{
  id v1 = objc_msgSend(v0, sel_dialog);
  type metadata accessor for DialogElement();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    id v5 = objc_msgSend(v0, sel_catId);
    goto LABEL_8;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_7;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)MEMORY[0x230F854E0](0, v2);
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  unsigned int v4 = v3;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_id);

LABEL_8:
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t TemplatingResult.merge(with:behaviorAfterSpeaking:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  MEMORY[0x270FA5388](v10 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  uint64_t v30 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_0_0();
  uint64_t v28 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  MEMORY[0x270FA5388](v19 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  TemplatingResult.templateIdentifier.getter();
  TemplatingResult.sections.getter();
  _s10Foundation3URLVSgWOcTm_0(a1, v22, &demangling cache variable for type metadata for TemplatingResult?);
  if (__swift_getEnumTagSinglePayload(v22, 1, v3) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v22, &demangling cache variable for type metadata for TemplatingResult?);
  }
  else
  {
    TemplatingResult.sections.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v22, v3);
  }
  specialized Array.append<A>(contentsOf:)();
  _s10Foundation3URLVSgWOcTm_0(a2, v13, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v2, v3);
  if (__swift_getEnumTagSinglePayload(v13, 1, v30) == 1)
  {
    TemplatingResult.behaviorAfterSpeaking.getter();
    uint64_t v23 = OUTLINED_FUNCTION_2_25();
    v24(v23);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_2_25();
    v26(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v18, v13, v30);
  }
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  return v0;
}

uint64_t GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for SiriKitIntentHandler();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:), 0, 0);
}

uint64_t GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22D49E000, v2, v3, "#GetContactAttributeHandleIntentWithNoOutputStrategy makeIntentExecutionBehavior", v4, 2u);
    MEMORY[0x230F85DE0](v4, -1, -1);
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v9 = (void *)v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  swift_allocObject();
  swift_retain();
  uint64_t v11 = ContactResolver.init()();
  uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for GetContactAttributeIntent();
  id v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  uint64_t v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

uint64_t type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return self;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66378](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66380](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66358](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  uint64_t v7 = lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66698](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, v7);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66370](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66368](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return MEMORY[0x270F66348](a1, a2, ContactAttributeHandleIntentWithNoOutputStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy;
  return GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1)
{
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy);
}

uint64_t base witness table accessor for HandleIntentFlowStrategyAsync in GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy);
}

uint64_t lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void ContactNLIntent.ContactPostalAddressField.rawValue.getter()
{
}

void *static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter;
}

void ContactNLIntent.ContactIntentAddressAttributes.rawValue.getter()
{
}

uint64_t ContactNLIntent.ContactIntentDateDescription.rawValue.getter(char a1)
{
  if (a1) {
    return 0x7961646874726962;
  }
  else {
    return 0x73726576696E6E61;
  }
}

unint64_t ContactNLIntent.ContactPostalAddressField.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactNLIntent.ContactPostalAddressField.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

void *static ContactNLIntent.ContactPostalAddressField.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.ContactPostalAddressField.allCases.getter;
}

void ContactNLIntent.NLContactAttributeLabel.rawValue.getter()
{
}

uint64_t ContactNLIntent.NLContactTypeValue.attributeTypeAndLabel()(unsigned __int8 a1)
{
  if (a1 > 0x23u) {
    return 0;
  }
  else {
    return qword_22D5A1C88[(char)a1];
  }
}

uint64_t ContactNLIntent.NLContactTypeValue.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1802661751;
      goto LABEL_24;
    case 2:
      uint64_t v4 = 0x656C69626F6DLL;
      return v4 & 0xFFFFFFFFFFFFLL | 0x7020000000000000;
    case 3:
      return 0x656E6F687069;
    case 4:
      unsigned int v3 = 1852399981;
      goto LABEL_24;
    case 5:
      unsigned int v5 = 1701670760;
      return v5 | 0x7861662000000000;
    case 6:
      unsigned int v5 = 1802661751;
      return v5 | 0x7861662000000000;
    case 7:
      return 0x616620726568746FLL;
    case 8:
      uint64_t v6 = 1701273968;
      goto LABEL_33;
    case 9:
      uint64_t v7 = 0x20726568746FLL;
      return v7 & 0xFFFFFFFFFFFFLL | 0x6870000000000000;
    case 10:
      return 0x656E6F6870;
    case 11:
      uint64_t v4 = 0x6C6F6F686373;
      return v4 & 0xFFFFFFFFFFFFLL | 0x7020000000000000;
    case 12:
      return 0x6E61747369737361;
    case 13:
      return 0x6E6F687020726163;
    case 14:
      uint64_t v7 = 0x206F69646172;
      return v7 & 0xFFFFFFFFFFFFLL | 0x6870000000000000;
    case 15:
      return result;
    case 16:
      uint64_t v8 = 0x72616D697270;
      goto LABEL_26;
    case 17:
    case 18:
      return 0xD000000000000014;
    case 19:
      return 0x6B6361626C6C6163;
    case 20:
      unsigned int v3 = 1852076905;
      goto LABEL_24;
    case 21:
      uint64_t v8 = 0x747420646474;
LABEL_26:
      uint64_t result = v8 & 0xFFFFFFFFFFFFLL | 0x2079000000000000;
      break;
    case 22:
      uint64_t result = 1870031222;
      break;
    case 23:
      uint64_t result = 0x6F72616C63;
      break;
    case 24:
      uint64_t result = 7170420;
      break;
    case 25:
      uint64_t result = 26991;
      break;
    case 26:
      uint64_t result = 0x6C657478656ELL;
      break;
    case 27:
      uint64_t v6 = 1634167905;
LABEL_33:
      uint64_t result = v6 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
      break;
    case 28:
      uint64_t result = 0x65746D6F63726573;
      break;
    case 29:
      uint64_t result = 1870032493;
      break;
    case 30:
      uint64_t result = 0x6C69616D65;
      break;
    case 31:
      uint64_t result = 0x616D65206B726F77;
      break;
    case 32:
      uint64_t result = 0x6C616E6F73726570;
      break;
    case 33:
      uint64_t result = 0x6D6520726568746FLL;
      break;
    case 34:
      uint64_t result = 0x65206C6F6F686373;
      break;
    case 35:
      uint64_t result = 0x7264646120796E61;
      break;
    default:
      unsigned int v3 = 1701670760;
LABEL_24:
      uint64_t result = v3 | 0x6F68702000000000;
      break;
  }
  return result;
}

SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional __swiftcall ContactNLIntent.NLContactTypeValue.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x24) {
    return (SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional)36;
  }
  else {
    return (SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional)v1;
  }
}

ValueMetadata *type metadata accessor for ContactNLIntent()
{
  return &type metadata for ContactNLIntent;
}

uint64_t getEnumTagSinglePayload for ContactNLIntent.NLContactTypeValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 35) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v5 = v6 - 36;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLIntent.NLContactTypeValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *uint64_t result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D514BA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 35;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactNLIntent.NLContactTypeValue()
{
  return &type metadata for ContactNLIntent.NLContactTypeValue;
}

unint64_t lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

void *static ContactNLIntent.NLContactTypeValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.NLContactTypeValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLIntent.NLContactTypeValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLIntent.NLContactTypeValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLIntent.NLContactTypeValue(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLIntent.NLContactTypeValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLIntent.NLContactTypeValue@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactNLIntent.NLContactTypeValue.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLIntent.NLContactTypeValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactNLIntent.NLContactTypeValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLIntent.NLContactTypeValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLIntent.NLContactTypeValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLIntent.NLContactTypeValue(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  unint64_t v5 = lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  unint64_t v6 = lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  return MEMORY[0x270F6DF80](a1, a2, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type [ContactNLIntent.NLContactTypeValue] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ContactNLIntent.NLContactTypeValue]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A]);
  }
  return result;
}

uint64_t ConfirmationViewBuilder.makeViewsForWatch()()
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_22D49E000, v1, v2, "[ConfirmationViewBuilder] Constructing no views for Watch, an unsupported idiom.", v3, 2u);
    MEMORY[0x230F85DE0](v3, -1, -1);
  }

  return MEMORY[0x263F8EE78];
}

uint64_t ConfirmationViewBuilder.makeViewsForMac()()
{
  return ConfirmationViewBuilder.makeViewsForMac()("[ConfirmationViewBuilder] Constructing confirmation view for Mac.");
}

uint64_t ConfirmationViewBuilder.makeViewsForCarPlay()()
{
  return ConfirmationViewBuilder.makeViewsForMac()("[ConfirmationViewBuilder] Constructing confirmation view for CarPlay.");
}

uint64_t ConfirmationViewBuilder.makeViewsForMac()(const char *a1)
{
  int v3 = v1;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    BOOL v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v7 = 0;
    _os_log_impl(&dword_22D49E000, v5, v6, a1, v7, 2u);
    MEMORY[0x230F85DE0](v7, -1, -1);
  }

  uint64_t v8 = *v3;
  swift_retain();
  uint64_t v9 = GenericViews.buildConfirmationViewForMacAndCarPlay(contactAttributeType:)(v8);
  swift_release();
  return v9;
}

uint64_t ConfirmationViewBuilder.makeViewsForIOS()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  v5[4] = &type metadata for InstalledAppsProvider;
  v5[5] = &protocol witness table for InstalledAppsProvider;
  v5[0] = v1;
  v5[6] = 0;
  swift_retain();
  CompactViews.buildCompactConfirmationView(attributeType:)();
  uint64_t v3 = v2;
  outlined destroy of CompactViews((uint64_t)v5);
  return v3;
}

uint64_t destroy for ConfirmationViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

void *assignWithCopy for ConfirmationViewBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder()
{
  return &type metadata for ConfirmationViewBuilder;
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for ContactsSnippetFlowState();
  v6[8] = v7;
  OUTLINED_FUNCTION_1(v7);
  v6[9] = v8;
  v6[10] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  OUTLINED_FUNCTION_10_0(v9);
  v6[11] = OUTLINED_FUNCTION_2_1();
  uint64_t v10 = type metadata accessor for UUID();
  v6[12] = v10;
  OUTLINED_FUNCTION_1(v10);
  v6[13] = v11;
  v6[14] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactAttributeSnippet = type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType();
  OUTLINED_FUNCTION_10_0(ContactAttributeSnippet);
  v6[15] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute();
  v6[16] = v13;
  OUTLINED_FUNCTION_1(v13);
  v6[17] = v14;
  v6[18] = OUTLINED_FUNCTION_31();
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v15);
  v6[23] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = type metadata accessor for DateComponents();
  v6[24] = v16;
  OUTLINED_FUNCTION_1(v16);
  v6[25] = v17;
  v6[26] = OUTLINED_FUNCTION_31();
  v6[27] = swift_task_alloc();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_10_0(v18);
  v6[28] = OUTLINED_FUNCTION_31();
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_10_0(v19);
  v6[31] = OUTLINED_FUNCTION_2_1();
  uint64_t v20 = type metadata accessor for Locale();
  v6[32] = v20;
  OUTLINED_FUNCTION_1(v20);
  v6[33] = v21;
  v6[34] = OUTLINED_FUNCTION_2_1();
  uint64_t v22 = type metadata accessor for ContactsLabelCATContainer();
  v6[35] = v22;
  OUTLINED_FUNCTION_1(v22);
  v6[36] = v23;
  v6[37] = OUTLINED_FUNCTION_31();
  v6[38] = swift_task_alloc();
  uint64_t v24 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v24);
  v6[39] = OUTLINED_FUNCTION_2_1();
  uint64_t ContactDirectInvocationsModel = type metadata accessor for GetContactDirectInvocationsModel();
  v6[40] = ContactDirectInvocationsModel;
  OUTLINED_FUNCTION_1(ContactDirectInvocationsModel);
  v6[41] = v26;
  v6[42] = OUTLINED_FUNCTION_31();
  v6[43] = swift_task_alloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v27, v28, v29);
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:)()
{
  OUTLINED_FUNCTION_59_1();
  uint64_t v2 = *(void *)(v0 + 264);
  unint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  GetContactDirectInvocationsModel.init(contact:)(*(id *)(v0 + 24));
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  *(void *)(v0 + 352) = CATWrapper.__allocating_init(options:globals:)();
  static ContactsLabelCATContainer.empty.getter();
  os_log_type_t v6 = (__objc2_prot **)v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  unint64_t v7 = v1;
  *(void *)(v0 + 360) = Locale.identifier.getter();
  *(void *)(v0 + 368) = v8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = &off_2649B0000;
  if (objc_msgSend((id)v5, sel_contactAttributeType) == (id)4)
  {
    uint64_t v10 = *(void **)(v0 + 56);
    uint64_t v12 = *(void **)(v0 + 24);
    uint64_t v11 = *(void **)(v0 + 32);
    id v13 = objc_msgSend(v11, sel_ageDateTime);
    *(void *)(v0 + 376) = v13;
    type metadata accessor for ContactsAgeInfo();
    id v14 = v10;
    uint64_t v15 = ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v12, (void (*)(uint64_t, char *, uint64_t))v11, v10);
    *(void *)(v0 + 384) = v15;
    if (v13)
    {
      id v16 = objc_msgSend(v13, sel_dateComponents);
      if (v16)
      {
        uint64_t v17 = v16;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 1;
      }
      uint64_t v64 = *(void *)(v0 + 232);
      uint64_t v63 = *(void *)(v0 + 240);
      uint64_t v65 = *(void *)(v0 + 192);
      __swift_storeEnumTagSinglePayload(v64, v18, 1, v65);
      outlined init with take of DateComponents?(v64, v63);
      if (__swift_getEnumTagSinglePayload(v63, 1, v65))
      {
        uint64_t v66 = *(void *)(v0 + 240);
        uint64_t v67 = &demangling cache variable for type metadata for DateComponents?;
LABEL_54:
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v66, v67);
        goto LABEL_55;
      }
      uint64_t v68 = *(void *)(v0 + 240);
      uint64_t v69 = *(void *)(v0 + 248);
      uint64_t v70 = *(void *)(v0 + 216);
      uint64_t v71 = *(void *)(v0 + 192);
      uint64_t v72 = *(void *)(v0 + 200);
      OUTLINED_FUNCTION_89();
      v73();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_1(v68, &demangling cache variable for type metadata for DateComponents?);
      DateComponents.date.getter();
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
      uint64_t v74 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload(v69, 1, v74) == 1)
      {
        uint64_t v67 = (uint64_t *)&demangling cache variable for type metadata for Date?;
        uint64_t v66 = *(void *)(v0 + 248);
        goto LABEL_54;
      }
      Date.timeIntervalSince1970.getter();
      OUTLINED_FUNCTION_51();
      OUTLINED_FUNCTION_64_0();
      OUTLINED_FUNCTION_23();
      v91();
      if (objc_msgSend(v13, sel_qualifier) == (id)2 || objc_msgSend(v13, sel_qualifier) == (id)1)
      {
        if (v15)
        {
          if (*(void *)(v15 + 64))
          {
            uint64_t v92 = *(void *)(v0 + 184);
            swift_retain();
            dispatch thunk of DialogCalendar.dateDescriptive.getter();
            swift_release();
            uint64_t v93 = type metadata accessor for SpeakableString();
            if (__swift_getEnumTagSinglePayload(v92, 1, v93) != 1)
            {
              uint64_t v81 = SpeakableString.print.getter();
              uint64_t v83 = v97;
              OUTLINED_FUNCTION_51();
              OUTLINED_FUNCTION_23();
              v98();
              goto LABEL_61;
            }
            _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 184), &demangling cache variable for type metadata for SpeakableString?);
          }
          uint64_t v83 = 0;
          uint64_t v81 = 0;
LABEL_61:
          if ((*(unsigned char *)(v15 + 40) & 1) == 0)
          {
            type metadata accessor for DialogDuration();
            uint64_t v84 = DialogDuration.init(_:mockGlobals:)();
            uint64_t v85 = v84;
LABEL_81:
            *(void *)(v0 + 408) = v84;
            *(void *)(v0 + 416) = v85;
            *(void *)(v0 + 392) = v83;
            *(void *)(v0 + 400) = v81;
            type metadata accessor for ContactsLabelCATsModern();
            swift_retain();
            static CATOption.defaultMode.getter();
            *(void *)(v0 + 424) = CATWrapperSimple.__allocating_init(options:globals:)();
            os_log_type_t v94 = (void *)swift_task_alloc();
            *(void *)(v0 + 432) = v94;
            *os_log_type_t v94 = v0;
            v94[1] = static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:);
            OUTLINED_FUNCTION_44_4();
            return ContactsLabelCATsModern.ageUnitsAsLabels(age:)(v95);
          }
          uint64_t v84 = *(void *)(v15 + 56);
          if (!v84)
          {
            uint64_t v84 = *(void *)(v15 + 48);
            if (!v84) {
              uint64_t v84 = *(void *)(v15 + 24);
            }
          }
          swift_retain();
LABEL_80:
          uint64_t v85 = 0;
          goto LABEL_81;
        }
        uint64_t v83 = 0;
        uint64_t v81 = 0;
LABEL_79:
        uint64_t v84 = 0;
        goto LABEL_80;
      }
    }
LABEL_55:
    id v75 = objc_msgSend(*(id *)(v0 + 24), sel_birthday);
    uint64_t v76 = *(void *)(v0 + 224);
    if (v75)
    {
      uint64_t v77 = v75;
      uint64_t v78 = *(void *)(v0 + 192);
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v79 = OUTLINED_FUNCTION_64_0();
      v80(v79);
      __swift_storeEnumTagSinglePayload(v76, 0, 1, v78);
      if (__swift_getEnumTagSinglePayload(v76, 1, v78) != 1)
      {
        _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 224), &demangling cache variable for type metadata for DateComponents?);
        uint64_t v81 = CNContact.formattedBirthdateString.getter();
        uint64_t v83 = v82;
        if (!v15) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 192));
    }
    _s11SiriKitFlow0C8Activity_pSgWOhTm_1(*(void *)(v0 + 224), &demangling cache variable for type metadata for DateComponents?);
    uint64_t v81 = 0;
    uint64_t v83 = 0;
    if (v15) {
      goto LABEL_61;
    }
    goto LABEL_79;
  }
  if (OUTLINED_FUNCTION_11_15() == (id)5)
  {
    uint64_t v19 = *(void **)(v0 + 24);
    type metadata accessor for ContactsLabelCATsModern();
    static CATOption.defaultMode.getter();
    *(void *)(v0 + 448) = CATWrapperSimple.__allocating_init(options:globals:)();
    *(void *)(v0 + 456) = CNContact.toDialogPerson(useConversationalName:)();
    type metadata accessor for ContactsBirthdayInfo(0);
    uint64_t v20 = ContactsBirthdayInfo.__allocating_init(contact:shouldAccountForYearless:)(v19, 1);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      uint64_t v21 = 0;
    }
    *(void *)(v0 + 464) = v21;
    CNContact.isBirthdayToday.getter();
    uint64_t v86 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v86;
    *uint64_t v86 = v0;
    v86[1] = static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:);
    OUTLINED_FUNCTION_44_4();
    return ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)(v87, v88, v89);
  }
  if (OUTLINED_FUNCTION_11_15() == (id)6)
  {
    os_log_type_t v6 = &off_2649B0000;
    unint64_t v7 = (unint64_t)objc_msgSend(*(id *)(v0 + 24), sel_nickname);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_85_0();

    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0) {
      uint64_t v22 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      unint64_t v7 = *(void *)(v0 + 112);
      uint64_t v23 = *(void *)(v0 + 120);
      uint64_t v24 = *(void **)(v0 + 32);
      id v25 = objc_msgSend(*(id *)(v0 + 24), sel_nickname);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)objc_msgSend(v24, sel_contactAttributeType), v23);
      UUID.init()();
      UUID.uuidString.getter();
      os_log_type_t v6 = v26;
      uint64_t v27 = OUTLINED_FUNCTION_64_0();
      v28(v27);
      OUTLINED_FUNCTION_79_0();
      GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
      uint64_t v29 = MEMORY[0x263F8EE78];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v29 = OUTLINED_FUNCTION_40_7();
      }
      uint64_t v5 = *(void *)(v29 + 16);
      OUTLINED_FUNCTION_25_10();
      if (v31) {
        uint64_t v29 = OUTLINED_FUNCTION_39_6(v30);
      }
      *(void *)(v29 + 16) = v7;
      OUTLINED_FUNCTION_80();
      v34(v29 + v32 + *(void *)(v33 + 40) * v5);
LABEL_17:
      OUTLINED_FUNCTION_58_2();
      if (v35)
      {
        OUTLINED_FUNCTION_27_11();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v5 = result;
        if (!result) {
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t result = OUTLINED_FUNCTION_38_8();
        if (!v5) {
          goto LABEL_87;
        }
      }
      if (v5 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v37 = 0;
      unint64_t v116 = v7 & 0xC000000000000001;
      uint64_t v113 = (void (**)(uint64_t, __objc2_prot **))(*(void *)(v0 + 104) + 8);
      uint64_t v114 = *(void *)(v0 + 40) + 32;
      uint64_t v117 = *(void *)(v0 + 136);
      uint64_t v115 = v5;
      do
      {
        if (v116) {
          OUTLINED_FUNCTION_68_0();
        }
        else {
          id v38 = *(id *)(v114 + 8 * v37);
        }
        OUTLINED_FUNCTION_43_4(v38);
        id v39 = OUTLINED_FUNCTION_17_12();
        OUTLINED_FUNCTION_13_16((uint64_t)v39);
        swift_bridgeObjectRelease();
        if (OUTLINED_FUNCTION_36_8() == (id)3
          && (id v40 = objc_msgSend(v9, sel_postalAddress)) != 0)
        {
          uint64_t v41 = v40;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          unint64_t v7 = (unint64_t)OUTLINED_FUNCTION_64_1(v41);
          CNLabeledValue<>.formattedString.getter();
          OUTLINED_FUNCTION_77_0();
        }
        else
        {
          outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v9);
          OUTLINED_FUNCTION_63_0();
        }
        uint64_t v9 = v9;
        outlined bridged method (ob) of @objc INObject.identifier.getter(v9);
        if (v42)
        {
          OUTLINED_FUNCTION_53_2();
        }
        else
        {
          OUTLINED_FUNCTION_41_4();
          unint64_t v7 = v5;
          UUID.uuidString.getter();
          OUTLINED_FUNCTION_53_2();
          (*v113)(v5, v6);
        }
        OUTLINED_FUNCTION_61_0();
        static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)objc_msgSend(v9, sel_contactAttributeType), (uint64_t)v6);
        GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = OUTLINED_FUNCTION_40_7();
        }
        uint64_t v5 = *(void *)(v29 + 16);
        OUTLINED_FUNCTION_25_10();
        if (v31) {
          uint64_t v29 = OUTLINED_FUNCTION_39_6(v43);
        }
        ++v37;
        uint64_t v44 = *(void *)(v0 + 144);
        uint64_t v45 = *(void *)(v0 + 128);
        *(void *)(v29 + 16) = v7;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v117 + 32))(v29+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(void *)(v117 + 72) * v5, v44, v45);
      }
      while (v115 != v37);
LABEL_87:
      os_log_type_t v99 = *(void **)(v0 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CNContact();
      id v100 = v99;
      OUTLINED_FUNCTION_48_3();
      uint64_t v101 = OUTLINED_FUNCTION_24_8();
      v102(v101);
      OUTLINED_FUNCTION_89();
      v104(v103);
      OUTLINED_FUNCTION_89();
      v106(v105);
      GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)();
      swift_release();
      uint64_t v107 = OUTLINED_FUNCTION_18_13();
      v108(v107);
      OUTLINED_FUNCTION_23();
      v110(v109);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_44_4();
      __asm { BRAA            X1, X16 }
    }
  }
  if (OUTLINED_FUNCTION_11_15() != (id)7
    && OUTLINED_FUNCTION_11_15() != (id)9
    && OUTLINED_FUNCTION_11_15() != (id)8
    && OUTLINED_FUNCTION_11_15() != (id)6
    && OUTLINED_FUNCTION_11_15() != (id)11)
  {
    uint64_t v29 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v46 = *(void *)(v0 + 120);
  id v47 = OUTLINED_FUNCTION_11_15();
  static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)v47, v46);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v48 = OUTLINED_FUNCTION_64_0();
  v49(v48);
  OUTLINED_FUNCTION_79_0();
  GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
  uint64_t v50 = MEMORY[0x263F8EE78];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v50 + 16) + 1, 1, v50);
  }
  unint64_t v52 = *(void *)(v50 + 16);
  unint64_t v51 = *(void *)(v50 + 24);
  if (v52 >= v51 >> 1) {
    uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v50);
  }
  *(void *)(v0 + 488) = v50;
  *(void *)(v50 + 16) = v52 + 1;
  OUTLINED_FUNCTION_80();
  v55(v50 + v53 + *(void *)(v54 + 40) * v52);
  type metadata accessor for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_73_0();
  uint64_t v56 = OUTLINED_FUNCTION_78_0();
  uint64_t v57 = OUTLINED_FUNCTION_42_7(v56);
  OUTLINED_FUNCTION_74_0(v57);
  uint64_t v58 = swift_task_alloc();
  Swift::String v59 = (void *)OUTLINED_FUNCTION_72_0(v58);
  *Swift::String v59 = v60;
  v59[1] = static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_44_4();
  return ContactsLabelCATsModern.quickActionButtonLabels(contact:)(v61);
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:deviceState:mockGlobals:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
  }
  else
  {
    swift_release();
    *(void *)(v4 + 440) = a1;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v4 + 480) = a1;
  }
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_3();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v1) {

  }
  else {
    *(void *)(v4 + 520) = a1;
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

#error "22D516B58: call analysis failed (funcsize=455)"

#error "22D517314: call analysis failed (funcsize=391)"

#error "22D517A48: call analysis failed (funcsize=364)"

#error "22D518188: call analysis failed (funcsize=464)"

#error "22D518738: call analysis failed (funcsize=362)"

#error "22D518A4C: call analysis failed (funcsize=192)"

char *static GetContactAttributeSnippetModel.ageUnitLabel(from:given:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  v87[4] = v4;
  v87[5] = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v87[3] = (char *)v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v87[2] = (char *)v87 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_10_0(v9);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  id v13 = (char *)v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  id v16 = (char *)v87 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)v87 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)v87 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  id v25 = (char *)v87 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (void (*)(void))((char *)v87 - v27);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  char v31 = (char *)v87 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)v87 - v32;
  if (a1 && a2)
  {
    v87[0] = a1;
    swift_retain();
    swift_retain();
    uint64_t v34 = dispatch thunk of DialogDuration.valueInYears.getter();
    v87[1] = a2;
    if ((v35 & 1) == 0)
    {
      OUTLINED_FUNCTION_67_0(v34);
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.years.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v33);
        if (v48)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v33, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v51();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v52 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v52);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v53 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v53 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_60:
            char v70 = 18;
LABEL_93:
            LOBYTE(v88) = v70;
            dispatch thunk of LabelExecutionResult.subscript.getter();
            swift_release();
            swift_release();
            return v31;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_60;
      }
      OUTLINED_FUNCTION_86();
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.years.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v31);
        if (v50)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v31, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v62();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v63 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v63);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v64 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v64 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_75:
            char v70 = 17;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_75;
      }
    }
    uint64_t v38 = dispatch thunk of DialogDuration.valueInMonths.getter();
    if ((v39 & 1) == 0)
    {
      OUTLINED_FUNCTION_67_0(v38);
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.months.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v28);
        if (v49)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v28, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          uint64_t v57 = SpeakableString.print.getter();
          char v31 = v58;
          OUTLINED_FUNCTION_51();
          OUTLINED_FUNCTION_23();
          v59();
          uint64_t v88 = v57;
          char v89 = v31;
          static CharacterSet.decimalDigits.getter();
          OUTLINED_FUNCTION_56_3();
          uint64_t v60 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v60);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v61 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v61 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_70:
            char v70 = 6;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_86();
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.months.getter();
        uint64_t v55 = (void (*)(void))type metadata accessor for SpeakableString();
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, (uint64_t)v55);
        if (EnumTagSinglePayload == 1)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v25, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          uint64_t v71 = SpeakableString.print.getter();
          char v31 = v72;
          OUTLINED_FUNCTION_51();
          OUTLINED_FUNCTION_71_0();
          OUTLINED_FUNCTION_23();
          v73();
          uint64_t v88 = v71;
          char v89 = v31;
          static CharacterSet.decimalDigits.getter();
          OUTLINED_FUNCTION_56_3();
          uint64_t v74 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v55)(v74);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v75 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v55();
          swift_bridgeObjectRelease();
          if (*(void *)(v75 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_83:
            char v70 = 5;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_83;
      }
    }
    uint64_t v40 = dispatch thunk of DialogDuration.valueInWeeks.getter();
    if ((v41 & 1) == 0)
    {
      OUTLINED_FUNCTION_67_0(v40);
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.weeks.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v22);
        if (v54)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v67();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v68 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v68);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v69 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v69 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_78:
            char v70 = 16;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_78;
      }
      OUTLINED_FUNCTION_86();
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.weeks.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v19);
        if (v66)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v80();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v81 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v81);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v82 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v82 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_89:
            char v70 = 15;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_89;
      }
    }
    uint64_t v42 = dispatch thunk of DialogDuration.valueInDays.getter();
    if ((v43 & 1) == 0)
    {
      OUTLINED_FUNCTION_67_0(v42);
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.days.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v16);
        if (v65)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v77();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v78 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v78);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v79 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v79 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_86:
            char v70 = 4;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_86;
      }
      OUTLINED_FUNCTION_86();
      if (v36 == v37)
      {
        dispatch thunk of DialogDuration.days.getter();
        type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_3_0((uint64_t)v13);
        if (v76)
        {
          _s11SiriKitFlow0C8Activity_pSgWOhTm_1((uint64_t)v13, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_23_9();
          OUTLINED_FUNCTION_23();
          v83();
          OUTLINED_FUNCTION_45_2();
          OUTLINED_FUNCTION_56_3();
          uint64_t v84 = OUTLINED_FUNCTION_10_18();
          ((void (*)(uint64_t))v28)(v84);
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v85 = OUTLINED_FUNCTION_55_2();
          OUTLINED_FUNCTION_14_13();
          v28();
          swift_bridgeObjectRelease();
          if (*(void *)(v85 + 16))
          {
            OUTLINED_FUNCTION_54_3();
            swift_bridgeObjectRelease();
LABEL_92:
            char v70 = 3;
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_50_3();
        goto LABEL_92;
      }
    }
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v47 = 0;
      _os_log_impl(&dword_22D49E000, v45, v46, "#GetContactAttributeSnippetModel ageUnitLabel invalid params, returning", v47, 2u);
      MEMORY[0x230F85DE0](v47, -1, -1);
    }
  }
  OUTLINED_FUNCTION_50_3();
  return v31;
}

uint64_t static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
    case 10:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CED0];
      break;
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEC8];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEA8];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEB8];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEC0];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CED8];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEE8];
      break;
    case 7:
    case 8:
    case 9:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEE0];
      break;
    case 11:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F6CEB0];
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x22D5196D0);
  }
  uint64_t v4 = *v3;
  type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType();
  OUTLINED_FUNCTION_51();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  return v7(a2, v4, v5);
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  uint64_t v3 = v0[20];
  *(void *)(v1 - 136) = v0[21];
  *(void *)(v1 - 128) = v3;
  uint64_t v4 = v0[18];
  *(void *)(v1 - 120) = v0[19];
  *(void *)(v1 - 112) = v4;
  uint64_t v5 = v0[14];
  *(void *)(v1 - 104) = v0[15];
  *(void *)(v1 - 96) = v5;
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_1_21@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  return v3
       + ((*(unsigned __int8 *)(a1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))
       + *(void *)(a1 + 72) * v1;
}

void OUTLINED_FUNCTION_2_26()
{
  uint64_t v4 = *(void *)(v2 + 136);
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v3 - 112) = v1 & 0xC000000000000001;
  *(void *)(v3 - 136) = v5 + 32;
  *(void *)(v3 - 104) = v4;
  *(void *)(v3 - 128) = v0;
  *(void *)(v3 - 120) = v4 + 32;
}

uint64_t OUTLINED_FUNCTION_3_16@<X0>(unint64_t a1@<X8>)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_5_20()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

unint64_t OUTLINED_FUNCTION_6_22()
{
  *(void *)(v2 + 16) = v1;
  return v2
       + ((*(unsigned __int8 *)(*(void *)(v3 - 104) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 104) + 80))
       + *(void *)(*(void *)(v3 - 104) + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  *(void *)(v2 - 88) = v1;
  uint64_t v4 = v0[20];
  *(void *)(v2 - 136) = v0[21];
  *(void *)(v2 - 128) = v4;
  uint64_t v5 = v0[18];
  *(void *)(v2 - 120) = v0[19];
  *(void *)(v2 - 112) = v5;
  uint64_t v6 = v0[14];
  *(void *)(v2 - 104) = v0[15];
  *(void *)(v2 - 96) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return a15;
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_10_18()
{
  return v0;
}

id OUTLINED_FUNCTION_11_15()
{
  uint64_t v3 = *(void **)(v0 + 32);
  return [v3 (SEL)(v1 + 431)];
}

uint64_t OUTLINED_FUNCTION_12_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_16(uint64_t a1)
{
  return LabelMapper.localizedLabel(handleLabel:localeString:type:)(v4, v5, v2, v1, a1, v3);
}

uint64_t OUTLINED_FUNCTION_16_12@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(void *)(v1 + 72) * v2;
}

id OUTLINED_FUNCTION_17_12()
{
  return objc_msgSend(v0, sel_contactAttributeType);
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_11()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_21_7()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_22_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_11()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_28_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  return v0;
}

id OUTLINED_FUNCTION_31_6()
{
  uint64_t v4 = v0[20];
  *(void *)(v2 - 96) = v0[12];
  *(void *)(v2 - 88) = v4;
  unint64_t v5 = (void *)v0[3];
  return [v5 (SEL)(v1 + 2153)];
}

uint64_t OUTLINED_FUNCTION_32_7()
{
  return GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)();
}

id OUTLINED_FUNCTION_36_8()
{
  return [v1 (SEL)(v0 + 431)];
}

uint64_t OUTLINED_FUNCTION_38_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_39_6@<X0>(unint64_t a1@<X8>)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_40_7()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_42_7(uint64_t a1)
{
  *(void *)(v1 + 496) = a1;
  return CNContact.toDialogPerson(useConversationalName:)();
}

uint64_t OUTLINED_FUNCTION_43_4(void *a1)
{
  return outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  *(void *)(v2 - 96) = v0;
  *(void *)(v2 - 88) = v1;
  return static CharacterSet.decimalDigits.getter();
}

uint64_t OUTLINED_FUNCTION_46_0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_48_3()
{
  return CodableContact.init(wrappedValue:)();
}

uint64_t OUTLINED_FUNCTION_49_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return CharacterSet.inverted.getter();
}

id OUTLINED_FUNCTION_60_1()
{
  uint64_t v2 = *(void **)(v0 + 24);
  return objc_msgSend(v2, sel_nickname);
}

id OUTLINED_FUNCTION_64_1(void *a1)
{
  return CNLabeledValue<>.init(address:)(a1);
}

void OUTLINED_FUNCTION_66_1()
{
}

double OUTLINED_FUNCTION_67_0(uint64_t a1)
{
  return *(double *)&a1;
}

void OUTLINED_FUNCTION_68_0()
{
  JUMPOUT(0x230F854E0);
}

uint64_t OUTLINED_FUNCTION_69_0()
{
  return GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)();
}

id OUTLINED_FUNCTION_70_0()
{
  uint64_t v3 = *(void **)(*(void *)(v1 - 136) + 8 * v0);
  return v3;
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_72_0(uint64_t result)
{
  *(void *)(v1 + 512) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_74_0(uint64_t result)
{
  *(void *)(v1 + 504) = result;
  return result;
}

void OUTLINED_FUNCTION_77_0()
{
}

uint64_t OUTLINED_FUNCTION_78_0()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_83()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_84()
{
  *(void *)(v1 - 88) = v0;
}

void OUTLINED_FUNCTION_87_0()
{
}

uint64_t OUTLINED_FUNCTION_88()
{
  return v0;
}

id OUTLINED_FUNCTION_89_0()
{
  return [v0 (SEL)(v1 + 431)];
}

SiriContactsIntents::SiriKitContactUnsupportedReason_optional __swiftcall SiriKitContactUnsupportedReason.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 8) {
    return (SiriContactsIntents::SiriKitContactUnsupportedReason_optional)7;
  }
  else {
    return (SiriContactsIntents::SiriKitContactUnsupportedReason_optional)(0x605040302010007uLL >> (8
  }
                                                                                                  * rawValue));
}

uint64_t SiriKitContactUnsupportedReason.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriKitContactUnsupportedReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriKitContactUnsupportedReason()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SiriKitContactUnsupportedReason(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriKitContactUnsupportedReason(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::SiriKitContactUnsupportedReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SiriKitContactUnsupportedReason@<W0>(Swift::Int *a1@<X0>, SiriContactsIntents::SiriKitContactUnsupportedReason_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = SiriKitContactUnsupportedReason.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriKitContactUnsupportedReason@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriKitContactUnsupportedReason.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

id BaseIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return BaseIntentHandler.init(contactService:contactResolver:)(a1, a2);
}

id BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard] = 1;
  outlined init with copy of DeviceState(a1, (uint64_t)&v2[direct field offset for BaseIntentHandler.contactService]);
  outlined init with copy of DeviceState(a2, (uint64_t)&v2[direct field offset for BaseIntentHandler.contactResolver]);
  v2[direct field offset for BaseIntentHandler.passedPrereqs] = 0;
  v13.receiver = v2;
  v13.super_class = (Class)OUTLINED_FUNCTION_0_18();
  id v5 = objc_msgSendSuper2(&v13, sel_init);
  uint64_t v6 = one-time initialization token for siriContacts;
  id v7 = v5;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_22D49E000, v9, v10, "Constructed ContactsIntentHandler.", v11, 2u);
    MEMORY[0x230F85DE0](v11, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v7;
}

uint64_t type metadata accessor for BaseIntentHandler()
{
  return swift_getGenericMetadata();
}

id BaseIntentHandler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BaseIntentHandler.init()()
{
}

void @objc BaseIntentHandler.init()()
{
}

id BaseIntentHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)OUTLINED_FUNCTION_0_18();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc BaseIntentHandler.__ivar_destroyer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for BaseIntentHandler.contactService);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for BaseIntentHandler.contactResolver);
  objc_super v2 = *(void **)(a1 + direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard);
  outlined consume of CNContact??(v2);
}

uint64_t dispatch thunk of IntentHandling.contactService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IntentHandling.contactResolver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for BaseIntentHandler()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for BaseIntentHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BaseIntentHandler);
}

uint64_t dispatch thunk of BaseIntentHandler.__allocating_init(contactService:contactResolver:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

void outlined consume of CNContact??(id a1)
{
  if (a1 != (id)1) {
}
  }

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>);
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  v27[3] = a4;
  v27[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v26[3] = a5;
  v26[4] = a7;
  id v16 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v16, a2, a5);
  *(void *)&a3[direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard] = 1;
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactService]);
  outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactResolver]);
  a3[direct field offset for BaseIntentHandler.passedPrereqs] = 0;
  v25.receiver = a3;
  v25.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(a8);
  id v17 = objc_msgSendSuper2(&v25, sel_init);
  uint64_t v18 = one-time initialization token for siriContacts;
  id v19 = v17;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_22D49E000, v21, v22, "Constructed ContactsIntentHandler.", v23, 2u);
    MEMORY[0x230F85DE0](v23, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  return v19;
}

uint64_t getEnumTagSinglePayload for SiriKitContactUnsupportedReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriKitContactUnsupportedReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D51A8A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitContactUnsupportedReason()
{
  return &type metadata for SiriKitContactUnsupportedReason;
}

unint64_t lazy protocol witness table accessor for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason;
  if (!lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return type metadata accessor for BaseIntentHandler();
}

uint64_t destroy for WatchViews(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v2);
}

uint64_t initializeWithCopy for WatchViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  BOOL v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  return a1;
}

void *assignWithCopy for WatchViews(void *a1, void *a2)
{
  uint64_t v4 = a2 + 6;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  __swift_assign_boxed_opaque_existential_1(a1 + 6, v4);
  return a1;
}

uint64_t assignWithTake for WatchViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchViews(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WatchViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchViews()
{
  return &type metadata for WatchViews;
}

unint64_t WatchViews.buildGetSnippet(contact:localeString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v8 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v46 = v3;
  uint64_t v9 = v3 + *(int *)(v6 + 20);
  *(void *)uint64_t v9 = "BuildGetSnippetWatchOS";
  *(void *)(v9 + 8) = 22;
  *(unsigned char *)(v9 + 16) = 2;
  uint64_t v50 = WatchViews.buildContactHeader(contact:)(a1);
  id v10 = objc_msgSend(a1, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v12 = Array<A>.toContactAttributes.getter(v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = CNContact.formattedFullName.getter();
  uint64_t v15 = v14;
  id v16 = objc_msgSend(a1, sel_identifier);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  id v20 = WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(v12, v13, v15, a2, a3, v17, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20)
  {
    unint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v20);
    if (!result)
    {
      __break(1u);
      goto LABEL_20;
    }
    specialized Array.append<A>(contentsOf:)(result);
  }
  id v22 = objc_msgSend(a1, sel_emailAddresses);
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Array<A>.toContactAttributes.getter(v23, v24, v25, v26, v27, v28, v29, v30, v45, v46, a2);
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = CNContact.formattedFullName.getter();
  char v35 = (void *)WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(v32, v33, v34, v48, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v35) {
    goto LABEL_9;
  }
  unint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v35);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  specialized Array.append<A>(contentsOf:)(result);

LABEL_9:
  id v36 = objc_msgSend(a1, sel_postalAddresses);
  unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = (void *)WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(v37, (uint64_t)a1, v48, a3);
  swift_bridgeObjectRelease();
  if (v38)
  {
    unint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v38);
    if (result)
    {
      specialized Array.append<A>(contentsOf:)(result);

      goto LABEL_12;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_12:
  char v39 = (void *)WatchViews.buildContactRelationsSnippet(contact:)(a1);
  if (v39)
  {
    unint64_t v40 = outlined bridged method (ob) of @objc SASTItemGroup.templateItems.getter(v39);
    if (v40) {
      specialized Array.append<A>(contentsOf:)(v40);
    }
  }
  char v41 = (void *)WatchViews.buildBirthdayAttributeSnippet(contact:)();
  if (!v41) {
    goto LABEL_18;
  }
  uint64_t v42 = v41;
  unint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v41);
  if (result)
  {
    specialized Array.append<A>(contentsOf:)(result);

LABEL_18:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v43 = OUTLINED_FUNCTION_5_21();
    *(_OWORD *)(v43 + 16) = xmmword_22D59FB50;
    id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v50, v44, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
    *(void *)(v43 + 32) = v44;
    specialized Array._endMutation()();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_1_22();
    outlined destroy of Signpost.OpenSignpost(v47);
    return v43;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t WatchViews.buildContactHeader(contact:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v2);
  long long v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = &v4[*(int *)(v2 + 20)];
  *(void *)uint64_t v6 = "BuildContactHeaderWatchOS";
  *((void *)v6 + 1) = 25;
  v6[16] = 2;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  uint64_t v7 = CNContact.formattedFullName.getter();
  id v9 = SAUIDecoratedText.init(text:regions:)(v7, v8, 0);
  uint64_t result = outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v9);
  if (v11)
  {
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTHeaderItem);
    id v12 = v9;
    id v13 = SASTHeaderItem.init(header:text:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_22D59FB50;
    *(void *)(v14 + 32) = v13;
    uint64_t v38 = v14;
    specialized Array._endMutation()();
    id v15 = v13;
    id v16 = objc_msgSend(a1, sel_nickname);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    swift_bridgeObjectRelease();
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTLineDetailItem);
      id v21 = objc_msgSend(a1, sel_nickname);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      id v25 = SAUIDecoratedText.init(text:regions:)(v22, v24, 0);
      SASTLineDetailItem.init(title:)(v25);
      MEMORY[0x230F850D0]();
      if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    id v26 = objc_msgSend(a1, sel_organizationName);
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    swift_bridgeObjectRelease();
    uint64_t v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
    }
    if (v30)
    {
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTLineDetailItem);
      id v31 = objc_msgSend(a1, sel_organizationName);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      id v35 = SAUIDecoratedText.init(text:regions:)(v32, v34, 0);
      SASTLineDetailItem.init(title:)(v35);
      MEMORY[0x230F850D0]();
      if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }

    uint64_t v36 = v38;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v4);
    return v36;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v126 = a7;
  uint64_t v125 = a6;
  uint64_t v154 = a4;
  uint64_t v155 = a5;
  uint64_t v157 = a2;
  uint64_t v158 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v140 = (uint64_t)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for AceOutput();
  *(void *)&long long v161 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136);
  os_log_type_t v152 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v11 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v138 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for TemplatingResult();
  id v13 = *(char **)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  uint64_t v159 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v145 = (uint64_t)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for TemplatingText();
  uint64_t v17 = MEMORY[0x270FA5388](v144);
  uint64_t v137 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v143 = (char *)&v120 - v19;
  uint64_t v124 = type metadata accessor for CharacterSet();
  uint64_t v20 = *(void (***)(char *, uint64_t))(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v123 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v22 = MEMORY[0x270FA5388](v153);
  id v142 = (char *)&v120 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v141 = (char *)&v120 - v24;
  uint64_t v25 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (uint64_t *)((char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for contactsLog != -1) {
LABEL_49:
  }
    swift_once();
  id v28 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v29 = *(int *)(v25 + 20);
  uint64_t v121 = v27;
  uint64_t v30 = (char *)v27 + v29;
  *(void *)uint64_t v30 = "BuildPhoneAttributeSnippetWatchOS";
  *((void *)v30 + 1) = 33;
  v30[16] = 2;
  id v156 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x263F8EE78], v156, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  unint64_t v31 = a1;
  uint64_t v120 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = v146;
  a1 = (unint64_t)&off_2649B0000;
  if (!v25)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    uint64_t v119 = (uint64_t)v121;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v119);
    return v156;
  }
  unint64_t v147 = v31 & 0xC000000000000001;
  uint64_t v122 = v20 + 1;
  uint64_t v133 = (void (**)(char *, void, uint64_t))(v11 + 104);
  unsigned int v132 = *MEMORY[0x263F6FD18];
  uint64_t v131 = v146 + 1;
  long long v128 = (void (**)(char *, uint64_t))(v161 + 8);
  uint64_t v127 = (void (**)(char *, uint64_t))(v13 + 8);
  id v13 = (char *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>;
  uint64_t v11 = 4;
  long long v134 = xmmword_22D5A01E0;
  long long v161 = xmmword_22D59FB50;
  unint64_t v130 = v31;
  uint64_t v129 = v25;
  while (1)
  {
    if (v147) {
      id v32 = (id)MEMORY[0x230F854E0](v11 - 4, v31);
    }
    else {
      id v32 = *(id *)(v31 + 8 * v11);
    }
    id v33 = v32;
    uint64_t v34 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v35 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v32);
    if (!v36)
    {

      goto LABEL_44;
    }
    uint64_t v150 = v36;
    uint64_t v151 = v35;
    uint64_t v148 = v11 - 3;
    uint64_t v149 = v11;
    unint64_t v164 = MEMORY[0x263F8EE78];
    uint64_t v37 = *v27;
    uint64_t v38 = (uint64_t)v141;
    ContactsLabelCATs.call()();
    uint64_t v39 = Result<>.firstPrint.getter();
    uint64_t v41 = v40;
    outlined destroy of Result<TemplatingResult, Error>(v38, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    id v160 = v33;
    if (v41)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.siriContacts);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl(&dword_22D49E000, v43, v44, "[WatchViews] Building Call button for phone attribute view", v45, 2u);
        MEMORY[0x230F85DE0](v45, -1, -1);
      }

      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
      id v46 = SAUIDecoratedText.init(text:regions:)(v39, v41, 0);
      id v47 = static ContactsDirectInvocations.startCall(fullName:phoneHandle:contactIdentifier:)(v157, v158, v33, v125, v126);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v161;
      *(void *)(v48 + 32) = v47;
      *(void *)&v162[0] = v48;
      specialized Array._endMutation()();
      uint64_t v49 = *(void *)&v162[0];
      id v50 = objc_allocWithZone(MEMORY[0x263F64C58]);
      id v51 = v47;
      id v52 = objc_msgSend(v50, sel_init, v120);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v49, v52, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTButtonItem);
      id v53 = v52;
      id v54 = v46;
      id v55 = SASTButtonItem.init(action:centered:decoratedLabel:)(v53, 0, v54);
      MEMORY[0x230F850D0]();
      if (*(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v37 = *v27;
      id v33 = v160;
    }
    uint64_t v56 = (uint64_t)v142;
    ContactsLabelCATs.message()();
    uint64_t v57 = Result<>.firstPrint.getter();
    uint64_t v59 = v58;
    outlined destroy of Result<TemplatingResult, Error>(v56, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    if (v59)
    {
      if (one-time initialization token for siriContacts != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.siriContacts);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl(&dword_22D49E000, v61, v62, "[WatchViews] Building Message button for phone attribute view", v63, 2u);
        MEMORY[0x230F85DE0](v63, -1, -1);
      }

      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
      id v64 = SAUIDecoratedText.init(text:regions:)(v57, v59, 0);
      uint64_t v65 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v33);
      id v67 = static ContactsDirectInvocations.sendMessage(contactName:contactPhoneNumber:)(v157, v158, v65, v66);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = v161;
      *(void *)(v68 + 32) = v67;
      *(void *)&v162[0] = v68;
      specialized Array._endMutation()();
      uint64_t v69 = *(void *)&v162[0];
      id v70 = objc_allocWithZone(MEMORY[0x263F64C58]);
      id v71 = v67;
      id v72 = objc_msgSend(v70, sel_init);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v69, v72, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTButtonItem);
      id v73 = v72;
      id v74 = v64;
      id v75 = SASTButtonItem.init(action:centered:decoratedLabel:)(v73, 0, v74);
      MEMORY[0x230F850D0]();
      if (*(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v37 = *v27;
      id v33 = v160;
    }
    swift_retain();
    uint64_t v76 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v33);
    uint64_t v78 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v76, v77, v154, v155, 2, v37);
    unint64_t v80 = v79;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v81 = HIBYTE(v80) & 0xF;
    if ((v80 & 0x2000000000000000) == 0) {
      uint64_t v81 = v78 & 0xFFFFFFFFFFFFLL;
    }
    if (v81)
    {
      uint64_t v82 = v123;
      CharacterSet.init(charactersIn:)();
      *(void *)&v162[0] = v78;
      *((void *)&v162[0] + 1) = v80;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      if (v83)
      {
        v84._uint64_t countAndFlagsBits = String.formattedForCNLabelConversion.getter();
        *(void *)&v162[0] = 1008804959;
        *((void *)&v162[0] + 1) = 0xE400000000000000;
        String.append(_:)(v84);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v85._uint64_t countAndFlagsBits = 1596203326;
        v85._object = (void *)0xE400000000000000;
        String.append(_:)(v85);
        swift_bridgeObjectRelease();
        unint64_t v86 = *((void *)&v162[0] + 1);
        uint64_t v78 = *(void *)&v162[0];
        (*v122)(v82, v124);
        swift_bridgeObjectRelease();
        unint64_t v80 = v86;
      }
      else
      {
        (*v122)(v82, v124);
      }
    }
    *(void *)&v162[0] = v78;
    *((void *)&v162[0] + 1) = v80;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v87 = StringProtocol.capitalized.getter();
    uint64_t v89 = v88;
    swift_bridgeObjectRelease();
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
    uint64_t v90 = (void *)MEMORY[0x230F84F70](v87, v89);
    swift_bridgeObjectRelease();
    static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

    uint64_t v91 = String.sanitizeCNLabel.getter();
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();
    id v94 = SAUIDecoratedText.init(text:regions:)(v91, v93, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
    type metadata accessor for TemplatingSection();
    *(_OWORD *)(swift_allocObject() + 16) = v134;
    static String.EMPTY.getter();
    swift_bridgeObjectRetain();
    TemplatingText.init(text:speakableTextOverride:)();
    uint64_t v95 = v145;
    uint64_t v96 = v144;
    __swift_storeEnumTagSinglePayload(v145, 1, 1, v144);
    TemplatingSection.init(id:content:caption:spokenOnly:)();
    static String.EMPTY.getter();
    id result = (id)outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v94);
    if (!v98) {
      break;
    }
    TemplatingText.init(text:speakableTextOverride:)();
    __swift_storeEnumTagSinglePayload(v95, 1, 1, v96);
    TemplatingSection.init(id:content:caption:spokenOnly:)();
    static String.EMPTY.getter();
    (*v133)(v138, v132, v139);
    TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v99 = swift_allocObject();
    *(_OWORD *)(v99 + 16) = v161;
    uint64_t v100 = v164;
    a1 = (unint64_t)&off_2649B0000;
    if (v164 >> 62)
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v101 = _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      uint64_t v101 = v100;
    }
    id v13 = (char *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>;
    swift_bridgeObjectRelease();
    id v102 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v101, v102, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
    *(void *)(v99 + 32) = v102;
    *(void *)&v162[0] = v99;
    specialized Array._endMutation()();
    uint64_t v103 = type metadata accessor for NLContextUpdate();
    uint64_t v104 = v140;
    __swift_storeEnumTagSinglePayload(v140, 1, 1, v103);
    uint64_t v163 = 0;
    memset(v162, 0, sizeof(v162));
    static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of Result<TemplatingResult, Error>((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of Result<TemplatingResult, Error>(v104, &demangling cache variable for type metadata for NLContextUpdate?);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAStartLocalRequest);
    unint64_t v105 = AceOutput.commands.getter();
    uint64_t v106 = specialized _arrayConditionalCast<A, B>(_:)(v105);
    swift_bridgeObjectRelease();
    id v107 = SAStartLocalRequest.init(clientBoundCommands:)(v106);
    uint64_t v108 = swift_allocObject();
    *(_OWORD *)(v108 + 16) = v161;
    *(void *)(v108 + 32) = v107;
    *(void *)&v162[0] = v108;
    specialized Array._endMutation()();
    uint64_t v109 = *(void *)&v162[0];
    id v110 = objc_allocWithZone(MEMORY[0x263F64C58]);
    id v111 = v107;
    id v112 = objc_msgSend(v110, sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v109, v112, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
    uint64_t v113 = swift_allocObject();
    *(_OWORD *)(v113 + 16) = v161;
    id v114 = v94;
    *(void *)(v113 + 32) = SAUIDecoratedText.init(text:regions:)(v151, v150, 0);
    *(void *)&v162[0] = v113;
    specialized Array._endMutation()();
    uint64_t v115 = *(void *)&v162[0];
    id v116 = v112;
    uint64_t v20 = (void (**)(char *, uint64_t))SASTColumnDataListItem.init(title:decoratedRows:action:)(v114, v115, v112);
    id result = (id)outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v156);
    *(void *)&v162[0] = result;
    if (!result) {
      goto LABEL_52;
    }
    uint64_t v117 = swift_bridgeObjectRelease();
    MEMORY[0x230F850D0](v117);
    uint64_t v27 = v146;
    unint64_t v31 = v130;
    if (*(void *)((*(void *)&v162[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v162[0] & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (*(void *)&v162[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v118.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v118.super.Class isa = 0;
    }
    objc_msgSend(v156, sel_setTemplateItems_, v118.super.isa, v120);

    (*v128)(v152, v136);
    (*v127)(v159, v135);
    uint64_t v25 = v129;
    uint64_t v11 = v149;
    uint64_t v34 = v148;
LABEL_44:
    ++v11;
    if (v34 == v25) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v62 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void (***)(char *, uint64_t))(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v63 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
LABEL_35:
  }
    swift_once();
  id v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v13 = v11 + *(int *)(v9 + 20);
  *(void *)uint64_t v13 = "BuildEmailAttributeSnippetWatchOS";
  *(void *)(v13 + 8) = 33;
  uint64_t v59 = v13;
  *(unsigned char *)(v13 + 16) = 2;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x263F8EE78], v14, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  uint64_t v60 = v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_4;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    uint64_t v58 = v60;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v58);
    return (uint64_t)v14;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_37;
  }
LABEL_4:
  unint64_t v70 = a1 & 0xC000000000000001;
  uint64_t v61 = v7 + 1;
  uint64_t v66 = v5 + 48;
  uint64_t v11 = 4;
  uint64_t v64 = v15;
  unint64_t v65 = a1;
  id v67 = v14;
  long long v71 = xmmword_22D59FB50;
  while (1)
  {
    uint64_t v9 = v11 - 4;
    if (v70) {
      id v16 = (id)MEMORY[0x230F854E0](v11 - 4, a1);
    }
    else {
      id v16 = *(id *)(a1 + 8 * v11);
    }
    uint64_t v17 = v16;
    uint64_t v18 = v11 - 3;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v19 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v16);
    if (v20) {
      break;
    }

LABEL_32:
    ++v11;
    if (v18 == v15) {
      goto LABEL_37;
    }
  }
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  uint64_t v23 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v17);
  if (v24) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v24) {
    unint64_t v26 = v24;
  }
  else {
    unint64_t v26 = 0xE000000000000000;
  }
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
  }
  id v72 = v17;
  if (v27)
  {
    id v28 = v63;
    CharacterSet.init(charactersIn:)();
    uint64_t v73 = v25;
    unint64_t v74 = v26;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.rangeOfCharacter(from:options:range:)();
    if (v29)
    {
      v30._uint64_t countAndFlagsBits = String.formattedForCNLabelConversion.getter();
      uint64_t v73 = 1008804959;
      unint64_t v74 = 0xE400000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v31._uint64_t countAndFlagsBits = 1596203326;
      v31._object = (void *)0xE400000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      uint64_t v25 = v73;
      unint64_t v32 = v74;
      (*v61)(v28, v62);
      swift_bridgeObjectRelease();
      unint64_t v26 = v32;
    }
    else
    {
      (*v61)(v28, v62);
    }
  }
  uint64_t v73 = v25;
  unint64_t v74 = v26;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v33 = StringProtocol.capitalized.getter();
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  uint64_t v36 = (void *)MEMORY[0x230F84F70](v33, v35);
  swift_bridgeObjectRelease();
  static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

  uint64_t v37 = String.sanitizeCNLabel.getter();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  id v40 = SAUIDecoratedText.init(text:regions:)(v37, v39, 0);
  uint64_t v73 = v21;
  unint64_t v74 = v22;
  swift_bridgeObjectRetain();
  uint64_t v41 = String.init<A>(_:)();
  id v43 = SAUIDecoratedText.init(text:regions:)(v41, v42, 0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v71;
  *(void *)(v44 + 32) = v43;
  uint64_t v73 = v44;
  specialized Array._endMutation()();
  uint64_t v45 = v73;
  id v46 = v40;
  id v47 = v43;
  id v48 = SASTColumnDataListItem.init(title:decoratedRows:action:)(v46, v45, 0);
  AppUtil.buildPunchoutFor(emailAddress:)();
  id v50 = v49;
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v71;
    *(void *)(v51 + 32) = v50;
    uint64_t v73 = v51;
    specialized Array._endMutation()();
    uint64_t v52 = v73;
    id v53 = objc_allocWithZone(MEMORY[0x263F64C58]);
    id v54 = v50;
    id v55 = objc_msgSend(v53, sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v52, v55, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
    objc_msgSend(v48, sel_setAction_, v55);
  }
  uint64_t v7 = (void (**)(char *, uint64_t))v48;
  id v14 = v67;
  uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v67);
  uint64_t v73 = result;
  if (result)
  {
    MEMORY[0x230F850D0]();
    a1 = v65;
    if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = v73;
    if (v73)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v57.super.Class isa = 0;
    }
    objc_msgSend(v14, sel_setTemplateItems_, v57.super.isa);

    uint64_t v15 = v64;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v59 = a2;
  uint64_t v6 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
LABEL_28:
  }
    swift_once();
  id v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v10 = &v8[*(int *)(v6 + 20)];
  *(void *)uint64_t v10 = "BuildAddressAttributeSnippetWatchOS";
  *((void *)v10 + 1) = 35;
  v10[16] = 2;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x263F8EE78], v11, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  id v50 = v10;
  uint64_t v51 = v8;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = (char *)a1;
  if (v6)
  {
    uint64_t v56 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
    uint64_t v12 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
    uint64_t v54 = v4 + 48;
    uint64_t v55 = v12;
    unint64_t v58 = a1 & 0xC000000000000001;
    uint64_t v13 = 4;
    long long v62 = xmmword_22D59FB50;
    NSArray v57 = v11;
    uint64_t v52 = (char *)a1;
    uint64_t v53 = v6;
    while (1)
    {
      uint64_t v4 = v13 - 4;
      if (v58) {
        id v14 = (id)MEMORY[0x230F854E0](v13 - 4, v8);
      }
      else {
        id v14 = *(id *)&v8[8 * v13];
      }
      uint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      id v17 = objc_msgSend(v14, sel_label, v50);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
      }
      else
      {
        uint64_t v19 = static String.EMPTY.getter();
        uint64_t v21 = v22;
      }
      uint64_t v23 = (void *)MEMORY[0x230F84F70](v19, v21);
      swift_bridgeObjectRelease();
      uint64_t v24 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
      uint64_t v26 = v25;

      id v27 = SAUIDecoratedText.init(text:regions:)(v24, v26, 0);
      uint64_t v28 = CNLabeledValue<>.formattedString.getter();
      id v30 = SAUIDecoratedText.init(text:regions:)(v28, v29, 0);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = v62;
      *(void *)(v31 + 32) = v30;
      uint64_t v64 = v31;
      specialized Array._endMutation()();
      uint64_t v32 = v64;
      id v33 = v27;
      id v63 = v30;
      id v34 = SASTColumnDataListItem.init(title:decoratedRows:action:)(v33, v32, 0);
      AppUtil.buildPunchoutFor(labeledAddress:contact:)();
      if (v35)
      {
        uint64_t v36 = v35;
        if (one-time initialization token for siriContacts != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Logger.siriContacts);
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          id v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v40 = 0;
          _os_log_impl(&dword_22D49E000, v38, v39, "#buildAddressAttributeSnippet Built action to launch Maps with address", v40, 2u);
          MEMORY[0x230F85DE0](v40, -1, -1);
        }

        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = v62;
        *(void *)(v41 + 32) = v36;
        uint64_t v64 = v41;
        specialized Array._endMutation()();
        uint64_t v42 = v64;
        id v43 = objc_allocWithZone(MEMORY[0x263F64C58]);
        id v44 = v36;
        id v45 = objc_msgSend(v43, sel_init);
        outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v42, v45, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
        objc_msgSend(v34, sel_setAction_, v45);

        uint64_t v8 = v52;
      }
      id v46 = v34;
      id v11 = v57;
      uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v57);
      uint64_t v64 = result;
      if (!result) {
        break;
      }
      MEMORY[0x230F850D0]();
      a1 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (a1 >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v64)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
        v48.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v48.super.Class isa = 0;
      }
      objc_msgSend(v11, sel_setTemplateItems_, v48.super.isa);

      ++v13;
      uint64_t v6 = v53;
      if (v16 == v53) {
        goto LABEL_26;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    uint64_t v49 = (uint64_t)v51;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v49);
    return (uint64_t)v11;
  }
  return result;
}

uint64_t WatchViews.buildContactRelationsSnippet(contact:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_3_4();
  uint64_t v97 = v3;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_4();
  uint64_t v95 = v5;
  uint64_t v6 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  unint64_t v105 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)v86 - v10;
  if (one-time initialization token for contactsLog != -1) {
LABEL_40:
  }
    swift_once();
  id v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v13 = &v11[*(int *)(v6 + 20)];
  *(void *)uint64_t v13 = "BuildContactRelationsSnippetWatchOS";
  *((void *)v13 + 1) = 35;
  v13[16] = 2;
  id v14 = objc_msgSend(a1, sel_contactRelations);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_4:
      v86[1] = v13;
      uint64_t v87 = v11;
      id v100 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x263F8EE78], v100, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
      uint64_t v17 = 0;
      unint64_t v102 = v15 & 0xC000000000000001;
      uint64_t v90 = &v108;
      uint64_t v91 = *MEMORY[0x263F65AB8];
      uint64_t v18 = 4;
      *(void *)&long long v19 = 136315138;
      long long v89 = v19;
      uint64_t v88 = MEMORY[0x263F8EE58] + 8;
      long long v103 = xmmword_22D59FB50;
      uint64_t v94 = v6;
      unint64_t v93 = v15;
      uint64_t v92 = v16;
      while (1)
      {
        if (v102)
        {
          uint64_t v20 = OUTLINED_FUNCTION_6_23();
          uint64_t v21 = (char *)MEMORY[0x230F854E0](v20);
        }
        else
        {
          uint64_t v21 = (char *)*(id *)(v15 + 8 * v18);
        }
        id v11 = v21;
        a1 = (void *)(v18 - 3);
        if (__OFADD__(v18 - 4, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        id v22 = objc_msgSend(v21, sel_label);
        if (!v22)
        {

          goto LABEL_37;
        }
        uint64_t v23 = v22;
        uint64_t v104 = (void *)(v18 - 3);
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        id v27 = (id)static Signpost.contactsLog;
        uint64_t v28 = v105;
        OSSignpostID.init(log:)();
        static os_signpost_type_t.begin.getter();
        os_signpost(_:dso:log:name:signpostID:)();
        uint64_t v29 = &v28[*(int *)(v6 + 20)];
        *(void *)uint64_t v29 = "RelationshipLabelKeyForValue";
        *((void *)v29 + 1) = 28;
        v29[16] = 2;
        uint64_t v30 = one-time initialization token for GenderedCNRelationLabelToNLSemanticValue;
        swift_bridgeObjectRetain();
        if (v30 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v31 = *(void *)(static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue + 16);
        swift_bridgeObjectRetain();
        uint64_t v106 = v11;
        if (v31 && (specialized __RawDictionaryStorage.find<A>(_:)(v24, v26), (v32 & 1) != 0))
        {
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          id v101 = (id)v18;
          swift_endAccess();
          swift_bridgeObjectRelease();
          if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1) {
            swift_once();
          }
          uint64_t v33 = swift_beginAccess();
          MEMORY[0x270FA5388](v33);
          v86[-2] = v24;
          v86[-1] = v26;
          uint64_t v34 = swift_bridgeObjectRetain();
          specialized Sequence.first(where:)(v34, (uint64_t (*)(uint64_t))partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:));
          uint64_t v36 = v35;
          swift_bridgeObjectRelease();
          if (!v36)
          {
            id v11 = v106;
            uint64_t v18 = (uint64_t)v101;
            goto LABEL_22;
          }
          swift_bridgeObjectRelease();
          id v11 = v106;
          uint64_t v18 = (uint64_t)v101;
        }
        swift_bridgeObjectRelease();
LABEL_22:
        static os_signpost_type_t.end.getter();
        uint64_t v37 = (uint64_t)v105;
        os_signpost(_:dso:log:name:signpostID:)();
        outlined destroy of Signpost.OpenSignpost(v37);
        swift_bridgeObjectRelease();
        uint64_t v38 = v97;
        SpeakableString.init(print:speak:)();
        uint64_t v39 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v38, 0, 1, v39);
        uint64_t v40 = v95;
        ContactsLabelCATs.relationship(relationship:)(v38);
        outlined destroy of Result<TemplatingResult, Error>(v38, &demangling cache variable for type metadata for SpeakableString?);
        Result<>.firstPrint.getter();
        uint64_t v42 = v41;
        outlined destroy of Result<TemplatingResult, Error>(v40, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
        if (v42)
        {
          if (one-time initialization token for siriContacts != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          __swift_project_value_buffer(v43, (uint64_t)static Logger.siriContacts);
          swift_bridgeObjectRetain_n();
          id v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.debug.getter();
          BOOL v46 = os_log_type_enabled(v44, v45);
          uint64_t v99 = v17;
          if (v46)
          {
            id v47 = (uint8_t *)swift_slowAlloc();
            uint64_t v48 = swift_slowAlloc();
            uint64_t v109 = v48;
            *(_DWORD *)id v47 = v89;
            swift_bridgeObjectRetain();
            uint64_t v49 = OUTLINED_FUNCTION_6_23();
            uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v51);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_22D49E000, v44, v45, "[WatchViews] Building snippet for relationship label: %s", v47, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F85DE0](v48, -1, -1);
            MEMORY[0x230F85DE0](v47, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
          type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
          OUTLINED_FUNCTION_6_23();
          String.count.getter();
          Class v53 = Int._bridgeToObjectiveC()().super.super.isa;
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v56 = SATextDecorationRegion.init(start:length:property:)(isa, v53, v54, v55);
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v57 = OUTLINED_FUNCTION_5_21();
          *(_OWORD *)(v57 + 16) = v103;
          *(void *)(v57 + 32) = v56;
          uint64_t v109 = v57;
          specialized Array._endMutation()();
          uint64_t v58 = v109;
          id v98 = v56;
          uint64_t v59 = OUTLINED_FUNCTION_6_23();
          id v101 = SAUIDecoratedText.init(text:regions:)(v59, v60, v58);
          uint64_t v61 = OUTLINED_FUNCTION_5_21();
          *(_OWORD *)(v61 + 16) = v103;
          id v62 = v106;
          id v63 = objc_msgSend(v106, sel_value);
          id v64 = objc_msgSend(v63, sel_name);

          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v67 = v66;

          *(void *)(v61 + 32) = SAUIDecoratedText.init(text:regions:)(v65, v67, 0);
          uint64_t v109 = v61;
          specialized Array._endMutation()();
          uint64_t v68 = v109;
          id v69 = objc_msgSend(v62, sel_value);
          id v70 = objc_msgSend(v69, sel_name);

          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v73 = v72;

          id v74 = static ContactsDirectInvocations.getContact(contactName:)(v71, v73);
          swift_bridgeObjectRelease();
          uint64_t v75 = OUTLINED_FUNCTION_5_21();
          *(_OWORD *)(v75 + 16) = v103;
          *(void *)(v75 + 32) = v74;
          uint64_t v109 = v75;
          specialized Array._endMutation()();
          uint64_t v76 = v109;
          id v77 = objc_allocWithZone(MEMORY[0x263F64C58]);
          id v78 = v74;
          id v79 = objc_msgSend(v77, sel_init);
          outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v76, v79, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
          id v80 = v101;
          id v81 = v79;
          id v82 = SASTColumnDataListItem.init(title:decoratedRows:action:)(v80, v68, v79);
          uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v100);
          uint64_t v109 = result;
          if (!result)
          {
            __break(1u);
            return result;
          }
          MEMORY[0x230F850D0]();
          uint64_t v6 = v94;
          uint64_t v17 = v99;
          if (*(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v109)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
            v84.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v84.super.Class isa = 0;
          }
          uint64_t v16 = v92;
          objc_msgSend(v100, sel_setTemplateItems_, v84.super.isa);

          unint64_t v15 = v93;
        }
        else
        {

          uint64_t v6 = v94;
          unint64_t v15 = v93;
          uint64_t v16 = v92;
        }
        a1 = v104;
LABEL_37:
        ++v18;
        if (a1 == (void *)v16)
        {
          swift_bridgeObjectRelease();
          static os_signpost_type_t.end.getter();
          id v11 = v87;
          os_signpost(_:dso:log:name:signpostID:)();
          id v85 = v100;
          goto LABEL_43;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v85 = 0;
LABEL_43:
  outlined destroy of Signpost.OpenSignpost((uint64_t)v11);
  return (uint64_t)v85;
}

uint64_t WatchViews.buildBirthdayAttributeSnippet(contact:)()
{
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x270FA5388](v37);
  id v1 = (char *)&v36 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v8 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v9 = &v7[*(int *)(v5 + 20)];
  *(void *)uint64_t v9 = "BuildBirthdayAttributeSnippetWatchOS";
  *((void *)v9 + 1) = 36;
  v9[16] = 2;
  CNContact.timezonedBirthdate.getter((uint64_t)v4);
  uint64_t v10 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v10);
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  id v12 = 0;
  if (EnumTagSinglePayload == 1) {
    goto LABEL_8;
  }
  ContactsLabelCATs.birthday()();
  uint64_t v13 = Result<>.firstPrint.getter();
  uint64_t v15 = v14;
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v15)
  {
    id v12 = 0;
    goto LABEL_8;
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  id v16 = SAUIDecoratedText.init(text:regions:)(v13, v15, 0);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v17.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  uint64_t result = outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v16);
  if (v19)
  {
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    String.count.getter();
    swift_bridgeObjectRelease();
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = SATextDecorationRegion.init(start:length:property:)(v17.super.super.isa, isa, v21, v22);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject();
    long long v38 = xmmword_22D59FB50;
    *(_OWORD *)(v24 + 16) = xmmword_22D59FB50;
    *(void *)(v24 + 32) = v23;
    uint64_t v39 = v24;
    specialized Array._endMutation()();
    uint64_t v25 = v39;
    id v26 = v23;
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.regions.setter(v25, v16);
    uint64_t v27 = CNContact.formattedBirthdateString.getter();
    id v29 = SAUIDecoratedText.init(text:regions:)(v27, v28, 0);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = v38;
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTPropertyListItem);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v38;
    *(void *)(v31 + 32) = v29;
    uint64_t v39 = v31;
    specialized Array._endMutation()();
    uint64_t v32 = v39;
    id v33 = v16;
    id v34 = v29;
    *(void *)(v30 + 32) = SASTPropertyListItem.init(decoratedTitle:decoratedValues:)(v33, v32);
    uint64_t v39 = v30;
    specialized Array._endMutation()();
    uint64_t v35 = v39;
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64C68]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v35, v12, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);

LABEL_8:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v7);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t WatchViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)(unint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_22();
  uint64_t v11 = v5 + *(int *)(v9 + 20);
  *(void *)uint64_t v11 = "BuildGetAttributeSnippetWatchOS";
  *(void *)(v11 + 8) = 31;
  *(unsigned char *)(v11 + 16) = 2;
  switch((unint64_t)objc_msgSend(a3, sel_contactAttributeType))
  {
    case 1uLL:
      if (!a1) {
        goto LABEL_24;
      }
      if (!(a1 >> 62))
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_24;
        }
        goto LABEL_8;
      }
      OUTLINED_FUNCTION_3_17();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23)
      {
LABEL_8:
        uint64_t v13 = CNContact.formattedFullName.getter();
        uint64_t v12 = WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(a1, v13, v14, a4, a5);
        goto LABEL_17;
      }
      goto LABEL_24;
    case 2uLL:
      if (!a1) {
        goto LABEL_24;
      }
      if (!(a1 >> 62))
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_24;
        }
        goto LABEL_12;
      }
      OUTLINED_FUNCTION_3_17();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24)
      {
LABEL_12:
        uint64_t v15 = CNContact.formattedFullName.getter();
        uint64_t v17 = v16;
        id v18 = objc_msgSend(a2, sel_identifier);
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        uint64_t v12 = (uint64_t)WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(a1, v15, v17, a4, a5, v19, v21);
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
LABEL_24:
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_1_22();
      uint64_t v12 = 0;
LABEL_25:
      outlined destroy of Signpost.OpenSignpost(v5);
      return v12;
    case 3uLL:
      if (!a1) {
        goto LABEL_24;
      }
      if (a1 >> 62)
      {
        OUTLINED_FUNCTION_3_17();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v25) {
          goto LABEL_24;
        }
      }
      else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_24;
      }
      unint64_t v22 = Array<A>.toCNPostalAddresses.getter(a1);
      uint64_t v12 = WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(v22, (uint64_t)a2, a4, a5);
LABEL_17:
      swift_bridgeObjectRelease();
      static os_signpost_type_t.end.getter();
LABEL_18:
      OUTLINED_FUNCTION_1_22();
      goto LABEL_25;
    case 4uLL:
    case 5uLL:
      uint64_t v12 = WatchViews.buildBirthdayAttributeSnippet(contact:)();
      static os_signpost_type_t.end.getter();
      goto LABEL_18;
    default:
      goto LABEL_24;
  }
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  while (1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2) {
      break;
    }
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return v9;
    }
LABEL_6:
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v2 = i - 4;
      id v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x230F854E0](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v6 = v5;
      uint64_t v7 = i - 3;
      if (__OFADD__(v2, 1)) {
        break;
      }
      if (!swift_dynamicCastObjCProtocolConditional())
      {

        swift_release();
        return 0;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v3) {
        return v9;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v3) {
    goto LABEL_6;
  }
  return v9;
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(uint64_t a1, void *a2, uint64_t *a3, SEL *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, *a4, isa);
}

uint64_t outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_text);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_templateItems);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SAUIDecoratedText.regions.setter(uint64_t a1, void *a2)
{
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRegions_, isa);
}

uint64_t outlined bridged method (ob) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_templateItems);

  if (!v2) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t outlined destroy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_21()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_23()
{
  return v0;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ModifyContactAttributeSlots.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))GetContactAttributeSlots.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UsoIdentifierNamespace.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))GetContactSlots.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, MEMORY[0x263F72CB0], &lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, MEMORY[0x263F72CB0]);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, MEMORY[0x263F72A78], &lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues, MEMORY[0x263F72A78]);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (qword_22D5A2E18[a1] == qword_22D5A2E18[a2] && qword_22D5A2E40[a1] == qword_22D5A2E40[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0x656C706F6570;
  }
  else {
    char v3 = 0x746361746E6F63;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000;
  }
  else {
    uint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    id v5 = 0x656C706F6570;
  }
  else {
    id v5 = 0x746361746E6F63;
  }
  if (a2) {
    uint64_t v6 = 0xE600000000000000;
  }
  else {
    uint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v3;

  if (*(void *)&aAddress_4[8 * a1] == *(void *)&aAddress_4[8 * a2] && qword_22D5A2EB0[a1] == qword_22D5A2EB0[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0x5373736572646461;
  }
  else {
    char v3 = 0x6C6562616CLL;
  }
  if (v2) {
    uint64_t v4 = 0xE500000000000000;
  }
  else {
    uint64_t v4 = 0xED0000676E697274;
  }
  if (a2) {
    id v5 = 0x5373736572646461;
  }
  else {
    id v5 = 0x6C6562616CLL;
  }
  if (a2) {
    uint64_t v6 = 0xED0000676E697274;
  }
  else {
    uint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0x4873736572646461;
  }
  else {
    char v3 = 0x4C73736572646461;
  }
  if (v2) {
    uint64_t v4 = 0xEC0000006C656261;
  }
  else {
    uint64_t v4 = 0xED0000656C646E61;
  }
  if (a2) {
    id v5 = 0x4873736572646461;
  }
  else {
    id v5 = 0x4C73736572646461;
  }
  if (a2) {
    uint64_t v6 = 0xED0000656C646E61;
  }
  else {
    uint64_t v6 = 0xEC0000006C656261;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0xD000000000000015;
  }
  else {
    char v3 = 0x7961646874726962;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000;
  }
  else {
    uint64_t v4 = 0x800000022D5A68F0;
  }
  if (a2) {
    id v5 = 0xD000000000000015;
  }
  else {
    id v5 = 0x7961646874726962;
  }
  if (a2) {
    uint64_t v6 = 0x800000022D5A68F0;
  }
  else {
    uint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0x6E6148656E6F6870;
  }
  else {
    char v3 = 0x62614C656E6F6870;
  }
  if (v2) {
    uint64_t v4 = 0xEA00000000006C65;
  }
  else {
    uint64_t v4 = 0xEB00000000656C64;
  }
  if (a2) {
    id v5 = 0x6E6148656E6F6870;
  }
  else {
    id v5 = 0x62614C656E6F6870;
  }
  if (a2) {
    uint64_t v6 = 0xEB00000000656C64;
  }
  else {
    uint64_t v6 = 0xEA00000000006C65;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  id v2 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 0x6E61486C69616D65;
  }
  else {
    char v3 = 0x62614C6C69616D65;
  }
  if (v2) {
    uint64_t v4 = 0xEA00000000006C65;
  }
  else {
    uint64_t v4 = 0xEB00000000656C64;
  }
  if (a2) {
    id v5 = 0x6E61486C69616D65;
  }
  else {
    id v5 = 0x62614C6C69616D65;
  }
  if (a2) {
    uint64_t v6 = 0xEB00000000656C64;
  }
  else {
    uint64_t v6 = 0xEA00000000006C65;
  }
  if (v3 == v5 && v4 == v6) {
    id v8 = 1;
  }
  else {
    id v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if (v5 == ((uint64_t (*)(uint64_t))a3)(a2) && v7 == v8) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  a3(0);
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(a4, a5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v12 == v10 && v13 == v11) {
    char v8 = 1;
  }
  else {
    char v8 = OUTLINED_FUNCTION_5_22();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t ContactNLv3Intent.init(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_22D5A21F0;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  uint64_t v13 = static ContactNLv3Intent.personNode;
  uint64_t v14 = type metadata accessor for NonTerminalOntologyNode();
  uint64_t v15 = MEMORY[0x263F722A0];
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = v15;
  *(void *)(v12 + 32) = v13;
  uint64_t v16 = one-time initialization token for contactId;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static ContactNLv3Intent.contactId;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v12 + 96) = v18;
  uint64_t v19 = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v12 + 104) = v19;
  *(void *)(v12 + 72) = v17;
  uint64_t v20 = one-time initialization token for contactType;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = static ContactNLv3Intent.contactType;
  *(void *)(v12 + 136) = v18;
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 112) = v21;
  uint64_t v22 = one-time initialization token for contactReference;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = static ContactNLv3Intent.contactReference;
  *(void *)(v12 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue>);
  *(void *)(v12 + 184) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue>);
  *(void *)(v12 + 152) = v23;
  uint64_t v24 = one-time initialization token for contactAttributes;
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = static ContactNLv3Intent.contactAttributes;
  *(void *)(v12 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue>);
  *(void *)(v12 + 224) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue>);
  *(void *)(v12 + 192) = v25;
  uint64_t v26 = one-time initialization token for contactVerb;
  swift_retain();
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v27 = static ContactNLv3Intent.contactVerb;
  *(void *)(v12 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue>);
  *(void *)(v12 + 264) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue>);
  *(void *)(v12 + 232) = v27;
  uint64_t v28 = one-time initialization token for contactNoun;
  swift_retain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v29 = static ContactNLv3Intent.contactNoun;
  *(void *)(v12 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue>);
  *(void *)(v12 + 304) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue>);
  *(void *)(v12 + 272) = v29;
  uint64_t v30 = one-time initialization token for contactConfirmation;
  swift_retain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = static ContactNLv3Intent.contactConfirmation;
  *(void *)(v12 + 336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue>);
  *(void *)(v12 + 344) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue>);
  *(void *)(v12 + 312) = v31;
  uint64_t v32 = one-time initialization token for contactAgeDate;
  swift_retain();
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v33 = static ContactNLv3Intent.contactAgeDate;
  *(void *)(v12 + 376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>);
  *(void *)(v12 + 384) = lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<TerminalElement.DateTimeValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>);
  *(void *)(v12 + 352) = v33;
  uint64_t v34 = one-time initialization token for setNickName;
  swift_retain();
  if (v34 != -1) {
    swift_once();
  }
  uint64_t v35 = static ContactNLv3Intent.setNickName;
  *(void *)(v12 + 416) = v18;
  *(void *)(v12 + 424) = v19;
  *(void *)(v12 + 392) = v35;
  uint64_t v36 = one-time initialization token for setRelationship;
  swift_retain();
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v37 = static ContactNLv3Intent.setRelationship;
  *(void *)(v12 + 456) = v18;
  *(void *)(v12 + 464) = v19;
  *(void *)(v12 + 432) = v37;
  uint64_t v38 = one-time initialization token for removeRelationship;
  swift_retain();
  if (v38 != -1) {
    swift_once();
  }
  uint64_t v39 = static ContactNLv3Intent.removeRelationship;
  *(void *)(v12 + 496) = v18;
  *(void *)(v12 + 504) = v19;
  *(void *)(v12 + 472) = v39;
  type metadata accessor for DomainOntologyNode();
  swift_allocObject();
  swift_retain();
  *uint64_t v11 = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_22D5A07F0;
  *(void *)(v40 + 32) = 0x656D616E20796DLL;
  *(void *)(v40 + 40) = 0xE700000000000000;
  *(void *)(v40 + 48) = 0x6D616E206B63696ELL;
  *(void *)(v40 + 56) = 0xE900000000000065;
  *(void *)(v40 + 64) = 0x6D616E206C6C7566;
  *(void *)(v40 + 72) = 0xE900000000000065;
  *(void *)(v40 + 80) = 0x6D616E207473616CLL;
  *(void *)(v40 + 88) = 0xE900000000000065;
  *(void *)(v40 + 96) = 0x616E207473726966;
  *(void *)(v40 + 104) = 0xEA0000000000656DLL;
  *(void *)(v40 + 112) = 0x6E20656C6464696DLL;
  *(void *)(v40 + 120) = 0xEB00000000656D61;
  uint64_t v41 = *(int *)(type metadata accessor for ContactNLv3Intent() + 24);
  strcpy((char *)(v40 + 128), "pronounce name");
  *(unsigned char *)(v40 + 143) = -18;
  *(uint64_t *)((char *)v11 + v41) = v40;
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_41_5();
  return v45(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10);
}

void ContactNLv3Intent.person.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_10();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v26 = OUTLINED_FUNCTION_10_0(v25);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v31 = v30;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_14_14();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&a9 - v34;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  OUTLINED_FUNCTION_6_3((uint64_t)v28, 1, v29);
  if (v36)
  {
    outlined destroy of SemanticValue?((uint64_t)v28, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    uint64_t v37 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v35, v28, v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v20, v35, v29);
    type metadata accessor for PersonOntologyNode();
    swift_allocObject();
    PersonOntologyNode.init(name:multicardinal:)();
    PersonIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v29);
    uint64_t v37 = 0;
  }
  uint64_t v38 = type metadata accessor for PersonIntentNode();
  __swift_storeEnumTagSinglePayload(v24, v37, 1, v38);
  OUTLINED_FUNCTION_8();
}

void ContactNLv3Constants.rawValue.getter()
{
  switch(*v0)
  {
    case 0x15:
      OUTLINED_FUNCTION_55_3();
      break;
    default:
      return;
  }
}

uint64_t ContactNLv3Intent.hasFreshVerb.getter()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v4 = OUTLINED_FUNCTION_10_0(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_60();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_5_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.OriginalValue?);
  uint64_t v8 = OUTLINED_FUNCTION_10_0(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
  uint64_t v9 = type metadata accessor for TerminalIntentNode();
  OUTLINED_FUNCTION_6_3(v2, 1, v9);
  if (v15)
  {
    uint64_t v10 = &demangling cache variable for type metadata for TerminalIntentNode?;
    uint64_t v11 = v2;
LABEL_12:
    outlined destroy of SemanticValue?(v11, v10);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriContacts);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, v21))
    {
      char v24 = 0;
      goto LABEL_18;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_22D49E000, v20, v21, "#hasFreshVerb no isFresh, return false", v22, 2u);
    char v24 = 0;
    goto LABEL_16;
  }
  uint64_t v12 = TerminalIntentNode.elements.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v13();
  specialized BidirectionalCollection.last.getter(v12, v1);
  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for TerminalElement();
  OUTLINED_FUNCTION_6_3(v1, 1, v14);
  if (v15)
  {
    uint64_t v10 = &demangling cache variable for type metadata for TerminalElement?;
    uint64_t v11 = v1;
    goto LABEL_12;
  }
  TerminalElement.originalValue.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v16();
  uint64_t v17 = type metadata accessor for TerminalElement.OriginalValue();
  OUTLINED_FUNCTION_6_3(v0, 1, v17);
  if (v18)
  {
    uint64_t v10 = &demangling cache variable for type metadata for TerminalElement.OriginalValue?;
    uint64_t v11 = v0;
    goto LABEL_12;
  }
  char v24 = TerminalElement.OriginalValue.isFresh.getter();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v25();
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.siriContacts);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v27))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22D49E000, v20, v27, "#hasFreshVerb isFresh: %{BOOL}d", v22, 8u);
LABEL_16:
    MEMORY[0x230F85DE0](v22, -1, -1);
  }
LABEL_18:

  return v24 & 1;
}

uint64_t ContactNLv3Intent.isModifyOtherContactNickname.getter()
{
  uint64_t v3 = v1;
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_14_14();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v14[-v7];
  v14[0] = 44;
  char v9 = ContactNLv3Intent.containsAttribute(_:)();
  outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v8);
  if ((v9 & 1) == 0)
  {
    if (one-time initialization token for setNickName != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_50_4();
    IntentNodeTraversable.value<A>(forNode:)();
    if (!v15)
    {
      outlined destroy of ContactNLv3Intent((uint64_t)v8);
      OUTLINED_FUNCTION_20_8();
LABEL_12:
      outlined destroy of ContactNLv3Intent(v2);
      OUTLINED_FUNCTION_12_10();
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v8);
  OUTLINED_FUNCTION_20_8();
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_50_4();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v14[0] == 17) {
    goto LABEL_12;
  }
  char v10 = specialized == infix<A>(_:_:)(v14[0], 4, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  outlined destroy of ContactNLv3Intent(v2);
  OUTLINED_FUNCTION_12_10();
  if ((v10 & 1) == 0)
  {
LABEL_13:
    char v12 = 0;
    goto LABEL_14;
  }
  ContactNLv3Intent.isMeCardRequest.getter();
  char v12 = v11 ^ 1;
LABEL_14:
  outlined destroy of ContactNLv3Intent(v0);
  return v12 & 1;
}

uint64_t ContactNLv3Intent.hasAddressAttribute.getter()
{
  uint64_t v0 = static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter();
  uint64_t v1 = v0[2];
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v4 = *((char *)v0 + v2 + 32);
      uint64_t v5 = *(void *)&aAddress_5[8 * v4];
      uint64_t v6 = *(void *)&aAnyAddrgymAddr_0[8 * v4 + 40];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, (uint64_t)v3);
        uint64_t v3 = v10;
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1, (uint64_t)v3);
        uint64_t v3 = v11;
      }
      ++v2;
      v3[2] = v8 + 1;
      char v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  char v12 = ContactNLv3Intent.containsAttribute(_:)(v3);
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t ContactNLv3Intent.hasAgeAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(52) & 1;
}

BOOL ContactNLv3Intent.hasEmailAttribute.getter()
{
  return ContactNLv3Intent.hasEmailAttribute.getter(&one-time initialization token for emailAttributes, (void **)&static ContactNLv3Intent.emailAttributes);
}

BOOL ContactNLv3Intent.hasPhoneAttribute.getter()
{
  return ContactNLv3Intent.hasEmailAttribute.getter(&one-time initialization token for phoneAttributes, (void **)&static ContactNLv3Intent.phoneAttributes);
}

BOOL ContactNLv3Intent.hasEmailAttribute.getter(void *a1, void **a2)
{
  uint64_t v5 = type metadata accessor for ContactNLv3Intent();
  uint64_t v6 = OUTLINED_FUNCTION_10_0(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15_2();
  if (*a1 != -1)
  {
    OUTLINED_FUNCTION_28_9();
    swift_once();
  }
  unint64_t v7 = *a2;
  char v8 = ContactNLv3Intent.containsAttribute(_:)(v7);
  OUTLINED_FUNCTION_34_10();
  BOOL v9 = (v8 & 1) != 0 || ContactNLv3Intent.containsContactType(_:)((Swift::OpaquePointer)v7);
  outlined destroy of ContactNLv3Intent(v2);
  return v9;
}

uint64_t ContactNLv3Intent.hasCompanyAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(50) & 1;
}

uint64_t ContactNLv3Intent.hasBirthdayAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(51) & 1;
}

uint64_t ContactNLv3Intent.hasAnniversaryAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(53) & 1;
}

uint64_t ContactNLv3Intent.isShowContactCard.getter()
{
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_2();
  if (one-time initialization token for contactNoun != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v6 == 2)
  {
    OUTLINED_FUNCTION_34_10();
LABEL_10:
    outlined destroy of ContactNLv3Intent(v0);
    char v3 = 0;
    return v3 & 1;
  }
  char v2 = specialized == infix<A>(_:_:)(v6 & 1, 0);
  OUTLINED_FUNCTION_34_10();
  if ((v2 & 1) == 0) {
    goto LABEL_10;
  }
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v5 == 17) {
    char v3 = 0;
  }
  else {
    char v3 = specialized == infix<A>(_:_:)(v5, 0, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  }
  outlined destroy of ContactNLv3Intent(v0);
  return v3 & 1;
}

void ContactNLv3Intent.isMeCardRequest.getter()
{
  OUTLINED_FUNCTION_10();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v3 = OUTLINED_FUNCTION_10_0(v2);
  MEMORY[0x270FA5388](v3);
  unsigned __int8 v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_14_14();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_24_9();
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  OUTLINED_FUNCTION_6_3((uint64_t)v5, 1, v6);
  if (v19)
  {
    outlined destroy of SemanticValue?((uint64_t)v5, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    if (one-time initialization token for contactReference != -1) {
      swift_once();
    }
    IntentNodeTraversable.value<A>(forNode:)();
    if (LOBYTE(v23[0]) != 38) {
      specialized == infix<A>(_:_:)(LOBYTE(v23[0]), 35, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
    }
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v0, v5, v6);
  uint64_t v11 = *(void *)(NonTerminalIntentNode.childNodes.getter() + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v0, v6);
  if (v11 != 1)
  {
    uint64_t v20 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_2_16();
    v20();
    ((void (*)(uint64_t, uint64_t))v20)(v0, v6);
LABEL_19:
    OUTLINED_FUNCTION_8();
    return;
  }
  uint64_t v12 = NonTerminalIntentNode.childNodes.getter();
  if (*(void *)(v12 + 16))
  {
    outlined init with copy of DeviceState(v12 + 32, (uint64_t)v23);
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    uint64_t v13 = dispatch thunk of IntentNode.ontologyNodeName.getter();
    uint64_t v15 = v14;
    type metadata accessor for PersonOntologyNode();
    static PersonOntologyNode.personSelfReferenceNode.getter();
    uint64_t v16 = TerminalOntologyNode.name.getter();
    uint64_t v18 = v17;
    swift_release();
    BOOL v19 = v13 == v16 && v15 == v18;
    if (!v19) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v21 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_2_16();
    v21();
    OUTLINED_FUNCTION_2_16();
    v21();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    goto LABEL_19;
  }
  __break(1u);
}

void ContactNLv3Intent.hasModifyVerb.getter()
{
  OUTLINED_FUNCTION_10();
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_13();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - v5;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_24_9();
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_37_9();
  IntentNodeTraversable.value<A>(forNode:)();
  int v7 = v14;
  OUTLINED_FUNCTION_47_2();
  if (v7 != 17)
  {
    OUTLINED_FUNCTION_37_9();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v13 == 17)
    {
      OUTLINED_FUNCTION_5_12();
    }
    else
    {
      char v8 = specialized == infix<A>(_:_:)(v13, 4, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
      OUTLINED_FUNCTION_5_12();
      if (v8)
      {
        outlined destroy of ContactNLv3Intent((uint64_t)v6);
        OUTLINED_FUNCTION_12_10();
        goto LABEL_14;
      }
    }
    OUTLINED_FUNCTION_37_9();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v12 == 17)
    {
      outlined destroy of ContactNLv3Intent((uint64_t)v6);
      OUTLINED_FUNCTION_12_10();
      goto LABEL_12;
    }
    char v9 = specialized == infix<A>(_:_:)(v12, 15, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
    outlined destroy of ContactNLv3Intent((uint64_t)v6);
    OUTLINED_FUNCTION_12_10();
    if ((v9 & 1) == 0)
    {
LABEL_12:
      IntentNodeTraversable.value<A>(forNode:)();
      if (v11 != 17) {
        specialized == infix<A>(_:_:)(v11, 13, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
      }
    }
LABEL_14:
    outlined destroy of ContactNLv3Intent(v0);
    outlined destroy of ContactNLv3Intent(v1);
    goto LABEL_15;
  }
  outlined destroy of ContactNLv3Intent(v1);
LABEL_15:
  OUTLINED_FUNCTION_8();
}

void ContactNLv3Intent.isPronounceName.getter()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;

  OUTLINED_FUNCTION_42_8();
  uint64_t v2 = v1;
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_5_0();
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  OUTLINED_FUNCTION_47_2();
  if (v5 != 17)
  {
    IntentNodeTraversable.value<A>(forNode:)();
    if (v4 != 17) {
      specialized == infix<A>(_:_:)(v4, v2, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
    }
  }
  outlined destroy of ContactNLv3Intent(v0);
  OUTLINED_FUNCTION_41_5();
}

void ContactNLv3Intent.isLearnPronunciation.getter()
{
}

void ContactNLv3Intent.NLContactVerbValue.rawValue.getter()
{
  switch(*v0)
  {
    case 0xC:
    case 0xD:
      OUTLINED_FUNCTION_12_3();
      break;
    default:
      return;
  }
}

uint64_t ContactNLv3Intent.requestedContactAttribute.getter()
{
  ContactNLv3Intent.hasFullNameAttribute.getter();
  if (v0) {
    return 9;
  }
  if (OUTLINED_FUNCTION_17_13(41)) {
    return 7;
  }
  if (ContactNLv3Intent.containsAttribute(_:)()) {
    return 6;
  }
  if (ContactNLv3Intent.containsAttribute(_:)()) {
    return 8;
  }
  if (ContactNLv3Intent.hasAddressAttribute.getter()) {
    return 3;
  }
  if (ContactNLv3Intent.containsAttribute(_:)()) {
    return 4;
  }
  if (ContactNLv3Intent.containsAttribute(_:)()) {
    return 5;
  }
  if (ContactNLv3Intent.hasEmailAttribute.getter()) {
    return 1;
  }
  if (ContactNLv3Intent.hasPhoneAttribute.getter()) {
    return 2;
  }
  return 0;
}

uint64_t ContactNLv3Intent.requestedContactAttributeLabel.getter()
{
  if (one-time initialization token for contactType != -1) {
LABEL_40:
  }
    swift_once();
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v20)
  {
    if (v19 != 0x656E6F6870 || v20 != 0xE500000000000000)
    {
      OUTLINED_FUNCTION_28_9();
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v2 = v19 == 0x6C69616D65 && v20 == 0xE500000000000000;
      BOOL v3 = v2;
      if ((v1 & 1) == 0 && !v3)
      {
        OUTLINED_FUNCTION_28_9();
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return OUTLINED_FUNCTION_28_9();
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for contactAttributes != -1) {
    swift_once();
  }
  uint64_t v4 = IntentNodeTraversable.values<A>(forNode:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    if (one-time initialization token for nonHandleLabelAttributes != -1) {
      swift_once();
    }
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 >= *(void *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v7 = static ContactNLv3Intent.nonHandleLabelAttributes;
      uint64_t v8 = *(void *)(static ContactNLv3Intent.nonHandleLabelAttributes + 16);
      if (!v8) {
        break;
      }
      ++v6;
      swift_bridgeObjectRetain_n();
      uint64_t v9 = 0;
      while (1)
      {
        LOBYTE(v19) = *(unsigned char *)(v7 + v9 + 32);
        ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
        uint64_t v11 = v10;
        uint64_t v13 = v12;
        ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
        if (v11 == v15 && v13 == v14) {
          break;
        }
        OUTLINED_FUNCTION_28_9();
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_34;
        }
        if (v8 == ++v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_34:
      swift_bridgeObjectRelease_n();
      if (v6 == v5) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
LABEL_36:
    ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_28_9();
}

uint64_t ContactNLv3Intent.requestedAgeDate.getter()
{
  return static DateTimeUtil.getRequestedAgeDateTime(from:)(v0);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Int_optional __swiftcall ContactNLv3Intent.arrayIndexForReference(arrayLength:)(Swift::Int arrayLength)
{
  if (one-time initialization token for contactReference != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_52_4();
  Swift::Int v2 = v4;
  Swift::Bool v3 = 0;
  switch(v4)
  {
    case 0u:
      goto LABEL_40;
    case 1u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 1;
      goto LABEL_40;
    case 2u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 2;
      goto LABEL_40;
    case 3u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 3;
      goto LABEL_40;
    case 4u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 4;
      goto LABEL_40;
    case 5u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 5;
      goto LABEL_40;
    case 6u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 6;
      goto LABEL_40;
    case 7u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 7;
      goto LABEL_40;
    case 8u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 8;
      goto LABEL_40;
    case 9u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 9;
      goto LABEL_40;
    case 0xAu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 10;
      goto LABEL_40;
    case 0xBu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 11;
      goto LABEL_40;
    case 0xCu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 12;
      goto LABEL_40;
    case 0xDu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 13;
      goto LABEL_40;
    case 0xEu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 14;
      goto LABEL_40;
    case 0xFu:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 15;
      goto LABEL_40;
    case 0x10u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 16;
      goto LABEL_40;
    case 0x11u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 17;
      goto LABEL_40;
    case 0x12u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 18;
      goto LABEL_40;
    case 0x13u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 19;
      goto LABEL_40;
    case 0x14u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 20;
      goto LABEL_40;
    case 0x15u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 21;
      goto LABEL_40;
    case 0x16u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 22;
      goto LABEL_40;
    case 0x17u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 23;
      goto LABEL_40;
    case 0x18u:
      Swift::Bool v3 = 0;
      Swift::Int v2 = 24;
      goto LABEL_40;
    case 0x19u:
      Swift::Int v2 = arrayLength - 1;
      if (!__OFSUB__(arrayLength, 1)) {
        goto LABEL_36;
      }
      __break(1u);
      goto LABEL_32;
    case 0x1Du:
LABEL_32:
      Swift::Int v2 = arrayLength - 2;
      if (!__OFSUB__(arrayLength, 2)) {
        goto LABEL_36;
      }
      __break(1u);
LABEL_35:
      Swift::Int v2 = arrayLength - 3;
      if (__OFSUB__(arrayLength, 3))
      {
        __break(1u);
        JUMPOUT(0x22D521BB8);
      }
LABEL_36:
      Swift::Bool v3 = 0;
LABEL_40:
      result.SiriContactsIntents::SiriKitContactUnsupportedReason value = v2;
      result.is_nil = v3;
      return result;
    case 0x1Eu:
      goto LABEL_35;
    default:
      Swift::Int v2 = 0;
      Swift::Bool v3 = 1;
      goto LABEL_40;
  }
}

Swift::String __swiftcall ContactNLv3Constants.boundValue(_:)(Swift::String a1)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  ContactNLv3Constants.rawValue.getter();
  Swift::String v1 = String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  Swift::String v3 = String.uppercased()();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = 0xD000000000000012;
  uint64_t v5 = (void *)0x800000022D5A83F0;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

SiriContactsIntents::ContactNLv3Constants_optional __swiftcall ContactNLv3Constants.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_33_6();
  uint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = swift_bridgeObjectRelease();
  char v4 = 0;
  char v5 = 6;
  switch(v2)
  {
    case 0:
      goto LABEL_7;
    case 1:
      char v4 = 1;
      goto LABEL_7;
    case 2:
      char v4 = 2;
      goto LABEL_7;
    case 3:
      char v4 = 3;
      goto LABEL_7;
    case 4:
      char v4 = 4;
      goto LABEL_7;
    case 5:
      char v4 = 5;
LABEL_7:
      char v5 = v4;
      break;
    case 6:
      break;
    case 7:
      char v5 = 7;
      break;
    case 8:
      char v5 = 8;
      break;
    case 9:
      char v5 = 9;
      break;
    case 10:
      char v5 = 10;
      break;
    case 11:
      char v5 = 11;
      break;
    case 12:
      char v5 = 12;
      break;
    case 13:
      char v5 = 13;
      break;
    case 14:
      char v5 = 14;
      break;
    case 15:
      char v5 = 15;
      break;
    case 16:
      char v5 = 16;
      break;
    case 17:
      char v5 = 17;
      break;
    case 18:
      char v5 = 18;
      break;
    case 19:
      char v5 = 19;
      break;
    case 20:
      char v5 = 20;
      break;
    case 21:
      char v5 = 21;
      break;
    case 22:
      char v5 = 22;
      break;
    case 23:
      char v5 = 23;
      break;
    default:
      char v5 = 24;
      break;
  }
  *Swift::String v1 = v5;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Constants(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))ContactNLv3Constants.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Constants()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Constants(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Constants()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Constants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Constants(Swift::String *a1)
{
  return ContactNLv3Constants.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Constants(void *a1@<X8>)
{
  ContactNLv3Constants.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t one-time initialization function for personNode()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D59FD50;
  uint64_t v1 = type metadata accessor for PersonOntologyNode();
  swift_allocObject();
  uint64_t v2 = PersonOntologyNode.init(name:multicardinal:)();
  uint64_t v3 = MEMORY[0x263F722A0];
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 32) = v2;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static ContactNLv3Intent.personNode = result;
  return result;
}

uint64_t one-time initialization function for contactId(uint64_t a1)
{
  return one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x49746361746E6F63, 0xE900000000000064, &static ContactNLv3Intent.contactId);
}

uint64_t one-time initialization function for contactType(uint64_t a1)
{
  return OUTLINED_FUNCTION_10_19(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x54746361746E6F63, 6647929, &static ContactNLv3Intent.contactType);
}

uint64_t one-time initialization function for contactReference(uint64_t a1)
{
  return OUTLINED_FUNCTION_9_15(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue>, 16, 0x800000022D5A6990, &static ContactNLv3Intent.contactReference);
}

uint64_t one-time initialization function for contactAttributes(uint64_t a1)
{
  return OUTLINED_FUNCTION_9_15(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue>, 17, 0x800000022D5A6630, &static ContactNLv3Intent.contactAttributes);
}

uint64_t one-time initialization function for contactVerb(uint64_t a1)
{
  return OUTLINED_FUNCTION_10_19(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue>, 0x56746361746E6F63, 6451813, &static ContactNLv3Intent.contactVerb);
}

uint64_t one-time initialization function for contactNoun(uint64_t a1)
{
  return OUTLINED_FUNCTION_10_19(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue>, 0x4E746361746E6F63, 7239023, &static ContactNLv3Intent.contactNoun);
}

uint64_t one-time initialization function for contactConfirmation(uint64_t a1)
{
  return OUTLINED_FUNCTION_9_15(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue>, 19, 0x800000022D5A6970, &static ContactNLv3Intent.contactConfirmation);
}

uint64_t one-time initialization function for contactAgeDate(uint64_t a1)
{
  return one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>, 0x41746361746E6F63, 0xEE00657461446567, &static ContactNLv3Intent.contactAgeDate);
}

uint64_t one-time initialization function for setNickName(uint64_t a1)
{
  return OUTLINED_FUNCTION_10_19(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x4E6B63694E746573, 6647137, &static ContactNLv3Intent.setNickName);
}

uint64_t one-time initialization function for setRelationship(uint64_t a1)
{
  return one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x74616C6552746573, 0xEF706968736E6F69, &static ContactNLv3Intent.setRelationship);
}

uint64_t one-time initialization function for removeRelationship(uint64_t a1)
{
  return OUTLINED_FUNCTION_9_15(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 18, 0x800000022D5A6AA0, &static ContactNLv3Intent.removeRelationship);
}

uint64_t one-time initialization function for contactId(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  *a5 = result;
  return result;
}

uint64_t ContactNLv3Intent.domainOntologyNode.getter()
{
  return swift_retain();
}

uint64_t ContactNLv3Intent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ContactNLv3Intent() + 20);
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_15_0();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t ContactNLv3Intent.intent.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ContactNLv3Intent() + 20);
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_15_0();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  return v6(v3, a1, v4);
}

uint64_t (*ContactNLv3Intent.intent.modify())(void)
{
  return destructiveProjectEnumData for SpecifyingContactAddressType;
}

uint64_t ContactNLv3Intent.NLContactAttributesValue.attributeTypeAndLabel()()
{
  uint64_t result = 2;
  switch(*v0)
  {
    case 0:
      return 2;
    case 1:
      return 2;
    case 2:
    case 3:
    case 4:
    case 0xC:
    case 0xE:
    case 0x10:
      return 2;
    case 5:
    case 6:
    case 7:
    case 8:
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      return 2;
    case 9:
      OUTLINED_FUNCTION_44_5();
      return 2;
    case 0xA:
      return result;
    case 0xB:
      OUTLINED_FUNCTION_25_11();
      return 2;
    case 0x1E:
      return 1;
    case 0x1F:
      return 1;
    case 0x20:
      return 1;
    case 0x21:
      OUTLINED_FUNCTION_44_5();
      return 1;
    case 0x22:
      OUTLINED_FUNCTION_25_11();
      return 1;
    case 0x23:
      return 3;
    case 0x24:
      return 3;
    case 0x25:
      OUTLINED_FUNCTION_25_11();
      goto LABEL_19;
    case 0x26:
    case 0x30:
LABEL_19:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void ContactNLv3Intent.NLContactAttributesValue.rawValue.getter()
{
  switch(*v0)
  {
    case 9:
    case 0xE:
      OUTLINED_FUNCTION_55_3();
      break;
    case 0x2E:
    case 0x2F:
    case 0x42:
      OUTLINED_FUNCTION_12_3();
      break;
    default:
      return;
  }
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttributesValue_optional __swiftcall ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_33_6();
  uint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = swift_bridgeObjectRelease();
  char v4 = 0;
  char v5 = 52;
  switch(v2)
  {
    case 0:
      goto LABEL_54;
    case 1:
      char v4 = 1;
      goto LABEL_54;
    case 2:
      char v4 = 2;
      goto LABEL_54;
    case 3:
      char v4 = 3;
      goto LABEL_54;
    case 4:
      char v4 = 4;
      goto LABEL_54;
    case 5:
      char v4 = 5;
      goto LABEL_54;
    case 6:
      char v4 = 6;
      goto LABEL_54;
    case 7:
      char v4 = 7;
      goto LABEL_54;
    case 8:
      char v4 = 8;
      goto LABEL_54;
    case 9:
      char v4 = 9;
      goto LABEL_54;
    case 10:
      char v4 = 10;
      goto LABEL_54;
    case 11:
      char v4 = 11;
      goto LABEL_54;
    case 12:
      char v4 = 12;
      goto LABEL_54;
    case 13:
      char v4 = 13;
      goto LABEL_54;
    case 14:
      char v4 = 14;
      goto LABEL_54;
    case 15:
      char v4 = 15;
      goto LABEL_54;
    case 16:
      char v4 = 16;
      goto LABEL_54;
    case 17:
      char v4 = 17;
      goto LABEL_54;
    case 18:
      char v4 = 18;
      goto LABEL_54;
    case 19:
      char v4 = 19;
      goto LABEL_54;
    case 20:
      char v4 = 20;
      goto LABEL_54;
    case 21:
      char v4 = 21;
      goto LABEL_54;
    case 22:
      char v4 = 22;
      goto LABEL_54;
    case 23:
      char v4 = 23;
      goto LABEL_54;
    case 24:
      char v4 = 24;
      goto LABEL_54;
    case 25:
      char v4 = 25;
      goto LABEL_54;
    case 26:
      char v4 = 26;
      goto LABEL_54;
    case 27:
      char v4 = 27;
      goto LABEL_54;
    case 28:
      char v4 = 28;
      goto LABEL_54;
    case 29:
      char v4 = 29;
      goto LABEL_54;
    case 30:
      char v4 = 30;
      goto LABEL_54;
    case 31:
      char v4 = 31;
      goto LABEL_54;
    case 32:
      char v4 = 32;
      goto LABEL_54;
    case 33:
      char v4 = 33;
      goto LABEL_54;
    case 34:
      char v4 = 34;
      goto LABEL_54;
    case 35:
      char v4 = 35;
      goto LABEL_54;
    case 36:
      char v4 = 36;
      goto LABEL_54;
    case 37:
      char v4 = 37;
      goto LABEL_54;
    case 38:
      char v4 = 38;
      goto LABEL_54;
    case 39:
      char v4 = 39;
      goto LABEL_54;
    case 40:
      char v4 = 40;
      goto LABEL_54;
    case 41:
      char v4 = 41;
      goto LABEL_54;
    case 42:
      char v4 = 42;
      goto LABEL_54;
    case 43:
      char v4 = 43;
      goto LABEL_54;
    case 44:
      char v4 = 44;
      goto LABEL_54;
    case 45:
      char v4 = 45;
      goto LABEL_54;
    case 46:
      char v4 = 46;
      goto LABEL_54;
    case 47:
      char v4 = 47;
      goto LABEL_54;
    case 48:
      char v4 = 48;
      goto LABEL_54;
    case 49:
      char v4 = 49;
      goto LABEL_54;
    case 50:
      char v4 = 50;
      goto LABEL_54;
    case 51:
      char v4 = 51;
LABEL_54:
      char v5 = v4;
      break;
    case 52:
      break;
    case 53:
      char v5 = 53;
      break;
    case 54:
      char v5 = 54;
      break;
    case 55:
      char v5 = 55;
      break;
    case 56:
      char v5 = 56;
      break;
    case 57:
      char v5 = 57;
      break;
    case 58:
      char v5 = 58;
      break;
    case 59:
      char v5 = 59;
      break;
    case 60:
      char v5 = 60;
      break;
    case 61:
      char v5 = 61;
      break;
    case 62:
      char v5 = 62;
      break;
    case 63:
      char v5 = 63;
      break;
    case 64:
      char v5 = 64;
      break;
    case 65:
      char v5 = 65;
      break;
    case 66:
      char v5 = 66;
      break;
    case 67:
      char v5 = 67;
      break;
    case 68:
      char v5 = 68;
      break;
    case 69:
      char v5 = 69;
      break;
    default:
      char v5 = 70;
      break;
  }
  *uint64_t v1 = v5;
  return result;
}

void *static ContactNLv3Intent.NLContactAttributesValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactAttributesValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactAttributesValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactAttributesValue.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactAttributesValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactAttributesValue(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactAttributesValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttributesValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactAttributesValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactAttributesValue(void *a1@<X8>)
{
  ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactAttributesValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactAttributesValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

{
  void (*v0)(void);
  void (*v1)(void);
  void (*v2)(void);
  void (*v3)(void);
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_42_8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v4();
  v3();
  v1();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_41_5();
  return MEMORY[0x270F6DF80](v5, v6, v7, v8, v9);
}

SiriContactsIntents::ContactNLv3Intent::NLContactVerbValue_optional __swiftcall ContactNLv3Intent.NLContactVerbValue.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_27_12();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = OUTLINED_FUNCTION_54_4();
  char v4 = 17;
  if (v2 < 0x11) {
    char v4 = v2;
  }
  *uint64_t v1 = v4;
  return result;
}

void *static ContactNLv3Intent.NLContactVerbValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactVerbValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactVerbValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactVerbValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactVerbValue(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactVerbValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactVerbValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactVerbValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactVerbValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactVerbValue(void *a1@<X8>)
{
  ContactNLv3Intent.NLContactVerbValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactVerbValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactVerbValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactVerbValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

SiriContactsIntents::ContactNLv3Intent::NLContactNounValue_optional __swiftcall ContactNLv3Intent.NLContactNounValue.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_27_12();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactNLv3Intent.NLContactNounValue.init(rawValue:), v4);
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = OUTLINED_FUNCTION_54_4();
  if (v3 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v3) {
    char v6 = 0;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static ContactNLv3Intent.NLContactNounValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactNounValue.allCases.getter;
}

uint64_t ContactNLv3Intent.NLContactNounValue.rawValue.getter()
{
  if (*v0) {
    return 0x656C706F6570;
  }
  else {
    return 0x746361746E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactNounValue(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactNounValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactNounValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactNounValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactNounValue.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactNounValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactNLv3Intent.NLContactNounValue.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactNounValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactNounValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

void ContactNLv3Intent.NLContactConfirmationValue.rawValue.getter()
{
}

SiriContactsIntents::ContactNLv3Intent::NLContactConfirmationValue_optional __swiftcall ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_27_12();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:), v4);
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = OUTLINED_FUNCTION_54_4();
  char v6 = 5;
  if (v3 < 5) {
    char v6 = v3;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactConfirmationValue(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactConfirmationValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactConfirmationValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactConfirmationValue(void *a1@<X8>)
{
  ContactNLv3Intent.NLContactConfirmationValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactConfirmationValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttribute_optional __swiftcall ContactNLv3Intent.NLContactAttribute.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_27_12();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactNLv3Intent.NLContactAttribute.init(rawValue:), v4);
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = OUTLINED_FUNCTION_54_4();
  char v6 = 9;
  if (v3 < 9) {
    char v6 = v3;
  }
  *uint64_t v2 = v6;
  return result;
}

void ContactNLv3Intent.NLContactAttribute.rawValue.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactAttribute(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactAttribute()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactAttribute()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactAttribute()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactAttribute(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactAttribute.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactAttribute(void *a1@<X8>)
{
  ContactNLv3Intent.NLContactAttribute.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

SiriContactsIntents::ContactNLv3Intent::NLContactReferenceValue_optional __swiftcall ContactNLv3Intent.NLContactReferenceValue.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_33_6();
  uint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = swift_bridgeObjectRelease();
  char v4 = 0;
  char v5 = 20;
  switch(v2)
  {
    case 0:
      goto LABEL_22;
    case 1:
      char v4 = 1;
      goto LABEL_22;
    case 2:
      char v4 = 2;
      goto LABEL_22;
    case 3:
      char v4 = 3;
      goto LABEL_22;
    case 4:
      char v4 = 4;
      goto LABEL_22;
    case 5:
      char v4 = 5;
      goto LABEL_22;
    case 6:
      char v4 = 6;
      goto LABEL_22;
    case 7:
      char v4 = 7;
      goto LABEL_22;
    case 8:
      char v4 = 8;
      goto LABEL_22;
    case 9:
      char v4 = 9;
      goto LABEL_22;
    case 10:
      char v4 = 10;
      goto LABEL_22;
    case 11:
      char v4 = 11;
      goto LABEL_22;
    case 12:
      char v4 = 12;
      goto LABEL_22;
    case 13:
      char v4 = 13;
      goto LABEL_22;
    case 14:
      char v4 = 14;
      goto LABEL_22;
    case 15:
      char v4 = 15;
      goto LABEL_22;
    case 16:
      char v4 = 16;
      goto LABEL_22;
    case 17:
      char v4 = 17;
      goto LABEL_22;
    case 18:
      char v4 = 18;
      goto LABEL_22;
    case 19:
      char v4 = 19;
LABEL_22:
      char v5 = v4;
      break;
    case 20:
      break;
    case 21:
      char v5 = 21;
      break;
    case 22:
      char v5 = 22;
      break;
    case 23:
      char v5 = 23;
      break;
    case 24:
      char v5 = 24;
      break;
    case 25:
      char v5 = 25;
      break;
    case 26:
      char v5 = 26;
      break;
    case 27:
      char v5 = 27;
      break;
    case 28:
      char v5 = 28;
      break;
    case 29:
      char v5 = 29;
      break;
    case 30:
      char v5 = 30;
      break;
    case 31:
      char v5 = 31;
      break;
    case 32:
      char v5 = 32;
      break;
    case 33:
      char v5 = 33;
      break;
    case 34:
      char v5 = 34;
      break;
    case 35:
      char v5 = 35;
      break;
    case 36:
      char v5 = 36;
      break;
    case 37:
      char v5 = 37;
      break;
    default:
      char v5 = 38;
      break;
  }
  *uint64_t v1 = v5;
  return result;
}

void *static ContactNLv3Intent.NLContactReferenceValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactReferenceValue.allCases.getter;
}

void ContactNLv3Intent.NLContactReferenceValue.rawValue.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactReferenceValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactReferenceValue()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactReferenceValue(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactReferenceValue()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactReferenceValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactReferenceValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactReferenceValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactReferenceValue(void *a1@<X8>)
{
  ContactNLv3Intent.NLContactReferenceValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactReferenceValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactReferenceValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactReferenceValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

uint64_t one-time initialization function for phoneAttributes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 48) = 0x6F6870206B726F77;
  strcpy((char *)(v0 + 64), "mobile phone");
  *(unsigned char *)(v0 + 77) = 0;
  *(_WORD *)(v0 + 78) = -5120;
  *(void *)(v0 + 96) = 0x6F6870206E69616DLL;
  *(void *)(v0 + 528) = 0x6F6870206B726F77;
  *(void *)(v0 + 112) = 0x78616620656D6F68;
  *(void *)(v0 + 120) = 0xE800000000000000;
  strcpy((char *)(v0 + 544), "mobile phone");
  *(void *)(v0 + 128) = 0x786166206B726F77;
  *(void *)(v0 + 136) = 0xE800000000000000;
  *(void *)(v0 + 576) = 0x6F6870206E69616DLL;
  *(void *)(v0 + 592) = 0x78616620656D6F68;
  *(void *)(v0 + 608) = 0x786166206B726F77;
  *(void *)(v0 + 144) = 0x616620726568746FLL;
  *(void *)(v0 + 152) = 0xE900000000000078;
  *(void *)(v0 + 600) = 0xE800000000000000;
  *(void *)(v0 + 616) = 0xE800000000000000;
  *(void *)(v0 + 624) = 0x616620726568746FLL;
  *(void *)(v0 + 160) = 0x7265676170;
  *(void *)(v0 + 632) = 0xE900000000000078;
  *(void *)(v0 + 640) = 0x7265676170;
  *(void *)(v0 + 176) = 0x687020726568746FLL;
  *(void *)(v0 + 184) = 0xEB00000000656E6FLL;
  *(void *)(v0 + 656) = 0x687020726568746FLL;
  *(void *)(v0 + 192) = 0x656E6F6870;
  *(void *)(v0 + 672) = 0x656E6F6870;
  strcpy((char *)(v0 + 208), "school phone");
  *(unsigned char *)(v0 + 221) = 0;
  *(_WORD *)(v0 + 222) = -5120;
  strcpy((char *)(v0 + 688), "school phone");
  *(unsigned char *)(v0 + 557) = 0;
  *(_WORD *)(v0 + 558) = -5120;
  *(unsigned char *)(v0 + 701) = 0;
  *(_WORD *)(v0 + 702) = -5120;
  *(void *)(v0 + 224) = 0x6E61747369737361;
  *(void *)(v0 + 232) = 0xEF656E6F68702074;
  *(void *)(v0 + 704) = 0x6E61747369737361;
  *(void *)(v0 + 240) = 0x6E6F687020726163;
  *(void *)(v0 + 712) = 0xEF656E6F68702074;
  *(void *)(v0 + 256) = 0x6870206F69646172;
  *(void *)(v0 + 264) = 0xEB00000000656E6FLL;
  *(void *)(v0 + 720) = 0x6E6F687020726163;
  *(void *)(v0 + 736) = 0x6870206F69646172;
  *(void *)(v0 + 664) = 0xEB00000000656E6FLL;
  *(void *)(v0 + 744) = 0xEB00000000656E6FLL;
  *(void *)(v0 + 272) = 0xD000000000000012;
  *(void *)(v0 + 280) = 0x800000022D5A6190;
  *(void *)(v0 + 752) = 0xD000000000000012;
  *(void *)(v0 + 760) = 0x800000022D5A6190;
  strcpy((char *)(v0 + 288), "primary phone");
  strcpy((char *)(v0 + 768), "primary phone");
  *(void *)(v0 + 304) = 0xD000000000000014;
  *(void *)(v0 + 312) = 0x800000022D5A61C0;
  *(void *)(v0 + 792) = 0x800000022D5A61C0;
  *(void *)(v0 + 320) = 0xD000000000000014;
  *(void *)(v0 + 328) = 0x800000022D5A61E0;
  *(void *)(v0 + 784) = 0xD000000000000014;
  *(void *)(v0 + 800) = 0xD000000000000014;
  *(void *)(v0 + 808) = 0x800000022D5A61E0;
  strcpy((char *)(v0 + 816), "callback phone");
  strcpy((char *)(v0 + 336), "callback phone");
  *(unsigned char *)(v0 + 351) = -18;
  *(unsigned char *)(v0 + 831) = -18;
  *(void *)(v0 + 352) = 0x6F6870206E647369;
  *(void *)(v0 + 360) = 0xEA0000000000656ELL;
  *(void *)(v0 + 832) = 0x6F6870206E647369;
  *(void *)(v0 + 512) = 0x6F687020656D6F68;
  *(void *)(v0 + 32) = 0x6F687020656D6F68;
  *(void *)(v0 + 40) = 0xEA0000000000656ELL;
  *(void *)(v0 + 56) = 0xEA0000000000656ELL;
  *(void *)(v0 + 104) = 0xEA0000000000656ELL;
  *(_WORD *)(v0 + 302) = -4864;
  *(void *)(v0 + 520) = 0xEA0000000000656ELL;
  *(void *)(v0 + 536) = 0xEA0000000000656ELL;
  *(void *)(v0 + 584) = 0xEA0000000000656ELL;
  *(void *)(v0 + 840) = 0xEA0000000000656ELL;
  strcpy((char *)(v0 + 368), "tdd tty phone");
  *(_WORD *)(v0 + 382) = -4864;
  strcpy((char *)(v0 + 848), "tdd tty phone");
  *(_WORD *)(v0 + 782) = -4864;
  *(_WORD *)(v0 + 862) = -4864;
  *(void *)(v0 + 416) = 7170420;
  *(void *)(v0 + 424) = 0xE300000000000000;
  *(void *)(v0 + 896) = 7170420;
  *(void *)(v0 + 904) = 0xE300000000000000;
  *(void *)(v0 + 912) = 26991;
  *(void *)(v0 + 432) = 26991;
  *(void *)(v0 + 440) = 0xE200000000000000;
  *(void *)(v0 + 920) = 0xE200000000000000;
  *(void *)(v0 + 448) = 0x6C657478656ELL;
  *(void *)(v0 + 456) = 0xE600000000000000;
  *(void *)(v0 + 928) = 0x6C657478656ELL;
  *(void *)(v0 + 560) = 0x656E6F687069;
  *(void *)(v0 + 80) = 0x656E6F687069;
  *(void *)(v0 + 88) = 0xE600000000000000;
  *(void *)(v0 + 168) = 0xE500000000000000;
  *(void *)(v0 + 200) = 0xE500000000000000;
  *(void *)(v0 + 248) = 0xE900000000000065;
  *(void *)(v0 + 568) = 0xE600000000000000;
  *(void *)(v0 + 936) = 0xE600000000000000;
  *(void *)(v0 + 464) = 0x7261676C61;
  *(void *)(v0 + 472) = 0xE500000000000000;
  *(void *)(v0 + 944) = 0x7261676C61;
  *(void *)(v0 + 880) = 0x6F72616C63;
  *(void *)(v0 + 400) = 0x6F72616C63;
  *(void *)(v0 + 408) = 0xE500000000000000;
  *(void *)(v0 + 648) = 0xE500000000000000;
  *(void *)(v0 + 680) = 0xE500000000000000;
  *(void *)(v0 + 888) = 0xE500000000000000;
  *(void *)(v0 + 952) = 0xE500000000000000;
  *(void *)(v0 + 728) = 0xE900000000000065;
  *(void *)(v0 + 960) = 0x65746D6F63726573;
  *(void *)(v0 + 480) = 0x65746D6F63726573;
  *(void *)(v0 + 488) = 0xE90000000000006CLL;
  *(void *)(v0 + 968) = 0xE90000000000006CLL;
  *(void *)(v0 + 496) = 1870032493;
  *(void *)(v0 + 504) = 0xE400000000000000;
  *(void *)(v0 + 976) = 1870032493;
  *(void *)(v0 + 864) = 1870031222;
  *(void *)(v0 + 384) = 1870031222;
  *(void *)(v0 + 392) = 0xE400000000000000;
  *(void *)(v0 + 872) = 0xE400000000000000;
  *(void *)(v0 + 984) = 0xE400000000000000;
  *(_OWORD *)(v0 + 16) = xmmword_22D5A2200;
  uint64_t result = destructiveProjectEnumData for SpecifyingContactAddressType();
  static ContactNLv3Intent.phoneAttributes = result;
  return result;
}

uint64_t one-time initialization function for emailAttributes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_22D5A2210;
  *(void *)(result + 32) = 0x6C69616D65;
  *(void *)(result + 40) = 0xE500000000000000;
  *(void *)(result + 48) = 0x6D6520726568746FLL;
  *(void *)(result + 56) = 0xEB000000006C6961;
  strcpy((char *)(result + 64), "school email");
  *(unsigned char *)(result + 77) = 0;
  *(_WORD *)(result + 78) = -5120;
  *(void *)(result + 80) = 0x616D65206B726F77;
  *(void *)(result + 88) = 0xEA00000000006C69;
  strcpy((char *)(result + 96), "personal email");
  *(unsigned char *)(result + 111) = -18;
  *(void *)(result + 112) = 0x6C69616D65;
  *(void *)(result + 120) = 0xE500000000000000;
  strcpy((char *)(result + 128), "personal email");
  *(unsigned char *)(result + 143) = -18;
  strcpy((char *)(result + 144), "school email");
  *(unsigned char *)(result + 157) = 0;
  *(_WORD *)(result + 158) = -5120;
  *(void *)(result + 160) = 0x6D6520726568746FLL;
  *(void *)(result + 168) = 0xEB000000006C6961;
  *(void *)(result + 176) = 0x616D65206B726F77;
  *(void *)(result + 184) = 0xEA00000000006C69;
  static ContactNLv3Intent.emailAttributes = result;
  return result;
}

#error "22D524004: call analysis failed (funcsize=98)"

#error "22D524344: call analysis failed (funcsize=459)"

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for TerminalElement();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, v6);
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v9 = type metadata accessor for TerminalElement();
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v7, v8, 1, v9);
}

uint64_t ContactNLv3Intent.containsAttribute(_:)()
{
  if (one-time initialization token for contactAttributes != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  uint64_t v0 = *(void *)(IntentNodeTraversable.values<A>(forNode:)() + 16);
  if (v0)
  {
    uint64_t v1 = 0;
    while (1)
    {
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      uint64_t v3 = v2;
      uint64_t v5 = v4;
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      if (v3 == v7 && v5 == v6) {
        break;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_13;
      }
      if (v0 == ++v1) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_13:
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t ContactNLv3Intent.isForgetNickname.getter()
{
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_51_4();
  if (v2 == 17) {
    char v0 = 0;
  }
  else {
    char v0 = specialized == infix<A>(_:_:)(v2, 15, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  }
  return v0 & 1;
}

void ContactNLv3Intent.hasNameAttribute.getter()
{
  OUTLINED_FUNCTION_42_8();
  uint64_t v2 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_5_4();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-v6];
  char v8 = ContactNLv3Intent.containsAttribute(_:)(*(void **)(v0 + *(int *)(v5 + 24)));
  OUTLINED_FUNCTION_34_10();
  if (v8)
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v7);
LABEL_9:
    OUTLINED_FUNCTION_41_5();
    return;
  }
  if (one-time initialization token for contactVerb != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_31_7();
  IntentNodeTraversable.value<A>(forNode:)();
  int v9 = v15;
  outlined init with copy of ContactNLv3Intent((uint64_t)v7, v1);
  if (v9 == 17)
  {
    outlined destroy of ContactNLv3Intent(v1);
    outlined destroy of ContactNLv3Intent((uint64_t)v7);
    goto LABEL_9;
  }
  uint64_t v10 = *(void **)(v1 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_7();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v14 != 17)
  {
    v13[13] = v14;
    ContactNLv3Intent.NLContactVerbValue.rawValue.getter();
    specialized Sequence<>.contains(_:)(v11, v12, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ContactNLv3Intent(v1);
    outlined destroy of ContactNLv3Intent((uint64_t)v7);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t ContactNLv3Intent.containsAttribute(_:)(void *a1)
{
  if (one-time initialization token for contactAttributes != -1) {
    goto LABEL_31;
  }
  while (1)
  {
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    uint64_t v2 = IntentNodeTraversable.values<A>(forNode:)();
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3) {
      break;
    }
    unint64_t v4 = 0;
    uint64_t v5 = a1[2];
    while (v4 < *(void *)(v2 + 16))
    {
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      uint64_t v8 = v7;
      if (v5)
      {
        uint64_t v9 = v6;
        BOOL v10 = a1[4] == v6 && a1[5] == v7;
        if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
        if (v5 != 1)
        {
          BOOL v11 = a1[6] == v9 && a1[7] == v8;
          if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_28;
          }
          if (v5 != 2)
          {
            uint64_t v12 = a1 + 9;
            uint64_t v13 = 2;
            while (1)
            {
              uint64_t v14 = v13 + 1;
              if (__OFADD__(v13, 1)) {
                break;
              }
              BOOL v15 = *(v12 - 1) == v9 && *v12 == v8;
              if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_28;
              }
              v12 += 2;
              ++v13;
              if (v14 == v5) {
                goto LABEL_26;
              }
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_26:
      ++v4;
      swift_bridgeObjectRelease();
      if (v4 == v3) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_31:
    swift_once();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ContactNLv3Intent.hasFirstNameAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(41) & 1;
}

void ContactNLv3Intent.hasFullNameAttribute.getter()
{
  OUTLINED_FUNCTION_42_8();
  type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_14_14();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_24_9();
  char v6 = ContactNLv3Intent.containsAttribute(_:)();
  OUTLINED_FUNCTION_47_2();
  if ((v6 & 1) == 0)
  {
    if (one-time initialization token for contactVerb != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    IntentNodeTraversable.value<A>(forNode:)();
    OUTLINED_FUNCTION_20_8();
    if (v9 == 17 || (IntentNodeTraversable.value<A>(forNode:)(), v8 == 17))
    {
      outlined destroy of ContactNLv3Intent(v2);
      OUTLINED_FUNCTION_12_10();
    }
    else
    {
      char v7 = specialized == infix<A>(_:_:)(v8, 14, (uint64_t (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
      outlined destroy of ContactNLv3Intent(v2);
      OUTLINED_FUNCTION_12_10();
      if (v7) {
        ContactNLv3Intent.containsAttribute(_:)();
      }
    }
    outlined destroy of ContactNLv3Intent(v0);
  }
  outlined destroy of ContactNLv3Intent(v1);
  OUTLINED_FUNCTION_41_5();
}

uint64_t ContactNLv3Intent.hasNickNameAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(44) & 1;
}

uint64_t ContactNLv3Intent.hasLastNameAttribute.getter()
{
  return OUTLINED_FUNCTION_17_13(43) & 1;
}

Swift::Bool __swiftcall ContactNLv3Intent.containsContactType(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for contactType != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v5)
  {
    char v2 = specialized Sequence<>.contains(_:)(v4, v5, a1._rawValue);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

void one-time initialization function for nonHandleLabelAttributes()
{
  static ContactNLv3Intent.nonHandleLabelAttributes = (uint64_t)&outlined read-only object #0 of one-time initialization function for nonHandleLabelAttributes;
}

uint64_t ContactNLv3Intent.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for contactConfirmation != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_52_4();
  if (((1 << v10) & 0x16) != 0)
  {
    char v2 = (unsigned int *)MEMORY[0x263F6FC90];
  }
  else
  {
    if (((1 << v10) & 9) == 0)
    {
      uint64_t v8 = type metadata accessor for ConfirmationResponse();
      uint64_t v6 = a1;
      uint64_t v7 = 1;
      return __swift_storeEnumTagSinglePayload(v6, v7, 1, v8);
    }
    char v2 = (unsigned int *)MEMORY[0x263F6FC98];
  }
  uint64_t v3 = *v2;
  uint64_t v4 = type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_15_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(a1, v3, v4);
  uint64_t v6 = a1;
  uint64_t v7 = 0;
  uint64_t v8 = v4;
  return __swift_storeEnumTagSinglePayload(v6, v7, 1, v8);
}

void ContactNLv3Intent.isRejection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_10();
  a19 = v23;
  a20 = v24;
  uint64_t v25 = type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_60();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?));
  uint64_t v30 = v29 - 8;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_5_0();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v32 = OUTLINED_FUNCTION_10_0(v31);
  uint64_t v33 = MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  uint64_t v38 = (char *)&a9 - v37;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_43_5();
  ContactNLv3Intent.confirmationResponse.getter(v39);
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v38, *MEMORY[0x263F6FC90], v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v25);
  uint64_t v40 = v20 + *(int *)(v30 + 56);
  outlined init with copy of ConfirmationResponse?(v22, v20);
  outlined init with copy of ConfirmationResponse?((uint64_t)v38, v40);
  OUTLINED_FUNCTION_6_3(v20, 1, v25);
  if (v42)
  {
    outlined destroy of SemanticValue?((uint64_t)v38, &demangling cache variable for type metadata for ConfirmationResponse?);
    outlined destroy of SemanticValue?(v22, &demangling cache variable for type metadata for ConfirmationResponse?);
    OUTLINED_FUNCTION_6_3(v40, 1, v25);
    if (v42) {
      uint64_t v41 = &demangling cache variable for type metadata for ConfirmationResponse?;
    }
    else {
      uint64_t v41 = &demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?);
    }
  }
  else
  {
    outlined init with copy of ConfirmationResponse?(v20, (uint64_t)v35);
    OUTLINED_FUNCTION_6_3(v40, 1, v25);
    if (v42)
    {
      outlined destroy of SemanticValue?((uint64_t)v38, &demangling cache variable for type metadata for ConfirmationResponse?);
      outlined destroy of SemanticValue?(v22, &demangling cache variable for type metadata for ConfirmationResponse?);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v25);
      uint64_t v41 = &demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v21, v40, v25);
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ConfirmationResponse and conformance ConfirmationResponse, MEMORY[0x263F6FCA0]);
      OUTLINED_FUNCTION_28_9();
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v43(v21, v25);
      uint64_t v41 = &demangling cache variable for type metadata for ConfirmationResponse?;
      outlined destroy of SemanticValue?((uint64_t)v38, &demangling cache variable for type metadata for ConfirmationResponse?);
      outlined destroy of SemanticValue?(v22, &demangling cache variable for type metadata for ConfirmationResponse?);
      v43((uint64_t)v35, v25);
    }
  }
  outlined destroy of SemanticValue?(v20, v41);
  OUTLINED_FUNCTION_8();
}

uint64_t ContactNLv3Intent.isContactDomain.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v2 = OUTLINED_FUNCTION_10_0(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15_2();
  type metadata accessor for ContactNLv3Intent();
  NLIntent.domainNode.getter();
  uint64_t v3 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6_3(v0, 1, v3);
  if (v8)
  {
    outlined destroy of SemanticValue?(v0, &demangling cache variable for type metadata for NonTerminalIntentNode?);
LABEL_10:
    char v9 = 0;
    return v9 & 1;
  }
  uint64_t v4 = NonTerminalIntentNode.ontologyNodeName.getter();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_23();
  v7();
  if (!v6) {
    goto LABEL_10;
  }
  BOOL v8 = v4 == 0x746361746E6F63 && v6 == 0xE700000000000000;
  if (v8)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v9 & 1;
}

BOOL ContactNLv3Intent.isCancel.getter()
{
  if (one-time initialization token for contactConfirmation != -1) {
    swift_once();
  }
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_51_4();
  return v1 - 1 < 2;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance ContactNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return MEMORY[0x270F6CA70](a1, v2);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance ContactNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return MEMORY[0x270F6CA60](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return MEMORY[0x270F6CA68](a1, v2);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, MEMORY[0x263F6F8E8], MEMORY[0x263F6F8E8], MEMORY[0x263F6F8E8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, MEMORY[0x263F6FA88], MEMORY[0x263F6FA88], MEMORY[0x263F6FA88]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, MEMORY[0x263F74290], MEMORY[0x263F74290], MEMORY[0x263F74290]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, MEMORY[0x263F71570], MEMORY[0x263F71570], MEMORY[0x263F71570]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GetContactAttributeSnippetModel.DisplayAttribute>, MEMORY[0x263F6CF00], MEMORY[0x263F6CF00], MEMORY[0x263F6CF00]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>, MEMORY[0x263F6FBA8], MEMORY[0x263F6FBA8], MEMORY[0x263F6FBA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContactHandle>, MEMORY[0x263F6D358], MEMORY[0x263F6D358], MEMORY[0x263F6D358]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>, MEMORY[0x263F6D458], MEMORY[0x263F6D458], MEMORY[0x263F6D458]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_22_12();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_40_8();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_21_8();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v19 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v19 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_19();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v21 + v25;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v25, v16, v26, a8);
    OUTLINED_FUNCTION_53_3();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v16, v26, a4, a7);
  }
  return (uint64_t)v21;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    OUTLINED_FUNCTION_22_12();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_40_8();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_21_8();
    }
  }
  OUTLINED_FUNCTION_35_9();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v10 + 32));
    OUTLINED_FUNCTION_53_3();
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_32_8();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  size_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (a3)
  {
    OUTLINED_FUNCTION_22_12();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_40_8();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_21_8();
    }
  }
  OUTLINED_FUNCTION_35_9();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v10);
    size_t v11 = swift_allocObject();
    uint64_t v12 = _swift_stdlib_malloc_size((const void *)v11);
    *(void *)(v11 + 16) = v4;
    *(void *)(v11 + 24) = 2 * v12 - 64;
  }
  else
  {
    size_t v11 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v11 + 32));
    OUTLINED_FUNCTION_53_3();
  }
  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_32_8();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v13, v14, v15, v16);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (a3)
  {
    OUTLINED_FUNCTION_22_12();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_40_8();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_21_8();
    }
  }
  OUTLINED_FUNCTION_35_9();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t v10 = swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v10 + 32));
    OUTLINED_FUNCTION_53_3();
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_32_8();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
}

uint64_t type metadata accessor for ContactNLv3Intent()
{
  uint64_t result = type metadata singleton initialization cache for ContactNLv3Intent;
  if (!type metadata singleton initialization cache for ContactNLv3Intent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Constants and conformance ContactNLv3Constants()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants;
  if (!lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactAttributesValue()
{
  return lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactAttributesValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactVerbValue()
{
  return lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactVerbValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactVerbValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactNounValue()
{
  return lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactNounValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactNounValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactConfirmationValue()
{
  return lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactConfirmationValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactConfirmationValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactReferenceValue()
{
  return lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactReferenceValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactReferenceValue]);
}

uint64_t base witness table accessor for IntentNodeTraversable in ContactNLv3Intent()
{
  return lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
}

uint64_t base witness table accessor for CustomStringConvertible in ContactNLv3Intent()
{
  return lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
}

uint64_t getEnumTagSinglePayload for ContactNLv3Constants(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 23) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v5 = v6 - 24;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Constants(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D5267ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Constants()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactNLv3Intent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NLIntent();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for ContactNLv3Intent(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ContactNLv3Intent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NLIntent();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContactNLv3Intent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for ContactNLv3Intent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for ContactNLv3Intent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D526C34);
}

uint64_t sub_22D526C34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NLIntent();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D526CD0);
}

void *sub_22D526CD0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NLIntent();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ContactNLv3Intent()
{
  uint64_t result = type metadata accessor for NLIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactAttributesValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xBB)
  {
    if (a2 + 69 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 69) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 70;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x46;
  int v5 = v6 - 70;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactAttributesValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 69 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 69) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xBB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBA)
  {
    unsigned int v6 = ((a2 - 187) >> 8) + 1;
    *uint64_t result = a2 + 69;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D526F4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 69;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactAttributesValue()
{
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactVerbValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 16) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v5 = v6 - 17;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactVerbValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D5270D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactVerbValue()
{
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactNounValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D5271D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactNounValue()
{
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactConfirmationValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactConfirmationValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D52735CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactConfirmationValue()
{
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D52745CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactAttribute()
{
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactReferenceValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDB)
  {
    if (a2 + 37 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 37) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 38;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x26;
  int v5 = v6 - 38;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactNLv3Intent.NLContactReferenceValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 37 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 37) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDA)
  {
    unsigned int v6 = ((a2 - 219) >> 8) + 1;
    *uint64_t result = a2 + 37;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D5275E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 37;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactReferenceValue()
{
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  OUTLINED_FUNCTION_0_19();
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  OUTLINED_FUNCTION_0_19();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, MEMORY[0x263F6FA88]);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, MEMORY[0x263F71760]);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, MEMORY[0x263F6D458]);
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    uint64_t v7 = OUTLINED_FUNCTION_4_22();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    MEMORY[0x270FA01D0](v7);
    return;
  }
  OUTLINED_FUNCTION_48_4();
  if (v5
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue)),
        OUTLINED_FUNCTION_15_0(),
        v3 + *(void *)(v6 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      uint64_t v7 = OUTLINED_FUNCTION_13_17();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
    uint64_t v8 = OUTLINED_FUNCTION_13_17();
    MEMORY[0x270FA01D8](v8);
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_22();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_29_7(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_22();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_29_7(a3, result);
  }
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    uint64_t v10 = OUTLINED_FUNCTION_4_22();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    MEMORY[0x270FA01D0](v10);
    return;
  }
  OUTLINED_FUNCTION_48_4();
  if (v8 && (a4(0), OUTLINED_FUNCTION_15_0(), v5 + *(void *)(v9 + 72) * v4 > v6))
  {
    if (v6 != v5)
    {
      uint64_t v10 = OUTLINED_FUNCTION_13_17();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    a4(0);
    uint64_t v11 = OUTLINED_FUNCTION_13_17();
    MEMORY[0x270FA01D8](v11);
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_9_15(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return one-time initialization function for contactId(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

uint64_t OUTLINED_FUNCTION_10_19(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return one-time initialization function for contactId(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000, a5);
}

uint64_t OUTLINED_FUNCTION_13_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_13@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 1) = a1;
  return ContactNLv3Intent.containsAttribute(_:)();
}

uint64_t OUTLINED_FUNCTION_28_9()
{
  return v0;
}

void *OUTLINED_FUNCTION_29_7@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_34_10()
{
  return outlined init with copy of ContactNLv3Intent(v1, v0);
}

uint64_t OUTLINED_FUNCTION_37_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_50_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_52_4()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_54_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t PluginPrewarmProvider.previousRefId.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t PluginPrewarmProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PluginPrewarmProvider.init()();
  return v0;
}

void *PluginPrewarmProvider.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_18();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_15();
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInteractive.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OS_dispatch_queue.Attributes>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_22D59FD50;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F8F130], v1);
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v10;
  return v0;
}

Swift::Void __swiftcall PluginPrewarmProvider.prewarm(refId:)(Swift::String refId)
{
  object = refId._object;
  uint64_t countAndFlagsBits = refId._countAndFlagsBits;
  uint64_t v4 = *(void **)(v1 + 32);
  if (v4
    && (*(void *)(v1 + 24) == refId._countAndFlagsBits ? (BOOL v5 = v4 == refId._object) : (BOOL v5 = 0),
        v5 || (OUTLINED_FUNCTION_38_6(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v16);
      OUTLINED_FUNCTION_5_23();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v7, v8, "[PluginPrewarmProvider] refId: %s already prewarmed", v9, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = OUTLINED_FUNCTION_38_6();
    PluginPrewarmProvider.previousRefId.setter(v10, v11);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v16);
      OUTLINED_FUNCTION_5_23();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v13, v14, "[PluginPrewarmProvider] for refId: %s", v15, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    PluginPrewarmProvider.prewarm()();
  }
}

uint64_t PluginPrewarmProvider.prewarm()()
{
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_18();
  uint64_t v21 = closure #1 in PluginPrewarmProvider.prewarm();
  uint64_t v22 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v18 = 1107296256;
  uint64_t v19 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  unint64_t v20 = &block_descriptor_0;
  uint64_t v6 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_1_23();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v7 = OUTLINED_FUNCTION_7_15();
  MEMORY[0x230F85250](v7);
  _Block_release(v6);
  os_log_type_t v8 = *(void (**)(uint64_t))(v2 + 8);
  uint64_t v9 = OUTLINED_FUNCTION_38_6();
  v8(v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v10(v0, v15);
  uint64_t v21 = closure #2 in PluginPrewarmProvider.prewarm();
  uint64_t v22 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v18 = 1107296256;
  uint64_t v19 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  unint64_t v20 = &block_descriptor_6;
  uint64_t v11 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  OUTLINED_FUNCTION_1_23();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v12 = OUTLINED_FUNCTION_7_15();
  MEMORY[0x230F85250](v12);
  _Block_release(v11);
  uint64_t v13 = OUTLINED_FUNCTION_38_6();
  v8(v13);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v0, v15);
}

uint64_t closure #1 in PluginPrewarmProvider.prewarm()()
{
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22D49E000, v1, v2, "[PluginPrewarmProvider] ContactResolver.refreshSharedCache()", v3, 2u);
    MEMORY[0x230F85DE0](v3, -1, -1);
  }

  type metadata accessor for ContactResolver();
  return static ContactResolver.refreshSharedCache()();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t closure #2 in PluginPrewarmProvider.prewarm()()
{
  v30[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  id v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = &v2[*(int *)(v0 + 20)];
  *(void *)uint64_t v4 = "PrewarmVision";
  *((void *)v4 + 1) = 13;
  v4[16] = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_22D49E000, v6, v7, "[PluginPrewarmProvider] prewarmVision", v8, 2u);
    MEMORY[0x230F85DE0](v8, -1, -1);
  }

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F1EF00]), sel_init);
  objc_msgSend(v9, sel_setRevision_, 2);
  id v10 = objc_msgSend(self, sel_globalSession);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22D59FB50;
  *(void *)(v11 + 32) = v9;
  v30[0] = (id)v11;
  specialized Array._endMutation()();
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for VNRequest);
  id v12 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v30[0] = 0;
  unsigned int v14 = objc_msgSend(v10, sel_prepareForPerformingRequests_error_, isa, v30);

  if (v14)
  {
    id v15 = v30[0];
  }
  else
  {
    id v16 = v30[0];
    uint64_t v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v18 = v17;
    id v19 = v17;
    unint64_t v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      BOOL v23 = (void *)swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      id v28 = v12;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_22D49E000, v20, (os_log_type_t)v21, "[PluginPrewarmProvider] prewarmVision encountered error: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F85DE0](v23, -1, -1);
      MEMORY[0x230F85DE0](v22, -1, -1);
    }
    else
    {
    }
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return outlined destroy of Signpost.OpenSignpost((uint64_t)v2);
}

uint64_t PluginPrewarmProvider.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginPrewarmProvider.__deallocating_deinit()
{
  PluginPrewarmProvider.deinit();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

void protocol witness for PluginPrewarmProviding.prewarm(refId:) in conformance PluginPrewarmProvider(uint64_t a1, uint64_t a2)
{
}

uint64_t dispatch thunk of PluginPrewarmProviding.prewarm(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for PluginPrewarmProvider()
{
  return self;
}

uint64_t method lookup function for PluginPrewarmProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PluginPrewarmProvider);
}

uint64_t dispatch thunk of PluginPrewarmProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PluginPrewarmProvider.prewarm(refId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_23()
{
  return v0 - 152;
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return 0;
}

uint64_t GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)()
{
  OUTLINED_FUNCTION_4();
  *(void *)(v0 + 168) = v1;
  *(void *)(v0 + 176) = v2;
  *(unsigned char *)(v0 + 242) = v3;
  *(unsigned char *)(v0 + 241) = v4;
  *(unsigned char *)(v0 + 240) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = v7;
  *(void *)(v0 + 144) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v0 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TemplatingResult();
  *(void *)(v0 + 192) = v9;
  *(void *)(v0 + 200) = *(void *)(v9 - 8);
  *(void *)(v0 + 208) = swift_task_alloc();
  return MEMORY[0x270FA2498](GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  uint64_t v1 = v0[22];
  outlined init with copy of DeviceState(v0[20], (uint64_t)(v0 + 2));
  v0[11] = &type metadata for InstalledAppsProvider;
  v0[12] = &protocol witness table for InstalledAppsProvider;
  v0[7] = v1;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  v0[27] = v2;
  outlined destroy of MissingMeCardViewBuilder((uint64_t)(v0 + 2));
  char v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  *char v3 = v0;
  v3[1] = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:);
  return ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:);
  }
  else
  {
    uint64_t v2 = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 192);
  char v3 = *(void *)(v0 + 184);
  char v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  *(void *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of Result<TemplatingResult, Error>(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Result<TemplatingResult, Error>(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  char v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GenericViews.buildConfirmationViewForMacAndCarPlay(contactAttributeType:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  MEMORY[0x270FA5388](v2);
  char v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  long long v18 = xmmword_22D59FB50;
  *(_OWORD *)(v5 + 16) = xmmword_22D59FB50;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v18;
  *(void *)(v6 + 32) = static ContactsDirectInvocations.confirm()();
  uint64_t v19 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = v19;
  uint64_t v8 = GenericViews.getConfirmText(forAttribute:)(a1);
  uint64_t v10 = v9;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v18;
  *(void *)(v11 + 32) = static ContactsDirectInvocations.deny()();
  uint64_t v19 = v11;
  specialized Array._endMutation()();
  uint64_t v12 = v19;
  ContactsLabelCATs.cancel()();
  uint64_t v13 = Result<>.firstPrint.getter();
  uint64_t v15 = v14;
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v15)
  {
    uint64_t v13 = static String.EMPTY.getter();
    uint64_t v15 = v16;
  }
  type metadata accessor for SAUIConfirmationView();
  *(void *)(v5 + 32) = SAUIConfirmationView.init(confirmCommands:confirmText:denyCommands:denyText:)(v7, v8, v10, v12, v13, v15);
  uint64_t v19 = v5;
  specialized Array._endMutation()();
  return v19;
}

uint64_t GenericViews.getConfirmText(forAttribute:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_0();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  if (a1 == 6)
  {
    ContactsLabelCATs.save()();
    uint64_t v8 = Result<>.firstPrint.getter();
    uint64_t v10 = v12;
    uint64_t v11 = (uint64_t)v5;
  }
  else
  {
    if (a1 != 10) {
      return static String.EMPTY.getter();
    }
    ContactsLabelCATs.yes()();
    uint64_t v8 = Result<>.firstPrint.getter();
    uint64_t v10 = v9;
    uint64_t v11 = (uint64_t)v7;
  }
  outlined destroy of Result<TemplatingResult, Error>(v11, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v10) {
    return static String.EMPTY.getter();
  }
  return v8;
}

uint64_t outlined destroy of MissingMeCardViewBuilder(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for SAUIConfirmationView()
{
  unint64_t result = lazy cache variable for type metadata for SAUIConfirmationView;
  if (!lazy cache variable for type metadata for SAUIConfirmationView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationView);
  }
  return result;
}

uint64_t DialogLocationAddress.init(postalAddress:localeString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption();
  MEMORY[0x270FA5388](v6 - 8);
  if (a1)
  {
    type metadata accessor for DialogLocationAddress.Builder();
    OUTLINED_FUNCTION_1_4();
    id v7 = a1;
    DialogLocationAddress.Builder.init()();
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
    uint64_t v9 = outlined bridged method (pb) of @objc PostalAddress.handleLabel.getter(v7);
    if (v10)
    {
      uint64_t v9 = String.sanitizeCNLabel.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v14 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v9, v12, a2, a3, 3, v8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of DialogLocationAddress.Builder.withName(print:speak:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined bridged method (pb) of @objc PostalAddress.country.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v14)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withCountry(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.isoCountryCode.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v14)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withCountryCode(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.state.getter(v7);
    Optional<A>.emptyToNil.getter();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (v16)
    {
      OUTLINED_FUNCTION_3_19();
      dispatch thunk of DialogLocationAddress.Builder.withAdministrativeArea(print:speak:)();
      OUTLINED_FUNCTION_3_19();
      dispatch thunk of DialogLocationAddress.Builder.withAdministrativeAreaCode(print:speak:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.subAdministrativeArea.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v16)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withSubAdministrativeArea(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.city.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v16)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withLocality(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.postalCode.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v16)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withPostCode(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    outlined bridged method (pb) of @objc PostalAddress.street.getter(v7);
    Optional<A>.emptyToNil.getter();
    OUTLINED_FUNCTION_1_24();
    if (v16)
    {
      OUTLINED_FUNCTION_0_20();
      dispatch thunk of DialogLocationAddress.Builder.withThoroughfare(print:speak:)();
      OUTLINED_FUNCTION_2_27();
      swift_release();
    }
    uint64_t v17 = dispatch thunk of DialogLocationAddress.__allocating_init(builder:)();

    return v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DialogLocationAddress.Builder();
    OUTLINED_FUNCTION_1_4();
    DialogLocationAddress.Builder.init()();
    return dispatch thunk of DialogLocationAddress.__allocating_init(builder:)();
  }
}

uint64_t DialogLocation.init(locationAddress:)()
{
  type metadata accessor for DialogLocation.Builder();
  OUTLINED_FUNCTION_1_4();
  DialogLocation.Builder.init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D59FB50;
  type metadata accessor for DialogLocationValue.Builder();
  OUTLINED_FUNCTION_1_4();
  DialogLocationValue.Builder.init()();
  swift_retain();
  dispatch thunk of DialogLocationValue.Builder.withAddress(_:)();
  swift_release();
  swift_release();
  uint64_t v1 = dispatch thunk of DialogLocationValue.Builder.build()();
  swift_release();
  *(void *)(v0 + 32) = v1;
  specialized Array._endMutation()();
  dispatch thunk of DialogLocation.Builder.withValues(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = dispatch thunk of DialogLocation.__allocating_init(builder:)();
  swift_release();
  return v2;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_27()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return v0;
}

id GetContactIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = objc_allocWithZone(v3);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  id v19 = specialized GetContactIntentHandler.init(contactService:contactResolver:)((uint64_t)v11, (uint64_t)v17, v6, v8, v13, v7, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v19;
}

uint64_t GetContactIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_4();
  v1[2] = v2;
  v1[3] = v0;
  v1[4] = type metadata accessor for Signpost.OpenSignpost();
  v1[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactIntentHandler.resolveSiriMatches(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_3_20();
  uint64_t v5 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v5 = "ResolveSiriMatchesGetContact";
  *(void *)(v5 + 8) = 28;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = specialized BaseIntentHandler.resolveSiriMatches(for:)(v3);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_3_20();
  outlined destroy of Signpost.OpenSignpost(v1);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

uint64_t @objc GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E126300, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:));
}

uint64_t @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:);
  return GetContactIntentHandler.resolveSiriMatches(for:)();
}

uint64_t @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = (void (**)(void, void))v1[4];
  uint64_t v3 = (void *)v1[3];
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_3();
  *id v6 = v5;
  swift_task_dealloc();

  type metadata accessor for GetContactSiriMatchesResolutionResult();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v2)[2](v2, isa);

  _Block_release(v2);
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

uint64_t GetContactIntentHandler.confirm(intent:)()
{
  return MEMORY[0x270FA2498](GetContactIntentHandler.confirm(intent:), 0, 0);
}

{
  uint64_t v0;
  char *v1;
  uint64_t (*v2)(char *);
  uint64_t v4;

  OUTLINED_FUNCTION_4();
  objc_allocWithZone((Class)type metadata accessor for GetContactIntentResponse());
  uint64_t v1 = GetContactIntentResponse.init(code:userActivity:)(4, 0);
  uint64_t v2 = *(uint64_t (**)(char *))(v0 + 8);
  return v2(v1);
}

uint64_t @objc GetContactIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E1262D8, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.confirm(intent:));
}

uint64_t @objc closure #1 in GetContactIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactIntentHandler.confirm(intent:);
  return GetContactIntentHandler.confirm(intent:)();
}

uint64_t GetContactIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_4();
  v0[3] = v1;
  v0[4] = type metadata accessor for Signpost.OpenSignpost();
  v0[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](GetContactIntentHandler.handle(intent:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  uint8_t *v12;
  id v13;
  unint64_t Contact;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *);
  void *v33;
  uint64_t v34;

  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v4 = v1 + *(int *)(v2 + 20);
  *(void *)uint64_t v4 = "HandleGetContact";
  *(void *)(v4 + 8) = 16;
  *(unsigned char *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = *(void **)(v0 + 24);
  id v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  unint64_t v11 = *(void **)(v0 + 24);
  if (v10)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    *(void *)(v0 + 16) = v11;
    uint64_t v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v11;

    _os_log_impl(&dword_22D49E000, v8, v9, "[GetContactIntent] Handling intent: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F85DE0](v33, -1, -1);
    MEMORY[0x230F85DE0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t Contact = outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(*(void **)(v0 + 24));
  if (Contact)
  {
    uint64_t v15 = Contact;
    if (Contact >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v16 = result;
      if (result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((Contact & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_11:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v18 = 0;
        id v19 = MEMORY[0x263F8EE78];
        do
        {
          if ((v15 & 0xC000000000000001) != 0) {
            unint64_t v20 = (id)MEMORY[0x230F854E0](v18, v15);
          }
          else {
            unint64_t v20 = *(id *)(v15 + 8 * v18 + 32);
          }
          uint64_t v21 = v20;
          uint64_t v22 = outlined bridged method (pb) of @objc INObject.identifier.getter(v20);
          uint64_t v24 = v23;

          if (v24)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
              id v19 = v28;
            }
            unint64_t v26 = *(void *)(v19 + 16);
            unint64_t v25 = *(void *)(v19 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v19);
              id v19 = v29;
            }
            *(void *)(v19 + 16) = v26 + 1;
            uint64_t v27 = v19 + 16 * v26;
            *(void *)(v27 + 32) = v22;
            *(void *)(v27 + 40) = v24;
          }
          ++v18;
        }
        while (v16 != v18);
        goto LABEL_27;
      }
    }
    id v19 = MEMORY[0x263F8EE78];
LABEL_27:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  id v19 = 0;
LABEL_28:
  uint64_t v30 = *(void *)(v0 + 40);
  type metadata accessor for GetContactIntentResponse();
  uint64_t v31 = GetContactIntentResponse.__allocating_init(contactIdentifiers:code:)(v19, 4);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v30);
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(char *))(v0 + 8);
  return v32(v31);
}

uint64_t @objc GetContactIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_26E1262B0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.handle(intent:));
}

uint64_t @objc GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  id v11 = a3;
  id v12 = a1;
  return _runTaskForBridgedAsyncMethod(_:)(a6, (uint64_t)v10);
}

uint64_t @objc closure #1 in GetContactIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = @objc closure #1 in GetContactIntentHandler.handle(intent:);
  return GetContactIntentHandler.handle(intent:)();
}

uint64_t @objc closure #1 in GetContactIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0();
  uint64_t v4 = (void (**)(void, void))v3[4];
  uint64_t v5 = (void *)v3[3];
  id v6 = (void *)v3[2];
  uint64_t v7 = *v0;
  OUTLINED_FUNCTION_3();
  *uint64_t v8 = v7;
  swift_task_dealloc();

  ((void (**)(void, void *))v4)[2](v4, v2);
  _Block_release(v4);

  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

id GetContactIntentHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetContactIntentHandler()
{
  uint64_t result = type metadata singleton initialization cache for GetContactIntentHandler;
  if (!type metadata singleton initialization cache for GetContactIntentHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for GetContactIntentHandler()
{
  return type metadata accessor for GetContactIntentHandler();
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.handle(intent:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  uint64_t v2 = OUTLINED_FUNCTION_1_25();
  return v3(v2);
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.confirm(intent:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of RedirectToCompanionFlow.execute();
  uint64_t v2 = OUTLINED_FUNCTION_1_25();
  return v3(v2);
}

uint64_t objectdestroyTm()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  uint64_t v2 = OUTLINED_FUNCTION_1_25();
  return v3(v2);
}

id specialized GetContactIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v13);
  unint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  id v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t ContactsAgeInfo.Builder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0;
  return result;
}

uint64_t ContactsAgeInfo.Builder.withAge(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAgeInfo.Builder.withPastAge(_:)(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAgeInfo.Builder.withFutureAge(_:)(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAgeInfo.Builder.withRequestedDate(_:)(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAgeInfo.Builder.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ContactsAgeInfo.Builder.__deallocating_deinit()
{
  ContactsAgeInfo.Builder.deinit();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

unint64_t static ContactsAgeInfo.catTypeName.getter()
{
  return 0xD000000000000010;
}

uint64_t ContactsAgeInfo.init(builder:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = *(void *)(a1 + 16);
  char v2 = *(unsigned char *)(a1 + 32);
  *(void *)(v1 + 32) = *(void *)(a1 + 24);
  *(unsigned char *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = *(void *)(a1 + 40);
  *(void *)(v1 + 56) = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(v1 + 64) = v3;
  return v1;
}

double ContactsAgeInfo.getProperty(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = a1 == 6645601 && a2 == 0xE300000000000000;
  if (!v5 && (OUTLINED_FUNCTION_4_23() & 1) == 0)
  {
    if (a1 == 0xD000000000000013 && a2 == 0x800000022D5A6D30 || (OUTLINED_FUNCTION_4_23() & 1) != 0)
    {
      if ((*(unsigned char *)(v3 + 40) & 1) == 0)
      {
        double result = *(double *)(v3 + 32);
        *(void *)(a3 + 24) = MEMORY[0x263F8D538];
        *(double *)a3 = result;
        return result;
      }
    }
    else
    {
      BOOL v11 = a1 == 0x65674174736170 && a2 == 0xE700000000000000;
      if (v11 || (OUTLINED_FUNCTION_4_23() & 1) != 0)
      {
        uint64_t v8 = *(void *)(v3 + 48);
        if (v8) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v12 = a1 == 0x6741657275747566 && a2 == 0xE900000000000065;
        if (v12 || (OUTLINED_FUNCTION_4_23() & 1) != 0)
        {
          uint64_t v8 = *(void *)(v3 + 56);
          if (v8) {
            goto LABEL_7;
          }
        }
        else
        {
          BOOL v13 = a1 == 0x6574736575716572 && a2 == 0xED00006574614464;
          if (v13 || (OUTLINED_FUNCTION_4_23() & 1) != 0)
          {
            uint64_t v8 = *(void *)(v3 + 64);
            if (v8)
            {
              uint64_t v9 = type metadata accessor for DialogCalendar();
              goto LABEL_8;
            }
          }
        }
      }
    }
LABEL_15:
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 24);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v9 = type metadata accessor for DialogDuration();
LABEL_8:
  *(void *)(a3 + 24) = v9;
  *(void *)a3 = v8;
  swift_retain();
  return result;
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional __swiftcall ContactsAgeInfo.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsAgeInfo.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)5;
  }
  else {
    return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)v3;
  }
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional __swiftcall ContactsAgeInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)5;
}

uint64_t ContactsAgeInfo.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_6_24();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_5_24();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_8_18();
      break;
    default:
      uint64_t result = OUTLINED_FUNCTION_7_16();
      break;
  }
  return result;
}

uint64_t ContactsAgeInfo.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_6_24();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_5_24();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_8_18();
      break;
    default:
      uint64_t result = OUTLINED_FUNCTION_7_16();
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactsAgeInfo.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactsAgeInfo.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsAgeInfo.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsAgeInfo.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsAgeInfo.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsAgeInfo.CodingKeys.init(rawValue:)(*a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsAgeInfo.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactsAgeInfo.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsAgeInfo.CodingKeys()
{
  return ContactsAgeInfo.CodingKeys.stringValue.getter(*v0);
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsAgeInfo.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional *a2@<X8>)
{
  result.SiriContactsIntents::SiriKitContactUnsupportedReason value = ContactsAgeInfo.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->SiriContactsIntents::SiriKitContactUnsupportedReason value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContactsAgeInfo.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsAgeInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsAgeInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactsAgeInfo.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ContactsAgeInfo.__deallocating_deinit()
{
  ContactsAgeInfo.deinit();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for ContactsAgeInfo()
{
  return self;
}

uint64_t ContactsAgeInfo.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsAgeInfo.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v3[3];
  HIBYTE(v12) = 0;
  type metadata accessor for DialogDuration();
  lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, 255, MEMORY[0x263F6D018]);
  OUTLINED_FUNCTION_1_26();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v13 = v3[6];
    HIBYTE(v12) = 2;
    OUTLINED_FUNCTION_1_26();
    uint64_t v13 = v3[7];
    HIBYTE(v12) = 3;
    OUTLINED_FUNCTION_1_26();
    uint64_t v13 = v3[8];
    HIBYTE(v12) = 4;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, 255, MEMORY[0x263F6D000]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v5);
}

uint64_t ContactsAgeInfo.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ContactsAgeInfo.init(from:)(a1);
  return v2;
}

uint64_t type metadata accessor for ContactsAgeInfo.Builder()
{
  return self;
}

uint64_t ContactsAgeInfo.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsAgeInfo.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsAgeInfo();
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for DialogDuration();
    lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, 255, MEMORY[0x263F6D018]);
    OUTLINED_FUNCTION_0_21();
    *(void *)(v1 + 24) = v9;
    LOBYTE(v9) = 1;
    *(void *)(v1 + 32) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + 40) = v6 & 1;
    OUTLINED_FUNCTION_0_21();
    *(void *)(v1 + 48) = v9;
    OUTLINED_FUNCTION_0_21();
    *(void *)(v1 + 56) = v9;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, 255, MEMORY[0x263F6D000]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = OUTLINED_FUNCTION_2_28();
    v8(v7);
    *(void *)(v1 + 64) = v9;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsAgeInfo()
{
  return 0xD000000000000010;
}

double protocol witness for CATType.getProperty(_:) in conformance ContactsAgeInfo@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsAgeInfo.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsAgeInfo@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ContactsAgeInfo.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsAgeInfo(void *a1)
{
  return ContactsAgeInfo.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsAgeInfo(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type ContactsAgeInfo and conformance ContactsAgeInfo, a2, (void (*)(uint64_t))type metadata accessor for ContactsAgeInfo);
}

uint64_t base witness table accessor for Encodable in ContactsAgeInfo(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type ContactsAgeInfo and conformance ContactsAgeInfo, a2, (void (*)(uint64_t))type metadata accessor for ContactsAgeInfo);
}

unint64_t lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactsAgeInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D52C89CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactsAgeInfo.CodingKeys()
{
  return &type metadata for ContactsAgeInfo.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_23()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_5_24()
{
  return 0x6741657275747566;
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return 0x65674174736170;
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return 6645601;
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return 0x6574736575716572;
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[42] = v2;
  v1[43] = v0;
  v1[41] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_10_0(v4);
  v1[44] = OUTLINED_FUNCTION_2_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v5);
  v1[45] = OUTLINED_FUNCTION_2_1();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[46] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[47] = v7;
  v1[48] = OUTLINED_FUNCTION_31();
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  v1[52] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[53] = v9;
  v1[54] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *log;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  void *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  os_log_type_t type;
  void *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  uint64_t v72 = v0;
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v2 = objc_msgSend(v1, sel_unsupportedReason);

  LOBYTE(v3) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v2);
  uint64_t v4 = v3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = OUTLINED_FUNCTION_40_9();
  v7(v6);
  log = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = os_log_type_enabled(log, v9);
  uint64_t v11 = *(void **)(v0 + 424);
  if (v10)
  {
    swift_slowAlloc();
    id v69 = (void *)OUTLINED_FUNCTION_68_1();
    uint64_t v71 = swift_slowAlloc();
    *uint64_t v4 = 136315650;
    os_log_type_t type = v9;
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000022D5A78F0, &v71);
    OUTLINED_FUNCTION_83_0();
    OUTLINED_FUNCTION_64_2();
    *(unsigned char *)(v0 + 560) = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    uint64_t v13 = Optional.debugDescription.getter();
    *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v71);
    OUTLINED_FUNCTION_82_0();
    swift_bridgeObjectRelease();
    uint64_t v15 = OUTLINED_FUNCTION_60_2();
    *(void *)(v0 + 320) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v69 = v15;
    uint64_t v16 = OUTLINED_FUNCTION_24_10();
    v17(v16);
    OUTLINED_FUNCTION_58_3(&dword_22D49E000, v18, v19, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", v20, v21, v22, v23, v0 + 560, log, v67, type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_77_1();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_75_1();
    OUTLINED_FUNCTION_2();
    LOBYTE(v4) = v70;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_24_10();
    v26(v25);
  }
  if (specialized ContactsStrategy.isSmartEnabled.getter(v24))
  {
    uint64_t v27 = (void *)Logger.logObject.getter();
    id v28 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_6_1(v28))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v29, v30, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent");
      OUTLINED_FUNCTION_2();
    }
  }
  switch((char)v4)
  {
    case 0:
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 488) = v31;
      *uint64_t v31 = v32;
      v31[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedAuthFailed()();
      break;
    case 1:
      uint64_t v38 = *(void *)(v0 + 344);
      *(void *)(v0 + 440) = *(void *)(v38 + 104);
      outlined init with copy of DeviceState(v38 + 16, v0 + 264);
      swift_retain();
      uint64_t v39 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v40 = objc_msgSend(v39, sel_isMe);

      if (v40)
      {
        objc_msgSend(v40, sel_BOOLValue);
      }
      uint64_t v61 = *(uint64_t **)(v0 + 328);
      id v62 = type metadata accessor for AceOutput();
      id v63 = MEMORY[0x263F6FFF0];
      v61[3] = v62;
      v61[4] = v63;
      __swift_allocate_boxed_opaque_existential_1(v61);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 504) = v64;
      *id v64 = v65;
      v64[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)();
      break;
    case 2:
      uint64_t v41 = *(uint64_t **)(v0 + 328);
      *(void *)(v0 + 448) = ParameterResolutionRecord.intent.getter();
      char v42 = type metadata accessor for AceOutput();
      uint64_t v43 = MEMORY[0x263F6FFF0];
      v41[3] = v42;
      v41[4] = v43;
      __swift_allocate_boxed_opaque_existential_1(v41);
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 456) = v44;
      *uint64_t v44 = v0;
      v44[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(v45, v46);
      break;
    case 3:
      uint64_t v48 = ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 520) = v48;
      swift_getObjectType();
      dynamic_cast_existential_1_unconditional(v48);
      unint64_t v50 = v49;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v50 + 40))(ObjectType, v50);
      if (!v52) {
        static String.EMPTY.getter();
      }
      Class v53 = *(void *)(v0 + 360);
      SpeakableString.init(print:speak:)();
      uint64_t v54 = type metadata accessor for SpeakableString();
      OUTLINED_FUNCTION_78_1(v53, v55, v56, v54);
      uint64_t v57 = (void *)swift_task_alloc();
      *(void *)(v0 + 528) = v57;
      void *v57 = v0;
      v57[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)();
      break;
    case 4:
      uint64_t v59 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v59;
      *uint64_t v59 = v0;
      v59[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedRelationshipNotFound()();
      break;
    default:
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 544) = v35;
      char *v35 = v36;
      v35[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedAction()();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 464) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    OUTLINED_FUNCTION_73_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 480) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 496) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 512) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3 + 264);
  swift_release();
  if (!v0)
  {
    OUTLINED_FUNCTION_73_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 360);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 536) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 552) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *log;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  void *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  os_log_type_t type;
  void *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v76 = v0;
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v2 = objc_msgSend(v1, sel_unsupportedReason);

  LOBYTE(v3) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v2);
  uint64_t v4 = v3;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  uint64_t v6 = OUTLINED_FUNCTION_40_9();
  v7(v6);
  log = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = os_log_type_enabled(log, v9);
  uint64_t v11 = *(void **)(v0 + 384);
  if (v10)
  {
    swift_slowAlloc();
    uint64_t v73 = (void *)OUTLINED_FUNCTION_68_1();
    uint64_t v75 = swift_slowAlloc();
    *uint64_t v4 = 136315650;
    os_log_type_t type = v9;
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022D5A8ED0, &v75);
    OUTLINED_FUNCTION_83_0();
    OUTLINED_FUNCTION_64_2();
    *(unsigned char *)(v0 + 544) = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    uint64_t v13 = Optional.debugDescription.getter();
    *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v75);
    OUTLINED_FUNCTION_82_0();
    swift_bridgeObjectRelease();
    uint64_t v15 = OUTLINED_FUNCTION_60_2();
    *(void *)(v0 + 280) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v73 = v15;
    uint64_t v16 = OUTLINED_FUNCTION_24_10();
    v17(v16);
    OUTLINED_FUNCTION_58_3(&dword_22D49E000, v18, v19, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", v20, v21, v22, v23, v0 + 544, log, v71, type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_77_1();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_75_1();
    OUTLINED_FUNCTION_2();
    LOBYTE(v4) = v74;
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_24_10();
    v26(v25);
  }
  if (specialized ContactsStrategy.isSmartEnabled.getter(v24))
  {
    uint64_t v27 = (void *)Logger.logObject.getter();
    id v28 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_6_1(v28))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v29, v30, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent");
      OUTLINED_FUNCTION_2();
    }
  }
  switch((char)v4)
  {
    case 0:
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v31;
      *uint64_t v31 = v0;
      v31[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedAuthFailed()();
      break;
    case 1:
      uint64_t v36 = *(uint64_t **)(v0 + 288);
      *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 304) + 104);
      swift_retain();
      uint64_t v37 = (void *)ParameterResolutionRecord.intent.getter();
      type metadata accessor for NSNumber();
      Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;

      [(objc_class *)isa BOOLValue];
      uint64_t v39 = type metadata accessor for AceOutput();
      uint64_t v40 = MEMORY[0x263F6FFF0];
      v36[3] = v39;
      v36[4] = v40;
      __swift_allocate_boxed_opaque_existential_1(v36);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 408) = v41;
      *uint64_t v41 = v42;
      v41[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_32_9();
      OUTLINED_FUNCTION_8_19();
      uint64_t result = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)();
      break;
    case 2:
      uint64_t v44 = *(uint64_t **)(v0 + 288);
      *(void *)(v0 + 424) = ParameterResolutionRecord.intent.getter();
      os_log_type_t v45 = type metadata accessor for AceOutput();
      uint64_t v46 = MEMORY[0x263F6FFF0];
      v44[3] = v45;
      void v44[4] = v46;
      __swift_allocate_boxed_opaque_existential_1(v44);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v0 + 432) = v47;
      *uint64_t v47 = v48;
      v47[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      goto LABEL_31;
    case 3:
      uint64_t v49 = (void *)ParameterResolutionRecord.intent.getter();
      *(void *)(v0 + 448) = v49;
      swift_getObjectType();
      if (dynamic_cast_existential_1_conditional((uint64_t)v49))
      {
        uint64_t v51 = v50;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v51 + 40))(ObjectType, v51);
        if (!v53) {
          static String.EMPTY.getter();
        }
        uint64_t v54 = *(void *)(v0 + 320);
        SpeakableString.init(print:speak:)();
        uint64_t v55 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_78_1(v54, v56, v57, v55);
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v0 + 512) = v58;
        *uint64_t v58 = v59;
        v58[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_8_19();
        uint64_t result = ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)();
      }
      else
      {
        id v63 = *(uint64_t **)(v0 + 288);

        *(void *)(v0 + 488) = ParameterResolutionRecord.intent.getter();
        id v64 = type metadata accessor for AceOutput();
        uint64_t v65 = MEMORY[0x263F6FFF0];
        v63[3] = v64;
        v63[4] = v65;
        __swift_allocate_boxed_opaque_existential_1(v63);
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v0 + 496) = v66;
        *uint64_t v66 = v67;
        v66[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
LABEL_31:
        OUTLINED_FUNCTION_8_19();
        uint64_t result = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(v68, v69);
      }
      break;
    case 4:
      uint64_t v61 = (void *)swift_task_alloc();
      *(void *)(v0 + 456) = v61;
      *uint64_t v61 = v0;
      v61[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedRelationshipNotFound()();
      break;
    default:
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 528) = v34;
      *uint64_t v34 = v0;
      v34[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_8_19();
      uint64_t result = ContactsCommonCATs.unsupportedAction()();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  if (!v0)
  {
    OUTLINED_FUNCTION_42_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 440) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    OUTLINED_FUNCTION_42_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 464) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 480) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 504) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    OUTLINED_FUNCTION_42_9();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_27_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_27_7();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 320);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 520) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 536) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v10 + 328));
  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 328);

  __swift_deallocate_boxed_opaque_existential_1(v11);
  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_17_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v10 + 288));
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 288);

  __swift_deallocate_boxed_opaque_existential_1(v11);
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();

  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  uint64_t v11 = *(void *)(v10 + 288);

  __swift_deallocate_boxed_opaque_existential_1(v11);
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_16_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_11();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void **)(v12 + 520);
  uint64_t v15 = *(void *)(v12 + 352);
  uint64_t v16 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v16);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_44_6(v17, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v18 = OUTLINED_FUNCTION_15_9();
  v19(v18);
  OUTLINED_FUNCTION_28_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_12_6();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v13, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void *)(v12 + 352);
  uint64_t v15 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v15);
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_44_6(v16, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = OUTLINED_FUNCTION_15_9();
  v18(v17);
  OUTLINED_FUNCTION_28_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_10();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v13, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void *)(v12 + 352);
  uint64_t v15 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v15);
  OUTLINED_FUNCTION_50_5();
  OUTLINED_FUNCTION_44_6(v16, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = OUTLINED_FUNCTION_15_9();
  v18(v17);
  OUTLINED_FUNCTION_28_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_10();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v13, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void **)(v12 + 448);
  uint64_t v15 = *(void *)(v12 + 312);
  uint64_t v16 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v16);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_44_6(v17, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();

  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v18 = OUTLINED_FUNCTION_15_9();
  v19(v18);
  OUTLINED_FUNCTION_30_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_12_6();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v13, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void *)(v12 + 312);
  uint64_t v15 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v15);
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_44_6(v16, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = OUTLINED_FUNCTION_15_9();
  v18(v17);
  OUTLINED_FUNCTION_30_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_10();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v13, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_33_0();
  uint64_t v14 = *(void *)(v12 + 312);
  uint64_t v15 = OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_14_7(v15);
  OUTLINED_FUNCTION_50_5();
  OUTLINED_FUNCTION_44_6(v16, MEMORY[0x263F6FFF0]);
  OUTLINED_FUNCTION_6_13();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v13, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = OUTLINED_FUNCTION_15_9();
  v18(v17);
  OUTLINED_FUNCTION_30_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_10();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v13, a10, a11, a12);
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_66();
  uint64_t v33 = v14[46];
  uint64_t v16 = v14[43];
  uint64_t v15 = v14[44];
  uint64_t v17 = (uint64_t *)v14[41];
  OUTLINED_FUNCTION_76_0();
  uint64_t v18 = *(void *)(v16 + 104);
  v14[11] = &type metadata for InstalledAppsProvider;
  v14[12] = &protocol witness table for InstalledAppsProvider;
  v14[7] = v18;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder((uint64_t)(v14 + 2));
  uint64_t v19 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_79_1(v19);
  OUTLINED_FUNCTION_51_5();
  uint64_t v20 = MEMORY[0x263F6FFF0];
  v17[3] = v21;
  v17[4] = v20;
  __swift_allocate_boxed_opaque_existential_1(v17);
  OUTLINED_FUNCTION_29_8();
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)(v14 + 2), (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v22 = OUTLINED_FUNCTION_15_12();
  v23(v22);
  OUTLINED_FUNCTION_28_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v33, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  OUTLINED_FUNCTION_66();
  uint64_t v33 = v14[41];
  uint64_t v16 = v14[38];
  uint64_t v15 = v14[39];
  uint64_t v17 = (uint64_t *)v14[36];
  OUTLINED_FUNCTION_76_0();
  uint64_t v18 = *(void *)(v16 + 104);
  v14[11] = &type metadata for InstalledAppsProvider;
  v14[12] = &protocol witness table for InstalledAppsProvider;
  v14[7] = v18;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder((uint64_t)(v14 + 2));
  uint64_t v19 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_79_1(v19);
  OUTLINED_FUNCTION_51_5();
  uint64_t v20 = MEMORY[0x263F6FFF0];
  v17[3] = v21;
  v17[4] = v20;
  __swift_allocate_boxed_opaque_existential_1(v17);
  OUTLINED_FUNCTION_29_8();
  swift_bridgeObjectRelease();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)(v14 + 2), (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v22 = OUTLINED_FUNCTION_15_12();
  v23(v22);
  OUTLINED_FUNCTION_30_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v33, a12, a13, a14);
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[37] = a2;
  v3[38] = v2;
  v3[36] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[40] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[41] = v4;
  v3[42] = *(void *)(v4 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  v3[47] = v5;
  v3[48] = *(void *)(v5 - 8);
  v3[49] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
}

uint64_t specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:), 0, 0);
}

uint64_t specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)()
{
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  GetContactAttributeIntent.requestedName.getter();
  if (v2)
  {
    uint64_t v0 = *(void *)(v1 + 104);
    String.sanitizeHomophones.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_11();
    uint64_t v3 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.capitalized(with:)();
    OUTLINED_FUNCTION_47_3();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_47_3();
  }
  OUTLINED_FUNCTION_46_1();
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_78_1(v0, v5, v6, v4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v7;
  *uint64_t v7 = v1;
  v7[1] = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:);
  OUTLINED_FUNCTION_70_1();
  OUTLINED_FUNCTION_6_11();
  return ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 112);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 152) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_37();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_5();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_27_0();
  ModifyContactAttributeIntent.requestedName.getter();
  if (v2)
  {
    uint64_t v0 = *(void *)(v1 + 104);
    String.sanitizeHomophones.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_11();
    uint64_t v3 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.capitalized(with:)();
    OUTLINED_FUNCTION_47_3();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_47_3();
  }
  OUTLINED_FUNCTION_46_1();
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_78_1(v0, v5, v6, v4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v7;
  *uint64_t v7 = v1;
  v7[1] = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:);
  OUTLINED_FUNCTION_70_1();
  OUTLINED_FUNCTION_6_11();
  return ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 112);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 152) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_66();
  uint64_t v15 = *(void *)(v14 + 128);
  uint64_t v16 = *(void *)(v14 + 136);
  uint64_t v17 = *(void *)(v14 + 120);
  uint64_t v18 = *(void *)(v14 + 96);
  uint64_t v29 = *(void *)(v14 + 104);
  uint64_t v19 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v18, 1, 1, v19);
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v14 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v18, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_25_3();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v14 + 16, a10, v29, a12, a13, a14);
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_4();
  v1[29] = v2;
  v1[30] = v0;
  v1[28] = v3;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v1[31] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[32] = v5;
  v1[33] = OUTLINED_FUNCTION_31();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_10_0(v6);
  v1[36] = OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[37] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[38] = v8;
  v1[39] = OUTLINED_FUNCTION_2_1();
  uint64_t v9 = type metadata accessor for ContactsSnippetPluginModel();
  v1[40] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[41] = v10;
  v1[42] = OUTLINED_FUNCTION_2_1();
  uint64_t v11 = type metadata accessor for ContactsSnippetFlowState();
  v1[43] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[44] = v12;
  v1[45] = OUTLINED_FUNCTION_2_1();
  uint64_t v13 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v1[46] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[47] = v14;
  v1[48] = OUTLINED_FUNCTION_2_1();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  OUTLINED_FUNCTION_10_0(v15);
  v1[49] = OUTLINED_FUNCTION_2_1();
  uint64_t v16 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v1[50] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[51] = v17;
  v1[52] = OUTLINED_FUNCTION_2_1();
  uint64_t v18 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_10_0(v18);
  v1[53] = OUTLINED_FUNCTION_2_1();
  uint64_t v19 = type metadata accessor for SpeakableString();
  v1[54] = v19;
  OUTLINED_FUNCTION_1(v19);
  v1[55] = v20;
  v1[56] = OUTLINED_FUNCTION_2_1();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0(v21);
  v1[57] = OUTLINED_FUNCTION_31();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  uint64_t v22 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_0(v22);
  v1[64] = OUTLINED_FUNCTION_2_1();
  uint64_t v23 = type metadata accessor for ParameterIdentifier();
  v1[65] = v23;
  OUTLINED_FUNCTION_1(v23);
  v1[66] = v24;
  v1[67] = OUTLINED_FUNCTION_2_1();
  uint64_t v25 = type metadata accessor for Signpost.OpenSignpost();
  v1[68] = v25;
  OUTLINED_FUNCTION_10_0(v25);
  v1[69] = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v26, v27, v28);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 584) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 600) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 648) = v7;
  *(void *)(v8 + 656) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  uint64_t v9 = *(void *)(v1 + 488);
  uint64_t v10 = *(void *)(v1 + 480);
  swift_release();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumTagSinglePayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_27_0();
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30] + 56;
  v0[83] = ParameterResolutionRecord.intent.getter();
  outlined init with copy of DeviceState(v3, (uint64_t)(v0 + 14));
  if (v1 != 1) {
    goto LABEL_4;
  }
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[54];
  outlined init with copy of SpeakableString?(v0[63], v2);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v3);
  uint64_t v5 = v0[59];
  if (EnumTagSinglePayload == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[59], &demangling cache variable for type metadata for SpeakableString?);
LABEL_4:
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_47_3();
    goto LABEL_6;
  }
  uint64_t v6 = v0[54];
  uint64_t v7 = v0[55];
  uint64_t v2 = v0[59];
  SpeakableString.print.getter();
  OUTLINED_FUNCTION_47_3();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
LABEL_6:
  uint64_t v9 = v0[47];
  uint64_t v8 = (uint64_t *)v0[48];
  uint64_t v10 = v0[45];
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[44];
  *uint64_t v8 = v2;
  v8[1] = v3;
  (*(void (**)(void))(v9 + 104))();
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v10, *MEMORY[0x263F6CDC0], v11);
  type metadata accessor for ContactsLabelCATsModern();
  static CATOption.defaultMode.getter();
  v0[84] = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_0();
  v0[85] = v13;
  NSObject *v13 = v14;
  v13[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 112;
  uint64_t v5 = *(void **)(v4 + 664);
  uint64_t v6 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  swift_release();

  OUTLINED_FUNCTION_31_2();
  v8();
  uint64_t v9 = OUTLINED_FUNCTION_62();
  v10(v9);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_12_6();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t *, uint64_t, uint64_t);
  void *v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
    uint64_t v4 = (void *)Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_6_1(v5))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_8_1(&dword_22D49E000, v6, v7, "#ModifyContactAttributeUnsupportedValueStrategy makeUnsupportedValueOutput could not generate snippet model, falling back to legacy");
      OUTLINED_FUNCTION_2();
      uint64_t v8 = (void *)v0[81];
    }
    else
    {
      uint64_t v8 = v4;
      uint64_t v4 = (void *)v0[81];
    }

    uint64_t v24 = v0[57];
    uint64_t v26 = v0[55];
    uint64_t v25 = v0[56];
    uint64_t v27 = v0[54];
    OUTLINED_FUNCTION_72_1();
    __swift_storeEnumTagSinglePayload(v28, v29, v30, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v25, v27);
    __swift_storeEnumTagSinglePayload(v24, 0, 1, v27);
    uint64_t v31 = (void *)swift_task_alloc();
    v0[89] = (uint64_t)v31;
    *uint64_t v31 = v0;
    v31[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_81_0();
    return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)();
  }
  else
  {
    uint64_t v34 = (void *)v0[81];
    uint64_t v10 = v0[51];
    uint64_t v9 = v0[52];
    uint64_t v11 = v0[41];
    uint64_t v12 = v0[42];
    uint64_t v13 = v0[40];
    uint64_t v32 = v0[77];
    uint64_t v14 = v0[30];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v2, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v9, v1);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v12, *MEMORY[0x263F6CE48], v13);
    static DialogPhase.completion.getter();
    uint64_t v15 = (void *)swift_task_alloc();
    v15[2] = v14;
    v15[3] = v32;
    v15[4] = v12;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    v0[86] = ResponseFactory.init()();
    v0[22] = v13;
    v0[23] = lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, MEMORY[0x263F6CE50]);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v12, v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_22D59FB50;
    *(void *)(v17 + 32) = v34;
    uint64_t v35 = v17;
    specialized Array._endMutation()();
    v0[87] = v35;
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x263F6FB10] + MEMORY[0x263F6FB10]);
    uint64_t v18 = v34;
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    v0[88] = (uint64_t)v19;
    *uint64_t v19 = v20;
    v19[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v21 = v0[39];
    uint64_t v22 = v0[28];
    return v33(v22, v0 + 19, v35, v21);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 152;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 720) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  uint64_t v6 = *(void *)(v5 + 464);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v1 + 456), &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 744) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_6();
  swift_release();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 760) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_11_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 792) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  if (one-time initialization token for contactsLog != -1) {
    swift_once();
  }
  uint64_t v27 = *(void *)(v26 + 552);
  uint64_t v28 = *(void *)(v26 + 544);
  id v29 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v30 = *(int *)(v28 + 20);
  *(_DWORD *)(v26 + 204) = v30;
  uint64_t v31 = v27 + v30;
  *(void *)uint64_t v31 = "MakeModifyContactAttributeUnsupportedValueOutput";
  *(void *)(v31 + 8) = 48;
  *(unsigned char *)(v31 + 16) = 2;
  *(void *)(v26 + 560) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v32 = ParameterIdentifier.name.getter();
  uint64_t v34 = v33;
  OUTLINED_FUNCTION_31_2();
  v35();
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v32;
  v36._object = v34;
  int value = ModifyContactAttributeSlots.init(rawValue:)(v36).value;
  if (value == 2)
  {
    swift_bridgeObjectRelease();
    os_log_type_t v45 = (void *)ParameterResolutionRecord.result.getter();
    id v46 = objc_msgSend(v45, sel_unsupportedReason);

    uint64_t v47 = ModifyContactAttributeModifyRelationshipUnsupportedReason.init(rawValue:)(v46);
    uint64_t v48 = v47;
    char v50 = v49;
    if ((v49 & 1) == 0)
    {
      if (v47 == 2)
      {
        uint64_t v111 = *(void *)(v26 + 512);
        uint64_t v112 = *(void *)(v26 + 240);
        uint64_t v113 = (void *)ParameterResolutionRecord.intent.getter();
        id v114 = (void *)specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(v113, v112 + 56);
        *(void *)(v26 + 768) = v114;

        type metadata accessor for DialogPerson();
        __swift_project_boxed_opaque_existential_1((void *)(v112 + 16), *(void *)(v112 + 40));
        id v115 = v114;
        dispatch thunk of DeviceState.siriLocale.getter();
        *(void *)(v26 + 776) = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v115, 1, v111, 0);
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v26 + 784) = v116;
        *id v116 = v117;
        v116[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_38_1();
        return ModifyContactAttributeCATs.relationshipNotFound(contact:)(v118, v119);
      }
      if (v47 == 1)
      {
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v26 + 752) = v51;
        *uint64_t v51 = v52;
        v51[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_38_1();
        return ModifyContactAttributeCATs.relationshipExists()();
      }
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v80 = OUTLINED_FUNCTION_20_2();
    char v83 = v82;
    *(void *)(v26 + 192) = v48;
    *(unsigned char *)(v26 + 200) = v50 & 1;
    NSArray v84 = (uint64_t *)&demangling cache variable for type metadata for ModifyContactAttributeModifyRelationshipUnsupportedReason?;
    goto LABEL_27;
  }
  if (value != 3)
  {
    if (value == 4)
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = (void *)ParameterResolutionRecord.result.getter();
      id v39 = objc_msgSend(v38, sel_unsupportedReason);

      if (SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v39).value == SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard)
      {
        uint64_t v40 = *(uint64_t **)(v26 + 224);
        *(void *)(v26 + 568) = *(void *)(*(void *)(v26 + 240) + 104);
        uint64_t v41 = type metadata accessor for AceOutput();
        uint64_t v42 = MEMORY[0x263F6FFF0];
        uint64_t v40[3] = v41;
        v40[4] = v42;
        __swift_allocate_boxed_opaque_existential_1(v40);
        swift_retain();
        swift_task_alloc();
        OUTLINED_FUNCTION_31_0();
        *(void *)(v26 + 576) = v43;
        *uint64_t v43 = v44;
        v43[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_32_9();
LABEL_32:
        OUTLINED_FUNCTION_38_1();
        return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)();
      }
      uint64_t v141 = (char *)&async function pointer to specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)
           + async function pointer to specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_0();
      *(void *)(v26 + 592) = v85;
      *id v85 = v86;
      v85[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_38_1();
      return v89(v87, v88, v89, v90, v91, v92, v93, v94, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               v141,
               a23,
               a24,
               a25,
               a26);
    }
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v80 = swift_allocError();
    uint64_t *v81 = v32;
    v81[1] = (uint64_t)v34;
LABEL_28:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v128 = *(void *)(v26 + 456);
    uint64_t v129 = *(void *)(v26 + 448);
    uint64_t v130 = *(void *)(v26 + 424);
    uint64_t v131 = *(void *)(v26 + 416);
    uint64_t v132 = *(void *)(v26 + 392);
    uint64_t v133 = *(void *)(v26 + 384);
    uint64_t v134 = *(void *)(v26 + 360);
    uint64_t v135 = *(void *)(v26 + 336);
    uint64_t v136 = *(void *)(v26 + 312);
    uint64_t v137 = *(void *)(v26 + 288);
    uint64_t v138 = *(void *)(v26 + 280);
    uint64_t v139 = *(void *)(v26 + 272);
    uint64_t v140 = *(void *)(v26 + 264);
    outlined destroy of Signpost.OpenSignpost(*(void *)(v26 + 552));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_38_1();
    return v98(v97, v98, v99, v100, v101, v102, v103, v104, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138,
             v139,
             v140,
             v80,
             a23,
             a24,
             a25,
             a26);
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = (void *)ParameterResolutionRecord.result.getter();
  id v56 = objc_msgSend(v55, sel_unsupportedReason);

  uint64_t v57 = ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)((uint64_t)v56);
  uint64_t v58 = v57;
  char v60 = v59;
  *(void *)(v26 + 608) = v57;
  if ((v59 & 1) != 0 || (unint64_t)(v57 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
    uint64_t v80 = OUTLINED_FUNCTION_20_2();
    char v83 = v95;
    *(void *)(v26 + 208) = v58;
    *(unsigned char *)(v26 + 216) = v60 & 1;
    NSArray v84 = (uint64_t *)&demangling cache variable for type metadata for ModifyContactAttributeModifyNickNameUnsupportedReason?;
LABEL_27:
    __swift_instantiateConcreteTypeFromMangledName(v84);
    uint64_t *v83 = Optional.debugDescription.getter();
    v83[1] = v96;
    goto LABEL_28;
  }
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v26 + 240) + 56), *(void *)(*(void *)(v26 + 240) + 80));
  uint64_t v61 = OUTLINED_FUNCTION_62();
  uint64_t v63 = v62(v61);
  *(void *)(v26 + 616) = v63;
  if (!v63)
  {
    unint64_t v105 = *(uint64_t **)(v26 + 224);
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    *(void *)(v26 + 728) = CATWrapper.__allocating_init(options:globals:)();
    uint64_t v106 = type metadata accessor for AceOutput();
    uint64_t v107 = MEMORY[0x263F6FFF0];
    v105[3] = v106;
    v105[4] = v107;
    __swift_allocate_boxed_opaque_existential_1(v105);
    swift_task_alloc();
    OUTLINED_FUNCTION_31_0();
    *(void *)(v26 + 736) = v108;
    *uint64_t v108 = v109;
    v108[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_32_9();
    goto LABEL_32;
  }
  id v64 = (void *)v63;
  uint64_t v65 = *(void *)(v26 + 512);
  uint64_t v66 = *(void **)(v26 + 240);
  type metadata accessor for DialogPerson();
  __swift_project_boxed_opaque_existential_1(v66 + 2, v66[5]);
  id v67 = v64;
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v68 = (void *)v66[15];
  id v69 = v68;
  *(void *)(v26 + 624) = DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v67, 0, v65, (uint64_t)v68);
  DialogPerson.nickname.getter();
  dispatch thunk of DialogPerson.fullName.getter();
  id v70 = (void *)ParameterResolutionRecord.intent.getter();
  id v71 = objc_msgSend(v70, sel_modifyOperation);

  ModifyOperation.stringify.getter((unint64_t)v71);
  uint64_t v72 = SpeakableString.init(print:speak:)();
  char v73 = specialized ContactsStrategy.isSmartEnabled.getter(v72);
  uint64_t v74 = *(void *)(v26 + 432);
  if (v73)
  {
    uint64_t v76 = *(void *)(v26 + 480);
    uint64_t v75 = *(void *)(v26 + 488);
    type metadata accessor for ModifyContactAttributeCATsModern();
    static CATOption.defaultMode.getter();
    *(void *)(v26 + 632) = CATWrapperSimple.__allocating_init(options:globals:)();
    __swift_storeEnumTagSinglePayload(v75, 1, 1, v74);
    OUTLINED_FUNCTION_71_1();
    v77();
    __swift_storeEnumTagSinglePayload(v76, 0, 1, v74);
    id v78 = (void *)swift_task_alloc();
    *(void *)(v26 + 640) = v78;
    *id v78 = v26;
    v78[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_38_1();
    return ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)();
  }
  else
  {
    uint64_t v121 = *(void *)(v26 + 456);
    OUTLINED_FUNCTION_72_1();
    __swift_storeEnumTagSinglePayload(v122, v123, v124, v74);
    OUTLINED_FUNCTION_71_1();
    v125();
    __swift_storeEnumTagSinglePayload(v121, 0, 1, v74);
    uint64_t v126 = (void *)swift_task_alloc();
    *(void *)(v26 + 712) = v126;
    *uint64_t v126 = v26;
    v126[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_81_0();
    OUTLINED_FUNCTION_38_1();
    return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)();
  }
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v26 + 224));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v26 + 584));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v26 + 600));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v26 + 224));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v26 + 744));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_43_6();

  uint64_t v30 = OUTLINED_FUNCTION_48_5();
  v31(v30);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v27, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v26, &demangling cache variable for type metadata for SpeakableString?);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v28 + 656));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_43_6();

  uint64_t v30 = OUTLINED_FUNCTION_48_5();
  v31(v30);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v27, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v26, &demangling cache variable for type metadata for SpeakableString?);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v28 + 720));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v26 + 760));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_68();

  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_27(*(void *)(v26 + 792));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_38_1();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  uint64_t v25 = *(void **)(v24 + 648);
  uint64_t v26 = *(void **)(v24 + 616);
  uint64_t v42 = *(int *)(v24 + 204);
  uint64_t v50 = *(void *)(v24 + 504);
  uint64_t v27 = *(void *)(v24 + 440);
  uint64_t v46 = *(void *)(v24 + 448);
  uint64_t v47 = *(void *)(v24 + 496);
  uint64_t v28 = *(void *)(v24 + 408);
  uint64_t v44 = *(void *)(v24 + 416);
  uint64_t v45 = *(void *)(v24 + 432);
  uint64_t v43 = *(void *)(v24 + 400);
  uint64_t v29 = *(void *)(v24 + 312);
  uint64_t v48 = *(void *)(v24 + 320);
  uint64_t v49 = *(void *)(v24 + 336);
  uint64_t v31 = *(void *)(v24 + 296);
  uint64_t v30 = *(void *)(v24 + 304);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v44, v43);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v46, v45);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v47, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v50, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_31_2();
  v32();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_3_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_1();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, v42, v43, v44, v45, v46, v47, v48,
           v49,
           v50,
           a22,
           a23,
           a24);
}

{
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  uint64_t v25 = (void *)v24[77];
  uint64_t v53 = v24[62];
  uint64_t v55 = v24[63];
  uint64_t v26 = v24[55];
  uint64_t v49 = v24[54];
  uint64_t v51 = v24[56];
  uint64_t v27 = v24[30];
  outlined init with copy of DeviceState(v27 + 16, (uint64_t)(v24 + 7));
  uint64_t v28 = *(void *)(v27 + 104);
  v24[5] = &type metadata for InstalledAppsProvider;
  v24[6] = &protocol witness table for InstalledAppsProvider;
  v24[12] = v25;
  v24[13] = v28;
  uint64_t v29 = v25;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ModifyNicknameUnsupportedViewBuilder((uint64_t)(v24 + 2));
  uint64_t v30 = type metadata accessor for AceOutput();
  OUTLINED_FUNCTION_44_6(v30, MEMORY[0x263F6FFF0]);
  ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)();
  swift_release();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_31_2();
  v31();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v51, v49);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v53, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v55, &demangling cache variable for type metadata for SpeakableString?);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v41 = v24[57];
  uint64_t v42 = v24[56];
  uint64_t v43 = v24[53];
  uint64_t v44 = v24[52];
  uint64_t v45 = v24[49];
  uint64_t v46 = v24[48];
  uint64_t v47 = v24[45];
  uint64_t v48 = v24[42];
  uint64_t v50 = v24[39];
  uint64_t v52 = v24[36];
  uint64_t v54 = v24[35];
  id v56 = v24[34];
  uint64_t v57 = v24[33];
  outlined destroy of Signpost.OpenSignpost(v24[69]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_1();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, v41, v42, v43, v44, v45, v46, v47, v48, v50, v52, v54,
           v56,
           v57,
           a22,
           a23,
           a24);
}

{
  uint64_t v24;
  uint64_t (*v25)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_10_16();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_3_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_1();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

{
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  uint64_t v25 = *(uint64_t **)(v24 + 224);
  uint64_t v26 = type metadata accessor for AceOutput();
  uint64_t v27 = MEMORY[0x263F6FFF0];
  v25[3] = v26;
  v25[4] = v27;
  __swift_allocate_boxed_opaque_existential_1(v25);
  ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)();
  uint64_t v28 = OUTLINED_FUNCTION_62();
  v29(v28);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_3_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_1();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

{
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_79();
  uint64_t v25 = *(void **)(v24 + 768);
  uint64_t v26 = *(uint64_t **)(v24 + 224);
  uint64_t v27 = type metadata accessor for AceOutput();
  uint64_t v28 = MEMORY[0x263F6FFF0];
  v26[3] = v27;
  v26[4] = v28;
  __swift_allocate_boxed_opaque_existential_1(v26);
  ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)();

  uint64_t v29 = OUTLINED_FUNCTION_62();
  v30(v29);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_3_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_37_1();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t closure #1 in ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(a3, 0);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v1 = OUTLINED_FUNCTION_10_0(v0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v3, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ModifyContactAttributeUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of ModifyNicknameUnsupportedViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  return closure #1 in ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dynamic_cast_existential_1_unconditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_1_27@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 80) = a1;
  uint64_t v4 = *(void *)(v1 + 552);
  *(void *)(v2 - 88) = *(void *)(v1 + 264);
  return outlined destroy of Signpost.OpenSignpost(v4);
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  uint64_t v3 = *(void *)(v0 + 552);
  *(void *)(v1 - 80) = *(void *)(v0 + 264);
  return outlined destroy of Signpost.OpenSignpost(v3);
}

uint64_t OUTLINED_FUNCTION_16_14()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_17_14()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_12()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_28_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_29_8()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_30_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_34_11()
{
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), *(void *)(v3 + 40));
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_40_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_43_6()
{
  return swift_release();
}

uint64_t *OUTLINED_FUNCTION_44_6@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_48_5()
{
  return v0;
}

double OUTLINED_FUNCTION_49_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 200) = 0u;
  *(void *)(v0 + 216) = 0;
  *(_OWORD *)(v0 + 184) = 0u;
  return result;
}

double OUTLINED_FUNCTION_50_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  return result;
}

double OUTLINED_FUNCTION_51_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 160) = 0u;
  *(void *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  return result;
}

double OUTLINED_FUNCTION_52_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 240) = 0u;
  *(void *)(v0 + 256) = 0;
  *(_OWORD *)(v0 + 224) = 0u;
  return result;
}

void OUTLINED_FUNCTION_58_3(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, int a11, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v12, 0x20u);
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  *(_WORD *)(v0 + 22) = 2112;
  return ParameterResolutionRecord.result.getter();
}

void OUTLINED_FUNCTION_64_2()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  return *(void *)(v0 + 136);
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return outlined init with copy of DeviceState(v1 + 16, v0);
}

uint64_t OUTLINED_FUNCTION_77_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_78_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
}

uint64_t OUTLINED_FUNCTION_79_1(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return *(void *)(v0 + 280);
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = a4;
  uint64_t v98 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v90 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_10_0(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_4_4();
  uint64_t v86 = v13;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_25();
  uint64_t v93 = v15;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v16);
  uint64_t v91 = (uint64_t)&v85 - v17;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_25();
  uint64_t v87 = v19;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v85 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhonemeData?);
  uint64_t v24 = OUTLINED_FUNCTION_10_0(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_15();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v29 = OUTLINED_FUNCTION_10_0(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_4_4();
  uint64_t v92 = v30;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_25();
  uint64_t v89 = v32;
  OUTLINED_FUNCTION_17();
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v85 - v35;
  MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)&v85 - v37;
  type metadata accessor for DialogPerson.Builder();
  swift_allocObject();
  uint64_t v99 = DialogPerson.Builder.init()();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  static PhonemeDataParser.parse(from:)();
  uint64_t v39 = type metadata accessor for PhonemeData();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v27, 1, v39);
  uint64_t v88 = v10;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v27, &demangling cache variable for type metadata for PhonemeData?);
    uint64_t v41 = type metadata accessor for PersonNameComponents();
    __swift_storeEnumTagSinglePayload((uint64_t)v38, 1, 1, v41);
  }
  else
  {
    PhonemeData.asNameComponents(locale:)();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v27, v39);
  }
  id v43 = objc_msgSend(a1, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v96 = a1;
  CNContact.givenNamePronunciationString.getter();
  uint64_t v94 = (uint64_t)v38;
  outlined init with copy of PersonNameComponents?((uint64_t)v38, (uint64_t)v36);
  uint64_t v44 = type metadata accessor for PersonNameComponents();
  OUTLINED_FUNCTION_10_5((uint64_t)v36);
  uint64_t v97 = a3;
  if (v45)
  {
    outlined destroy of URL?((uint64_t)v36, &demangling cache variable for type metadata for PersonNameComponents?);
    uint64_t v47 = 0;
  }
  else
  {
    PersonNameComponents.givenName.getter();
    Optional<A>.emptyToNil.getter();
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v44);
  }
  SpeakableString.init(printed:phonetic:phonemeData:)(v47, (uint64_t)v22);
  dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
  swift_release();
  outlined destroy of URL?((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
  id v49 = v96;
  id v50 = objc_msgSend(v96, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v51 = objc_msgSend(v49, sel_phoneticMiddleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  char v52 = Optional<A>.isNilOrEmpty.getter();
  uint64_t v53 = v89;
  if (v52 & 1) != 0 && (Optional<A>.isNilOrEmpty.getter())
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_8_20();
  }
  SpeakableString.init(print:speak:)();
  uint64_t v54 = v94;
  uint64_t v55 = v87;
  uint64_t v56 = v98;
  (*(void (**)(uint64_t, id, uint64_t))(v90 + 32))(v87, v51, v98);
  __swift_storeEnumTagSinglePayload(v55, 0, 1, v56);
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  outlined destroy of URL?(v55, &demangling cache variable for type metadata for SpeakableString?);
  id v57 = objc_msgSend(v49, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of PersonNameComponents?(v54, v53);
  OUTLINED_FUNCTION_10_5(v53);
  if (v45)
  {
    outlined destroy of URL?(v53, &demangling cache variable for type metadata for PersonNameComponents?);
    uint64_t v59 = 0;
  }
  else
  {
    PersonNameComponents.nickname.getter();
    Optional<A>.emptyToNil.getter();
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v53, v44);
  }
  uint64_t v61 = v91;
  SpeakableString.init(printed:phonetic:phonemeData:)(v59, v91);
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  outlined destroy of URL?(v61, &demangling cache variable for type metadata for SpeakableString?);
  id v62 = objc_msgSend(v49, sel_familyName);
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  CNContact.familyNamePronunciationString.getter();
  uint64_t v63 = v92;
  outlined init with copy of PersonNameComponents?(v54, v92);
  OUTLINED_FUNCTION_10_5(v63);
  if (v45)
  {
    outlined destroy of URL?(v63, &demangling cache variable for type metadata for PersonNameComponents?);
    uint64_t v65 = 0;
  }
  else
  {
    PersonNameComponents.familyName.getter();
    Optional<A>.emptyToNil.getter();
    uint64_t v65 = v64;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v63, v44);
  }
  uint64_t v67 = v93;
  SpeakableString.init(printed:phonetic:phonemeData:)(v65, v93);
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  swift_release();
  outlined destroy of URL?(v67, &demangling cache variable for type metadata for SpeakableString?);
  id v68 = objc_msgSend(v49, sel_organizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v69 = objc_msgSend(v49, sel_phoneticOrganizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v70 = objc_msgSend(v49, sel_termsOfAddress);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSTermOfAddress);
  unint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v71 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v73 = v97;
  if (v72)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v71 & 0xC000000000000001) == 0, v71);
    if ((v71 & 0xC000000000000001) != 0) {
      id v74 = (id)MEMORY[0x230F854E0](0, v71);
    }
    else {
      id v74 = *(id *)(v71 + 32);
    }
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    unint64_t v76 = outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(v75);
    if (!v76)
    {

      goto LABEL_34;
    }
    unint64_t v77 = v76;
    if (v76 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_25;
      }
    }
    else if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_25:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v77 & 0xC000000000000001) == 0, v77);
      if ((v77 & 0xC000000000000001) != 0) {
        id v78 = (id)MEMORY[0x230F854E0](0, v77);
      }
      else {
        id v78 = *(id *)(v77 + 32);
      }
      uint64_t v79 = v78;
      swift_bridgeObjectRelease();
      id v80 = objc_msgSend(v79, sel_pronoun);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      type metadata accessor for DialogPronoun.Builder();
      swift_allocObject();
      DialogPronoun.Builder.init()();
      uint64_t v81 = v86;
      SpeakableString.init(print:speak:)();
      __swift_storeEnumTagSinglePayload(v81, 0, 1, v98);
      dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)();
      swift_release();
      outlined destroy of URL?(v81, &demangling cache variable for type metadata for SpeakableString?);
      dispatch thunk of DialogPronoun.Builder.build()();
      dispatch thunk of DialogPerson.Builder.withPronoun(_:)();

      swift_release();
      swift_release();
      swift_release();
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  swift_retain();
  uint64_t v82 = dispatch thunk of DialogPerson.__allocating_init(builder:)();
  if (v95)
  {
    swift_retain();
    dispatch thunk of DialogPerson.mockGlobals.setter();
    swift_release();
  }
  swift_release();

  type metadata accessor for Locale();
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t))(v83 + 8))(v73);
  outlined destroy of URL?(v54, &demangling cache variable for type metadata for PersonNameComponents?);
  return v82;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void v71[2];
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  id v78 = a4;
  uint64_t v81 = a3;
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  unint64_t v77 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  unint64_t v76 = v9 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_10_0(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_4();
  uint64_t v73 = v12;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v13);
  id v74 = (uint64_t)v71 - v14;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_25();
  uint64_t v75 = v16;
  OUTLINED_FUNCTION_17();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v71 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhonemeData?);
  uint64_t v21 = OUTLINED_FUNCTION_10_0(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v26 = OUTLINED_FUNCTION_10_0(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_4_4();
  uint64_t v79 = v27;
  OUTLINED_FUNCTION_17();
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v71 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = (char *)v71 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)v71 - v35;
  type metadata accessor for DialogPerson.Builder();
  swift_allocObject();
  uint64_t v37 = DialogPerson.Builder.init()();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  static PhonemeDataParser.parse(from:)();
  uint64_t v38 = type metadata accessor for PhonemeData();
  if (__swift_getEnumTagSinglePayload(v24, 1, v38) == 1)
  {
    outlined destroy of URL?(v24, &demangling cache variable for type metadata for PhonemeData?);
    uint64_t v39 = type metadata accessor for PersonNameComponents();
    __swift_storeEnumTagSinglePayload((uint64_t)v36, 1, 1, v39);
  }
  else
  {
    PhonemeData.asNameComponents(locale:)();
    OUTLINED_FUNCTION_51();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v38);
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_firstName);
  OUTLINED_FUNCTION_7_17();
  uint64_t v82 = v37;
  id v80 = v36;
  if (v38)
  {
    uint64_t v72 = v31;
    double result = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_firstName);
    if (!v42)
    {
      __break(1u);
      goto LABEL_34;
    }
    v71[1] = result;
    outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_firstNamePhonetic);
    v71[0] = v43;
    outlined init with copy of PersonNameComponents?((uint64_t)v36, (uint64_t)v34);
    uint64_t v38 = type metadata accessor for PersonNameComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v38) == 1)
    {
      outlined destroy of URL?((uint64_t)v34, &demangling cache variable for type metadata for PersonNameComponents?);
      uint64_t v44 = 0;
    }
    else
    {
      PersonNameComponents.givenName.getter();
      Optional<A>.emptyToNil.getter();
      uint64_t v44 = v45;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_51();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v38);
    }
    SpeakableString.init(printed:phonetic:phonemeData:)(v44, (uint64_t)v19);
    dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
    swift_release();
    outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v36 = v80;
    uint64_t v31 = v72;
  }
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_middleName);
  OUTLINED_FUNCTION_7_17();
  uint64_t v47 = v79;
  if (!v38) {
    goto LABEL_15;
  }
  double result = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_middleName);
  if (!v48)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (Optional<A>.isNilOrEmpty.getter()) {
    Optional<A>.isNilOrEmpty.getter();
  }
  id v49 = v76;
  SpeakableString.init(print:speak:)();
  uint64_t v38 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v75, v49, v5);
  __swift_storeEnumTagSinglePayload(v38, 0, 1, v5);
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  outlined destroy of URL?(v38, &demangling cache variable for type metadata for SpeakableString?);
LABEL_15:
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_nickName);
  OUTLINED_FUNCTION_7_17();
  if (!v38) {
    goto LABEL_21;
  }
  double result = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_nickName);
  if (!v50)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v38 = result;
  outlined init with copy of PersonNameComponents?((uint64_t)v36, (uint64_t)v31);
  id v51 = type metadata accessor for PersonNameComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v51) == 1)
  {
    outlined destroy of URL?((uint64_t)v31, &demangling cache variable for type metadata for PersonNameComponents?);
    char v52 = 0;
  }
  else
  {
    PersonNameComponents.nickname.getter();
    Optional<A>.emptyToNil.getter();
    uint64_t v53 = v31;
    char v52 = v54;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v51);
  }
  uint64_t v56 = v74;
  SpeakableString.init(printed:phonetic:phonemeData:)(v52, v74);
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  outlined destroy of URL?(v56, &demangling cache variable for type metadata for SpeakableString?);
LABEL_21:
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_lastName);
  OUTLINED_FUNCTION_7_17();
  if (!v38) {
    goto LABEL_27;
  }
  double result = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_lastName);
  if (!v57)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v38 = result;
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_lastNamePhonetic);
  outlined init with copy of PersonNameComponents?((uint64_t)v36, v47);
  uint64_t v58 = type metadata accessor for PersonNameComponents();
  OUTLINED_FUNCTION_10_5(v47);
  if (v59)
  {
    outlined destroy of URL?(v47, &demangling cache variable for type metadata for PersonNameComponents?);
    uint64_t v64 = 0;
  }
  else
  {
    PersonNameComponents.familyName.getter();
    uint64_t v60 = v47;
    uint64_t v61 = v38;
    id v62 = v60;
    Optional<A>.emptyToNil.getter();
    uint64_t v64 = v63;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51();
    uint64_t v66 = v62;
    uint64_t v38 = v61;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v58);
  }
  uint64_t v67 = v73;
  SpeakableString.init(printed:phonetic:phonemeData:)(v64, v73);
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  swift_release();
  outlined destroy of URL?(v67, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v36 = v80;
LABEL_27:
  outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_company);
  OUTLINED_FUNCTION_7_17();
  if (v38)
  {
    double result = outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_company);
    if (v68)
    {
      outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_companyPhonetic);
      dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
LABEL_37:
    __break(1u);
    return result;
  }
LABEL_30:
  swift_retain();
  id v69 = dispatch thunk of DialogPerson.__allocating_init(builder:)();
  if (v78)
  {
    swift_retain();
    dispatch thunk of DialogPerson.mockGlobals.setter();
    swift_release();
  }
  swift_release();

  type metadata accessor for Locale();
  OUTLINED_FUNCTION_51();
  (*(void (**)(uint64_t))(v70 + 8))(v81);
  outlined destroy of URL?((uint64_t)v36, &demangling cache variable for type metadata for PersonNameComponents?);
  return v69;
}

uint64_t outlined init with copy of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_pronouns);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for NSMorphologyPronoun);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_7_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_20()
{
  return v0;
}

uint64_t String.convertToContactAttributeLabel.getter(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(v4);
  uint64_t result = 0x786166656D6F68;
  switch(v6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 49:
      uint64_t result = String.lowercased()()._countAndFlagsBits;
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 0x7861666B726F77;
      break;
    default:
      swift_bridgeObjectRetain();
      uint64_t result = a1;
      break;
  }
  return result;
}

uint64_t String.mapToNLAttributeValue(forType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 6645601;
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_4_24();
      BOOL v6 = v6 && a3 == 0xE400000000000000;
      if (!v6 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
      {
        OUTLINED_FUNCTION_7_18();
        if (!v6 || a3 != 0xE800000000000000)
        {
          char v8 = OUTLINED_FUNCTION_0_22();
          BOOL v9 = a2 == 1701670760 && a3 == 0xE400000000000000;
          BOOL v10 = v9;
          if ((v8 & 1) == 0 && !v10 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
          {
            uint64_t v5 = 0x65206C6F6F686373;
            OUTLINED_FUNCTION_1_28();
            BOOL v11 = v6 && a3 == 0xE600000000000000;
            if (!v11 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
            {
              OUTLINED_FUNCTION_3_22();
              BOOL v12 = v6 && a3 == 0xE500000000000000;
              if (!v12 && (OUTLINED_FUNCTION_0_22() & 1) == 0) {
                return 0x6C69616D65;
              }
            }
          }
        }
      }
      return v5;
    case 2:
      OUTLINED_FUNCTION_9_16();
      if (v6 && a3 == 0xE400000000000000) {
        goto LABEL_107;
      }
      OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_12_17();
      if (v14) {
        return v5;
      }
      OUTLINED_FUNCTION_10_20();
      BOOL v15 = v6 && a3 == 0xE400000000000000;
      if (v15 || (OUTLINED_FUNCTION_0_22() & 1) != 0) {
        return v5;
      }
      OUTLINED_FUNCTION_8_21();
      if (v6 && a3 == 0xE600000000000000) {
        goto LABEL_108;
      }
      OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_2_29();
      if ((v17 & 1) == 0)
      {
        OUTLINED_FUNCTION_13_18();
        BOOL v18 = v6 && a3 == 0xE300000000000000;
        if (!v18 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
        {
          OUTLINED_FUNCTION_6_25();
          BOOL v19 = v6 && a3 == 0xE300000000000000;
          if (!v19 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
          {
            uint64_t v5 = 0x70206C6F6F686373;
            OUTLINED_FUNCTION_1_28();
            if (v6 && a3 == 0xE600000000000000)
            {
LABEL_108:
              OUTLINED_FUNCTION_2_29();
            }
            else
            {
              OUTLINED_FUNCTION_0_22();
              OUTLINED_FUNCTION_2_29();
              if ((v21 & 1) == 0)
              {
                OUTLINED_FUNCTION_11_16();
                if (v6 && a3 == 0xE400000000000000)
                {
LABEL_107:
                  OUTLINED_FUNCTION_12_17();
                }
                else
                {
                  OUTLINED_FUNCTION_0_22();
                  OUTLINED_FUNCTION_12_17();
                  if ((v23 & 1) == 0)
                  {
                    OUTLINED_FUNCTION_14_15();
                    BOOL v24 = v6 && a3 == 0xE300000000000000;
                    if (!v24 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
                    {
                      uint64_t v5 = 0x687020726568746FLL;
                      OUTLINED_FUNCTION_5_25();
                      BOOL v25 = v6 && a3 == 0xE300000000000000;
                      if (!v25 && (OUTLINED_FUNCTION_0_22() & 1) == 0) {
                        return 0x656E6F6870;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return v5;
    case 3:
      uint64_t v5 = 0x72646461206D7967;
      BOOL v26 = a2 == 7174503 && a3 == 0xE300000000000000;
      if (!v26 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
      {
        uint64_t v5 = 0x64646120656D6F68;
        BOOL v27 = a2 == 1701670760 && a3 == 0xE400000000000000;
        if (!v27 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
        {
          uint64_t v5 = 0x646461206B726F77;
          BOOL v28 = a2 == 1802661751 && a3 == 0xE400000000000000;
          if (!v28 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
          {
            uint64_t v5 = 0x61206C6F6F686373;
            OUTLINED_FUNCTION_1_28();
            BOOL v29 = v6 && a3 == 0xE600000000000000;
            if (!v29 && (OUTLINED_FUNCTION_0_22() & 1) == 0) {
              return 0x73736572646461;
            }
          }
        }
      }
      return v5;
    case 4:
      return v5;
    case 5:
      return 0x7961646874726962;
    case 6:
      unsigned int v30 = 1801677166;
      return v30 | 0x6D616E2000000000;
    case 7:
      return 0x616E207473726966;
    case 8:
      unsigned int v30 = 1953718636;
      return v30 | 0x6D616E2000000000;
    case 9:
      unsigned int v30 = 1819047270;
      return v30 | 0x6D616E2000000000;
    default:
      swift_bridgeObjectRetain();
      return a2;
  }
}

uint64_t String.mapToNLContactTypeValue(forType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 2)
  {
    OUTLINED_FUNCTION_9_16();
    if (v7 && a3 == 0xE400000000000000) {
      goto LABEL_78;
    }
    OUTLINED_FUNCTION_0_22();
    OUTLINED_FUNCTION_12_17();
    if (v15) {
      return v3;
    }
    OUTLINED_FUNCTION_10_20();
    BOOL v16 = v7 && a3 == 0xE400000000000000;
    if (v16 || (OUTLINED_FUNCTION_0_22() & 1) != 0) {
      return v3;
    }
    OUTLINED_FUNCTION_8_21();
    if (v7 && a3 == 0xE600000000000000) {
      goto LABEL_80;
    }
    OUTLINED_FUNCTION_0_22();
    OUTLINED_FUNCTION_2_29();
    if (v18) {
      return v3;
    }
    OUTLINED_FUNCTION_13_18();
    BOOL v19 = v7 && a3 == v4;
    if (v19 || (OUTLINED_FUNCTION_0_22() & 1) != 0) {
      return v3;
    }
    OUTLINED_FUNCTION_6_25();
    BOOL v20 = v7 && a3 == 0xE300000000000000;
    if (v20 || (OUTLINED_FUNCTION_0_22() & 1) != 0) {
      return v3;
    }
    uint64_t v3 = 0x70206C6F6F686373;
    OUTLINED_FUNCTION_1_28();
    if (v7 && a3 == 0xE600000000000000)
    {
LABEL_80:
      OUTLINED_FUNCTION_2_29();
      return v3;
    }
    OUTLINED_FUNCTION_0_22();
    OUTLINED_FUNCTION_2_29();
    if (v22) {
      return v3;
    }
    OUTLINED_FUNCTION_11_16();
    if (v7 && a3 == 0xE400000000000000)
    {
LABEL_78:
      OUTLINED_FUNCTION_12_17();
      return v3;
    }
    OUTLINED_FUNCTION_0_22();
    OUTLINED_FUNCTION_12_17();
    if (v24) {
      return v3;
    }
    OUTLINED_FUNCTION_14_15();
    BOOL v25 = v7 && a3 == v4;
    if (v25 || (OUTLINED_FUNCTION_0_22() & 1) != 0) {
      return v3;
    }
    uint64_t v3 = 0x687020726568746FLL;
    OUTLINED_FUNCTION_5_25();
    if (v7 && a3 == 0xE500000000000000) {
      return v3;
    }
    goto LABEL_30;
  }
  if (a1 != 1)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    return a2;
  }
  OUTLINED_FUNCTION_4_24();
  BOOL v7 = v7 && a3 == 0xE400000000000000;
  if (!v7 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
  {
    OUTLINED_FUNCTION_7_18();
    if (!v7 || a3 != 0xE800000000000000)
    {
      char v9 = OUTLINED_FUNCTION_0_22();
      BOOL v10 = a2 == 1701670760 && a3 == 0xE400000000000000;
      BOOL v11 = v10;
      if ((v9 & 1) == 0 && !v11 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
      {
        uint64_t v3 = 0x65206C6F6F686373;
        OUTLINED_FUNCTION_1_28();
        BOOL v12 = v7 && a3 == 0xE600000000000000;
        if (!v12 && (OUTLINED_FUNCTION_0_22() & 1) == 0)
        {
          OUTLINED_FUNCTION_3_22();
          if (!v7 || a3 != 0xE500000000000000)
          {
LABEL_30:
            if ((OUTLINED_FUNCTION_0_22() & 1) == 0) {
              goto LABEL_31;
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t String.sanitizeHomophones.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = StringProtocol.components<A>(separatedBy:)();
  if (*(void *)(result + 16))
  {
    uint64_t v1 = *(void *)(result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t String.sanitizeContactIdURL.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x270FA5388](v4 - 8);
  BOOL v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for URLQueryItem();
  uint64_t v7 = *(void *)(v61 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v61);
  BOOL v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)&v54 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  BOOL v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v54 - v17;
  URLComponents.init(string:)();
  outlined init with copy of URLComponents?((uint64_t)v18, (uint64_t)v16);
  uint64_t v19 = type metadata accessor for URLComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v19) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for URLComponents?);
LABEL_15:
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v61);
LABEL_16:
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v6, &demangling cache variable for type metadata for URLQueryItem?);
LABEL_17:
    if (one-time initialization token for siriContacts != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v62);
      OUTLINED_FUNCTION_35_5(v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22D49E000, v35, v36, "#sanitizeContactIdURL: string is not in URL format, returning raw value: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for URLComponents?);
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t v20 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v16, v19);
  if (!v20) {
    goto LABEL_15;
  }
  unint64_t v60 = a2;
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = v61;
  if (v21)
  {
    uint64_t v55 = v6;
    uint64_t v56 = v7;
    uint64_t v58 = v18;
    uint64_t v59 = v12;
    uint64_t v57 = a1;
    uint64_t v23 = v20;
    BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v24 = v7 + 16;
    BOOL v25 = v26;
    unint64_t v27 = v23 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
    uint64_t v28 = *(void *)(v24 + 56);
    uint64_t v54 = v23;
    swift_bridgeObjectRetain();
    while (1)
    {
      v25(v10, v27, v22);
      uint64_t v29 = URLQueryItem.name.getter();
      uint64_t v31 = v30;
      if (one-time initialization token for identifier != -1) {
        swift_once();
      }
      if (v29 == static Constants.identifier && v31 == *(void *)algn_26857AB68) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_26;
      }
      uint64_t v22 = v61;
      (*(void (**)(char *, uint64_t))(v24 - 8))(v10, v61);
      v27 += v28;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = 1;
        a1 = v57;
        char v18 = v58;
        BOOL v12 = v59;
        a2 = v60;
        BOOL v6 = v55;
        uint64_t v7 = v56;
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease();
LABEL_26:
    swift_bridgeObjectRelease();
    BOOL v6 = v55;
    uint64_t v7 = v56;
    uint64_t v22 = v61;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v10, v61);
    uint64_t v40 = 0;
    a1 = v57;
    char v18 = v58;
    BOOL v12 = v59;
    a2 = v60;
  }
  else
  {
    uint64_t v40 = 1;
    a2 = v60;
  }
LABEL_27:
  __swift_storeEnumTagSinglePayload((uint64_t)v6, v40, 1, v22);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v22) == 1) {
    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v6, v22);
  uint64_t v41 = URLQueryItem.value.getter();
  if (!v42)
  {
    uint64_t v50 = OUTLINED_FUNCTION_15_16();
    v51(v50);
    goto LABEL_17;
  }
  uint64_t v43 = v41;
  unint64_t v44 = v42;
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v59 = v12;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v62);
    OUTLINED_FUNCTION_35_5(v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22D49E000, v46, v47, "#sanitizeContactIdURL: string is in URL format, returning identifier query parameter: %s", v48, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v59, v61);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v52 = OUTLINED_FUNCTION_15_16();
    v53(v52);
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for URLComponents?);
  return v43;
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  specialized Collection.prefix(_:)(1);
  Swift::String v4 = Substring.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.dropFirst(_:)(1uLL, v3, v2);
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v4._countAndFlagsBits;
  object = v4._object;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    Swift::String result = String.index(_:offsetBy:limitedBy:)();
    if (v6) {
      Swift::String result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      uint64_t v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t String.formattedForCNLabelConversion.getter()
{
  uint64_t v0 = 0x656E6F685069;
  Swift::String v1 = String.lowercased()();
  BOOL v2 = v1._countAndFlagsBits == 0x656E6F687069 && v1._object == (void *)0xE600000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || ((uint64_t v0 = 0x64756F6C4369, v1._countAndFlagsBits == 0x64756F6C6369)
      ? (BOOL v3 = v1._object == (void *)0xE600000000000000)
      : (BOOL v3 = 0),
        v3))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      return String.firstLetterCapitalized()()._countAndFlagsBits;
    }
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t outlined init with copy of URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return v0;
}

uint64_t dispatch thunk of ContactAttributeTypeProtocol.stringify.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t LabelMapper.localizedLabel(handleLabel:localeString:type:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a6;
  uint64_t v94 = a5;
  uint64_t v96 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v92 = (char *)v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v91 = (char *)v89 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v90 = (char *)v89 - v13;
  uint64_t v14 = (uint8_t *)type metadata accessor for CharacterSet();
  uint64_t v15 = *((void *)v14 - 1);
  MEMORY[0x270FA5388](v14);
  uint64_t v95 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v89[1] = v8;
    swift_slowAlloc();
    v89[3] = v14;
    uint64_t v21 = OUTLINED_FUNCTION_9_17();
    v89[4] = a3;
    v99[0] = v21;
    *(_DWORD *)uint64_t v14 = 136315138;
    v89[2] = v15;
    uint64_t v100 = v96;
    unint64_t v101 = a2;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22D49E000, v19, v20, "#localizedLabel raw handleLabel: %s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (a2)
  {
    uint64_t v24 = HIBYTE(a2) & 0xF;
    uint64_t v25 = v96;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v24 = v96 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      CharacterSet.init(charactersIn:)();
      uint64_t v100 = v25;
      unint64_t v101 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      if (v26)
      {
        v42._uint64_t countAndFlagsBits = String.formattedForCNLabelConversion.getter();
        uint64_t v100 = 1008804959;
        unint64_t v101 = 0xE400000000000000;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = 1596203326;
        v43._object = (void *)0xE400000000000000;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        uint64_t v25 = v100;
        a2 = v101;
        uint64_t v44 = OUTLINED_FUNCTION_16_15();
        v45(v44);
LABEL_21:
        uint64_t v100 = v25;
        unint64_t v101 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v46 = StringProtocol.capitalized.getter();
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v100 = v46;
        unint64_t v101 = v48;
        v99[0] = 0x5F24213E786166;
        v99[1] = 0xE700000000000000;
        uint64_t v97 = 0x5F24213E7861465FLL;
        unint64_t v98 = 0xE800000000000000;
        uint64_t v49 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        unint64_t v51 = v50;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain_n();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          OUTLINED_FUNCTION_2_30();
          uint64_t v54 = OUTLINED_FUNCTION_9_17();
          uint64_t v96 = v18;
          OUTLINED_FUNCTION_8_22(v54);
          OUTLINED_FUNCTION_13_19(4.8149e-34);
          v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_14_16(&dword_22D49E000, v55, v56, "#localizedLabel attempting to map CNLabel: %s");
          OUTLINED_FUNCTION_12_18();
          uint64_t v18 = v96;
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        MEMORY[0x230F84F70](v49, v51);
        OUTLINED_FUNCTION_15_17();
        uint64_t v57 = OUTLINED_FUNCTION_7_19();
        unint64_t v59 = v58;

        swift_bridgeObjectRetain_n();
        unint64_t v60 = Logger.logObject.getter();
        LOBYTE(a2) = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v60, (os_log_type_t)a2))
        {
          OUTLINED_FUNCTION_2_30();
          uint64_t v61 = OUTLINED_FUNCTION_9_17();
          OUTLINED_FUNCTION_8_22(v61);
          OUTLINED_FUNCTION_13_19(4.8149e-34);
          uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v100);
          OUTLINED_FUNCTION_0_23(v62);
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_14_16(&dword_22D49E000, v63, v64, "#localizedLabel CNLabel mapped: %s");
          OUTLINED_FUNCTION_12_18();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_2();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v35 = String.sanitizeCNLabel.getter();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_21();
        os_log_type_t v36 = (uint8_t *)v18;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_3_23(v65))
        {
          OUTLINED_FUNCTION_2_30();
          uint64_t v66 = OUTLINED_FUNCTION_9_12();
          OUTLINED_FUNCTION_8_22(v66);
          OUTLINED_FUNCTION_1_29(4.8149e-34);
          uint64_t v67 = OUTLINED_FUNCTION_5_26();
          OUTLINED_FUNCTION_0_23(v67);
          OUTLINED_FUNCTION_11_17();
          uint64_t v41 = "#localizedLabel mapped label sanitized: %s";
          goto LABEL_29;
        }
LABEL_40:

        swift_bridgeObjectRelease_n();
        return v35;
      }
      uint64_t v27 = OUTLINED_FUNCTION_16_15();
      v28(v27);
    }
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  if (v94 == 3)
  {
    uint64_t v68 = (uint64_t)v92;
    ContactsLabelCATs.address()();
    id v69 = (void *)Result<>.firstPrint.getter();
    uint64_t v71 = v70;
    outlined destroy of Result<TemplatingResult, Error>(v68);
    if (!v71)
    {
      id v69 = (void *)static String.EMPTY.getter();
      uint64_t v71 = v72;
    }
    MEMORY[0x230F84F70](v69, v71);
    OUTLINED_FUNCTION_15_17();
    uint64_t v35 = OUTLINED_FUNCTION_7_19();

    OUTLINED_FUNCTION_10_21();
    os_log_type_t v36 = (uint8_t *)v18;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_3_23(v73))
    {
      OUTLINED_FUNCTION_2_30();
      uint64_t v74 = OUTLINED_FUNCTION_9_12();
      OUTLINED_FUNCTION_8_22(v74);
      OUTLINED_FUNCTION_1_29(4.8149e-34);
      uint64_t v75 = OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_0_23(v75);
      OUTLINED_FUNCTION_11_17();
      uint64_t v41 = "#localizedLabel mapped postalAddress: %s";
      goto LABEL_29;
    }
    goto LABEL_40;
  }
  if (v94 == 2)
  {
    uint64_t v76 = (uint64_t)v91;
    ContactsLabelCATs.phone()();
    unint64_t v77 = (void *)Result<>.firstPrint.getter();
    uint64_t v79 = v78;
    outlined destroy of Result<TemplatingResult, Error>(v76);
    if (!v79)
    {
      unint64_t v77 = (void *)static String.EMPTY.getter();
      uint64_t v79 = v80;
    }
    MEMORY[0x230F84F70](v77, v79);
    OUTLINED_FUNCTION_15_17();
    uint64_t v35 = OUTLINED_FUNCTION_7_19();

    OUTLINED_FUNCTION_10_21();
    os_log_type_t v36 = (uint8_t *)v18;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_3_23(v81))
    {
      OUTLINED_FUNCTION_2_30();
      uint64_t v82 = OUTLINED_FUNCTION_9_12();
      OUTLINED_FUNCTION_8_22(v82);
      OUTLINED_FUNCTION_1_29(4.8149e-34);
      uint64_t v83 = OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_0_23(v83);
      OUTLINED_FUNCTION_11_17();
      uint64_t v41 = "#localizedLabel mapped phoneNumber: %s";
      goto LABEL_29;
    }
    goto LABEL_40;
  }
  if (v94 != 1)
  {
    uint64_t v84 = static String.EMPTY.getter();
    MEMORY[0x230F84F70](v84);
    OUTLINED_FUNCTION_15_17();
    uint64_t v35 = OUTLINED_FUNCTION_7_19();

    OUTLINED_FUNCTION_10_21();
    os_log_type_t v36 = (uint8_t *)v18;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_3_23(v85))
    {
      OUTLINED_FUNCTION_2_30();
      uint64_t v86 = OUTLINED_FUNCTION_9_12();
      OUTLINED_FUNCTION_8_22(v86);
      OUTLINED_FUNCTION_1_29(4.8149e-34);
      uint64_t v87 = OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_0_23(v87);
      OUTLINED_FUNCTION_11_17();
      uint64_t v41 = "#localizedLabel mapped: %s";
      goto LABEL_29;
    }
    goto LABEL_40;
  }
  uint64_t v29 = (uint64_t)v90;
  ContactsLabelCATs.email()();
  uint64_t v30 = Result<>.firstPrint.getter();
  uint64_t v32 = v31;
  outlined destroy of Result<TemplatingResult, Error>(v29);
  if (!v32)
  {
    uint64_t v30 = static String.EMPTY.getter();
    uint64_t v32 = v33;
  }
  uint64_t v34 = (void *)MEMORY[0x230F84F70](v30, v32);
  swift_bridgeObjectRelease();
  uint64_t v35 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

  OUTLINED_FUNCTION_10_21();
  os_log_type_t v36 = (uint8_t *)v18;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_3_23(v38)) {
    goto LABEL_40;
  }
  OUTLINED_FUNCTION_2_30();
  uint64_t v39 = OUTLINED_FUNCTION_9_12();
  OUTLINED_FUNCTION_8_22(v39);
  OUTLINED_FUNCTION_1_29(4.8149e-34);
  uint64_t v40 = OUTLINED_FUNCTION_5_26();
  OUTLINED_FUNCTION_0_23(v40);
  OUTLINED_FUNCTION_11_17();
  uint64_t v41 = "#localizedLabel mapped emailAddress: %s";
LABEL_29:
  _os_log_impl(&dword_22D49E000, v37, (os_log_type_t)a2, v41, v36, 0xCu);
  OUTLINED_FUNCTION_12_18();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_2();

  return v35;
}