void *mlcore::PropertyCache::PropertyCache(mlcore::PropertyCache *this, const mlcore::PropertyCache *a2)
{
  void *result;

  result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)this, (uint64_t)a2);
  *result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

{
  void *result;

  result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)this, (uint64_t)a2);
  *result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

void mediaplatform::SQLSelectStatement::~SQLSelectStatement(mediaplatform::SQLSelectStatement *this)
{
  *(void *)this = &unk_26C5BEE18;
  v5 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEE18;
  v5 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x2166B26F0);
}

void mlcore::LocalizedSectionHeader::_initializeLocalizedHeaderTitles(uint64_t a1, void *a2)
{
  memset(&v12, 0, sizeof(v12));
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v3 != i; v3 += 24)
  {
    if (*(char *)(v3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    }
    else {
      std::string __p = *(std::string *)v3;
    }
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (v6)
    {
      p_p = (long long *)(v6 + 40);
      std::vector<std::string>::pointer end = v12.__end_;
      if (v12.__end_ < v12.__end_cap_.__value_)
      {
        if ((char)v6[63] < 0)
        {
          std::string::__init_copy_ctor_external(v12.__end_, *((const std::string::value_type **)v6 + 5), *((void *)v6 + 6));
        }
        else
        {
          long long v9 = *p_p;
          v12.__end_->__r_.__value_.__r.__words[2] = *((void *)v6 + 7);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        }
LABEL_16:
        v10 = end + 1;
        goto LABEL_17;
      }
    }
    else
    {
      std::vector<std::string>::pointer end = v12.__end_;
      if (v12.__end_ < v12.__end_cap_.__value_)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v12.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v12.__end_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        }
        goto LABEL_16;
      }
      p_p = (long long *)&__p;
    }
    v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, p_p);
LABEL_17:
    v12.__end_ = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((std::vector<std::string> *)(a1 + 32) != &v12) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 32), v12.__begin_, (long long *)v12.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v12.__end_ - (char *)v12.__begin_) >> 3));
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_214DA1D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void mediaplatform::ComponentsSeparatedByString(std::string *a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  v4 = a3;
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v6 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  }
  int v7 = a2[23];
  if (v7 >= 0) {
    v8 = a2;
  }
  else {
    v8 = *(char **)a2;
  }
  if (v7 >= 0) {
    int64_t v9 = a2[23];
  }
  else {
    int64_t v9 = *((void *)a2 + 1);
  }
  if (v9)
  {
    if ((char)size < 0) {
      size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v9)
    {
      v11 = &size[v6];
      int v12 = *v8;
      v13 = (void *)v6;
      do
      {
        v14 = &size[-v9];
        if (v14 == (char *)-1) {
          break;
        }
        v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
        if (!v15) {
          break;
        }
        v16 = v15;
        if (!memcmp(v15, v8, v9))
        {
          if (v16 == v11) {
            break;
          }
          uint64_t v17 = (uint64_t)&v16[-v6];
          if (v17 == -1) {
            break;
          }
          std::string::size_type v18 = 0;
          v39 = v4;
          do
          {
            uint64_t v19 = v17;
            std::string::basic_string(&v40, a1, v18, v17 - v18, (std::allocator<char> *)&v41);
            std::vector<std::string>::pointer end = v4->__end_;
            if (end >= v4->__end_cap_.__value_)
            {
              std::vector<std::string>::pointer v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (long long *)&v40);
            }
            else
            {
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v4->__end_, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v21 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
                end->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v21;
              }
              std::vector<std::string>::pointer v22 = end + 1;
              v4->__end_ = end + 1;
            }
            v4->__end_ = v22;
            std::string::size_type v18 = v17 + v9;
            v23 = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
            if ((char)v23 >= 0) {
              std::string::size_type v24 = (std::string::size_type)a1;
            }
            else {
              std::string::size_type v24 = a1->__r_.__value_.__r.__words[0];
            }
            if ((char)v23 < 0) {
              v23 = (char *)a1->__r_.__value_.__l.__size_;
            }
            int v25 = a2[23];
            if (v25 >= 0) {
              v26 = a2;
            }
            else {
              v26 = *(char **)a2;
            }
            if (v25 >= 0) {
              int64_t v27 = a2[23];
            }
            else {
              int64_t v27 = *((void *)a2 + 1);
            }
            if ((unint64_t)v23 >= v18)
            {
              v17 += v9;
              if (v27)
              {
                v28 = (void *)(v24 + v18);
                v29 = &v23[v24];
                int64_t v30 = (int64_t)&v23[-v18];
                if (v30 >= v27)
                {
                  std::string::size_type v38 = v24;
                  int v32 = *v26;
                  do
                  {
                    uint64_t v33 = v30 - v27;
                    if (v33 == -1) {
                      break;
                    }
                    v34 = (char *)memchr(v28, v32, v33 + 1);
                    if (!v34) {
                      break;
                    }
                    v31 = v34;
                    if (!memcmp(v34, v26, v27)) {
                      goto LABEL_53;
                    }
                    v28 = v31 + 1;
                    int64_t v30 = v29 - (v31 + 1);
                  }
                  while (v30 >= v27);
                  v31 = v29;
LABEL_53:
                  std::string::size_type v24 = v38;
                }
                else
                {
                  v31 = v29;
                }
                if (v31 == v29) {
                  uint64_t v17 = -1;
                }
                else {
                  uint64_t v17 = (uint64_t)&v31[-v24];
                }
                v4 = v39;
              }
            }
            else
            {
              uint64_t v17 = -1;
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
          }
          while (v17 != -1);
          std::string::basic_string(&v40, a1, v19 + v9, -v19, (std::allocator<char> *)&v41);
          std::vector<std::string>::pointer v35 = v4->__end_;
          if (v35 >= v4->__end_cap_.__value_)
          {
            std::vector<std::string>::pointer v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (long long *)&v40);
          }
          else
          {
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v4->__end_, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v36 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
              v35->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
            }
            std::vector<std::string>::pointer v37 = v35 + 1;
            v4->__end_ = v35 + 1;
          }
          v4->__end_ = v37;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          return;
        }
        v13 = v16 + 1;
        size = (char *)(v11 - (v16 + 1));
      }
      while ((uint64_t)size >= v9);
    }
  }
  v4->__end_ = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (long long *)a1);
}

void sub_214DA20A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  v17[1] = v16;
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *mediaplatform::FilePath::FilePath(void *a1, std::string *__str)
{
  *a1 = &unk_26C5BF338;
  a1[1] = 0;
  v4 = (std::vector<std::string> *)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  memset(&v23, 0, sizeof(v23));
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
      goto LABEL_46;
    }
    std::string __p = *__str;
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = 47;
    v5 = __str;
    goto LABEL_4;
  }
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if (!size) {
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, size);
  int v9 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&__s, "/");
  if (v9 < 0)
  {
    if (!__str->__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
    v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    v5 = __str;
    if (!v9)
    {
LABEL_18:
      std::vector<std::string>::pointer end = v23.__end_;
      if (v23.__end_ >= v23.__end_cap_.__value_)
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, (long long *)&__s);
      }
      else
      {
        *v23.__end_ = __s;
        v10 = end + 1;
      }
      goto LABEL_23;
    }
  }
LABEL_4:
  if (v5->__r_.__value_.__s.__data_[0] != 47)
  {
    std::string::operator=(&__p, __str);
    goto LABEL_24;
  }
  std::string::basic_string(&v20, __str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__sz);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v20;
  std::vector<std::string>::pointer v7 = v23.__end_;
  if (v23.__end_ >= v23.__end_cap_.__value_)
  {
    v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, (long long *)&__s);
  }
  else
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v23.__end_, __s.__r_.__value_.__l.__data_, v6);
    }
    else {
      *v23.__end_ = __s;
    }
    v10 = v7 + 1;
  }
LABEL_23:
  v23.__end_ = v10;
LABEL_24:
  mediaplatform::ComponentsSeparatedByString(&__p, (char *)&__s, (std::vector<std::string> *)&v20);
  std::string::size_type v13 = v20.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v20.__r_.__value_.__r.__words[0]; i != v13; i += 24)
  {
    if (*(char *)(i + 23) < 0) {
      std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else {
      std::string __sz = *(std::string *)i;
    }
    std::string::size_type v14 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    int v15 = SHIBYTE(__sz.__r_.__value_.__r.__words[2]);
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = __sz.__r_.__value_.__l.__size_;
    }
    if (v14)
    {
      std::vector<std::string>::pointer v16 = v23.__end_;
      if (v23.__end_ >= v23.__end_cap_.__value_)
      {
        uint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, (long long *)&__sz);
      }
      else
      {
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23.__end_, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v23.__end_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
          v16->__r_.__value_.__r.__words[2] = __sz.__r_.__value_.__r.__words[2];
        }
        uint64_t v17 = v16 + 1;
      }
      v23.__end_ = v17;
    }
    if (v15 < 0) {
      operator delete(__sz.__r_.__value_.__l.__data_);
    }
  }
  __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (v4 != &v23) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, v23.__begin_, (long long *)v23.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_ - (char *)v23.__begin_) >> 3));
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_214DA23E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  *(void *)(v29 - 64) = v28;
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  a22 = (void *)(v29 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  *(void *)(v29 - 72) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    int v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_214DA2594(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (void *)result;
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::LocalizedSectionHeader>>(a4);
    uint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[56 * v9];
    std::string::size_type v14 = v7;
    int v15 = v7;
    v12[0] = v6 + 2;
    v12[1] = &v14;
    v12[2] = &v15;
    char v13 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        *(void *)v10 = *(void *)a2;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *((void *)v10 + 3) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v10 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = 0;
        long long v11 = (std::string *)(v10 + 32);
        v11->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
        v10 = v15 + 56;
        v15 += 56;
        a2 += 56;
      }
      while (a2 != a3);
      uint64_t v8 = v10;
    }
    char v13 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::LocalizedSectionHeader>,mlcore::LocalizedSectionHeader*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
    v6[1] = v8;
  }
  return result;
}

void sub_214DA26E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  std::string::size_type v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](a1, v11);
    std::vector<std::string>::pointer v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    std::string::size_type v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        std::string::size_type v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    std::vector<std::string>::pointer v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      std::string::size_type v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    std::__split_buffer<std::string>::pointer end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_214DA28BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_214DA2930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  std::vector<std::string>::pointer v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type v6 = (long long *)((char *)v6 + 24);
      std::vector<std::string>::pointer v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_214DA2A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::LocalizedSectionHeader>,mlcore::LocalizedSectionHeader*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 56)
    {
      long long v7 = (void **)(v4 - 24);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      long long v7 = (void **)(v4 - 48);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::LocalizedSectionHeader>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void mlcore::PropertyCache::mergePropertiesFromCache(uint64_t a1, void *a2, uint64_t a3)
{
  for (uint64_t i = (void *)a2[23]; i; uint64_t i = (void *)*i)
  {
    unint64_t v7 = i[2];
    if (std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(*(void *)(a3 + 24), v7))
    {
      uint64_t v8 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v7);
      unint64_t v20 = v7;
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a1 + 168, v7, &v20)[3] = v8;
    }
  }
  for (j = (void *)a2[18]; j; j = (void *)*j)
  {
    unint64_t v10 = j[2];
    if (std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(*(void *)(a3 + 24), v10))
    {
      int v11 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v10);
      unint64_t v20 = v10;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a1 + 128, v10, &v20)+ 6) = v11;
    }
  }
  for (k = (void *)a2[13]; k; k = (void *)*k)
  {
    unint64_t v13 = k[2];
    if (std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(*(void *)(a3 + 24), v13))
    {
      double v14 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v13);
      unint64_t v20 = v13;
      *((double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a1 + 88, v13, &v20)+ 3) = v14;
    }
  }
  for (m = (uint64_t *)a2[8]; m; m = (uint64_t *)*m)
  {
    unint64_t v16 = m[2];
    unint64_t v20 = v16;
    if (*((char *)m + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)m[3], m[4]);
      unint64_t v16 = v20;
    }
    else
    {
      std::string v21 = *(std::string *)((unsigned char *)m + 1);
    }
    if (std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(*(void *)(a3 + 24), v16))
    {
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, (uint64_t)a2, v16);
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a1, &__p, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  for (n = (uint64_t **)a2[3]; n; n = (uint64_t **)*n)
  {
    unint64_t v20 = (unint64_t)n[2];
    mediaplatform::Data::Data((mediaplatform::Data *)&v21, n[6], (size_t)n[4], 1);
    if (std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(*(void *)(a3 + 24), v20))
    {
      mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v19, (uint64_t)a2, v20);
      mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a1, (uint64_t)v19, v20);
      mediaplatform::Data::~Data((mediaplatform::Data *)v19);
    }
    mediaplatform::Data::~Data((mediaplatform::Data *)&v21);
  }
}

void sub_214DA2E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  mediaplatform::Data::~Data((mediaplatform::Data *)&a15);
  mediaplatform::Data::~Data(v26);
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(mlcore::ModelPropertyBase *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t _ZNSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_EclEOS8_()
{
  return 1;
}

void *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *std::string v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    std::string v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_214DA30F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      std::vector<std::string>::pointer v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          std::vector<std::string>::pointer v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  std::vector<std::string>::pointer v12 = operator new(0x20uLL);
  *std::vector<std::string>::pointer v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *std::vector<std::string>::pointer v12 = *v21;
LABEL_38:
    *std::string v21 = v12;
    goto LABEL_39;
  }
  *std::vector<std::string>::pointer v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    std::string v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_214DA3340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a1 + 168), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(void *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
  }
  return v3[3];
}

void sub_214DA3420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

std::string *mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(uint64_t a1, std::string *__str, std::string::size_type a3)
{
  unint64_t v7 = (uint64_t *)(a1 + 48);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 56);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(std::string ***)(*v7 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (std::string *)i->__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = i->__r_.__value_.__l.__size_;
        if (size == v10)
        {
          if (i->__r_.__value_.__r.__words[2] == a3) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (size >= v11) {
              size %= v11;
            }
          }
          else
          {
            size &= v11 - 1;
          }
          if (size != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (std::string *)operator new(0x30uLL);
  i->__r_.__value_.__r.__words[0] = 0;
  i->__r_.__value_.__l.__size_ = v10;
  i->__r_.__value_.__r.__words[2] = a3;
  i[1].__r_.__value_.__r.__words[0] = 0;
  i[1].__r_.__value_.__l.__size_ = 0;
  i[1].__r_.__value_.__r.__words[2] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v17 = *(float *)(a1 + 80);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    BOOL v18 = 1;
    if (v11 >= 3) {
      BOOL v18 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v11);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v7, v21);
    unint64_t v11 = *(void *)(a1 + 56);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v22 = *v7;
  std::vector<std::string> v23 = *(std::string ***)(*v7 + 8 * v3);
  if (v23)
  {
    i->__r_.__value_.__r.__words[0] = (std::string::size_type)*v23;
LABEL_38:
    char *v23 = i;
    goto LABEL_39;
  }
  i->__r_.__value_.__r.__words[0] = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = i;
  *(void *)(v22 + 8 * v3) = a1 + 64;
  if (i->__r_.__value_.__r.__words[0])
  {
    unint64_t v24 = *(void *)(i->__r_.__value_.__r.__words[0] + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    std::vector<std::string> v23 = (std::string **)(*v7 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 72);
LABEL_40:
  return std::string::operator=(i + 1, __str);
}

void sub_214DA3794(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a1 + 128), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(void *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
  }
  return *((unsigned int *)v3 + 6);
}

void sub_214DA3878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(std::string *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a2 + 48), a3);
  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(void *)a3 + 40))(&v9, a3);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
  }
  if (*((char *)v5 + 47) < 0)
  {
    std::string v6 = (const std::string::value_type *)v5[3];
    std::string::size_type v7 = v5[4];
    std::string::__init_copy_ctor_external(a1, v6, v7);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(v5 + 3);
    a1->__r_.__value_.__r.__words[2] = v5[5];
  }
}

void sub_214DA39C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C7668;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v5 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 8, *(void *)(a2 + 16));
  uint64_t v118 = a2;
  std::string v6 = *(uint64_t ***)(a2 + 24);
  if (v6)
  {
    std::string::size_type v7 = (void *)(a1 + 24);
    do
    {
      unint64_t v8 = (unint64_t)v6[2];
      unint64_t v9 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v9 >> 47) ^ v9);
      unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      unint64_t v12 = *(void *)(a1 + 16);
      if (v12)
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
          if (v11 >= v12) {
            unint64_t v2 = v11 % v12;
          }
        }
        else
        {
          unint64_t v2 = v11 & (v12 - 1);
        }
        float v14 = *(void **)(*v5 + 8 * v2);
        if (v14)
        {
          for (uint64_t i = (void *)*v14; i; uint64_t i = (void *)*i)
          {
            unint64_t v16 = i[1];
            if (v16 == v11)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v13.u32[0] > 1uLL)
              {
                if (v16 >= v12) {
                  v16 %= v12;
                }
              }
              else
              {
                v16 &= v12 - 1;
              }
              if (v16 != v2) {
                break;
              }
            }
          }
        }
      }
      float v17 = operator new(0x40uLL);
      v119[0] = (uint64_t)v17;
      v119[1] = a1 + 24;
      char v120 = 0;
      *float v17 = 0;
      v17[1] = v11;
      v17[2] = v6[2];
      mediaplatform::Data::Data((mediaplatform::Data *)(v17 + 3), v6[6], (size_t)v6[4], 1);
      char v120 = 1;
      float v18 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
      float v19 = *(float *)(a1 + 40);
      if (!v12 || (float)(v19 * (float)v12) < v18)
      {
        BOOL v20 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v12);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v5, v23);
        unint64_t v12 = *(void *)(a1 + 16);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            unint64_t v2 = v11 % v12;
          }
          else {
            unint64_t v2 = v11;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v11;
        }
      }
      uint64_t v24 = *v5;
      int v25 = *(void **)(*v5 + 8 * v2);
      if (v25)
      {
        *float v17 = *v25;
      }
      else
      {
        *float v17 = *v7;
        *std::string::size_type v7 = v17;
        *(void *)(v24 + 8 * v2) = v7;
        if (!*v17) {
          goto LABEL_40;
        }
        unint64_t v26 = *(void *)(*v17 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v26 >= v12) {
            v26 %= v12;
          }
        }
        else
        {
          v26 &= v12 - 1;
        }
        int v25 = (void *)(*v5 + 8 * v26);
      }
      *int v25 = v17;
LABEL_40:
      v119[0] = 0;
      ++*(void *)(a1 + 32);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v119);
LABEL_41:
      std::string v6 = (uint64_t **)*v6;
    }
    while (v6);
  }
  *(void *)a1 = &unk_26C5C7688;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v27 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(v118 + 80);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 48, *(void *)(v118 + 56));
  uint64_t v28 = *(uint64_t **)(v118 + 64);
  if (v28)
  {
    uint64_t v29 = (std::string **)(a1 + 64);
    do
    {
      unint64_t v30 = v28[2];
      unint64_t v31 = 0x9DDFEA08EB382D69 * (((8 * v30) + 8) ^ HIDWORD(v30));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (HIDWORD(v30) ^ (v31 >> 47) ^ v31);
      unint64_t v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
      unint64_t v34 = *(void *)(a1 + 56);
      if (v34)
      {
        uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
          if (v33 >= v34) {
            unint64_t v2 = v33 % v34;
          }
        }
        else
        {
          unint64_t v2 = v33 & (v34 - 1);
        }
        long long v36 = *(void **)(*v27 + 8 * v2);
        if (v36)
        {
          for (j = (void *)*v36; j; j = (void *)*j)
          {
            unint64_t v38 = j[1];
            if (v38 == v33)
            {
              if (j[2] == v30) {
                goto LABEL_85;
              }
            }
            else
            {
              if (v35.u32[0] > 1uLL)
              {
                if (v38 >= v34) {
                  v38 %= v34;
                }
              }
              else
              {
                v38 &= v34 - 1;
              }
              if (v38 != v2) {
                break;
              }
            }
          }
        }
      }
      v39 = (std::string *)operator new(0x30uLL);
      v39->__r_.__value_.__r.__words[0] = 0;
      v39->__r_.__value_.__l.__size_ = v33;
      v39->__r_.__value_.__r.__words[2] = v28[2];
      std::string v40 = v39 + 1;
      if (*((char *)v28 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v28[3], v28[4]);
      }
      else
      {
        long long v41 = *(_OWORD *)(v28 + 3);
        v39[1].__r_.__value_.__r.__words[2] = v28[5];
        *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
      }
      float v42 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
      float v43 = *(float *)(a1 + 80);
      if (!v34 || (float)(v43 * (float)v34) < v42)
      {
        BOOL v44 = (v34 & (v34 - 1)) != 0;
        if (v34 < 3) {
          BOOL v44 = 1;
        }
        unint64_t v45 = v44 | (2 * v34);
        unint64_t v46 = vcvtps_u32_f32(v42 / v43);
        if (v45 <= v46) {
          size_t v47 = v46;
        }
        else {
          size_t v47 = v45;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 48, v47);
        unint64_t v34 = *(void *)(a1 + 56);
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v33 >= v34) {
            unint64_t v2 = v33 % v34;
          }
          else {
            unint64_t v2 = v33;
          }
        }
        else
        {
          unint64_t v2 = (v34 - 1) & v33;
        }
      }
      uint64_t v48 = *v27;
      v49 = *(std::string ***)(*v27 + 8 * v2);
      if (v49)
      {
        v39->__r_.__value_.__r.__words[0] = (std::string::size_type)*v49;
      }
      else
      {
        v39->__r_.__value_.__r.__words[0] = (std::string::size_type)*v29;
        char *v29 = v39;
        *(void *)(v48 + 8 * v2) = v29;
        if (!v39->__r_.__value_.__r.__words[0]) {
          goto LABEL_84;
        }
        unint64_t v50 = *(void *)(v39->__r_.__value_.__r.__words[0] + 8);
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v50 >= v34) {
            v50 %= v34;
          }
        }
        else
        {
          v50 &= v34 - 1;
        }
        v49 = (std::string **)(*v27 + 8 * v50);
      }
      *v49 = v39;
LABEL_84:
      ++*(void *)(a1 + 72);
LABEL_85:
      uint64_t v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
  *(void *)a1 = &unk_26C5C76A8;
  *(_OWORD *)(a1 + 88) = 0u;
  v51 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(v118 + 120);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 88, *(void *)(v118 + 96));
  v52 = *(void **)(v118 + 104);
  if (v52)
  {
    v53 = (void *)(a1 + 104);
    unint64_t v54 = *(void *)(a1 + 96);
    do
    {
      unint64_t v55 = v52[2];
      unint64_t v56 = 0x9DDFEA08EB382D69 * (((8 * v55) + 8) ^ HIDWORD(v55));
      unint64_t v57 = 0x9DDFEA08EB382D69 * (HIDWORD(v55) ^ (v56 >> 47) ^ v56);
      unint64_t v58 = 0x9DDFEA08EB382D69 * (v57 ^ (v57 >> 47));
      if (v54)
      {
        uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v57 ^ (v57 >> 47));
          if (v58 >= v54) {
            unint64_t v2 = v58 % v54;
          }
        }
        else
        {
          unint64_t v2 = v58 & (v54 - 1);
        }
        v60 = *(void **)(*v51 + 8 * v2);
        if (v60)
        {
          for (k = (void *)*v60; k; k = (void *)*k)
          {
            unint64_t v62 = k[1];
            if (v62 == v58)
            {
              if (k[2] == v55) {
                goto LABEL_126;
              }
            }
            else
            {
              if (v59.u32[0] > 1uLL)
              {
                if (v62 >= v54) {
                  v62 %= v54;
                }
              }
              else
              {
                v62 &= v54 - 1;
              }
              if (v62 != v2) {
                break;
              }
            }
          }
        }
      }
      v63 = operator new(0x20uLL);
      void *v63 = 0;
      v63[1] = v58;
      *((_OWORD *)v63 + 1) = *((_OWORD *)v52 + 1);
      float v64 = (float)(unint64_t)(*(void *)(a1 + 112) + 1);
      float v65 = *(float *)(a1 + 120);
      if (!v54 || (float)(v65 * (float)v54) < v64)
      {
        BOOL v66 = (v54 & (v54 - 1)) != 0;
        if (v54 < 3) {
          BOOL v66 = 1;
        }
        unint64_t v67 = v66 | (2 * v54);
        unint64_t v68 = vcvtps_u32_f32(v64 / v65);
        if (v67 <= v68) {
          size_t v69 = v68;
        }
        else {
          size_t v69 = v67;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 88, v69);
        unint64_t v54 = *(void *)(a1 + 96);
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v58 >= v54) {
            unint64_t v2 = v58 % v54;
          }
          else {
            unint64_t v2 = v58;
          }
        }
        else
        {
          unint64_t v2 = (v54 - 1) & v58;
        }
      }
      uint64_t v70 = *v51;
      v71 = *(void **)(*v51 + 8 * v2);
      if (v71)
      {
        void *v63 = *v71;
      }
      else
      {
        void *v63 = *v53;
        void *v53 = v63;
        *(void *)(v70 + 8 * v2) = v53;
        if (!*v63) {
          goto LABEL_125;
        }
        unint64_t v72 = *(void *)(*v63 + 8);
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v72 >= v54) {
            v72 %= v54;
          }
        }
        else
        {
          v72 &= v54 - 1;
        }
        v71 = (void *)(*v51 + 8 * v72);
      }
      void *v71 = v63;
LABEL_125:
      ++*(void *)(a1 + 112);
LABEL_126:
      v52 = (void *)*v52;
    }
    while (v52);
  }
  *(void *)a1 = &unk_26C5C76C8;
  *(_OWORD *)(a1 + 128) = 0u;
  v73 = (uint64_t *)(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(v118 + 160);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 128, *(void *)(v118 + 136));
  v74 = *(void **)(v118 + 144);
  if (v74)
  {
    v75 = (void *)(a1 + 144);
    unint64_t v76 = *(void *)(a1 + 136);
    do
    {
      unint64_t v77 = v74[2];
      unint64_t v78 = 0x9DDFEA08EB382D69 * (((8 * v77) + 8) ^ HIDWORD(v77));
      unint64_t v79 = 0x9DDFEA08EB382D69 * (HIDWORD(v77) ^ (v78 >> 47) ^ v78);
      unint64_t v80 = 0x9DDFEA08EB382D69 * (v79 ^ (v79 >> 47));
      if (v76)
      {
        uint8x8_t v81 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
        v81.i16[0] = vaddlv_u8(v81);
        if (v81.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v79 ^ (v79 >> 47));
          if (v80 >= v76) {
            unint64_t v2 = v80 % v76;
          }
        }
        else
        {
          unint64_t v2 = v80 & (v76 - 1);
        }
        v82 = *(void **)(*v73 + 8 * v2);
        if (v82)
        {
          for (m = (void *)*v82; m; m = (void *)*m)
          {
            unint64_t v84 = m[1];
            if (v84 == v80)
            {
              if (m[2] == v77) {
                goto LABEL_167;
              }
            }
            else
            {
              if (v81.u32[0] > 1uLL)
              {
                if (v84 >= v76) {
                  v84 %= v76;
                }
              }
              else
              {
                v84 &= v76 - 1;
              }
              if (v84 != v2) {
                break;
              }
            }
          }
        }
      }
      v85 = operator new(0x20uLL);
      void *v85 = 0;
      v85[1] = v80;
      *((_OWORD *)v85 + 1) = *((_OWORD *)v74 + 1);
      float v86 = (float)(unint64_t)(*(void *)(a1 + 152) + 1);
      float v87 = *(float *)(a1 + 160);
      if (!v76 || (float)(v87 * (float)v76) < v86)
      {
        BOOL v88 = (v76 & (v76 - 1)) != 0;
        if (v76 < 3) {
          BOOL v88 = 1;
        }
        unint64_t v89 = v88 | (2 * v76);
        unint64_t v90 = vcvtps_u32_f32(v86 / v87);
        if (v89 <= v90) {
          size_t v91 = v90;
        }
        else {
          size_t v91 = v89;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 128, v91);
        unint64_t v76 = *(void *)(a1 + 136);
        if ((v76 & (v76 - 1)) != 0)
        {
          if (v80 >= v76) {
            unint64_t v2 = v80 % v76;
          }
          else {
            unint64_t v2 = v80;
          }
        }
        else
        {
          unint64_t v2 = (v76 - 1) & v80;
        }
      }
      uint64_t v92 = *v73;
      v93 = *(void **)(*v73 + 8 * v2);
      if (v93)
      {
        void *v85 = *v93;
      }
      else
      {
        void *v85 = *v75;
        void *v75 = v85;
        *(void *)(v92 + 8 * v2) = v75;
        if (!*v85) {
          goto LABEL_166;
        }
        unint64_t v94 = *(void *)(*v85 + 8);
        if ((v76 & (v76 - 1)) != 0)
        {
          if (v94 >= v76) {
            v94 %= v76;
          }
        }
        else
        {
          v94 &= v76 - 1;
        }
        v93 = (void *)(*v73 + 8 * v94);
      }
      void *v93 = v85;
LABEL_166:
      ++*(void *)(a1 + 152);
LABEL_167:
      v74 = (void *)*v74;
    }
    while (v74);
  }
  *(void *)a1 = &unk_26C5C76E8;
  *(_OWORD *)(a1 + 168) = 0u;
  v95 = (uint64_t *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(v118 + 200);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 168, *(void *)(v118 + 176));
  v96 = *(void **)(v118 + 184);
  if (v96)
  {
    v97 = (void *)(a1 + 184);
    unint64_t v98 = *(void *)(a1 + 176);
    do
    {
      unint64_t v99 = v96[2];
      unint64_t v100 = 0x9DDFEA08EB382D69 * (((8 * v99) + 8) ^ HIDWORD(v99));
      unint64_t v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v99) ^ (v100 >> 47) ^ v100);
      unint64_t v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
      if (v98)
      {
        uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
        v103.i16[0] = vaddlv_u8(v103);
        if (v103.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
          if (v102 >= v98) {
            unint64_t v2 = v102 % v98;
          }
        }
        else
        {
          unint64_t v2 = v102 & (v98 - 1);
        }
        v104 = *(void **)(*v95 + 8 * v2);
        if (v104)
        {
          for (n = (void *)*v104; n; n = (void *)*n)
          {
            unint64_t v106 = n[1];
            if (v106 == v102)
            {
              if (n[2] == v99) {
                goto LABEL_208;
              }
            }
            else
            {
              if (v103.u32[0] > 1uLL)
              {
                if (v106 >= v98) {
                  v106 %= v98;
                }
              }
              else
              {
                v106 &= v98 - 1;
              }
              if (v106 != v2) {
                break;
              }
            }
          }
        }
      }
      v107 = operator new(0x20uLL);
      void *v107 = 0;
      v107[1] = v102;
      *((_OWORD *)v107 + 1) = *((_OWORD *)v96 + 1);
      float v108 = (float)(unint64_t)(*(void *)(a1 + 192) + 1);
      float v109 = *(float *)(a1 + 200);
      if (!v98 || (float)(v109 * (float)v98) < v108)
      {
        BOOL v110 = (v98 & (v98 - 1)) != 0;
        if (v98 < 3) {
          BOOL v110 = 1;
        }
        unint64_t v111 = v110 | (2 * v98);
        unint64_t v112 = vcvtps_u32_f32(v108 / v109);
        if (v111 <= v112) {
          size_t v113 = v112;
        }
        else {
          size_t v113 = v111;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 168, v113);
        unint64_t v98 = *(void *)(a1 + 176);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v102 >= v98) {
            unint64_t v2 = v102 % v98;
          }
          else {
            unint64_t v2 = v102;
          }
        }
        else
        {
          unint64_t v2 = (v98 - 1) & v102;
        }
      }
      uint64_t v114 = *v95;
      v115 = *(void **)(*v95 + 8 * v2);
      if (v115)
      {
        void *v107 = *v115;
      }
      else
      {
        void *v107 = *v97;
        void *v97 = v107;
        *(void *)(v114 + 8 * v2) = v97;
        if (!*v107) {
          goto LABEL_207;
        }
        unint64_t v116 = *(void *)(*v107 + 8);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v116 >= v98) {
            v116 %= v98;
          }
        }
        else
        {
          v116 &= v98 - 1;
        }
        v115 = (void *)(*v95 + 8 * v116);
      }
      void *v115 = v107;
LABEL_207:
      ++*(void *)(a1 + 192);
LABEL_208:
      v96 = (void *)*v96;
    }
    while (v96);
  }
  return a1;
}

void sub_214DA45F4(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  std::string v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    float v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          float v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        float v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_214DA4B0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_resultPropertiesToFetch(mlcore::PropertiesQuery *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  unint64_t v3 = (uint64_t *)*((void *)this + 10);
  int8x8_t v4 = (uint64_t *)*((void *)this + 11);
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v5);
    ++v3;
  }
}

void sub_214DA4B90(_Unwind_Exception *a1)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

void mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(float *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 4);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*((void *)a1 + 3) + 8 * v2);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v5) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2) {
            break;
          }
        }
      }
    }
  }
  float v14 = (char *)operator new(0x18uLL);
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v8;
  *((void *)v14 + 2) = v5;
  float v15 = (float)(unint64_t)(*((void *)a1 + 6) + 1);
  float v16 = a1[14];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 4);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 6) / a1[14]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 4);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v21 = (char *)operator new(8 * *(void *)&prime);
          unint64_t v22 = (char *)*((void *)a1 + 3);
          *((void *)a1 + 3) = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 4) = prime;
          do
            *(void *)(*((void *)a1 + 3) + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (char *)*((void *)a1 + 5);
          if (v24)
          {
            unint64_t v25 = *((void *)v24 + 1);
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)a1 + 3) + 8 * v25) = a1 + 10;
            unint64_t v30 = *(char **)v24;
            if (*(void *)v24)
            {
              do
              {
                unint64_t v31 = *((void *)v30 + 1);
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  unint64_t v32 = (char *)*((void *)a1 + 3);
                  if (!*(void *)&v32[8 * v31])
                  {
                    *(void *)&v32[8 * v31] = v24;
                    goto LABEL_55;
                  }
                  *(void *)uint64_t v24 = *(void *)v30;
                  *(void *)unint64_t v30 = **(void **)(*((void *)a1 + 3) + 8 * v31);
                  **(void **)(*((void *)a1 + 3) + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                unint64_t v30 = *(char **)v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v49 = (char *)*((void *)a1 + 3);
        *((void *)a1 + 3) = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 4) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  unint64_t v33 = (char *)*((void *)a1 + 3);
  unint64_t v34 = *(char **)&v33[8 * v2];
  if (v34)
  {
    *(void *)float v14 = *(void *)v34;
LABEL_72:
    *(void *)unint64_t v34 = v14;
    goto LABEL_73;
  }
  *(void *)float v14 = *((void *)a1 + 5);
  *((void *)a1 + 5) = v14;
  *(void *)&v33[8 * v2] = a1 + 10;
  if (*(void *)v14)
  {
    unint64_t v35 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    unint64_t v34 = (char *)(*((void *)a1 + 3) + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 6);
  std::vector<std::string>::pointer v37 = (char *)*((void *)a1 + 1);
  unint64_t v36 = *((void *)a1 + 2);
  if ((unint64_t)v37 >= v36)
  {
    uint64_t v39 = (uint64_t)&v37[-*(void *)a1] >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = v36 - *(void *)a1;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v42);
    }
    else {
      uint64_t v43 = 0;
    }
    BOOL v44 = (uint64_t *)(v42 + 8 * v39);
    unint64_t v45 = v42 + 8 * v43;
    *BOOL v44 = *a2;
    unint64_t v38 = (char *)(v44 + 1);
    size_t v47 = *(char **)a1;
    unint64_t v46 = (char *)*((void *)a1 + 1);
    if (v46 != *(char **)a1)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *--BOOL v44 = v48;
      }
      while (v46 != v47);
      unint64_t v46 = *(char **)a1;
    }
    *(void *)a1 = v44;
    *((void *)a1 + 1) = v38;
    *((void *)a1 + 2) = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(void *)std::vector<std::string>::pointer v37 = *a2;
    unint64_t v38 = v37 + 8;
  }
  *((void *)a1 + 1) = v38;
}

void sub_214DA5060(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(void *a1, long long *a2)
{
  int8x8_t v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26C5C9E58;
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v4 + 3), a2, (long long *)v9, (long long *)v7, (long long *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_214DA518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  _Unwind_Resume(a1);
}

double mlcore::DatabaseModelProperty<long long>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void mlcore::SQLColumnNameFromProperty(mlcore *this@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(mlcore *, const mlcore::ModelPropertyBase *))(*(void *)this + 72))(this, a2);
  if (*(char *)(v5 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
  }
  else {
    std::string v10 = *(std::string *)(v5 + 8);
  }
  (*(void (**)(void **__return_ptr, mlcore *))(*(void *)this + 64))(&v8, this);
  if (v9 == v8) {
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = *(void *)v8;
  unint64_t v7 = operator new(0x88uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unint64_t v7 = &unk_26C5C9E58;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v7 + 3), (long long *)&v10, (long long *)(v6 + 8), (long long *)__p, (long long *)((char *)this + 40));
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *a3 = v7 + 3;
  a3[1] = v7;
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_214DA5378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  if (a10) {
    operator delete(a10);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  *(void *)a1 = &unk_26C5BF1B8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }
  char v12 = (std::string *)(a1 + 80);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v13 = *a5;
    *(void *)(a1 + 96) = *((void *)a5 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(unsigned char *)(a1 + 104) = 1;
  return a1;
}

void sub_214DA54EC(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::DatabaseModelProperty<long long>::databaseTables@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int8x8_t v4 = operator new(8uLL);
  *a2 = v4;
  void *v4 = v3;
  double result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<long long>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1856);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1808);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1760);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1664);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1616);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1568);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1520);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1424);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1376);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1328);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1280);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1232);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1136);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214DA577C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::ColumnNamesApplier::operator()<int>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a2 + 8);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  int8x8_t v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    long long v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    std::string *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string *v4 = v12;
    uint64_t v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_214DA58D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::ColumnNamesApplier::operator()<long long>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a2 + 8);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  int8x8_t v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    long long v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    std::string *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string *v4 = v12;
    uint64_t v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_214DA5A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__split_buffer<std::string>::pointer v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24)
  {
    long long v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  std::__split_buffer<std::string>::pointer v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void *mlcore::DatabaseModelProperty<int>::databaseTables@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  size_t v4 = operator new(8uLL);
  *a2 = v4;
  void *v4 = v3;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<int>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

void *mlcore::DatabaseModelProperty<std::string>::databaseTables@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  size_t v4 = operator new(8uLL);
  *a2 = v4;
  void *v4 = v3;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<std::string>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

void *mlcore::DatabaseModelProperty<double>::databaseTables@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  size_t v4 = operator new(8uLL);
  *a2 = v4;
  void *v4 = v3;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<double>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

double mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a1 + 88), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(void *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
  }
  return v3[3];
}

void sub_214DA5EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26422EA58, MEMORY[0x263F8C060]);
}

void sub_214DA5F88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTableBase::name(mediaplatform::DatabaseTableBase *this)
{
  return (uint64_t)this + 8;
}

uint64_t mlcore::LibraryView::filters(mlcore::LibraryView *this)
{
  return *((unsigned int *)this + 20);
}

unsigned char *mlcore::ContentRestrictions::setRestrictExplicitLyrics(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictedTVShowsRank(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictedMoviesRank(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictMusicVideos(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2) = a2;
  return this;
}

uint64_t mlcore::LibraryView::setFilters(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t mlcore::ArtistPropertyHasName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyHasName(void)::once, memory_order_acquire) != -1)
  {
    size_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyHasName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyHasName(void)::property;
}

uint64_t mlcore::EntityQueryResult::sections(mlcore::EntityQueryResult *this)
{
  return *((void *)this + 25);
}

uint64_t mlcore::EntityQueryResult::propertyCaches(mlcore::EntityQueryResult *this)
{
  return *((void *)this + 23);
}

uint64_t mlcore::ContentRestrictions::ContentRestrictions(uint64_t this, char a2, char a3, char a4, int a5, int a6)
{
  *(unsigned char *)this = a2;
  *(unsigned char *)(this + 1) = a3;
  *(unsigned char *)(this + 2) = a4;
  *(_DWORD *)(this + 4) = a5;
  *(_DWORD *)(this + 8) = a6;
  return this;
}

{
  *(unsigned char *)this = a2;
  *(unsigned char *)(this + 1) = a3;
  *(unsigned char *)(this + 2) = a4;
  *(_DWORD *)(this + 4) = a5;
  *(_DWORD *)(this + 8) = a6;
  return this;
}

uint64_t mlcore::LibraryView::setContentRestrictions(uint64_t this, const mlcore::ContentRestrictions *a2)
{
  uint64_t v2 = *(void *)a2;
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 2);
  *(void *)(this + 48) = v2;
  return this;
}

uint64_t mlcore::QueryResult::error(mlcore::QueryResult *this)
{
  return (uint64_t)this + 8;
}

BOOL mlcore::MediaError::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) != 0;
}

void mediaplatform::SQLSelectCoreStatement::~SQLSelectCoreStatement(mediaplatform::SQLSelectCoreStatement *this)
{
  *(void *)this = &unk_26C5BF140;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  size_t v5 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_26C5BF140;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  size_t v5 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  JUMPOUT(0x2166B26F0);
}

__n128 mlcore::Query::_SQLFromStatement@<Q0>(void **a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  long long v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **__return_ptr, void **, uint64_t *))(*a1)[11])(__p, a1, &v10);
  mlcore::SQLJoinClausesForEntityClassAndProperties((uint64_t *)__p, v14);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1[1] + 88))(a1[1]);
  std::string::size_type v7 = operator new(0x50uLL);
  v7[1] = 0;
  v7[2] = 0;
  *std::string::size_type v7 = &unk_26C5C9918;
  *(void *)&long long v8 = mediaplatform::SQLFromStatement::SQLFromStatement((uint64_t)(v7 + 3), (long long *)(v6 + 8), v14);
  *((void *)&v8 + 1) = v7;
  *a3 = v8;
  __p[0] = v14;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return result;
}

void sub_214DA6274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  a12 = v13 - 56;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLFromStatement::SQLFromStatement(uint64_t a1, long long *a2, void **a3)
{
  *(void *)a1 = &unk_26C5BEC68;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>(a1 + 32, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_214DA6360(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v9 = a1 + 2;
  uint64_t v8 = a1[2];
  uint64_t v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_20;
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 60) {
LABEL_20:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[2 * v14];
    uint64_t v15 = (uint64_t)v9;
    int v16 = a2;
    goto LABEL_14;
  }
  unint64_t v17 = (a1[1] - (uint64_t)v10) >> 4;
  if (v17 < a4)
  {
    unint64_t v18 = &a2[2 * v17];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, v18, v10);
    uint64_t v13 = (void *)a1[1];
    uint64_t v15 = (uint64_t)v9;
    int v16 = v18;
LABEL_14:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v15, v16, a3, v13);
    return;
  }
  unint64_t v19 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, a3, v10);
  for (uint64_t i = (void *)a1[1]; i != v19; i -= 2)
  {
    unint64_t v21 = (std::__shared_weak_count *)*(i - 1);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  a1[1] = (uint64_t)v19;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void mlcore::ForeignProperty<std::string>::_SQLJoinClauses(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(&v36, a1);
  uint64_t v8 = v36;
  unint64_t v9 = v37;
  if (v36 != v37)
  {
    do
    {
      uint64_t v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(__p, v7);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 96))(&v38, v7, &v32);
        LODWORD(v28) = 13;
        (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v10 + 32))(&v31, v10, *(void *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v34, &v38, (int *)&v28, &v31);
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v38 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v12 = a1[11];
        if (v12)
        {
          LODWORD(v28) = 1;
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          (*(void (**)(long long *__return_ptr))(*(void *)v12 + 64))(&v31);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v38, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v28, &v31);
          long long v14 = v38;
          long long v34 = v38;
          long long v26 = v38;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            long long v14 = v26;
          }
          if (*((void *)&v31 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
            long long v14 = v26;
          }
          if (v30)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            long long v14 = v26;
          }
        }
        else
        {
          long long v14 = v34;
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v31, v14, *((std::__shared_weak_count **)&v14 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v28, 1, v10 + 8, (uint64_t *)&v31);
        long long v15 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v17 = (_OWORD *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v17 >= v16)
        {
          long long v27 = v15;
          uint64_t v19 = ((uint64_t)v17 - *a3) >> 4;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - *a3;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          uint64_t v41 = a3 + 2;
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v22);
          uint64_t v24 = &v23[16 * v19];
          *(void *)&long long v38 = v23;
          *((void *)&v38 + 1) = v24;
          uint64_t v40 = &v23[16 * v25];
          *(_OWORD *)uint64_t v24 = v27;
          uint64_t v39 = v24 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v38);
          unint64_t v18 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          *unint64_t v17 = v15;
          unint64_t v18 = v17 + 1;
          a3[1] = v18;
        }
        a3[1] = v18;
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v36;
  }
  if (v8)
  {
    std::vector<std::string>::pointer v37 = v8;
    operator delete(v8);
  }
}

void sub_214DA692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
}

uint64_t mlcore::ForeignProperty<std::string>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(void *a1, long long *a2, int *a3, long long *a4)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  unint64_t v9 = v8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)uint64_t v8 = &unk_26C5C9BF0;
  uint64_t v10 = v8 + 24;
  long long v11 = *a2;
  *a2 = 0u;
  int v12 = *a3;
  long long v13 = *a4;
  *a4 = 0u;
  *((void *)v8 + 3) = &unk_26C5BEF00;
  *((_DWORD *)v8 + 8) = v12;
  *(_OWORD *)(v8 + 40) = v11;
  long long v14 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v8 + 56) = v13;
  if (*((void *)&v13 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *a1 = v10;
  a1[1] = v9;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0x30uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26C5C9C60;
  uint64_t v8 = v6 + 3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    v6[3] = &unk_26C5BEF50;
    v6[4] = a2;
    v6[5] = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    v6[3] = &unk_26C5BEF50;
    v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = operator new(0x50uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_26C5C96B0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  uint64_t v9 = *a4;
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  v11[0] = v9;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::SQLJoinClause::SQLJoinClause((uint64_t)(v8 + 3), a2, (long long *)&v12, v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_214DA6CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLBinaryExpressionList::~SQLBinaryExpressionList(mediaplatform::SQLBinaryExpressionList *this)
{
  *(void *)this = &unk_26C5BF190;
  size_t v4 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_26C5BEF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_26C5BF190;
  size_t v4 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_26C5BEF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x2166B26F0);
}

void std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    size_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void mlcore::SQLJoinClausesForEntityClassAndProperties(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v82 = *MEMORY[0x263EF8340];
  long long v75 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v77 = 0u;
  uint64_t v79 = 0;
  unint64_t v78 = 0;
  float v80 = 1.0;
  uint64_t v81 = 0;
  uint64_t v4 = *a1;
  uint64_t v66 = a1[1];
  if (*a1 == v66)
  {
    float v64 = 0;
    v63 = 0;
    goto LABEL_142;
  }
  do
  {
    uint64_t v67 = v4;
    (*(void (**)(long long **__return_ptr))(**(void **)v4 + 104))(&v72);
    long long v5 = v72;
    uint64_t v6 = v73;
    unint64_t v68 = v73;
    while (v5 != v6)
    {
      long long v7 = *v5;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 1);
      uint64_t v70 = v5;
      long long v71 = *v5;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](v7 + 16);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      else
      {
        unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](v7 + 16);
      }
      unint64_t v10 = v77;
      if ((void)v77)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v77);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v9;
          if (v9 >= (unint64_t)v77) {
            unint64_t v2 = v9 % (unint64_t)v77;
          }
        }
        else
        {
          unint64_t v2 = (v77 - 1) & v9;
        }
        long long v13 = (void *)*((void *)__p[1] + v2);
        if (v13)
        {
          long long v14 = (void *)*v13;
          if (*v13)
          {
            uint64_t v69 = v77 - 1;
            while (1)
            {
              unint64_t v15 = v14[1];
              if (v15 == v9) {
                break;
              }
              if (v12 > 1)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v69;
              }
              if (v15 != v2) {
                goto LABEL_56;
              }
LABEL_52:
              long long v14 = (void *)*v14;
              if (!v14) {
                goto LABEL_56;
              }
            }
            uint64_t v16 = v14[2];
            unint64_t v17 = (std::__shared_weak_count *)v14[3];
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v8) {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v18 = *(unsigned __int8 *)(v16 + 39);
            size_t v19 = *(void *)(v16 + 24);
            if ((v18 & 0x80u) == 0) {
              uint64_t v20 = *(unsigned __int8 *)(v16 + 39);
            }
            else {
              uint64_t v20 = *(void *)(v16 + 24);
            }
            uint64_t v21 = *(unsigned __int8 *)(v71 + 39);
            int v22 = (char)v21;
            if ((v21 & 0x80u) != 0) {
              uint64_t v21 = *(void *)(v71 + 24);
            }
            if (v20 == v21)
            {
              uint64_t v23 = (const void **)(v16 + 16);
              if (v22 >= 0) {
                uint64_t v24 = (unsigned __int8 *)(v71 + 16);
              }
              else {
                uint64_t v24 = *(unsigned __int8 **)(v71 + 16);
              }
              if ((v18 & 0x80) != 0)
              {
                BOOL v32 = memcmp(*v23, v24, v19) == 0;
                goto LABEL_47;
              }
              if (v18)
              {
                uint64_t v25 = v18 - 1;
                do
                {
                  int v27 = *(unsigned __int8 *)v23;
                  uint64_t v23 = (const void **)((char *)v23 + 1);
                  int v26 = v27;
                  int v29 = *v24++;
                  int v28 = v29;
                  BOOL v31 = v25-- != 0;
                  BOOL v32 = v26 == v28;
                }
                while (v26 == v28 && v31);
LABEL_47:
                if (!v8) {
                  goto LABEL_49;
                }
                goto LABEL_48;
              }
              BOOL v32 = 1;
              if (!v8)
              {
LABEL_49:
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                if (v32) {
                  goto LABEL_127;
                }
                goto LABEL_52;
              }
            }
            else
            {
              BOOL v32 = 0;
              if (!v8) {
                goto LABEL_49;
              }
            }
LABEL_48:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
            goto LABEL_49;
          }
        }
      }
LABEL_56:
      unint64_t v33 = operator new(0x20uLL);
      *unint64_t v33 = 0;
      v33[1] = v9;
      *((_OWORD *)v33 + 1) = v71;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v34 = (float)(v78 + 1);
      if (!v10 || (float)(v80 * (float)v10) < v34)
      {
        BOOL v35 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v35 = 1;
        }
        unint64_t v36 = v35 | (2 * v10);
        unint64_t v37 = vcvtps_u32_f32(v34 / v80);
        if (v36 <= v37) {
          unint64_t prime = v37;
        }
        else {
          unint64_t prime = v36;
        }
        if (prime == 1)
        {
          unint64_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          unint64_t prime = std::__next_prime(prime);
        }
        unint64_t v10 = v77;
        if (prime <= (unint64_t)v77)
        {
          if (prime < (unint64_t)v77)
          {
            unint64_t v45 = vcvtps_u32_f32((float)v78 / v80);
            if ((unint64_t)v77 < 3
              || (uint8x8_t v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v77), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
            {
              unint64_t v45 = std::__next_prime(v45);
            }
            else
            {
              uint64_t v47 = 1 << -(char)__clz(v45 - 1);
              if (v45 >= 2) {
                unint64_t v45 = v47;
              }
            }
            if (prime <= v45) {
              unint64_t prime = v45;
            }
            if (prime >= v10)
            {
              unint64_t v10 = v77;
            }
            else
            {
              if (prime) {
                goto LABEL_70;
              }
              unint64_t v62 = __p[1];
              __p[1] = 0;
              if (v62) {
                operator delete(v62);
              }
              unint64_t v10 = 0;
              *(void *)&long long v77 = 0;
            }
          }
        }
        else
        {
LABEL_70:
          if (prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v39 = operator new(8 * prime);
          uint64_t v40 = __p[1];
          __p[1] = v39;
          if (v40) {
            operator delete(v40);
          }
          uint64_t v41 = 0;
          *(void *)&long long v77 = prime;
          do
            *((void *)__p[1] + v41++) = 0;
          while (prime != v41);
          unint64_t v42 = (void **)*((void *)&v77 + 1);
          if (*((void *)&v77 + 1))
          {
            unint64_t v43 = *(void *)(*((void *)&v77 + 1) + 8);
            uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              if (v43 >= prime) {
                v43 %= prime;
              }
            }
            else
            {
              v43 &= prime - 1;
            }
            *((void *)__p[1] + v43) = (char *)&v77 + 8;
            for (uint64_t i = *v42; i; v43 = v49)
            {
              unint64_t v49 = i[1];
              if (v44.u32[0] > 1uLL)
              {
                if (v49 >= prime) {
                  v49 %= prime;
                }
              }
              else
              {
                v49 &= prime - 1;
              }
              if (v49 != v43)
              {
                if (!*((void *)__p[1] + v49))
                {
                  *((void *)__p[1] + v49) = v42;
                  goto LABEL_95;
                }
                *unint64_t v42 = (void *)*i;
                *uint64_t i = **((void **)__p[1] + v49);
                **((void **)__p[1] + v49) = i;
                uint64_t i = v42;
              }
              unint64_t v49 = v43;
LABEL_95:
              unint64_t v42 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v10 = prime;
        }
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v2 = v9 % v10;
          }
          else {
            unint64_t v2 = v9;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v9;
        }
      }
      unint64_t v50 = __p[1];
      v51 = (void *)*((void *)__p[1] + v2);
      if (v51)
      {
        *unint64_t v33 = *v51;
LABEL_112:
        void *v51 = v33;
        goto LABEL_113;
      }
      *unint64_t v33 = *((void *)&v77 + 1);
      *((void *)&v77 + 1) = v33;
      v50[v2] = (char *)&v77 + 8;
      if (*v33)
      {
        unint64_t v52 = *(void *)(*v33 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v52 >= v10) {
            v52 %= v10;
          }
        }
        else
        {
          v52 &= v10 - 1;
        }
        v51 = (char *)__p[1] + 8 * v52;
        goto LABEL_112;
      }
LABEL_113:
      ++v78;
      uint64_t v53 = *((void *)&v75 + 1);
      if ((void *)*((void *)&v75 + 1) >= __p[0])
      {
        uint64_t v55 = (uint64_t)(*((void *)&v75 + 1) - v75) >> 4;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v57 = (uint64_t)__p[0] - v75;
        if ((uint64_t)((uint64_t)__p[0] - v75) >> 3 > v56) {
          unint64_t v56 = v57 >> 3;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        v74[4] = __p;
        uint8x8_t v59 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v58);
        v60 = &v59[2 * v55];
        v74[0] = v59;
        v74[1] = v60;
        v74[3] = &v59[2 * v61];
        *(_OWORD *)v60 = v71;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v74[2] = v60 + 2;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v75, v74);
        uint64_t v54 = *((void *)&v75 + 1);
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
      }
      else
      {
        **((_OWORD **)&v75 + 1) = v71;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v54 = v53 + 16;
      }
      *((void *)&v75 + 1) = v54;
LABEL_127:
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      long long v5 = v70 + 1;
      uint64_t v6 = v68;
    }
    v74[0] = (void **)&v72;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](v74);
    uint64_t v4 = v67 + 8;
  }
  while (v67 + 8 != v66);
  float v64 = (char *)*((void *)&v75 + 1);
  v63 = (char *)v75;
  uint64_t v3 = a2;
LABEL_142:
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>((uint64_t)v3, v63, v64, (v64 - v63) >> 4);
  std::__hash_table<std::shared_ptr<mediaplatform::SQLJoinClause const>,mlcore::hash,mlcore::equal,std::allocator<std::shared_ptr<mediaplatform::SQLJoinClause const>>>::~__hash_table((uint64_t)&__p[1]);
  v74[0] = (void **)&v75;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](v74);
}

void sub_214DA7554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
}

void std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLColumnNameExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLColumnNameExpression::~SQLColumnNameExpression(void **this)
{
  *this = &unk_26C5BF1B8;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C5BF1B8;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x2166B26F0);
}

void mlcore::DatabaseModelProperty<long long>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != *(void *)(a1 + 64)
    && (uint64_t v6 = *(void *)(a1 + 8)) != 0
    && (int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v17);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v15, &v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v13, v10, *(void *)(a1 + 64) + 8, &v15);
    uint8x8_t v11 = v14;
    uint64_t v18 = v13;
    size_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&long long v17 = a3;
    BYTE8(v17) = 0;
    unint64_t v12 = operator new(0x10uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 2;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a3 + 2), &v18, &v20, v12);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_214DA792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DA7A18(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::entityType()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::DatabaseBindParameter::~DatabaseBindParameter(mediaplatform::DatabaseBindParameter *this)
{
  *(void *)this = &unk_26C5BEFA0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEFA0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLJoinClause::~SQLJoinClause(mediaplatform::SQLJoinClause *this)
{
  *(void *)this = &unk_26C5BEB28;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEB28;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DA7BC4(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLUsingJoinConstraint::~SQLUsingJoinConstraint(mediaplatform::SQLUsingJoinConstraint *this)
{
  *(void *)this = &unk_26C5BF168;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BF168;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2166B26F0);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(void *a1, long long *a2)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5C9DE8;
  long long v7 = *a2;
  long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  *a2 = 0u;
  uint64_t v6 = v5;
  mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint((void *)v4 + 3, (uint64_t *)&v7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_214DA7D10(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint(void *a1, uint64_t *a2)
{
  *a1 = &unk_26C5BF168;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  long long v5 = operator new(0x10uLL);
  uint64_t v6 = v5 + 2;
  a1[3] = v5 + 2;
  a1[1] = v5;
  a1[2] = v5;
  int v10 = v5;
  v8[0] = a1 + 3;
  v8[1] = &v10;
  v8[2] = &v11;
  void *v5 = v4;
  v5[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v11 = v5 + 2;
    char v9 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    a1[2] = v6;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    uint8x8_t v11 = v5 + 2;
    char v9 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    a1[2] = v6;
  }
  return a1;
}

void sub_214DA7E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  int v10 = a4;
  char v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    int v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  char v8 = operator new(0x50uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_26C5C96B0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  uint64_t v9 = *a4;
  int v10 = (std::__shared_weak_count *)a4[1];
  v11[0] = v9;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::SQLJoinClause::SQLJoinClause((uint64_t)(v8 + 3), a2, (long long *)&v12, v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_214DA8018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLJoinClause::SQLJoinClause(uint64_t a1, int a2, long long *a3, void *a4)
{
  *(void *)a1 = &unk_26C5BEB28;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v6 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = a4[1];
  *(void *)(a1 + 40) = *a4;
  *(void *)(a1 + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void mlcore::SQLShortColumnNameFromEntityPrimaryKey(mlcore *this@<X0>, const mlcore::EntityClass *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(mlcore *, const mlcore::EntityClass *))(*(void *)this + 88))(this, a2);
  (*(void (**)(long long **__return_ptr))(*(void *)v4 + 24))(v5);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(a3, v5[0]);
  uint64_t v6 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_214DA816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLBinaryExpression::~SQLBinaryExpression(mediaplatform::SQLBinaryExpression *this)
{
  *(void *)this = &unk_26C5BEF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26C5BEF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mlcore::DatabaseModelProperty<int>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != *(void *)(a1 + 64)
    && (uint64_t v6 = *(void *)(a1 + 8)) != 0
    && (int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v17);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v15, &v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v13, v10, *(void *)(a1 + 64) + 8, &v15);
    uint8x8_t v11 = v14;
    uint64_t v18 = v13;
    size_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&long long v17 = a3;
    BYTE8(v17) = 0;
    std::string v12 = operator new(0x10uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 2;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a3 + 2), &v18, &v20, v12);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_214DA84A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    if (v3) {
    else
    }
      uint64_t v4 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v4 + 16))(v4);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t ForeignPropertyBase = mlcore::GetForeignPropertyBase(v11, v12, (uint64_t *)&__p);
    uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v4 + 24))(v4);
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)v4 + 32))(&v34, v4);
    uint64_t v15 = mlcore::GetForeignPropertyBase(ForeignPropertyBase, v14, (uint64_t *)&v34);
    if (v34.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5)
    {
      uint64_t v6 = v3[1];
      if ((*(unsigned int (**)(void))(*v5 + 88))(*(void *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 32))(&__p);
          std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if (v8) {
            goto LABEL_14;
          }
          uint64_t v9 = v5[1];
          uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v7 + 16))(v7);
          uint64_t v5 = (void *)v10;
          if (v9 == v6) {
            break;
          }
          if (!v10) {
            goto LABEL_14;
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10) & 1) == 0 && v5[1] == v6)
          {
            uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
            uint64_t v32 = *(void *)(a1 + 8);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            return mlcore::GetForeignPropertyBase(v10, v32, (uint64_t *)&__p);
          }
          if (((*(uint64_t (**)(void *))(*v5 + 88))(v5) & 1) == 0) {
            goto LABEL_14;
          }
        }
        uint64_t v32 = *(void *)(a1 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        return mlcore::GetForeignPropertyBase(v10, v32, (uint64_t *)&__p);
      }
LABEL_14:
      uint64_t v3 = *(void **)(a1 + 8);
    }
    switch((*(unsigned int (**)(void *))(*v3 + 80))(v3))
    {
      case 0u:
        operator new();
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      default:
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 16);
        if (*(char *)(v16 + 39) >= 0) {
          size_t v17 = *(unsigned __int8 *)(v16 + 39);
        }
        else {
          size_t v17 = *(void *)(v16 + 24);
        }
        uint64_t v18 = &v34;
        std::string::basic_string[abi:ne180100]((uint64_t)&v34, v17 + 2);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        if (v17)
        {
          uint64_t v21 = *(char **)(v16 + 16);
          uint64_t v20 = (char *)(v16 + 16);
          size_t v19 = v21;
          if (v20[23] >= 0) {
            int v22 = v20;
          }
          else {
            int v22 = v19;
          }
          memmove(v18, v22, v17);
        }
        strcpy((char *)v18 + v17, "->");
        uint64_t v23 = *(void *)(a1 + 8);
        int v26 = *(const std::string::value_type **)(v23 + 16);
        uint64_t v24 = v23 + 16;
        uint64_t v25 = v26;
        int v27 = *(char *)(v24 + 23);
        if (v27 >= 0) {
          int v28 = (const std::string::value_type *)v24;
        }
        else {
          int v28 = v25;
        }
        if (v27 >= 0) {
          std::string::size_type v29 = *(unsigned __int8 *)(v24 + 23);
        }
        else {
          std::string::size_type v29 = *(void *)(v24 + 8);
        }
        unint64_t v30 = std::string::append(&v34, v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        mlcore::EntityClass::setPropertyForName(*(void *)(*(void *)(a1 + 16) + 8), 0, &__p);
        MEMORY[8] = *(void *)(*(void *)(a1 + 8) + 8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        break;
    }
  }
  return v15;
}

void sub_214DA8C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::EntityClass::setPropertyForName(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::string::operator=((std::string *)(a2 + 16), a3);
  *(void *)(a2 + 8) = a1;
  int v7 = a3;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)(a1 + 72), (unsigned __int8 *)a3, (long long **)&v7)+ 5) = a2;
  std::mutex::unlock(v6);
}

void sub_214DA8CE0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  uint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  uint64_t v18 = a1 + 2;
  *((void *)v13 + 5) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          int v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            std::string v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  std::string v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                int v28 = v34;
                std::string v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  unint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)uint64_t v13 = *v37;
LABEL_75:
    *unint64_t v37 = v13;
    goto LABEL_76;
  }
  *(void *)uint64_t v13 = *v18;
  *uint64_t v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_214DA910C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v4 = (uint64_t *)a1;
  }
  else {
    uint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      uint64_t v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      uint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t mlcore::ModelPropertyBase::isForeignProperty(mlcore::ModelPropertyBase *this)
{
  return 0;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>(uint64_t result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    int v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(a4);
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[2 * v8];
    BOOL v13 = v7;
    BOOL v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    if (a2 != a3)
    {
      do
      {
        *int v7 = *a2;
        uint64_t v9 = a2[1];
        v7[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        v7 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      BOOL v13 = v7;
    }
    char v11 = 1;
    unint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v7;
  }
  return result;
}

void sub_214DA9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLOnJoinConstraint::~SQLOnJoinConstraint(mediaplatform::SQLOnJoinConstraint *this)
{
  *(void *)this = &unk_26C5BEF50;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEF50;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::ComparisonPredicate<int>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7978;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void mlcore::DatabaseModelProperty<std::string>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != *(void *)(a1 + 64)
    && (uint64_t v6 = *(void *)(a1 + 8)) != 0
    && (int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v17);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v15, &v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v13, v10, *(void *)(a1 + 64) + 8, &v15);
    char v11 = v14;
    uint64_t v18 = v13;
    uint64_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&long long v17 = a3;
    BYTE8(v17) = 0;
    BOOL v12 = operator new(0x10uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 2;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a3 + 2), &v18, &v20, v12);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_214DA9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mlcore::AndPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mlcore::AndPredicate::~AndPredicate(mlcore::AndPredicate *this)
{
  *(void *)this = &unk_26C5C73B8;
  int v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5C73B8;
  int v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__hash_table<std::shared_ptr<mediaplatform::SQLJoinClause const>,mlcore::hash,mlcore::equal,std::allocator<std::shared_ptr<mediaplatform::SQLJoinClause const>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  if (v5 == a1 + 72)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 72) + 32))(a1 + 72);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 == a1 + 32)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  int v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t mediaplatform::DatabaseParameter<std::string>::~DatabaseParameter(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C39D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DA9D64(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLOrderingTerm::~SQLOrderingTerm(mediaplatform::SQLOrderingTerm *this)
{
  *(void *)this = &unk_26C5BEBF8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEBF8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t mlcore::ForeignProperty<std::string>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))();
}

void mlcore::ForeignProperty<long long>::_SQLJoinClauses(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(&v36, a1);
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (v36 != v37)
  {
    do
    {
      uint64_t v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(__p, v7);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 96))(&v38, v7, &v32);
        LODWORD(v28) = 13;
        (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v10 + 32))(&v31, v10, *(void *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v34, &v38, (int *)&v28, &v31);
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v38 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v12 = a1[11];
        if (v12)
        {
          LODWORD(v28) = 1;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          (*(void (**)(long long *__return_ptr))(*(void *)v12 + 64))(&v31);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v38, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v28, &v31);
          long long v14 = v38;
          long long v34 = v38;
          long long v26 = v38;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            long long v14 = v26;
          }
          if (*((void *)&v31 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
            long long v14 = v26;
          }
          if (v30)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            long long v14 = v26;
          }
        }
        else
        {
          long long v14 = v34;
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v31, v14, *((std::__shared_weak_count **)&v14 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v28, 1, v10 + 8, (uint64_t *)&v31);
        long long v15 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v17 = (_OWORD *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v17 >= v16)
        {
          long long v27 = v15;
          uint64_t v19 = ((uint64_t)v17 - *a3) >> 4;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - *a3;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          unint64_t v41 = a3 + 2;
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v22);
          uint64_t v24 = &v23[16 * v19];
          *(void *)&long long v38 = v23;
          *((void *)&v38 + 1) = v24;
          unint64_t v40 = &v23[16 * v25];
          *(_OWORD *)uint64_t v24 = v27;
          uint64_t v39 = v24 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v38);
          uint64_t v18 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          *long long v17 = v15;
          uint64_t v18 = v17 + 1;
          a3[1] = v18;
        }
        a3[1] = v18;
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v36;
  }
  if (v8)
  {
    unint64_t v37 = v8;
    operator delete(v8);
  }
}

void sub_214DAA290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
}

uint64_t mlcore::ForeignProperty<long long>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<long long>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::__on_zero_shared(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 72);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLFromStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::SQLFromStatement::~SQLFromStatement(void **this)
{
  *this = &unk_26C5BEC68;
  uint64_t v2 = this + 4;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_26C5BEC68;
  uint64_t v2 = this + 4;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mlcore::PredicateProperty::_SQLJoinClauses(mlcore::PredicateProperty *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(**((void **)this + 8) + 56))(__p);
  mlcore::SQLJoinClausesForEntityClassAndProperties((uint64_t *)__p, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_214DAA55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mediaplatform::SQLAliasExpression::~SQLAliasExpression(void **this)
{
  *this = &unk_26C5BEDC8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_26C5BEDC8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *mlcore::ComparisonPredicate<long long>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C79D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLCommitTransactionStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLBeginTransactionStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::DatabaseConnectionPoolCheckout::~DatabaseConnectionPoolCheckout(mediaplatform::DatabaseConnectionPoolCheckout *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<mlcore::Transaction>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLExpressionList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::entityType()
{
  return 4;
}

void mlcore::DatabaseModelProperty<double>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != *(void *)(a1 + 64)
    && (uint64_t v6 = *(void *)(a1 + 8)) != 0
    && (int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v17);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v15, &v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v13, v10, *(void *)(a1 + 64) + 8, &v15);
    uint64_t v11 = v14;
    uint64_t v18 = v13;
    uint64_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&long long v17 = a3;
    BYTE8(v17) = 0;
    uint64_t v12 = operator new(0x10uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 2;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a3 + 2), &v18, &v20, v12);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_214DAA92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

void mediaplatform::SQLExpressionList::~SQLExpressionList(mediaplatform::SQLExpressionList *this)
{
  *(void *)this = &unk_26C5BED78;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BED78;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mlcore::SQLRenderer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void mlcore::PropertiesQueryResult::~PropertiesQueryResult(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C5C7FD8;
  uint64_t v2 = this + 20;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  mlcore::QueryResult::~QueryResult(this);
}

{
  std::exception *v2;
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26C5C7FD8;
  uint64_t v2 = this + 20;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::SQLRenderer::~SQLRenderer(mlcore::SQLRenderer *this)
{
  *(void *)this = &unk_26C5C48B8;
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 4) = &unk_26C5BEFF0;
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  mlcore::SQLRenderer::~SQLRenderer(this);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mlcore::QueryProperty<long long>::databaseTables(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mediaplatform::SQLSelectExpression::~SQLSelectExpression(mediaplatform::SQLSelectExpression *this)
{
  *(void *)this = &unk_26C5BEF78;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5BEF78;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityPropertiesQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<std::string>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<std::string>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<std::string>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void **std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](*(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__on_zero_shared(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x2166B26F0);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mlcore::InPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLFunctionExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void mediaplatform::DatabaseTable<long long,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DAADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_214DAAE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *mlcore::InPredicate<int>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4668;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

void mediaplatform::SQLFunctionExpression::~SQLFunctionExpression(mediaplatform::SQLFunctionExpression *this)
{
  *(void *)this = &unk_26C5BF078;
  *((void *)this + 4) = &unk_26C5BED78;
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5BF078;
  *((void *)this + 4) = &unk_26C5BED78;
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLLiteralValue<int>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3910;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<int>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<int>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<int>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore9ItemTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  uint64_t v2 = operator new(0xEA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CB358;
  uint64_t result = mlcore::ItemTable::ItemTable((mlcore::ItemTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_214DAB024(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ContainerTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = operator new(0x2348uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA558;
  uint64_t result = mlcore::ContainerTable::ContainerTable((mlcore::ContainerTable *)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_214DAB090(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

mlcore::ItemKVSTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ItemKVSTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemKVSTable **a1)
{
  uint64_t v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA2F0;
  uint64_t result = mlcore::ItemKVSTable::ItemKVSTable((mlcore::ItemKVSTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemKVSTable *)v2;
  return result;
}

void sub_214DAB0FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemTable::ItemTable(mlcore::ItemTable *this)
{
  uint64_t v1 = MEMORY[0x270FA5388](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item");
  std::string::basic_string[abi:ne180100]<0>(v246, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v248, (uint64_t)v246, 1);
  std::string::basic_string[abi:ne180100]<0>(v240, "media_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v242, (uint64_t)v240, 0);
  std::string::basic_string[abi:ne180100]<0>(v233, "title_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v235, (uint64_t)v233);
  std::string::basic_string[abi:ne180100]<0>(v227, "title_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v229, (uint64_t)v227, 0);
  std::string::basic_string[abi:ne180100]<0>(v220, "item_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v222, (uint64_t)v220);
  std::string::basic_string[abi:ne180100]<0>(v213, "item_artist_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v215, (uint64_t)v213);
  std::string::basic_string[abi:ne180100]<0>(v207, "item_artist_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v209, (uint64_t)v207, 0);
  std::string::basic_string[abi:ne180100]<0>(v200, "series_name_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v202, (uint64_t)v200);
  std::string::basic_string[abi:ne180100]<0>(v194, "series_name_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v196, (uint64_t)v194, 0);
  std::string::basic_string[abi:ne180100]<0>(v187, "album_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v189, (uint64_t)v187);
  std::string::basic_string[abi:ne180100]<0>(v180, "album_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v182, (uint64_t)v180);
  std::string::basic_string[abi:ne180100]<0>(v174, "album_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v176, (uint64_t)v174, 0);
  std::string::basic_string[abi:ne180100]<0>(v167, "album_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v169, (uint64_t)v167);
  std::string::basic_string[abi:ne180100]<0>(v160, "album_artist_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v162, (uint64_t)v160);
  std::string::basic_string[abi:ne180100]<0>(v154, "album_artist_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v156, (uint64_t)v154, 0);
  std::string::basic_string[abi:ne180100]<0>(v147, "composer_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v149, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(v140, "composer_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v142, (uint64_t)v140);
  std::string::basic_string[abi:ne180100]<0>(v134, "composer_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v136, (uint64_t)v134, 0);
  std::string::basic_string[abi:ne180100]<0>(v127, "genre_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v129, (uint64_t)v127);
  std::string::basic_string[abi:ne180100]<0>(v120, "genre_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v122, (uint64_t)v120);
  std::string::basic_string[abi:ne180100]<0>(v114, "genre_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v116, (uint64_t)v114, 0);
  std::string::basic_string[abi:ne180100]<0>(v108, "disc_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v110, (uint64_t)v108, 0);
  std::string::basic_string[abi:ne180100]<0>(v102, "track_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v104, (uint64_t)v102, 0);
  std::string::basic_string[abi:ne180100]<0>(v96, "episode_sort_id");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v98, (uint64_t)v96, 0);
  std::string::basic_string[abi:ne180100]<0>(v89, "base_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v91, (uint64_t)v89);
  std::string::basic_string[abi:ne180100]<0>(v82, "remote_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v84, (uint64_t)v82);
  std::string::basic_string[abi:ne180100]<0>(v76, "exclude_from_shuffle");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v78, (uint64_t)v76, 0);
  std::string::basic_string[abi:ne180100]<0>(v70, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v72, (uint64_t)v70, 0);
  std::string::basic_string[abi:ne180100]<0>(v64, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v66, (uint64_t)v64, 0);
  std::string::basic_string[abi:ne180100]<0>(v58, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v60, (uint64_t)v58, 0);
  std::string::basic_string[abi:ne180100]<0>(v52, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v54, (uint64_t)v52, 0);
  std::string::basic_string[abi:ne180100]<0>(v46, "in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v48, (uint64_t)v46, 0);
  std::string::basic_string[abi:ne180100]<0>(v40, "is_compilation");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v42, (uint64_t)v40, 0);
  std::string::basic_string[abi:ne180100]<0>(v33, "date_added");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v35, (uint64_t)v33);
  std::string::basic_string[abi:ne180100]<0>(v27, "show_composer");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v29, (uint64_t)v27, 0);
  std::string::basic_string[abi:ne180100]<0>(v20, "is_music_show");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v13, "date_downloaded");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v15, (uint64_t)v13);
  std::string::basic_string[abi:ne180100]<0>(v6, "download_source_container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v8, (uint64_t)v6);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v425, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v425 = __s;
  }
  v420 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v421, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  }
  else {
    std::string v421 = v249;
  }
  int v422 = v250;
  v420 = &unk_26C5C3878;
  uint64_t v423 = v251;
  int v424 = v252;
  v416 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v417, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  }
  else {
    std::string v417 = v243;
  }
  int v418 = v244;
  v416 = &unk_26C5C3858;
  uint64_t v419 = v245;
  v411 = &unk_26C5C3AF0;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v412, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  }
  else {
    std::string v412 = v236;
  }
  int v413 = v237;
  v411 = &unk_26C5C3878;
  uint64_t v414 = v238;
  int v415 = v239;
  v407 = &unk_26C5C3AF0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v408, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v408 = v230;
  }
  int v409 = v231;
  v407 = &unk_26C5C3858;
  uint64_t v410 = v232;
  v402 = &unk_26C5C3AF0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v403, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    std::string v403 = v223;
  }
  int v404 = v224;
  v402 = &unk_26C5C3878;
  uint64_t v405 = v225;
  int v406 = v226;
  v397 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v398, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  }
  else {
    std::string v398 = v216;
  }
  int v399 = v217;
  v397 = &unk_26C5C3878;
  uint64_t v400 = v218;
  int v401 = v219;
  v393 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v394, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else {
    std::string v394 = v210;
  }
  int v395 = v211;
  v393 = &unk_26C5C3858;
  uint64_t v396 = v212;
  v388 = &unk_26C5C3AF0;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v389, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  }
  else {
    std::string v389 = v203;
  }
  int v390 = v204;
  v388 = &unk_26C5C3878;
  uint64_t v391 = v205;
  int v392 = v206;
  v384 = &unk_26C5C3AF0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v385, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  }
  else {
    std::string v385 = v197;
  }
  int v386 = v198;
  v384 = &unk_26C5C3858;
  uint64_t v387 = v199;
  v379 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v380, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v380 = v190;
  }
  int v381 = v191;
  v379 = &unk_26C5C3878;
  uint64_t v382 = v192;
  int v383 = v193;
  v374 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v375, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v375 = v183;
  }
  int v376 = v184;
  v374 = &unk_26C5C3878;
  uint64_t v377 = v185;
  int v378 = v186;
  v370 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v371, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  }
  else {
    std::string v371 = v177;
  }
  int v372 = v178;
  v370 = &unk_26C5C3858;
  uint64_t v373 = v179;
  v365 = &unk_26C5C3AF0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v366, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  }
  else {
    std::string v366 = v170;
  }
  int v367 = v171;
  v365 = &unk_26C5C3878;
  uint64_t v368 = v172;
  int v369 = v173;
  v360 = &unk_26C5C3AF0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v361, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  }
  else {
    std::string v361 = v163;
  }
  int v362 = v164;
  v360 = &unk_26C5C3878;
  uint64_t v363 = v165;
  int v364 = v166;
  v356 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v357, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v357 = v157;
  }
  int v358 = v158;
  v356 = &unk_26C5C3858;
  uint64_t v359 = v159;
  v351 = &unk_26C5C3AF0;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v352, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  }
  else {
    std::string v352 = v150;
  }
  int v353 = v151;
  v351 = &unk_26C5C3878;
  uint64_t v354 = v152;
  int v355 = v153;
  v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v347, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  }
  else {
    std::string v347 = v143;
  }
  int v348 = v144;
  v346 = &unk_26C5C3878;
  uint64_t v349 = v145;
  int v350 = v146;
  v342 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v343, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  }
  else {
    std::string v343 = v137;
  }
  int v344 = v138;
  v342 = &unk_26C5C3858;
  uint64_t v345 = v139;
  v337 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v338, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v338 = v130;
  }
  int v339 = v131;
  v337 = &unk_26C5C3878;
  uint64_t v340 = v132;
  int v341 = v133;
  v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v333, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else {
    std::string v333 = v123;
  }
  int v334 = v124;
  v332 = &unk_26C5C3878;
  uint64_t v335 = v125;
  int v336 = v126;
  v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v329, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v329 = v117;
  }
  int v330 = v118;
  v328 = &unk_26C5C3858;
  uint64_t v331 = v119;
  v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v111;
  }
  int v326 = v112;
  v324 = &unk_26C5C3858;
  uint64_t v327 = v113;
  v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v321, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  }
  else {
    std::string v321 = v105;
  }
  int v322 = v106;
  v320 = &unk_26C5C3858;
  uint64_t v323 = v107;
  v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v317, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v317 = v99;
  }
  int v318 = v100;
  v316 = &unk_26C5C3858;
  uint64_t v319 = v101;
  v311 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v312, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  }
  else {
    std::string v312 = v92;
  }
  int v313 = v93;
  v311 = &unk_26C5C3878;
  uint64_t v314 = v94;
  int v315 = v95;
  v306 = &unk_26C5C3AF0;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v307, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else {
    std::string v307 = v85;
  }
  int v308 = v86;
  v306 = &unk_26C5C3878;
  uint64_t v309 = v87;
  int v310 = v88;
  v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v303, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else {
    std::string v303 = v79;
  }
  int v304 = v80;
  v302 = &unk_26C5C3858;
  uint64_t v305 = v81;
  v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v73;
  }
  int v300 = v74;
  v298 = &unk_26C5C3858;
  uint64_t v301 = v75;
  v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v295, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v295 = v67;
  }
  int v296 = v68;
  v294 = &unk_26C5C3858;
  uint64_t v297 = v69;
  v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v291, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v291 = v61;
  }
  int v292 = v62;
  v290 = &unk_26C5C3858;
  uint64_t v293 = v63;
  v286 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v287, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v287 = v55;
  }
  int v288 = v56;
  v286 = &unk_26C5C3858;
  uint64_t v289 = v57;
  v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v283, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v283 = v49;
  }
  int v284 = v50;
  v282 = &unk_26C5C3858;
  uint64_t v285 = v51;
  v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v279, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v279 = v43;
  }
  int v280 = v44;
  v278 = &unk_26C5C3858;
  uint64_t v281 = v45;
  v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v36;
  }
  int v275 = v37;
  v273 = &unk_26C5C3878;
  uint64_t v276 = v38;
  int v277 = v39;
  v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v270, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v270 = v30;
  }
  int v271 = v31;
  v269 = &unk_26C5C3858;
  uint64_t v272 = v32;
  v264 = &unk_26C5C3AF0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v265, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v265 = v23;
  }
  int v266 = v24;
  v264 = &unk_26C5C3878;
  uint64_t v267 = v25;
  int v268 = v26;
  v259 = &unk_26C5C3AF0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v260, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v260 = v16;
  }
  int v261 = v17;
  v259 = &unk_26C5C3878;
  uint64_t v262 = v18;
  int v263 = v19;
  v254 = &unk_26C5C3AF0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  int v256 = v10;
  v254 = &unk_26C5C3878;
  uint64_t v257 = v11;
  int v258 = v12;
  mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::DatabaseTable(v1, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v411, (uint64_t)&v407, (uint64_t)&v402, (uint64_t)&v397, (uint64_t)&v393, (uint64_t)&v388, (uint64_t)&v384, (uint64_t)&v379, (uint64_t)&v374, (uint64_t)&v370, (uint64_t)&v365, (uint64_t)&v360, (uint64_t)&v356, (uint64_t)&v351, (uint64_t)&v346,
    (uint64_t)&v342,
    (uint64_t)&v337,
    (uint64_t)&v332,
    (uint64_t)&v328,
    (uint64_t)&v324,
    (uint64_t)&v320,
    (uint64_t)&v316,
    (uint64_t)&v311,
    (uint64_t)&v306,
    (uint64_t)&v302,
    (uint64_t)&v298,
    (uint64_t)&v294,
    (uint64_t)&v290,
    (uint64_t)&v286,
    (uint64_t)&v282,
    (uint64_t)&v278,
    (uint64_t)&v273,
    (uint64_t)&v269,
    (uint64_t)&v264,
    (uint64_t)&v259,
    (uint64_t)&v254);
  v254 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v259 = &unk_26C5C3AF0;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  v264 = &unk_26C5C3AF0;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v265.__r_.__value_.__l.__data_);
  }
  v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v283.__r_.__value_.__l.__data_);
  }
  v286 = &unk_26C5C3AF0;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v287.__r_.__value_.__l.__data_);
  }
  v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v295.__r_.__value_.__l.__data_);
  }
  v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  v306 = &unk_26C5C3AF0;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v307.__r_.__value_.__l.__data_);
  }
  v311 = &unk_26C5C3AF0;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v329.__r_.__value_.__l.__data_);
  }
  v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  v337 = &unk_26C5C3AF0;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v338.__r_.__value_.__l.__data_);
  }
  v342 = &unk_26C5C3AF0;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v343.__r_.__value_.__l.__data_);
  }
  v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v347.__r_.__value_.__l.__data_);
  }
  v351 = &unk_26C5C3AF0;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v352.__r_.__value_.__l.__data_);
  }
  v356 = &unk_26C5C3AF0;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v357.__r_.__value_.__l.__data_);
  }
  v360 = &unk_26C5C3AF0;
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v361.__r_.__value_.__l.__data_);
  }
  v365 = &unk_26C5C3AF0;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v366.__r_.__value_.__l.__data_);
  }
  v370 = &unk_26C5C3AF0;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v371.__r_.__value_.__l.__data_);
  }
  v374 = &unk_26C5C3AF0;
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v375.__r_.__value_.__l.__data_);
  }
  v379 = &unk_26C5C3AF0;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v380.__r_.__value_.__l.__data_);
  }
  v384 = &unk_26C5C3AF0;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v385.__r_.__value_.__l.__data_);
  }
  v388 = &unk_26C5C3AF0;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v389.__r_.__value_.__l.__data_);
  }
  v393 = &unk_26C5C3AF0;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v394.__r_.__value_.__l.__data_);
  }
  v397 = &unk_26C5C3AF0;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  v402 = &unk_26C5C3AF0;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v403.__r_.__value_.__l.__data_);
  }
  v407 = &unk_26C5C3AF0;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v408.__r_.__value_.__l.__data_);
  }
  v411 = &unk_26C5C3AF0;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  v416 = &unk_26C5C3AF0;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v417.__r_.__value_.__l.__data_);
  }
  v420 = &unk_26C5C3AF0;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v421.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v425.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v1 = &unk_26C5C4130;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 1904, (uint64_t)&v248);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1952, (uint64_t)&v242);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2000, (uint64_t)&v235);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2048, (uint64_t)&v229);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2096, (uint64_t)&v222);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2144, (uint64_t)&v215);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2192, (uint64_t)&v209);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2240, (uint64_t)&v202);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2288, (uint64_t)&v196);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2336, (uint64_t)&v189);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2384, (uint64_t)&v182);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2432, (uint64_t)&v176);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2480, (uint64_t)&v169);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2528, (uint64_t)&v162);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2576, (uint64_t)&v156);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2624, (uint64_t)&v149);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2672, (uint64_t)&v142);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2720, (uint64_t)&v136);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2768, (uint64_t)&v129);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2816, (uint64_t)&v122);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2864, (uint64_t)&v116);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2912, (uint64_t)&v110);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2960, (uint64_t)&v104);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3008, (uint64_t)&v98);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 3056, (uint64_t)&v91);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 3104, (uint64_t)&v84);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3152, (uint64_t)&v78);
  *(void *)(v1 + 3200) = &unk_26C5C3AF0;
  uint64_t v2 = (std::string *)(v1 + 3208);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *(void *)(v1 + 3224) = *((void *)&v73.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3232) = v74;
  *(void *)(v1 + 3236) = v75;
  *(void *)(v1 + 3200) = &unk_26C5C47C8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3248, (uint64_t)&v66);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3296, (uint64_t)&v60);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3344, (uint64_t)&v54);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3392, (uint64_t)&v48);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3440, (uint64_t)&v42);
  *(void *)(v1 + 3488) = &unk_26C5C3AF0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3496), v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v1 + 3496) = v36;
  }
  *(_DWORD *)(v1 + 3520) = v37;
  *(void *)(v1 + 3524) = v38;
  *(_DWORD *)(v1 + 3532) = v39;
  *(void *)(v1 + 3488) = &unk_26C5C47E8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 3536, (uint64_t)&v29);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 3584, (uint64_t)&v22);
  *(void *)(v1 + 3632) = &unk_26C5C3AF0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3640), v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v1 + 3640) = v16;
  }
  *(_DWORD *)(v1 + 3664) = v17;
  *(void *)(v1 + 3668) = v18;
  *(_DWORD *)(v1 + 3676) = v19;
  *(void *)(v1 + 3632) = &unk_26C5C47E8;
  *(void *)(v1 + 3680) = &unk_26C5C3AF0;
  uint64_t v3 = (std::string *)(v1 + 3688);
  char v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    char v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(v1 + 3704) = *((void *)&v9.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3712) = v10;
  *(void *)(v1 + 3716) = v11;
  *(_DWORD *)(v1 + 3724) = v12;
  *(void *)(v1 + 3680) = &unk_26C5C47E8;
  uint64_t v8 = &unk_26C5C3AF0;
  if (v4 < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  uint64_t v15 = &unk_26C5C3AF0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  unint64_t v22 = &unk_26C5C3AF0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v29 = &unk_26C5C3AF0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  unint64_t v35 = &unk_26C5C3AF0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  unint64_t v42 = &unk_26C5C3AF0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  uint64_t v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  uint64_t v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  uint64_t v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  uint64_t v72 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  unint64_t v78 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  unint64_t v84 = &unk_26C5C3AF0;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (v83 < 0) {
    operator delete(v82[0]);
  }
  size_t v91 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  unint64_t v98 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  v104 = &unk_26C5C3AF0;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  BOOL v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  unint64_t v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (v115 < 0) {
    operator delete(v114[0]);
  }
  v122 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (v121 < 0) {
    operator delete(v120[0]);
  }
  v129 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (v135 < 0) {
    operator delete(v134[0]);
  }
  v142 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (v141 < 0) {
    operator delete(v140[0]);
  }
  v149 = &unk_26C5C3AF0;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (v148 < 0) {
    operator delete(v147[0]);
  }
  v156 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (v155 < 0) {
    operator delete(v154[0]);
  }
  v162 = &unk_26C5C3AF0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (v161 < 0) {
    operator delete(v160[0]);
  }
  v169 = &unk_26C5C3AF0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v170.__r_.__value_.__l.__data_);
  }
  if (v168 < 0) {
    operator delete(v167[0]);
  }
  v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  v182 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  if (v181 < 0) {
    operator delete(v180[0]);
  }
  v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v188 < 0) {
    operator delete(v187[0]);
  }
  v196 = &unk_26C5C3AF0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (v195 < 0) {
    operator delete(v194[0]);
  }
  v202 = &unk_26C5C3AF0;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  v209 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v210.__r_.__value_.__l.__data_);
  }
  if (v208 < 0) {
    operator delete(v207[0]);
  }
  v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  v222 = &unk_26C5C3AF0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (v221 < 0) {
    operator delete(v220[0]);
  }
  v229 = &unk_26C5C3AF0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (v228 < 0) {
    operator delete(v227[0]);
  }
  v235 = &unk_26C5C3AF0;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (v234 < 0) {
    operator delete(v233[0]);
  }
  v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v243.__r_.__value_.__l.__data_);
  }
  if (v241 < 0) {
    operator delete(v240[0]);
  }
  v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v1 = &unk_26C5C8910;
  return v1;
}

void sub_214DADEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,_Unwind_Exception *exception_objecta,uint64_t a46,uint64_t a47,uint64_t a48)
{
  *(void *)(v48 + 3632) = v49;
  if (*(char *)(v48 + 3663) < 0) {
    operator delete(*v50);
  }
  *(void *)(v48 + 3584) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3615) < 0) {
    operator delete(*(void **)(v48 + 3592));
  }
  *(void *)(v48 + 3536) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3567) < 0) {
    operator delete(*(void **)(v48 + 3544));
  }
  *(void *)(v48 + 3488) = v52;
  if (*(char *)(v48 + 3519) < 0) {
    operator delete(*v51);
  }
  *(void *)(v48 + 3440) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3471) < 0) {
    operator delete(*(void **)(v48 + 3448));
  }
  *(void *)(v48 + 3392) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3423) < 0) {
    operator delete(*(void **)(v48 + 3400));
  }
  *(void *)(v48 + 3344) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3375) < 0) {
    operator delete(*(void **)(v48 + 3352));
  }
  *(void *)(v48 + 3296) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3327) < 0) {
    operator delete(*(void **)(v48 + 3304));
  }
  *(void *)(v48 + 3248) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3279) < 0) {
    operator delete(*(void **)(v48 + 3256));
  }
  *(void *)(v48 + 3200) = a48;
  if (*(char *)(v48 + 3231) < 0) {
    operator delete(*a42);
  }
  *(void *)(v48 + 3152) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3183) < 0) {
    operator delete(*(void **)(v48 + 3160));
  }
  *(void *)(v48 + 3104) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3135) < 0) {
    operator delete(*(void **)(v48 + 3112));
  }
  *(void *)(v48 + 3056) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3087) < 0) {
    operator delete(*(void **)(v48 + 3064));
  }
  *(void *)(v48 + 3008) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 3039) < 0) {
    operator delete(*(void **)(v48 + 3016));
  }
  *(void *)(v48 + 2960) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2991) < 0) {
    operator delete(*(void **)(v48 + 2968));
  }
  *(void *)(v48 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2943) < 0) {
    operator delete(*(void **)(v48 + 2920));
  }
  *(void *)(v48 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2895) < 0) {
    operator delete(*(void **)(v48 + 2872));
  }
  *(void *)(v48 + 2816) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2847) < 0) {
    operator delete(*(void **)(v48 + 2824));
  }
  *(void *)(v48 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2799) < 0) {
    operator delete(*(void **)(v48 + 2776));
  }
  *(void *)(v48 + 2720) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2751) < 0) {
    operator delete(*(void **)(v48 + 2728));
  }
  *(void *)(v48 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2703) < 0) {
    operator delete(*(void **)(v48 + 2680));
  }
  *(void *)(v48 + 2624) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2655) < 0) {
    operator delete(*(void **)(v48 + 2632));
  }
  *(void *)(v48 + 2576) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2607) < 0) {
    operator delete(*(void **)(v48 + 2584));
  }
  *(void *)(v48 + 2528) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2559) < 0) {
    operator delete(*(void **)(v48 + 2536));
  }
  *(void *)(v48 + 2480) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2511) < 0) {
    operator delete(*(void **)(v48 + 2488));
  }
  *(void *)(v48 + 2432) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2463) < 0) {
    operator delete(*(void **)(v48 + 2440));
  }
  *(void *)(v48 + 2384) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2415) < 0) {
    operator delete(*(void **)(v48 + 2392));
  }
  *(void *)(v48 + 2336) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2367) < 0) {
    operator delete(*(void **)(v48 + 2344));
  }
  *(void *)(v48 + 2288) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2319) < 0) {
    operator delete(*(void **)(v48 + 2296));
  }
  *(void *)(v48 + 2240) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2271) < 0) {
    operator delete(*(void **)(v48 + 2248));
  }
  *(void *)(v48 + 2192) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2223) < 0) {
    operator delete(*(void **)(v48 + 2200));
  }
  *(void *)(v48 + 2144) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2175) < 0) {
    operator delete(*(void **)(v48 + 2152));
  }
  *(void *)(v48 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2127) < 0) {
    operator delete(*(void **)(v48 + 2104));
  }
  *(void *)(v48 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2079) < 0) {
    operator delete(*(void **)(v48 + 2056));
  }
  *(void *)(v48 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 2031) < 0) {
    operator delete(*(void **)(v48 + 2008));
  }
  *(void *)(v48 + 1952) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 1983) < 0) {
    operator delete(*(void **)(v48 + 1960));
  }
  *(void *)(v48 + 1904) = &unk_26C5C3AF0;
  if (*(char *)(v48 + 1935) < 0) {
    operator delete(*(void **)(v48 + 1912));
  }
  mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~DatabaseTable(v48);
  STACK[0x230] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  STACK[0x278] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  STACK[0x2C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  STACK[0x308] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  STACK[0x350] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  STACK[0x398] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  STACK[0x3E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  STACK[0x428] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  STACK[0x470] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  STACK[0x4B8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  STACK[0x500] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  STACK[0x548] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x547]) < 0) {
    operator delete((void *)STACK[0x530]);
  }
  STACK[0x590] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  STACK[0x5D8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  STACK[0x620] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x63F]) < 0) {
    operator delete((void *)STACK[0x628]);
  }
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  STACK[0x668] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x687]) < 0) {
    operator delete((void *)STACK[0x670]);
  }
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  STACK[0x6B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x6CF]) < 0) {
    operator delete((void *)STACK[0x6B8]);
  }
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  STACK[0x6F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  STACK[0x740] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x75F]) < 0) {
    operator delete((void *)STACK[0x748]);
  }
  if (SLOBYTE(STACK[0x73F]) < 0) {
    operator delete((void *)STACK[0x728]);
  }
  STACK[0x788] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  STACK[0x7D0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  if (SLOBYTE(STACK[0x7CF]) < 0) {
    operator delete((void *)STACK[0x7B8]);
  }
  STACK[0x818] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x837]) < 0) {
    operator delete((void *)STACK[0x820]);
  }
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  STACK[0x860] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  if (SLOBYTE(STACK[0x85F]) < 0) {
    operator delete((void *)STACK[0x848]);
  }
  STACK[0x8A8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  if (SLOBYTE(STACK[0x8A7]) < 0) {
    operator delete((void *)STACK[0x890]);
  }
  STACK[0x8F0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x90F]) < 0) {
    operator delete((void *)STACK[0x8F8]);
  }
  if (SLOBYTE(STACK[0x8EF]) < 0) {
    operator delete((void *)STACK[0x8D8]);
  }
  STACK[0x938] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x957]) < 0) {
    operator delete((void *)STACK[0x940]);
  }
  if (SLOBYTE(STACK[0x937]) < 0) {
    operator delete((void *)STACK[0x920]);
  }
  STACK[0x980] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x99F]) < 0) {
    operator delete((void *)STACK[0x988]);
  }
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  STACK[0x9C8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x9E7]) < 0) {
    operator delete((void *)STACK[0x9D0]);
  }
  if (SLOBYTE(STACK[0x9C7]) < 0) {
    operator delete((void *)STACK[0x9B0]);
  }
  STACK[0xA10] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA2F]) < 0) {
    operator delete((void *)STACK[0xA18]);
  }
  if (SLOBYTE(STACK[0xA0F]) < 0) {
    operator delete((void *)STACK[0x9F8]);
  }
  STACK[0xA58] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA77]) < 0) {
    operator delete((void *)STACK[0xA60]);
  }
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  STACK[0xAA0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  if (SLOBYTE(STACK[0xA9F]) < 0) {
    operator delete((void *)STACK[0xA88]);
  }
  STACK[0xAE8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB07]) < 0) {
    operator delete((void *)STACK[0xAF0]);
  }
  if (SLOBYTE(STACK[0xAE7]) < 0) {
    operator delete((void *)STACK[0xAD0]);
  }
  STACK[0xB30] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB4F]) < 0) {
    operator delete((void *)STACK[0xB38]);
  }
  if (SLOBYTE(STACK[0xB2F]) < 0) {
    operator delete((void *)STACK[0xB18]);
  }
  STACK[0xB78] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB97]) < 0) {
    operator delete((void *)STACK[0xB80]);
  }
  if (SLOBYTE(STACK[0xB77]) < 0) {
    operator delete((void *)STACK[0xB60]);
  }
  STACK[0xBC0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xBDF]) < 0) {
    operator delete((void *)STACK[0xBC8]);
  }
  if (SLOBYTE(STACK[0xBBF]) < 0) {
    operator delete((void *)STACK[0xBA8]);
  }
  STACK[0xC08] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC27]) < 0) {
    operator delete((void *)STACK[0xC10]);
  }
  if (SLOBYTE(STACK[0xC07]) < 0) {
    operator delete((void *)STACK[0xBF0]);
  }
  STACK[0xC50] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC6F]) < 0) {
    operator delete((void *)STACK[0xC58]);
  }
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  STACK[0xC98] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xCB7]) < 0) {
    operator delete((void *)STACK[0xCA0]);
  }
  if (SLOBYTE(STACK[0xC97]) < 0) {
    operator delete((void *)STACK[0xC80]);
  }
  if (SLOBYTE(STACK[0xCDF]) < 0) {
    operator delete((void *)STACK[0xCC8]);
  }
  _Unwind_Resume(a1);
}

void sub_214DAF0AC()
{
}

void sub_214DAF0B4()
{
}

void sub_214DAF0BC()
{
}

void sub_214DAF0C4()
{
}

void sub_214DAF0CC()
{
}

void sub_214DAF0D4()
{
}

void sub_214DAF0DC()
{
}

void sub_214DAF0E4()
{
}

void sub_214DAF0EC()
{
}

void sub_214DAF0F4()
{
}

void sub_214DAF0FC()
{
}

void sub_214DAF104()
{
}

void sub_214DAF10C()
{
}

void sub_214DAF114()
{
}

void sub_214DAF11C()
{
}

void sub_214DAF124()
{
}

void sub_214DAF12C()
{
}

void sub_214DAF134()
{
}

void sub_214DAF13C()
{
}

void sub_214DAF144()
{
}

void sub_214DAF14C()
{
}

void sub_214DAF154()
{
}

void sub_214DAF15C()
{
}

void sub_214DAF164()
{
}

void sub_214DAF16C()
{
}

void sub_214DAF174()
{
}

void sub_214DAF17C()
{
}

void sub_214DAF184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,unint64_t a47,unint64_t a48,unint64_t a49,unint64_t a50,unint64_t a51,unint64_t a52,unint64_t a53,unint64_t a54,unint64_t a55,unint64_t a56,unint64_t a57,unint64_t a58,unint64_t a59,unint64_t a60,unint64_t a61,unint64_t a62,unint64_t a63)
{
  STACK[0xCE0] = v74;
  if (SLOBYTE(STACK[0xCFF]) < 0) {
    operator delete((void *)STACK[0xCE8]);
  }
  STACK[0xD10] = v73;
  if (SLOBYTE(STACK[0xD2F]) < 0) {
    operator delete((void *)STACK[0xD18]);
  }
  STACK[0xD40] = v72;
  if (SLOBYTE(STACK[0xD5F]) < 0) {
    operator delete((void *)STACK[0xD48]);
  }
  STACK[0xD70] = v80;
  if (SLOBYTE(STACK[0xD8F]) < 0) {
    operator delete((void *)STACK[0xD78]);
  }
  STACK[0xDA0] = v79;
  if (SLOBYTE(STACK[0xDBF]) < 0) {
    operator delete((void *)STACK[0xDA8]);
  }
  STACK[0xDD0] = v78;
  if (SLOBYTE(STACK[0xDEF]) < 0) {
    operator delete((void *)STACK[0xDD8]);
  }
  STACK[0xE00] = v77;
  if (SLOBYTE(STACK[0xE1F]) < 0) {
    operator delete((void *)STACK[0xE08]);
  }
  STACK[0xE30] = v76;
  if (SLOBYTE(STACK[0xE4F]) < 0) {
    operator delete((void *)STACK[0xE38]);
  }
  STACK[0xE60] = v75;
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  STACK[0xE90] = a47;
  if (SLOBYTE(STACK[0xEAF]) < 0) {
    operator delete((void *)STACK[0xE98]);
  }
  STACK[0xEC0] = a48;
  if (SLOBYTE(STACK[0xEDF]) < 0) {
    operator delete((void *)STACK[0xEC8]);
  }
  STACK[0xEF0] = a49;
  if (SLOBYTE(STACK[0xF0F]) < 0) {
    operator delete((void *)STACK[0xEF8]);
  }
  STACK[0xF20] = a50;
  if (SLOBYTE(STACK[0xF3F]) < 0) {
    operator delete((void *)STACK[0xF28]);
  }
  STACK[0xF50] = a51;
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  STACK[0xF80] = a52;
  if (SLOBYTE(STACK[0xF9F]) < 0) {
    operator delete((void *)STACK[0xF88]);
  }
  STACK[0xFB0] = a53;
  if (SLOBYTE(STACK[0xFCF]) < 0) {
    operator delete((void *)STACK[0xFB8]);
  }
  STACK[0xFE0] = a54;
  if (SLOBYTE(STACK[0xFFF]) < 0) {
    operator delete((void *)STACK[0xFE8]);
  }
  STACK[0x1010] = a55;
  if (SLOBYTE(STACK[0x102F]) < 0) {
    operator delete((void *)STACK[0x1018]);
  }
  STACK[0x1040] = a56;
  if (SLOBYTE(STACK[0x105F]) < 0) {
    operator delete((void *)STACK[0x1048]);
  }
  STACK[0x1070] = a57;
  if (SLOBYTE(STACK[0x108F]) < 0) {
    operator delete((void *)STACK[0x1078]);
  }
  STACK[0x10A0] = a58;
  if (SLOBYTE(STACK[0x10BF]) < 0) {
    operator delete((void *)STACK[0x10A8]);
  }
  STACK[0x10D0] = a59;
  if (SLOBYTE(STACK[0x10EF]) < 0) {
    operator delete((void *)STACK[0x10D8]);
  }
  STACK[0x1100] = a60;
  if (SLOBYTE(STACK[0x111F]) < 0) {
    operator delete((void *)STACK[0x1108]);
  }
  STACK[0x1130] = a61;
  if (SLOBYTE(STACK[0x114F]) < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  STACK[0x1160] = a62;
  if (SLOBYTE(STACK[0x117F]) < 0) {
    operator delete((void *)STACK[0x1168]);
  }
  STACK[0x1190] = a63;
  if (SLOBYTE(STACK[0x11AF]) < 0) {
    operator delete((void *)STACK[0x1198]);
  }
  STACK[0x11C0] = a64;
  if (SLOBYTE(STACK[0x11DF]) < 0) {
    operator delete((void *)STACK[0x11C8]);
  }
  STACK[0x11F0] = a65;
  if (SLOBYTE(STACK[0x120F]) < 0) {
    operator delete((void *)STACK[0x11F8]);
  }
  STACK[0x1220] = a66;
  if (SLOBYTE(STACK[0x123F]) < 0) {
    operator delete((void *)STACK[0x1228]);
  }
  STACK[0x1250] = a67;
  if (SLOBYTE(STACK[0x126F]) < 0) {
    operator delete((void *)STACK[0x1258]);
  }
  STACK[0x1280] = a68;
  if (SLOBYTE(STACK[0x129F]) < 0) {
    operator delete((void *)STACK[0x1288]);
  }
  STACK[0x12B0] = a69;
  if (SLOBYTE(STACK[0x12CF]) < 0) {
    operator delete((void *)STACK[0x12B8]);
  }
  STACK[0x12E0] = a70;
  if (SLOBYTE(STACK[0x12FF]) < 0) {
    operator delete((void *)STACK[0x12E8]);
  }
  STACK[0x1310] = a71;
  if (SLOBYTE(STACK[0x132F]) < 0) {
    operator delete((void *)STACK[0x1318]);
  }
  STACK[0x1340] = a72;
  if (SLOBYTE(STACK[0x135F]) < 0) {
    operator delete((void *)STACK[0x1348]);
  }
  STACK[0x1370] = STACK[0x200];
  if (SLOBYTE(STACK[0x138F]) < 0) {
    operator delete((void *)STACK[0x1378]);
  }
  *(void *)(v81 - 224) = STACK[0x208];
  if (SLOBYTE(STACK[0x13BF]) < 0) {
    operator delete(*(void **)(v81 - 216));
  }
  *(void *)(v81 - 176) = STACK[0x210];
  if (SLOBYTE(STACK[0x13EF]) < 0) {
    operator delete(*(void **)(v81 - 168));
  }
  if (SLOBYTE(STACK[0x1417]) < 0) {
    operator delete(*(void **)(v81 - 128));
  }
  JUMPOUT(0x214DAE714);
}

void sub_214DAF598()
{
}

void sub_214DAF5A0()
{
}

void sub_214DAF5A8()
{
}

void sub_214DAF5B0()
{
}

void sub_214DAF5B8()
{
}

void sub_214DAF5C0()
{
}

void sub_214DAF5C8()
{
}

void sub_214DAF5D0()
{
}

void sub_214DAF5D8()
{
}

void sub_214DAF5E0()
{
}

void sub_214DAF5E8()
{
}

void sub_214DAF5F0()
{
}

void sub_214DAF5F8()
{
}

void sub_214DAF600()
{
}

void sub_214DAF608()
{
}

void sub_214DAF610()
{
}

void sub_214DAF618()
{
}

void sub_214DAF620()
{
}

void sub_214DAF628()
{
}

void sub_214DAF630()
{
}

void sub_214DAF638()
{
}

void sub_214DAF640()
{
}

void sub_214DAF648()
{
}

void sub_214DAF650()
{
}

void sub_214DAF658()
{
}

void sub_214DAF660()
{
}

void sub_214DAF668()
{
}

void sub_214DAF670()
{
}

void sub_214DAF678()
{
}

void sub_214DAF680()
{
}

void sub_214DAF688()
{
}

void sub_214DAF690()
{
}

void sub_214DAF698()
{
}

void sub_214DAF6A0()
{
}

void sub_214DAF6A8()
{
}

void sub_214DAF6B0()
{
}

void sub_214DAF6B8()
{
}

void sub_214DAF6C0()
{
}

void sub_214DAF6C8()
{
}

void sub_214DAF6D0()
{
}

void sub_214DAF6D8()
{
}

void sub_214DAF6E0()
{
}

void sub_214DAF6E8()
{
}

void sub_214DAF6F0()
{
}

void sub_214DAF6F8()
{
}

void sub_214DAF700()
{
}

void sub_214DAF708()
{
}

void sub_214DAF710()
{
}

void sub_214DAF718()
{
}

void sub_214DAF720()
{
}

void sub_214DAF728()
{
}

void sub_214DAF730()
{
}

void sub_214DAF738()
{
}

void sub_214DAF740()
{
}

void sub_214DAF748()
{
}

void sub_214DAF750()
{
}

void sub_214DAF758()
{
}

void sub_214DAF760()
{
}

void sub_214DAF768()
{
}

void sub_214DAF770()
{
}

void sub_214DAF778()
{
}

void sub_214DAF780()
{
}

void sub_214DAF788()
{
}

void sub_214DAF790()
{
}

void sub_214DAF798()
{
}

void sub_214DAF7A0()
{
}

void sub_214DAF7A8()
{
}

void sub_214DAF7B0()
{
}

void sub_214DAF7B8()
{
}

void sub_214DAF7C0()
{
}

void sub_214DAF7C8()
{
}

void sub_214DAF7D0()
{
}

void sub_214DAF7D8()
{
}

void sub_214DAF7E0()
{
}

void sub_214DAF7E8()
{
}

void sub_214DAF7F0()
{
}

void *mlcore::ContainerTable::ContainerTable(mlcore::ContainerTable *this)
{
  uint64_t v1 = (void *)MEMORY[0x270FA5388](this);
  std::string::basic_string[abi:ne180100]<0>(v364, "container");
  std::string::basic_string[abi:ne180100]<0>(v360, "container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v362, (uint64_t)v360, 1);
  std::string::basic_string[abi:ne180100]<0>(v356, "distinguished_kind");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v358, (uint64_t)v356, 0);
  std::string::basic_string[abi:ne180100]<0>(v352, "date_created");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v354, (uint64_t)v352);
  std::string::basic_string[abi:ne180100]<0>(v348, "date_modified");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v350, (uint64_t)v348);
  std::string::basic_string[abi:ne180100]<0>(v344, "date_played");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v346, (uint64_t)v344);
  std::string::basic_string[abi:ne180100]<0>(v341, "name");
  std::string::basic_string[abi:ne180100]<0>(v339, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v343, (uint64_t)v341, (uint64_t)v339);
  std::string::basic_string[abi:ne180100]<0>(v335, "name_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v337, (uint64_t)v335);
  std::string::basic_string[abi:ne180100]<0>(v331, "is_owner");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v333, (uint64_t)v331, 1);
  std::string::basic_string[abi:ne180100]<0>(v327, "is_editable");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v329, (uint64_t)v327, 0);
  std::string::basic_string[abi:ne180100]<0>(v323, "parent_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v325, (uint64_t)v323);
  std::string::basic_string[abi:ne180100]<0>(v319, "contained_media_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v321, (uint64_t)v319, 0);
  std::string::basic_string[abi:ne180100]<0>(v315, "workout_template_id");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v317, (uint64_t)v315, 0);
  std::string::basic_string[abi:ne180100]<0>(v311, "is_hidden");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v313, (uint64_t)v311, 0);
  std::string::basic_string[abi:ne180100]<0>(v307, "is_ignorable_itunes_playlist");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v309, (uint64_t)v307, 0);
  std::string::basic_string[abi:ne180100]<0>(v304, "description");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v306, (uint64_t)v304, 0);
  std::string::basic_string[abi:ne180100]<0>(v300, "play_count_user");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v302, (uint64_t)v300, 0);
  std::string::basic_string[abi:ne180100]<0>(v296, "play_count_recent");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v298, (uint64_t)v296, 0);
  std::string::basic_string[abi:ne180100]<0>(v292, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v294, (uint64_t)v292, 0);
  std::string::basic_string[abi:ne180100]<0>(v288, "smart_evaluation_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v290, (uint64_t)v288, 0);
  std::string::basic_string[abi:ne180100]<0>(v284, "smart_is_folder");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v286, (uint64_t)v284, 0);
  std::string::basic_string[abi:ne180100]<0>(v280, "smart_is_dynamic");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v282, (uint64_t)v280, 0);
  std::string::basic_string[abi:ne180100]<0>(v276, "smart_is_filtered");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v278, (uint64_t)v276, 0);
  std::string::basic_string[abi:ne180100]<0>(v272, "smart_is_genius");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v274, (uint64_t)v272, 0);
  std::string::basic_string[abi:ne180100]<0>(v268, "smart_enabled_only");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v270, (uint64_t)v268, 0);
  std::string::basic_string[abi:ne180100]<0>(v264, "smart_is_limited");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v266, (uint64_t)v264, 0);
  std::string::basic_string[abi:ne180100]<0>(v260, "smart_limit_kind");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v262, (uint64_t)v260, 0);
  std::string::basic_string[abi:ne180100]<0>(v256, "smart_limit_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v258, (uint64_t)v256, 0);
  std::string::basic_string[abi:ne180100]<0>(v252, "smart_limit_value");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v254, (uint64_t)v252);
  std::string::basic_string[abi:ne180100]<0>(v248, "smart_reverse_limit_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v250, (uint64_t)v248, 0);
  std::string::basic_string[abi:ne180100]<0>(v245, "smart_criteria");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v247, (uint64_t)v245);
  std::string::basic_string[abi:ne180100]<0>(v241, "play_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v243, (uint64_t)v241, 0);
  std::string::basic_string[abi:ne180100]<0>(v237, "is_reversed");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v239, (uint64_t)v237, 0);
  std::string::basic_string[abi:ne180100]<0>(v233, "album_field_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v235, (uint64_t)v233, 0);
  std::string::basic_string[abi:ne180100]<0>(v229, "repeat_mode");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v231, (uint64_t)v229, 0);
  std::string::basic_string[abi:ne180100]<0>(v225, "shuffle_items");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v227, (uint64_t)v225, 0);
  std::string::basic_string[abi:ne180100]<0>(v221, "has_been_shuffled");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v223, (uint64_t)v221, 0);
  std::string::basic_string[abi:ne180100]<0>(v218, "filepath");
  std::string::basic_string[abi:ne180100]<0>(v216, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v220, (uint64_t)v218, (uint64_t)v216);
  std::string::basic_string[abi:ne180100]<0>(v212, "is_saveable");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v214, (uint64_t)v212, 0);
  std::string::basic_string[abi:ne180100]<0>(v208, "is_src_remote");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v210, (uint64_t)v208, 0);
  std::string::basic_string[abi:ne180100]<0>(v204, "is_ignored_syncing");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v206, (uint64_t)v204, 0);
  std::string::basic_string[abi:ne180100]<0>(v200, "container_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v202, (uint64_t)v200, 0);
  std::string::basic_string[abi:ne180100]<0>(v196, "is_container_type_active_target");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v198, (uint64_t)v196, 0);
  std::string::basic_string[abi:ne180100]<0>(v192, "orig_date_modified");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v194, (uint64_t)v192);
  std::string::basic_string[abi:ne180100]<0>(v188, "store_cloud_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v190, (uint64_t)v188);
  std::string::basic_string[abi:ne180100]<0>(v184, "has_cloud_play_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v186, (uint64_t)v184, 0);
  std::string::basic_string[abi:ne180100]<0>(v181, "cloud_global_id");
  std::string::basic_string[abi:ne180100]<0>(v179, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v183, (uint64_t)v181, (uint64_t)v179);
  std::string::basic_string[abi:ne180100]<0>(v176, "cloud_share_url");
  std::string::basic_string[abi:ne180100]<0>(v174, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v178, (uint64_t)v176, (uint64_t)v174);
  std::string::basic_string[abi:ne180100]<0>(v170, "cloud_is_public");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v172, (uint64_t)v170, 0);
  std::string::basic_string[abi:ne180100]<0>(v166, "cloud_is_visible");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v168, (uint64_t)v166, 0);
  std::string::basic_string[abi:ne180100]<0>(v162, "cloud_is_subscribed");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v164, (uint64_t)v162, 0);
  std::string::basic_string[abi:ne180100]<0>(v158, "cloud_is_curator_playlist");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v160, (uint64_t)v158, 0);
  std::string::basic_string[abi:ne180100]<0>(v154, "cloud_author_store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v156, (uint64_t)v154);
  std::string::basic_string[abi:ne180100]<0>(v151, "cloud_author_display_name");
  std::string::basic_string[abi:ne180100]<0>(v149, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v153, (uint64_t)v151, (uint64_t)v149);
  std::string::basic_string[abi:ne180100]<0>(v146, "cloud_author_store_url");
  std::string::basic_string[abi:ne180100]<0>(v144, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v148, (uint64_t)v146, (uint64_t)v144);
  std::string::basic_string[abi:ne180100]<0>(v140, "cloud_min_refresh_interval");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v142, (uint64_t)v140);
  std::string::basic_string[abi:ne180100]<0>(v136, "cloud_last_update_time");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v138, (uint64_t)v136);
  std::string::basic_string[abi:ne180100]<0>(v132, "cloud_user_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v134, (uint64_t)v132, 0);
  std::string::basic_string[abi:ne180100]<0>(v128, "cloud_global_play_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v130, (uint64_t)v128, 0);
  std::string::basic_string[abi:ne180100]<0>(v124, "cloud_global_like_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v126, (uint64_t)v124, 0);
  std::string::basic_string[abi:ne180100]<0>(v120, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v122, (uint64_t)v120, 0);
  std::string::basic_string[abi:ne180100]<0>(v116, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v118, (uint64_t)v116, 0);
  std::string::basic_string[abi:ne180100]<0>(v112, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v114, (uint64_t)v112, 0);
  std::string::basic_string[abi:ne180100]<0>(v108, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v110, (uint64_t)v108, 0);
  std::string::basic_string[abi:ne180100]<0>(v105, "external_vendor_identifier");
  std::string::basic_string[abi:ne180100]<0>(v103, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v107, (uint64_t)v105, (uint64_t)v103);
  std::string::basic_string[abi:ne180100]<0>(v100, "external_vendor_display_name");
  std::string::basic_string[abi:ne180100]<0>(v98, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v102, (uint64_t)v100, (uint64_t)v98);
  std::string::basic_string[abi:ne180100]<0>(v95, "external_vendor_container_tag");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v97, (uint64_t)v95, (uint64_t)v93);
  std::string::basic_string[abi:ne180100]<0>(v89, "is_external_vendor_playlist");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v91, (uint64_t)v89, 0);
  std::string::basic_string[abi:ne180100]<0>(v85, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v87, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v81, "cloud_is_sharing_disabled");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v83, (uint64_t)v81, 0);
  std::string::basic_string[abi:ne180100]<0>(v78, "cloud_version_hash");
  std::string::basic_string[abi:ne180100]<0>(v76, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v80, (uint64_t)v78, (uint64_t)v76);
  std::string::basic_string[abi:ne180100]<0>(v72, "date_played_local");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v74, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v69, "cloud_author_handle");
  std::string::basic_string[abi:ne180100]<0>(v67, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v71, (uint64_t)v69, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(v64, "cloud_universal_library_id");
  std::string::basic_string[abi:ne180100]<0>(v62, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v66, (uint64_t)v64, (uint64_t)v62);
  std::string::basic_string[abi:ne180100]<0>(v58, "should_display_index");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v60, (uint64_t)v58, 0);
  std::string::basic_string[abi:ne180100]<0>(v54, "date_downloaded");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v50, "category_type_mask");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v52, (uint64_t)v50, 0);
  std::string::basic_string[abi:ne180100]<0>(v47, "grouping_sort_key");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v49, (uint64_t)v47, (uint64_t)v45);
  std::string::basic_string[abi:ne180100]<0>(v41, "traits");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v43, (uint64_t)v41, 0);
  std::string::basic_string[abi:ne180100]<0>(v37, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v39, (uint64_t)v37);
  std::string::basic_string[abi:ne180100]<0>(v33, "is_collaborative");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v35, (uint64_t)v33, 0);
  std::string::basic_string[abi:ne180100]<0>(v29, "collaborator_invite_options");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v31, (uint64_t)v29, 0);
  std::string::basic_string[abi:ne180100]<0>(v25, "collaborator_permissions");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v27, (uint64_t)v25, 0);
  std::string::basic_string[abi:ne180100]<0>(v22, "collaboration_invitation_link");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v24, (uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v17, "cover_artwork_recipe");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v19, (uint64_t)v17, (uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(v11, "collaboration_invitation_url_expiration_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v13, (uint64_t)v11);
  std::string::basic_string[abi:ne180100]<0>(v7, "collaboration_join_request_pending");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v9, (uint64_t)v7, 0);
  std::string::basic_string[abi:ne180100]<0>(v3, "collaborator_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v5, (uint64_t)v3, 0);
  mlcore::MediaTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::MediaTable((uint64_t)v1, (uint64_t)v364, (uint64_t)v362, (uint64_t)v358, (uint64_t)v354, (uint64_t)v350, (uint64_t)v346, (uint64_t)v343, (uint64_t)v337, (uint64_t)v333, (uint64_t)v329, (uint64_t)v325, (uint64_t)v321, (uint64_t)v317, (uint64_t)v313, (uint64_t)v309, (uint64_t)v306, (uint64_t)v302, (uint64_t)v298,
    (uint64_t)v294,
    (uint64_t)v290,
    (uint64_t)v286,
    (uint64_t)v282,
    (uint64_t)v278,
    (uint64_t)v274,
    (uint64_t)v270,
    (uint64_t)v266,
    (uint64_t)v262,
    (uint64_t)v258,
    (uint64_t)v254,
    (uint64_t)v250,
    (uint64_t)v247,
    (uint64_t)v243,
    (uint64_t)v239,
    (uint64_t)v235,
    (uint64_t)v231,
    (uint64_t)v227,
    (uint64_t)v223,
    (uint64_t)v220,
    (uint64_t)v214,
    (uint64_t)v210,
    (uint64_t)v206,
    (uint64_t)v202,
    (uint64_t)v198,
    (uint64_t)v194,
    (uint64_t)v190,
    (uint64_t)v186,
    (uint64_t)v183,
    (uint64_t)v178,
    (uint64_t)v172,
    (uint64_t)v168,
    (uint64_t)v164,
    (uint64_t)v160,
    (uint64_t)v156,
    (uint64_t)v153,
    (uint64_t)v148,
    (uint64_t)v142,
    (uint64_t)v138,
    (uint64_t)v134,
    (uint64_t)v130,
    (uint64_t)v126,
    (uint64_t)v122,
    (uint64_t)v118);
  v5[0] = &unk_26C5C3AF0;
  if (v6 < 0) {
    operator delete((void *)v5[1]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  v9[0] = &unk_26C5C3AF0;
  if (v10 < 0) {
    operator delete((void *)v9[1]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  v13[0] = &unk_26C5C3AF0;
  if (v14 < 0) {
    operator delete((void *)v13[1]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v19);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v24);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  v27[0] = &unk_26C5C3AF0;
  if (v28 < 0) {
    operator delete((void *)v27[1]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v31[0] = &unk_26C5C3AF0;
  if (v32 < 0) {
    operator delete((void *)v31[1]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  v35[0] = &unk_26C5C3AF0;
  if (v36 < 0) {
    operator delete((void *)v35[1]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  v39[0] = &unk_26C5C3AF0;
  if (v40 < 0) {
    operator delete((void *)v39[1]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  v43[0] = &unk_26C5C3AF0;
  if (v44 < 0) {
    operator delete((void *)v43[1]);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v49);
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  v52[0] = &unk_26C5C3AF0;
  if (v53 < 0) {
    operator delete((void *)v52[1]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  v56[0] = &unk_26C5C3AF0;
  if (v57 < 0) {
    operator delete((void *)v56[1]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  v60[0] = &unk_26C5C3AF0;
  if (v61 < 0) {
    operator delete((void *)v60[1]);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v66);
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v71);
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  v74[0] = &unk_26C5C3AF0;
  if (v75 < 0) {
    operator delete((void *)v74[1]);
  }
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v80);
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  v83[0] = &unk_26C5C3AF0;
  if (v84 < 0) {
    operator delete((void *)v83[1]);
  }
  if (v82 < 0) {
    operator delete(v81[0]);
  }
  v87[0] = &unk_26C5C3AF0;
  if (v88 < 0) {
    operator delete((void *)v87[1]);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  v91[0] = &unk_26C5C3AF0;
  if (v92 < 0) {
    operator delete((void *)v91[1]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v97);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v102);
  if (v99 < 0) {
    operator delete(v98[0]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v107);
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  v110[0] = &unk_26C5C3AF0;
  if (v111 < 0) {
    operator delete((void *)v110[1]);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  v114[0] = &unk_26C5C3AF0;
  if (v115 < 0) {
    operator delete((void *)v114[1]);
  }
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  v118[0] = &unk_26C5C3AF0;
  if (v119 < 0) {
    operator delete((void *)v118[1]);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  v122[0] = &unk_26C5C3AF0;
  if (v123 < 0) {
    operator delete((void *)v122[1]);
  }
  if (v121 < 0) {
    operator delete(v120[0]);
  }
  v126[0] = &unk_26C5C3AF0;
  if (v127 < 0) {
    operator delete((void *)v126[1]);
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  v130[0] = &unk_26C5C3AF0;
  if (v131 < 0) {
    operator delete((void *)v130[1]);
  }
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  v134[0] = &unk_26C5C3AF0;
  if (v135 < 0) {
    operator delete((void *)v134[1]);
  }
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  v138[0] = &unk_26C5C3AF0;
  if (v139 < 0) {
    operator delete((void *)v138[1]);
  }
  if (v137 < 0) {
    operator delete(v136[0]);
  }
  v142[0] = &unk_26C5C3AF0;
  if (v143 < 0) {
    operator delete((void *)v142[1]);
  }
  if (v141 < 0) {
    operator delete(v140[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v148);
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v153);
  if (v150 < 0) {
    operator delete(v149[0]);
  }
  if (v152 < 0) {
    operator delete(v151[0]);
  }
  v156[0] = &unk_26C5C3AF0;
  if (v157 < 0) {
    operator delete((void *)v156[1]);
  }
  if (v155 < 0) {
    operator delete(v154[0]);
  }
  v160[0] = &unk_26C5C3AF0;
  if (v161 < 0) {
    operator delete((void *)v160[1]);
  }
  if (v159 < 0) {
    operator delete(v158[0]);
  }
  v164[0] = &unk_26C5C3AF0;
  if (v165 < 0) {
    operator delete((void *)v164[1]);
  }
  if (v163 < 0) {
    operator delete(v162[0]);
  }
  v168[0] = &unk_26C5C3AF0;
  if (v169 < 0) {
    operator delete((void *)v168[1]);
  }
  if (v167 < 0) {
    operator delete(v166[0]);
  }
  v172[0] = &unk_26C5C3AF0;
  if (v173 < 0) {
    operator delete((void *)v172[1]);
  }
  if (v171 < 0) {
    operator delete(v170[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v178);
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  if (v177 < 0) {
    operator delete(v176[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v183);
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v182 < 0) {
    operator delete(v181[0]);
  }
  v186[0] = &unk_26C5C3AF0;
  if (v187 < 0) {
    operator delete((void *)v186[1]);
  }
  if (v185 < 0) {
    operator delete(v184[0]);
  }
  v190[0] = &unk_26C5C3AF0;
  if (v191 < 0) {
    operator delete((void *)v190[1]);
  }
  if (v189 < 0) {
    operator delete(v188[0]);
  }
  v194[0] = &unk_26C5C3AF0;
  if (v195 < 0) {
    operator delete((void *)v194[1]);
  }
  if (v193 < 0) {
    operator delete(v192[0]);
  }
  v198[0] = &unk_26C5C3AF0;
  if (v199 < 0) {
    operator delete((void *)v198[1]);
  }
  if (v197 < 0) {
    operator delete(v196[0]);
  }
  v202[0] = &unk_26C5C3AF0;
  if (v203 < 0) {
    operator delete((void *)v202[1]);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  v206[0] = &unk_26C5C3AF0;
  if (v207 < 0) {
    operator delete((void *)v206[1]);
  }
  if (v205 < 0) {
    operator delete(v204[0]);
  }
  v210[0] = &unk_26C5C3AF0;
  if (v211 < 0) {
    operator delete((void *)v210[1]);
  }
  if (v209 < 0) {
    operator delete(v208[0]);
  }
  v214[0] = &unk_26C5C3AF0;
  if (v215 < 0) {
    operator delete((void *)v214[1]);
  }
  if (v213 < 0) {
    operator delete(v212[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v220);
  if (v217 < 0) {
    operator delete(v216[0]);
  }
  if (v219 < 0) {
    operator delete(v218[0]);
  }
  v223[0] = &unk_26C5C3AF0;
  if (v224 < 0) {
    operator delete((void *)v223[1]);
  }
  if (v222 < 0) {
    operator delete(v221[0]);
  }
  v227[0] = &unk_26C5C3AF0;
  if (v228 < 0) {
    operator delete((void *)v227[1]);
  }
  if (v226 < 0) {
    operator delete(v225[0]);
  }
  v231[0] = &unk_26C5C3AF0;
  if (v232 < 0) {
    operator delete((void *)v231[1]);
  }
  if (v230 < 0) {
    operator delete(v229[0]);
  }
  v235[0] = &unk_26C5C3AF0;
  if (v236 < 0) {
    operator delete((void *)v235[1]);
  }
  if (v234 < 0) {
    operator delete(v233[0]);
  }
  v239[0] = &unk_26C5C3AF0;
  if (v240 < 0) {
    operator delete((void *)v239[1]);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  v243[0] = &unk_26C5C3AF0;
  if (v244 < 0) {
    operator delete((void *)v243[1]);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v247);
  if (v246 < 0) {
    operator delete(v245[0]);
  }
  v250[0] = &unk_26C5C3AF0;
  if (v251 < 0) {
    operator delete((void *)v250[1]);
  }
  if (v249 < 0) {
    operator delete(v248[0]);
  }
  v254[0] = &unk_26C5C3AF0;
  if (v255 < 0) {
    operator delete((void *)v254[1]);
  }
  if (v253 < 0) {
    operator delete(v252[0]);
  }
  v258[0] = &unk_26C5C3AF0;
  if (v259 < 0) {
    operator delete((void *)v258[1]);
  }
  if (v257 < 0) {
    operator delete(v256[0]);
  }
  v262[0] = &unk_26C5C3AF0;
  if (v263 < 0) {
    operator delete((void *)v262[1]);
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
  v266[0] = &unk_26C5C3AF0;
  if (v267 < 0) {
    operator delete((void *)v266[1]);
  }
  if (v265 < 0) {
    operator delete(v264[0]);
  }
  v270[0] = &unk_26C5C3AF0;
  if (v271 < 0) {
    operator delete((void *)v270[1]);
  }
  if (v269 < 0) {
    operator delete(v268[0]);
  }
  v274[0] = &unk_26C5C3AF0;
  if (v275 < 0) {
    operator delete((void *)v274[1]);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  v278[0] = &unk_26C5C3AF0;
  if (v279 < 0) {
    operator delete((void *)v278[1]);
  }
  if (v277 < 0) {
    operator delete(v276[0]);
  }
  v282[0] = &unk_26C5C3AF0;
  if (v283 < 0) {
    operator delete((void *)v282[1]);
  }
  if (v281 < 0) {
    operator delete(v280[0]);
  }
  v286[0] = &unk_26C5C3AF0;
  if (v287 < 0) {
    operator delete((void *)v286[1]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  v290[0] = &unk_26C5C3AF0;
  if (v291 < 0) {
    operator delete((void *)v290[1]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  v294[0] = &unk_26C5C3AF0;
  if (v295 < 0) {
    operator delete((void *)v294[1]);
  }
  if (v293 < 0) {
    operator delete(v292[0]);
  }
  v298[0] = &unk_26C5C3AF0;
  if (v299 < 0) {
    operator delete((void *)v298[1]);
  }
  if (v297 < 0) {
    operator delete(v296[0]);
  }
  v302[0] = &unk_26C5C3AF0;
  if (v303 < 0) {
    operator delete((void *)v302[1]);
  }
  if (v301 < 0) {
    operator delete(v300[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v306);
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  v309[0] = &unk_26C5C3AF0;
  if (v310 < 0) {
    operator delete((void *)v309[1]);
  }
  if (v308 < 0) {
    operator delete(v307[0]);
  }
  v313[0] = &unk_26C5C3AF0;
  if (v314 < 0) {
    operator delete((void *)v313[1]);
  }
  if (v312 < 0) {
    operator delete(v311[0]);
  }
  v317[0] = &unk_26C5C3AF0;
  if (v318 < 0) {
    operator delete((void *)v317[1]);
  }
  if (v316 < 0) {
    operator delete(v315[0]);
  }
  v321[0] = &unk_26C5C3AF0;
  if (v322 < 0) {
    operator delete((void *)v321[1]);
  }
  if (v320 < 0) {
    operator delete(v319[0]);
  }
  v325[0] = &unk_26C5C3AF0;
  if (v326 < 0) {
    operator delete((void *)v325[1]);
  }
  if (v324 < 0) {
    operator delete(v323[0]);
  }
  v329[0] = &unk_26C5C3AF0;
  if (v330 < 0) {
    operator delete((void *)v329[1]);
  }
  if (v328 < 0) {
    operator delete(v327[0]);
  }
  v333[0] = &unk_26C5C3AF0;
  if (v334 < 0) {
    operator delete((void *)v333[1]);
  }
  if (v332 < 0) {
    operator delete(v331[0]);
  }
  v337[0] = &unk_26C5C3AF0;
  if (v338 < 0) {
    operator delete((void *)v337[1]);
  }
  if (v336 < 0) {
    operator delete(v335[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v343);
  if (v340 < 0) {
    operator delete(v339[0]);
  }
  if (v342 < 0) {
    operator delete(v341[0]);
  }
  v346[0] = &unk_26C5C3AF0;
  if (v347 < 0) {
    operator delete((void *)v346[1]);
  }
  if (v345 < 0) {
    operator delete(v344[0]);
  }
  v350[0] = &unk_26C5C3AF0;
  if (v351 < 0) {
    operator delete((void *)v350[1]);
  }
  if (v349 < 0) {
    operator delete(v348[0]);
  }
  v354[0] = &unk_26C5C3AF0;
  if (v355 < 0) {
    operator delete((void *)v354[1]);
  }
  if (v353 < 0) {
    operator delete(v352[0]);
  }
  v358[0] = &unk_26C5C3AF0;
  if (v359 < 0) {
    operator delete((void *)v358[1]);
  }
  if (v357 < 0) {
    operator delete(v356[0]);
  }
  v362[0] = &unk_26C5C3AF0;
  if (v363 < 0) {
    operator delete((void *)v362[1]);
  }
  if (v361 < 0) {
    operator delete(v360[0]);
  }
  if (v365 < 0) {
    operator delete(v364[0]);
  }
  *uint64_t v1 = &unk_26C5C51E0;
  return v1;
}

void sub_214DB1DF8(_Unwind_Exception *a1)
{
  STACK[0x2A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  STACK[0x2E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  STACK[0x330] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x400]);
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  STACK[0x458] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  STACK[0x4A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4BF]) < 0) {
    operator delete((void *)STACK[0x4A8]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  STACK[0x4E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  STACK[0x530] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  if (SLOBYTE(STACK[0x52F]) < 0) {
    operator delete((void *)STACK[0x518]);
  }
  STACK[0x578] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5D8]);
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  STACK[0x630] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x64F]) < 0) {
    operator delete((void *)STACK[0x638]);
  }
  if (SLOBYTE(STACK[0x62F]) < 0) {
    operator delete((void *)STACK[0x618]);
  }
  STACK[0x678] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  STACK[0x6C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x6DF]) < 0) {
    operator delete((void *)STACK[0x6C8]);
  }
  if (SLOBYTE(STACK[0x6BF]) < 0) {
    operator delete((void *)STACK[0x6A8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x720]);
  if (SLOBYTE(STACK[0x707]) < 0) {
    operator delete((void *)STACK[0x6F0]);
  }
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x790]);
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  STACK[0x7E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x807]) < 0) {
    operator delete((void *)STACK[0x7F0]);
  }
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x848]);
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  if (SLOBYTE(STACK[0x847]) < 0) {
    operator delete((void *)STACK[0x830]);
  }
  STACK[0x8A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x8BF]) < 0) {
    operator delete((void *)STACK[0x8A8]);
  }
  if (SLOBYTE(STACK[0x89F]) < 0) {
    operator delete((void *)STACK[0x888]);
  }
  STACK[0x8E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete((void *)STACK[0x8F0]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  STACK[0x930] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x94F]) < 0) {
    operator delete((void *)STACK[0x938]);
  }
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x990]);
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA00]);
  if (SLOBYTE(STACK[0x9E7]) < 0) {
    operator delete((void *)STACK[0x9D0]);
  }
  if (SLOBYTE(STACK[0x9FF]) < 0) {
    operator delete((void *)STACK[0x9E8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA70]);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  STACK[0xAC8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xAE7]) < 0) {
    operator delete((void *)STACK[0xAD0]);
  }
  if (SLOBYTE(STACK[0xAC7]) < 0) {
    operator delete((void *)STACK[0xAB0]);
  }
  STACK[0xB10] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB2F]) < 0) {
    operator delete((void *)STACK[0xB18]);
  }
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  STACK[0xB58] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB77]) < 0) {
    operator delete((void *)STACK[0xB60]);
  }
  if (SLOBYTE(STACK[0xB57]) < 0) {
    operator delete((void *)STACK[0xB40]);
  }
  STACK[0xBA0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xBBF]) < 0) {
    operator delete((void *)STACK[0xBA8]);
  }
  if (SLOBYTE(STACK[0xB9F]) < 0) {
    operator delete((void *)STACK[0xB88]);
  }
  STACK[0xBE8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC07]) < 0) {
    operator delete((void *)STACK[0xBF0]);
  }
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  STACK[0xC30] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  if (SLOBYTE(STACK[0xC2F]) < 0) {
    operator delete((void *)STACK[0xC18]);
  }
  STACK[0xC78] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC97]) < 0) {
    operator delete((void *)STACK[0xC80]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  STACK[0xCC0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xCDF]) < 0) {
    operator delete((void *)STACK[0xCC8]);
  }
  if (SLOBYTE(STACK[0xCBF]) < 0) {
    operator delete((void *)STACK[0xCA8]);
  }
  STACK[0xD08] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  if (SLOBYTE(STACK[0xD07]) < 0) {
    operator delete((void *)STACK[0xCF0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xD68]);
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  if (SLOBYTE(STACK[0xD67]) < 0) {
    operator delete((void *)STACK[0xD50]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xDD8]);
  if (SLOBYTE(STACK[0xDBF]) < 0) {
    operator delete((void *)STACK[0xDA8]);
  }
  if (SLOBYTE(STACK[0xDD7]) < 0) {
    operator delete((void *)STACK[0xDC0]);
  }
  STACK[0xE30] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xE4F]) < 0) {
    operator delete((void *)STACK[0xE38]);
  }
  if (SLOBYTE(STACK[0xE2F]) < 0) {
    operator delete((void *)STACK[0xE18]);
  }
  STACK[0xE78] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xE97]) < 0) {
    operator delete((void *)STACK[0xE80]);
  }
  if (SLOBYTE(STACK[0xE77]) < 0) {
    operator delete((void *)STACK[0xE60]);
  }
  STACK[0xEC0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xEDF]) < 0) {
    operator delete((void *)STACK[0xEC8]);
  }
  if (SLOBYTE(STACK[0xEBF]) < 0) {
    operator delete((void *)STACK[0xEA8]);
  }
  STACK[0xF08] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xF27]) < 0) {
    operator delete((void *)STACK[0xF10]);
  }
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  STACK[0xF50] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  if (SLOBYTE(STACK[0xF4F]) < 0) {
    operator delete((void *)STACK[0xF38]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xFB0]);
  if (SLOBYTE(STACK[0xF97]) < 0) {
    operator delete((void *)STACK[0xF80]);
  }
  if (SLOBYTE(STACK[0xFAF]) < 0) {
    operator delete((void *)STACK[0xF98]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1020]);
  if (SLOBYTE(STACK[0x1007]) < 0) {
    operator delete((void *)STACK[0xFF0]);
  }
  if (SLOBYTE(STACK[0x101F]) < 0) {
    operator delete((void *)STACK[0x1008]);
  }
  STACK[0x1078] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x1097]) < 0) {
    operator delete((void *)STACK[0x1080]);
  }
  if (SLOBYTE(STACK[0x1077]) < 0) {
    operator delete((void *)STACK[0x1060]);
  }
  STACK[0x10C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x10DF]) < 0) {
    operator delete((void *)STACK[0x10C8]);
  }
  if (SLOBYTE(STACK[0x10BF]) < 0) {
    operator delete((void *)STACK[0x10A8]);
  }
  STACK[0x1108] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x1127]) < 0) {
    operator delete((void *)STACK[0x1110]);
  }
  if (SLOBYTE(STACK[0x1107]) < 0) {
    operator delete((void *)STACK[0x10F0]);
  }
  STACK[0x1150] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x116F]) < 0) {
    operator delete((void *)STACK[0x1158]);
  }
  if (SLOBYTE(STACK[0x114F]) < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  STACK[0x1198] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x11B7]) < 0) {
    operator delete((void *)STACK[0x11A0]);
  }
  if (SLOBYTE(STACK[0x1197]) < 0) {
    operator delete((void *)STACK[0x1180]);
  }
  STACK[0x11E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x11FF]) < 0) {
    operator delete((void *)STACK[0x11E8]);
  }
  if (SLOBYTE(STACK[0x11DF]) < 0) {
    operator delete((void *)STACK[0x11C8]);
  }
  STACK[0x1228] = (unint64_t)&unk_26C5C3AF0;
  if (v1[55] < 0) {
    operator delete((void *)STACK[0x1230]);
  }
  if (v1[23] < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  STACK[0x1270] = (unint64_t)&unk_26C5C3AF0;
  if (v1[127] < 0) {
    operator delete((void *)STACK[0x1278]);
  }
  if (v1[95] < 0) {
    operator delete((void *)STACK[0x1258]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x12D0]);
  if (v1[167] < 0) {
    operator delete((void *)STACK[0x12A0]);
  }
  if (v1[191] < 0) {
    operator delete((void *)STACK[0x12B8]);
  }
  STACK[0x1328] = (unint64_t)&unk_26C5C3AF0;
  if (v1[311] < 0) {
    operator delete((void *)STACK[0x1330]);
  }
  if (v1[279] < 0) {
    operator delete((void *)STACK[0x1310]);
  }
  STACK[0x1370] = (unint64_t)&unk_26C5C3AF0;
  if (v1[383] < 0) {
    operator delete((void *)STACK[0x1378]);
  }
  if (v1[351] < 0) {
    operator delete((void *)STACK[0x1358]);
  }
  STACK[0x13B8] = (unint64_t)&unk_26C5C3AF0;
  if (v1[455] < 0) {
    operator delete((void *)STACK[0x13C0]);
  }
  if (v1[423] < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  STACK[0x1400] = (unint64_t)&unk_26C5C3AF0;
  if (v1[527] < 0) {
    operator delete((void *)STACK[0x1408]);
  }
  if (v1[495] < 0) {
    operator delete((void *)STACK[0x13E8]);
  }
  STACK[0x1448] = (unint64_t)&unk_26C5C3AF0;
  if (v1[599] < 0) {
    operator delete((void *)STACK[0x1450]);
  }
  if (v1[567] < 0) {
    operator delete((void *)STACK[0x1430]);
  }
  STACK[0x1490] = (unint64_t)&unk_26C5C3AF0;
  if (v1[671] < 0) {
    operator delete((void *)STACK[0x1498]);
  }
  if (v1[639] < 0) {
    operator delete((void *)STACK[0x1478]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x14D8]);
  if (v1[711] < 0) {
    operator delete((void *)STACK[0x14C0]);
  }
  STACK[0x1540] = (unint64_t)&unk_26C5C3AF0;
  if (v1[847] < 0) {
    operator delete((void *)STACK[0x1548]);
  }
  if (v1[815] < 0) {
    operator delete((void *)STACK[0x1528]);
  }
  STACK[0x1588] = (unint64_t)&unk_26C5C3AF0;
  if (v1[919] < 0) {
    operator delete((void *)STACK[0x1590]);
  }
  if (v1[887] < 0) {
    operator delete((void *)STACK[0x1570]);
  }
  STACK[0x15D0] = (unint64_t)&unk_26C5C3AF0;
  if (v1[991] < 0) {
    operator delete((void *)STACK[0x15D8]);
  }
  if (v1[959] < 0) {
    operator delete((void *)STACK[0x15B8]);
  }
  STACK[0x1618] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1063] < 0) {
    operator delete((void *)STACK[0x1620]);
  }
  if (v1[1031] < 0) {
    operator delete((void *)STACK[0x1600]);
  }
  STACK[0x1660] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1135] < 0) {
    operator delete((void *)STACK[0x1668]);
  }
  if (v1[1103] < 0) {
    operator delete((void *)STACK[0x1648]);
  }
  STACK[0x16A8] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1207] < 0) {
    operator delete((void *)STACK[0x16B0]);
  }
  if (v1[1175] < 0) {
    operator delete((void *)STACK[0x1690]);
  }
  STACK[0x16F0] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1279] < 0) {
    operator delete((void *)STACK[0x16F8]);
  }
  if (v1[1247] < 0) {
    operator delete((void *)STACK[0x16D8]);
  }
  STACK[0x1738] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1351] < 0) {
    operator delete((void *)STACK[0x1740]);
  }
  if (v1[1319] < 0) {
    operator delete((void *)STACK[0x1720]);
  }
  STACK[0x1780] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1423] < 0) {
    operator delete((void *)STACK[0x1788]);
  }
  if (v1[1391] < 0) {
    operator delete((void *)STACK[0x1768]);
  }
  STACK[0x17C8] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1495] < 0) {
    operator delete((void *)STACK[0x17D0]);
  }
  if (v1[1463] < 0) {
    operator delete((void *)STACK[0x17B0]);
  }
  STACK[0x1810] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1567] < 0) {
    operator delete((void *)STACK[0x1818]);
  }
  if (v1[1535] < 0) {
    operator delete((void *)STACK[0x17F8]);
  }
  STACK[0x1858] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1639] < 0) {
    operator delete((void *)STACK[0x1860]);
  }
  if (v1[1607] < 0) {
    operator delete((void *)STACK[0x1840]);
  }
  STACK[0x18A0] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1711] < 0) {
    operator delete((void *)STACK[0x18A8]);
  }
  if (v1[1679] < 0) {
    operator delete((void *)STACK[0x1888]);
  }
  STACK[0x18E8] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1783] < 0) {
    operator delete((void *)STACK[0x18F0]);
  }
  if (v1[1751] < 0) {
    operator delete((void *)STACK[0x18D0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1930]);
  if (v1[1823] < 0) {
    operator delete((void *)STACK[0x1918]);
  }
  STACK[0x1988] = (unint64_t)&unk_26C5C3AF0;
  if (v1[1943] < 0) {
    operator delete((void *)STACK[0x1990]);
  }
  if (v1[1911] < 0) {
    operator delete((void *)STACK[0x1970]);
  }
  STACK[0x19D0] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2015] < 0) {
    operator delete((void *)STACK[0x19D8]);
  }
  if (v1[1983] < 0) {
    operator delete((void *)STACK[0x19B8]);
  }
  STACK[0x1A18] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2087] < 0) {
    operator delete((void *)STACK[0x1A20]);
  }
  if (v1[2055] < 0) {
    operator delete((void *)STACK[0x1A00]);
  }
  STACK[0x1A60] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2159] < 0) {
    operator delete((void *)STACK[0x1A68]);
  }
  if (v1[2127] < 0) {
    operator delete((void *)STACK[0x1A48]);
  }
  STACK[0x1AA8] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2231] < 0) {
    operator delete((void *)STACK[0x1AB0]);
  }
  if (v1[2199] < 0) {
    operator delete((void *)STACK[0x1A90]);
  }
  STACK[0x1AF0] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2303] < 0) {
    operator delete((void *)STACK[0x1AF8]);
  }
  if (v1[2271] < 0) {
    operator delete((void *)STACK[0x1AD8]);
  }
  STACK[0x1B38] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2375] < 0) {
    operator delete((void *)STACK[0x1B40]);
  }
  if (v1[2343] < 0) {
    operator delete((void *)STACK[0x1B20]);
  }
  STACK[0x1B80] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2447] < 0) {
    operator delete((void *)STACK[0x1B88]);
  }
  if (v1[2415] < 0) {
    operator delete((void *)STACK[0x1B68]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1BE0]);
  if (v1[2487] < 0) {
    operator delete((void *)STACK[0x1BB0]);
  }
  if (v1[2511] < 0) {
    operator delete((void *)STACK[0x1BC8]);
  }
  STACK[0x1C38] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2631] < 0) {
    operator delete((void *)STACK[0x1C40]);
  }
  if (v1[2599] < 0) {
    operator delete((void *)STACK[0x1C20]);
  }
  STACK[0x1C80] = (unint64_t)&unk_26C5C3AF0;
  if (v1[2703] < 0) {
    operator delete((void *)STACK[0x1C88]);
  }
  if (v1[2671] < 0) {
    operator delete((void *)STACK[0x1C68]);
  }
  *(void *)(v2 - 248) = &unk_26C5C3AF0;
  if (v1[2775] < 0) {
    operator delete(*(void **)(v2 - 240));
  }
  if (v1[2743] < 0) {
    operator delete((void *)STACK[0x1CB0]);
  }
  *(void *)(v2 - 176) = &unk_26C5C3AF0;
  if (v1[2847] < 0) {
    operator delete(*(void **)(v2 - 168));
  }
  if (v1[2815] < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  *(void *)(v2 - 104) = &unk_26C5C3AF0;
  if (v1[2919] < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  if (v1[2887] < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  if (v1[2959] < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_214DB3340()
{
}

void sub_214DB3348()
{
}

void sub_214DB3350()
{
}

void sub_214DB3358()
{
}

void sub_214DB3360()
{
}

void sub_214DB3368()
{
}

void sub_214DB3370()
{
}

void sub_214DB3378()
{
}

void sub_214DB3380()
{
}

void sub_214DB3388()
{
}

void sub_214DB3390()
{
}

void sub_214DB3398()
{
}

void sub_214DB33A0()
{
}

void sub_214DB33A8()
{
}

void sub_214DB33B0()
{
}

void sub_214DB33B8()
{
}

void sub_214DB33C0()
{
}

void sub_214DB33C8()
{
}

void sub_214DB33D0()
{
}

void sub_214DB33D8()
{
}

void sub_214DB33E0()
{
}

void sub_214DB33E8()
{
}

void sub_214DB33F0()
{
}

void sub_214DB33F8()
{
}

void sub_214DB3400()
{
}

void sub_214DB3408()
{
}

void sub_214DB3410()
{
}

void sub_214DB3418()
{
}

void sub_214DB3420()
{
}

void sub_214DB3428()
{
}

void sub_214DB3430()
{
}

void sub_214DB3438()
{
}

void sub_214DB3440()
{
}

void sub_214DB3448()
{
}

void sub_214DB3450()
{
}

void sub_214DB3458()
{
}

void sub_214DB3460()
{
}

void sub_214DB3468()
{
}

void sub_214DB3470()
{
}

void sub_214DB3478()
{
}

void sub_214DB3480()
{
}

void sub_214DB3488()
{
}

void sub_214DB3490()
{
}

void sub_214DB3498()
{
}

void sub_214DB34A0()
{
}

void sub_214DB34A8()
{
}

void sub_214DB34B0()
{
}

void sub_214DB34B8()
{
}

void sub_214DB34C0()
{
}

void sub_214DB34C8()
{
}

void sub_214DB34D0()
{
}

void sub_214DB34D8()
{
}

void sub_214DB34E0()
{
}

void sub_214DB34E8()
{
}

void sub_214DB34F0()
{
}

void sub_214DB34F8()
{
}

void sub_214DB3500()
{
}

void sub_214DB3508()
{
}

void sub_214DB3510()
{
}

void sub_214DB3518()
{
}

void sub_214DB3520()
{
}

void sub_214DB3528()
{
}

void sub_214DB3530()
{
}

void sub_214DB3538()
{
}

void sub_214DB3540()
{
}

void sub_214DB3548()
{
}

void sub_214DB3550()
{
}

void sub_214DB3558()
{
}

void sub_214DB3560()
{
}

void sub_214DB3568()
{
}

void sub_214DB3570()
{
}

void sub_214DB3578()
{
}

void sub_214DB3580()
{
}

void sub_214DB3588()
{
}

void sub_214DB3590()
{
}

void sub_214DB3598()
{
}

void sub_214DB35A0()
{
}

void sub_214DB35A8()
{
}

void sub_214DB35B0()
{
}

void sub_214DB35B8()
{
}

void sub_214DB35C0()
{
}

void sub_214DB35C8()
{
}

void sub_214DB35D0()
{
}

void sub_214DB35D8()
{
}

void sub_214DB35E0()
{
}

void sub_214DB35E8()
{
}

void sub_214DB35F0()
{
}

void sub_214DB35F8()
{
}

void sub_214DB3600()
{
}

void sub_214DB3608()
{
}

void sub_214DB3610()
{
}

void sub_214DB3618()
{
}

void sub_214DB3620()
{
}

void sub_214DB3628()
{
}

void sub_214DB3630()
{
}

void sub_214DB3638()
{
}

void sub_214DB3640()
{
}

void sub_214DB3648()
{
}

void sub_214DB3650()
{
}

void sub_214DB3658()
{
}

void sub_214DB3660()
{
}

void sub_214DB3668()
{
}

void sub_214DB3670()
{
}

void sub_214DB3678()
{
}

void sub_214DB3680()
{
}

void sub_214DB3688()
{
}

void sub_214DB3690()
{
}

void sub_214DB3698()
{
}

void sub_214DB36A0()
{
}

void sub_214DB36A8()
{
}

void sub_214DB36B0()
{
}

void sub_214DB36B8()
{
}

void sub_214DB36C0()
{
}

void sub_214DB36C8()
{
}

void sub_214DB36D0()
{
}

void sub_214DB36D8()
{
}

void sub_214DB36E0()
{
}

void sub_214DB36E8()
{
}

void sub_214DB36F0()
{
}

void sub_214DB36F8()
{
}

void sub_214DB3700()
{
}

void sub_214DB3708()
{
}

void sub_214DB3710()
{
}

void sub_214DB3718()
{
}

void sub_214DB3720()
{
}

void sub_214DB3728()
{
}

void sub_214DB3730()
{
}

void sub_214DB3738()
{
}

void sub_214DB3740()
{
}

void sub_214DB3748()
{
}

void sub_214DB3750()
{
}

void sub_214DB3758()
{
}

void sub_214DB3760()
{
}

void sub_214DB3768()
{
}

void sub_214DB3770()
{
}

void sub_214DB3778()
{
}

void sub_214DB3780()
{
}

void sub_214DB3788()
{
}

void sub_214DB3790()
{
}

void sub_214DB3798()
{
}

void sub_214DB37A0()
{
}

void sub_214DB37A8()
{
}

void sub_214DB37B0()
{
}

void sub_214DB37B8()
{
}

void sub_214DB37C0()
{
}

void sub_214DB37C8()
{
}

void sub_214DB37D0()
{
}

void sub_214DB37D8()
{
}

void sub_214DB37E0()
{
}

void sub_214DB37E8()
{
}

void sub_214DB37F0()
{
}

void sub_214DB37F8()
{
}

void sub_214DB3800()
{
}

void sub_214DB3808()
{
}

void sub_214DB3810()
{
}

void sub_214DB3818()
{
}

void sub_214DB3820()
{
}

void sub_214DB3828()
{
}

void sub_214DB3830()
{
}

void sub_214DB3838()
{
}

void sub_214DB3840()
{
}

void sub_214DB3848()
{
}

void sub_214DB3850()
{
}

void sub_214DB3858()
{
}

void sub_214DB3860()
{
}

void sub_214DB3868()
{
}

void sub_214DB3870()
{
}

void sub_214DB3878()
{
}

void sub_214DB3880()
{
}

void sub_214DB3888()
{
}

void sub_214DB3890()
{
}

void sub_214DB3898()
{
}

void sub_214DB38A0()
{
}

void sub_214DB38A8()
{
}

void sub_214DB38B0()
{
}

void sub_214DB38B8()
{
}

void sub_214DB38C0()
{
}

void sub_214DB38C8()
{
}

void sub_214DB38D0()
{
}

void sub_214DB38D8()
{
}

void sub_214DB38E0()
{
}

void *mlcore::InPredicate<std::string>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C45B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

void *mlcore::MediaTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = MEMORY[0x270FA5388](a1);
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v79 = v78;
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  char v86 = (void *)v72;
  if (*(char *)(v73 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v569, *(const std::string::value_type **)v73, *(void *)(v73 + 8));
  }
  else {
    std::string v569 = *(std::string *)v73;
  }
  v564 = &unk_26C5C3AF0;
  if (*(char *)(v85 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v565, *(const std::string::value_type **)(v85 + 8), *(void *)(v85 + 16));
  }
  else {
    std::string v565 = *(std::string *)(v85 + 8);
  }
  int v566 = *(_DWORD *)(v85 + 32);
  v564 = &unk_26C5C3878;
  uint64_t v567 = *(void *)(v85 + 36);
  int v568 = *(_DWORD *)(v85 + 44);
  v560 = &unk_26C5C3AF0;
  if (*(char *)(v83 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v561, *(const std::string::value_type **)(v83 + 8), *(void *)(v83 + 16));
  }
  else {
    std::string v561 = *(std::string *)(v83 + 8);
  }
  int v562 = *(_DWORD *)(v83 + 32);
  v560 = &unk_26C5C3858;
  uint64_t v183 = v83;
  uint64_t v563 = *(void *)(v83 + 36);
  v555 = &unk_26C5C3AF0;
  uint64_t v182 = v85;
  if (*(char *)(v81 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v556, *(const std::string::value_type **)(v81 + 8), *(void *)(v81 + 16));
  }
  else {
    std::string v556 = *(std::string *)(v81 + 8);
  }
  int v557 = *(_DWORD *)(v81 + 32);
  v555 = &unk_26C5C3878;
  uint64_t v558 = *(void *)(v81 + 36);
  int v559 = *(_DWORD *)(v81 + 44);
  v550 = &unk_26C5C3AF0;
  if (*(char *)(v79 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v551, *(const std::string::value_type **)(v79 + 8), *(void *)(v79 + 16));
  }
  else {
    std::string v551 = *(std::string *)(v79 + 8);
  }
  int v552 = *(_DWORD *)(v79 + 32);
  v550 = &unk_26C5C3878;
  uint64_t v553 = *(void *)(v79 + 36);
  uint64_t v181 = v79;
  int v554 = *(_DWORD *)(v79 + 44);
  v545 = &unk_26C5C3AF0;
  if (*(char *)(v77 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v546, *(const std::string::value_type **)(v77 + 8), *(void *)(v77 + 16));
  }
  else {
    std::string v546 = *(std::string *)(v77 + 8);
  }
  int v547 = *(_DWORD *)(v77 + 32);
  v545 = &unk_26C5C3878;
  uint64_t v548 = *(void *)(v77 + 36);
  int v549 = *(_DWORD *)(v77 + 44);
  v540 = &unk_26C5C3AF0;
  if (*(char *)(v75 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v541, *(const std::string::value_type **)(v75 + 8), *(void *)(v75 + 16));
  }
  else {
    std::string v541 = *(std::string *)(v75 + 8);
  }
  int v542 = *(_DWORD *)(v75 + 32);
  v540 = &unk_26C5C3818;
  char v543 = *(unsigned char *)(v75 + 36);
  uint64_t v180 = v77;
  if (*(char *)(v75 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v544, *(const std::string::value_type **)(v75 + 40), *(void *)(v75 + 48));
  }
  else {
    std::string v544 = *(std::string *)(v75 + 40);
  }
  v535 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v536, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v536 = *(std::string *)(a9 + 8);
  }
  int v537 = *(_DWORD *)(a9 + 32);
  v535 = &unk_26C5C3878;
  uint64_t v538 = *(void *)(a9 + 36);
  int v539 = *(_DWORD *)(a9 + 44);
  v531 = &unk_26C5C3AF0;
  uint64_t v179 = v75;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v532, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v532 = *(std::string *)(a10 + 8);
  }
  int v533 = *(_DWORD *)(a10 + 32);
  v531 = &unk_26C5C3858;
  uint64_t v534 = *(void *)(a10 + 36);
  v527 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v528, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v528 = *(std::string *)(a11 + 8);
  }
  uint64_t v87 = a12;
  int v529 = *(_DWORD *)(a11 + 32);
  v527 = &unk_26C5C3858;
  uint64_t v530 = *(void *)(a11 + 36);
  v522 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v523, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
    uint64_t v87 = a12;
  }
  else
  {
    std::string v523 = *(std::string *)(a12 + 8);
  }
  int v524 = *(_DWORD *)(v87 + 32);
  v522 = &unk_26C5C3878;
  uint64_t v525 = *(void *)(v87 + 36);
  uint64_t v178 = v87;
  int v526 = *(_DWORD *)(v87 + 44);
  v518 = &unk_26C5C3AF0;
  uint64_t v88 = a13;
  if (*(char *)(a13 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v519, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
    uint64_t v88 = a13;
  }
  else
  {
    std::string v519 = *(std::string *)(a13 + 8);
  }
  int v520 = *(_DWORD *)(v88 + 32);
  v518 = &unk_26C5C3858;
  uint64_t v177 = v88;
  uint64_t v521 = *(void *)(v88 + 36);
  v514 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v515, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v515 = *(std::string *)(a14 + 8);
  }
  uint64_t v89 = a15;
  int v516 = *(_DWORD *)(a14 + 32);
  v514 = &unk_26C5C3858;
  uint64_t v517 = *(void *)(a14 + 36);
  v510 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v511, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
    uint64_t v89 = a15;
  }
  else
  {
    std::string v511 = *(std::string *)(a15 + 8);
  }
  int v512 = *(_DWORD *)(v89 + 32);
  v510 = &unk_26C5C3858;
  uint64_t v90 = *(void *)(v89 + 36);
  uint64_t v91 = a16;
  uint64_t v513 = v90;
  v506 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v507, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
    uint64_t v91 = a16;
  }
  else
  {
    std::string v507 = *(std::string *)(a16 + 8);
  }
  int v508 = *(_DWORD *)(v91 + 32);
  v506 = &unk_26C5C3858;
  uint64_t v176 = v91;
  uint64_t v509 = *(void *)(v91 + 36);
  v501 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v502, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v502 = *(std::string *)(a17 + 8);
  }
  int v503 = *(_DWORD *)(a17 + 32);
  v501 = &unk_26C5C3818;
  char v504 = *(unsigned char *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v505, *(const std::string::value_type **)(a17 + 40), *(void *)(a17 + 48));
  }
  else {
    std::string v505 = *(std::string *)(a17 + 40);
  }
  v497 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v498, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v498 = *(std::string *)(a18 + 8);
  }
  int v499 = *(_DWORD *)(a18 + 32);
  v497 = &unk_26C5C3858;
  uint64_t v500 = *(void *)(a18 + 36);
  v493 = &unk_26C5C3AF0;
  uint64_t v92 = a19;
  if (*(char *)(a19 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v494, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
    uint64_t v92 = a19;
  }
  else
  {
    std::string v494 = *(std::string *)(a19 + 8);
  }
  int v495 = *(_DWORD *)(v92 + 32);
  v493 = &unk_26C5C3858;
  uint64_t v175 = v92;
  uint64_t v496 = *(void *)(v92 + 36);
  v489 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v490, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v490 = *(std::string *)(a20 + 8);
  }
  uint64_t v93 = a21;
  int v491 = *(_DWORD *)(a20 + 32);
  v489 = &unk_26C5C3858;
  uint64_t v492 = *(void *)(a20 + 36);
  v485 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v486, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
    uint64_t v93 = a21;
  }
  else
  {
    std::string v486 = *(std::string *)(a21 + 8);
  }
  int v487 = *(_DWORD *)(v93 + 32);
  v485 = &unk_26C5C3858;
  uint64_t v174 = v93;
  uint64_t v488 = *(void *)(v93 + 36);
  v481 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v482, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v482 = *(std::string *)(a22 + 8);
  }
  uint64_t v94 = a23;
  int v483 = *(_DWORD *)(a22 + 32);
  v481 = &unk_26C5C3858;
  uint64_t v484 = *(void *)(a22 + 36);
  v477 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v478, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
    uint64_t v94 = a23;
  }
  else
  {
    std::string v478 = *(std::string *)(a23 + 8);
  }
  int v479 = *(_DWORD *)(v94 + 32);
  v477 = &unk_26C5C3858;
  uint64_t v173 = v94;
  uint64_t v480 = *(void *)(v94 + 36);
  v473 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v474, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else {
    std::string v474 = *(std::string *)(a24 + 8);
  }
  uint64_t v95 = a25;
  int v475 = *(_DWORD *)(a24 + 32);
  v473 = &unk_26C5C3858;
  uint64_t v476 = *(void *)(a24 + 36);
  v469 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v470, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
    uint64_t v95 = a25;
  }
  else
  {
    std::string v470 = *(std::string *)(a25 + 8);
  }
  int v471 = *(_DWORD *)(v95 + 32);
  v469 = &unk_26C5C3858;
  uint64_t v172 = v95;
  uint64_t v472 = *(void *)(v95 + 36);
  v465 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v466, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
  }
  else {
    std::string v466 = *(std::string *)(a26 + 8);
  }
  uint64_t v96 = a27;
  int v467 = *(_DWORD *)(a26 + 32);
  v465 = &unk_26C5C3858;
  uint64_t v468 = *(void *)(a26 + 36);
  v461 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v462, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
    uint64_t v96 = a27;
  }
  else
  {
    std::string v462 = *(std::string *)(a27 + 8);
  }
  int v463 = *(_DWORD *)(v96 + 32);
  v461 = &unk_26C5C3858;
  uint64_t v171 = v96;
  uint64_t v464 = *(void *)(v96 + 36);
  v457 = &unk_26C5C3AF0;
  uint64_t v97 = a28;
  if (*(char *)(a28 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v458, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
    uint64_t v97 = a28;
  }
  else
  {
    std::string v458 = *(std::string *)(a28 + 8);
  }
  int v459 = *(_DWORD *)(v97 + 32);
  v457 = &unk_26C5C3858;
  uint64_t v170 = v97;
  uint64_t v460 = *(void *)(v97 + 36);
  v453 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v454, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else {
    std::string v454 = *(std::string *)(a29 + 8);
  }
  uint64_t v98 = a30;
  int v455 = *(_DWORD *)(a29 + 32);
  v453 = &unk_26C5C3858;
  uint64_t v456 = *(void *)(a29 + 36);
  v448 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v449, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
    uint64_t v98 = a30;
  }
  else
  {
    std::string v449 = *(std::string *)(a30 + 8);
  }
  uint64_t v99 = a31;
  int v450 = *(_DWORD *)(v98 + 32);
  v448 = &unk_26C5C3878;
  uint64_t v451 = *(void *)(v98 + 36);
  int v452 = *(_DWORD *)(v98 + 44);
  v444 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v445, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
    uint64_t v99 = a31;
  }
  else
  {
    std::string v445 = *(std::string *)(a31 + 8);
  }
  int v446 = *(_DWORD *)(v99 + 32);
  v444 = &unk_26C5C3858;
  uint64_t v169 = v99;
  uint64_t v447 = *(void *)(v99 + 36);
  v439 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v440, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
  }
  else {
    std::string v440 = *(std::string *)(a32 + 8);
  }
  int v441 = *(_DWORD *)(a32 + 32);
  v439 = &unk_26C5C37F8;
  char v442 = *(unsigned char *)(a32 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v443, *(const void **)(a32 + 64), *(void *)(a32 + 48), 1);
  v435 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v436 = *(std::string *)(a33 + 8);
  }
  int v437 = *(_DWORD *)(a33 + 32);
  v435 = &unk_26C5C3858;
  uint64_t v438 = *(void *)(a33 + 36);
  v431 = &unk_26C5C3AF0;
  uint64_t v100 = a34;
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
    uint64_t v100 = a34;
  }
  else
  {
    std::string v432 = *(std::string *)(a34 + 8);
  }
  uint64_t v101 = a35;
  int v433 = *(_DWORD *)(v100 + 32);
  v431 = &unk_26C5C3858;
  uint64_t v168 = v100;
  uint64_t v434 = *(void *)(v100 + 36);
  v427 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else {
    std::string v428 = *(std::string *)(a35 + 8);
  }
  uint64_t v102 = a36;
  int v429 = *(_DWORD *)(a35 + 32);
  v427 = &unk_26C5C3858;
  uint64_t v430 = *(void *)(a35 + 36);
  uint64_t v423 = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v424, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
    uint64_t v102 = a36;
  }
  else
  {
    std::string v424 = *(std::string *)(a36 + 8);
  }
  int v425 = *(_DWORD *)(v102 + 32);
  uint64_t v423 = &unk_26C5C3858;
  uint64_t v426 = *(void *)(v102 + 36);
  uint64_t v419 = &unk_26C5C3AF0;
  if (*(char *)(a37 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else {
    std::string v420 = *(std::string *)(a37 + 8);
  }
  uint64_t v103 = a38;
  int v421 = *(_DWORD *)(a37 + 32);
  uint64_t v419 = &unk_26C5C3858;
  uint64_t v422 = *(void *)(a37 + 36);
  int v415 = &unk_26C5C3AF0;
  if (*(char *)(a38 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v416, *(const std::string::value_type **)(a38 + 8), *(void *)(a38 + 16));
    uint64_t v103 = a38;
  }
  else
  {
    std::string v416 = *(std::string *)(a38 + 8);
  }
  int v417 = *(_DWORD *)(v103 + 32);
  int v415 = &unk_26C5C3858;
  uint64_t v167 = v103;
  uint64_t v418 = *(void *)(v103 + 36);
  uint64_t v410 = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v411, *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
  }
  else {
    std::string v411 = *(std::string *)(a39 + 8);
  }
  int v412 = *(_DWORD *)(a39 + 32);
  uint64_t v410 = &unk_26C5C3818;
  char v413 = *(unsigned char *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v414, *(const std::string::value_type **)(a39 + 40), *(void *)(a39 + 48));
  }
  else {
    std::string v414 = *(std::string *)(a39 + 40);
  }
  int v406 = &unk_26C5C3AF0;
  if (*(char *)(a40 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v407, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
  }
  else {
    std::string v407 = *(std::string *)(a40 + 8);
  }
  int v408 = *(_DWORD *)(a40 + 32);
  int v406 = &unk_26C5C3858;
  uint64_t v409 = *(void *)(a40 + 36);
  v402 = &unk_26C5C3AF0;
  if (*(char *)(a41 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v403, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
  }
  else {
    std::string v403 = *(std::string *)(a41 + 8);
  }
  uint64_t v104 = a42;
  int v404 = *(_DWORD *)(a41 + 32);
  v402 = &unk_26C5C3858;
  uint64_t v405 = *(void *)(a41 + 36);
  std::string v398 = &unk_26C5C3AF0;
  if (*(char *)(a42 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v399, *(const std::string::value_type **)(a42 + 8), *(void *)(a42 + 16));
    uint64_t v104 = a42;
  }
  else
  {
    std::string v399 = *(std::string *)(a42 + 8);
  }
  int v400 = *(_DWORD *)(v104 + 32);
  std::string v398 = &unk_26C5C3858;
  uint64_t v166 = v104;
  uint64_t v401 = *(void *)(v104 + 36);
  std::string v394 = &unk_26C5C3AF0;
  if (*(char *)(a43 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v395, *(const std::string::value_type **)(a43 + 8), *(void *)(a43 + 16));
  }
  else {
    std::string v395 = *(std::string *)(a43 + 8);
  }
  uint64_t v105 = a44;
  int v396 = *(_DWORD *)(a43 + 32);
  std::string v394 = &unk_26C5C3858;
  uint64_t v397 = *(void *)(a43 + 36);
  int v390 = &unk_26C5C3AF0;
  if (*(char *)(a44 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v391, *(const std::string::value_type **)(a44 + 8), *(void *)(a44 + 16));
    uint64_t v105 = a44;
  }
  else
  {
    std::string v391 = *(std::string *)(a44 + 8);
  }
  int v392 = *(_DWORD *)(v105 + 32);
  int v390 = &unk_26C5C3858;
  uint64_t v165 = v105;
  uint64_t v393 = *(void *)(v105 + 36);
  std::string v385 = &unk_26C5C3AF0;
  if (*(char *)(a45 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v386, *(const std::string::value_type **)(a45 + 8), *(void *)(a45 + 16));
  }
  else {
    std::string v386 = *(std::string *)(a45 + 8);
  }
  uint64_t v106 = a46;
  int v387 = *(_DWORD *)(a45 + 32);
  std::string v385 = &unk_26C5C3878;
  uint64_t v388 = *(void *)(a45 + 36);
  int v389 = *(_DWORD *)(a45 + 44);
  std::string v380 = &unk_26C5C3AF0;
  if (*(char *)(a46 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v381, *(const std::string::value_type **)(a46 + 8), *(void *)(a46 + 16));
    uint64_t v106 = a46;
  }
  else
  {
    std::string v381 = *(std::string *)(a46 + 8);
  }
  int v382 = *(_DWORD *)(v106 + 32);
  std::string v380 = &unk_26C5C3878;
  uint64_t v383 = *(void *)(v106 + 36);
  int v107 = *(_DWORD *)(v106 + 44);
  uint64_t v108 = a47;
  int v384 = v107;
  int v376 = &unk_26C5C3AF0;
  if (*(char *)(a47 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v377, *(const std::string::value_type **)(a47 + 8), *(void *)(a47 + 16));
    uint64_t v108 = a47;
  }
  else
  {
    std::string v377 = *(std::string *)(a47 + 8);
  }
  int v378 = *(_DWORD *)(v108 + 32);
  int v376 = &unk_26C5C3858;
  uint64_t v164 = v108;
  uint64_t v379 = *(void *)(v108 + 36);
  std::string v371 = &unk_26C5C3AF0;
  if (*(char *)(a48 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)(a48 + 8), *(void *)(a48 + 16));
  }
  else {
    std::string v372 = *(std::string *)(a48 + 8);
  }
  int v373 = *(_DWORD *)(a48 + 32);
  std::string v371 = &unk_26C5C3818;
  char v374 = *(unsigned char *)(a48 + 36);
  if (*(char *)(a48 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(a48 + 40), *(void *)(a48 + 48));
  }
  else {
    std::string v375 = *(std::string *)(a48 + 40);
  }
  uint64_t v109 = a49;
  std::string v366 = &unk_26C5C3AF0;
  if (*(char *)(a49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)(a49 + 8), *(void *)(a49 + 16));
    uint64_t v109 = a49;
  }
  else
  {
    std::string v367 = *(std::string *)(a49 + 8);
  }
  int v368 = *(_DWORD *)(v109 + 32);
  std::string v366 = &unk_26C5C3818;
  char v369 = *(unsigned char *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v370, *(const std::string::value_type **)(a49 + 40), *(void *)(a49 + 48));
  }
  else {
    std::string v370 = *(std::string *)(a49 + 40);
  }
  int v362 = &unk_26C5C3AF0;
  if (*(char *)(a50 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v363, *(const std::string::value_type **)(a50 + 8), *(void *)(a50 + 16));
  }
  else {
    std::string v363 = *(std::string *)(a50 + 8);
  }
  int v364 = *(_DWORD *)(a50 + 32);
  int v362 = &unk_26C5C3858;
  uint64_t v365 = *(void *)(a50 + 36);
  int v358 = &unk_26C5C3AF0;
  uint64_t v110 = a51;
  if (*(char *)(a51 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)(a51 + 8), *(void *)(a51 + 16));
    uint64_t v110 = a51;
  }
  else
  {
    std::string v359 = *(std::string *)(a51 + 8);
  }
  int v360 = *(_DWORD *)(v110 + 32);
  int v358 = &unk_26C5C3858;
  uint64_t v163 = v110;
  uint64_t v361 = *(void *)(v110 + 36);
  uint64_t v354 = &unk_26C5C3AF0;
  if (*(char *)(a52 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(a52 + 8), *(void *)(a52 + 16));
  }
  else {
    std::string v355 = *(std::string *)(a52 + 8);
  }
  uint64_t v111 = a53;
  int v356 = *(_DWORD *)(a52 + 32);
  uint64_t v354 = &unk_26C5C3858;
  uint64_t v357 = *(void *)(a52 + 36);
  int v350 = &unk_26C5C3AF0;
  if (*(char *)(a53 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v351, *(const std::string::value_type **)(a53 + 8), *(void *)(a53 + 16));
    uint64_t v111 = a53;
  }
  else
  {
    std::string v351 = *(std::string *)(a53 + 8);
  }
  int v352 = *(_DWORD *)(v111 + 32);
  int v350 = &unk_26C5C3858;
  uint64_t v112 = *(void *)(v111 + 36);
  uint64_t v113 = a54;
  uint64_t v353 = v112;
  char v345 = &unk_26C5C3AF0;
  if (*(char *)(a54 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(a54 + 8), *(void *)(a54 + 16));
    uint64_t v113 = a54;
  }
  else
  {
    std::string v346 = *(std::string *)(a54 + 8);
  }
  int v347 = *(_DWORD *)(v113 + 32);
  char v345 = &unk_26C5C3878;
  uint64_t v348 = *(void *)(v113 + 36);
  uint64_t v162 = v113;
  int v349 = *(_DWORD *)(v113 + 44);
  char v340 = &unk_26C5C3AF0;
  if (*(char *)(a55 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(a55 + 8), *(void *)(a55 + 16));
  }
  else {
    std::string v341 = *(std::string *)(a55 + 8);
  }
  int v342 = *(_DWORD *)(a55 + 32);
  char v340 = &unk_26C5C3818;
  char v343 = *(unsigned char *)(a55 + 36);
  if (*(char *)(a55 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(a55 + 40), *(void *)(a55 + 48));
  }
  else {
    std::string v344 = *(std::string *)(a55 + 40);
  }
  uint64_t v114 = a56;
  uint64_t v335 = &unk_26C5C3AF0;
  if (*(char *)(a56 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v336, *(const std::string::value_type **)(a56 + 8), *(void *)(a56 + 16));
    uint64_t v114 = a56;
  }
  else
  {
    std::string v336 = *(std::string *)(a56 + 8);
  }
  int v337 = *(_DWORD *)(v114 + 32);
  uint64_t v335 = &unk_26C5C3818;
  char v338 = *(unsigned char *)(a56 + 36);
  if (*(char *)(a56 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(a56 + 40), *(void *)(a56 + 48));
  }
  else {
    std::string v339 = *(std::string *)(a56 + 40);
  }
  char v330 = &unk_26C5C3AF0;
  if (*(char *)(a57 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(a57 + 8), *(void *)(a57 + 16));
  }
  else {
    std::string v331 = *(std::string *)(a57 + 8);
  }
  int v332 = *(_DWORD *)(a57 + 32);
  char v330 = &unk_26C5C3878;
  uint64_t v333 = *(void *)(a57 + 36);
  int v334 = *(_DWORD *)(a57 + 44);
  std::string v325 = &unk_26C5C3AF0;
  uint64_t v115 = a58;
  if (*(char *)(a58 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)(a58 + 8), *(void *)(a58 + 16));
    uint64_t v115 = a58;
  }
  else
  {
    std::string v326 = *(std::string *)(a58 + 8);
  }
  int v327 = *(_DWORD *)(v115 + 32);
  std::string v325 = &unk_26C5C3878;
  uint64_t v328 = *(void *)(v115 + 36);
  uint64_t v161 = v115;
  int v329 = *(_DWORD *)(v115 + 44);
  std::string v321 = &unk_26C5C3AF0;
  if (*(char *)(a59 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(a59 + 8), *(void *)(a59 + 16));
  }
  else {
    std::string v322 = *(std::string *)(a59 + 8);
  }
  uint64_t v116 = a60;
  int v323 = *(_DWORD *)(a59 + 32);
  std::string v321 = &unk_26C5C3858;
  uint64_t v324 = *(void *)(a59 + 36);
  std::string v317 = &unk_26C5C3AF0;
  if (*(char *)(a60 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v318, *(const std::string::value_type **)(a60 + 8), *(void *)(a60 + 16));
    uint64_t v116 = a60;
  }
  else
  {
    std::string v318 = *(std::string *)(a60 + 8);
  }
  int v319 = *(_DWORD *)(v116 + 32);
  std::string v317 = &unk_26C5C3858;
  uint64_t v160 = v116;
  uint64_t v320 = *(void *)(v116 + 36);
  uint64_t v117 = a61;
  int v313 = &unk_26C5C3AF0;
  if (*(char *)(a61 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(a61 + 8), *(void *)(a61 + 16));
    uint64_t v117 = a61;
  }
  else
  {
    std::string v314 = *(std::string *)(a61 + 8);
  }
  int v315 = *(_DWORD *)(v117 + 32);
  int v313 = &unk_26C5C3858;
  uint64_t v159 = v117;
  uint64_t v316 = *(void *)(v117 + 36);
  uint64_t v118 = a62;
  uint64_t v309 = &unk_26C5C3AF0;
  if (*(char *)(a62 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(a62 + 8), *(void *)(a62 + 16));
    uint64_t v118 = a62;
  }
  else
  {
    std::string v310 = *(std::string *)(a62 + 8);
  }
  int v311 = *(_DWORD *)(v118 + 32);
  uint64_t v309 = &unk_26C5C3858;
  uint64_t v158 = v118;
  uint64_t v312 = *(void *)(v118 + 36);
  char v305 = &unk_26C5C3AF0;
  if (*(char *)(a63 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)(a63 + 8), *(void *)(a63 + 16));
  }
  else {
    std::string v306 = *(std::string *)(a63 + 8);
  }
  uint64_t v119 = a64;
  int v307 = *(_DWORD *)(a63 + 32);
  char v305 = &unk_26C5C3858;
  uint64_t v308 = *(void *)(a63 + 36);
  char v301 = &unk_26C5C3AF0;
  if (*(char *)(a64 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)(a64 + 8), *(void *)(a64 + 16));
    uint64_t v119 = a64;
  }
  else
  {
    std::string v302 = *(std::string *)(a64 + 8);
  }
  int v303 = *(_DWORD *)(v119 + 32);
  char v301 = &unk_26C5C3858;
  uint64_t v120 = *(void *)(v119 + 36);
  uint64_t v121 = a65;
  uint64_t v304 = v120;
  char v297 = &unk_26C5C3AF0;
  if (*(char *)(a65 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(a65 + 8), *(void *)(a65 + 16));
    uint64_t v121 = a65;
    uint64_t v101 = a35;
  }
  else
  {
    std::string v298 = *(std::string *)(a65 + 8);
  }
  int v299 = *(_DWORD *)(v121 + 32);
  char v297 = &unk_26C5C3858;
  uint64_t v300 = *(void *)(v121 + 36);
  int v292 = &unk_26C5C3AF0;
  if (*(char *)(a66 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(a66 + 8), *(void *)(a66 + 16));
  }
  else {
    std::string v293 = *(std::string *)(a66 + 8);
  }
  int v294 = *(_DWORD *)(a66 + 32);
  int v292 = &unk_26C5C3818;
  char v295 = *(unsigned char *)(a66 + 36);
  if (*(char *)(a66 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a66 + 40), *(void *)(a66 + 48));
  }
  else {
    std::string v296 = *(std::string *)(a66 + 40);
  }
  uint64_t v122 = a67;
  char v287 = &unk_26C5C3AF0;
  if (*(char *)(a67 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a67 + 8), *(void *)(a67 + 16));
    uint64_t v122 = a67;
  }
  else
  {
    std::string v288 = *(std::string *)(a67 + 8);
  }
  int v289 = *(_DWORD *)(v122 + 32);
  char v287 = &unk_26C5C3818;
  char v290 = *(unsigned char *)(a67 + 36);
  if (*(char *)(a67 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a67 + 40), *(void *)(a67 + 48));
  }
  else {
    std::string v291 = *(std::string *)(a67 + 40);
  }
  uint64_t v123 = a68;
  v282 = &unk_26C5C3AF0;
  if (*(char *)(a68 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(a68 + 8), *(void *)(a68 + 16));
    uint64_t v123 = a68;
  }
  else
  {
    std::string v283 = *(std::string *)(a68 + 8);
  }
  int v284 = *(_DWORD *)(v123 + 32);
  v282 = &unk_26C5C3818;
  char v285 = *(unsigned char *)(a68 + 36);
  if (*(char *)(a68 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a68 + 40), *(void *)(a68 + 48));
  }
  else {
    std::string v286 = *(std::string *)(a68 + 40);
  }
  v278 = &unk_26C5C3AF0;
  if (*(char *)(a69 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(a69 + 8), *(void *)(a69 + 16));
  }
  else {
    std::string v279 = *(std::string *)(a69 + 8);
  }
  uint64_t v124 = a70;
  int v280 = *(_DWORD *)(a69 + 32);
  v278 = &unk_26C5C3858;
  uint64_t v281 = *(void *)(a69 + 36);
  char v273 = &unk_26C5C3AF0;
  if (*(char *)(a70 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(a70 + 8), *(void *)(a70 + 16));
    uint64_t v124 = a70;
  }
  else
  {
    std::string v274 = *(std::string *)(a70 + 8);
  }
  int v275 = *(_DWORD *)(v124 + 32);
  char v273 = &unk_26C5C3878;
  uint64_t v276 = *(void *)(v124 + 36);
  int v125 = *(_DWORD *)(v124 + 44);
  uint64_t v126 = a71;
  int v277 = v125;
  char v269 = &unk_26C5C3AF0;
  if (*(char *)(a71 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(a71 + 8), *(void *)(a71 + 16));
    uint64_t v126 = a71;
  }
  else
  {
    std::string v270 = *(std::string *)(a71 + 8);
  }
  int v271 = *(_DWORD *)(v126 + 32);
  char v269 = &unk_26C5C3858;
  uint64_t v272 = *(void *)(v126 + 36);
  uint64_t v127 = a72;
  v264 = &unk_26C5C3AF0;
  if (*(char *)(a72 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v265, *(const std::string::value_type **)(a72 + 8), *(void *)(a72 + 16));
    uint64_t v127 = a72;
  }
  else
  {
    std::string v265 = *(std::string *)(a72 + 8);
  }
  int v266 = *(_DWORD *)(v127 + 32);
  v264 = &unk_26C5C3818;
  char v267 = *(unsigned char *)(a72 + 36);
  if (*(char *)(a72 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a72 + 40), *(void *)(a72 + 48));
  }
  else {
    std::string v268 = *(std::string *)(a72 + 40);
  }
  unint64_t v128 = STACK[0x1B30];
  char v259 = &unk_26C5C3AF0;
  if (*(char *)(v128 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(v128 + 8), *(void *)(v128 + 16));
  }
  else {
    std::string v260 = *(std::string *)(v128 + 8);
  }
  unint64_t v129 = STACK[0x1B38];
  int v261 = *(_DWORD *)(v128 + 32);
  char v259 = &unk_26C5C3878;
  uint64_t v262 = *(void *)(v128 + 36);
  unint64_t v130 = v129;
  int v263 = *(_DWORD *)(v128 + 44);
  v254 = &unk_26C5C3AF0;
  if (*(char *)(v129 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(v129 + 8), *(void *)(v129 + 16));
  }
  else {
    std::string v255 = *(std::string *)(v129 + 8);
  }
  int v256 = *(_DWORD *)(v130 + 32);
  v254 = &unk_26C5C3818;
  char v257 = *(unsigned char *)(v130 + 36);
  if (*(char *)(v130 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(v130 + 40), *(void *)(v130 + 48));
  }
  else {
    std::string v258 = *(std::string *)(v130 + 40);
  }
  unint64_t v131 = STACK[0x1B40];
  char v249 = &unk_26C5C3AF0;
  unint64_t v187 = v131;
  if (*(char *)(v131 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(v131 + 8), *(void *)(v131 + 16));
    unint64_t v131 = v187;
  }
  else
  {
    std::string v250 = *(std::string *)(v131 + 8);
  }
  int v251 = *(_DWORD *)(v131 + 32);
  char v249 = &unk_26C5C3818;
  char v252 = *(unsigned char *)(v187 + 36);
  if (*(char *)(v187 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(v187 + 40), *(void *)(v187 + 48));
  }
  else {
    std::string v253 = *(std::string *)(v187 + 40);
  }
  unint64_t v132 = STACK[0x1B48];
  uint64_t v245 = &unk_26C5C3AF0;
  if (*(char *)(v132 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v132 + 8), *(void *)(v132 + 16));
  }
  else {
    std::string v246 = *(std::string *)(v132 + 8);
  }
  unint64_t v133 = STACK[0x1B50];
  int v247 = *(_DWORD *)(v132 + 32);
  uint64_t v245 = &unk_26C5C3858;
  unint64_t v134 = v133;
  uint64_t v248 = *(void *)(v132 + 36);
  char v240 = &unk_26C5C3AF0;
  unint64_t v186 = v133;
  if (*(char *)(v133 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(v133 + 8), *(void *)(v133 + 16));
    unint64_t v134 = v186;
  }
  else
  {
    std::string v241 = *(std::string *)(v133 + 8);
  }
  unint64_t v135 = STACK[0x1B58];
  int v242 = *(_DWORD *)(v134 + 32);
  char v240 = &unk_26C5C3878;
  uint64_t v243 = *(void *)(v134 + 36);
  int v136 = *(_DWORD *)(v134 + 44);
  unint64_t v137 = v135;
  int v244 = v136;
  char v236 = &unk_26C5C3AF0;
  if (*(char *)(v135 + 31) < 0)
  {
    unint64_t v138 = v135;
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(v135 + 8), *(void *)(v135 + 16));
    unint64_t v137 = v138;
  }
  else
  {
    std::string v237 = *(std::string *)(v135 + 8);
  }
  unint64_t v139 = STACK[0x1B60];
  int v238 = *(_DWORD *)(v137 + 32);
  char v236 = &unk_26C5C3858;
  uint64_t v239 = *(void *)(v137 + 36);
  int v231 = &unk_26C5C3AF0;
  if (*(char *)(v139 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(v139 + 8), *(void *)(v139 + 16));
  }
  else {
    std::string v232 = *(std::string *)(v139 + 8);
  }
  int v233 = *(_DWORD *)(v139 + 32);
  int v231 = &unk_26C5C3818;
  char v234 = *(unsigned char *)(v139 + 36);
  if (*(char *)(v139 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(v139 + 40), *(void *)(v139 + 48));
  }
  else {
    std::string v235 = *(std::string *)(v139 + 40);
  }
  unint64_t v140 = STACK[0x1B68];
  v227 = &unk_26C5C3AF0;
  if (*(char *)(v140 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(v140 + 8), *(void *)(v140 + 16));
  }
  else {
    std::string v228 = *(std::string *)(v140 + 8);
  }
  unint64_t v141 = v140;
  unint64_t v142 = STACK[0x1B70];
  int v229 = *(_DWORD *)(v141 + 32);
  v227 = &unk_26C5C3858;
  uint64_t v230 = *(void *)(v141 + 36);
  char v222 = &unk_26C5C3AF0;
  if (*(char *)(v142 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(v142 + 8), *(void *)(v142 + 16));
  }
  else {
    std::string v223 = *(std::string *)(v142 + 8);
  }
  unint64_t v143 = STACK[0x1B78];
  int v224 = *(_DWORD *)(v142 + 32);
  char v222 = &unk_26C5C3878;
  uint64_t v225 = *(void *)(v142 + 36);
  int v226 = *(_DWORD *)(v142 + 44);
  uint64_t v218 = &unk_26C5C3AF0;
  unint64_t v185 = v143;
  if (*(char *)(v143 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(v143 + 8), *(void *)(v143 + 16));
    unint64_t v143 = v185;
  }
  else
  {
    std::string v219 = *(std::string *)(v143 + 8);
  }
  unint64_t v144 = STACK[0x1B80];
  int v220 = *(_DWORD *)(v143 + 32);
  uint64_t v218 = &unk_26C5C3858;
  uint64_t v145 = *(void *)(v143 + 36);
  unint64_t v146 = v144;
  uint64_t v221 = v145;
  char v214 = &unk_26C5C3AF0;
  unint64_t v184 = v144;
  if (*(char *)(v144 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(v144 + 8), *(void *)(v144 + 16));
    unint64_t v146 = v184;
  }
  else
  {
    std::string v215 = *(std::string *)(v144 + 8);
  }
  unint64_t v147 = STACK[0x1B88];
  int v216 = *(_DWORD *)(v146 + 32);
  char v214 = &unk_26C5C3858;
  uint64_t v148 = *(void *)(v146 + 36);
  unint64_t v149 = v147;
  uint64_t v217 = v148;
  std::string v210 = &unk_26C5C3AF0;
  if (*(char *)(v147 + 31) < 0)
  {
    unint64_t v150 = v147;
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(v147 + 8), *(void *)(v147 + 16));
    unint64_t v149 = v150;
  }
  else
  {
    std::string v211 = *(std::string *)(v147 + 8);
  }
  unint64_t v151 = STACK[0x1B90];
  int v212 = *(_DWORD *)(v149 + 32);
  std::string v210 = &unk_26C5C3858;
  uint64_t v213 = *(void *)(v149 + 36);
  char v205 = &unk_26C5C3AF0;
  if (*(char *)(v151 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(v151 + 8), *(void *)(v151 + 16));
  }
  else {
    std::string v206 = *(std::string *)(v151 + 8);
  }
  int v207 = *(_DWORD *)(v151 + 32);
  char v205 = &unk_26C5C3818;
  char v208 = *(unsigned char *)(v151 + 36);
  if (*(char *)(v151 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(v151 + 40), *(void *)(v151 + 48));
  }
  else {
    std::string v209 = *(std::string *)(v151 + 40);
  }
  unint64_t v152 = STACK[0x1B98];
  v200 = &unk_26C5C3AF0;
  if (*(char *)(v152 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(v152 + 8), *(void *)(v152 + 16));
  }
  else {
    std::string v201 = *(std::string *)(v152 + 8);
  }
  int v202 = *(_DWORD *)(v152 + 32);
  v200 = &unk_26C5C3818;
  char v203 = *(unsigned char *)(v152 + 36);
  uint64_t v157 = v101;
  if (*(char *)(v152 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(v152 + 40), *(void *)(v152 + 48));
  }
  else {
    std::string v204 = *(std::string *)(v152 + 40);
  }
  unint64_t v153 = STACK[0x1BA0];
  char v195 = &unk_26C5C3AF0;
  if (*(char *)(v153 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(v153 + 8), *(void *)(v153 + 16));
  }
  else {
    std::string v196 = *(std::string *)(v153 + 8);
  }
  unint64_t v154 = STACK[0x1BA8];
  int v197 = *(_DWORD *)(v153 + 32);
  char v195 = &unk_26C5C3878;
  uint64_t v198 = *(void *)(v153 + 36);
  int v199 = *(_DWORD *)(v153 + 44);
  char v191 = &unk_26C5C3AF0;
  if (*(char *)(v154 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(v154 + 8), *(void *)(v154 + 16));
  }
  else {
    std::string v192 = *(std::string *)(v154 + 8);
  }
  unint64_t v155 = STACK[0x1BB0];
  int v193 = *(_DWORD *)(v154 + 32);
  char v191 = &unk_26C5C3858;
  uint64_t v194 = *(void *)(v154 + 36);
  if (*(char *)(v155 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v155 + 8), *(void *)(v155 + 16));
  }
  else {
    std::string __p = *(std::string *)(v155 + 8);
  }
  int v189 = *(_DWORD *)(v155 + 32);
  uint64_t v190 = *(void *)(v155 + 36);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::DatabaseTable((uint64_t)v86, (uint64_t)&v569, (uint64_t)&v564, (uint64_t)&v560, (uint64_t)&v555, (uint64_t)&v550, (uint64_t)&v545, (uint64_t)&v540, (uint64_t)&v535, (uint64_t)&v531, (uint64_t)&v527, (uint64_t)&v522, (uint64_t)&v518, (uint64_t)&v514, (uint64_t)&v510, (uint64_t)&v506, (uint64_t)&v501, (uint64_t)&v497, (uint64_t)&v493,
    (uint64_t)&v489,
    (uint64_t)&v485,
    (uint64_t)&v481,
    (uint64_t)&v477,
    (uint64_t)&v473,
    (uint64_t)&v469,
    (uint64_t)&v465,
    (uint64_t)&v461,
    (uint64_t)&v457,
    (uint64_t)&v453,
    (uint64_t)&v448,
    (uint64_t)&v444,
    (uint64_t)&v439,
    (uint64_t)&v435,
    (uint64_t)&v431,
    (uint64_t)&v427,
    (uint64_t)&v423,
    (uint64_t)&v419,
    (uint64_t)&v415,
    (uint64_t)&v410,
    (uint64_t)&v406,
    (uint64_t)&v402,
    (uint64_t)&v398,
    (uint64_t)&v394,
    (uint64_t)&v390,
    (uint64_t)&v385,
    (uint64_t)&v380,
    (uint64_t)&v376,
    (uint64_t)&v371,
    (uint64_t)&v366,
    (uint64_t)&v362,
    (uint64_t)&v358,
    (uint64_t)&v354,
    (uint64_t)&v350,
    (uint64_t)&v345,
    (uint64_t)&v340,
    (uint64_t)&v335,
    (uint64_t)&v330,
    (uint64_t)&v325,
    (uint64_t)&v321,
    (uint64_t)&v317,
    (uint64_t)&v313,
    (uint64_t)&v309,
    (uint64_t)&v305);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  char v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v200);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v205);
  std::string v210 = &unk_26C5C3AF0;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v211.__r_.__value_.__l.__data_);
  }
  char v214 = &unk_26C5C3AF0;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  uint64_t v218 = &unk_26C5C3AF0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
  char v222 = &unk_26C5C3AF0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  char v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  char v240 = &unk_26C5C3AF0;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  uint64_t v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v246.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  char v259 = &unk_26C5C3AF0;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v264);
  char v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  char v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v282);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v287);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v292);
  char v297 = &unk_26C5C3AF0;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  char v301 = &unk_26C5C3AF0;
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v302.__r_.__value_.__l.__data_);
  }
  char v305 = &unk_26C5C3AF0;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v306.__r_.__value_.__l.__data_);
  }
  uint64_t v309 = &unk_26C5C3AF0;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  int v313 = &unk_26C5C3AF0;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v314.__r_.__value_.__l.__data_);
  }
  std::string v317 = &unk_26C5C3AF0;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v318.__r_.__value_.__l.__data_);
  }
  std::string v321 = &unk_26C5C3AF0;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v322.__r_.__value_.__l.__data_);
  }
  std::string v325 = &unk_26C5C3AF0;
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v326.__r_.__value_.__l.__data_);
  }
  char v330 = &unk_26C5C3AF0;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v331.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v335);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v340);
  char v345 = &unk_26C5C3AF0;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v346.__r_.__value_.__l.__data_);
  }
  int v350 = &unk_26C5C3AF0;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  int v358 = &unk_26C5C3AF0;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v359.__r_.__value_.__l.__data_);
  }
  int v362 = &unk_26C5C3AF0;
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v363.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v366);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v371);
  int v376 = &unk_26C5C3AF0;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v377.__r_.__value_.__l.__data_);
  }
  std::string v380 = &unk_26C5C3AF0;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v381.__r_.__value_.__l.__data_);
  }
  std::string v385 = &unk_26C5C3AF0;
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v386.__r_.__value_.__l.__data_);
  }
  int v390 = &unk_26C5C3AF0;
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v391.__r_.__value_.__l.__data_);
  }
  std::string v394 = &unk_26C5C3AF0;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v395.__r_.__value_.__l.__data_);
  }
  std::string v398 = &unk_26C5C3AF0;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v399.__r_.__value_.__l.__data_);
  }
  v402 = &unk_26C5C3AF0;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v403.__r_.__value_.__l.__data_);
  }
  int v406 = &unk_26C5C3AF0;
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v410);
  int v415 = &unk_26C5C3AF0;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v416.__r_.__value_.__l.__data_);
  }
  uint64_t v419 = &unk_26C5C3AF0;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v420.__r_.__value_.__l.__data_);
  }
  uint64_t v423 = &unk_26C5C3AF0;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v424.__r_.__value_.__l.__data_);
  }
  v427 = &unk_26C5C3AF0;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v428.__r_.__value_.__l.__data_);
  }
  v431 = &unk_26C5C3AF0;
  if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v432.__r_.__value_.__l.__data_);
  }
  v435 = &unk_26C5C3AF0;
  if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v436.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v439);
  v444 = &unk_26C5C3AF0;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v445.__r_.__value_.__l.__data_);
  }
  v448 = &unk_26C5C3AF0;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v449.__r_.__value_.__l.__data_);
  }
  v453 = &unk_26C5C3AF0;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v454.__r_.__value_.__l.__data_);
  }
  v457 = &unk_26C5C3AF0;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v458.__r_.__value_.__l.__data_);
  }
  v461 = &unk_26C5C3AF0;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v462.__r_.__value_.__l.__data_);
  }
  v465 = &unk_26C5C3AF0;
  if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v466.__r_.__value_.__l.__data_);
  }
  v469 = &unk_26C5C3AF0;
  if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v470.__r_.__value_.__l.__data_);
  }
  v473 = &unk_26C5C3AF0;
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v474.__r_.__value_.__l.__data_);
  }
  v477 = &unk_26C5C3AF0;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v478.__r_.__value_.__l.__data_);
  }
  v481 = &unk_26C5C3AF0;
  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v482.__r_.__value_.__l.__data_);
  }
  v485 = &unk_26C5C3AF0;
  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v486.__r_.__value_.__l.__data_);
  }
  v489 = &unk_26C5C3AF0;
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v490.__r_.__value_.__l.__data_);
  }
  v493 = &unk_26C5C3AF0;
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v494.__r_.__value_.__l.__data_);
  }
  v497 = &unk_26C5C3AF0;
  if (SHIBYTE(v498.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v498.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v501);
  v506 = &unk_26C5C3AF0;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v507.__r_.__value_.__l.__data_);
  }
  v510 = &unk_26C5C3AF0;
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v511.__r_.__value_.__l.__data_);
  }
  v514 = &unk_26C5C3AF0;
  if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v515.__r_.__value_.__l.__data_);
  }
  v518 = &unk_26C5C3AF0;
  if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v519.__r_.__value_.__l.__data_);
  }
  v522 = &unk_26C5C3AF0;
  if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v523.__r_.__value_.__l.__data_);
  }
  v527 = &unk_26C5C3AF0;
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v528.__r_.__value_.__l.__data_);
  }
  v531 = &unk_26C5C3AF0;
  if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v532.__r_.__value_.__l.__data_);
  }
  v535 = &unk_26C5C3AF0;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v540);
  v545 = &unk_26C5C3AF0;
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v546.__r_.__value_.__l.__data_);
  }
  v550 = &unk_26C5C3AF0;
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v551.__r_.__value_.__l.__data_);
  }
  v555 = &unk_26C5C3AF0;
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v556.__r_.__value_.__l.__data_);
  }
  v560 = &unk_26C5C3AF0;
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v561.__r_.__value_.__l.__data_);
  }
  v564 = &unk_26C5C3AF0;
  if (SHIBYTE(v565.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v565.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v569.__r_.__value_.__l.__data_);
  }
  *char v86 = &unk_26C5C4168;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52ELm53ELm54ELm55ELm56ELm57ELm58ELm59ELm60ELm61ELm62ELm63ELm64ELm65ELm66ELm67ELm68ELm69ELm70ELm71ELm72ELm73ELm74ELm75ELm76ELm77ELm78ELm79ELm80ELm81ELm82ELm83ELm84ELm85ELm86EEEEJN6mlcore11MediaColumnIxEENS4_IiEES5_S5_S5_NS4_INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES5_S6_S6_S5_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S5_S6_NS4_IN13mediaplatform4DataEEES6_S6_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S5_S5_S6_SD_SD_S6_S6_S6_S6_S5_SD_SD_S5_S5_S6_S6_S6_S6_S6_S6_S6_SD_SD_SD_S6_S5_S6_SD_S5_SD_SD_S6_S5_S6_SD_S6_S5_S6_S6_S6_SD_SD_S5_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52ELm53ELm54ELm55ELm56ELm57ELm58ELm59ELm60ELm61ELm62ELm63ELm64ELm65ELm66ELm67ELm68ELm69ELm70ELm71ELm72ELm73ELm74ELm75ELm76ELm77ELm78ELm79ELm80ELm81ELm82ELm83ELm84ELm85ELm86EEJS5_S6_S5_S5_S5_SD_S5_S6_S6_S5_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S5_S6_SG_S6_S6_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S5_S5_S6_SD_SD_S6_S6_S6_S6_S5_SD_SD_S5_S5_S6_S6_S6_S6_S6_S6_S6_SD_SD_SD_S6_S5_S6_SD_S5_SD_SD_S6_S5_S6_SD_S6_S5_S6_S6_S6_SD_SD_S5_S6_S6_EJEJEJRS5_RS6_SJ_SJ_SJ_RSD_SJ_SK_SK_SJ_SK_SK_SK_SK_SL_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SJ_SK_RSG_SK_SK_SK_SK_SK_SK_SL_SK_SK_SK_SK_SK_SJ_SJ_SK_SL_SL_SK_SK_SK_SK_SJ_SL_SL_SJ_SJ_SK_SK_SK_SK_SK_SK_SK_SL_SL_SL_SK_SJ_SK_SL_SJ_SL_SL_SK_SJ_SK_SL_SK_SJ_SK_SK_SK_SL_SL_SJ_SK_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_((uint64_t)(v86 + 568), v182, v183, v81, v181, v180, v179, a9, a10, a11, v178, v177, a14, a15, v176, a17, a18, v175, a20,
    v174,
    a22,
    v173,
    a24,
    v172,
    a26,
    v171,
    v170,
    a29,
    a30,
    v169,
    a32,
    a33,
    v168,
    v157,
    a36,
    a37,
    v167,
    a39,
    a40,
    a41,
    v166,
    a43,
    v165,
    a45,
    a46,
    v164,
    a48,
    a49,
    a50,
    v163,
    a52,
    a53,
    v162,
    a55,
    a56,
    a57,
    v161,
    a59,
    v160,
    v159,
    v158,
    a63,
    a64);
  return v86;
}

void sub_214DB7BBC(_Unwind_Exception *a1)
{
  STACK[0x760] = v1;
  if (SLOBYTE(STACK[0x77F]) < 0) {
    operator delete((void *)STACK[0x768]);
  }
  STACK[0x790] = v2;
  if (SLOBYTE(STACK[0x7AF]) < 0) {
    operator delete((void *)STACK[0x798]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7C0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x800]);
  STACK[0x840] = STACK[0x2F8];
  if (SLOBYTE(STACK[0x85F]) < 0) {
    operator delete((void *)STACK[0x848]);
  }
  STACK[0x870] = STACK[0x300];
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  STACK[0x8A0] = STACK[0x310];
  if (SLOBYTE(STACK[0x8BF]) < 0) {
    operator delete((void *)STACK[0x8A8]);
  }
  STACK[0x8D0] = STACK[0x318];
  if (SLOBYTE(STACK[0x8EF]) < 0) {
    operator delete((void *)STACK[0x8D8]);
  }
  STACK[0x900] = STACK[0x330];
  if (SLOBYTE(STACK[0x91F]) < 0) {
    operator delete((void *)STACK[0x908]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x930]);
  STACK[0x970] = STACK[0x340];
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  STACK[0x9A0] = STACK[0x350];
  if (SLOBYTE(STACK[0x9BF]) < 0) {
    operator delete((void *)STACK[0x9A8]);
  }
  STACK[0x9D0] = STACK[0x358];
  if (SLOBYTE(STACK[0x9EF]) < 0) {
    operator delete((void *)STACK[0x9D8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA00]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA40]);
  STACK[0xA80] = STACK[0x3A0];
  if (SLOBYTE(STACK[0xA9F]) < 0) {
    operator delete((void *)STACK[0xA88]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xAB0]);
  STACK[0xAF0] = STACK[0x3C8];
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  STACK[0xB20] = STACK[0x3D0];
  if (SLOBYTE(STACK[0xB3F]) < 0) {
    operator delete((void *)STACK[0xB28]);
  }
  STACK[0xB50] = STACK[0x3E0];
  if (SLOBYTE(STACK[0xB6F]) < 0) {
    operator delete((void *)STACK[0xB58]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB80]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xBC0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC00]);
  STACK[0xC40] = STACK[0x440];
  if (SLOBYTE(STACK[0xC5F]) < 0) {
    operator delete((void *)STACK[0xC48]);
  }
  STACK[0xC70] = STACK[0x458];
  if (SLOBYTE(STACK[0xC8F]) < 0) {
    operator delete((void *)STACK[0xC78]);
  }
  STACK[0xCA0] = STACK[0x460];
  if (SLOBYTE(STACK[0xCBF]) < 0) {
    operator delete((void *)STACK[0xCA8]);
  }
  STACK[0xCD0] = STACK[0x470];
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  STACK[0xD00] = STACK[0x480];
  if (SLOBYTE(STACK[0xD1F]) < 0) {
    operator delete((void *)STACK[0xD08]);
  }
  STACK[0xD30] = STACK[0x498];
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  STACK[0xD60] = STACK[0x4A8];
  if (SLOBYTE(STACK[0xD7F]) < 0) {
    operator delete((void *)STACK[0xD68]);
  }
  STACK[0xD90] = STACK[0x4B8];
  if (SLOBYTE(STACK[0xDAF]) < 0) {
    operator delete((void *)STACK[0xD98]);
  }
  STACK[0xDC0] = STACK[0x4C8];
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xDF0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xE30]);
  STACK[0xE70] = STACK[0x4F8];
  if (SLOBYTE(STACK[0xE8F]) < 0) {
    operator delete((void *)STACK[0xE78]);
  }
  STACK[0xEA0] = STACK[0x510];
  if (SLOBYTE(STACK[0xEBF]) < 0) {
    operator delete((void *)STACK[0xEA8]);
  }
  STACK[0xED0] = STACK[0x520];
  if (SLOBYTE(STACK[0xEEF]) < 0) {
    operator delete((void *)STACK[0xED8]);
  }
  STACK[0xF00] = STACK[0x530];
  if (SLOBYTE(STACK[0xF1F]) < 0) {
    operator delete((void *)STACK[0xF08]);
  }
  STACK[0xF30] = STACK[0x548];
  if (SLOBYTE(STACK[0xF4F]) < 0) {
    operator delete((void *)STACK[0xF38]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xF60]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xFA0]);
  STACK[0xFE0] = STACK[0x560];
  if (SLOBYTE(STACK[0xFFF]) < 0) {
    operator delete((void *)STACK[0xFE8]);
  }
  STACK[0x1010] = STACK[0x568];
  if (SLOBYTE(STACK[0x102F]) < 0) {
    operator delete((void *)STACK[0x1018]);
  }
  STACK[0x1040] = STACK[0x570];
  if (SLOBYTE(STACK[0x105F]) < 0) {
    operator delete((void *)STACK[0x1048]);
  }
  STACK[0x1070] = STACK[0x578];
  if (SLOBYTE(STACK[0x108F]) < 0) {
    operator delete((void *)STACK[0x1078]);
  }
  STACK[0x10A0] = STACK[0x580];
  if (SLOBYTE(STACK[0x10BF]) < 0) {
    operator delete((void *)STACK[0x10A8]);
  }
  STACK[0x10D0] = STACK[0x588];
  if (SLOBYTE(STACK[0x10EF]) < 0) {
    operator delete((void *)STACK[0x10D8]);
  }
  STACK[0x1100] = STACK[0x590];
  if (SLOBYTE(STACK[0x111F]) < 0) {
    operator delete((void *)STACK[0x1108]);
  }
  STACK[0x1130] = STACK[0x598];
  if (SLOBYTE(STACK[0x114F]) < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1160]);
  STACK[0x11A0] = STACK[0x5A0];
  if (SLOBYTE(STACK[0x11BF]) < 0) {
    operator delete((void *)STACK[0x11A8]);
  }
  STACK[0x11D0] = STACK[0x5A8];
  if (SLOBYTE(STACK[0x11EF]) < 0) {
    operator delete((void *)STACK[0x11D8]);
  }
  STACK[0x1200] = STACK[0x5B0];
  if (SLOBYTE(STACK[0x121F]) < 0) {
    operator delete((void *)STACK[0x1208]);
  }
  STACK[0x1230] = STACK[0x5B8];
  if (SLOBYTE(STACK[0x124F]) < 0) {
    operator delete((void *)STACK[0x1238]);
  }
  STACK[0x1260] = STACK[0x5C0];
  if (SLOBYTE(STACK[0x127F]) < 0) {
    operator delete((void *)STACK[0x1268]);
  }
  STACK[0x1290] = STACK[0x5C8];
  if (SLOBYTE(STACK[0x12AF]) < 0) {
    operator delete((void *)STACK[0x1298]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x12C0]);
  STACK[0x1310] = STACK[0x5D0];
  if (SLOBYTE(STACK[0x132F]) < 0) {
    operator delete((void *)STACK[0x1318]);
  }
  STACK[0x1340] = STACK[0x5D8];
  if (SLOBYTE(STACK[0x135F]) < 0) {
    operator delete((void *)STACK[0x1348]);
  }
  STACK[0x1370] = STACK[0x5E0];
  if (SLOBYTE(STACK[0x138F]) < 0) {
    operator delete((void *)STACK[0x1378]);
  }
  STACK[0x13A0] = STACK[0x5E8];
  if (SLOBYTE(STACK[0x13BF]) < 0) {
    operator delete((void *)STACK[0x13A8]);
  }
  STACK[0x13D0] = STACK[0x5F0];
  if (SLOBYTE(STACK[0x13EF]) < 0) {
    operator delete((void *)STACK[0x13D8]);
  }
  STACK[0x1400] = STACK[0x5F8];
  if (SLOBYTE(STACK[0x141F]) < 0) {
    operator delete((void *)STACK[0x1408]);
  }
  STACK[0x1430] = STACK[0x600];
  if (SLOBYTE(STACK[0x144F]) < 0) {
    operator delete((void *)STACK[0x1438]);
  }
  STACK[0x1460] = STACK[0x608];
  if (SLOBYTE(STACK[0x147F]) < 0) {
    operator delete((void *)STACK[0x1468]);
  }
  STACK[0x1490] = STACK[0x610];
  if (SLOBYTE(STACK[0x14AF]) < 0) {
    operator delete((void *)STACK[0x1498]);
  }
  STACK[0x14C0] = STACK[0x618];
  if (SLOBYTE(STACK[0x14DF]) < 0) {
    operator delete((void *)STACK[0x14C8]);
  }
  STACK[0x14F0] = STACK[0x620];
  if (SLOBYTE(STACK[0x150F]) < 0) {
    operator delete((void *)STACK[0x14F8]);
  }
  STACK[0x1520] = STACK[0x628];
  if (SLOBYTE(STACK[0x153F]) < 0) {
    operator delete((void *)STACK[0x1528]);
  }
  STACK[0x1550] = STACK[0x630];
  if (SLOBYTE(STACK[0x156F]) < 0) {
    operator delete((void *)STACK[0x1558]);
  }
  STACK[0x1580] = STACK[0x638];
  if (SLOBYTE(STACK[0x159F]) < 0) {
    operator delete((void *)STACK[0x1588]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x15B0]);
  STACK[0x15F0] = STACK[0x640];
  if (SLOBYTE(STACK[0x160F]) < 0) {
    operator delete((void *)STACK[0x15F8]);
  }
  STACK[0x1620] = STACK[0x648];
  if (SLOBYTE(STACK[0x163F]) < 0) {
    operator delete((void *)STACK[0x1628]);
  }
  STACK[0x1650] = STACK[0x650];
  if (SLOBYTE(STACK[0x166F]) < 0) {
    operator delete((void *)STACK[0x1658]);
  }
  STACK[0x1680] = STACK[0x658];
  if (SLOBYTE(STACK[0x169F]) < 0) {
    operator delete((void *)STACK[0x1688]);
  }
  STACK[0x16B0] = STACK[0x660];
  if (SLOBYTE(STACK[0x16CF]) < 0) {
    operator delete((void *)STACK[0x16B8]);
  }
  STACK[0x16E0] = STACK[0x668];
  if (SLOBYTE(STACK[0x16FF]) < 0) {
    operator delete((void *)STACK[0x16E8]);
  }
  STACK[0x1710] = STACK[0x670];
  if (SLOBYTE(STACK[0x172F]) < 0) {
    operator delete((void *)STACK[0x1718]);
  }
  STACK[0x1740] = STACK[0x678];
  if (SLOBYTE(STACK[0x175F]) < 0) {
    operator delete((void *)STACK[0x1748]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1770]);
  STACK[0x17B0] = STACK[0x680];
  if (SLOBYTE(STACK[0x17CF]) < 0) {
    operator delete((void *)STACK[0x17B8]);
  }
  STACK[0x17E0] = STACK[0x688];
  if (SLOBYTE(STACK[0x17FF]) < 0) {
    operator delete((void *)STACK[0x17E8]);
  }
  STACK[0x1810] = STACK[0x690];
  if (SLOBYTE(STACK[0x182F]) < 0) {
    operator delete((void *)STACK[0x1818]);
  }
  *(void *)(v3 - 224) = STACK[0x698];
  if (SLOBYTE(STACK[0x185F]) < 0) {
    operator delete(*(void **)(v3 - 216));
  }
  *(void *)(v3 - 176) = STACK[0x6A0];
  if (SLOBYTE(STACK[0x188F]) < 0) {
    operator delete(*(void **)(v3 - 168));
  }
  if (SLOBYTE(STACK[0x18B7]) < 0) {
    operator delete(*(void **)(v3 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_214DB8850()
{
  STACK[0x12C0] = v0;
  if (SLOBYTE(STACK[0x12DF]) < 0) {
    operator delete((void *)STACK[0x12C8]);
  }
  JUMPOUT(0x214DB8500);
}

void *mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::DatabaseTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = (void *)MEMORY[0x270FA5388](a1);
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v84 = v83;
  char v86 = mediaplatform::DatabaseTableBase::DatabaseTableBase(v72, v85);
  *char v86 = &unk_26C5C3638;
  v86[7] = 0;
  v86[8] = 0;
  v86[9] = 0;
  uint64_t v105 = v86;
  std::string v482 = &unk_26C5C3AF0;
  if (*(char *)(v84 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v483, *(const std::string::value_type **)(v84 + 8), *(void *)(v84 + 16));
  }
  else {
    std::string v483 = *(std::string *)(v84 + 8);
  }
  int v484 = *(_DWORD *)(v84 + 32);
  std::string v482 = &unk_26C5C3878;
  uint64_t v485 = *(void *)(v84 + 36);
  int v486 = *(_DWORD *)(v84 + 44);
  std::string v478 = &unk_26C5C3AF0;
  if (*(char *)(v82 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v479, *(const std::string::value_type **)(v82 + 8), *(void *)(v82 + 16));
  }
  else {
    std::string v479 = *(std::string *)(v82 + 8);
  }
  int v480 = *(_DWORD *)(v82 + 32);
  std::string v478 = &unk_26C5C3858;
  uint64_t v481 = *(void *)(v82 + 36);
  v473 = &unk_26C5C3AF0;
  if (*(char *)(v80 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v474, *(const std::string::value_type **)(v80 + 8), *(void *)(v80 + 16));
  }
  else {
    std::string v474 = *(std::string *)(v80 + 8);
  }
  int v475 = *(_DWORD *)(v80 + 32);
  v473 = &unk_26C5C3878;
  uint64_t v476 = *(void *)(v80 + 36);
  int v477 = *(_DWORD *)(v80 + 44);
  uint64_t v468 = &unk_26C5C3AF0;
  if (*(char *)(v78 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v469, *(const std::string::value_type **)(v78 + 8), *(void *)(v78 + 16));
  }
  else {
    std::string v469 = *(std::string *)(v78 + 8);
  }
  int v470 = *(_DWORD *)(v78 + 32);
  uint64_t v468 = &unk_26C5C3878;
  uint64_t v471 = *(void *)(v78 + 36);
  int v472 = *(_DWORD *)(v78 + 44);
  int v463 = &unk_26C5C3AF0;
  if (*(char *)(v76 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v464, *(const std::string::value_type **)(v76 + 8), *(void *)(v76 + 16));
  }
  else {
    std::string v464 = *(std::string *)(v76 + 8);
  }
  int v465 = *(_DWORD *)(v76 + 32);
  int v463 = &unk_26C5C3878;
  uint64_t v466 = *(void *)(v76 + 36);
  int v467 = *(_DWORD *)(v76 + 44);
  std::string v458 = &unk_26C5C3AF0;
  if (*(char *)(v74 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v459, *(const std::string::value_type **)(v74 + 8), *(void *)(v74 + 16));
  }
  else {
    std::string v459 = *(std::string *)(v74 + 8);
  }
  int v460 = *(_DWORD *)(v74 + 32);
  std::string v458 = &unk_26C5C3818;
  char v461 = *(unsigned char *)(v74 + 36);
  if (*(char *)(v74 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v462, *(const std::string::value_type **)(v74 + 40), *(void *)(v74 + 48));
  }
  else {
    std::string v462 = *(std::string *)(v74 + 40);
  }
  v453 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v454, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v454 = *(std::string *)(a9 + 8);
  }
  int v455 = *(_DWORD *)(a9 + 32);
  v453 = &unk_26C5C3878;
  uint64_t v456 = *(void *)(a9 + 36);
  int v457 = *(_DWORD *)(a9 + 44);
  std::string v449 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v450, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v450 = *(std::string *)(a10 + 8);
  }
  int v451 = *(_DWORD *)(a10 + 32);
  std::string v449 = &unk_26C5C3858;
  uint64_t v452 = *(void *)(a10 + 36);
  std::string v445 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v446, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v446 = *(std::string *)(a11 + 8);
  }
  int v447 = *(_DWORD *)(a11 + 32);
  std::string v445 = &unk_26C5C3858;
  uint64_t v448 = *(void *)(a11 + 36);
  std::string v440 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v441, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v441 = *(std::string *)(a12 + 8);
  }
  int v442 = *(_DWORD *)(a12 + 32);
  std::string v440 = &unk_26C5C3878;
  uint64_t v443 = *(void *)(a12 + 36);
  int v444 = *(_DWORD *)(a12 + 44);
  std::string v436 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v437, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v437 = *(std::string *)(a13 + 8);
  }
  int v438 = *(_DWORD *)(a13 + 32);
  std::string v436 = &unk_26C5C3858;
  uint64_t v439 = *(void *)(a13 + 36);
  std::string v432 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v433 = *(std::string *)(a14 + 8);
  }
  int v434 = *(_DWORD *)(a14 + 32);
  std::string v432 = &unk_26C5C3858;
  uint64_t v435 = *(void *)(a14 + 36);
  std::string v428 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v429, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v429 = *(std::string *)(a15 + 8);
  }
  int v430 = *(_DWORD *)(a15 + 32);
  std::string v428 = &unk_26C5C3858;
  uint64_t v431 = *(void *)(a15 + 36);
  std::string v424 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v425, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v425 = *(std::string *)(a16 + 8);
  }
  int v426 = *(_DWORD *)(a16 + 32);
  std::string v424 = &unk_26C5C3858;
  uint64_t v427 = *(void *)(a16 + 36);
  uint64_t v419 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v420 = *(std::string *)(a17 + 8);
  }
  int v421 = *(_DWORD *)(a17 + 32);
  uint64_t v419 = &unk_26C5C3818;
  char v422 = *(unsigned char *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v423, *(const std::string::value_type **)(a17 + 40), *(void *)(a17 + 48));
  }
  else {
    std::string v423 = *(std::string *)(a17 + 40);
  }
  int v415 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v416, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v416 = *(std::string *)(a18 + 8);
  }
  int v417 = *(_DWORD *)(a18 + 32);
  int v415 = &unk_26C5C3858;
  uint64_t v418 = *(void *)(a18 + 36);
  std::string v411 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v412, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v412 = *(std::string *)(a19 + 8);
  }
  int v413 = *(_DWORD *)(a19 + 32);
  std::string v411 = &unk_26C5C3858;
  uint64_t v414 = *(void *)(a19 + 36);
  std::string v407 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v408, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v408 = *(std::string *)(a20 + 8);
  }
  int v409 = *(_DWORD *)(a20 + 32);
  std::string v407 = &unk_26C5C3858;
  uint64_t v410 = *(void *)(a20 + 36);
  std::string v403 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v404, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v404 = *(std::string *)(a21 + 8);
  }
  int v405 = *(_DWORD *)(a21 + 32);
  std::string v403 = &unk_26C5C3858;
  uint64_t v406 = *(void *)(a21 + 36);
  std::string v399 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v400, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v400 = *(std::string *)(a22 + 8);
  }
  int v401 = *(_DWORD *)(a22 + 32);
  std::string v399 = &unk_26C5C3858;
  uint64_t v402 = *(void *)(a22 + 36);
  std::string v395 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
  }
  else {
    std::string v396 = *(std::string *)(a23 + 8);
  }
  int v397 = *(_DWORD *)(a23 + 32);
  std::string v395 = &unk_26C5C3858;
  uint64_t v398 = *(void *)(a23 + 36);
  std::string v391 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v392, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else {
    std::string v392 = *(std::string *)(a24 + 8);
  }
  int v393 = *(_DWORD *)(a24 + 32);
  std::string v391 = &unk_26C5C3858;
  uint64_t v394 = *(void *)(a24 + 36);
  int v387 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v388, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
  }
  else {
    std::string v388 = *(std::string *)(a25 + 8);
  }
  int v389 = *(_DWORD *)(a25 + 32);
  int v387 = &unk_26C5C3858;
  uint64_t v390 = *(void *)(a25 + 36);
  uint64_t v383 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v384, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
  }
  else {
    std::string v384 = *(std::string *)(a26 + 8);
  }
  int v385 = *(_DWORD *)(a26 + 32);
  uint64_t v383 = &unk_26C5C3858;
  uint64_t v386 = *(void *)(a26 + 36);
  uint64_t v379 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v380, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else {
    std::string v380 = *(std::string *)(a27 + 8);
  }
  int v381 = *(_DWORD *)(a27 + 32);
  uint64_t v379 = &unk_26C5C3858;
  uint64_t v382 = *(void *)(a27 + 36);
  std::string v375 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v376, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else {
    std::string v376 = *(std::string *)(a28 + 8);
  }
  int v377 = *(_DWORD *)(a28 + 32);
  std::string v375 = &unk_26C5C3858;
  uint64_t v378 = *(void *)(a28 + 36);
  std::string v371 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else {
    std::string v372 = *(std::string *)(a29 + 8);
  }
  int v373 = *(_DWORD *)(a29 + 32);
  std::string v371 = &unk_26C5C3858;
  uint64_t v374 = *(void *)(a29 + 36);
  std::string v366 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else {
    std::string v367 = *(std::string *)(a30 + 8);
  }
  int v368 = *(_DWORD *)(a30 + 32);
  std::string v366 = &unk_26C5C3878;
  uint64_t v369 = *(void *)(a30 + 36);
  int v370 = *(_DWORD *)(a30 + 44);
  int v362 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v363, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
  }
  else {
    std::string v363 = *(std::string *)(a31 + 8);
  }
  int v364 = *(_DWORD *)(a31 + 32);
  int v362 = &unk_26C5C3858;
  uint64_t v365 = *(void *)(a31 + 36);
  uint64_t v357 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v358, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
  }
  else {
    std::string v358 = *(std::string *)(a32 + 8);
  }
  int v359 = *(_DWORD *)(a32 + 32);
  uint64_t v357 = &unk_26C5C37F8;
  char v360 = *(unsigned char *)(a32 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v361, *(const void **)(a32 + 64), *(void *)(a32 + 48), 1);
  uint64_t v353 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v354, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v354 = *(std::string *)(a33 + 8);
  }
  int v355 = *(_DWORD *)(a33 + 32);
  uint64_t v353 = &unk_26C5C3858;
  uint64_t v356 = *(void *)(a33 + 36);
  int v349 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
  }
  else {
    std::string v350 = *(std::string *)(a34 + 8);
  }
  int v351 = *(_DWORD *)(a34 + 32);
  int v349 = &unk_26C5C3858;
  uint64_t v352 = *(void *)(a34 + 36);
  char v345 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else {
    std::string v346 = *(std::string *)(a35 + 8);
  }
  int v347 = *(_DWORD *)(a35 + 32);
  char v345 = &unk_26C5C3858;
  uint64_t v348 = *(void *)(a35 + 36);
  std::string v341 = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
  }
  else {
    std::string v342 = *(std::string *)(a36 + 8);
  }
  int v343 = *(_DWORD *)(a36 + 32);
  std::string v341 = &unk_26C5C3858;
  uint64_t v344 = *(void *)(a36 + 36);
  int v337 = &unk_26C5C3AF0;
  if (*(char *)(a37 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else {
    std::string v338 = *(std::string *)(a37 + 8);
  }
  int v339 = *(_DWORD *)(a37 + 32);
  int v337 = &unk_26C5C3858;
  uint64_t v340 = *(void *)(a37 + 36);
  uint64_t v333 = &unk_26C5C3AF0;
  if (*(char *)(a38 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(a38 + 8), *(void *)(a38 + 16));
  }
  else {
    std::string v334 = *(std::string *)(a38 + 8);
  }
  int v335 = *(_DWORD *)(a38 + 32);
  uint64_t v333 = &unk_26C5C3858;
  uint64_t v336 = *(void *)(a38 + 36);
  uint64_t v328 = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
  }
  else {
    std::string v329 = *(std::string *)(a39 + 8);
  }
  int v330 = *(_DWORD *)(a39 + 32);
  uint64_t v328 = &unk_26C5C3818;
  char v331 = *(unsigned char *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)(a39 + 40), *(void *)(a39 + 48));
  }
  else {
    std::string v332 = *(std::string *)(a39 + 40);
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (*(char *)(a40 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v325, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
  }
  else {
    std::string v325 = *(std::string *)(a40 + 8);
  }
  int v326 = *(_DWORD *)(a40 + 32);
  uint64_t v324 = &unk_26C5C3858;
  uint64_t v327 = *(void *)(a40 + 36);
  uint64_t v320 = &unk_26C5C3AF0;
  if (*(char *)(a41 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
  }
  else {
    std::string v321 = *(std::string *)(a41 + 8);
  }
  int v322 = *(_DWORD *)(a41 + 32);
  uint64_t v320 = &unk_26C5C3858;
  uint64_t v323 = *(void *)(a41 + 36);
  uint64_t v316 = &unk_26C5C3AF0;
  if (*(char *)(a42 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v317, *(const std::string::value_type **)(a42 + 8), *(void *)(a42 + 16));
  }
  else {
    std::string v317 = *(std::string *)(a42 + 8);
  }
  int v318 = *(_DWORD *)(a42 + 32);
  uint64_t v316 = &unk_26C5C3858;
  uint64_t v319 = *(void *)(a42 + 36);
  uint64_t v312 = &unk_26C5C3AF0;
  if (*(char *)(a43 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a43 + 8), *(void *)(a43 + 16));
  }
  else {
    std::string v313 = *(std::string *)(a43 + 8);
  }
  int v314 = *(_DWORD *)(a43 + 32);
  uint64_t v312 = &unk_26C5C3858;
  uint64_t v315 = *(void *)(a43 + 36);
  uint64_t v308 = &unk_26C5C3AF0;
  if (*(char *)(a44 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a44 + 8), *(void *)(a44 + 16));
  }
  else {
    std::string v309 = *(std::string *)(a44 + 8);
  }
  int v310 = *(_DWORD *)(a44 + 32);
  uint64_t v308 = &unk_26C5C3858;
  uint64_t v311 = *(void *)(a44 + 36);
  int v303 = &unk_26C5C3AF0;
  if (*(char *)(a45 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a45 + 8), *(void *)(a45 + 16));
  }
  else {
    std::string v304 = *(std::string *)(a45 + 8);
  }
  int v305 = *(_DWORD *)(a45 + 32);
  int v303 = &unk_26C5C3878;
  uint64_t v306 = *(void *)(a45 + 36);
  int v307 = *(_DWORD *)(a45 + 44);
  std::string v298 = &unk_26C5C3AF0;
  if (*(char *)(a46 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(a46 + 8), *(void *)(a46 + 16));
  }
  else {
    std::string v299 = *(std::string *)(a46 + 8);
  }
  int v300 = *(_DWORD *)(a46 + 32);
  std::string v298 = &unk_26C5C3878;
  uint64_t v301 = *(void *)(a46 + 36);
  int v302 = *(_DWORD *)(a46 + 44);
  int v294 = &unk_26C5C3AF0;
  if (*(char *)(a47 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(a47 + 8), *(void *)(a47 + 16));
  }
  else {
    std::string v295 = *(std::string *)(a47 + 8);
  }
  int v296 = *(_DWORD *)(a47 + 32);
  int v294 = &unk_26C5C3858;
  uint64_t v297 = *(void *)(a47 + 36);
  int v289 = &unk_26C5C3AF0;
  if (*(char *)(a48 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(a48 + 8), *(void *)(a48 + 16));
  }
  else {
    std::string v290 = *(std::string *)(a48 + 8);
  }
  int v291 = *(_DWORD *)(a48 + 32);
  int v289 = &unk_26C5C3818;
  char v292 = *(unsigned char *)(a48 + 36);
  if (*(char *)(a48 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(a48 + 40), *(void *)(a48 + 48));
  }
  else {
    std::string v293 = *(std::string *)(a48 + 40);
  }
  int v284 = &unk_26C5C3AF0;
  if (*(char *)(a49 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(a49 + 8), *(void *)(a49 + 16));
  }
  else {
    std::string v285 = *(std::string *)(a49 + 8);
  }
  int v286 = *(_DWORD *)(a49 + 32);
  int v284 = &unk_26C5C3818;
  char v287 = *(unsigned char *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a49 + 40), *(void *)(a49 + 48));
  }
  else {
    std::string v288 = *(std::string *)(a49 + 40);
  }
  int v280 = &unk_26C5C3AF0;
  if (*(char *)(a50 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a50 + 8), *(void *)(a50 + 16));
  }
  else {
    std::string v281 = *(std::string *)(a50 + 8);
  }
  int v282 = *(_DWORD *)(a50 + 32);
  int v280 = &unk_26C5C3858;
  uint64_t v283 = *(void *)(a50 + 36);
  uint64_t v276 = &unk_26C5C3AF0;
  if (*(char *)(a51 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(a51 + 8), *(void *)(a51 + 16));
  }
  else {
    std::string v277 = *(std::string *)(a51 + 8);
  }
  int v278 = *(_DWORD *)(a51 + 32);
  uint64_t v276 = &unk_26C5C3858;
  uint64_t v279 = *(void *)(a51 + 36);
  uint64_t v272 = &unk_26C5C3AF0;
  if (*(char *)(a52 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a52 + 8), *(void *)(a52 + 16));
  }
  else {
    std::string v273 = *(std::string *)(a52 + 8);
  }
  int v274 = *(_DWORD *)(a52 + 32);
  uint64_t v272 = &unk_26C5C3858;
  uint64_t v275 = *(void *)(a52 + 36);
  std::string v268 = &unk_26C5C3AF0;
  if (*(char *)(a53 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(a53 + 8), *(void *)(a53 + 16));
  }
  else {
    std::string v269 = *(std::string *)(a53 + 8);
  }
  int v270 = *(_DWORD *)(a53 + 32);
  std::string v268 = &unk_26C5C3858;
  uint64_t v271 = *(void *)(a53 + 36);
  int v263 = &unk_26C5C3AF0;
  if (*(char *)(a54 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a54 + 8), *(void *)(a54 + 16));
  }
  else {
    std::string v264 = *(std::string *)(a54 + 8);
  }
  int v265 = *(_DWORD *)(a54 + 32);
  int v263 = &unk_26C5C3878;
  uint64_t v266 = *(void *)(a54 + 36);
  int v267 = *(_DWORD *)(a54 + 44);
  std::string v258 = &unk_26C5C3AF0;
  if (*(char *)(a55 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a55 + 8), *(void *)(a55 + 16));
  }
  else {
    std::string v259 = *(std::string *)(a55 + 8);
  }
  int v260 = *(_DWORD *)(a55 + 32);
  std::string v258 = &unk_26C5C3818;
  char v261 = *(unsigned char *)(a55 + 36);
  if (*(char *)(a55 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a55 + 40), *(void *)(a55 + 48));
  }
  else {
    std::string v262 = *(std::string *)(a55 + 40);
  }
  std::string v253 = &unk_26C5C3AF0;
  if (*(char *)(a56 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a56 + 8), *(void *)(a56 + 16));
  }
  else {
    std::string v254 = *(std::string *)(a56 + 8);
  }
  int v255 = *(_DWORD *)(a56 + 32);
  std::string v253 = &unk_26C5C3818;
  char v256 = *(unsigned char *)(a56 + 36);
  if (*(char *)(a56 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a56 + 40), *(void *)(a56 + 48));
  }
  else {
    std::string v257 = *(std::string *)(a56 + 40);
  }
  uint64_t v248 = &unk_26C5C3AF0;
  if (*(char *)(a57 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v249, *(const std::string::value_type **)(a57 + 8), *(void *)(a57 + 16));
  }
  else {
    std::string v249 = *(std::string *)(a57 + 8);
  }
  int v250 = *(_DWORD *)(a57 + 32);
  uint64_t v248 = &unk_26C5C3878;
  uint64_t v251 = *(void *)(a57 + 36);
  int v252 = *(_DWORD *)(a57 + 44);
  uint64_t v243 = &unk_26C5C3AF0;
  if (*(char *)(a58 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a58 + 8), *(void *)(a58 + 16));
  }
  else {
    std::string v244 = *(std::string *)(a58 + 8);
  }
  int v245 = *(_DWORD *)(a58 + 32);
  uint64_t v243 = &unk_26C5C3878;
  uint64_t v246 = *(void *)(a58 + 36);
  int v247 = *(_DWORD *)(a58 + 44);
  uint64_t v239 = &unk_26C5C3AF0;
  if (*(char *)(a59 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a59 + 8), *(void *)(a59 + 16));
  }
  else {
    std::string v240 = *(std::string *)(a59 + 8);
  }
  int v241 = *(_DWORD *)(a59 + 32);
  uint64_t v239 = &unk_26C5C3858;
  uint64_t v242 = *(void *)(a59 + 36);
  std::string v235 = &unk_26C5C3AF0;
  if (*(char *)(a60 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a60 + 8), *(void *)(a60 + 16));
  }
  else {
    std::string v236 = *(std::string *)(a60 + 8);
  }
  int v237 = *(_DWORD *)(a60 + 32);
  std::string v235 = &unk_26C5C3858;
  uint64_t v238 = *(void *)(a60 + 36);
  int v231 = &unk_26C5C3AF0;
  if (*(char *)(a61 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a61 + 8), *(void *)(a61 + 16));
  }
  else {
    std::string v232 = *(std::string *)(a61 + 8);
  }
  int v233 = *(_DWORD *)(a61 + 32);
  int v231 = &unk_26C5C3858;
  uint64_t v234 = *(void *)(a61 + 36);
  v227 = &unk_26C5C3AF0;
  if (*(char *)(a62 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a62 + 8), *(void *)(a62 + 16));
  }
  else {
    std::string v228 = *(std::string *)(a62 + 8);
  }
  int v229 = *(_DWORD *)(a62 + 32);
  v227 = &unk_26C5C3858;
  uint64_t v230 = *(void *)(a62 + 36);
  std::string v223 = &unk_26C5C3AF0;
  if (*(char *)(a63 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a63 + 8), *(void *)(a63 + 16));
  }
  else {
    std::string v224 = *(std::string *)(a63 + 8);
  }
  int v225 = *(_DWORD *)(a63 + 32);
  std::string v223 = &unk_26C5C3858;
  uint64_t v226 = *(void *)(a63 + 36);
  std::string v219 = &unk_26C5C3AF0;
  if (*(char *)(a64 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a64 + 8), *(void *)(a64 + 16));
  }
  else {
    std::string v220 = *(std::string *)(a64 + 8);
  }
  int v221 = *(_DWORD *)(a64 + 32);
  std::string v219 = &unk_26C5C3858;
  uint64_t v222 = *(void *)(a64 + 36);
  std::string v215 = &unk_26C5C3AF0;
  if (*(char *)(a65 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v216, *(const std::string::value_type **)(a65 + 8), *(void *)(a65 + 16));
  }
  else {
    std::string v216 = *(std::string *)(a65 + 8);
  }
  int v217 = *(_DWORD *)(a65 + 32);
  std::string v215 = &unk_26C5C3858;
  uint64_t v218 = *(void *)(a65 + 36);
  std::string v210 = &unk_26C5C3AF0;
  if (*(char *)(a66 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a66 + 8), *(void *)(a66 + 16));
  }
  else {
    std::string v211 = *(std::string *)(a66 + 8);
  }
  int v212 = *(_DWORD *)(a66 + 32);
  std::string v210 = &unk_26C5C3818;
  char v213 = *(unsigned char *)(a66 + 36);
  if (*(char *)(a66 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a66 + 40), *(void *)(a66 + 48));
  }
  else {
    std::string v214 = *(std::string *)(a66 + 40);
  }
  char v205 = &unk_26C5C3AF0;
  if (*(char *)(a67 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a67 + 8), *(void *)(a67 + 16));
  }
  else {
    std::string v206 = *(std::string *)(a67 + 8);
  }
  int v207 = *(_DWORD *)(a67 + 32);
  char v205 = &unk_26C5C3818;
  char v208 = *(unsigned char *)(a67 + 36);
  if (*(char *)(a67 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a67 + 40), *(void *)(a67 + 48));
  }
  else {
    std::string v209 = *(std::string *)(a67 + 40);
  }
  v200 = &unk_26C5C3AF0;
  if (*(char *)(a68 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a68 + 8), *(void *)(a68 + 16));
  }
  else {
    std::string v201 = *(std::string *)(a68 + 8);
  }
  int v202 = *(_DWORD *)(a68 + 32);
  v200 = &unk_26C5C3818;
  char v203 = *(unsigned char *)(a68 + 36);
  if (*(char *)(a68 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a68 + 40), *(void *)(a68 + 48));
  }
  else {
    std::string v204 = *(std::string *)(a68 + 40);
  }
  std::string v196 = &unk_26C5C3AF0;
  if (*(char *)(a69 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a69 + 8), *(void *)(a69 + 16));
  }
  else {
    std::string v197 = *(std::string *)(a69 + 8);
  }
  int v198 = *(_DWORD *)(a69 + 32);
  std::string v196 = &unk_26C5C3858;
  uint64_t v199 = *(void *)(a69 + 36);
  char v191 = &unk_26C5C3AF0;
  if (*(char *)(a70 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a70 + 8), *(void *)(a70 + 16));
  }
  else {
    std::string v192 = *(std::string *)(a70 + 8);
  }
  int v193 = *(_DWORD *)(a70 + 32);
  char v191 = &unk_26C5C3878;
  uint64_t v194 = *(void *)(a70 + 36);
  int v195 = *(_DWORD *)(a70 + 44);
  unint64_t v187 = &unk_26C5C3AF0;
  if (*(char *)(a71 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a71 + 8), *(void *)(a71 + 16));
  }
  else {
    std::string v188 = *(std::string *)(a71 + 8);
  }
  int v189 = *(_DWORD *)(a71 + 32);
  unint64_t v187 = &unk_26C5C3858;
  uint64_t v190 = *(void *)(a71 + 36);
  uint64_t v182 = &unk_26C5C3AF0;
  if (*(char *)(a72 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a72 + 8), *(void *)(a72 + 16));
  }
  else {
    std::string v183 = *(std::string *)(a72 + 8);
  }
  int v184 = *(_DWORD *)(a72 + 32);
  uint64_t v182 = &unk_26C5C3818;
  char v185 = *(unsigned char *)(a72 + 36);
  if (*(char *)(a72 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a72 + 40), *(void *)(a72 + 48));
  }
  else {
    std::string v186 = *(std::string *)(a72 + 40);
  }
  unint64_t v87 = STACK[0x1850];
  uint64_t v177 = &unk_26C5C3AF0;
  if (*(char *)(v87 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(v87 + 8), *(void *)(v87 + 16));
  }
  else {
    std::string v178 = *(std::string *)(v87 + 8);
  }
  unint64_t v88 = STACK[0x1858];
  int v179 = *(_DWORD *)(v87 + 32);
  uint64_t v177 = &unk_26C5C3878;
  uint64_t v180 = *(void *)(v87 + 36);
  int v181 = *(_DWORD *)(v87 + 44);
  uint64_t v172 = &unk_26C5C3AF0;
  if (*(char *)(v88 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(v88 + 8), *(void *)(v88 + 16));
  }
  else {
    std::string v173 = *(std::string *)(v88 + 8);
  }
  int v174 = *(_DWORD *)(v88 + 32);
  uint64_t v172 = &unk_26C5C3818;
  char v175 = *(unsigned char *)(v88 + 36);
  if (*(char *)(v88 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(v88 + 40), *(void *)(v88 + 48));
  }
  else {
    std::string v176 = *(std::string *)(v88 + 40);
  }
  unint64_t v89 = STACK[0x1860];
  uint64_t v167 = &unk_26C5C3AF0;
  if (*(char *)(v89 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(v89 + 8), *(void *)(v89 + 16));
  }
  else {
    std::string v168 = *(std::string *)(v89 + 8);
  }
  int v169 = *(_DWORD *)(v89 + 32);
  uint64_t v167 = &unk_26C5C3818;
  char v170 = *(unsigned char *)(v89 + 36);
  if (*(char *)(v89 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(v89 + 40), *(void *)(v89 + 48));
  }
  else {
    std::string v171 = *(std::string *)(v89 + 40);
  }
  unint64_t v90 = STACK[0x1868];
  uint64_t v163 = &unk_26C5C3AF0;
  if (*(char *)(v90 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(v90 + 8), *(void *)(v90 + 16));
  }
  else {
    std::string v164 = *(std::string *)(v90 + 8);
  }
  unint64_t v91 = STACK[0x1870];
  int v165 = *(_DWORD *)(v90 + 32);
  uint64_t v163 = &unk_26C5C3858;
  uint64_t v166 = *(void *)(v90 + 36);
  uint64_t v158 = &unk_26C5C3AF0;
  if (*(char *)(v91 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(v91 + 8), *(void *)(v91 + 16));
  }
  else {
    std::string v159 = *(std::string *)(v91 + 8);
  }
  unint64_t v92 = STACK[0x1878];
  int v160 = *(_DWORD *)(v91 + 32);
  uint64_t v158 = &unk_26C5C3878;
  uint64_t v161 = *(void *)(v91 + 36);
  int v162 = *(_DWORD *)(v91 + 44);
  unint64_t v154 = &unk_26C5C3AF0;
  if (*(char *)(v92 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(v92 + 8), *(void *)(v92 + 16));
  }
  else {
    std::string v155 = *(std::string *)(v92 + 8);
  }
  unint64_t v93 = STACK[0x1880];
  int v156 = *(_DWORD *)(v92 + 32);
  unint64_t v154 = &unk_26C5C3858;
  uint64_t v157 = *(void *)(v92 + 36);
  unint64_t v149 = &unk_26C5C3AF0;
  if (*(char *)(v93 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(v93 + 8), *(void *)(v93 + 16));
  }
  else {
    std::string v150 = *(std::string *)(v93 + 8);
  }
  int v151 = *(_DWORD *)(v93 + 32);
  unint64_t v149 = &unk_26C5C3818;
  char v152 = *(unsigned char *)(v93 + 36);
  if (*(char *)(v93 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(v93 + 40), *(void *)(v93 + 48));
  }
  else {
    std::string v153 = *(std::string *)(v93 + 40);
  }
  unint64_t v94 = STACK[0x1888];
  uint64_t v145 = &unk_26C5C3AF0;
  if (*(char *)(v94 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(v94 + 8), *(void *)(v94 + 16));
  }
  else {
    std::string v146 = *(std::string *)(v94 + 8);
  }
  unint64_t v95 = STACK[0x1890];
  int v147 = *(_DWORD *)(v94 + 32);
  uint64_t v145 = &unk_26C5C3858;
  uint64_t v148 = *(void *)(v94 + 36);
  unint64_t v140 = &unk_26C5C3AF0;
  if (*(char *)(v95 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(v95 + 8), *(void *)(v95 + 16));
  }
  else {
    std::string v141 = *(std::string *)(v95 + 8);
  }
  unint64_t v96 = STACK[0x1898];
  int v142 = *(_DWORD *)(v95 + 32);
  unint64_t v140 = &unk_26C5C3878;
  uint64_t v143 = *(void *)(v95 + 36);
  int v144 = *(_DWORD *)(v95 + 44);
  int v136 = &unk_26C5C3AF0;
  if (*(char *)(v96 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(v96 + 8), *(void *)(v96 + 16));
  }
  else {
    std::string v137 = *(std::string *)(v96 + 8);
  }
  unint64_t v97 = STACK[0x18A0];
  int v138 = *(_DWORD *)(v96 + 32);
  int v136 = &unk_26C5C3858;
  uint64_t v139 = *(void *)(v96 + 36);
  unint64_t v132 = &unk_26C5C3AF0;
  if (*(char *)(v97 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v97 + 8), *(void *)(v97 + 16));
  }
  else {
    std::string v133 = *(std::string *)(v97 + 8);
  }
  unint64_t v98 = STACK[0x18A8];
  int v134 = *(_DWORD *)(v97 + 32);
  unint64_t v132 = &unk_26C5C3858;
  uint64_t v135 = *(void *)(v97 + 36);
  unint64_t v128 = &unk_26C5C3AF0;
  if (*(char *)(v98 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(v98 + 8), *(void *)(v98 + 16));
  }
  else {
    std::string v129 = *(std::string *)(v98 + 8);
  }
  unint64_t v99 = STACK[0x18B0];
  int v130 = *(_DWORD *)(v98 + 32);
  unint64_t v128 = &unk_26C5C3858;
  uint64_t v131 = *(void *)(v98 + 36);
  uint64_t v123 = &unk_26C5C3AF0;
  if (*(char *)(v99 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v99 + 8), *(void *)(v99 + 16));
  }
  else {
    std::string v124 = *(std::string *)(v99 + 8);
  }
  int v125 = *(_DWORD *)(v99 + 32);
  uint64_t v123 = &unk_26C5C3818;
  char v126 = *(unsigned char *)(v99 + 36);
  if (*(char *)(v99 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(v99 + 40), *(void *)(v99 + 48));
  }
  else {
    std::string v127 = *(std::string *)(v99 + 40);
  }
  unint64_t v100 = STACK[0x18B8];
  uint64_t v118 = &unk_26C5C3AF0;
  if (*(char *)(v100 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v100 + 8), *(void *)(v100 + 16));
  }
  else {
    std::string v119 = *(std::string *)(v100 + 8);
  }
  int v120 = *(_DWORD *)(v100 + 32);
  uint64_t v118 = &unk_26C5C3818;
  char v121 = *(unsigned char *)(v100 + 36);
  if (*(char *)(v100 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)(v100 + 40), *(void *)(v100 + 48));
  }
  else {
    std::string v122 = *(std::string *)(v100 + 40);
  }
  unint64_t v101 = STACK[0x18C0];
  uint64_t v113 = &unk_26C5C3AF0;
  if (*(char *)(v101 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v101 + 8), *(void *)(v101 + 16));
  }
  else {
    std::string v114 = *(std::string *)(v101 + 8);
  }
  unint64_t v102 = STACK[0x18C8];
  int v115 = *(_DWORD *)(v101 + 32);
  uint64_t v113 = &unk_26C5C3878;
  uint64_t v116 = *(void *)(v101 + 36);
  int v117 = *(_DWORD *)(v101 + 44);
  uint64_t v109 = &unk_26C5C3AF0;
  if (*(char *)(v102 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(v102 + 8), *(void *)(v102 + 16));
  }
  else {
    std::string v110 = *(std::string *)(v102 + 8);
  }
  unint64_t v103 = STACK[0x18D0];
  int v111 = *(_DWORD *)(v102 + 32);
  uint64_t v109 = &unk_26C5C3858;
  uint64_t v112 = *(void *)(v102 + 36);
  if (*(char *)(v103 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v103 + 8), *(void *)(v103 + 16));
  }
  else {
    std::string __p = *(std::string *)(v103 + 8);
  }
  int v107 = *(_DWORD *)(v103 + 32);
  uint64_t v108 = *(void *)(v103 + 36);
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)(v105 + 10), (uint64_t)&v482, (uint64_t)&v478, (uint64_t)&v473, (uint64_t)&v468, (uint64_t)&v463, (uint64_t)&v458, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v445, (uint64_t)&v440, (uint64_t)&v436, (uint64_t)&v432, (uint64_t)&v428, (uint64_t)&v424, (uint64_t)&v419, (uint64_t)&v415, (uint64_t)&v411, (uint64_t)&v407,
    (uint64_t)&v403,
    (uint64_t)&v399,
    (uint64_t)&v395,
    (uint64_t)&v391,
    (uint64_t)&v387,
    (uint64_t)&v383,
    (uint64_t)&v379,
    (uint64_t)&v375,
    (uint64_t)&v371,
    (uint64_t)&v366,
    (uint64_t)&v362,
    (uint64_t)&v357,
    (uint64_t)&v353,
    (uint64_t)&v349,
    (uint64_t)&v345,
    (uint64_t)&v341,
    (uint64_t)&v337,
    (uint64_t)&v333,
    (uint64_t)&v328,
    (uint64_t)&v324,
    (uint64_t)&v320,
    (uint64_t)&v316,
    (uint64_t)&v312,
    (uint64_t)&v308,
    (uint64_t)&v303,
    (uint64_t)&v298,
    (uint64_t)&v294,
    (uint64_t)&v289,
    (uint64_t)&v284,
    (uint64_t)&v280,
    (uint64_t)&v276,
    (uint64_t)&v272,
    (uint64_t)&v268,
    (uint64_t)&v263,
    (uint64_t)&v258,
    (uint64_t)&v253,
    (uint64_t)&v248,
    (uint64_t)&v243,
    (uint64_t)&v239,
    (uint64_t)&v235,
    (uint64_t)&v231,
    (uint64_t)&v227,
    (uint64_t)&v223,
    (uint64_t)&v219);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v109 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  uint64_t v113 = &unk_26C5C3AF0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v118);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v123);
  unint64_t v128 = &unk_26C5C3AF0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  unint64_t v132 = &unk_26C5C3AF0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  int v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  unint64_t v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  uint64_t v145 = &unk_26C5C3AF0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v149);
  unint64_t v154 = &unk_26C5C3AF0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  uint64_t v163 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v167);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v172);
  uint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v182);
  unint64_t v187 = &unk_26C5C3AF0;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
  char v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  std::string v196 = &unk_26C5C3AF0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v200);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v205);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v210);
  std::string v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  std::string v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string v223 = &unk_26C5C3AF0;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  int v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  std::string v235 = &unk_26C5C3AF0;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  uint64_t v239 = &unk_26C5C3AF0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  uint64_t v243 = &unk_26C5C3AF0;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v244.__r_.__value_.__l.__data_);
  }
  uint64_t v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v253);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v258);
  int v263 = &unk_26C5C3AF0;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v264.__r_.__value_.__l.__data_);
  }
  std::string v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  uint64_t v272 = &unk_26C5C3AF0;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  uint64_t v276 = &unk_26C5C3AF0;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  int v280 = &unk_26C5C3AF0;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v281.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v284);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v289);
  int v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v295.__r_.__value_.__l.__data_);
  }
  std::string v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  int v303 = &unk_26C5C3AF0;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v304.__r_.__value_.__l.__data_);
  }
  uint64_t v308 = &unk_26C5C3AF0;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  uint64_t v312 = &unk_26C5C3AF0;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v313.__r_.__value_.__l.__data_);
  }
  uint64_t v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  uint64_t v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v328);
  uint64_t v333 = &unk_26C5C3AF0;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v334.__r_.__value_.__l.__data_);
  }
  int v337 = &unk_26C5C3AF0;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v338.__r_.__value_.__l.__data_);
  }
  std::string v341 = &unk_26C5C3AF0;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v342.__r_.__value_.__l.__data_);
  }
  char v345 = &unk_26C5C3AF0;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v346.__r_.__value_.__l.__data_);
  }
  int v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v350.__r_.__value_.__l.__data_);
  }
  uint64_t v353 = &unk_26C5C3AF0;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v354.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v357);
  int v362 = &unk_26C5C3AF0;
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v363.__r_.__value_.__l.__data_);
  }
  std::string v366 = &unk_26C5C3AF0;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v367.__r_.__value_.__l.__data_);
  }
  std::string v371 = &unk_26C5C3AF0;
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v372.__r_.__value_.__l.__data_);
  }
  std::string v375 = &unk_26C5C3AF0;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v376.__r_.__value_.__l.__data_);
  }
  uint64_t v379 = &unk_26C5C3AF0;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v380.__r_.__value_.__l.__data_);
  }
  uint64_t v383 = &unk_26C5C3AF0;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v384.__r_.__value_.__l.__data_);
  }
  int v387 = &unk_26C5C3AF0;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v388.__r_.__value_.__l.__data_);
  }
  std::string v391 = &unk_26C5C3AF0;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v392.__r_.__value_.__l.__data_);
  }
  std::string v395 = &unk_26C5C3AF0;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  std::string v399 = &unk_26C5C3AF0;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v400.__r_.__value_.__l.__data_);
  }
  std::string v403 = &unk_26C5C3AF0;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v404.__r_.__value_.__l.__data_);
  }
  std::string v407 = &unk_26C5C3AF0;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v408.__r_.__value_.__l.__data_);
  }
  std::string v411 = &unk_26C5C3AF0;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  int v415 = &unk_26C5C3AF0;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v416.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v419);
  std::string v424 = &unk_26C5C3AF0;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v425.__r_.__value_.__l.__data_);
  }
  std::string v428 = &unk_26C5C3AF0;
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v429.__r_.__value_.__l.__data_);
  }
  std::string v432 = &unk_26C5C3AF0;
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v433.__r_.__value_.__l.__data_);
  }
  std::string v436 = &unk_26C5C3AF0;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v437.__r_.__value_.__l.__data_);
  }
  std::string v440 = &unk_26C5C3AF0;
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v441.__r_.__value_.__l.__data_);
  }
  std::string v445 = &unk_26C5C3AF0;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v446.__r_.__value_.__l.__data_);
  }
  std::string v449 = &unk_26C5C3AF0;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v450.__r_.__value_.__l.__data_);
  }
  v453 = &unk_26C5C3AF0;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v454.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v458);
  int v463 = &unk_26C5C3AF0;
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v464.__r_.__value_.__l.__data_);
  }
  uint64_t v468 = &unk_26C5C3AF0;
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v469.__r_.__value_.__l.__data_);
  }
  v473 = &unk_26C5C3AF0;
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v474.__r_.__value_.__l.__data_);
  }
  std::string v478 = &unk_26C5C3AF0;
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v479.__r_.__value_.__l.__data_);
  }
  std::string v482 = &unk_26C5C3AF0;
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v483.__r_.__value_.__l.__data_);
  }
  return v105;
}

void sub_214DBC508(_Unwind_Exception *a1)
{
  STACK[0x4A8] = v6;
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  STACK[0x4D8] = v5;
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x508]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x548]);
  STACK[0x588] = v4;
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  STACK[0x5B8] = v3;
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  STACK[0x5E8] = v2;
  if (SLOBYTE(STACK[0x607]) < 0) {
    operator delete((void *)STACK[0x5F0]);
  }
  STACK[0x618] = v8;
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  STACK[0x648] = v1;
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x678]);
  STACK[0x6B8] = v7;
  if (SLOBYTE(STACK[0x6D7]) < 0) {
    operator delete((void *)STACK[0x6C0]);
  }
  STACK[0x6E8] = STACK[0x288];
  if (SLOBYTE(STACK[0x707]) < 0) {
    operator delete((void *)STACK[0x6F0]);
  }
  STACK[0x718] = STACK[0x290];
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x748]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x788]);
  STACK[0x7C8] = STACK[0x298];
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7F8]);
  STACK[0x838] = STACK[0x2A0];
  if (SLOBYTE(STACK[0x857]) < 0) {
    operator delete((void *)STACK[0x840]);
  }
  STACK[0x868] = STACK[0x2A8];
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  STACK[0x898] = STACK[0x2B0];
  if (SLOBYTE(STACK[0x8B7]) < 0) {
    operator delete((void *)STACK[0x8A0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x8C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x908]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x948]);
  STACK[0x988] = STACK[0x2B8];
  if (SLOBYTE(STACK[0x9A7]) < 0) {
    operator delete((void *)STACK[0x990]);
  }
  STACK[0x9B8] = STACK[0x2C0];
  if (SLOBYTE(STACK[0x9D7]) < 0) {
    operator delete((void *)STACK[0x9C0]);
  }
  STACK[0x9E8] = STACK[0x2C8];
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  STACK[0xA18] = STACK[0x2D0];
  if (SLOBYTE(STACK[0xA37]) < 0) {
    operator delete((void *)STACK[0xA20]);
  }
  STACK[0xA48] = STACK[0x2D8];
  if (SLOBYTE(STACK[0xA67]) < 0) {
    operator delete((void *)STACK[0xA50]);
  }
  STACK[0xA78] = STACK[0x2E0];
  if (SLOBYTE(STACK[0xA97]) < 0) {
    operator delete((void *)STACK[0xA80]);
  }
  STACK[0xAA8] = STACK[0x2E8];
  if (SLOBYTE(STACK[0xAC7]) < 0) {
    operator delete((void *)STACK[0xAB0]);
  }
  STACK[0xAD8] = STACK[0x2F0];
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  STACK[0xB08] = STACK[0x2F8];
  if (SLOBYTE(STACK[0xB27]) < 0) {
    operator delete((void *)STACK[0xB10]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB38]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB78]);
  STACK[0xBB8] = STACK[0x300];
  if (SLOBYTE(STACK[0xBD7]) < 0) {
    operator delete((void *)STACK[0xBC0]);
  }
  STACK[0xBE8] = STACK[0x308];
  if (SLOBYTE(STACK[0xC07]) < 0) {
    operator delete((void *)STACK[0xBF0]);
  }
  STACK[0xC18] = STACK[0x310];
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  STACK[0xC48] = STACK[0x318];
  if (SLOBYTE(STACK[0xC67]) < 0) {
    operator delete((void *)STACK[0xC50]);
  }
  STACK[0xC78] = STACK[0x320];
  if (SLOBYTE(STACK[0xC97]) < 0) {
    operator delete((void *)STACK[0xC80]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xCA8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xCE8]);
  STACK[0xD28] = STACK[0x328];
  if (SLOBYTE(STACK[0xD47]) < 0) {
    operator delete((void *)STACK[0xD30]);
  }
  STACK[0xD58] = STACK[0x330];
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  STACK[0xD88] = STACK[0x338];
  if (SLOBYTE(STACK[0xDA7]) < 0) {
    operator delete((void *)STACK[0xD90]);
  }
  STACK[0xDB8] = STACK[0x340];
  if (SLOBYTE(STACK[0xDD7]) < 0) {
    operator delete((void *)STACK[0xDC0]);
  }
  STACK[0xDE8] = STACK[0x348];
  if (SLOBYTE(STACK[0xE07]) < 0) {
    operator delete((void *)STACK[0xDF0]);
  }
  STACK[0xE18] = STACK[0x350];
  if (SLOBYTE(STACK[0xE37]) < 0) {
    operator delete((void *)STACK[0xE20]);
  }
  STACK[0xE48] = STACK[0x358];
  if (SLOBYTE(STACK[0xE67]) < 0) {
    operator delete((void *)STACK[0xE50]);
  }
  STACK[0xE78] = STACK[0x360];
  if (SLOBYTE(STACK[0xE97]) < 0) {
    operator delete((void *)STACK[0xE80]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xEA8]);
  STACK[0xEE8] = STACK[0x368];
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  STACK[0xF18] = STACK[0x370];
  if (SLOBYTE(STACK[0xF37]) < 0) {
    operator delete((void *)STACK[0xF20]);
  }
  STACK[0xF48] = STACK[0x378];
  if (SLOBYTE(STACK[0xF67]) < 0) {
    operator delete((void *)STACK[0xF50]);
  }
  STACK[0xF78] = STACK[0x380];
  if (SLOBYTE(STACK[0xF97]) < 0) {
    operator delete((void *)STACK[0xF80]);
  }
  STACK[0xFA8] = STACK[0x388];
  if (SLOBYTE(STACK[0xFC7]) < 0) {
    operator delete((void *)STACK[0xFB0]);
  }
  STACK[0xFD8] = STACK[0x390];
  if (SLOBYTE(STACK[0xFF7]) < 0) {
    operator delete((void *)STACK[0xFE0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x1008]);
  STACK[0x1058] = STACK[0x398];
  if (SLOBYTE(STACK[0x1077]) < 0) {
    operator delete((void *)STACK[0x1060]);
  }
  STACK[0x1088] = STACK[0x3A0];
  if (SLOBYTE(STACK[0x10A7]) < 0) {
    operator delete((void *)STACK[0x1090]);
  }
  STACK[0x10B8] = STACK[0x3A8];
  if (SLOBYTE(STACK[0x10D7]) < 0) {
    operator delete((void *)STACK[0x10C0]);
  }
  STACK[0x10E8] = STACK[0x3B0];
  if (SLOBYTE(STACK[0x1107]) < 0) {
    operator delete((void *)STACK[0x10F0]);
  }
  STACK[0x1118] = STACK[0x3B8];
  if (SLOBYTE(STACK[0x1137]) < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  STACK[0x1148] = STACK[0x3C0];
  if (SLOBYTE(STACK[0x1167]) < 0) {
    operator delete((void *)STACK[0x1150]);
  }
  STACK[0x1178] = STACK[0x3C8];
  if (SLOBYTE(STACK[0x1197]) < 0) {
    operator delete((void *)STACK[0x1180]);
  }
  STACK[0x11A8] = STACK[0x3D0];
  if (SLOBYTE(STACK[0x11C7]) < 0) {
    operator delete((void *)STACK[0x11B0]);
  }
  STACK[0x11D8] = STACK[0x3D8];
  if (SLOBYTE(STACK[0x11F7]) < 0) {
    operator delete((void *)STACK[0x11E0]);
  }
  STACK[0x1208] = STACK[0x3E0];
  if (SLOBYTE(STACK[0x1227]) < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  STACK[0x1238] = STACK[0x3E8];
  if (SLOBYTE(STACK[0x1257]) < 0) {
    operator delete((void *)STACK[0x1240]);
  }
  STACK[0x1268] = STACK[0x3F0];
  if (SLOBYTE(STACK[0x1287]) < 0) {
    operator delete((void *)STACK[0x1270]);
  }
  STACK[0x1298] = STACK[0x3F8];
  if (SLOBYTE(STACK[0x12B7]) < 0) {
    operator delete((void *)STACK[0x12A0]);
  }
  STACK[0x12C8] = STACK[0x400];
  if (SLOBYTE(STACK[0x12E7]) < 0) {
    operator delete((void *)STACK[0x12D0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x12F8]);
  STACK[0x1338] = STACK[0x408];
  if (SLOBYTE(STACK[0x1357]) < 0) {
    operator delete((void *)STACK[0x1340]);
  }
  STACK[0x1368] = STACK[0x410];
  if (SLOBYTE(STACK[0x1387]) < 0) {
    operator delete((void *)STACK[0x1370]);
  }
  STACK[0x1398] = STACK[0x418];
  if (SLOBYTE(STACK[0x13B7]) < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  STACK[0x13C8] = STACK[0x420];
  if (SLOBYTE(STACK[0x13E7]) < 0) {
    operator delete((void *)STACK[0x13D0]);
  }
  STACK[0x13F8] = STACK[0x428];
  if (SLOBYTE(STACK[0x1417]) < 0) {
    operator delete((void *)STACK[0x1400]);
  }
  STACK[0x1428] = STACK[0x430];
  if (SLOBYTE(STACK[0x1447]) < 0) {
    operator delete((void *)STACK[0x1430]);
  }
  STACK[0x1458] = STACK[0x438];
  if (SLOBYTE(STACK[0x1477]) < 0) {
    operator delete((void *)STACK[0x1460]);
  }
  STACK[0x1488] = STACK[0x440];
  if (SLOBYTE(STACK[0x14A7]) < 0) {
    operator delete((void *)STACK[0x1490]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x14B8]);
  STACK[0x14F8] = STACK[0x448];
  if (SLOBYTE(STACK[0x1517]) < 0) {
    operator delete((void *)STACK[0x1500]);
  }
  STACK[0x1528] = STACK[0x450];
  if (SLOBYTE(STACK[0x1547]) < 0) {
    operator delete((void *)STACK[0x1530]);
  }
  *(void *)(v9 - 232) = STACK[0x458];
  if (SLOBYTE(STACK[0x1577]) < 0) {
    operator delete(*(void **)(v9 - 224));
  }
  *(void *)(v9 - 184) = STACK[0x460];
  if (SLOBYTE(STACK[0x15A7]) < 0) {
    operator delete(*(void **)(v9 - 176));
  }
  *(void *)(v9 - 136) = STACK[0x468];
  if (SLOBYTE(STACK[0x15D7]) < 0) {
    operator delete(*(void **)(v9 - 128));
  }
  if (*(char *)(STACK[0x470] + 79) < 0) {
    operator delete(*(void **)STACK[0x280]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)STACK[0x470]);
  _Unwind_Resume(a1);
}

void sub_214DBD140()
{
  STACK[0x1008] = v0;
  if (SLOBYTE(STACK[0x1027]) < 0) {
    operator delete((void *)STACK[0x1010]);
  }
  JUMPOUT(0x214DBCDE8);
}

uint64_t mlcore::ComparisonPredicate<std::string>::~ComparisonPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C78C8;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t mlcore::Entity::propertyCache(mlcore::Entity *this)
{
  return (uint64_t)this + 8;
}

void mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(long long **this@<X0>, const mediaplatform::ContentBundle *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v8 = &unk_26C5BF338;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, this[1], this[2], 0xAAAAAAAAAAAAAAABLL * (((char *)this[2] - (char *)this[1]) >> 3));
  mediaplatform::FilePath::operator+((uint64_t)&v8, (uint64_t)a2, (uint64_t)&v6);
  mediaplatform::FilePath::str((mediaplatform::FilePath *)&v6, a3);
  unint64_t v6 = (std::string *)&unk_26C5BF338;
  char v10 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v8 = &unk_26C5BF338;
  unint64_t v6 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_214DBD2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)&unk_26C5BF338;
  *(void *)(v11 - 40) = v10 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void mediaplatform::FilePath::str(mediaplatform::FilePath *this@<X0>, uint64_t a2@<X8>)
{
  memset(&v20, 0, sizeof(v20));
  char v19 = 1;
  LOWORD(__s2[0]) = 47;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v3 = (long long *)*((void *)this + 2);
  unint64_t v5 = (std::vector<std::string> *)((char *)this + 8);
  if (v3 != (long long *)v4)
  {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = (v6 & 0x80u) == 0 ? *(unsigned __int8 *)(v4 + 23) : *(void *)(v4 + 8);
    if (v7 == 1)
    {
      if ((v6 & 0x80) == 0)
      {
        if (*(unsigned char *)(v4 + 23))
        {
          unint64_t v8 = __s2;
          std::string v9 = (unsigned __int8 *)*((void *)this + 1);
          while (*v9 == *(unsigned __int8 *)v8)
          {
            ++v9;
            unint64_t v8 = (void ***)((char *)v8 + 1);
            if (!--v6) {
              goto LABEL_19;
            }
          }
          goto LABEL_13;
        }
LABEL_19:
        uint64_t v10 = (long long *)(v4 + 24);
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        char v22 = 0;
        if (v3 != v10)
        {
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v10) >> 3);
          if (v11 >= 0xAAAAAAAAAAAAAABLL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          __p.__begin_ = (std::vector<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v11);
          __p.__end_ = __p.__begin_;
          __p.__end_cap_.__value_ = &__p.__begin_[v12];
          __p.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__end_cap_, v10, v3, __p.__begin_);
        }
        std::vector<std::string>::__vdeallocate(&v20);
        std::vector<std::string> v20 = __p;
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        mediaplatform::ComponentsJoinedByString<std::string>((uint64_t)&__p, (uint64_t *)&v20, (uint64_t)__s2);
        if (v19 >= 0) {
          uint64_t v13 = (const std::string::value_type *)__s2;
        }
        else {
          uint64_t v13 = (const std::string::value_type *)__s2[0];
        }
        if (v19 >= 0) {
          std::string::size_type v14 = v19;
        }
        else {
          std::string::size_type v14 = (std::string::size_type)__s2[1];
        }
        uint64_t v15 = std::string::insert((std::string *)&__p, 0, v13, v14);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(void *)(a2 + 16) = *((void *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)a2 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
          operator delete(__p.__begin_);
        }
        goto LABEL_16;
      }
      if (!memcmp(*(const void **)v4, __s2, *(void *)(v4 + 8))) {
        goto LABEL_19;
      }
    }
  }
LABEL_13:
  if (&v20 != v5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (std::string *)v4, v3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v4) >> 3));
  }
  mediaplatform::ComponentsJoinedByString<std::string>(a2, (uint64_t *)&v20, (uint64_t)__s2);
LABEL_16:
  if (v19 < 0) {
    operator delete(__s2[0]);
  }
  __s2[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](__s2);
}

void sub_214DBD51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 64));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::vector<std::string> __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_214DBD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t mediaplatform::ComponentsJoinedByString<std::string>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v6 != v5)
  {
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
      {
        int v8 = *(char *)(a3 + 23);
        if (v8 >= 0) {
          uint64_t v9 = a3;
        }
        else {
          uint64_t v9 = *(void *)a3;
        }
        if (v8 >= 0) {
          uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v10 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v9, v10);
      }
      int v11 = *(char *)(v6 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = *(void *)v6;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v6 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v12, v13);
      char v7 = 0;
      v6 += 24;
    }
    while (v6 != v5);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v17);
}

void sub_214DBD7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLFromStatement::sql(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (a2)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 8))(&v17, a2);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v17.__r_.__value_.__r.__words[0] + 48, (unsigned __int8 *)(a1 + 8), a1 + 8);
    if (v17.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17.__r_.__value_.__l.__size_);
    }
  }
  int v4 = *(char *)(a1 + 31);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 8;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v5, v6);
  char v7 = *(uint64_t **)(a1 + 32);
  int v8 = *(uint64_t **)(a1 + 40);
  if (v7 != v8)
  {
    while (1)
    {
      uint64_t v10 = *v7;
      uint64_t v9 = (std::__shared_weak_count *)v7[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!a2) {
        goto LABEL_24;
      }
      if (*(char *)(v10 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v10 + 16), *(void *)(v10 + 24));
      }
      else {
        std::string v17 = *(std::string *)(v10 + 16);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 8))(&v15, a2);
      uint64_t v11 = v15 + 48;
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v15 + 48), (unsigned __int8 *)&v17))break; {
      if (v16)
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_31:
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v17.__r_.__value_.__l.__data_);
        if (!v9) {
          goto LABEL_34;
        }
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        goto LABEL_34;
      }
      if (v9) {
        goto LABEL_33;
      }
LABEL_34:
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_38;
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v11, (unsigned __int8 *)&v17, (uint64_t)&v17);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
LABEL_24:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 16))(&v17, v10, a2);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v17;
    }
    else {
      uint64_t v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v12, size);
    goto LABEL_31;
  }
LABEL_38:
  std::stringbuf::str();
  v18[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v18[1] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v20);
}

void sub_214DBDB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t mlcore::SQLRenderer::currentSQLRenderingContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 72);
  uint64_t v4 = *(void *)(v2 - 16);
  uint64_t v3 = *(void *)(v2 - 8);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::DatabaseConnection::_prepareStatement(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  *a3 = 0;
  a3[1] = 0;
  if (*(unsigned char *)(a1 + 146))
  {
    uint64_t v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 232), a2);
    if (v6)
    {
      char v7 = v6;
      int v8 = (_OWORD *)*((void *)v6 + 7);
      uint64_t v9 = operator new(0x20uLL);
      v9[1] = v8[1];
      uint64_t v10 = *(void *)(a1 + 272);
      *(void *)(v10 + 8) = v9;
      *(void *)(a1 + 272) = v9;
      *(void *)uint64_t v9 = v10;
      *((void *)v9 + 1) = a1 + 272;
      uint64_t v11 = *(void *)v8;
      *(void *)(v11 + 8) = *((void *)v8 + 1);
      **((void **)v8 + 1) = v11;
      operator delete(v8);
      *((void *)v7 + 7) = v9;
      uint64_t v13 = *((void *)v7 + 5);
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 6);
      if (v12)
      {
        char v14 = 0;
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        char v14 = 1;
      }
      *a3 = v13;
      a3[1] = (uint64_t)v12;
      int v32 = sqlite3_reset(*(sqlite3_stmt **)(v13 + 24));
      mediaplatform::DatabaseStatement::_checkSQLiteResult(v13, v32);
      *(_DWORD *)(v13 + 56) = -1;
      int v33 = sqlite3_clear_bindings(*(sqlite3_stmt **)(v13 + 24));
      mediaplatform::DatabaseStatement::_checkSQLiteResult(v13, v33);
      if ((v14 & 1) == 0)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      return;
    }
  }
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x58uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF670;
  char v16 = v15 + 1;
  mediaplatform::DatabaseStatement::DatabaseStatement((uint64_t)&v15[1], *(sqlite3 **)a1, v3);
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = (uint64_t)v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_10:
  *a3 = (uint64_t)v16;
  a3[1] = (uint64_t)v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v19 = *(std::__shared_weak_count ***)(a1 + 304);
  unint64_t v18 = *(void *)(a1 + 312);
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = *(char **)(a1 + 296);
    uint64_t v22 = ((char *)v19 - v21) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v18 - (void)v21;
    if (v24 >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v26 = (char *)operator new(16 * v25);
    long long v27 = (std::__shared_weak_count **)&v26[16 * v22];
    char v28 = &v26[16 * v25];
    *long long v27 = v16;
    v27[1] = v15;
    uint64_t v20 = v27 + 2;
    if (v19 == (std::__shared_weak_count **)v21)
    {
      *(void *)(a1 + 296) = v27;
      *(void *)(a1 + 304) = v20;
      *(void *)(a1 + 312) = v28;
    }
    else
    {
      do
      {
        long long v29 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *((_OWORD *)v27 - 1) = v29;
        v27 -= 2;
        *char v19 = 0;
        v19[1] = 0;
      }
      while (v19 != (std::__shared_weak_count **)v21);
      char v19 = *(std::__shared_weak_count ***)(a1 + 296);
      char v30 = *(std::__shared_weak_count ***)(a1 + 304);
      *(void *)(a1 + 296) = v27;
      *(void *)(a1 + 304) = v20;
      *(void *)(a1 + 312) = v28;
      while (v30 != v19)
      {
        int v31 = *(v30 - 1);
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        v30 -= 2;
      }
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v19 = v16;
    v19[1] = v15;
    uint64_t v20 = v19 + 2;
    *(void *)(a1 + 304) = v19 + 2;
  }
  *(void *)(a1 + 304) = v20;
  if (!*(unsigned char *)(a1 + 146)) {
    return;
  }
  char v34 = (void **)(a1 + 232);
  unint64_t v35 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 232), (unsigned __int8 *)v3);
  if (v35) {
    mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::_removeEntry((void *)(a1 + 208), v35);
  }
  if (*(void *)(a1 + 224) > *(void *)(a1 + 216))
  {
    uint64_t v36 = a1 + 272;
    uint64_t v37 = a1 + 280;
    do
    {
      do
      {
        uint64_t v38 = *(void *)v37;
        uint64_t v39 = *(void *)(*(void *)v37 + 24);
        uint64_t v37 = *(void *)v37 + 8;
      }
      while (v38 != v36 && v39 == 0);
      if (v38 == v36)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no room in cache");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::_removeEntry((void *)(a1 + 208), *(void **)(v38 + 16));
      uint64_t v37 = a1 + 280;
    }
    while (*(void *)(a1 + 224) > *(void *)(a1 + 216));
  }
  if ((unint64_t)(*(void *)(a1 + 256) + 1) > *(void *)(a1 + 208)) {
    mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::_removeEntry((void *)(a1 + 208), *(void **)(*(void *)(a1 + 280) + 16));
  }
  char v41 = operator new(0x20uLL);
  v41[2] = 0;
  v41[3] = 0;
  uint64_t v42 = *(void *)(a1 + 272);
  *(void *)(v42 + 8) = v41;
  *(void *)(a1 + 272) = v41;
  *char v41 = v42;
  v41[1] = a1 + 272;
  ++*(void *)(a1 + 288);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  if (*(char *)(v3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
  }
  else {
    std::string v75 = *(std::string *)v3;
  }
  *(void *)&long long v76 = v15 + 1;
  *((void *)&v76 + 1) = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v77 = v41;
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v75);
  unint64_t v44 = v43;
  unint64_t v45 = *(void *)(a1 + 240);
  if (v45)
  {
    uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v46.i16[0] = vaddlv_u8(v46);
    unint64_t v47 = v46.u32[0];
    if (v46.u32[0] > 1uLL)
    {
      uint64_t v3 = v43;
      if (v43 >= v45) {
        uint64_t v3 = v43 % v45;
      }
    }
    else
    {
      uint64_t v3 = (v45 - 1) & v43;
    }
    char v48 = (unsigned __int8 **)*((void *)*v34 + v3);
    if (v48)
    {
      for (uint64_t i = *v48; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v50 = *((void *)i + 1);
        if (v50 == v44)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v75))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            goto LABEL_126;
          }
        }
        else
        {
          if (v47 > 1)
          {
            if (v50 >= v45) {
              v50 %= v45;
            }
          }
          else
          {
            v50 &= v45 - 1;
          }
          if (v50 != v3) {
            break;
          }
        }
      }
    }
  }
  char v51 = (char *)operator new(0x40uLL);
  uint64_t v52 = (unsigned __int8 **)(a1 + 248);
  v78[0] = v51;
  v78[1] = a1 + 248;
  char v79 = 0;
  *(void *)char v51 = 0;
  *((void *)v51 + 1) = v44;
  char v53 = (std::string *)(v51 + 16);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v53, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
    *((void *)v51 + 4) = *((void *)&v75.__r_.__value_.__l + 2);
  }
  *(_OWORD *)(v51 + 40) = v76;
  long long v76 = 0uLL;
  *((void *)v51 + 7) = v41;
  char v79 = 1;
  float v54 = (float)(unint64_t)(*(void *)(a1 + 256) + 1);
  float v55 = *(float *)(a1 + 264);
  if (!v45 || (float)(v55 * (float)v45) < v54)
  {
    BOOL v56 = 1;
    if (v45 >= 3) {
      BOOL v56 = (v45 & (v45 - 1)) != 0;
    }
    unint64_t v57 = v56 | (2 * v45);
    unint64_t v58 = vcvtps_u32_f32(v54 / v55);
    if (v57 <= v58) {
      int8x8_t prime = (int8x8_t)v58;
    }
    else {
      int8x8_t prime = (int8x8_t)v57;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v45 = *(void *)(a1 + 240);
    if (*(void *)&prime > v45) {
      goto LABEL_82;
    }
    if (*(void *)&prime < v45)
    {
      unint64_t v66 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
      if (v45 < 3 || (uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        unint64_t v66 = std::__next_prime(v66);
      }
      else
      {
        uint64_t v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2) {
          unint64_t v66 = v68;
        }
      }
      if (*(void *)&prime <= v66) {
        int8x8_t prime = (int8x8_t)v66;
      }
      if (*(void *)&prime >= v45)
      {
        unint64_t v45 = *(void *)(a1 + 240);
      }
      else
      {
        if (prime)
        {
LABEL_82:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v60 = operator new(8 * *(void *)&prime);
          char v61 = *v34;
          void *v34 = v60;
          if (v61) {
            operator delete(v61);
          }
          uint64_t v62 = 0;
          *(int8x8_t *)(a1 + 240) = prime;
          do
            *((void *)*v34 + v62++) = 0;
          while (*(void *)&prime != v62);
          char v63 = *v52;
          if (*v52)
          {
            unint64_t v64 = *((void *)v63 + 1);
            uint8x8_t v65 = (uint8x8_t)vcnt_s8(prime);
            v65.i16[0] = vaddlv_u8(v65);
            if (v65.u32[0] > 1uLL)
            {
              if (v64 >= *(void *)&prime) {
                v64 %= *(void *)&prime;
              }
            }
            else
            {
              v64 &= *(void *)&prime - 1;
            }
            *((void *)*v34 + v64) = v52;
            uint64_t v69 = *(unsigned __int8 **)v63;
            if (*(void *)v63)
            {
              do
              {
                unint64_t v70 = *((void *)v69 + 1);
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= *(void *)&prime) {
                    v70 %= *(void *)&prime;
                  }
                }
                else
                {
                  v70 &= *(void *)&prime - 1;
                }
                if (v70 != v64)
                {
                  if (!*((void *)*v34 + v70))
                  {
                    *((void *)*v34 + v70) = v63;
                    goto LABEL_107;
                  }
                  *(void *)char v63 = *(void *)v69;
                  *(void *)uint64_t v69 = **((void **)*v34 + v70);
                  **((void **)*v34 + v70) = v69;
                  uint64_t v69 = v63;
                }
                unint64_t v70 = v64;
LABEL_107:
                char v63 = v69;
                uint64_t v69 = *(unsigned __int8 **)v69;
                unint64_t v64 = v70;
              }
              while (v69);
            }
          }
          unint64_t v45 = (unint64_t)prime;
          goto LABEL_111;
        }
        uint64_t v73 = *v34;
        void *v34 = 0;
        if (v73) {
          operator delete(v73);
        }
        unint64_t v45 = 0;
        *(void *)(a1 + 240) = 0;
      }
    }
LABEL_111:
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v44 >= v45) {
        uint64_t v3 = v44 % v45;
      }
      else {
        uint64_t v3 = v44;
      }
    }
    else
    {
      uint64_t v3 = (v45 - 1) & v44;
    }
  }
  char v71 = (unsigned __int8 **)*((void *)*v34 + v3);
  uint64_t i = (unsigned __int8 *)v78[0];
  if (v71)
  {
    *(void *)v78[0] = *v71;
  }
  else
  {
    *(void *)v78[0] = *v52;
    void *v52 = i;
    *((void *)*v34 + v3) = v52;
    if (!*(void *)i) {
      goto LABEL_125;
    }
    unint64_t v72 = *(void *)(*(void *)i + 8);
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v72 >= v45) {
        v72 %= v45;
      }
    }
    else
    {
      v72 &= v45 - 1;
    }
    char v71 = (unsigned __int8 **)((char *)*v34 + 8 * v72);
  }
  void *v71 = i;
LABEL_125:
  v78[0] = 0;
  ++*(void *)(a1 + 256);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)v78);
LABEL_126:
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  v41[2] = i;
}

void sub_214DBE410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::chrono::nanoseconds __ns, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)&a18);
  std::pair<std::string const,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>::~pair((uint64_t)&__ns);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (a2 == 1)
  {
    uint64_t v21 = (const mediaplatform::PlatformErrorCondition *)__cxa_begin_catch(a1);
    uint64_t v22 = v21;
    if ((*((_DWORD *)v21 + 2) & 0xFFFFFFFE) == 0xC)
    {
      __ns.__rep_ = 1000000000;
      std::this_thread::sleep_for (&__ns);
      exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, v22);
    }
    mediaplatform::DatabaseConnection::_handleStatementPrepareError((uint64_t)v21, v21);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void sub_214DBE544(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  __cxa_end_catch();
  JUMPOUT(0x214DBE564);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t mediaplatform::SQLJoinClause::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown join operator");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (&off_26422ED40)[v2]);
  if ((v14 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = v14;
  }
  else {
    uint64_t v4 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" JOIN ", 6);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  int v5 = *(char *)(a1 + 39);
  if (v5 >= 0) {
    uint64_t v6 = a1 + 16;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 24);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v6, v7);
  if (*(void *)(a1 + 40))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 16))(&__p);
    unint64_t v8 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v9 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, v9);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v17);
}

void sub_214DBE8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLBinaryExpressionList::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  if (*(void *)(a1 + 48) != *(void *)(a1 + 56))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (", 2);
    uint64_t v2 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56) != v2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        (*(void (**)(void **__return_ptr))(**(void **)(v2 + v3) + 16))(__p);
        if ((v16 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v16 & 0x80u) == 0) {
          uint64_t v6 = v16;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v5, v6);
        if ((char)v16 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v2 = *(void *)(a1 + 48);
        unint64_t v7 = (*(void *)(a1 + 56) - v2) >> 4;
        if (v4 < v7 - 1)
        {
          unint64_t v8 = (mediaplatform::SQLBinaryExpression *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
          uint64_t v9 = (void *)mediaplatform::SQLBinaryExpression::operatorStrings(v8);
          uint64_t v10 = *v9 + 24 * *(unsigned int *)(a1 + 8);
          int v11 = *(char *)(v10 + 23);
          if (v11 >= 0) {
            uint64_t v12 = *v9 + 24 * *(unsigned int *)(a1 + 8);
          }
          else {
            uint64_t v12 = *(void *)v10;
          }
          if (v11 >= 0) {
            uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v13 = *(void *)(v10 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v12, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
          uint64_t v2 = *(void *)(a1 + 48);
          unint64_t v7 = (*(void *)(a1 + 56) - v2) >> 4;
        }
        ++v4;
        v3 += 16;
      }
      while (v4 < v7);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") ", 2);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v17[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v19);
}

void sub_214DBEBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mediaplatform::FormatImplementation<std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  uint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    long long v27 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    long long v27 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    long long v27 = v9 + 2;
    int v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v17 = 0;
      char v18 = v9 + 3;
      do
      {
        uint64_t v19 = v18;
        long long v27 = v18;
        uint64_t v17 = (v16 - 48) + 10 * v17;
        ++v18;
        int v21 = *v19;
        uint64_t v20 = (unsigned __int8 *)(v19 - 1);
        int v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      long long v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string>(v17);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v23, (const char **)&v27);
  if (*((void *)&v23 + 1))
  {
    if (*((void *)&v23 + 1) != 1) {
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string>>();
    }
    uint64_t v12 = *a4;
  }
  else
  {
    uint64_t v12 = a4[1];
  }
  uint64_t v28 = v12;
  long long v29 = v23;
  long long v30 = v24;
  long long v31 = v25;
  uint64_t v32 = v26;
  if (*(char *)(v12 + 23) < 0) {
    unint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  unint64_t v14 = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1) <= v13) {
    unint64_t v14 = v13;
  }
  if ((_BYTE)v24) {
    unint64_t v13 = v14;
  }
  mediaplatform::FormatImplementation<std::string,std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (char *)a2;
  }
  else {
    uint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v23, &v15[i], (uint64_t)&v28);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_214DBEE58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLBinaryExpression::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = (mediaplatform::SQLBinaryExpression *)(*(void *(**)(void **__return_ptr))(**(void **)(a1 + 16)
                                                                                            + 16))(v10);
  int v5 = (uint64_t *)mediaplatform::SQLBinaryExpression::operatorStrings(v4);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *v5;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 32) + 16))(__p);
  v12[0] = (uint64_t)__p;
  v12[1] = v7 + 24 * v6;
  v12[2] = (uint64_t)v10;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string,std::string,std::string>((std::string *)"({0} {1} {2})", a2, 0, v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_214DBEF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  char v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    long long v27 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    long long v27 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    long long v27 = v9 + 2;
    int v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v17 = 0;
      char v18 = v9 + 3;
      do
      {
        uint64_t v19 = v18;
        long long v27 = v18;
        uint64_t v17 = (v16 - 48) + 10 * v17;
        ++v18;
        int v21 = *v19;
        uint64_t v20 = (unsigned __int8 *)(v19 - 1);
        int v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      long long v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string>(v17);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v23, (const char **)&v27);
  if (*((void *)&v23 + 1))
  {
    if (*((void *)&v23 + 1) == 1)
    {
      uint64_t v12 = a4[1];
    }
    else
    {
      if (*((void *)&v23 + 1) != 2) {
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string>>();
      }
      uint64_t v12 = *a4;
    }
  }
  else
  {
    uint64_t v12 = a4[2];
  }
  uint64_t v28 = v12;
  long long v29 = v23;
  long long v30 = v24;
  long long v31 = v25;
  uint64_t v32 = v26;
  if (*(char *)(v12 + 23) < 0) {
    unint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  unint64_t v14 = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1) <= v13) {
    unint64_t v14 = v13;
  }
  if ((_BYTE)v24) {
    unint64_t v13 = v14;
  }
  mediaplatform::FormatImplementation<std::string,std::string,std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (char *)a2;
  }
  else {
    uint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v23, &v15[i], (uint64_t)&v28);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_214DBF22C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *mediaplatform::CopyFormatSectionToResult(std::string *__s, std::string *this, std::string::size_type __pos, std::string::size_type __n1, int a5)
{
  unsigned int v6 = __s;
  if (a5)
  {
    while (1)
    {
      int v7 = v6->__r_.__value_.__s.__data_[0];
      if (v7 == 123)
      {
        int v8 = v6->__r_.__value_.__s.__data_[1];
        unsigned int v6 = (std::string *)((char *)v6 + 1);
        LOBYTE(v7) = v8;
        if (v8 != 123) {
          return __s;
        }
      }
      else if (!v6->__r_.__value_.__s.__data_[0])
      {
        return __s;
      }
      char v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v9 = this;
      }
      v9->__r_.__value_.__s.__data_[__pos++] = v7;
      unsigned int v6 = (std::string *)((char *)v6 + 1);
    }
  }
  return std::string::replace(this, __pos, __n1, (const std::string::value_type *)__s, __n1);
}

_DWORD *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(_DWORD *result, char *__dst, uint64_t a3)
{
  unint64_t v4 = result;
  int v5 = *(void **)a3;
  int v6 = *(char *)(*(void *)a3 + 23);
  size_t v7 = *(unsigned __int8 *)(*(void *)a3 + 23);
  if (v6 < 0) {
    unint64_t v8 = v5[1];
  }
  else {
    unint64_t v8 = *(unsigned __int8 *)(*(void *)a3 + 23);
  }
  if (!*((unsigned char *)result + 16) || (unint64_t v9 = *((void *)result + 3), v10 = v9 - v8, v9 <= v8))
  {
    if (v6 < 0)
    {
      int v5 = (void *)*v5;
      size_t v7 = *(void *)(*(void *)a3 + 8);
      if (!v7) {
        return result;
      }
    }
    else if (!*(unsigned char *)(*(void *)a3 + 23))
    {
      return result;
    }
    unint64_t v13 = __dst;
    size_t v12 = v7;
LABEL_20:
    return memmove(v13, v5, v12);
  }
  int v11 = *result;
  if (*result)
  {
    if (v11 != 1)
    {
      if (v11 != 2) {
        return result;
      }
      if (v9 != v8)
      {
        do
        {
          *__dst++ = *((unsigned char *)result + 52);
          --v10;
        }
        while (v10);
        int v5 = *(void **)a3;
        LOBYTE(v6) = *(unsigned char *)(*(void *)a3 + 23);
      }
      if ((v6 & 0x80) != 0)
      {
        long long v23 = v5;
        int v5 = (void *)*v5;
        size_t v12 = v23[1];
        if (!v12) {
          return result;
        }
      }
      else
      {
        size_t v12 = v6;
        if (!(_BYTE)v6) {
          return result;
        }
      }
      unint64_t v13 = __dst;
      goto LABEL_20;
    }
    unint64_t v15 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v10 >> 1;
      }
      do
      {
        *__dst++ = *((unsigned char *)result + 52);
        --v16;
      }
      while (v16);
      int v5 = *(void **)a3;
      LOBYTE(v6) = *(unsigned char *)(*(void *)a3 + 23);
    }
    if ((v6 & 0x80) != 0)
    {
      uint64_t v22 = v5;
      int v5 = (void *)*v5;
      size_t v17 = v22[1];
      if (!v17)
      {
LABEL_40:
        if (v10 != v15)
        {
          unint64_t v18 = v10 - (v10 >> 1);
          uint64_t v19 = &__dst[v8];
          if (v18 <= 1) {
            unint64_t v18 = 1;
          }
          uint64_t v20 = -(uint64_t)v18;
          do
            *v19++ = v4[52];
          while (!__CFADD__(v20++, 1));
        }
        return result;
      }
    }
    else
    {
      size_t v17 = v6;
      if (!(_BYTE)v6) {
        goto LABEL_40;
      }
    }
    uint64_t result = memmove(__dst, v5, v17);
    goto LABEL_40;
  }
  if (v6 < 0)
  {
    int v5 = (void *)*v5;
    size_t v7 = *(void *)(*(void *)a3 + 8);
  }
  if (v7) {
    uint64_t result = memmove(__dst, v5, v7);
  }
  if (v9 != v8)
  {
    unint64_t v14 = &__dst[v8];
    do
    {
      *v14++ = v4[52];
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t mediaplatform::FormatOptions::FormatOptions(uint64_t this, const char **a2)
{
  *(void *)this = 2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_43;
  }
  int v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_50:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_43;
  }
  uint64_t v5 = 0;
  int v6 = v2 + 2;
  do
  {
    size_t v7 = v6;
    *a2 = v6;
    uint64_t v5 = (v4 - 48) + 10 * v5;
    unint64_t v8 = v6 - 1;
    int v4 = *(unsigned __int8 *)v6++;
  }
  while ((v4 - 58) >= 0xFFFFFFF6);
  *(void *)(this + 8) = v5;
  int v9 = *(unsigned __int8 *)v7;
  if (v9 == 58)
  {
    while (1)
    {
      unint64_t v8 = v7++;
      *a2 = v7;
      int v10 = *((unsigned __int8 *)v8 + 1);
      if (v10 == 125) {
        goto LABEL_7;
      }
      if (!v8[1]) {
        goto LABEL_42;
      }
      if ((char)v10 <= 97)
      {
        if ((char)v10 <= 75)
        {
          switch((char)v10)
          {
            case '&':
              *(unsigned char *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_49;
            case '+':
              *(unsigned char *)(this + 48) = 1;
              size_t v7 = v8 + 2;
              *a2 = v8 + 2;
              int v17 = *((unsigned __int8 *)v8 + 2);
              *(unsigned char *)(this + 49) = v17;
              if (v17) {
                continue;
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_43;
            case ',':
              continue;
            case '.':
              *(unsigned char *)(this + 32) = 1;
              *a2 = v8 + 2;
              int v18 = *((unsigned __int8 *)v8 + 2);
              if ((v18 - 48) > 9) {
                goto LABEL_50;
              }
              uint64_t v19 = 0;
              uint64_t v20 = v8 + 3;
              do
              {
                *a2 = v20;
                uint64_t v19 = (v18 - 48) + 10 * v19;
                int v21 = v20++;
                int v22 = *(unsigned __int8 *)v21;
                size_t v7 = v21 - 1;
                int v18 = v22;
              }
              while ((v22 - 58) >= 0xFFFFFFF6);
              *(void *)(this + 40) = v19;
              *a2 = v7;
              continue;
            case '0':
              *(unsigned char *)(this + 50) = 1;
              continue;
            default:
              if ((char)v10 == 67) {
                goto LABEL_28;
              }
              goto LABEL_49;
          }
        }
        switch((char)v10)
        {
          case 'P':
            goto LABEL_17;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_49;
          case 'R':
            goto LABEL_22;
          case 'W':
            goto LABEL_23;
          case 'X':
            *(unsigned char *)(this + 51) = 1;
            goto LABEL_41;
          default:
            if ((char)v10 == 76) {
              goto LABEL_30;
            }
            goto LABEL_49;
        }
      }
      switch((char)v10)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_28:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_49;
        case 'l':
LABEL_30:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_17:
          size_t v7 = v8 + 2;
          *a2 = v8 + 2;
          int v11 = *((unsigned __int8 *)v8 + 2);
          *(unsigned char *)(this + 52) = v11;
          if (v11) {
            continue;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_43;
        case 'r':
LABEL_22:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v10 == 119)
          {
LABEL_23:
            *(unsigned char *)(this + 16) = 1;
            *a2 = v8 + 2;
            int v12 = *((unsigned __int8 *)v8 + 2);
            if ((v12 - 48) > 9) {
              goto LABEL_50;
            }
            uint64_t v13 = 0;
            unint64_t v14 = v8 + 3;
            do
            {
              *a2 = v14;
              uint64_t v13 = (v12 - 48) + 10 * v13;
              unint64_t v15 = v14++;
              int v16 = *(unsigned __int8 *)v15;
              size_t v7 = v15 - 1;
              int v12 = v16;
            }
            while ((v16 - 58) >= 0xFFFFFFF6);
            *(void *)(this + 24) = v13;
            *a2 = v7;
          }
          else
          {
            if ((char)v10 != 120)
            {
LABEL_49:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_43;
            }
LABEL_41:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v9 != 125)
  {
    if (*v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_43:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
LABEL_7:
  *a2 = v8 + 2;
  return this;
}

{
  unsigned char *v2;
  const char *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  int v22;
  std::runtime_error *exception;

  *(void *)this = 2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_43;
  }
  int v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_50:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_43;
  }
  uint64_t v5 = 0;
  int v6 = v2 + 2;
  do
  {
    size_t v7 = v6;
    *a2 = v6;
    uint64_t v5 = (v4 - 48) + 10 * v5;
    unint64_t v8 = v6 - 1;
    int v4 = *(unsigned __int8 *)v6++;
  }
  while ((v4 - 58) >= 0xFFFFFFF6);
  *(void *)(this + 8) = v5;
  int v9 = *(unsigned __int8 *)v7;
  if (v9 == 58)
  {
    while (1)
    {
      unint64_t v8 = v7++;
      *a2 = v7;
      int v10 = *((unsigned __int8 *)v8 + 1);
      if (v10 == 125) {
        goto LABEL_7;
      }
      if (!v8[1]) {
        goto LABEL_42;
      }
      if ((char)v10 <= 97)
      {
        if ((char)v10 <= 75)
        {
          switch((char)v10)
          {
            case '&':
              *(unsigned char *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_49;
            case '+':
              *(unsigned char *)(this + 48) = 1;
              size_t v7 = v8 + 2;
              *a2 = v8 + 2;
              int v17 = *((unsigned __int8 *)v8 + 2);
              *(unsigned char *)(this + 49) = v17;
              if (v17) {
                continue;
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_43;
            case ',':
              continue;
            case '.':
              *(unsigned char *)(this + 32) = 1;
              *a2 = v8 + 2;
              int v18 = *((unsigned __int8 *)v8 + 2);
              if ((v18 - 48) > 9) {
                goto LABEL_50;
              }
              uint64_t v19 = 0;
              uint64_t v20 = v8 + 3;
              do
              {
                *a2 = v20;
                uint64_t v19 = (v18 - 48) + 10 * v19;
                int v21 = v20++;
                int v22 = *(unsigned __int8 *)v21;
                size_t v7 = v21 - 1;
                int v18 = v22;
              }
              while ((v22 - 58) >= 0xFFFFFFF6);
              *(void *)(this + 40) = v19;
              *a2 = v7;
              continue;
            case '0':
              *(unsigned char *)(this + 50) = 1;
              continue;
            default:
              if ((char)v10 == 67) {
                goto LABEL_28;
              }
              goto LABEL_49;
          }
        }
        switch((char)v10)
        {
          case 'P':
            goto LABEL_17;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_49;
          case 'R':
            goto LABEL_22;
          case 'W':
            goto LABEL_23;
          case 'X':
            *(unsigned char *)(this + 51) = 1;
            goto LABEL_41;
          default:
            if ((char)v10 == 76) {
              goto LABEL_30;
            }
            goto LABEL_49;
        }
      }
      switch((char)v10)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_28:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_49;
        case 'l':
LABEL_30:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_17:
          size_t v7 = v8 + 2;
          *a2 = v8 + 2;
          int v11 = *((unsigned __int8 *)v8 + 2);
          *(unsigned char *)(this + 52) = v11;
          if (v11) {
            continue;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_43;
        case 'r':
LABEL_22:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v10 == 119)
          {
LABEL_23:
            *(unsigned char *)(this + 16) = 1;
            *a2 = v8 + 2;
            int v12 = *((unsigned __int8 *)v8 + 2);
            if ((v12 - 48) > 9) {
              goto LABEL_50;
            }
            uint64_t v13 = 0;
            unint64_t v14 = v8 + 3;
            do
            {
              *a2 = v14;
              uint64_t v13 = (v12 - 48) + 10 * v13;
              unint64_t v15 = v14++;
              int v16 = *(unsigned __int8 *)v15;
              size_t v7 = v15 - 1;
              int v12 = v16;
            }
            while ((v16 - 58) >= 0xFFFFFFF6);
            *(void *)(this + 24) = v13;
            *a2 = v7;
          }
          else
          {
            if ((char)v10 != 120)
            {
LABEL_49:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_43;
            }
LABEL_41:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v9 != 125)
  {
    if (*v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_43:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
LABEL_7:
  *a2 = v8 + 2;
  return this;
}

void sub_214DBF864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLBinaryExpression::operatorStrings(mediaplatform::SQLBinaryExpression *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  return mediaplatform::SQLBinaryExpression::operatorStrings(void)::__operatorStrings;
}

void sub_214DBFBAC(_Unwind_Exception *a1)
{
  uint64_t v4 = 600;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0) {
      operator delete(*(void **)(v2 + v4 - 24));
    }
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x2166B26F0](v1, 0x20C40960023A9);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mediaplatform::SQLStringWithStatementList<mediaplatform::SQLExpression>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  size_t v7 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    char v9 = 1;
    while (1)
    {
      uint64_t v11 = *v7;
      int v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v9 & 1) == 0)
      {
        int v12 = *(char *)(a4 + 23);
        if (v12 >= 0) {
          uint64_t v13 = a4;
        }
        else {
          uint64_t v13 = *(void *)a4;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          uint64_t v14 = *(void *)(a4 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v13, v14);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 16))(__p, v11, a3);
      unint64_t v15 = (v19 & 0x80u) == 0 ? __p : (void **)__p[0];
      int v16 = (v19 & 0x80u) == 0 ? (void *)v19 : __p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v15, (uint64_t)v16);
      if ((char)v19 < 0) {
        break;
      }
      if (v10) {
        goto LABEL_21;
      }
LABEL_22:
      char v9 = 0;
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_26;
      }
    }
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_22;
    }
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_22;
  }
LABEL_26:
  std::stringbuf::str();
  v20[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v22);
}

void sub_214DBFE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void mediaplatform::SQLColumnNameExpression::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!a2)
    {
LABEL_10:
      mediaplatform::SQLColumnNameExpression::_unaliasedSQL(a1, &v14);
      std::stringbuf::str();
      uint64_t v14 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v14 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v15 = MEMORY[0x263F8C318] + 16;
      if (v17 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166B2650](v18);
      return;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 103);
    if (!a2) {
      goto LABEL_10;
    }
  }
  if (!v5) {
    goto LABEL_10;
  }
  int v6 = (_OWORD *)(a1 + 80);
  (*(void (**)(int **__return_ptr, uint64_t))(*(void *)a2 + 8))(&v12, a2);
  int v7 = *v12;
  unint64_t v8 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)v12 + 1, (unsigned __int8 *)(a1 + 80));
  if (!v7)
  {
    mediaplatform::SQLColumnNameExpression::_unaliasedSQL(a1, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" AS ", 4);
    int v9 = *(char *)(a1 + 103);
    if (v9 >= 0) {
      uint64_t v10 = a1 + 80;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 80);
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, v10, v11);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v12 + 2), (unsigned __int8 *)(a1 + 80), a1 + 80);
    std::stringbuf::str();
    uint64_t v14 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v14 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v15 = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete(__p);
    }
    goto LABEL_24;
  }
  if (!v8)
  {
    mediaplatform::SQLColumnNameExpression::_unaliasedSQL(a1, &v14);
    std::stringbuf::str();
    uint64_t v14 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v14 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v15 = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete(__p);
    }
LABEL_24:
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166B2650](v18);
    goto LABEL_25;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v6;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 96);
  }
LABEL_25:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_214DC02A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *mediaplatform::SQLColumnNameExpression::_unaliasedSQL@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)a2);
  if (!*(unsigned char *)(a1 + 104)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"+", 1);
  }
  char v4 = *(unsigned char *)(a1 + 79);
  if (v4 < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_5;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
LABEL_5:
    if (v4 >= 0) {
      uint64_t v5 = a1 + 56;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 56);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 79);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 64);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)".", 1);
    int v7 = *(char *)(a1 + 55);
    if (v7 >= 0) {
      uint64_t v8 = a1 + 32;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 32);
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 40);
    }
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)".", 1);
    goto LABEL_29;
  }
  char v10 = *(unsigned char *)(a1 + 55);
  if (v10 < 0)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 55))
  {
LABEL_22:
    if (v10 >= 0) {
      uint64_t v8 = a1 + 32;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 32);
    }
    if (v10 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 40);
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v12 = a1 + 8;
  uint64_t v11 = v13;
  int v14 = *(char *)(v12 + 23);
  if (v14 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    uint64_t v16 = *(void *)(v12 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v15, v16);
}

void sub_214DC041C(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2166B2430](v20, a1);
  if (v20[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      char v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      char v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x2166B2440](v20);
  return a1;
}

void sub_214DC0670(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2166B2440](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x214DC064CLL);
}

void sub_214DC06DC(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_214DC0860(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2166B2650](v1);
  _Unwind_Resume(a1);
}

void *mediaplatform::DatabaseBindParameter::sql@<X0>(uint64_t a1@<X0>, uint64_t (***a2)(void, uint64_t)@<X1>, void *a3@<X8>)
{
  if (a2) {
    return (void *)(**a2)(a2, a1);
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a3, "?");
  }
}

void *mlcore::SQLRenderer::stringForDatabaseBindParameter@<X0>(mlcore::SQLRenderer *this@<X0>, const mediaplatform::DatabaseBindParameter *a2@<X1>, void *a3@<X8>)
{
  mediaplatform::DatabaseParameterList::add((void *)this + 4, (void *)a2 + 1);
  return std::string::basic_string[abi:ne180100]<0>(a3, "?");
}

void mediaplatform::DatabaseParameterList::add(void *a1, void *a2)
{
  uint64_t v4 = (void *)a1[2];
  unint64_t v5 = a1[3];
  if ((unint64_t)v4 < v5)
  {
    uint64_t v6 = a2[1];
    void *v4 = *a2;
    v4[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v4 + 2;
    goto LABEL_22;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = ((uint64_t)v4 - v8) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v5 - v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v12);
  uint64_t v15 = &v13[16 * v9];
  long long v16 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  char v17 = &v13[16 * v14];
  uint64_t v7 = v15 + 16;
  uint64_t v18 = (void *)a1[1];
  unsigned __int8 v19 = (void *)a1[2];
  if (v19 == v18)
  {
    a1[1] = v15;
    a1[2] = v7;
    a1[3] = v17;
    if (!v19) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  do
  {
    long long v20 = *((_OWORD *)v19 - 1);
    v19 -= 2;
    *((_OWORD *)v15 - 1) = v20;
    v15 -= 16;
    *unsigned __int8 v19 = 0;
    v19[1] = 0;
  }
  while (v19 != v18);
  char v21 = (void *)a1[1];
  unsigned __int8 v19 = (void *)a1[2];
  a1[1] = v15;
  a1[2] = v7;
  a1[3] = v17;
  if (v19 != v21)
  {
    do
    {
      char v22 = (std::__shared_weak_count *)*(v19 - 1);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      v19 -= 2;
    }
    while (v19 != v21);
    unsigned __int8 v19 = v21;
  }
  if (v19) {
LABEL_21:
  }
    operator delete(v19);
LABEL_22:
  a1[2] = v7;
}

void mediaplatform::SQLUsingJoinConstraint::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v18, ", ");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  if (v6 != v7)
  {
    char v8 = 1;
    while (1)
    {
      uint64_t v10 = *v6;
      uint64_t v9 = (std::__shared_weak_count *)v6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v8 & 1) == 0)
      {
        if ((v19 & 0x80u) == 0) {
          uint64_t v11 = v18;
        }
        else {
          uint64_t v11 = (void **)v18[0];
        }
        if ((v19 & 0x80u) == 0) {
          uint64_t v12 = v19;
        }
        else {
          uint64_t v12 = (uint64_t)v18[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v12);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 16))(__p, v10, a2);
      uint64_t v13 = (v23 & 0x80u) == 0 ? __p : (void **)__p[0];
      uint64_t v14 = (v23 & 0x80u) == 0 ? (void *)v23 : __p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v13, (uint64_t)v14);
      if ((char)v23 < 0) {
        break;
      }
      if (v9) {
        goto LABEL_21;
      }
LABEL_22:
      char v8 = 0;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_26;
      }
    }
    operator delete(__p[0]);
    if (!v9) {
      goto LABEL_22;
    }
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_22;
  }
LABEL_26:
  std::stringbuf::str();
  v24[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v24[1] = MEMORY[0x263F8C318] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166B2650](&v26);
  uint64_t v15 = std::string::insert(&v20, 0, "USING (");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  char v17 = std::string::append(&v21, ")");
  *a3 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_214DC0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLOnJoinConstraint::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 8) + 16))(&v4);
  uint64_t v3 = std::string::insert(&v4, 0, "ON ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_214DC0E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t mediaplatform::DatabaseStatement::DatabaseStatement(uint64_t a1, sqlite3 *db, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C5BECD8;
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)a3;
    *(void *)(a1 + 48) = *(void *)(a3 + 16);
    *(_OWORD *)(a1 + 32) = v6;
  }
  *(_DWORD *)(a1 + 56) = -1;
  if (!db) {
    __assert_rtn("DatabaseStatement", "DatabaseStatement.cpp", 25, "connectionHandle");
  }
  ppStmt = 0;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v7 = (const char *)a3;
  }
  else {
    uint64_t v7 = *(const char **)a3;
  }
  int v8 = sqlite3_prepare_v2(db, v7, -1, &ppStmt, 0);
  *(void *)(a1 + 24) = ppStmt;
  if (v8)
  {
    int v17 = sqlite3_errcode(db);
    if ((v17 - 1) > 0x19) {
      int v10 = 36;
    }
    else {
      int v10 = *(_DWORD *)&asc_21512018C[4 * (v17 - 1)];
    }
    int v16 = v10;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v14, &v16, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = sqlite3_errmsg(db);
    mediaplatform::FormatString<int,char const*,std::string>(&__p, (uint64_t)&v17, (uint64_t)&v12, a3);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string v15 = __p;
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v14);
  }
  return a1;
}

void sub_214DC1054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16)
{
  __cxa_free_exception(v18);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a16);
  if (*(char *)(v16 + 55) < 0) {
    operator delete(*v17);
  }
  std::string v20 = *(std::__shared_weak_count **)(v16 + 16);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(a1);
}

void mediaplatform::SQLAliasExpression::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!a2)
    {
LABEL_10:
      uint64_t v11 = *(void (**)(void))(**(void **)(a1 + 8) + 16);
      v11();
      return;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 47);
    if (!a2) {
      goto LABEL_10;
    }
  }
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = (_OWORD *)(a1 + 24);
  (*(void (**)(int **__return_ptr, uint64_t))(*(void *)a2 + 8))(&v24, a2);
  uint64_t v8 = (uint64_t)(v24 + 2);
  int v9 = *v24;
  int v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)v24 + 1, (unsigned __int8 *)(a1 + 24));
  if (v9)
  {
    if (v10)
    {
      if (*(char *)(a1 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v7;
        a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2);
    }
  }
  else
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v8, (unsigned __int8 *)(a1 + 24), a1 + 24);
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 8) + 16))(&v21);
    uint64_t v12 = std::string::insert(&v21, 0, "(");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v22, ") AS ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    int v16 = *(char *)(a1 + 47);
    if (v16 >= 0) {
      int v17 = (const std::string::value_type *)(a1 + 24);
    }
    else {
      int v17 = *(const std::string::value_type **)(a1 + 24);
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      std::string::size_type v18 = *(void *)(a1 + 32);
    }
    unsigned __int8 v19 = std::string::append(&v23, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_214DC1334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  long long v30 = *(std::__shared_weak_count **)(v28 - 56);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLSelectExpression::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 8) + 16))(&v6);
  uint64_t v3 = std::string::insert(&v6, 0, "(");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  unint64_t v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_214DC1460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_214DC1514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::_SyncDispatcher(mediaplatform *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
  return v3();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyHasName(void)::$_0 &&>>()
{
}

void sub_214DC171C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtistPropertyOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrder(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCollectionDescription(void)::$_0 &&>>()
{
}

void sub_214DC1968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::collectionDescriptionColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 395), *((void *)this + 396));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3160);
    *(void *)(a2 + 24) = *((void *)this + 397);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 796);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3188);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3215) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 399), *((void *)this + 400));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3192);
    *(void *)(a2 + 56) = *((void *)this + 401);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DC1AEC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20 = MEMORY[0x270FA5388](a1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v21;
  uint64_t v34 = v33;
  uint64_t v35 = v20;
  std::string v122 = &unk_26C5C3AF0;
  if (*(char *)(v21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v21 + 8), *(void *)(v21 + 16));
  }
  else {
    std::string v123 = *(std::string *)(v21 + 8);
  }
  int v124 = *(_DWORD *)(v32 + 32);
  std::string v122 = &unk_26C5C3858;
  uint64_t v125 = *(void *)(v32 + 36);
  int v117 = &unk_26C5C3AF0;
  if (*(char *)(v31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v31 + 8), *(void *)(v31 + 16));
  }
  else {
    std::string __s = *(std::string *)(v31 + 8);
  }
  int v119 = *(_DWORD *)(v31 + 32);
  int v117 = &unk_26C5C3878;
  uint64_t v120 = *(void *)(v31 + 36);
  int v121 = *(_DWORD *)(v31 + 44);
  uint64_t v112 = &unk_26C5C3AF0;
  if (*(char *)(v29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v29 + 8), *(void *)(v29 + 16));
  }
  else {
    std::string v113 = *(std::string *)(v29 + 8);
  }
  int v114 = *(_DWORD *)(v29 + 32);
  uint64_t v112 = &unk_26C5C3818;
  char v115 = *(unsigned char *)(v29 + 36);
  if (*(char *)(v29 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(v29 + 40), *(void *)(v29 + 48));
  }
  else {
    std::string v116 = *(std::string *)(v29 + 40);
  }
  int v107 = &unk_26C5C3AF0;
  if (*(char *)(v27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
  }
  else {
    std::string v108 = *(std::string *)(v27 + 8);
  }
  int v109 = *(_DWORD *)(v27 + 32);
  int v107 = &unk_26C5C3818;
  char v110 = *(unsigned char *)(v27 + 36);
  if (*(char *)(v27 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(v27 + 40), *(void *)(v27 + 48));
  }
  else {
    std::string v111 = *(std::string *)(v27 + 40);
  }
  unint64_t v102 = &unk_26C5C3AF0;
  if (*(char *)(v25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(v25 + 8), *(void *)(v25 + 16));
  }
  else {
    std::string v103 = *(std::string *)(v25 + 8);
  }
  int v104 = *(_DWORD *)(v25 + 32);
  unint64_t v102 = &unk_26C5C3818;
  char v105 = *(unsigned char *)(v25 + 36);
  if (*(char *)(v25 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(v25 + 40), *(void *)(v25 + 48));
  }
  else {
    std::string v106 = *(std::string *)(v25 + 40);
  }
  unint64_t v97 = &unk_26C5C3AF0;
  if (*(char *)(v23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
  }
  else {
    std::string v98 = *(std::string *)(v23 + 8);
  }
  int v99 = *(_DWORD *)(v23 + 32);
  unint64_t v97 = &unk_26C5C3818;
  char v100 = *(unsigned char *)(v23 + 36);
  if (*(char *)(v23 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(v23 + 40), *(void *)(v23 + 48));
  }
  else {
    std::string v101 = *(std::string *)(v23 + 40);
  }
  unint64_t v92 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v93 = *(std::string *)(a9 + 8);
  }
  int v94 = *(_DWORD *)(a9 + 32);
  unint64_t v92 = &unk_26C5C3818;
  char v95 = *(unsigned char *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a9 + 40), *(void *)(a9 + 48));
  }
  else {
    std::string v96 = *(std::string *)(a9 + 40);
  }
  unint64_t v87 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v88 = *(std::string *)(a10 + 8);
  }
  int v89 = *(_DWORD *)(a10 + 32);
  unint64_t v87 = &unk_26C5C3818;
  char v90 = *(unsigned char *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a10 + 40), *(void *)(a10 + 48));
  }
  else {
    std::string v91 = *(std::string *)(a10 + 40);
  }
  uint64_t v82 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v83 = *(std::string *)(a11 + 8);
  }
  int v84 = *(_DWORD *)(a11 + 32);
  uint64_t v82 = &unk_26C5C3878;
  uint64_t v85 = *(void *)(a11 + 36);
  int v86 = *(_DWORD *)(a11 + 44);
  uint64_t v77 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v78 = *(std::string *)(a12 + 8);
  }
  int v79 = *(_DWORD *)(a12 + 32);
  uint64_t v77 = &unk_26C5C3878;
  uint64_t v80 = *(void *)(a12 + 36);
  int v81 = *(_DWORD *)(a12 + 44);
  uint64_t v73 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v74 = *(std::string *)(a13 + 8);
  }
  int v75 = *(_DWORD *)(a13 + 32);
  uint64_t v73 = &unk_26C5C3858;
  uint64_t v76 = *(void *)(a13 + 36);
  uint64_t v68 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v69 = *(std::string *)(a14 + 8);
  }
  int v70 = *(_DWORD *)(a14 + 32);
  uint64_t v68 = &unk_26C5C3818;
  char v71 = *(unsigned char *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a14 + 40), *(void *)(a14 + 48));
  }
  else {
    std::string v72 = *(std::string *)(a14 + 40);
  }
  char v63 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v64 = *(std::string *)(a15 + 8);
  }
  int v65 = *(_DWORD *)(a15 + 32);
  char v63 = &unk_26C5C3818;
  char v66 = *(unsigned char *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a15 + 40), *(void *)(a15 + 48));
  }
  else {
    std::string v67 = *(std::string *)(a15 + 40);
  }
  unint64_t v58 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v59 = *(std::string *)(a16 + 8);
  }
  int v60 = *(_DWORD *)(a16 + 32);
  unint64_t v58 = &unk_26C5C3818;
  char v61 = *(unsigned char *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(a16 + 40), *(void *)(a16 + 48));
  }
  else {
    std::string v62 = *(std::string *)(a16 + 40);
  }
  char v53 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v54 = *(std::string *)(a17 + 8);
  }
  int v55 = *(_DWORD *)(a17 + 32);
  char v53 = &unk_26C5C3818;
  char v56 = *(unsigned char *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a17 + 40), *(void *)(a17 + 48));
  }
  else {
    std::string v57 = *(std::string *)(a17 + 40);
  }
  uint64_t v49 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v50 = *(std::string *)(a18 + 8);
  }
  int v51 = *(_DWORD *)(a18 + 32);
  uint64_t v49 = &unk_26C5C3858;
  uint64_t v52 = *(void *)(a18 + 36);
  unint64_t v45 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v46 = *(std::string *)(a19 + 8);
  }
  int v47 = *(_DWORD *)(a19 + 32);
  unint64_t v45 = &unk_26C5C3858;
  uint64_t v48 = *(void *)(a19 + 36);
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v42 = *(std::string *)(a20 + 8);
  }
  int v43 = *(_DWORD *)(a20 + 32);
  uint64_t v44 = *(void *)(a20 + 36);
  int v202 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v203, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v203 = __s;
  }
  int v204 = v119;
  int v202 = &unk_26C5C3878;
  uint64_t v205 = v120;
  int v206 = v121;
  std::string v197 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v198, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v198 = v113;
  }
  int v199 = v114;
  std::string v197 = &unk_26C5C3818;
  char v200 = v115;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v201, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else {
    std::string v201 = v116;
  }
  std::string v192 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v193, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v193 = v108;
  }
  int v194 = v109;
  std::string v192 = &unk_26C5C3818;
  char v195 = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v196, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v196 = v111;
  }
  unint64_t v187 = &unk_26C5C3AF0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v188, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  }
  else {
    std::string v188 = v103;
  }
  int v189 = v104;
  unint64_t v187 = &unk_26C5C3818;
  char v190 = v105;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v191, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v191 = v106;
  }
  uint64_t v182 = &unk_26C5C3AF0;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v183, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else {
    std::string v183 = v98;
  }
  int v184 = v99;
  uint64_t v182 = &unk_26C5C3818;
  char v185 = v100;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v101;
  }
  uint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v178, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string v178 = v93;
  }
  int v179 = v94;
  uint64_t v177 = &unk_26C5C3818;
  char v180 = v95;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v181, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v181 = v96;
  }
  uint64_t v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v173, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  }
  else {
    std::string v173 = v88;
  }
  int v174 = v89;
  uint64_t v172 = &unk_26C5C3818;
  char v175 = v90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v176, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v176 = v91;
  }
  uint64_t v167 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v168, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v168 = v83;
  }
  int v169 = v84;
  uint64_t v167 = &unk_26C5C3878;
  uint64_t v170 = v85;
  int v171 = v86;
  int v162 = &unk_26C5C3AF0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v163, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v163 = v78;
  }
  int v164 = v79;
  int v162 = &unk_26C5C3878;
  uint64_t v165 = v80;
  int v166 = v81;
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v159, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else {
    std::string v159 = v74;
  }
  int v160 = v75;
  uint64_t v158 = &unk_26C5C3858;
  uint64_t v161 = v76;
  std::string v153 = &unk_26C5C3AF0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v69;
  }
  int v155 = v70;
  std::string v153 = &unk_26C5C3818;
  char v156 = v71;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v72;
  }
  uint64_t v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v64;
  }
  int v150 = v65;
  uint64_t v148 = &unk_26C5C3818;
  char v151 = v66;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v152, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v152 = v67;
  }
  uint64_t v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v59;
  }
  int v145 = v60;
  uint64_t v143 = &unk_26C5C3818;
  char v146 = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v62;
  }
  int v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v139, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v139 = v54;
  }
  int v140 = v55;
  int v138 = &unk_26C5C3818;
  char v141 = v56;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v142, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v142 = v57;
  }
  int v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v135, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v135 = v50;
  }
  int v136 = v51;
  int v134 = &unk_26C5C3858;
  uint64_t v137 = v52;
  int v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v46;
  }
  int v132 = v47;
  int v130 = &unk_26C5C3858;
  uint64_t v133 = v48;
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v42;
  }
  int v128 = v43;
  char v126 = &unk_26C5C3858;
  uint64_t v129 = v44;
  int v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v279, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  }
  else {
    std::string v279 = v198;
  }
  int v280 = v199;
  int v278 = &unk_26C5C3818;
  char v281 = v200;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v282, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  }
  else {
    std::string v282 = v201;
  }
  std::string v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v193;
  }
  int v275 = v194;
  std::string v273 = &unk_26C5C3818;
  char v276 = v195;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v277, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else {
    std::string v277 = v196;
  }
  std::string v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v269, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  }
  else {
    std::string v269 = v188;
  }
  int v270 = v189;
  std::string v268 = &unk_26C5C3818;
  char v271 = v190;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v272, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else {
    std::string v272 = v191;
  }
  int v263 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v264, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v264 = v183;
  }
  int v265 = v184;
  int v263 = &unk_26C5C3818;
  char v266 = v185;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v267, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  else {
    std::string v267 = v186;
  }
  std::string v258 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v259, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v259 = v178;
  }
  int v260 = v179;
  std::string v258 = &unk_26C5C3818;
  char v261 = v180;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v181;
  }
  std::string v253 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v254, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v254 = v173;
  }
  int v255 = v174;
  std::string v253 = &unk_26C5C3818;
  char v256 = v175;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v257, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  }
  else {
    std::string v257 = v176;
  }
  uint64_t v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v249, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  }
  else {
    std::string v249 = v168;
  }
  int v250 = v169;
  uint64_t v248 = &unk_26C5C3878;
  uint64_t v251 = v170;
  int v252 = v171;
  uint64_t v243 = &unk_26C5C3AF0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v244, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  }
  else {
    std::string v244 = v163;
  }
  int v245 = v164;
  uint64_t v243 = &unk_26C5C3878;
  uint64_t v246 = v165;
  int v247 = v166;
  uint64_t v239 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v240, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v240 = v159;
  }
  int v241 = v160;
  uint64_t v239 = &unk_26C5C3858;
  uint64_t v242 = v161;
  uint64_t v234 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v154;
  }
  int v236 = v155;
  uint64_t v234 = &unk_26C5C3818;
  char v237 = v156;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v157;
  }
  int v229 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = v149;
  }
  int v231 = v150;
  int v229 = &unk_26C5C3818;
  char v232 = v151;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v233, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v233 = v152;
  }
  std::string v224 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v225, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v225 = v144;
  }
  int v226 = v145;
  std::string v224 = &unk_26C5C3818;
  char v227 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v228, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else {
    std::string v228 = v147;
  }
  std::string v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v220, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v220 = v139;
  }
  int v221 = v140;
  std::string v219 = &unk_26C5C3818;
  char v222 = v141;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v223, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string v223 = v142;
  }
  std::string v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v216, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else {
    std::string v216 = v135;
  }
  int v217 = v136;
  std::string v215 = &unk_26C5C3858;
  uint64_t v218 = v137;
  std::string v211 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v212, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else {
    std::string v212 = v131;
  }
  int v213 = v132;
  std::string v211 = &unk_26C5C3858;
  uint64_t v214 = v133;
  int v207 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v208, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v208 = v127;
  }
  int v209 = v128;
  int v207 = &unk_26C5C3858;
  uint64_t v210 = v129;
  int v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v350, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  }
  else {
    std::string v350 = v274;
  }
  int v351 = v275;
  int v349 = &unk_26C5C3818;
  char v352 = v276;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v353, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  }
  else {
    std::string v353 = v277;
  }
  uint64_t v344 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v345, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  }
  else {
    std::string v345 = v269;
  }
  int v346 = v270;
  uint64_t v344 = &unk_26C5C3818;
  char v347 = v271;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v348, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  }
  else {
    std::string v348 = v272;
  }
  int v339 = &unk_26C5C3AF0;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v340, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  }
  else {
    std::string v340 = v264;
  }
  int v341 = v265;
  int v339 = &unk_26C5C3818;
  char v342 = v266;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v343, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  }
  else {
    std::string v343 = v267;
  }
  std::string v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v335, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  }
  else {
    std::string v335 = v259;
  }
  int v336 = v260;
  std::string v334 = &unk_26C5C3818;
  char v337 = v261;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v338, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  }
  else {
    std::string v338 = v262;
  }
  std::string v329 = &unk_26C5C3AF0;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v330, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  }
  else {
    std::string v330 = v254;
  }
  int v331 = v255;
  std::string v329 = &unk_26C5C3818;
  char v332 = v256;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v333, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  }
  else {
    std::string v333 = v257;
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v249;
  }
  int v326 = v250;
  uint64_t v324 = &unk_26C5C3878;
  uint64_t v327 = v251;
  int v328 = v252;
  uint64_t v319 = &unk_26C5C3AF0;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v320, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  }
  else {
    std::string v320 = v244;
  }
  int v321 = v245;
  uint64_t v319 = &unk_26C5C3878;
  uint64_t v322 = v246;
  int v323 = v247;
  uint64_t v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v316, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  }
  else {
    std::string v316 = v240;
  }
  int v317 = v241;
  uint64_t v315 = &unk_26C5C3858;
  uint64_t v318 = v242;
  int v310 = &unk_26C5C3AF0;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v311, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string v311 = v235;
  }
  int v312 = v236;
  int v310 = &unk_26C5C3818;
  char v313 = v237;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v314, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else {
    std::string v314 = v238;
  }
  int v305 = &unk_26C5C3AF0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v306, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v306 = v230;
  }
  int v307 = v231;
  int v305 = &unk_26C5C3818;
  char v308 = v232;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v309, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  }
  else {
    std::string v309 = v233;
  }
  int v300 = &unk_26C5C3AF0;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v301, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  }
  else {
    std::string v301 = v225;
  }
  int v302 = v226;
  int v300 = &unk_26C5C3818;
  char v303 = v227;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v304, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  }
  else {
    std::string v304 = v228;
  }
  std::string v295 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v296, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v296 = v220;
  }
  int v297 = v221;
  std::string v295 = &unk_26C5C3818;
  char v298 = v222;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v223;
  }
  int v291 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v292, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  }
  else {
    std::string v292 = v216;
  }
  int v293 = v217;
  int v291 = &unk_26C5C3858;
  uint64_t v294 = v218;
  char v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v288, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  }
  else {
    std::string v288 = v212;
  }
  int v289 = v213;
  char v287 = &unk_26C5C3858;
  uint64_t v290 = v214;
  uint64_t v283 = &unk_26C5C3AF0;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v208;
  }
  int v285 = v209;
  uint64_t v283 = &unk_26C5C3858;
  uint64_t v286 = v210;
  mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v35, (uint64_t)&v349, (uint64_t)&v344, (uint64_t)&v339, (uint64_t)&v334, (uint64_t)&v329, (uint64_t)&v324, (uint64_t)&v319, (uint64_t)&v315, (uint64_t)&v310, (uint64_t)&v305, (uint64_t)&v300, (uint64_t)&v295, (uint64_t)&v291, (uint64_t)&v287, (uint64_t)&v283);
  uint64_t v283 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v288.__r_.__value_.__l.__data_);
  }
  int v291 = &unk_26C5C3AF0;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v295);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v300);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v310);
  uint64_t v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v316.__r_.__value_.__l.__data_);
  }
  uint64_t v319 = &unk_26C5C3AF0;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v320.__r_.__value_.__l.__data_);
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v329);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v334);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v339);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v344);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v349);
  *(void *)(v35 + 864) = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v35 + 872), v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v35 + 872) = v279;
  }
  *(_DWORD *)(v35 + 896) = v280;
  *(void *)(v35 + 864) = &unk_26C5C3818;
  *(unsigned char *)(v35 + 900) = v281;
  uint64_t v36 = (std::string *)(v35 + 904);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
    *(void *)(v35 + 920) = *((void *)&v282.__r_.__value_.__l + 2);
  }
  int v207 = &unk_26C5C3AF0;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  std::string v211 = &unk_26C5C3AF0;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
  std::string v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v219);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v224);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v229);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v234);
  uint64_t v239 = &unk_26C5C3AF0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  uint64_t v243 = &unk_26C5C3AF0;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v244.__r_.__value_.__l.__data_);
  }
  uint64_t v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v253);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v258);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v263);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v268);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v273);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v278);
  *(void *)(v35 + 928) = &unk_26C5C3AF0;
  uint64_t v37 = (std::string *)(v35 + 936);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v37, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&v203.__r_.__value_.__l.__data_;
    *(void *)(v35 + 952) = *((void *)&v203.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v35 + 960) = v204;
  *(void *)(v35 + 928) = &unk_26C5C3878;
  *(void *)(v35 + 964) = v205;
  *(_DWORD *)(v35 + 972) = v206;
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  int v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  int v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v138);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v143);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v148);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v153);
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  int v162 = &unk_26C5C3AF0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  uint64_t v167 = &unk_26C5C3AF0;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v172);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v177);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v182);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v187);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v197);
  int v202 = &unk_26C5C3AF0;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  *(void *)(v35 + 976) = &unk_26C5C3AF0;
  uint64_t v38 = (std::string *)(v35 + 984);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
    *(void *)(v35 + 1000) = *((void *)&v123.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v35 + 1008) = v124;
  *(void *)(v35 + 976) = &unk_26C5C3858;
  *(void *)(v35 + 1012) = v125;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  unint64_t v45 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v53);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v58);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v63);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v68);
  uint64_t v73 = &unk_26C5C3AF0;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  uint64_t v77 = &unk_26C5C3AF0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  uint64_t v82 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v87);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v92);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v97);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v102);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v107);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v112);
  int v117 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::string v122 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  *(void *)(v35 + 1024) = &unk_26C5C3AF0;
  uint64_t v39 = (std::string *)(v35 + 1032);
  if (*(char *)(v34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)(v34 + 8), *(void *)(v34 + 16));
  }
  else
  {
    long long v40 = *(_OWORD *)(v34 + 8);
    *(void *)(v35 + 1048) = *(void *)(v34 + 24);
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
  }
  *(_DWORD *)(v35 + 1056) = *(_DWORD *)(v34 + 32);
  *(void *)(v35 + 1024) = &unk_26C5C3858;
  *(void *)(v35 + 1060) = *(void *)(v34 + 36);
  return v35;
}

void sub_214DC4CD0(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3818;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

unint64_t mlcore::EntityQueryResult::entityCount(mlcore::EntityQueryResult *this)
{
  return 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(*((void *)this + 23) + 8) - **((void **)this + 23)) >> 3);
}

char *mlcore::PropertiesQuery::setPropertiesToFetch(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 80);
  if (result != (char *)a2) {
    return std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

__n128 mlcore::CreateOrPredicate@<Q0>(uint64_t **a1@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  uint64_t v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(*a1, a1[1]);
  std::vector<std::shared_ptr<mlcore::Predicate>>::erase((uint64_t)a1, (uint64_t)v4, (uint64_t)a1[1]);
  std::string v6 = *a1;
  std::string v7 = (char *)a1[1];
  uint64_t v8 = v7 - (char *)*a1;
  if (v8 == 16)
  {
    uint64_t v10 = *v6;
    uint64_t v9 = v6[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    a2->n128_u64[0] = v10;
    a2->n128_u64[1] = v9;
  }
  else if ((unint64_t)v8 >= 0x11)
  {
    uint64_t v11 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v11 + 8) = 0u;
    *(void *)uint64_t v11 = &unk_26C5CA088;
    *((void *)v11 + 3) = &unk_26C5C73B8;
    *(_OWORD *)(v11 + 40) = 0u;
    *((void *)v11 + 4) = 0;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((void *)v11 + 4, v6, v7, v8 >> 4);
    *((void *)v11 + 3) = &unk_26C5C4808;
    result.n128_u64[0] = (unint64_t)(v11 + 24);
    result.n128_u64[1] = (unint64_t)v11;
    *a2 = result;
  }
  return result;
}

void sub_214DC590C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLResultColumnExpressions(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 120))(&__p);
  unint64_t v5 = (uint64_t *)__p;
  std::string v6 = v37;
  if (__p != v37)
  {
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v34 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v35);
      long long v9 = v35;
      long long v35 = 0uLL;
      uint64_t v11 = (_OWORD *)a3[1];
      unint64_t v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        long long v32 = v9;
        uint64_t v12 = ((uint64_t)v11 - *a3) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v10 - *a3;
        if (v14 >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        int v43 = a3 + 2;
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v15);
        int v17 = &v16[16 * v12];
        *(void *)&long long v40 = v16;
        *((void *)&v40 + 1) = v17;
        std::string v42 = &v16[16 * v18];
        *(_OWORD *)int v17 = v32;
        char v41 = v17 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v40);
        uint64_t v19 = a3[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v40);
        uint64_t v20 = (std::__shared_weak_count *)*((void *)&v35 + 1);
        a3[1] = v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      else
      {
        _OWORD *v11 = v9;
        a3[1] = v11 + 1;
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v39);
  if (__p)
  {
    uint64_t v37 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (a3[1] == *a3)
  {
    LODWORD(v35) = 1;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v40, &v35);
    long long v21 = v40;
    long long v40 = 0uLL;
    unint64_t v22 = a3[2];
    uint64_t v23 = (_OWORD *)a3[1];
    if ((unint64_t)v23 >= v22)
    {
      long long v33 = v21;
      uint64_t v25 = ((uint64_t)v23 - *a3) >> 4;
      if ((unint64_t)(v25 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v22 - *a3;
      uint64_t v27 = v26 >> 3;
      if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      v39[1] = a3 + 2;
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v28);
      uint64_t v30 = &v29[16 * v25];
      std::string __p = v29;
      uint64_t v37 = (uint64_t *)v30;
      v39[0] = &v29[16 * v31];
      *(_OWORD *)uint64_t v30 = v33;
      uint64_t v38 = v30 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &__p);
      uint64_t v24 = (_OWORD *)a3[1];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
    }
    else
    {
      _OWORD *v23 = v21;
      uint64_t v24 = v23 + 1;
    }
    a3[1] = v24;
  }
}

void sub_214DC5BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    if (a24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a24);
    }
  }
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

double mlcore::DatabaseModelProperty<int>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double mlcore::DatabaseModelProperty<std::string>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void mlcore::AndPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = (std::__shared_weak_count *)v3[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v9 = *(std::__shared_weak_count **)(a2 + 8);
      long long v21 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v7 + 64))(&v22);
      long long v10 = v22;
      long long v22 = 0uLL;
      uint64_t v11 = v24;
      if ((unint64_t)v24 >= v25)
      {
        long long v20 = v10;
        uint64_t v12 = (v24 - v23) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v25 - (void)v23;
        if ((uint64_t)(v25 - (void)v23) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        uint64_t v29 = &v25;
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v15);
        int v17 = &v16[16 * v12];
        *(void *)&long long v26 = v16;
        *((void *)&v26 + 1) = v17;
        unint64_t v28 = &v16[16 * v18];
        *(_OWORD *)int v17 = v20;
        uint64_t v27 = v17 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v23, &v26);
        uint64_t v19 = v24;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v26);
        uint64_t v24 = v19;
        if (*((void *)&v22 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
        }
      }
      else
      {
        *(_OWORD *)uint64_t v24 = v10;
        uint64_t v24 = v11 + 16;
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v3 += 2;
    }
    while (v3 != v4);
    if (v23 != v24)
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>((uint64_t *)&v26, (void **)&v23, 1);
      *(_OWORD *)a3 = v26;
    }
  }
  *(void *)&long long v26 = &v23;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_214DC5E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  char v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  std::string v6 = (void *)*result;
  char *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void mlcore::LibraryView::_predicateByApplyingFilters(mlcore::LibraryView *a1@<X0>, void *a2@<X1>, mlcore::EntityClass *a3@<X2>, __n128 *a4@<X8>)
{
  mlcore::LibraryView::_filterPredicateForEntityClass(a1, a3, &v36);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)a1 + 1, (unint64_t)a3);
  if (v8)
  {
    uint64_t v9 = v8[4];
    long long v31 = *(_OWORD *)(v8 + 3);
    uint64_t v10 = v8[3];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    long long v31 = 0u;
  }
  long long v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  if (!*a2)
  {
    uint64_t v14 = 0;
    if (!v10) {
      goto LABEL_25;
    }
LABEL_11:
    if ((unint64_t)v14 >= v35)
    {
      uint64_t v15 = (v14 - v33) >> 4;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_51;
      }
      unint64_t v16 = (uint64_t)(v35 - (void)v33) >> 3;
      if (v16 <= v15 + 1) {
        unint64_t v16 = v15 + 1;
      }
      if (v35 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      char v41 = &v35;
      uint64_t v18 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v17);
      uint64_t v19 = &v18[2 * v15];
      uint64_t v37 = v18;
      uint64_t v38 = v19;
      long long v40 = &v18[2 * v20];
      *(_OWORD *)uint64_t v19 = v31;
      if (*((void *)&v31 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v39 = v19 + 2;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v33, &v37);
      uint64_t v14 = v34;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *(_OWORD *)uint64_t v14 = v31;
      if (*((void *)&v31 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v14 += 16;
    }
    uint64_t v34 = v14;
    goto LABEL_25;
  }
  char v41 = &v35;
  uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(1uLL);
  uint64_t v37 = v11;
  uint64_t v38 = v11;
  long long v40 = &v11[2 * v12];
  long long v13 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v39 = v11 + 2;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v33, &v37);
  uint64_t v14 = v34;
  std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v37);
  uint64_t v34 = v14;
  if (v10) {
    goto LABEL_11;
  }
LABEL_25:
  if (!v36.n128_u64[0]) {
    goto LABEL_40;
  }
  if ((unint64_t)v14 >= v35)
  {
    uint64_t v22 = (v14 - v33) >> 4;
    if (!((unint64_t)(v22 + 1) >> 60))
    {
      unint64_t v23 = (uint64_t)(v35 - (void)v33) >> 3;
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      if (v35 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      char v41 = &v35;
      unint64_t v25 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v24);
      long long v26 = (__n128 *)&v25[2 * v22];
      uint64_t v37 = v25;
      uint64_t v38 = (void **)v26;
      long long v40 = &v25[2 * v27];
      unint64_t v28 = v36.n128_u64[1];
      __n128 *v26 = v36;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v39 = (void **)&v26[1];
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v33, &v37);
      uint64_t v14 = v34;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v37);
      goto LABEL_39;
    }
LABEL_51:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(void *)uint64_t v14 = v36.n128_u64[0];
  unint64_t v21 = v36.n128_u64[1];
  *((void *)v14 + 1) = v36.n128_u64[1];
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  v14 += 16;
LABEL_39:
  uint64_t v34 = v14;
LABEL_40:
  unint64_t v29 = (v14 - v33) >> 4;
  if (v29 == 1)
  {
    unint64_t v30 = *((void *)v33 + 1);
    a4->n128_u64[0] = *(void *)v33;
    a4->n128_u64[1] = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else if (v29)
  {
    memset(v32, 0, sizeof(v32));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v32, v33, v14, v29);
    mlcore::CreateAndPredicate(v32, a4);
    uint64_t v37 = (void **)v32;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  else
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  uint64_t v37 = (void **)&v33;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  if (v36.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.n128_u64[1]);
  }
}

void sub_214DC62C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void **a19)
{
  *(void *)(v20 - 72) = v19;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

__n128 mlcore::CreateAndPredicate@<Q0>(uint64_t **a1@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  uint64_t v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(*a1, a1[1]);
  std::vector<std::shared_ptr<mlcore::Predicate>>::erase((uint64_t)a1, (uint64_t)v4, (uint64_t)a1[1]);
  std::string v6 = *a1;
  uint64_t v7 = (char *)a1[1];
  uint64_t v8 = v7 - (char *)*a1;
  if (v8 == 16)
  {
    uint64_t v10 = *v6;
    uint64_t v9 = v6[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    a2->n128_u64[0] = v10;
    a2->n128_u64[1] = v9;
  }
  else if ((unint64_t)v8 >= 0x11)
  {
    uint64_t v11 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v11 + 8) = 0u;
    *(void *)uint64_t v11 = &unk_26C5CA1D8;
    *((void *)v11 + 3) = &unk_26C5C73B8;
    *(_OWORD *)(v11 + 40) = 0u;
    *((void *)v11 + 4) = 0;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((void *)v11 + 4, v6, v7, v8 >> 4);
    *((void *)v11 + 3) = &unk_26C5C4968;
    result.n128_u64[0] = (unint64_t)(v11 + 24);
    result.n128_u64[1] = (unint64_t)v11;
    *a2 = result;
  }
  return result;
}

void sub_214DC6424(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    std::string v6 = result;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)v6[1];
    uint64_t v12 = v7;
    uint64_t v11 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    if (a2 != a3)
    {
      do
      {
        *uint64_t v7 = *a2;
        uint64_t v8 = a2[1];
        v7[1] = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        v7 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      uint64_t v12 = v7;
    }
    char v10 = 1;
    __n128 result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v7;
  }
  return result;
}

void sub_214DC64F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void std::vector<std::shared_ptr<mlcore::Predicate>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      do
      {
        uint64_t v8 = (void *)(v4 + v7);
        long long v9 = *(_OWORD *)(v4 + v7);
        void *v8 = 0;
        v8[1] = 0;
        char v10 = *(std::__shared_weak_count **)(v4 + 8);
        *(_OWORD *)uint64_t v4 = v9;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        v4 += 16;
      }
      while (v4 + v7 != v6);
      uint64_t v3 = *(void *)(a1 + 8);
    }
    while (v3 != v4)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v3 - 8);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      v3 -= 16;
    }
    *(void *)(a1 + 8) = v4;
  }
}

uint64_t *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a1;
    while (*v3)
    {
      v3 += 2;
      if (v3 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v3 != a2)
  {
    for (std::string::size_type i = v3 + 2; i != a2; i += 2)
    {
      uint64_t v5 = *i;
      if (*i)
      {
        uint64_t v6 = i[1];
        *std::string::size_type i = 0;
        i[1] = 0;
        uint64_t v7 = (std::__shared_weak_count *)v3[1];
        uint64_t *v3 = v5;
        v3[1] = v6;
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 += 2;
      }
    }
  }
  return v3;
}

void mlcore::LibraryView::_filterPredicateForEntityClass(mlcore::LibraryView *this@<X0>, mlcore::EntityClass *a2@<X1>, __n128 *a3@<X8>)
{
  v438[1] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
    uint64_t v8 = (*(uint64_t (**)(mlcore::EntityClass *))(*(void *)a2 + 64))(a2);
    if (v7 == v8)
    {
      __n128 v429 = 0uLL;
      unint64_t v430 = 0;
      int v9 = *((_DWORD *)this + 20);
      LOBYTE(v10) = v9;
      if (v9)
      {
        uint64_t v11 = mlcore::ItemPropertyInMyLibrary((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x30uLL);
        uint64_t v12 = v8;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = &unk_26C5CA718;
        uint64_t v13 = v8 + 24;
        *(_DWORD *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C54E0;
        *(void *)(v8 + 32) = v11;
        unint64_t v14 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v43 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          int v434 = &v430;
          int v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v46);
          *(void *)&long long v48 = v13;
          *((void *)&v48 + 1) = v12;
          uint64_t v49 = &v47[16 * v43];
          v432.n128_u64[0] = (unint64_t)v47;
          v432.n128_u64[1] = (unint64_t)v49;
          v433.n128_u64[1] = (unint64_t)&v47[16 * v50];
          *(_OWORD *)uint64_t v49 = v48;
          v433.n128_u64[0] = (unint64_t)(v49 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v15 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v13;
          *(void *)(v14 + 8) = v8;
          unint64_t v15 = v14 + 16;
        }
        v429.n128_u64[1] = v15;
        int v10 = *((_DWORD *)this + 20);
      }
      if ((v10 & 2) != 0)
      {
        uint64_t IsLocal = mlcore::ItemPropertyIsLocal((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x30uLL);
        uint64_t v52 = v8;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = &unk_26C5CA718;
        uint64_t v53 = v8 + 24;
        *(_DWORD *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C54E0;
        *(void *)(v8 + 32) = IsLocal;
        unint64_t v54 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v56 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v57) {
            unint64_t v57 = v58 >> 3;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          int v434 = &v430;
          int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v59);
          *(void *)&long long v61 = v53;
          *((void *)&v61 + 1) = v52;
          std::string v62 = &v60[16 * v56];
          v432.n128_u64[0] = (unint64_t)v60;
          v432.n128_u64[1] = (unint64_t)v62;
          v433.n128_u64[1] = (unint64_t)&v60[16 * v63];
          *(_OWORD *)std::string v62 = v61;
          v433.n128_u64[0] = (unint64_t)(v62 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v55 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v53;
          *(void *)(v54 + 8) = v8;
          unint64_t v55 = v54 + 16;
        }
        v429.n128_u64[1] = v55;
      }
      if ((v9 & 8) != 0)
      {
        uint64_t HasNonPurgeableAsset = mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x30uLL);
        uint64_t v65 = v8;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = &unk_26C5CA718;
        uint64_t v66 = v8 + 24;
        *(_DWORD *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C54E0;
        *(void *)(v8 + 32) = HasNonPurgeableAsset;
        unint64_t v67 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v69 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v70) {
            unint64_t v70 = v71 >> 3;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v70;
          }
          int v434 = &v430;
          uint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v72);
          *(void *)&long long v74 = v66;
          *((void *)&v74 + 1) = v65;
          int v75 = &v73[16 * v69];
          v432.n128_u64[0] = (unint64_t)v73;
          v432.n128_u64[1] = (unint64_t)v75;
          v433.n128_u64[1] = (unint64_t)&v73[16 * v76];
          *(_OWORD *)int v75 = v74;
          v433.n128_u64[0] = (unint64_t)(v75 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v68 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v66;
          *(void *)(v67 + 8) = v8;
          unint64_t v68 = v67 + 16;
        }
        v429.n128_u64[1] = v68;
      }
      int v77 = *((_DWORD *)this + 20);
      if ((v77 & 0x10) != 0)
      {
        uint64_t v78 = mlcore::ItemPropertyLikedState((mlcore *)v8);
        int v79 = (char *)operator new(0x48uLL);
        *(_OWORD *)(v79 + 8) = 0u;
        *(void *)int v79 = &unk_26C5CAB78;
        *((void *)v79 + 4) = v78;
        *((void *)v79 + 5) = 0;
        *((void *)v79 + 3) = &unk_26C5C7978;
        *((_DWORD *)v79 + 12) = 2;
        *(_OWORD *)(v79 + 56) = 0u;
        v80.n128_u64[0] = (unint64_t)(v79 + 24);
        v80.n128_u64[1] = (unint64_t)v79;
        __n128 v436 = v80;
        uint64_t v81 = mlcore::ItemPropertyAlbumLikeState((mlcore *)v79);
        uint64_t v82 = (char *)operator new(0x48uLL);
        *(_OWORD *)(v82 + 8) = 0u;
        *(void *)uint64_t v82 = &unk_26C5CAB78;
        *((void *)v82 + 4) = v81;
        *((void *)v82 + 5) = 0;
        *((void *)v82 + 3) = &unk_26C5C7978;
        *((_DWORD *)v82 + 12) = 2;
        *(_OWORD *)(v82 + 56) = 0u;
        *(void *)&long long v83 = v82 + 24;
        *((void *)&v83 + 1) = v82;
        long long v437 = v83;
        int v426 = 0;
        long long v427 = 0u;
        v432.n128_u64[0] = (unint64_t)&v426;
        v432.n128_u8[8] = 0;
        int v426 = (uint64_t *)operator new(0x20uLL);
        *(void *)&long long v427 = v426;
        *((void *)&v427 + 1) = v426 + 4;
        *(void *)&long long v427 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v427 + 8, &v436, v438, v426);
        mlcore::CreateOrPredicate(&v426, &v428);
        unint64_t v84 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v86 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          if ((unint64_t)(v86 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v87 = (uint64_t)(v430 - v429.n128_u64[0]) >> 3;
          if (v87 <= v86 + 1) {
            unint64_t v87 = v86 + 1;
          }
          if (v430 - v429.n128_u64[0] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          int v434 = &v430;
          int v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v88);
          char v90 = (__n128 *)&v89[16 * v86];
          v432.n128_u64[0] = (unint64_t)v89;
          v432.n128_u64[1] = (unint64_t)v90;
          v433.n128_u64[1] = (unint64_t)&v89[16 * v91];
          *char v90 = v428;
          __n128 v428 = 0uLL;
          v433.n128_u64[0] = (unint64_t)v90[1].n128_u64;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v85 = v429.n128_u64[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(__n128 *)v429.n128_u64[1] = v428;
          unint64_t v85 = v84 + 16;
        }
        v429.n128_u64[1] = v85;
        v432.n128_u64[0] = (unint64_t)&v426;
        std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
        for (uint64_t i = 3; i != -1; i -= 2)
        {
          uint64_t v8 = v436.n128_i64[i];
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
          }
        }
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x80) != 0)
      {
        uint64_t v93 = mlcore::ItemPropertyPurchaseHistoryID((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x48uLL);
        uint64_t v94 = v8;
        *(_OWORD *)(v8 + 8) = 0u;
        *(void *)uint64_t v8 = &unk_26C5CABB0;
        uint64_t v95 = v8 + 24;
        *(void *)(v8 + 40) = 0x100000000;
        *(void *)(v8 + 24) = &unk_26C5C79D0;
        *(void *)(v8 + 32) = v93;
        *(void *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        unint64_t v96 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v98 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v100 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v99) {
            unint64_t v99 = v100 >> 3;
          }
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v101 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v101 = v99;
          }
          int v434 = &v430;
          unint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v101);
          *(void *)&long long v103 = v95;
          *((void *)&v103 + 1) = v94;
          int v104 = &v102[16 * v98];
          v432.n128_u64[0] = (unint64_t)v102;
          v432.n128_u64[1] = (unint64_t)v104;
          v433.n128_u64[1] = (unint64_t)&v102[16 * v105];
          *(_OWORD *)int v104 = v103;
          v433.n128_u64[0] = (unint64_t)(v104 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v97 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v95;
          *(void *)(v96 + 8) = v8;
          unint64_t v97 = v96 + 16;
        }
        v429.n128_u64[1] = v97;
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x100) != 0)
      {
        uint64_t v106 = mlcore::ItemPropertySubscriptionStoreItemID((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x48uLL);
        uint64_t v107 = v8;
        *(_OWORD *)(v8 + 8) = 0u;
        *(void *)uint64_t v8 = &unk_26C5CABB0;
        uint64_t v108 = v8 + 24;
        *(void *)(v8 + 40) = 0x100000000;
        *(void *)(v8 + 24) = &unk_26C5C79D0;
        *(void *)(v8 + 32) = v106;
        *(void *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        unint64_t v109 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v111 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v112 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v113 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v112) {
            unint64_t v112 = v113 >> 3;
          }
          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v114 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v114 = v112;
          }
          int v434 = &v430;
          char v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v114);
          *(void *)&long long v116 = v108;
          *((void *)&v116 + 1) = v107;
          int v117 = &v115[16 * v111];
          v432.n128_u64[0] = (unint64_t)v115;
          v432.n128_u64[1] = (unint64_t)v117;
          v433.n128_u64[1] = (unint64_t)&v115[16 * v118];
          *(_OWORD *)int v117 = v116;
          v433.n128_u64[0] = (unint64_t)(v117 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v110 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v108;
          *(void *)(v109 + 8) = v8;
          unint64_t v110 = v109 + 16;
        }
        v429.n128_u64[1] = v110;
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x200) != 0)
      {
        uint64_t IsProtected = mlcore::ItemPropertyIsProtected((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x48uLL);
        uint64_t v120 = v8;
        *(_OWORD *)(v8 + 8) = 0u;
        *(void *)uint64_t v8 = &unk_26C5CABB0;
        uint64_t v121 = v8 + 24;
        *(void *)(v8 + 32) = IsProtected;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C79D0;
        *(void *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        unint64_t v122 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v124 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v126 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v125) {
            unint64_t v125 = v126 >> 3;
          }
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v127 = v125;
          }
          int v434 = &v430;
          int v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v127);
          *(void *)&long long v129 = v121;
          *((void *)&v129 + 1) = v120;
          int v130 = &v128[16 * v124];
          v432.n128_u64[0] = (unint64_t)v128;
          v432.n128_u64[1] = (unint64_t)v130;
          v433.n128_u64[1] = (unint64_t)&v128[16 * v131];
          *(_OWORD *)int v130 = v129;
          v433.n128_u64[0] = (unint64_t)(v130 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v123 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v121;
          *(void *)(v122 + 8) = v8;
          unint64_t v123 = v122 + 16;
        }
        v429.n128_u64[1] = v123;
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x40) != 0)
      {
        uint64_t v132 = mlcore::ItemPropertyDownloadSourceContainerID((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x48uLL);
        uint64_t v133 = v8;
        *(_OWORD *)(v8 + 8) = 0u;
        *(void *)uint64_t v8 = &unk_26C5CABB0;
        uint64_t v134 = v8 + 24;
        *(void *)(v8 + 32) = v132;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C79D0;
        *(void *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        unint64_t v135 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v137 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v139 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v138) {
            unint64_t v138 = v139 >> 3;
          }
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v140 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v138;
          }
          int v434 = &v430;
          char v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v140);
          *(void *)&long long v142 = v134;
          *((void *)&v142 + 1) = v133;
          uint64_t v143 = &v141[16 * v137];
          v432.n128_u64[0] = (unint64_t)v141;
          v432.n128_u64[1] = (unint64_t)v143;
          v433.n128_u64[1] = (unint64_t)&v141[16 * v144];
          *(_OWORD *)uint64_t v143 = v142;
          v433.n128_u64[0] = (unint64_t)(v143 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v136 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v134;
          *(void *)(v135 + 8) = v8;
          unint64_t v136 = v135 + 16;
        }
        v429.n128_u64[1] = v136;
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x1000) != 0)
      {
        uint64_t v145 = mlcore::ItemPropertyLikedState((mlcore *)v8);
        uint64_t v8 = (uint64_t)operator new(0x48uLL);
        uint64_t v146 = v8;
        *(_OWORD *)(v8 + 8) = 0u;
        *(void *)uint64_t v8 = &unk_26C5CAB78;
        uint64_t v147 = v8 + 24;
        *(void *)(v8 + 32) = v145;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = &unk_26C5C7978;
        *(_DWORD *)(v8 + 48) = 2;
        *(_OWORD *)(v8 + 56) = 0u;
        unint64_t v148 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v150 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v151 = v150 + 1;
          if ((unint64_t)(v150 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v152 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v151) {
            unint64_t v151 = v152 >> 3;
          }
          if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v153 = v151;
          }
          int v434 = &v430;
          std::string v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v153);
          *(void *)&long long v155 = v147;
          *((void *)&v155 + 1) = v146;
          char v156 = &v154[16 * v150];
          v432.n128_u64[0] = (unint64_t)v154;
          v432.n128_u64[1] = (unint64_t)v156;
          v433.n128_u64[1] = (unint64_t)&v154[16 * v157];
          *(_OWORD *)char v156 = v155;
          v433.n128_u64[0] = (unint64_t)(v156 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v149 = v429.n128_u64[1];
          uint64_t v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v147;
          *(void *)(v148 + 8) = v8;
          unint64_t v149 = v148 + 16;
        }
        v429.n128_u64[1] = v149;
        int v77 = *((_DWORD *)this + 20);
      }
      if ((v77 & 0x4000) != 0)
      {
        uint64_t v158 = mlcore::ItemPropertyStoreCloudID((mlcore *)v8);
        std::string v159 = (char *)operator new(0x48uLL);
        int v160 = v159;
        *(_OWORD *)(v159 + 8) = 0u;
        *(void *)std::string v159 = &unk_26C5CABB0;
        uint64_t v161 = v159 + 24;
        *((void *)v159 + 5) = 0x100000000;
        *((void *)v159 + 3) = &unk_26C5C79D0;
        *((void *)v159 + 4) = v158;
        *((void *)v159 + 6) = 0;
        *(_OWORD *)(v159 + 56) = 0u;
        unint64_t v162 = v429.n128_u64[1];
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v164 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          unint64_t v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v166 = v430 - v429.n128_u64[0];
          if ((uint64_t)(v430 - v429.n128_u64[0]) >> 3 > v165) {
            unint64_t v165 = v166 >> 3;
          }
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v167 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v167 = v165;
          }
          int v434 = &v430;
          std::string v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v167);
          *(void *)&long long v169 = v161;
          *((void *)&v169 + 1) = v160;
          uint64_t v170 = &v168[16 * v164];
          v432.n128_u64[0] = (unint64_t)v168;
          v432.n128_u64[1] = (unint64_t)v170;
          v433.n128_u64[1] = (unint64_t)&v168[16 * v171];
          *(_OWORD *)uint64_t v170 = v169;
          v433.n128_u64[0] = (unint64_t)(v170 + 16);
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          unint64_t v163 = v429.n128_u64[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v161;
          *(void *)(v162 + 8) = v159;
          unint64_t v163 = v162 + 16;
        }
        v429.n128_u64[1] = v163;
      }
      mlcore::ContentRestrictions::_predicate((mlcore::LibraryView *)((char *)this + 48), 0, &v436);
      uint64_t v172 = (void *)v429.n128_u64[1];
      if (v436.n128_u64[0])
      {
        if (v429.n128_u64[1] >= v430)
        {
          uint64_t v174 = (uint64_t)(v429.n128_u64[1] - v429.n128_u64[0]) >> 4;
          if ((unint64_t)(v174 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v175 = (uint64_t)(v430 - v429.n128_u64[0]) >> 3;
          if (v175 <= v174 + 1) {
            unint64_t v175 = v174 + 1;
          }
          if (v430 - v429.n128_u64[0] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v176 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v176 = v175;
          }
          int v434 = &v430;
          uint64_t v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v176);
          std::string v178 = (__n128 *)&v177[16 * v174];
          v432.n128_u64[0] = (unint64_t)v177;
          v432.n128_u64[1] = (unint64_t)v178;
          v433.n128_u64[1] = (unint64_t)&v177[16 * v179];
          unint64_t v180 = v436.n128_u64[1];
          *std::string v178 = v436;
          if (v180) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v180 + 8), 1uLL, memory_order_relaxed);
          }
          v433.n128_u64[0] = (unint64_t)v178[1].n128_u64;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v429, &v432);
          uint64_t v172 = (void *)v429.n128_u64[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
        }
        else
        {
          *(void *)v429.n128_u64[1] = v436.n128_u64[0];
          unint64_t v173 = v436.n128_u64[1];
          v172[1] = v436.n128_u64[1];
          if (v173) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v173 + 8), 1uLL, memory_order_relaxed);
          }
          v172 += 2;
        }
        v429.n128_u64[1] = (unint64_t)v172;
      }
      if (v172 == (void *)v429.n128_u64[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
      }
      else
      {
        memset(v425, 0, sizeof(v425));
        std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v425, v429.n128_u64[0], v172, (uint64_t)((uint64_t)v172 - v429.n128_u64[0]) >> 4);
        mlcore::CreateAndPredicate(v425, a3);
        v432.n128_u64[0] = (unint64_t)v425;
        std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
      }
      if (v436.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
      }
      std::string v181 = &v429;
      goto LABEL_395;
    }
  }
  uint64_t v16 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  if ((mlcore::EntityClass *)v16 == a2)
  {
    __n128 v436 = 0uLL;
    *(void *)&long long v437 = 0;
    int v25 = *((_DWORD *)this + 20);
    if ((v25 & 2) != 0)
    {
      long long v26 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t v27 = mlcore::ItemPropertyIsLocal(v26);
      v424[0] = 0;
      v424[1] = 0;
      uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v26, v27, v424);
      uint64_t v16 = (uint64_t)operator new(0x30uLL);
      uint64_t v29 = v16;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = &unk_26C5CA718;
      uint64_t v30 = v16 + 24;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 24) = &unk_26C5C54E0;
      *(void *)(v16 + 32) = Foreign;
      unint64_t v31 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v194 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v195 = v194 + 1;
        if ((unint64_t)(v194 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v196 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v195) {
          unint64_t v195 = v196 >> 3;
        }
        if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v197 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v197 = v195;
        }
        int v434 = (unint64_t *)&v437;
        std::string v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v197);
        *(void *)&long long v199 = v30;
        *((void *)&v199 + 1) = v29;
        char v200 = &v198[16 * v194];
        v432.n128_u64[0] = (unint64_t)v198;
        v432.n128_u64[1] = (unint64_t)v200;
        v433.n128_u64[1] = (unint64_t)&v198[16 * v201];
        *(_OWORD *)char v200 = v199;
        v433.n128_u64[0] = (unint64_t)(v200 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v32 = v436.n128_u64[1];
        uint64_t v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v30;
        *(void *)(v31 + 8) = v16;
        unint64_t v32 = v31 + 16;
      }
      v436.n128_u64[1] = v32;
      int v25 = *((_DWORD *)this + 20);
    }
    if ((v25 & 8) != 0)
    {
      int v202 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t v203 = mlcore::ItemPropertyHasNonPurgeableAsset(v202);
      v423[0] = 0;
      v423[1] = 0;
      uint64_t v204 = mlcore::GetForeignProperty<int>((uint64_t)v202, v203, v423);
      uint64_t v16 = (uint64_t)operator new(0x30uLL);
      uint64_t v205 = v16;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = &unk_26C5CA718;
      uint64_t v206 = v16 + 24;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 24) = &unk_26C5C54E0;
      *(void *)(v16 + 32) = v204;
      unint64_t v207 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v209 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v210 = v209 + 1;
        if ((unint64_t)(v209 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v211 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v210) {
          unint64_t v210 = v211 >> 3;
        }
        if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v212 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v212 = v210;
        }
        int v434 = (unint64_t *)&v437;
        int v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v212);
        *(void *)&long long v214 = v206;
        *((void *)&v214 + 1) = v205;
        std::string v215 = &v213[16 * v209];
        v432.n128_u64[0] = (unint64_t)v213;
        v432.n128_u64[1] = (unint64_t)v215;
        v433.n128_u64[1] = (unint64_t)&v213[16 * v216];
        *(_OWORD *)std::string v215 = v214;
        v433.n128_u64[0] = (unint64_t)(v215 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v208 = v436.n128_u64[1];
        uint64_t v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v206;
        *(void *)(v207 + 8) = v16;
        unint64_t v208 = v207 + 16;
      }
      v436.n128_u64[1] = v208;
      int v25 = *((_DWORD *)this + 20);
    }
    if ((v25 & 0x10) != 0)
    {
      int v217 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t v218 = mlcore::ItemPropertyLikedState(v217);
      v422[0] = 0;
      v422[1] = 0;
      uint64_t v219 = mlcore::GetForeignProperty<int>((uint64_t)v217, v218, v422);
      uint64_t v16 = (uint64_t)operator new(0x48uLL);
      uint64_t v220 = v16;
      *(_OWORD *)(v16 + 8) = 0u;
      *(void *)uint64_t v16 = &unk_26C5CAB78;
      uint64_t v221 = v16 + 24;
      *(void *)(v16 + 32) = v219;
      *(void *)(v16 + 40) = 0;
      *(void *)(v16 + 24) = &unk_26C5C7978;
      *(_DWORD *)(v16 + 48) = 2;
      *(_OWORD *)(v16 + 56) = 0u;
      unint64_t v222 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v224 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v225 = v224 + 1;
        if ((unint64_t)(v224 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v226 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v225) {
          unint64_t v225 = v226 >> 3;
        }
        if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v227 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v227 = v225;
        }
        int v434 = (unint64_t *)&v437;
        std::string v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v227);
        *(void *)&long long v229 = v221;
        *((void *)&v229 + 1) = v220;
        std::string v230 = &v228[16 * v224];
        v432.n128_u64[0] = (unint64_t)v228;
        v432.n128_u64[1] = (unint64_t)v230;
        v433.n128_u64[1] = (unint64_t)&v228[16 * v231];
        *(_OWORD *)std::string v230 = v229;
        v433.n128_u64[0] = (unint64_t)(v230 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v223 = v436.n128_u64[1];
        uint64_t v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v221;
        *(void *)(v222 + 8) = v16;
        unint64_t v223 = v222 + 16;
      }
      v436.n128_u64[1] = v223;
      int v25 = *((_DWORD *)this + 20);
    }
    if ((v25 & 0x200) != 0)
    {
      char v232 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t v233 = mlcore::ItemPropertyIsProtected(v232);
      v421[0] = 0;
      v421[1] = 0;
      uint64_t v234 = mlcore::GetForeignProperty<long long>((uint64_t)v232, v233, v421);
      uint64_t v16 = (uint64_t)operator new(0x48uLL);
      uint64_t v235 = v16;
      *(_OWORD *)(v16 + 8) = 0u;
      *(void *)uint64_t v16 = &unk_26C5CABB0;
      uint64_t v236 = v16 + 24;
      *(void *)(v16 + 32) = v234;
      *(void *)(v16 + 40) = 0;
      *(void *)(v16 + 24) = &unk_26C5C79D0;
      *(void *)(v16 + 48) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      unint64_t v237 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v239 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v240 = v239 + 1;
        if ((unint64_t)(v239 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v241 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v240) {
          unint64_t v240 = v241 >> 3;
        }
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v242 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v240;
        }
        int v434 = (unint64_t *)&v437;
        uint64_t v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v242);
        *(void *)&long long v244 = v236;
        *((void *)&v244 + 1) = v235;
        int v245 = &v243[16 * v239];
        v432.n128_u64[0] = (unint64_t)v243;
        v432.n128_u64[1] = (unint64_t)v245;
        v433.n128_u64[1] = (unint64_t)&v243[16 * v246];
        *(_OWORD *)int v245 = v244;
        v433.n128_u64[0] = (unint64_t)(v245 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v238 = v436.n128_u64[1];
        uint64_t v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v236;
        *(void *)(v237 + 8) = v16;
        unint64_t v238 = v237 + 16;
      }
      v436.n128_u64[1] = v238;
      int v25 = *((_DWORD *)this + 20);
    }
    if ((v25 & 0x1000) != 0)
    {
      int v247 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t v248 = mlcore::ItemPropertyLikedState(v247);
      v420[0] = 0;
      v420[1] = 0;
      uint64_t v249 = mlcore::GetForeignProperty<int>((uint64_t)v247, v248, v420);
      uint64_t v16 = (uint64_t)operator new(0x48uLL);
      uint64_t v250 = v16;
      *(_OWORD *)(v16 + 8) = 0u;
      *(void *)uint64_t v16 = &unk_26C5CAB78;
      uint64_t v251 = v16 + 24;
      *(void *)(v16 + 32) = v249;
      *(void *)(v16 + 40) = 0;
      *(void *)(v16 + 24) = &unk_26C5C7978;
      *(_DWORD *)(v16 + 48) = 2;
      *(_OWORD *)(v16 + 56) = 0u;
      unint64_t v252 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v254 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v255 = v254 + 1;
        if ((unint64_t)(v254 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v256 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v255) {
          unint64_t v255 = v256 >> 3;
        }
        if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v257 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v257 = v255;
        }
        int v434 = (unint64_t *)&v437;
        std::string v258 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v257);
        *(void *)&long long v259 = v251;
        *((void *)&v259 + 1) = v250;
        int v260 = &v258[16 * v254];
        v432.n128_u64[0] = (unint64_t)v258;
        v432.n128_u64[1] = (unint64_t)v260;
        v433.n128_u64[1] = (unint64_t)&v258[16 * v261];
        *(_OWORD *)int v260 = v259;
        v433.n128_u64[0] = (unint64_t)(v260 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v253 = v436.n128_u64[1];
        uint64_t v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v251;
        *(void *)(v252 + 8) = v16;
        unint64_t v253 = v252 + 16;
      }
      v436.n128_u64[1] = v253;
      int v25 = *((_DWORD *)this + 20);
    }
    if ((v25 & 0x4000) != 0)
    {
      std::string v262 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v16);
      uint64_t HasCloudLibraryID = mlcore::ItemPropertyHasCloudLibraryID(v262);
      v419[0] = 0;
      v419[1] = 0;
      uint64_t v264 = mlcore::GetForeignProperty<int>((uint64_t)v262, HasCloudLibraryID, v419);
      int v265 = operator new(0x30uLL);
      char v266 = v265;
      v265[1] = 0;
      v265[2] = 0;
      *int v265 = &unk_26C5CA718;
      std::string v267 = (char *)(v265 + 3);
      *((_DWORD *)v265 + 10) = 0;
      v265[3] = &unk_26C5C54E0;
      v265[4] = v264;
      unint64_t v268 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v270 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v271 = v270 + 1;
        if ((unint64_t)(v270 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v272 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v271) {
          unint64_t v271 = v272 >> 3;
        }
        if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v273 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v271;
        }
        int v434 = (unint64_t *)&v437;
        std::string v274 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v273);
        *(void *)&long long v275 = v267;
        *((void *)&v275 + 1) = v266;
        char v276 = &v274[16 * v270];
        v432.n128_u64[0] = (unint64_t)v274;
        v432.n128_u64[1] = (unint64_t)v276;
        v433.n128_u64[1] = (unint64_t)&v274[16 * v277];
        *(_OWORD *)char v276 = v275;
        v433.n128_u64[0] = (unint64_t)(v276 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v269 = v436.n128_u64[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v267;
        *(void *)(v268 + 8) = v265;
        unint64_t v269 = v268 + 16;
      }
      v436.n128_u64[1] = v269;
    }
    mlcore::ContentRestrictions::_predicate((mlcore::LibraryView *)((char *)this + 48), 1, &v429);
    int v278 = (void *)v436.n128_u64[1];
    if (v429.n128_u64[0])
    {
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v280 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        if ((unint64_t)(v280 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v281 = (uint64_t)(v437 - v436.n128_u64[0]) >> 3;
        if (v281 <= v280 + 1) {
          unint64_t v281 = v280 + 1;
        }
        if ((unint64_t)v437 - v436.n128_u64[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v282 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v282 = v281;
        }
        int v434 = (unint64_t *)&v437;
        uint64_t v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v282);
        int v284 = (__n128 *)&v283[16 * v280];
        v432.n128_u64[0] = (unint64_t)v283;
        v432.n128_u64[1] = (unint64_t)v284;
        v433.n128_u64[1] = (unint64_t)&v283[16 * v285];
        unint64_t v286 = v429.n128_u64[1];
        *int v284 = v429;
        if (v286) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v286 + 8), 1uLL, memory_order_relaxed);
        }
        v433.n128_u64[0] = (unint64_t)v284[1].n128_u64;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        int v278 = (void *)v436.n128_u64[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v429.n128_u64[0];
        unint64_t v279 = v429.n128_u64[1];
        v278[1] = v429.n128_u64[1];
        if (v279) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v279 + 8), 1uLL, memory_order_relaxed);
        }
        v278 += 2;
      }
      v436.n128_u64[1] = (unint64_t)v278;
    }
    if (v278 == (void *)v436.n128_u64[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
    }
    else
    {
      memset(v418, 0, sizeof(v418));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v418, v436.n128_u64[0], v278, (uint64_t)((uint64_t)v278 - v436.n128_u64[0]) >> 4);
      mlcore::CreateAndPredicate(v418, a3);
      v432.n128_u64[0] = (unint64_t)v418;
      std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
    }
    if (v429.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v429.n128_u64[1]);
    }
    goto LABEL_394;
  }
  uint64_t v17 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  if ((mlcore::EntityClass *)v17 == a2)
  {
    __n128 v436 = 0uLL;
    *(void *)&long long v437 = 0;
    int v33 = *((_DWORD *)this + 20);
    if ((v33 & 4) != 0)
    {
      uint64_t v34 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v17);
      uint64_t v35 = mlcore::ItemPropertyAlbumPersistentID(v34);
      __n128 v36 = (std::__shared_weak_count *)operator new(0x38uLL);
      v36->__shared_owners_ = 0;
      v36->__shared_weak_owners_ = 0;
      v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
      v36[1].__shared_owners_ = (uint64_t)v34;
      v36[1].__shared_weak_owners_ = 0;
      v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
      v36[2].__vftable = (std::__shared_weak_count_vtbl *)v35;
      uint64_t v37 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      v417[0] = v36 + 1;
      v417[1] = v36;
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v38 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      mlcore::LibraryView::_predicateByApplyingFilters(&v432, this, v417, v38);
      std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v429, v37, (long long *)&v432);
      if (v432.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      uint64_t v39 = (std::__shared_weak_count *)v429.n128_u64[1];
      std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v428, v429.n128_i64[0], (std::__shared_weak_count *)v429.n128_u64[1]);
      __n128 v40 = v428;
      __n128 v428 = 0uLL;
      unint64_t v41 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        __n128 v400 = v40;
        uint64_t v297 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        if ((unint64_t)(v297 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v298 = (uint64_t)(v437 - v436.n128_u64[0]) >> 3;
        if (v298 <= v297 + 1) {
          unint64_t v298 = v297 + 1;
        }
        if ((unint64_t)v437 - v436.n128_u64[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v299 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v299 = v298;
        }
        int v434 = (unint64_t *)&v437;
        int v300 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v299);
        std::string v301 = (__n128 *)&v300[16 * v297];
        v432.n128_u64[0] = (unint64_t)v300;
        v432.n128_u64[1] = (unint64_t)v301;
        v433.n128_u64[1] = (unint64_t)&v300[16 * v302];
        *std::string v301 = v400;
        v433.n128_u64[0] = (unint64_t)v301[1].n128_u64;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v42 = v436.n128_u64[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(__n128 *)v436.n128_u64[1] = v40;
        unint64_t v42 = v41 + 16;
      }
      v436.n128_u64[1] = v42;
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      int v33 = *((_DWORD *)this + 20);
    }
    if ((v33 & 0x800) != 0)
    {
      uint64_t IsKeepLocalEnabled = mlcore::AlbumPropertyIsKeepLocalEnabled((mlcore *)v17);
      uint64_t v17 = (uint64_t)operator new(0x30uLL);
      uint64_t v304 = v17;
      *(void *)(v17 + 8) = 0;
      *(void *)(v17 + 16) = 0;
      *(void *)uint64_t v17 = &unk_26C5CA718;
      uint64_t v305 = v17 + 24;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 24) = &unk_26C5C54E0;
      *(void *)(v17 + 32) = IsKeepLocalEnabled;
      unint64_t v306 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v308 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v309 = v308 + 1;
        if ((unint64_t)(v308 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v310 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v309) {
          unint64_t v309 = v310 >> 3;
        }
        if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v311 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v311 = v309;
        }
        int v434 = (unint64_t *)&v437;
        int v312 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v311);
        *(void *)&long long v313 = v305;
        *((void *)&v313 + 1) = v304;
        std::string v314 = &v312[16 * v308];
        v432.n128_u64[0] = (unint64_t)v312;
        v432.n128_u64[1] = (unint64_t)v314;
        v433.n128_u64[1] = (unint64_t)&v312[16 * v315];
        *(_OWORD *)std::string v314 = v313;
        v433.n128_u64[0] = (unint64_t)(v314 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        unint64_t v307 = v436.n128_u64[1];
        uint64_t v17 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v305;
        *(void *)(v306 + 8) = v17;
        unint64_t v307 = v306 + 16;
      }
      v436.n128_u64[1] = v307;
      int v33 = *((_DWORD *)this + 20);
    }
    if ((v33 & 0x2000) != 0)
    {
      uint64_t v317 = mlcore::AlbumPropertyLikedState((mlcore *)v17);
      uint64_t v318 = (char *)operator new(0x48uLL);
      uint64_t v319 = v318;
      *(_OWORD *)(v318 + 8) = 0u;
      *(void *)uint64_t v318 = &unk_26C5CAB78;
      std::string v320 = v318 + 24;
      *((void *)v318 + 4) = v317;
      *((void *)v318 + 5) = 0;
      *((void *)v318 + 3) = &unk_26C5C7978;
      *((_DWORD *)v318 + 12) = 2;
      *(_OWORD *)(v318 + 56) = 0u;
      unint64_t v321 = v436.n128_u64[1];
      if (v436.n128_u64[1] >= (unint64_t)v437)
      {
        uint64_t v322 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
        unint64_t v323 = v322 + 1;
        if ((unint64_t)(v322 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v324 = v437 - v436.n128_u64[0];
        if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v323) {
          unint64_t v323 = v324 >> 3;
        }
        if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v325 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v325 = v323;
        }
        int v434 = (unint64_t *)&v437;
        int v326 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v325);
        *(void *)&long long v327 = v320;
        *((void *)&v327 + 1) = v319;
        int v328 = &v326[16 * v322];
        v432.n128_u64[0] = (unint64_t)v326;
        v432.n128_u64[1] = (unint64_t)v328;
        v433.n128_u64[1] = (unint64_t)&v326[16 * v329];
        *(_OWORD *)int v328 = v327;
        v433.n128_u64[0] = (unint64_t)(v328 + 16);
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
        std::string v316 = (void *)v436.n128_u64[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
      }
      else
      {
        *(void *)v436.n128_u64[1] = v320;
        *(void *)(v321 + 8) = v318;
        std::string v316 = (void *)(v321 + 16);
      }
      v436.n128_u64[1] = (unint64_t)v316;
    }
    else
    {
      std::string v316 = (void *)v436.n128_u64[1];
    }
    if (v316 != (void *)v436.n128_u64[0])
    {
      memset(v416, 0, sizeof(v416));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v416, v436.n128_u64[0], v316, (uint64_t)((uint64_t)v316 - v436.n128_u64[0]) >> 4);
      std::string v330 = v416;
      mlcore::CreateAndPredicate(v416, a3);
LABEL_392:
      v432.n128_u64[0] = (unint64_t)v330;
      std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
LABEL_394:
      std::string v181 = &v436;
LABEL_395:
      v432.n128_u64[0] = (unint64_t)v181;
      std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
      return;
    }
LABEL_393:
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    goto LABEL_394;
  }
  uint64_t v18 = (mlcore *)mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer();
  if (v18 == a2 && (*((unsigned char *)this + 80) & 4) != 0)
  {
    char v287 = (mlcore *)mlcore::AlbumPropertyPersistentID(v18);
    uint64_t v288 = mlcore::ItemPropertyAlbumPersistentID(v287);
    int v289 = (std::__shared_weak_count *)operator new(0x38uLL);
    v289->__shared_owners_ = 0;
    v289->__shared_weak_owners_ = 0;
    v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
    v289[1].__shared_owners_ = (uint64_t)v287;
    v289[1].__shared_weak_owners_ = 0;
    v289[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
    v289[2].__vftable = (std::__shared_weak_count_vtbl *)v288;
    uint64_t v290 = mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer();
    v415[0] = v289 + 1;
    v415[1] = v289;
    atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v291 = mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer();
    mlcore::LibraryView::_predicateByApplyingFilters(&v436, this, v415, v291);
    std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v432, v290, (long long *)&v436);
    if (v436.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v289);
    std::string v292 = (std::__shared_weak_count *)v432.n128_u64[1];
    std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v436, v432.n128_i64[0], (std::__shared_weak_count *)v432.n128_u64[1]);
  }
  else
  {
    uint64_t v19 = (mlcore *)mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
    if (v19 == a2 && (*((unsigned char *)this + 80) & 4) != 0)
    {
      int v293 = (mlcore *)mlcore::AlbumPropertyPersistentID(v19);
      uint64_t v294 = mlcore::ItemPropertyAlbumPersistentID(v293);
      int v289 = (std::__shared_weak_count *)operator new(0x38uLL);
      v289->__shared_owners_ = 0;
      v289->__shared_weak_owners_ = 0;
      v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
      v289[1].__shared_owners_ = (uint64_t)v293;
      v289[1].__shared_weak_owners_ = 0;
      v289[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
      v289[2].__vftable = (std::__shared_weak_count_vtbl *)v294;
      uint64_t v295 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
      v414[0] = v289 + 1;
      v414[1] = v289;
      atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v296 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
      mlcore::LibraryView::_predicateByApplyingFilters(&v436, this, v414, v296);
      std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v432, v295, (long long *)&v436);
      if (v436.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v289);
      std::string v292 = (std::__shared_weak_count *)v432.n128_u64[1];
      std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v436, v432.n128_i64[0], (std::__shared_weak_count *)v432.n128_u64[1]);
    }
    else
    {
      uint64_t v20 = (mlcore *)mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
      if (v20 == a2)
      {
        __n128 v436 = 0uLL;
        *(void *)&long long v437 = 0;
        int v182 = *((_DWORD *)this + 20);
        if ((v182 & 4) != 0)
        {
          std::string v183 = (mlcore *)mlcore::ArtistPropertyPersistentID(v20);
          uint64_t v184 = mlcore::ItemPropertyAlbumArtistPersistentID(v183);
          char v185 = (std::__shared_weak_count *)operator new(0x38uLL);
          v185->__shared_owners_ = 0;
          v185->__shared_weak_owners_ = 0;
          v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
          v185[1].__shared_owners_ = (uint64_t)v183;
          v185[1].__shared_weak_owners_ = 0;
          v185[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
          v185[2].__vftable = (std::__shared_weak_count_vtbl *)v184;
          uint64_t v186 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          v413[0] = v185 + 1;
          v413[1] = v185;
          atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v187 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          mlcore::LibraryView::_predicateByApplyingFilters(&v432, this, v413, v187);
          std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v429, v186, (long long *)&v432);
          if (v432.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v185);
          std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v428, v429.n128_i64[0], (std::__shared_weak_count *)v429.n128_u64[1]);
          std::string v188 = (mlcore *)_os_feature_enabled_impl();
          if (!v188 || (*((unsigned char *)this + 80) & 8) != 0)
          {
            __n128 v331 = v428;
            if (v428.n128_u64[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v428.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v332 = v436.n128_u64[1];
            if (v436.n128_u64[1] >= (unint64_t)v437)
            {
              __n128 v401 = v331;
              uint64_t v380 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
              if ((unint64_t)(v380 + 1) >> 60) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v381 = (uint64_t)(v437 - v436.n128_u64[0]) >> 3;
              if (v381 <= v380 + 1) {
                unint64_t v381 = v380 + 1;
              }
              if ((unint64_t)v437 - v436.n128_u64[0] >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v382 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v382 = v381;
              }
              int v434 = (unint64_t *)&v437;
              uint64_t v383 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v382);
              std::string v384 = (__n128 *)&v383[16 * v380];
              v432.n128_u64[0] = (unint64_t)v383;
              v432.n128_u64[1] = (unint64_t)v384;
              v433.n128_u64[1] = (unint64_t)&v383[16 * v385];
              __n128 *v384 = v401;
              v433.n128_u64[0] = (unint64_t)v384[1].n128_u64;
              std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
              unint64_t v333 = v436.n128_u64[1];
              std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
            }
            else
            {
              *(__n128 *)v436.n128_u64[1] = v331;
              unint64_t v333 = v332 + 16;
            }
            v436.n128_u64[1] = v333;
            char v190 = (std::__shared_weak_count *)v428.n128_u64[1];
          }
          else
          {
            uint64_t v189 = mlcore::ArtistPropertyLikedState(v188);
            std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<int>,std::allocator<mlcore::ComparisonPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::ComparisonOperator,int const&,void>(&v412, v189, 0, 2);
            char v190 = (std::__shared_weak_count *)v428.n128_u64[1];
            __n128 v432 = v428;
            if (v428.n128_u64[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v428.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
            }
            std::string v191 = (std::__shared_weak_count *)v412.n128_u64[1];
            __n128 v433 = v412;
            if (v412.n128_u64[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v412.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
            }
            std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v410, &v432, 2uLL);
            mlcore::CreateOrPredicate(v410, &v411);
            std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v411);
            if (v411.n128_u64[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v411.n128_u64[1]);
            }
            uint64_t v431 = (void **)v410;
            std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v431);
            for (uint64_t j = 3; j != -1; j -= 2)
            {
              std::string v193 = (std::__shared_weak_count *)v432.n128_u64[j];
              if (v193) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v193);
              }
            }
            if (v191) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v191);
            }
          }
          if (v190) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v190);
          }
          if (v429.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v429.n128_u64[1]);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v185);
          int v182 = *((_DWORD *)this + 20);
        }
        if ((v182 & 0x2000) != 0)
        {
          uint64_t v387 = mlcore::ArtistPropertyLikedState(v20);
          std::string v388 = (char *)operator new(0x48uLL);
          int v389 = v388;
          *(_OWORD *)(v388 + 8) = 0u;
          *(void *)std::string v388 = &unk_26C5CAB78;
          uint64_t v390 = v388 + 24;
          *((void *)v388 + 4) = v387;
          *((void *)v388 + 5) = 0;
          *((void *)v388 + 3) = &unk_26C5C7978;
          *((_DWORD *)v388 + 12) = 2;
          *(_OWORD *)(v388 + 56) = 0u;
          unint64_t v391 = v436.n128_u64[1];
          if (v436.n128_u64[1] >= (unint64_t)v437)
          {
            uint64_t v392 = (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4;
            unint64_t v393 = v392 + 1;
            if ((unint64_t)(v392 + 1) >> 60) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v394 = v437 - v436.n128_u64[0];
            if ((uint64_t)(v437 - v436.n128_u64[0]) >> 3 > v393) {
              unint64_t v393 = v394 >> 3;
            }
            if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v395 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v395 = v393;
            }
            int v434 = (unint64_t *)&v437;
            std::string v396 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v395);
            *(void *)&long long v397 = v390;
            *((void *)&v397 + 1) = v389;
            uint64_t v398 = &v396[16 * v392];
            v432.n128_u64[0] = (unint64_t)v396;
            v432.n128_u64[1] = (unint64_t)v398;
            v433.n128_u64[1] = (unint64_t)&v396[16 * v399];
            *(_OWORD *)uint64_t v398 = v397;
            v433.n128_u64[0] = (unint64_t)(v398 + 16);
            std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v436, &v432);
            uint64_t v386 = (void *)v436.n128_u64[1];
            std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v432);
          }
          else
          {
            *(void *)v436.n128_u64[1] = v390;
            *(void *)(v391 + 8) = v388;
            uint64_t v386 = (void *)(v391 + 16);
          }
          v436.n128_u64[1] = (unint64_t)v386;
        }
        else
        {
          uint64_t v386 = (void *)v436.n128_u64[1];
        }
        if (v386 != (void *)v436.n128_u64[0])
        {
          memset(v409, 0, sizeof(v409));
          std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v409, v436.n128_u64[0], v386, (uint64_t)((uint64_t)v386 - v436.n128_u64[0]) >> 4);
          std::string v330 = v409;
          mlcore::CreateAndPredicate(v409, a3);
          goto LABEL_392;
        }
        goto LABEL_393;
      }
      unint64_t v21 = (mlcore *)mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer();
      if (v21 == a2 && (*((unsigned char *)this + 80) & 4) != 0)
      {
        int v368 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(v21);
        uint64_t v369 = mlcore::ItemPropertyItemArtistPersistentID(v368);
        int v289 = (std::__shared_weak_count *)operator new(0x38uLL);
        v289->__shared_owners_ = 0;
        v289->__shared_weak_owners_ = 0;
        v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
        v289[1].__shared_owners_ = (uint64_t)v368;
        v289[1].__shared_weak_owners_ = 0;
        v289[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
        v289[2].__vftable = (std::__shared_weak_count_vtbl *)v369;
        uint64_t v370 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
        v408[0] = v289 + 1;
        v408[1] = v289;
        atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v371 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
        mlcore::LibraryView::_predicateByApplyingFilters(&v436, this, v408, v371);
        std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v432, v370, (long long *)&v436);
        if (v436.n128_u64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v289);
        std::string v292 = (std::__shared_weak_count *)v432.n128_u64[1];
        std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v436, v432.n128_i64[0], (std::__shared_weak_count *)v432.n128_u64[1]);
      }
      else
      {
        uint64_t v22 = (mlcore *)mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer();
        if (v22 == a2 && (*((unsigned char *)this + 80) & 4) != 0)
        {
          std::string v372 = (mlcore *)mlcore::GenrePropertyPersistentID(v22);
          uint64_t v373 = mlcore::ItemPropertyGenrePersistentID(v372);
          int v289 = (std::__shared_weak_count *)operator new(0x38uLL);
          v289->__shared_owners_ = 0;
          v289->__shared_weak_owners_ = 0;
          v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
          v289[1].__shared_owners_ = (uint64_t)v372;
          v289[1].__shared_weak_owners_ = 0;
          v289[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
          v289[2].__vftable = (std::__shared_weak_count_vtbl *)v373;
          uint64_t v374 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          v407[0] = v289 + 1;
          v407[1] = v289;
          atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v375 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          mlcore::LibraryView::_predicateByApplyingFilters(&v436, this, v407, v375);
          std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v432, v374, (long long *)&v436);
          if (v436.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v289);
          std::string v292 = (std::__shared_weak_count *)v432.n128_u64[1];
          std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v436, v432.n128_i64[0], (std::__shared_weak_count *)v432.n128_u64[1]);
        }
        else
        {
          unint64_t v23 = (mlcore::EntityClass *)mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
          if (v23 != a2 || (*((unsigned char *)this + 80) & 4) == 0)
          {
            unint64_t v24 = (mlcore::EntityClass *)mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
            if (v24 != a2)
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              return;
            }
            __n128 v436 = 0uLL;
            *(void *)&long long v437 = 0;
            int v334 = *((_DWORD *)this + 20);
            if (v334)
            {
              uint64_t IsHidden = mlcore::PlaylistPropertyIsHidden(v24);
              int v336 = operator new(0x30uLL);
              v336[1] = 0;
              v336[2] = 0;
              *int v336 = &unk_26C5CA718;
              *((_DWORD *)v336 + 10) = 1;
              v336[3] = &unk_26C5C54E0;
              v336[4] = IsHidden;
              *(void *)&long long v337 = v336 + 3;
              *((void *)&v337 + 1) = v336;
              __n128 v432 = (__n128)v337;
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v432);
              unint64_t v24 = (mlcore::EntityClass *)v432.n128_u64[1];
              if (v432.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
              }
              int v334 = *((_DWORD *)this + 20);
            }
            if ((v334 & 0x20) != 0)
            {
              std::string v338 = (mlcore *)mlcore::PlaylistItemPropertyContainerPersistentID(v24);
              uint64_t v339 = mlcore::PlaylistPropertyPersistentID(v338);
              std::string v340 = (std::__shared_weak_count *)operator new(0x38uLL);
              v340->__shared_owners_ = 0;
              v340->__shared_weak_owners_ = 0;
              v340->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
              v340[1].__shared_owners_ = (uint64_t)v338;
              v340[1].__shared_weak_owners_ = 0;
              v340[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
              v340[2].__vftable = (std::__shared_weak_count_vtbl *)v339;
              uint64_t v341 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
              v405[0] = v340 + 1;
              v405[1] = v340;
              atomic_fetch_add_explicit(&v340->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v342 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
              mlcore::LibraryView::_predicateByApplyingFilters(&v432, this, v405, v342);
              std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v429, v341, (long long *)&v432);
              if (v432.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v340);
              std::string v343 = (std::__shared_weak_count *)v429.n128_u64[1];
              std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v428, v429.n128_i64[0], (std::__shared_weak_count *)v429.n128_u64[1]);
              uint64_t IsFolder = mlcore::PlaylistPropertySmartIsFolder(v344);
              int v346 = (std::__shared_weak_count *)operator new(0x30uLL);
              v346->__shared_owners_ = 0;
              v346->__shared_weak_owners_ = 0;
              v346->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA718;
              LODWORD(v346[1].__shared_weak_owners_) = 0;
              v346[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C54E0;
              v346[1].__shared_owners_ = IsFolder;
              uint64_t IsSmart = mlcore::PlaylistPropertyIsSmart((mlcore *)v346);
              std::string v348 = (char *)operator new(0x30uLL);
              int v349 = (std::__shared_weak_count *)v348;
              *((void *)v348 + 1) = 0;
              *((void *)v348 + 2) = 0;
              *(void *)std::string v348 = &unk_26C5CA718;
              *((_DWORD *)v348 + 10) = 0;
              *((void *)v348 + 3) = &unk_26C5C54E0;
              *((void *)v348 + 4) = IsSmart;
              v432.n128_u64[0] = (unint64_t)&v346[1];
              v432.n128_u64[1] = (unint64_t)v346;
              atomic_fetch_add_explicit(&v346->__shared_owners_, 1uLL, memory_order_relaxed);
              std::string v350 = (std::__shared_weak_count *)v428.n128_u64[1];
              __n128 v433 = v428;
              if (v428.n128_u64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v428.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
              }
              int v434 = (unint64_t *)(v348 + 24);
              uint64_t v435 = v348;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v348 + 1, 1uLL, memory_order_relaxed);
              std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v404, &v432, 3uLL);
              mlcore::CreateOrPredicate(v404, &v412);
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v412);
              if (v412.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v412.n128_u64[1]);
              }
              v411.n128_u64[0] = (unint64_t)v404;
              std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
              for (uint64_t k = 5; k != -1; k -= 2)
              {
                char v352 = (std::__shared_weak_count *)v432.n128_u64[k];
                if (v352) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v352);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v349);
              std::__shared_weak_count::__release_shared[abi:ne180100](v346);
              if (v350) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v350);
              }
              if (v343) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v343);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v340);
              int v334 = *((_DWORD *)this + 20);
            }
            if ((v334 & 0x10) != 0)
            {
              uint64_t v353 = mlcore::PlaylistPropertyLikedState(v24);
              std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<int>,std::allocator<mlcore::ComparisonPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::ComparisonOperator,int const&,void>(&v429, v353, 0, 2);
              __n128 v432 = v429;
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v432);
              unint64_t v24 = (mlcore::EntityClass *)v432.n128_u64[1];
              if (v432.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
              }
              int v334 = *((_DWORD *)this + 20);
            }
            if ((v334 & 0x40) != 0)
            {
              uint64_t v354 = mlcore::PlaylistPropertyIsKeepLocalEnabled(v24);
              int v355 = operator new(0x30uLL);
              v355[1] = 0;
              v355[2] = 0;
              *int v355 = &unk_26C5CA718;
              *((_DWORD *)v355 + 10) = 0;
              v355[3] = &unk_26C5C54E0;
              v355[4] = v354;
              *(void *)&long long v356 = v355 + 3;
              *((void *)&v356 + 1) = v355;
              __n128 v432 = (__n128)v356;
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v432);
              unint64_t v24 = (mlcore::EntityClass *)v432.n128_u64[1];
              if (v432.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
              }
              int v334 = *((_DWORD *)this + 20);
            }
            if ((v334 & 0x400) != 0)
            {
              uint64_t IsFavoritedSongs = mlcore::PlaylistPropertyIsFavoritedSongs(v24);
              std::string v358 = operator new(0x30uLL);
              v358[1] = 0;
              v358[2] = 0;
              *std::string v358 = &unk_26C5CA718;
              *((_DWORD *)v358 + 10) = 1;
              void v358[3] = &unk_26C5C54E0;
              v358[4] = IsFavoritedSongs;
              *(void *)&long long v359 = v358 + 3;
              *((void *)&v359 + 1) = v358;
              __n128 v432 = (__n128)v359;
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v432);
              unint64_t v24 = (mlcore::EntityClass *)v432.n128_u64[1];
              if (v432.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v432.n128_u64[1]);
              }
              int v334 = *((_DWORD *)this + 20);
            }
            if ((v334 & 0x2000) != 0)
            {
              uint64_t v360 = mlcore::PlaylistPropertyLikedState(v24);
              std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<int>,std::allocator<mlcore::ComparisonPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::ComparisonOperator,int const&,void>(&v429, v360, 0, 2);
              uint64_t v362 = mlcore::PlaylistPropertySmartIsFolder(v361);
              std::string v363 = (std::__shared_weak_count *)operator new(0x30uLL);
              int v364 = v363;
              v363->__shared_owners_ = 0;
              v363->__shared_weak_owners_ = 0;
              v363->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA718;
              LODWORD(v363[1].__shared_weak_owners_) = 0;
              v363[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C54E0;
              v363[1].__shared_owners_ = v362;
              uint64_t v365 = (std::__shared_weak_count *)v429.n128_u64[1];
              __n128 v432 = v429;
              if (v429.n128_u64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v429.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
              }
              v433.n128_u64[0] = (unint64_t)&v363[1];
              v433.n128_u64[1] = (unint64_t)v363;
              atomic_fetch_add_explicit(&v363->__shared_owners_, 1uLL, memory_order_relaxed);
              std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v403, &v432, 2uLL);
              mlcore::CreateOrPredicate(v403, &v428);
              std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v436, (uint64_t)&v428);
              if (v428.n128_u64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v428.n128_u64[1]);
              }
              v412.n128_u64[0] = (unint64_t)v403;
              std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v412);
              for (uint64_t m = 3; m != -1; m -= 2)
              {
                std::string v367 = (std::__shared_weak_count *)v432.n128_u64[m];
                if (v367) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v367);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v364);
              if (v365) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v365);
              }
            }
            if (v436.n128_u64[1] != v436.n128_u64[0])
            {
              memset(v402, 0, sizeof(v402));
              std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v402, v436.n128_u64[0], (void *)v436.n128_u64[1], (uint64_t)(v436.n128_u64[1] - v436.n128_u64[0]) >> 4);
              std::string v330 = v402;
              mlcore::CreateAndPredicate(v402, a3);
              goto LABEL_392;
            }
            goto LABEL_393;
          }
          std::string v376 = (mlcore *)mlcore::ComposerPropertyPersistentID(v23);
          uint64_t v377 = mlcore::ItemPropertyComposerPersistentID(v376);
          int v289 = (std::__shared_weak_count *)operator new(0x38uLL);
          v289->__shared_owners_ = 0;
          v289->__shared_weak_owners_ = 0;
          v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
          v289[1].__shared_owners_ = (uint64_t)v376;
          v289[1].__shared_weak_owners_ = 0;
          v289[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
          v289[2].__vftable = (std::__shared_weak_count_vtbl *)v377;
          uint64_t v378 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          v406[0] = v289 + 1;
          v406[1] = v289;
          atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v379 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
          mlcore::LibraryView::_predicateByApplyingFilters(&v436, this, v406, v379);
          std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v432, v378, (long long *)&v436);
          if (v436.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v436.n128_u64[1]);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v289);
          std::string v292 = (std::__shared_weak_count *)v432.n128_u64[1];
          std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v436, v432.n128_i64[0], (std::__shared_weak_count *)v432.n128_u64[1]);
        }
      }
    }
  }
  *a3 = v436;
  if (v292) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v292);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v289);
}

void sub_214DC8F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  *(void *)(v38 - 200) = &a32;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 200));
  uint64_t v40 = 24;
  while (1)
  {
    unint64_t v41 = *(std::__shared_weak_count **)(v38 - 192 + v40);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    v40 -= 16;
    if (v40 == -8)
    {
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      unint64_t v42 = *(std::__shared_weak_count **)(v38 - 232);
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (*(void *)(v38 - 216)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v38 - 216));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      *(void *)(v38 - 224) = v38 - 144;
      std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 224));
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyInMyLibrary(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyInMyLibrary(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyInMyLibrary(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyInMyLibrary(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyInMyLibrary(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__sharedPointer;
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>(uint64_t *a1, void **a2, int a3)
{
  uint64_t v6 = operator new(0x60uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26C5C9E20;
  uint64_t result = mediaplatform::SQLBinaryExpressionList::SQLBinaryExpressionList((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_214DC967C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLBinaryExpressionList::SQLBinaryExpressionList(uint64_t a1, void **a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = &unk_26C5BF190;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((void *)(a1 + 48), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_214DC96FC(_Unwind_Exception *a1)
{
  mediaplatform::SQLBinaryExpression::~SQLBinaryExpression(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_214DC9774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mlcore::ForeignProperty<long long>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DC97FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<std::string>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DC9888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::entityType()
{
  return 1;
}

void mlcore::ComparisonPropertyPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v59 = *a2;
  int v60 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v6 + 96))(&v61);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v56 = *a2;
  unint64_t v57 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v58);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        long long v63 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v51) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v55, &v51);
        long long v64 = v55;
        long long v55 = 0uLL;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        unint64_t v15 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v62;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v17 = *(std::__shared_weak_count **)((char *)&v63 + i);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
        break;
      case 1u:
        long long v63 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v55, 0);
        long long v64 = v55;
        long long v55 = 0uLL;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        unint64_t v21 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v62;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          unint64_t v23 = *(std::__shared_weak_count **)((char *)&v63 + j);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
        break;
      case 2u:
        long long v63 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v55, 0);
        long long v64 = v55;
        long long v55 = 0uLL;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        unint64_t v24 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v62;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          long long v26 = *(std::__shared_weak_count **)((char *)&v63 + k);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
        }
        break;
      case 3u:
        long long v63 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v55);
        long long v64 = v55;
        long long v55 = 0uLL;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v62;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          uint64_t v29 = *(std::__shared_weak_count **)((char *)&v63 + m);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
        }
        break;
      case 4u:
        long long v66 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v63 = &unk_26C5BF2D8;
        *((void *)&v63 + 1) = 0;
        long long v64 = 0uLL;
        LOBYTE(v65) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v51, (uint64_t)&v63);
        long long v67 = v51;
        long long v51 = 0uLL;
        uint64_t v53 = 0;
        unint64_t v54 = 0;
        uint64_t v52 = 0;
        *(void *)&long long v62 = &v52;
        BYTE8(v62) = 0;
        uint64_t v52 = (long long *)operator new(0x20uLL);
        uint64_t v53 = v52;
        unint64_t v54 = v52 + 2;
        uint64_t v53 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v54, &v66, &v68, v52);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v55, (void **)&v52);
        uint64_t v30 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v55;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        *(void *)&long long v62 = &v52;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          unint64_t v32 = *(std::__shared_weak_count **)((char *)&v66 + n);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v63);
        break;
      default:
        long long v63 = v61;
        if (*((void *)&v61 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v55, 0);
        long long v64 = v55;
        long long v55 = 0uLL;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v62;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          uint64_t v20 = *(std::__shared_weak_count **)((char *)&v63 + ii);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
        break;
    }
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24)))
    {
      case 0u:
        long long v63 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v51) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v55, &v51);
        long long v64 = v55;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        int v33 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v62;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (juint64_t j = 24; jj != -8; jj -= 16)
        {
          uint64_t v35 = *(std::__shared_weak_count **)((char *)&v63 + jj);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
        }
        break;
      case 1u:
        long long v63 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v55, 0);
        long long v64 = v55;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        uint64_t v39 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v62;
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (kuint64_t k = 24; kk != -8; kk -= 16)
        {
          unint64_t v41 = *(std::__shared_weak_count **)((char *)&v63 + kk);
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
        }
        break;
      case 2u:
        long long v63 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v55, 0);
        long long v64 = v55;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        unint64_t v42 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v62;
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (muint64_t m = 24; mm != -8; mm -= 16)
        {
          unint64_t v44 = *(std::__shared_weak_count **)((char *)&v63 + mm);
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
        }
        break;
      case 3u:
        long long v63 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v55);
        long long v64 = v55;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        uint64_t v45 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v62;
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (nuint64_t n = 24; nn != -8; nn -= 16)
        {
          int v47 = *(std::__shared_weak_count **)((char *)&v63 + nn);
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
        }
        break;
      case 4u:
        long long v66 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v63 = &unk_26C5BF2D8;
        *((void *)&v63 + 1) = 0;
        long long v64 = 0uLL;
        LOBYTE(v65) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v51, (uint64_t)&v63);
        long long v67 = v51;
        uint64_t v53 = 0;
        unint64_t v54 = 0;
        uint64_t v52 = 0;
        *(void *)&long long v62 = &v52;
        BYTE8(v62) = 0;
        uint64_t v52 = (long long *)operator new(0x20uLL);
        uint64_t v53 = v52;
        unint64_t v54 = v52 + 2;
        uint64_t v53 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v54, &v66, &v68, v52);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v55, (void **)&v52);
        long long v48 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v55;
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        *(void *)&long long v62 = &v52;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
        for (uint64_t i1 = 24; i1 != -8; i1 -= 16)
        {
          uint64_t v50 = *(std::__shared_weak_count **)((char *)&v66 + i1);
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v63);
        break;
      default:
        long long v63 = v58;
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v55, 0);
        long long v64 = v55;
        *(void *)&long long v67 = 0;
        long long v66 = 0uLL;
        uint64_t v52 = &v66;
        LOBYTE(v53) = 0;
        *(void *)&long long v66 = operator new(0x20uLL);
        *((void *)&v66 + 1) = v66;
        *(void *)&long long v67 = v66 + 32;
        *((void *)&v66 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v67, &v63, &v65, (void *)v66);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v62, (void **)&v66);
        __n128 v36 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        long long v58 = v62;
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        uint64_t v52 = &v66;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (uint64_t i2 = 24; i2 != -8; i2 -= 16)
        {
          uint64_t v38 = *(std::__shared_weak_count **)((char *)&v63 + i2);
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
        }
        break;
    }
  }
  int v10 = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  uint64_t v11 = (char *)operator new(0x48uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = &unk_26C5C9BF0;
  long long v12 = v61;
  if (*((void *)&v61 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v13 = v58;
  if (*((void *)&v58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v11 + 3) = &unk_26C5BEF00;
  *((_DWORD *)v11 + 8) = v10;
  *(_OWORD *)(v11 + 40) = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v11 + 56) = v13;
  if (*((void *)&v13 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  *(void *)&long long v14 = v11 + 24;
  *((void *)&v14 + 1) = v11;
  *a3 = v14;
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  if (*((void *)&v61 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
  }
}

void sub_214DCA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void **a25)
{
  a25 = (void **)&a12;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v27 = 24;
  while (1)
  {
    unint64_t v28 = *(std::__shared_weak_count **)(v25 - 88 + v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    v27 -= 16;
    if (v27 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)(v25 - 128));
      if (a20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a20);
      }
      if (a24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a24);
      }
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::QueryProperty<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  int v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v4 + 72))(&v10);
  uint64_t v6 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_26C5C9CD0;
  long long v7 = v10;
  long long v10 = 0u;
  *((void *)v6 + 3) = &unk_26C5BEF78;
  *((_OWORD *)v6 + 2) = v7;
  if (*((void *)&v7 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  *(void *)&long long v8 = v6 + 24;
  *((void *)&v8 + 1) = v6;
  *a3 = v8;
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_214DCAB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::InPredicate<long long>::InPredicate(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<long long>::InPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<long long>::InPredicate();
}

void sub_214DCABC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_214DCAC44(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v12 = operator new(0x18uLL);
  *long long v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *long long v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  *long long v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_214DCAE4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
}

uint64_t std::__shared_ptr_emplace<mlcore::DeviceLibraryView>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[15];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  a1[3] = &unk_26C5C4718;
  unint64_t v3 = (std::__shared_weak_count *)a1[12];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)(a1 + 4));
}

uint64_t mlcore::AlbumPropertyRepresentativeItemShowSortType(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyShowSortType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyBaseLocationPath(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyBaseLocationID(this);
  uint64_t v2 = mlcore::BaseLocationPropertyFilePath(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ArtistPropertyFetchableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    unint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214DCB1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ArtistPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyPersistentID(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemFetchableArtworkToken(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyFetchableArtworkToken(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyFetchableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 1;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    unint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214DCB4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::BestArtworkTokenPropertyFetchableArtworkToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemFetchableArtworkSourceType(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyFetchableArtworkSourceType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyFetchableArtworkSourceType(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 1;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    unint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return Foreign;
}

void sub_214DCB7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v3 + 120))(*(void *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v4 + 80))(v4))
    {
      case 0u:
        uint64_t v5 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 1u:
        uint64_t v14 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<long long>(v14, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 2u:
        uint64_t v15 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<double>(v15, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 3u:
        uint64_t v16 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<std::string>(v16, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 4u:
        uint64_t v17 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v17, v4, (uint64_t *)__p);
LABEL_20:
        uint64_t v13 = Foreign;
        break;
      default:
        uint64_t v13 = 0;
        break;
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, void *))(*v3 + 136))(&v27, v3);
    uint64_t v19 = mlcore::GetForeignProperty<int>(v13, v18, (uint64_t *)&v27);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  else
  {
    unint64_t v7 = *(void **)(a1 + 16);
    if (!v7 || (uint64_t v8 = v3[1], !(*(unsigned int (**)(void))(*v7 + 88))(*(void *)(a1 + 16)))) {
LABEL_14:
    }
      operator new();
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 32))(__p);
      long long v10 = __p[0];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      unint64_t v7 = (void *)v12;
      if (v11 == v8)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        unint64_t v23 = *(atomic_ullong **)(a1 + 32);
        __p[0] = *(void **)(a1 + 24);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = mlcore::GetForeignProperty<int>(v12, v22, (uint64_t *)__p);
        if (v23)
        {
          std::string::size_type size = (std::__shared_weak_count *)v23;
          goto LABEL_22;
        }
        return v19;
      }
      if (!v12) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12) & 1) == 0 && v7[1] == v8) {
        break;
      }
      if (((*(uint64_t (**)(void *))(*v7 + 88))(v7) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
    uint64_t v25 = *(void *)(a1 + 8);
    long long v26 = *(atomic_ullong **)(a1 + 32);
    __p[0] = *(void **)(a1 + 24);
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = mlcore::GetForeignProperty<int>(v24, v25, (uint64_t *)__p);
    if (v26)
    {
      std::string::size_type size = (std::__shared_weak_count *)v26;
      goto LABEL_22;
    }
  }
  return v19;
}

void sub_214DCBDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::GetForeignProperty<int>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_26C5C91D8;
  v8[1] = a2;
  v8[2] = a1;
  void v8[3] = v6;
  v8[4] = v7;
  uint64_t v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_214DCBF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<long long>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_26C5C9230;
  v8[1] = a2;
  v8[2] = a1;
  void v8[3] = v6;
  v8[4] = v7;
  uint64_t v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_214DCC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<std::string>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_26C5C9128;
  v8[1] = a2;
  v8[2] = a1;
  void v8[3] = v6;
  v8[4] = v7;
  uint64_t v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_214DCC174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignPropertyBase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_26C5C9338;
  v8[1] = a2;
  v8[2] = a1;
  void v8[3] = v6;
  v8[4] = v7;
  uint64_t v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_214DCC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t mlcore::_GetForeignProperty(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  {
    operator new();
  }
  unint64_t v9 = mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__mutex);
  uint64_t v50 = (std::recursive_mutex *)v9;
  {
    operator new();
  }
  unint64_t v10 = a1 ^ v8 ^ a2;
  int8x8_t v11 = *(int8x8_t *)(mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache
                    + 8);
  if (!*(void *)&v11) {
    goto LABEL_23;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = a1 ^ v8 ^ a2;
    if (v10 >= *(void *)&v11) {
      unint64_t v13 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v11 - 1) & v10;
  }
  uint64_t v14 = *(void **)(*(void *)mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache
                   + 8 * v13);
  if (!v14 || (uint64_t v15 = (void *)*v14) == 0)
  {
LABEL_23:
    uint64_t v17 = *(void *)(a4 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
    uint64_t v18 = mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v19 = *(void *)(v18 + 8);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v9 = a1 ^ v8 ^ a2;
        if (v10 >= v19) {
          unint64_t v9 = v10 % v19;
        }
      }
      else
      {
        unint64_t v9 = (v19 - 1) & v10;
      }
      unint64_t v21 = *(void **)(*(void *)v18 + 8 * v9);
      if (v21)
      {
        for (uint64_t i = (void *)*v21; i; uint64_t i = (void *)*i)
        {
          unint64_t v23 = i[1];
          if (v23 == v10)
          {
            if (i[2] == a1 && i[3] == a2 && i[4] == v8) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v20.u32[0] > 1uLL)
            {
              if (v23 >= v19) {
                v23 %= v19;
              }
            }
            else
            {
              v23 &= v19 - 1;
            }
            if (v23 != v9) {
              break;
            }
          }
        }
      }
    }
    uint64_t v24 = operator new(0x38uLL);
    uint64_t v25 = v24;
    *(void *)&long long v26 = a1;
    *((void *)&v26 + 1) = a2;
    std::string v27 = (void *)(v18 + 16);
    *uint64_t v24 = 0;
    v24[1] = v10;
    *((_OWORD *)v24 + 1) = v26;
    v24[4] = v8;
    v24[5] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v24[6] = v49;
    float v28 = (float)(unint64_t)(*(void *)(v18 + 24) + 1);
    float v29 = *(float *)(v18 + 64);
    if (v19 && (float)(v29 * (float)v19) >= v28)
    {
LABEL_93:
      uint64_t v45 = *(void **)(*(void *)v18 + 8 * v9);
      if (v45)
      {
        *uint64_t v25 = *v45;
      }
      else
      {
        *uint64_t v25 = *(void *)(v18 + 16);
        *(void *)(v18 + 16) = v25;
        *(void *)(*(void *)v18 + 8 * v9) = v27;
        if (!*v25) {
          goto LABEL_102;
        }
        unint64_t v46 = *(void *)(*v25 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v46 >= v19) {
            v46 %= v19;
          }
        }
        else
        {
          v46 &= v19 - 1;
        }
        uint64_t v45 = (void *)(*(void *)v18 + 8 * v46);
      }
      *uint64_t v45 = v25;
LABEL_102:
      ++*(void *)(v18 + 24);
LABEL_103:
      if (!v7)
      {
        std::recursive_mutex::unlock(v50);
        return v49;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      std::recursive_mutex::unlock(v50);
      goto LABEL_105;
    }
    BOOL v30 = 1;
    if (v19 >= 3) {
      BOOL v30 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v19);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v19 = *(void *)(v18 + 8);
    if (*(void *)&prime > v19) {
      goto LABEL_59;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(v18 + 24) / *(float *)(v18 + 64));
      if (v19 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = *(void *)(v18 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_59:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v34 = operator new(8 * *(void *)&prime);
          uint64_t v35 = *(void **)v18;
          *(void *)uint64_t v18 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *(int8x8_t *)(v18 + 8) = prime;
          do
            *(void *)(*(void *)v18 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          uint64_t v37 = (void *)*v27;
          if (*v27)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v18 + 8 * v38) = v27;
            uint64_t v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(void *)&prime) {
                    v44 %= *(void *)&prime;
                  }
                }
                else
                {
                  v44 &= *(void *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(void *)(*(void *)v18 + 8 * v44))
                  {
                    *(void *)(*(void *)v18 + 8 * v44) = v37;
                    goto LABEL_84;
                  }
                  *uint64_t v37 = *v43;
                  *uint64_t v43 = **(void **)(*(void *)v18 + 8 * v44);
                  **(void **)(*(void *)v18 + 8 * v44) = v43;
                  uint64_t v43 = v37;
                }
                unint64_t v44 = v38;
LABEL_84:
                uint64_t v37 = v43;
                uint64_t v43 = (void *)*v43;
                unint64_t v38 = v44;
              }
              while (v43);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_88;
        }
        long long v48 = *(void **)v18;
        *(void *)uint64_t v18 = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v19 = 0;
        *(void *)(v18 + 8) = 0;
      }
    }
LABEL_88:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v10 >= v19) {
        unint64_t v9 = v10 % v19;
      }
      else {
        unint64_t v9 = v10;
      }
    }
    else
    {
      unint64_t v9 = (v19 - 1) & v10;
    }
    goto LABEL_93;
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == v10) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v11) {
        v16 %= *(void *)&v11;
      }
    }
    else
    {
      v16 &= *(void *)&v11 - 1;
    }
    if (v16 != v13) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_23;
    }
  }
  if (v15[2] != a1 || v15[3] != a2 || v15[4] != v8) {
    goto LABEL_22;
  }
  uint64_t v49 = v15[6];
  std::recursive_mutex::unlock((std::recursive_mutex *)v9);
  if (v7) {
LABEL_105:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v49;
}

void sub_214DCC9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
  std::recursive_mutex::unlock(a10);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v3 + 120))(*(void *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v4 + 80))(v4))
    {
      case 0u:
        uint64_t v5 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 1u:
        uint64_t v14 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<long long>(v14, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 2u:
        uint64_t v15 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<double>(v15, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 3u:
        uint64_t v16 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<std::string>(v16, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 4u:
        uint64_t v17 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v17, v4, (uint64_t *)__p);
LABEL_20:
        uint64_t v13 = Foreign;
        break;
      default:
        uint64_t v13 = 0;
        break;
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, void *))(*v3 + 136))(&v27, v3);
    uint64_t v19 = mlcore::GetForeignProperty<std::string>(v13, v18, (uint64_t *)&v27);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 16);
    if (!v7 || (uint64_t v8 = v3[1], !(*(unsigned int (**)(void))(*v7 + 88))(*(void *)(a1 + 16)))) {
LABEL_14:
    }
      operator new();
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 32))(__p);
      unint64_t v10 = __p[0];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      uint64_t v7 = (void *)v12;
      if (v11 == v8)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        unint64_t v23 = *(atomic_ullong **)(a1 + 32);
        __p[0] = *(void **)(a1 + 24);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = mlcore::GetForeignProperty<std::string>(v12, v22, (uint64_t *)__p);
        if (v23)
        {
          std::string::size_type size = (std::__shared_weak_count *)v23;
          goto LABEL_22;
        }
        return v19;
      }
      if (!v12) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12) & 1) == 0 && v7[1] == v8) {
        break;
      }
      if (((*(uint64_t (**)(void *))(*v7 + 88))(v7) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
    uint64_t v25 = *(void *)(a1 + 8);
    long long v26 = *(atomic_ullong **)(a1 + 32);
    __p[0] = *(void **)(a1 + 24);
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = mlcore::GetForeignProperty<std::string>(v24, v25, (uint64_t *)__p);
    if (v26)
    {
      std::string::size_type size = (std::__shared_weak_count *)v26;
      goto LABEL_22;
    }
  }
  return v19;
}

void sub_214DCD044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<long long>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<long long>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ForeignProperty<long long>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::property;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v3 + 120))(*(void *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v4 + 80))(v4))
    {
      case 0u:
        uint64_t v5 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 1u:
        uint64_t v14 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<long long>(v14, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 2u:
        uint64_t v15 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<double>(v15, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 3u:
        uint64_t v16 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<std::string>(v16, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 4u:
        uint64_t v17 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v17, v4, (uint64_t *)__p);
LABEL_20:
        uint64_t v13 = Foreign;
        break;
      default:
        uint64_t v13 = 0;
        break;
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, void *))(*v3 + 136))(&v27, v3);
    uint64_t v19 = mlcore::GetForeignProperty<long long>(v13, v18, (uint64_t *)&v27);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 16);
    if (!v7 || (uint64_t v8 = v3[1], !(*(unsigned int (**)(void))(*v7 + 88))(*(void *)(a1 + 16)))) {
LABEL_14:
    }
      operator new();
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 32))(__p);
      unint64_t v10 = __p[0];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      uint64_t v7 = (void *)v12;
      if (v11 == v8)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        unint64_t v23 = *(atomic_ullong **)(a1 + 32);
        __p[0] = *(void **)(a1 + 24);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = mlcore::GetForeignProperty<long long>(v12, v22, (uint64_t *)__p);
        if (v23)
        {
          std::string::size_type size = (std::__shared_weak_count *)v23;
          goto LABEL_22;
        }
        return v19;
      }
      if (!v12) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12) & 1) == 0 && v7[1] == v8) {
        break;
      }
      if (((*(uint64_t (**)(void *))(*v7 + 88))(v7) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
    uint64_t v25 = *(void *)(a1 + 8);
    long long v26 = *(atomic_ullong **)(a1 + 32);
    __p[0] = *(void **)(a1 + 24);
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = mlcore::GetForeignProperty<long long>(v24, v25, (uint64_t *)__p);
    if (v26)
    {
      std::string::size_type size = (std::__shared_weak_count *)v26;
      goto LABEL_22;
    }
  }
  return v19;
}

void sub_214DCD728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ForeignProperty<std::string>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<std::string>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<std::string>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void mlcore::ForeignProperty<int>::_SQLJoinClauses(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(&v36, a1);
  uint64_t v8 = v36;
  unint64_t v9 = v37;
  if (v36 != v37)
  {
    do
    {
      uint64_t v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(__p, v7);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        uint64_t v32 = 0;
        int v33 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 96))(&v38, v7, &v32);
        LODWORD(v28) = 13;
        (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v10 + 32))(&v31, v10, *(void *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v34, &v38, (int *)&v28, &v31);
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v38 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v12 = a1[11];
        if (v12)
        {
          LODWORD(v28) = 1;
          uint64_t v29 = 0;
          BOOL v30 = 0;
          (*(void (**)(long long *__return_ptr))(*(void *)v12 + 64))(&v31);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v38, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v28, &v31);
          long long v14 = v38;
          long long v34 = v38;
          long long v26 = v38;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            long long v14 = v26;
          }
          if (*((void *)&v31 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
            long long v14 = v26;
          }
          if (v30)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            long long v14 = v26;
          }
        }
        else
        {
          long long v14 = v34;
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v31, v14, *((std::__shared_weak_count **)&v14 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v28, 1, v10 + 8, (uint64_t *)&v31);
        long long v15 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (_OWORD *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v17 >= v16)
        {
          long long v27 = v15;
          uint64_t v19 = ((uint64_t)v17 - *a3) >> 4;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - *a3;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          uint8x8_t v41 = a3 + 2;
          unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v22);
          uint64_t v24 = &v23[16 * v19];
          *(void *)&long long v38 = v23;
          *((void *)&v38 + 1) = v24;
          unint64_t v40 = &v23[16 * v25];
          *(_OWORD *)uint64_t v24 = v27;
          uint8x8_t v39 = v24 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v38);
          uint64_t v18 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          *uint64_t v17 = v15;
          uint64_t v18 = v17 + 1;
          a3[1] = v18;
        }
        a3[1] = v18;
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v36;
  }
  if (v8)
  {
    uint64_t v37 = v8;
    operator delete(v8);
  }
}

void sub_214DCDBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
}

uint64_t mlcore::ForeignProperty<int>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<int>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))();
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, long long *a5)
{
  uint64_t v10 = (char *)operator new(0x48uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C5C9BF0;
  uint64_t v12 = v10 + 24;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a4;
  long long v14 = *a5;
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  *((void *)v10 + 3) = &unk_26C5BEF00;
  *((_DWORD *)v10 + 8) = v13;
  *((void *)v10 + 5) = a2;
  *((void *)v10 + 6) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v10 + 56) = v14;
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v12;
  a1[1] = v11;
}

uint64_t mlcore::ItemPropertyAvailableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  uint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 1;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  int v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  int v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214DCDFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ItemPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPersistentID(void)::property;
}

uint64_t mlcore::BestArtworkTokenPropertyArtworkType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyArtworkType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyArtworkType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyArtworkType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyArtworkType(void)::property;
}

uint64_t mlcore::BestArtworkTokenPropertyEntityType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyEntityType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyEntityType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyEntityType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyEntityType(void)::property;
}

uint64_t mlcore::BestArtworkTokenPropertyAvailableArtworkToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::property;
}

uint64_t mlcore::ForeignProperty<int>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<int>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<int>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void mediaplatform::DatabaseTable<long long,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214DCE33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 624);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214DCE4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214DCE6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(void *a1, long long *a2, long long *a3)
{
  uint64_t v6 = operator new(0x88uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26C5C9E58;
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v6 + 3), a2, a3, (long long *)v9, (long long *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_214DCE7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_214DCE898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 736);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 544);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_214DCE9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1104);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 976);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 432);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214DCEAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1408);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1344);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1280);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1232);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 1104);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1056);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1008);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 960);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 912);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 432);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 384);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 336);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214DCEC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::ColumnNamesApplier::operator()<std::string>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a2 + 8);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    std::string *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    long long v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string *v4 = v12;
    long long v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_214DCEDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a2 + 8);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    std::string *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    long long v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string *v4 = v12;
    long long v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_214DCEF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::BaseLocationPropertyFilePath(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BaseLocationPropertyFilePath(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::BaseLocationPropertyFilePath(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BaseLocationPropertyFilePath(void)::$_0 &&>>);
  }
  return mlcore::BaseLocationPropertyFilePath(void)::property;
}

uint64_t mlcore::ItemPropertyShowSortType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyShowSortType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyShowSortType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowSortType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyShowSortType(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCloudID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreCloudID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreCloudID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudID(void)::property;
}

uint64_t mlcore::ItemPropertyStoreID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreID(void)::property;
}

void mlcore::EntityPropertiesQuery::~EntityPropertiesQuery(mlcore::EntityPropertiesQuery *this)
{
  *(void *)this = &unk_26C5C7F40;
  char v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mlcore::PropertiesQuery::~PropertiesQuery(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C5C7F40;
  char v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mlcore::PropertiesQuery::~PropertiesQuery(this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::ComparisonPredicate<std::string>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  v51[1] = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 48))
  {
    int v6 = *(_DWORD *)(a1 + 20);
    switch(v6)
    {
      case 9:
        if (*(char *)(a1 + 47) >= 0) {
          size_t v9 = *(unsigned __int8 *)(a1 + 47);
        }
        else {
          size_t v9 = *(void *)(a1 + 32);
        }
        uint64_t v10 = v50;
        std::string::basic_string[abi:ne180100]((uint64_t)v50, v9 + 1);
        if (v50[23] < 0) {
          uint64_t v10 = *(unsigned char **)v50;
        }
        if (v9)
        {
          if (*(char *)(a1 + 47) >= 0) {
            uint64_t v11 = (const void *)(a1 + 24);
          }
          else {
            uint64_t v11 = *(const void **)(a1 + 24);
          }
          memmove(v10, v11, v9);
        }
        *(_WORD *)&v10[v9] = 37;
        break;
      case 10:
        std::operator+<char>();
        break;
      case 12:
        std::operator+<char>();
        unint64_t v7 = std::string::append((std::string *)v48, "%");
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        *(void *)&v50[16] = *((void *)&v7->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v50 = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        if ((v48[23] & 0x80000000) != 0) {
          operator delete(*(void **)v48);
        }
        break;
      default:
        if (*(char *)(a1 + 47) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v50, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
        }
        else
        {
          *(_OWORD *)uint64_t v50 = *(_OWORD *)(a1 + 24);
          *(void *)&v50[16] = *(void *)(a1 + 40);
        }
        break;
    }
    std::string v12 = operator new(0x38uLL);
    v12[1] = 0;
    v12[2] = 0;
    *std::string v12 = &unk_26C5C99C0;
    uint64_t v12[3] = &unk_26C5C39D0;
    int v13 = (std::string *)(v12 + 4);
    if ((v50[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v50, *(std::string::size_type *)&v50[8]);
      *(void *)&long long v14 = v12 + 3;
      *((void *)&v14 + 1) = v12;
      if ((v50[23] & 0x80000000) != 0)
      {
        long long v36 = v14;
        operator delete(*(void **)v50);
        long long v14 = v36;
      }
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v50;
      v12[6] = *(void *)&v50[16];
      *(void *)&long long v14 = v12 + 3;
      *((void *)&v14 + 1) = v12;
    }
    __n128 v15 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  char v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v44 = *a2;
  uint64_t v45 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v16 + 96))(&v46);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v42, *(void *)(a1 + 48), *(std::__shared_weak_count **)(a1 + 56));
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        *(_OWORD *)long long v48 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v37) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v41, &v37);
        *(_OWORD *)&v48[16] = v41;
        memset(v50, 0, 24);
        long long v38 = v50;
        LOBYTE(v39) = 0;
        *(void *)uint64_t v50 = operator new(0x20uLL);
        *(void *)&v50[8] = *(void *)v50;
        *(void *)&v50[16] = *(void *)v50 + 32;
        *(void *)&v50[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v50[16], v48, v49, *(void **)v50);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v47, (void **)v50);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v47;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        long long v38 = v50;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v20 = *(std::__shared_weak_count **)&v48[i];
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
        break;
      case 1u:
        *(_OWORD *)long long v48 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v41, 0);
        *(_OWORD *)&v48[16] = v41;
        memset(v50, 0, 24);
        long long v38 = v50;
        LOBYTE(v39) = 0;
        *(void *)uint64_t v50 = operator new(0x20uLL);
        *(void *)&v50[8] = *(void *)v50;
        *(void *)&v50[16] = *(void *)v50 + 32;
        *(void *)&v50[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v50[16], v48, v49, *(void **)v50);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v47, (void **)v50);
        uint64_t v24 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v47;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        long long v38 = v50;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          long long v26 = *(std::__shared_weak_count **)&v48[j];
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
        }
        break;
      case 2u:
        *(_OWORD *)long long v48 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v41, 0);
        *(_OWORD *)&v48[16] = v41;
        memset(v50, 0, 24);
        long long v38 = v50;
        LOBYTE(v39) = 0;
        *(void *)uint64_t v50 = operator new(0x20uLL);
        *(void *)&v50[8] = *(void *)v50;
        *(void *)&v50[16] = *(void *)v50 + 32;
        *(void *)&v50[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v50[16], v48, v49, *(void **)v50);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v47, (void **)v50);
        long long v27 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v47;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        long long v38 = v50;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          uint64_t v29 = *(std::__shared_weak_count **)&v48[k];
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
        }
        break;
      case 3u:
        *(_OWORD *)long long v48 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v41);
        *(_OWORD *)&v48[16] = v41;
        memset(v50, 0, 24);
        long long v38 = v50;
        LOBYTE(v39) = 0;
        *(void *)uint64_t v50 = operator new(0x20uLL);
        *(void *)&v50[8] = *(void *)v50;
        *(void *)&v50[16] = *(void *)v50 + 32;
        *(void *)&v50[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v50[16], v48, v49, *(void **)v50);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v47, (void **)v50);
        BOOL v30 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v47;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        long long v38 = v50;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          uint64_t v32 = *(std::__shared_weak_count **)&v48[m];
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
        break;
      case 4u:
        *(_OWORD *)uint64_t v50 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)long long v48 = &unk_26C5BF2D8;
        memset(&v48[8], 0, 24);
        LOBYTE(v49[0]) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v37, (uint64_t)v48);
        *(_OWORD *)&v50[16] = v37;
        uint8x8_t v39 = 0;
        unint64_t v40 = 0;
        long long v38 = 0;
        *(void *)&long long v47 = &v38;
        BYTE8(v47) = 0;
        long long v38 = operator new(0x20uLL);
        uint8x8_t v39 = v38;
        unint64_t v40 = v38 + 4;
        uint8x8_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v40, v50, v51, v38);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v41, &v38);
        int v33 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v41;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        *(void *)&long long v47 = &v38;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          uint64_t v35 = *(std::__shared_weak_count **)&v50[n];
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)v48);
        break;
      default:
        *(_OWORD *)long long v48 = v46;
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v41, 0);
        *(_OWORD *)&v48[16] = v41;
        memset(v50, 0, 24);
        long long v38 = v50;
        LOBYTE(v39) = 0;
        *(void *)uint64_t v50 = operator new(0x20uLL);
        *(void *)&v50[8] = *(void *)v50;
        *(void *)&v50[16] = *(void *)v50 + 32;
        *(void *)&v50[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v50[16], v48, v49, *(void **)v50);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v47, (void **)v50);
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        long long v46 = v47;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        long long v38 = v50;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          unint64_t v23 = *(std::__shared_weak_count **)&v48[ii];
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
        break;
    }
  }
  *(_DWORD *)uint64_t v50 = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(v48, v46, *((std::__shared_weak_count **)&v46 + 1), (int *)v50, &v42);
  *a3 = *(_OWORD *)v48;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
}

void sub_214DCF940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  uint64_t v34 = 24;
  while (1)
  {
    uint64_t v35 = *(std::__shared_weak_count **)(v32 - 96 + v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    v34 -= 16;
    if (v34 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)&__p);
      if (a20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a20);
      }
      if (a24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a24);
      }
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::InPredicate<std::string>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X8>)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    int v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v30, (uint64_t)&v6[1], v6);
    long long v34 = v30;
    uint64_t v7 = *(void *)(a1 + 8);
    long long v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v27 = *a2;
    long long v28 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v29);
    long long v35 = v29;
    long long v29 = 0uLL;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v31 = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v26.__r_.__value_.__s.__data_[8] = 0;
    long long v31 = (char *)operator new(0x20uLL);
    uint64_t v32 = v31;
    int v33 = v31 + 32;
    uint64_t v32 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v33, &v34, v36, v31);
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v10 = *(std::__shared_weak_count **)((char *)&v34 + i);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "HashtableLookupString");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v26, &v34, (void **)&v31);
    *a3 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    if (SBYTE7(v35) < 0) {
      operator delete((void *)v34);
    }
    *(void *)&long long v34 = &v31;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    long long v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    for (uint64_t j = *(uint64_t **)(a1 + 32); j; uint64_t j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)j[2], j[3]);
      }
      else {
        std::string v26 = *(std::string *)(j + 2);
      }
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseParameter<std::string>,std::allocator<mediaplatform::DatabaseParameter<std::string>>,std::string&,void>(&v30, (uint64_t)&v26);
      std::string v12 = (std::__shared_weak_count *)*((void *)&v30 + 1);
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v29, v30, *((std::__shared_weak_count **)&v30 + 1));
      long long v13 = v29;
      long long v29 = 0uLL;
      long long v14 = v32;
      if (v32 >= v33)
      {
        long long v24 = v13;
        int64_t v16 = (v32 - v31) >> 4;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (v33 - v31) >> 3;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        v36[0] = &v33;
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v18);
        uint64_t v20 = &v19[16 * v16];
        *(void *)&long long v34 = v19;
        *((void *)&v34 + 1) = v20;
        *((void *)&v35 + 1) = &v19[16 * v21];
        *(_OWORD *)uint64_t v20 = v24;
        *(void *)&long long v35 = v20 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v31, &v34);
        __n128 v15 = v32;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *(_OWORD *)uint64_t v32 = v13;
        __n128 v15 = v14 + 16;
      }
      uint64_t v32 = v15;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = (std::__shared_weak_count *)a2[1];
    uint64_t v25 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v22 + 96))(&v34);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v26, v31, v32);
    LODWORD(v29) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v30, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v29, (uint64_t *)&v26);
    *a3 = v30;
    if (v26.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
    }
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    *(void *)&long long v34 = &v31;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
}

void sub_214DCFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, char *__p, std::__shared_weak_count *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  long long v28 = *(std::__shared_weak_count **)(v26 - 120);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::string __p = &a26;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseParameter<std::string>,std::allocator<mediaplatform::DatabaseParameter<std::string>>,std::string&,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x38uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_26C5C99C0;
  v4[3] = &unk_26C5C39D0;
  long long v5 = (std::string *)(v4 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4[6] = *(void *)(a2 + 16);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_214DD0160(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::OrPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t v23 = 0;
  long long v24 = 0;
  unint64_t v25 = 0;
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      uint64_t v7 = *v3;
      long long v8 = (std::__shared_weak_count *)v3[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v9 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v21 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v7 + 64))(&v22);
      long long v10 = v22;
      long long v22 = 0uLL;
      uint64_t v11 = v24;
      if ((unint64_t)v24 >= v25)
      {
        long long v20 = v10;
        uint64_t v12 = (v24 - v23) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v25 - (void)v23;
        if ((uint64_t)(v25 - (void)v23) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        long long v29 = &v25;
        int64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v15);
        unint64_t v17 = &v16[16 * v12];
        *(void *)&long long v26 = v16;
        *((void *)&v26 + 1) = v17;
        long long v28 = &v16[16 * v18];
        *(_OWORD *)unint64_t v17 = v20;
        uint64_t v27 = v17 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v23, &v26);
        uint64_t v19 = v24;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v26);
        long long v24 = v19;
        if (*((void *)&v22 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
        }
      }
      else
      {
        *(_OWORD *)long long v24 = v10;
        long long v24 = v11 + 16;
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v3 += 2;
    }
    while (v3 != v4);
    if (v23 != v24)
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>((uint64_t *)&v26, (void **)&v23, 2);
      *(_OWORD *)a3 = v26;
    }
  }
  *(void *)&long long v26 = &v23;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_214DD0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void mlcore::UnaryPredicateBase::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  switch(*(_DWORD *)(a1 + 16))
  {
    case 1:
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = (std::__shared_weak_count *)a2[1];
      uint64_t v20 = *a2;
      uint64_t v21 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v14 + 96))(&v22);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLNotExpression,std::allocator<mediaplatform::SQLNotExpression>,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v23, &v22);
      *a3 = v23;
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      int v6 = v21;
      if (v21) {
        goto LABEL_5;
      }
      break;
    case 2:
      uint64_t v7 = *(void *)(a1 + 8);
      long long v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v18 = *a2;
      uint64_t v19 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v22);
      int v17 = 0;
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLUnaryExpression,std::allocator<mediaplatform::SQLUnaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLUnaryExpression::UnaryOperator,void>(&v23, &v22, &v17);
      *a3 = v23;
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      int v6 = v19;
      if (v19) {
        goto LABEL_5;
      }
      break;
    case 3:
      uint64_t v9 = *(void *)(a1 + 8);
      long long v10 = (std::__shared_weak_count *)a2[1];
      int64_t v16 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v22);
      int v17 = 0;
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLUnaryExpression,std::allocator<mediaplatform::SQLUnaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLUnaryExpression::UnaryOperator,void>(&v23, &v22, &v17);
      uint64_t v11 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v11 + 8) = 0u;
      *(void *)uint64_t v11 = &unk_26C5C9950;
      long long v12 = v23;
      long long v23 = 0u;
      *((void *)v11 + 3) = &unk_26C5BEC90;
      *((_OWORD *)v11 + 2) = v12;
      if (*((void *)&v12 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      *(void *)&long long v13 = v11 + 24;
      *((void *)&v13 + 1) = v11;
      *a3 = v13;
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      int v6 = v16;
      if (v16) {
        goto LABEL_5;
      }
      break;
    default:
      uint64_t v4 = *(void *)(a1 + 8);
      long long v5 = (std::__shared_weak_count *)a2[1];
      uint64_t v24 = *a2;
      unint64_t v25 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 96))(v4, &v24);
      int v6 = v25;
      if (v25) {
LABEL_5:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      break;
  }
}

void sub_214DD063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 56);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_214DD06A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (!a14) {
    JUMPOUT(0x214DD0698);
  }
  JUMPOUT(0x214DD0694);
}

void sub_214DD06C4()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x214DD0698);
  }
  JUMPOUT(0x214DD0694);
}

void mlcore::InPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    int v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v29, (uint64_t)&v6[1], v6);
    *(_OWORD *)std::string __p = v29;
    uint64_t v7 = *(void *)(a1 + 8);
    long long v8 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v27 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v28);
    long long v35 = v28;
    long long v28 = 0uLL;
    long long v31 = 0;
    uint64_t v32 = 0;
    long long v30 = 0;
    *(void *)&long long v33 = &v30;
    BYTE8(v33) = 0;
    long long v30 = (char *)operator new(0x20uLL);
    long long v31 = v30;
    uint64_t v32 = v30 + 32;
    long long v31 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, __p, v36, v30);
    for (uint64_t i = 3; i != -1; i -= 2)
    {
      long long v10 = (std::__shared_weak_count *)__p[i];
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "HashtableLookupInt");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, (long long *)__p, (void **)&v30);
    *a3 = v33;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    long long v30 = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    for (uint64_t j = *(uint64_t **)(a1 + 32); j; uint64_t j = (uint64_t *)*j)
    {
      int v12 = *((_DWORD *)j + 4);
      long long v13 = (std::__shared_weak_count *)operator new(0x28uLL);
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
      LODWORD(v13[1].__shared_owners_) = v12;
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, (uint64_t)&v13[1], v13);
      long long v14 = v33;
      long long v33 = 0uLL;
      unint64_t v15 = v31;
      if (v31 >= v32)
      {
        long long v25 = v14;
        int64_t v17 = (v31 - v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (v32 - v30) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if ((unint64_t)(v32 - v30) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v36[0] = &v32;
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        uint64_t v21 = &v20[16 * v17];
        __p[0] = v20;
        __p[1] = v21;
        *((void *)&v35 + 1) = &v20[16 * v22];
        *(_OWORD *)uint64_t v21 = v25;
        *(void *)&long long v35 = v21 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v30, __p);
        int64_t v16 = v31;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_OWORD *)long long v31 = v14;
        int64_t v16 = v15 + 16;
      }
      long long v31 = v16;
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = *(std::__shared_weak_count **)(a2 + 8);
    long long v26 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v23 + 96))(__p);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, v30, v31);
    LODWORD(v28) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v29, (uint64_t)__p[0], (std::__shared_weak_count *)__p[1], (int *)&v28, (uint64_t *)&v33);
    *a3 = v29;
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_214DD0AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,std::__shared_weak_count *a23,void *__p,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  a22 = &a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void mlcore::PredicateProperty::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  int v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v5 + 64))(&v12);
  uint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5C9B48;
  long long v8 = v12;
  long long v12 = 0u;
  long long v13 = v8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  mediaplatform::SQLAliasExpression::SQLAliasExpression((std::string *)v7 + 1, (std::string::size_type *)&v13, (long long *)(a1 + 40));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)&long long v10 = v7 + 24;
  *((void *)&v10 + 1) = v7;
  *a3 = v10;
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_214DD0CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 32))
  {
    int v6 = operator new(0x28uLL);
    v6[1] = 0;
    v6[2] = 0;
    void *v6 = &unk_26C5C9A30;
    v6[3] = &unk_26C5C3A60;
    *((_DWORD *)v6 + 8) = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v6 + 3;
    *(void *)(a1 + 40) = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v35 = *a2;
  long long v36 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, *(void *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v28) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v32, &v28);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        long long v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        long long v10 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        long long v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          long long v12 = *(std::__shared_weak_count **)((char *)&v39 + i);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
        break;
      case 1u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        long long v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        int64_t v16 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        long long v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          unint64_t v18 = *(std::__shared_weak_count **)((char *)&v39 + j);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
        }
        break;
      case 2u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        long long v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        unint64_t v19 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        long long v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          uint64_t v21 = *(std::__shared_weak_count **)((char *)&v39 + k);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        break;
      case 3u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v32);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        long long v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        uint64_t v22 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        long long v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          uint64_t v24 = *(std::__shared_weak_count **)((char *)&v39 + m);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        break;
      case 4u:
        long long v42 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v39 = &unk_26C5BF2D8;
        *((void *)&v39 + 1) = 0;
        long long v40 = 0uLL;
        LOBYTE(v41) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v28, (uint64_t)&v39);
        long long v43 = v28;
        long long v30 = 0;
        long long v31 = 0;
        long long v29 = 0;
        *(void *)&long long v38 = &v29;
        BYTE8(v38) = 0;
        long long v29 = (long long *)operator new(0x20uLL);
        long long v30 = v29;
        long long v31 = v29 + 2;
        long long v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v31, &v42, &v44, v29);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v32, (void **)&v29);
        long long v25 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v32;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        *(void *)&long long v38 = &v29;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          uint64_t v27 = *(std::__shared_weak_count **)((char *)&v42 + n);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v39);
        break;
      default:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        long long v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        long long v13 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        long long v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          unint64_t v15 = *(std::__shared_weak_count **)((char *)&v39 + ii);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        break;
    }
  }
  LODWORD(v42) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v39, v37, *((std::__shared_weak_count **)&v37 + 1), (int *)&v42, &v33);
  *a3 = v39;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
}

void sub_214DD13C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  unint64_t v15 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  unint64_t v19 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  va_arg(va2, void);
  uint64_t v22 = va_arg(va2, void);
  va_copy((va_list)v20, va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  uint64_t v6 = 24;
  while (1)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v4 - 88 + v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v6 -= 16;
    if (v6 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)va2);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::ComparisonPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 32))
  {
    uint64_t v6 = operator new(0x28uLL);
    v6[1] = 0;
    v6[2] = 0;
    void *v6 = &unk_26C5C9A68;
    uint64_t v7 = *(void *)(a1 + 24);
    v6[3] = &unk_26C5C3AA8;
    v6[4] = v7;
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v6 + 3;
    *(void *)(a1 + 40) = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v36 = *a2;
  long long v37 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v38);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v34, *(void *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v29) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v33, &v29);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        long long v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v11 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        long long v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v13 = *(std::__shared_weak_count **)((char *)&v40 + i);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
        break;
      case 1u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        long long v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        long long v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          unint64_t v19 = *(std::__shared_weak_count **)((char *)&v40 + j);
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        break;
      case 2u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        long long v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v20 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        long long v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          uint64_t v22 = *(std::__shared_weak_count **)((char *)&v40 + k);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
        break;
      case 3u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v33);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        long long v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v23 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        long long v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          long long v25 = *(std::__shared_weak_count **)((char *)&v40 + m);
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
        }
        break;
      case 4u:
        long long v43 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v40 = &unk_26C5BF2D8;
        *((void *)&v40 + 1) = 0;
        long long v41 = 0uLL;
        LOBYTE(v42) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v29, (uint64_t)&v40);
        long long v44 = v29;
        long long v31 = 0;
        long long v32 = 0;
        long long v30 = 0;
        *(void *)&long long v39 = &v30;
        BYTE8(v39) = 0;
        long long v30 = (long long *)operator new(0x20uLL);
        long long v31 = v30;
        long long v32 = v30 + 2;
        long long v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, &v43, &v45, v30);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v33, (void **)&v30);
        long long v26 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v33;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        *(void *)&long long v39 = &v30;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          long long v28 = *(std::__shared_weak_count **)((char *)&v43 + n);
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v40);
        break;
      default:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        long long v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        long long v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          uint64_t v16 = *(std::__shared_weak_count **)((char *)&v40 + ii);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        break;
    }
  }
  LODWORD(v43) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v40, v38, *((std::__shared_weak_count **)&v38 + 1), (int *)&v43, &v34);
  *a3 = v40;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
}

void sub_214DD1C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  unint64_t v15 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  unint64_t v19 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  va_arg(va2, void);
  uint64_t v22 = va_arg(va2, void);
  va_copy((va_list)v20, va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  uint64_t v6 = 24;
  while (1)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v4 - 88 + v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v6 -= 16;
    if (v6 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)va2);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      _Unwind_Resume(a1);
    }
  }
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5)
{
  uint64_t v10 = operator new(0x48uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_26C5C9BF0;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = *a4;
  uint64_t v13 = *a5;
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v10[3] = &unk_26C5BEF00;
  *((_DWORD *)v10 + 8) = v11;
  v10[5] = a2;
  v10[6] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[7] = v13;
  v10[8] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

uint64_t mlcore::ComparisonPredicateBase::_SQLOperator(mlcore::ComparisonPredicateBase *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t result = 14;
  switch(v1)
  {
    case 0:
      if ((*(unsigned int (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)) == 3
        && (*((unsigned char *)this + 16) & 1) != 0)
      {
        goto LABEL_2;
      }
      uint64_t result = 13;
      break;
    case 1:
      return result;
    case 2:
      return 17;
    case 3:
      return 15;
    case 4:
      return 18;
    case 5:
      return 16;
    case 7:
      return 10;
    case 8:
      return 11;
    case 9:
    case 10:
    case 11:
    case 12:
LABEL_2:
      uint64_t result = 22;
      break;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown comparison operator");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_214DD2060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *mediaplatform::SQLAliasExpression::SQLAliasExpression(std::string *a1, std::string::size_type *a2, long long *a3)
{
  std::string::size_type v5 = *a2;
  std::string::size_type v4 = a2[1];
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BEDC8;
  a1->__r_.__value_.__l.__size_ = v5;
  a1->__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_214DD20F4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(void *a1, char *a2, char *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_26C5C9AD8;
  *((void *)v6 + 3) = &unk_26C5BED78;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 4) = 0;
  uint64_t result = std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((void *)v6 + 4, a2, a3, (a3 - a2) >> 4);
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_214DD21B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<int>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  std::string::size_type v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DD2240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  unint64_t v3 = (void **)(a1 + 168);
  *(void *)a1 = &unk_26C5C76E8;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    size_t v6 = 0;
  }
  else
  {
    size_t v6 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v4 + 80))() == 1) {
        ++v6;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)&v18, v6);
  if (*(void *)(a1 + 192))
  {
    long long v7 = *(void **)(a1 + 184);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        long long v7 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 184) = 0;
    uint64_t v9 = *(void *)(a1 + 176);
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        *((void *)*v3 + i) = 0;
    }
    *(void *)(a1 + 192) = 0;
  }
  int v11 = (void *)v18;
  *(void *)&long long v18 = 0;
  uint64_t v12 = *v3;
  std::__shared_weak_count *v3 = v11;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = *((void *)&v18 + 1);
  uint64_t v14 = v19;
  *(void *)(a1 + 184) = v19;
  *(void *)(a1 + 176) = v13;
  *((void *)&v18 + 1) = 0;
  uint64_t v15 = *((void *)&v19 + 1);
  *(void *)(a1 + 192) = *((void *)&v19 + 1);
  *(_DWORD *)(a1 + 200) = v20;
  if (v15)
  {
    unint64_t v16 = *(void *)(v14 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v16 >= v13) {
        v16 %= v13;
      }
    }
    else
    {
      v16 &= v13 - 1;
    }
    *((void *)*v3 + v16) = a1 + 184;
    long long v19 = 0uLL;
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v18);
  return a1;
}

void sub_214DD2440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v10);
  mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelProperty<long long>::propertyType()
{
  return 1;
}

uint64_t mlcore::ModelProperty<int>::propertyType()
{
  return 0;
}

uint64_t mlcore::ModelProperty<std::string>::propertyType()
{
  return 3;
}

uint64_t mlcore::ForeignProperty<long long>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 80))();
}

uint64_t mlcore::ForeignProperty<std::string>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 80))();
}

uint64_t mlcore::ModelProperty<double>::propertyType()
{
  return 2;
}

uint64_t mlcore::ForeignProperty<int>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 80))();
}

uint64_t mlcore::ForeignProperty<double>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 80))();
}

void mlcore::InPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    size_t v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v29, (uint64_t)&v6[1], v6);
    *(_OWORD *)std::string __p = v29;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v27 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v28);
    long long v35 = v28;
    long long v28 = 0uLL;
    long long v31 = 0;
    long long v32 = 0;
    long long v30 = 0;
    *(void *)&long long v33 = &v30;
    BYTE8(v33) = 0;
    long long v30 = (char *)operator new(0x20uLL);
    long long v31 = v30;
    long long v32 = v30 + 32;
    long long v31 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, __p, v36, v30);
    for (uint64_t i = 3; i != -1; i -= 2)
    {
      uint64_t v10 = (std::__shared_weak_count *)__p[i];
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "HashtableLookupInt64");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, (long long *)__p, (void **)&v30);
    *a3 = v33;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    long long v30 = 0;
    long long v31 = 0;
    long long v32 = 0;
    for (uint64_t j = *(void **)(a1 + 32); j; uint64_t j = (void *)*j)
    {
      uint64_t v12 = j[2];
      unint64_t v13 = (std::__shared_weak_count *)operator new(0x28uLL);
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A68;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3AA8;
      v13[1].__shared_owners_ = v12;
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, (uint64_t)&v13[1], v13);
      long long v14 = v33;
      long long v33 = 0uLL;
      uint64_t v15 = v31;
      if (v31 >= v32)
      {
        long long v25 = v14;
        int64_t v17 = (v31 - v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (v32 - v30) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if ((unint64_t)(v32 - v30) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v36[0] = &v32;
        int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        uint64_t v21 = &v20[16 * v17];
        __p[0] = v20;
        __p[1] = v21;
        *((void *)&v35 + 1) = &v20[16 * v22];
        *(_OWORD *)uint64_t v21 = v25;
        *(void *)&long long v35 = v21 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v30, __p);
        unint64_t v16 = v31;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_OWORD *)long long v31 = v14;
        unint64_t v16 = v15 + 16;
      }
      long long v31 = v16;
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = *(std::__shared_weak_count **)(a2 + 8);
    long long v26 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v23 + 96))(__p);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, v30, v31);
    LODWORD(v28) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v29, (uint64_t)__p[0], (std::__shared_weak_count *)__p[1], (int *)&v28, (uint64_t *)&v33);
    *a3 = v29;
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_214DD2908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,std::__shared_weak_count *a23,void *__p,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  a22 = &a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  size_t v6 = operator new(0x30uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26C5C9D08;
  uint64_t v8 = v6 + 3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    v6[3] = &unk_26C5BEFA0;
    v6[4] = a2;
    v6[5] = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    v6[3] = &unk_26C5BEFA0;
    v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

uint64_t mlcore::Query::predicate@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::EntityQueryResult::entityCache@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 264);
  *a2 = *(void *)(this + 256);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

sqlite3_int64 mediaplatform::DatabaseResult<long long>::valueForFirstRowAndColumn(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = sqlite3_step(*(sqlite3_stmt **)(*a1 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v2, v3);
  *(_DWORD *)(v2 + 56) = v3;
  int v4 = *(_DWORD *)(*a1 + 56);
  if (v4 != 100)
  {
    if (v4 != -1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "no column data exists for statement");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  sqlite3_int64 v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*a1 + 24), 0);
  uint64_t v7 = *a1;
  int v8 = sqlite3_reset(*(sqlite3_stmt **)(v7 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v7, v8);
  *(_DWORD *)(v7 + 56) = -1;
  return v6;
}

void sub_214DD2CB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_214DD2CDC()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x214DD2CE8);
}

void *mlcore::EntityQueryResult::EntityQueryResult(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  mlcore::MediaError::MediaError((uint64_t)&v52, 0, (uint64_t)v50);
  *a1 = &unk_26C5C4898;
  mlcore::MediaError::MediaError((mlcore::MediaError *)(a1 + 1), (const mlcore::MediaError *)&v52);
  v52.__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  uint64_t v53 = &unk_26C5C3C00;
  if (v57 < 0) {
    operator delete(v56[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v56);
  if (v55 < 0) {
    operator delete(v54);
  }
  std::exception::~exception(&v52);
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  *a1 = &unk_26C5C7470;
  a1[20] = *a2;
  uint64_t v19 = a2[1];
  a1[21] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  a1[22] = a3;
  a1[23] = *a5;
  uint64_t v20 = a5[1];
  a1[24] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  a1[25] = *a6;
  uint64_t v21 = a6[1];
  a1[26] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  a1[27] = *a7;
  uint64_t v22 = a7[1];
  a1[28] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  a1[29] = a9;
  a1[30] = a10;
  a1[31] = a11;
  uint64_t v23 = *a12;
  a1[32] = *a12;
  uint64_t v24 = a12[1];
  a1[33] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    uint64_t v23 = a1[32];
  }
  if (!v23)
  {
    long long v25 = operator new(0xF0uLL);
    long long v26 = v25;
    v25[1] = 0;
    v25[2] = 0;
    *long long v25 = &unk_26C5C9FA8;
    uint64_t v27 = v25 + 3;
    long long v28 = (void *)*a2;
    long long v29 = (std::__shared_weak_count *)a2[1];
    v50[0] = v28;
    v50[1] = v29;
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      mlcore::EntityCache::EntityCache((uint64_t)(v25 + 3), v50);
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    else
    {
      mlcore::EntityCache::EntityCache((uint64_t)(v25 + 3), v50);
    }
    *(void *)&long long v30 = v27;
    *((void *)&v30 + 1) = v26;
    long long v31 = (std::__shared_weak_count *)a1[33];
    *((_OWORD *)a1 + 16) = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  if (!a1[25])
  {
    long long v32 = operator new(0x30uLL);
    v32[1] = 0;
    v32[2] = 0;
    *long long v32 = &unk_26C5CB400;
    v32[4] = 0;
    v32[5] = 0;
    v32[3] = 0;
    long long v33 = (std::__shared_weak_count *)a1[26];
    a1[25] = v32 + 3;
    a1[26] = v32;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  uint64_t v34 = *(const void **)a4;
  uint64_t v35 = *(void *)(a4 + 8);
  uint64_t v36 = v35 - *(void *)a4;
  if (v35 == *(void *)a4)
  {
    uint64_t v39 = a1[22];
    if (v39)
    {
      uint64_t v40 = a1[32];
      uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 112))(v39);
      uint64_t v42 = operator new(8uLL);
      long long v44 = v42;
      *uint64_t v42 = v41;
      uint64_t v45 = v42 + 1;
      long long v46 = v42 + 1;
      (*(void (**)(uint64_t, void **, void))(*(void *)v40 + 16))(v40, &v44, a1[22]);
      long long v38 = v44;
      if (v44)
      {
        uint64_t v45 = v44;
        goto LABEL_32;
      }
    }
  }
  else
  {
    uint64_t v37 = a1[32];
    long long v48 = 0;
    uint64_t v49 = 0;
    long long v47 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v47, v34, v35, v36 >> 3);
    (*(void (**)(uint64_t, void **, void))(*(void *)v37 + 16))(v37, &v47, a1[22]);
    long long v38 = v47;
    if (v47)
    {
      long long v48 = v47;
LABEL_32:
      operator delete(v38);
    }
  }
  return a1;
}

{
  return mlcore::EntityQueryResult::EntityQueryResult(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_214DD30C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = (std::__shared_weak_count *)v21[33].__vftable;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)v21[28].__vftable;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  long long v25 = (std::__shared_weak_count *)v21[26].__vftable;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  long long v26 = (std::__shared_weak_count *)v21[24].__vftable;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)v21[21].__vftable;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  mlcore::QueryResult::~QueryResult(v21);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_perform(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *a2;
  }
  uint64_t v8 = *(void *)(v5 + 48);
  uint64_t v10 = *(mediaplatform::DatabaseConnection **)v8;
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = v6;
  long long v25 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 128))(&v26, a1, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v11 = v26;
  uint64_t v20 = &unk_26C5BEFF0;
  memset(v21, 0, sizeof(v21));
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(v21, *(void **)(v26 + 40), *(void **)(v26 + 48), (uint64_t)(*(void *)(v26 + 48) - *(void *)(v26 + 40)) >> 4);
  mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(&v22, v10, (unsigned __int8 *)(v11 + 8), (uint64_t)&v20);
  uint64_t v20 = &unk_26C5BEFF0;
  std::string __p = v21;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(v19, 0, sizeof(v19));
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 120))(&__p, a1);
  unint64_t v16 = 0;
  int64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v16, __p, (uint64_t)v31, (v31 - (unsigned char *)__p) >> 3);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v33);
  if (__p)
  {
    long long v31 = __p;
    operator delete(__p);
  }
  std::string __p = &unk_26C5C8FC8;
  long long v31 = &v16;
  long long v32 = v19;
  v33[0] = &__p;
  mediaplatform::DatabaseResult<mediaplatform::DatabaseResultList>::enumerateRows(&v22, (uint64_t)&__p);
  std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100](&__p);
  uint64_t v12 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAD70;
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  mlcore::MediaError::MediaError((uint64_t)&__p, 0, (uint64_t)v28);
  mlcore::PropertiesQueryResult::PropertiesQueryResult(&v12[1].__vftable, v19, (mlcore::MediaError *)&__p);
  std::string __p = &unk_26C5C3BD0;
  v33[0] = &unk_26C5C3C00;
  if (v36 < 0) {
    operator delete(v35[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v35);
  if (v34 < 0) {
    operator delete((void *)v33[2]);
  }
  std::exception::~exception((std::exception *)&__p);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  long long v14 = v12 + 1;
  uint64_t v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = *(void *)(a3 + 24);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v13 + 48))(v13, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (v16)
  {
    int64_t v17 = v16;
    operator delete(v16);
  }
  std::string __p = v19;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_214DD3514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  mlcore::MediaError::~MediaError((std::exception *)&a34);
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v38);
  if (a12)
  {
    a13 = a12;
    operator delete(a12);
  }
  a12 = &a15;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaError::MediaError(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = mlcore::__category((mlcore *)a1);
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_26C5C3BD0;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = &unk_26C5C3C00;
  *(_DWORD *)(a1 + 32) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)a3;
    *(void *)(a1 + 56) = *(void *)(a3 + 16);
    *(_OWORD *)(a1 + 40) = v7;
  }
  int v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = (mlcore *)mediaplatform::PlatformErrorCondition::PlatformErrorCondition(a1 + 64, &v13, (long long *)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = mlcore::__category(v8);
  (*(void (**)(void **__return_ptr))(*(void *)v9 + 48))(__p);
  mediaplatform::FormatString<std::string,std::string>((std::string *)(a1 + 128), (std::string *)"{0} {1}", (uint64_t)__p, a3);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_214DD3768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::exception::~exception(v14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::__category(mlcore *this)
{
  {
    operator new();
  }
  return mlcore::__category(void)::category;
}

void sub_214DD3860(_Unwind_Exception *a1)
{
}

uint64_t mlcore::MediaErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 > 199)
  {
    switch(a1)
    {
      case 300:
        int v4 = "Client error while connecting to cloud server.";
        break;
      case 301:
        int v4 = "Cloud server error.";
        break;
      case 302:
        int v4 = "Unexpected redirect from HTTP server.";
        break;
      case 303:
        int v4 = "Error, the provided cloud DSID is invalid.";
        break;
      case 304:
        int v4 = "Error, the provided cloud service item ID is invalid.";
        break;
      case 305:
        int v4 = "Error, the cloud service session is not been initialized with Begin().";
        break;
      case 306:
        goto LABEL_12;
      case 307:
        int v4 = "Error, too many databases returned by server.  Cloud service can only handle one.";
        break;
      default:
        if (a1 == 200) {
          int v4 = "Invalid entity revision provided.";
        }
        else {
LABEL_12:
        }
          int v4 = "Unknown error.";
        break;
    }
  }
  else
  {
    if (a1 <= 0xC7)
    {
      int v4 = "Unimplemented functionality.";
      switch(a1)
      {
        case 0:
          int v4 = "No error.";
          return MEMORY[0x2166B2280](a2, v4);
        case 1:
          goto LABEL_12;
        case 2:
          return MEMORY[0x2166B2280](a2, v4);
        case 3:
          int v4 = "Platform error.";
          return MEMORY[0x2166B2280](a2, v4);
        case 4:
          int v4 = "Parse error.";
          return MEMORY[0x2166B2280](a2, v4);
        default:
          JUMPOUT(0);
      }
    }
    switch(a1)
    {
      case 'd':
        int v4 = "The import operation was cancelled.";
        break;
      case 'e':
        int v4 = "Error parsing import data.";
        break;
      case 'f':
        int v4 = "Error reading import data.";
        break;
      case 'g':
        int v4 = "Attempted to update/delete a non-existent track.";
        break;
      default:
        goto LABEL_12;
    }
  }
  return MEMORY[0x2166B2280](a2, v4);
}

void sub_214DD3A04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::PlatformErrorCondition::PlatformErrorCondition(uint64_t a1, int *a2, long long *a3)
{
  int v6 = *a2;
  uint64_t v7 = mediaplatform::_GlobalPlatformErrorCategory((mediaplatform *)a1);
  *(_DWORD *)(a1 + 8) = v6;
  *(void *)a1 = &unk_26C5BF0E8;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = &unk_26C5BF118;
  *(_DWORD *)(a1 + 32) = *a2;
  uint64_t v8 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_214DD3ACC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatString<std::string,std::string>(std::string *a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a4;
  v4[1] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string,std::string>(a2, a1, 0, v4);
}

void sub_214DD3B28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(uint64_t *a1, mediaplatform::DatabaseConnection *this, unsigned __int8 *a3, uint64_t a4)
{
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(this);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)this, a3, &v13);
  uint64_t v8 = v13;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v10, *(void **)(a4 + 8), *(void **)(a4 + 16), (uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 4);
  mediaplatform::DatabaseStatement::bindParameters<mediaplatform::DatabaseParameterList>(v8, v10, v11);
  uint64_t v15 = &v10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  long long v9 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    *a1 = v8;
    a1[1] = 0;
  }
}

void sub_214DD3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va, a8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseResult<mediaplatform::DatabaseResultList>::enumerateRows(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v14 = 0;
  while (1)
  {
    uint64_t v4 = *a1;
    int v5 = sqlite3_step(*(sqlite3_stmt **)(*a1 + 24));
    mediaplatform::DatabaseStatement::_checkSQLiteResult(v4, v5);
    *(_DWORD *)(v4 + 56) = v5;
    uint64_t v6 = *a1;
    int v7 = *(_DWORD *)(*a1 + 56);
    if (v7 != 100) {
      break;
    }
    mediaplatform::DatabaseStatement::columnValue<mediaplatform::DatabaseResultList>(*a1, 0, (uint64_t)&v19);
    int v8 = v19;
    long long v9 = v20;
    long long v20 = 0uLL;
    long long v10 = v9;
    if (*((void *)&v9 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    }
    else
    {
      uint64_t v11 = 0;
    }
    std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::__value_func[abi:ne180100]((uint64_t)&v19, (uint64_t)v18);
    int v15 = v8;
    uint64_t v16 = v10;
    int64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v21) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, int *, char *))(*(void *)v21 + 48))(v21, &v15, &v14);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100](&v19);
    if (!v11)
    {
      std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100](v18);
      if (!*((void *)&v10 + 1)) {
        goto LABEL_16;
      }
LABEL_15:
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      goto LABEL_16;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100](v18);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v10 + 1)) {
      goto LABEL_15;
    }
LABEL_16:
    if (v14)
    {
      uint64_t v6 = *a1;
      goto LABEL_22;
    }
  }
  if (v7 == -1) {
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  char v14 = 1;
LABEL_22:
  int v12 = sqlite3_reset(*(sqlite3_stmt **)(v6 + 24));
  uint64_t result = mediaplatform::DatabaseStatement::_checkSQLiteResult(v6, v12);
  *(_DWORD *)(v6 + 56) = -1;
  return result;
}

void sub_214DD3F1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  __cxa_end_catch();
  _Unwind_Resume(v10);
}

void sub_214DD3F3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_214DD3F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(v9);
}

void *std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(mediaplatform::DatabaseResultList,BOOL &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void mediaplatform::DatabaseStatement::bindParameters<mediaplatform::DatabaseParameterList>(uint64_t a1, char *a2, char *a3)
{
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v7, a2, a3, (a3 - a2) >> 4);
  uint64_t v10 = (char **)&unk_26C5BEFF0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v11, v7, v8, (v8 - v7) >> 4);
  uint64_t v4 = v11;
  int v5 = v12;
  if (v11 != v12)
  {
    uint64_t v6 = 0;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v4 + 48))(*v4, a1, v6);
      uint64_t v6 = (v6 + 1);
      v4 += 2;
    }
    while (v4 != v5);
  }
  uint64_t v10 = (char **)&unk_26C5BEFF0;
  uint64_t v14 = (void **)&v11;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v10 = &v7;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_214DD4200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseStatement::_checkSQLiteResult(uint64_t this, int a2)
{
  if ((a2 - 100) >= 2 && a2 != 0)
  {
    uint64_t v4 = sqlite3_db_handle(*(sqlite3_stmt **)(this + 24));
    int v5 = (char *)sqlite3_errmsg(v4);
    if ((a2 - 1) > 0x19) {
      int v6 = 36;
    }
    else {
      int v6 = *(_DWORD *)&asc_21512018C[4 * (a2 - 1)];
    }
    int v9 = v6;
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v9, &v8);
  }
  return this;
}

void sub_214DD42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t mediaplatform::DatabaseParameter<long long>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(void *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

uint64_t mediaplatform::DatabaseParameter<int>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(_DWORD *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

void mediaplatform::DatabaseParameter<std::string>::bind(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  mediaplatform::DatabaseStatement::bindParameter<std::string>(a2, (char *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_214DD4444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<std::string>(uint64_t a1, char *a2, int a3)
{
  uint64_t v3 = a2;
  int v5 = *(sqlite3_stmt **)(a1 + 24);
  if (a2[23] < 0)
  {
    uint64_t v3 = *(const char **)a2;
    uint64_t v6 = *((void *)a2 + 1);
  }
  else
  {
    LODWORD(v6) = a2[23];
  }
  int v7 = sqlite3_bind_text(v5, a3 + 1, v3, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v7);
}

void *std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(a4);
    void *v6 = result;
    v6[1] = result;
    for (v6[2] = &result[2 * v7]; a2 != a3; a2 += 2)
    {
      void *result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_214DD4568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *mlcore::PropertiesQueryResult::PropertiesQueryResult(void *a1, uint64_t *a2, mlcore::MediaError *a3)
{
  mlcore::MediaError::MediaError((mlcore::MediaError *)&v6, a3);
  *a1 = &unk_26C5C4898;
  mlcore::MediaError::MediaError((mlcore::MediaError *)(a1 + 1), (const mlcore::MediaError *)&v6);
  v6.__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  uint64_t v7 = &unk_26C5C3C00;
  if (v11 < 0) {
    operator delete(v10[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  std::exception::~exception(&v6);
  *a1 = &unk_26C5C7FD8;
  a1[21] = 0;
  a1[22] = 0;
  a1[20] = 0;
  std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>((uint64_t)(a1 + 20), *a2, a2[1], 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_214DD46B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  mlcore::QueryResult::~QueryResult(v10);
  _Unwind_Resume(a1);
}

mlcore::MediaError *mlcore::MediaError::MediaError(mlcore::MediaError *this, const mlcore::MediaError *a2)
{
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(void *)this = &unk_26C5C3BD0;
  *((void *)this + 3) = &unk_26C5C3C00;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v4;
  }
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mlcore::MediaError *)((char *)this + 64), (const mlcore::MediaError *)((char *)a2 + 64));
  int v5 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 8);
    *((void *)this + 18) = *((void *)a2 + 18);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_214DD47BC(_Unwind_Exception *a1)
{
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v3);
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

mediaplatform::PlatformErrorCondition *mediaplatform::PlatformErrorCondition::PlatformErrorCondition(mediaplatform::PlatformErrorCondition *this, const mediaplatform::PlatformErrorCondition *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = mediaplatform::_GlobalPlatformErrorCategory(this);
  *((_DWORD *)this + 2) = v4;
  *(void *)this = &unk_26C5BF0E8;
  *((void *)this + 2) = v5;
  *((void *)this + 3) = &unk_26C5BF118;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  long long v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_214DD48A4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::_GlobalPlatformErrorCategory(mediaplatform *this)
{
  {
    operator new();
  }
  return mediaplatform::_GlobalPlatformErrorCategory(void)::__category;
}

void sub_214DD4944(_Unwind_Exception *a1)
{
}

void mlcore::QueryResult::~QueryResult(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C5C4898;
  uint64_t v2 = this + 1;
  this[1].__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  this[4].__vftable = (std::exception_vtbl *)&unk_26C5C3C00;
  if (SHIBYTE(this[19].__vftable) < 0) {
    operator delete(this[17].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 9);
  if (SHIBYTE(this[8].__vftable) < 0) {
    operator delete(this[6].__vftable);
  }
  std::exception::~exception(v2);
}

{
  uint64_t vars8;

  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C5BF0E8;
  this[3].__vftable = (std::exception_vtbl *)&unk_26C5BF118;
  if (SHIBYTE(this[7].__vftable) < 0) {
    operator delete(this[5].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this);
  JUMPOUT(0x2166B26F0);
}

uint64_t std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x12F684BDA12F685) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    long long v6 = (void *)result;
    uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = result + 216 * v8;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (void *)(v7 + v9);
        uint64_t result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v7 + v9, a2 + v9);
        void *v10 = &unk_26C5C4EE8;
        v10[26] = &unk_26C5C4F10;
        v9 += 216;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_214DD4B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__n128 std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C8FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C5C8AA0;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::DatabaseResultList>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (uint64_t v7 = *(void *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *(_DWORD *)a3 = a2;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

uint64_t mlcore::EntityCache::EntityCache(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    mlcore::EntityCache::EntityCache(a1, v7, &v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    mlcore::EntityCache::EntityCache(a1, v7, &v5);
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v5;
  uint64_t v6;
  void v7[2];

  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    mlcore::EntityCache::EntityCache(a1, v7, &v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    mlcore::EntityCache::EntityCache(a1, v7, &v5);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void v8[2];
  void v9[2];

  uint64_t v3 = *a2;
  int v4 = *(void *)(*a2 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a2;
  }
  v9[0] = v4;
  v9[1] = v5;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v8[0] = v3;
  v8[1] = v6;
  if (!v6)
  {
    mlcore::EntityCache::EntityCache(a1, v9, v8);
    if (!v5) {
      return a1;
    }
    goto LABEL_5;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  mlcore::EntityCache::EntityCache(a1, v9, v8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v5) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void v8[2];
  void v9[2];

  uint64_t v3 = *a2;
  int v4 = *(void *)(*a2 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a2;
  }
  v9[0] = v4;
  v9[1] = v5;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v8[0] = v3;
  v8[1] = v6;
  if (!v6)
  {
    mlcore::EntityCache::EntityCache(a1, v9, v8);
    if (!v5) {
      return a1;
    }
    goto LABEL_5;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  mlcore::EntityCache::EntityCache(a1, v9, v8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v5) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return a1;
}

uint64_t mlcore::EntityCache::EntityCache(uint64_t result, void *a2, void *a3)
{
  *(void *)__n128 result = &unk_26C5C43E8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 1065353216;
  uint64_t v3 = a2[1];
  *(void *)(result + 88) = *a2;
  *(void *)(result + 96) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  *(void *)(result + 104) = *a3;
  *(void *)(result + 112) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 128) = 1000;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_OWORD *)(result + 152) = 0uLL;
  *(_OWORD *)(result + 168) = 0uLL;
  *(_DWORD *)(result + 184) = 1065353216;
  *(void *)(result + 192) = result + 192;
  *(void *)(result + 200) = result + 192;
  *(void *)(result + 208) = 0;
  return result;
}

void mlcore::EntityCache::setPropertiesToFetchForEntityClass(uint64_t a1, uint64_t a2, mlcore::EntityClass *a3)
{
  uint64_t v14 = a3;
  uint64_t v6 = (char *)operator new(0xA0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C5CAD38;
  mlcore::EntityPropertiesQuery::EntityPropertiesQuery((mlcore::EntityPropertiesQuery *)(v6 + 24), a3);
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v7 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v6 + 104, v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (char *)(std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, (unint64_t)a3, &v14)+ 3);
  if (v8 != (char *)a2) {
    std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v8, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>((uint64_t *)(a1 + 48), (unint64_t)a3, (uint64_t *)&v14);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  void v9[3] = v6 + 24;
  v9[4] = v6;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
}

void sub_214DD4F20(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_214DD4FBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_214DD5354(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  float v14 = a1 + 2;
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v15 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v15;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = a1[1];
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          long long v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v14;
            long long v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *long long v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  long long v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                long long v25 = v31;
                long long v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v37 = (void *)*a1;
        *a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v33 = *a1;
  char v34 = *(void **)(*a1 + 8 * v3);
  if (v34)
  {
    *uint64_t i = *v34;
LABEL_72:
    void *v34 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v14;
  void *v14 = i;
  *(void *)(v33 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    char v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_214DD5780(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

mlcore::EntityPropertiesQuery *mlcore::EntityPropertiesQuery::EntityPropertiesQuery(mlcore::EntityPropertiesQuery *this, mlcore::EntityClass *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v4 = (void *)mlcore::PropertiesQuery::PropertiesQuery((uint64_t)this, (uint64_t)a2, v8);
  void *v4 = &unk_26C5C7F40;
  v4[13] = 0;
  v4[14] = 0;
  uint64_t v5 = (*(uint64_t (**)(mlcore::EntityClass *))(*(void *)a2 + 112))(a2);
  unint64_t v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)unint64_t v6 = &unk_26C5CABB0;
  *((void *)v6 + 4) = v5;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 3) = &unk_26C5C79D0;
  *((void *)v6 + 6) = 0;
  *(_OWORD *)(v6 + 56) = 0u;
  *((void *)this + 15) = v6 + 24;
  *((void *)this + 16) = v6;
  return this;
}

void sub_214DD587C(_Unwind_Exception *a1)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mlcore::PropertiesQuery::~PropertiesQuery(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = v2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_214DD5930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::operator()(uint64_t a1, int *a2)
{
  int v44 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v45 = *((void *)a2 + 1);
  long long v46 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v51, *(uint64_t **)(a1 + 8));
  v51[0] = &unk_26C5C4EE8;
  v51[26] = &unk_26C5C4F10;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void **)(v4 + 8);
  if (*(void **)v4 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      (*(void (**)(void, void *, int *, uint64_t))(*(void *)*v5 + 56))(*v5, v51, &v44, v7);
      uint64_t v7 = (v7 + 1);
      ++v5;
    }
    while (v5 != v6);
  }
  if (**(unsigned char **)(a1 + 16))
  {
    int v8 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)v51, **(void **)(a1 + 24));
    int v9 = v8;
    uint8x8_t v10 = *(int **)(a1 + 32);
    int v11 = *v10;
    if (*v10 == -1 || v8 == v11)
    {
LABEL_31:
      ++*(void *)(*(void *)(a1 + 72) + 8);
      int *v10 = v9;
      goto LABEL_32;
    }
    if (v8 == **(_DWORD **)(a1 + 40))
    {
      unint64_t v13 = *(unsigned char **)(a1 + 48);
      if (!*v13)
      {
        unsigned char *v13 = 1;
        float v14 = *(std::vector<std::string> ***)(a1 + 56);
        uint64_t v15 = *v14;
        std::__split_buffer<std::string>::pointer end = (*v14)->__end_;
        mlcore::_LocalizedString((mlcore *)&__x, @"UNKNOWN_SECTION_HEADER_TITLE");
        v17.__i_ = end;
        std::vector<std::string>::insert(v15, v17, &__x);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        BOOL v18 = *(std::vector<std::string> ***)(a1 + 64);
        unint64_t v19 = *v18;
        unint64_t v20 = (*v18)->__end_;
        mlcore::_LocalizedString((mlcore *)&__x, @"UNKNOWN_SECTION_INDEX_TITLE");
        v21.__i_ = v20;
        std::vector<std::string>::insert(v19, v21, &__x);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        uint8x8_t v10 = *(int **)(a1 + 32);
        int v11 = *v10;
      }
    }
    unint64_t v22 = *(uint64_t ***)(a1 + 56);
    memset(&v50, 0, sizeof(v50));
    uint64_t v24 = *v22;
    uint64_t v23 = **v22;
    if (0xAAAAAAAAAAAAAAABLL * ((v24[1] - v23) >> 3) <= v11)
    {
      uint64_t v26 = a1 + 72;
      long long v25 = *(long long **)(a1 + 72);
      int v27 = *v10;
    }
    else
    {
      std::string::operator=(&v50, (const std::string *)(v23 + 24 * v11));
      uint64_t v26 = a1 + 72;
      long long v25 = *(long long **)(a1 + 72);
      int v27 = **(_DWORD **)(a1 + 32);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__x, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
LABEL_21:
        long long v48 = *v25;
        int v49 = v27;
        uint64_t v28 = **(void **)(a1 + 80);
        unint64_t v29 = *(void *)(v28 + 8);
        if (v29 >= *(void *)(v28 + 16))
        {
          uint64_t v30 = std::vector<mlcore::Section>::__push_back_slow_path<mlcore::Section const&>(**(void **)(a1 + 80), (long long *)&__x);
        }
        else
        {
          std::vector<mlcore::Section>::__construct_one_at_end[abi:ne180100]<mlcore::Section const&>(**(void **)(a1 + 80), (long long *)&__x);
          uint64_t v30 = v29 + 48;
        }
        *(void *)(v28 + 8) = v30;
        **(_DWORD **)(a1 + 32) = v9;
        long long v31 = *(_DWORD **)(a1 + 88);
        if (v9 > *v31) {
          _DWORD *v31 = v9;
        }
        unint64_t v32 = *(void **)v26;
        *unint64_t v32 = *(void *)(*(void *)v26 + 8) + **(void **)v26;
        v32[1] = 0;
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        uint8x8_t v10 = *(int **)(a1 + 32);
        goto LABEL_31;
      }
    }
    std::vector<std::string>::value_type __x = v50;
    goto LABEL_21;
  }
LABEL_32:
  uint64_t v33 = **(uint64_t ***)(a1 + 96);
  unint64_t v34 = v33[1];
  unint64_t v35 = v33[2];
  if (v34 >= v35)
  {
    unint64_t v38 = 0x84BDA12F684BDA13 * ((uint64_t)(v34 - *v33) >> 3);
    if (v38 + 1 > 0x12F684BDA12F684) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0x84BDA12F684BDA13 * ((uint64_t)(v35 - *v33) >> 3);
    uint64_t v40 = 2 * v39;
    if (2 * v39 <= v38 + 1) {
      uint64_t v40 = v38 + 1;
    }
    if (v39 >= 0x97B425ED097B42) {
      unint64_t v41 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v41 = v40;
    }
    *((void *)&v48 + 1) = v33 + 2;
    if (v41) {
      unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v41);
    }
    else {
      uint64_t v42 = 0;
    }
    long long v43 = (void *)(v41 + 216 * v38);
    __x.__r_.__value_.__r.__words[0] = v41;
    __x.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
    __x.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
    *(void *)&long long v48 = v41 + 216 * v42;
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v43, (uint64_t)v51);
    *long long v43 = &unk_26C5C4EE8;
    v43[26] = &unk_26C5C4F10;
    __x.__r_.__value_.__r.__words[2] += 216;
    std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(v33, &__x);
    uint64_t v37 = (void *)v33[1];
    std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&__x);
  }
  else
  {
    char v36 = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v34, (uint64_t)v51);
    *char v36 = &unk_26C5C4EE8;
    v36[26] = &unk_26C5C4F10;
    uint64_t v37 = v36 + 27;
    v33[1] = (uint64_t)(v36 + 27);
  }
  v33[1] = (uint64_t)v37;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v51);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
}

void sub_214DD5DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a28);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::operator()(uint64_t a1, int *a2)
{
  int v11 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v12 = *((void *)a2 + 1);
  unint64_t v13 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v14, *(uint64_t **)(a1 + 8));
  v14[0] = &unk_26C5C4EE8;
  v14[26] = &unk_26C5C4F10;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void **)(v4 + 8);
  if (*(void **)v4 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      (*(void (**)(void, void *, int *, uint64_t))(*(void *)*v5 + 56))(*v5, v14, &v11, v7);
      uint64_t v7 = (v7 + 1);
      ++v5;
    }
    while (v5 != v6);
  }
  int v8 = *(uint64_t **)(a1 + 16);
  int v9 = (void *)v8[1];
  if ((unint64_t)v9 >= v8[2])
  {
    uint64_t v10 = std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>(v8, (uint64_t)v14);
  }
  else
  {
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v8[1], (uint64_t)v14);
    *int v9 = &unk_26C5C4EE8;
    v9[26] = &unk_26C5C4F10;
    uint64_t v10 = (uint64_t)(v9 + 27);
    v8[1] = (uint64_t)(v9 + 27);
  }
  v8[1] = v10;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v14);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_214DD5FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *mlcore::ModelProperty<long long>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sqlite3_int64 v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a2 + 168, a1, &v8);
  result[3] = v6;
  return result;
}

void *mlcore::ModelProperty<int>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = sqlite3_column_int(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a2 + 128, a1, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

void mlcore::ModelProperty<std::string>::insertIntoCacheFromResultList(std::string::size_type a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = sqlite3_column_text(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  if (v6) {
    uint64_t v7 = (char *)v6;
  }
  else {
    uint64_t v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v7);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a2, &__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_214DD6164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::ForeignProperty<long long>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sqlite3_int64 v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a2 + 168, a1, &v8);
  result[3] = v6;
  return result;
}

void mlcore::ForeignProperty<std::string>::insertIntoCacheFromResultList(std::string::size_type a1, uint64_t a2, uint64_t a3, int a4)
{
  sqlite3_int64 v6 = sqlite3_column_text(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  if (v6) {
    uint64_t v7 = (char *)v6;
  }
  else {
    uint64_t v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v7);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a2, &__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_214DD625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::PredicateProperty::insertIntoCacheFromResultList(mlcore::PredicateProperty *this, mlcore::PropertyCache *a2, mediaplatform::DatabaseResultList *a3, int a4)
{
  int v6 = sqlite3_column_int(*(sqlite3_stmt **)(*((void *)a3 + 1) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = this;
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a2 + 128, (unint64_t)this, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

double *mlcore::ModelProperty<double>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = sqlite3_column_double(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a2 + 88, a1, &v8);
  result[3] = v6;
  return result;
}

void *mlcore::ForeignProperty<int>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = sqlite3_column_int(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a2 + 128, a1, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

uint64_t std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  int v6 = a1 + 2;
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v7 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v7 = v3;
  }
  std::vector<std::string>::const_iterator v17 = v6;
  if (v7)
  {
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  unint64_t v13 = v9;
  float v14 = &v9[216 * v2];
  uint64_t v15 = (uint64_t)v14;
  float v16 = &v9[216 * v8];
  uint64_t v10 = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v14, a2);
  void *v10 = &unk_26C5C4EE8;
  v10[26] = &unk_26C5C4F10;
  v15 += 216;
  std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_214DD64EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (!*(_DWORD *)(v3 + 40))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>((uint64_t)&v10, *(void *)(v3 + 160), *(void *)(v3 + 168), 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v3 + 168) - *(void *)(v3 + 160)) >> 3));
    if (v11 != v10)
    {
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v9, v10);
      v9[0] = (void **)&unk_26C5C4EE8;
      v9[26] = (void **)&unk_26C5C4F10;
      uint64_t v5 = *(void **)(a1 + 8);
      *(void *)&long long v13 = &unk_26C5C8E68;
      float v14 = &v13;
      mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)v9, v5, (uint64_t)&v13);
      std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](&v13);
      (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 24) + 48))(&v13);
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = v13;
      long long v13 = 0uLL;
      uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
      *(_OWORD *)uint64_t v6 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v9);
    }
    v9[0] = (void **)&v10;
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](v9);
  }
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 40));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_214DD66BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a9);
  a9 = (void **)(v10 - 104);
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 216;
      long long v7 = v4 - 216;
      uint64_t v8 = v4 - 216;
      do
      {
        int v9 = *(void (***)(char *))v8;
        v8 -= 216;
        (*v9)(v7);
        v6 -= 216;
        BOOL v10 = v7 == v2;
        long long v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C76E8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 21));
  *a1 = &unk_26C5C76C8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

void *mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C76A8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 11));
  *a1 = &unk_26C5C7688;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(*(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      unint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 47) < 0) {
        operator delete(v1[3]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(*(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      unint64_t v2 = (void *)*v1;
      mediaplatform::Data::~Data((mediaplatform::Data *)(v1 + 3));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void *std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void mlcore::EntityPropertiesQuery::_SQLRenderer(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5)
  {
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v9[0] = *a2;
    v9[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    mlcore::PropertiesQuery::_SQLRenderer(a1, (uint64_t)v9, &v10);
    long long v7 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v10;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v5 = *(void *)(a1 + 104);
  }
  uint64_t v8 = *(void *)(a1 + 112);
  *a3 = v5;
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_214DD6B04(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)__n128 result = &unk_26C5C7668;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v4;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    unint64_t v6 = *(void *)(result + 16);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        v5 %= v6;
      }
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(void *)(v2 + 8 * v5) = result + 24;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
  }
  *(void *)__n128 result = &unk_26C5C7688;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v7;
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(result + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(result + 72) = v9;
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(result + 56);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(v7 + 8 * v10) = result + 64;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
  }
  *(void *)__n128 result = &unk_26C5C76A8;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(result + 88) = v12;
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(result + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + 112) = v14;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 120);
  if (v14)
  {
    unint64_t v15 = *(void *)(v13 + 8);
    unint64_t v16 = *(void *)(result + 96);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(v12 + 8 * v15) = result + 104;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
  }
  *(void *)__n128 result = &unk_26C5C76C8;
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(result + 128) = v17;
  *(void *)(result + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v18 = *(void *)(a2 + 144);
  *(void *)(result + 144) = v18;
  uint64_t v19 = *(void *)(a2 + 152);
  *(void *)(result + 152) = v19;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a2 + 160);
  if (v19)
  {
    unint64_t v20 = *(void *)(v18 + 8);
    unint64_t v21 = *(void *)(result + 136);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21) {
        v20 %= v21;
      }
    }
    else
    {
      v20 &= v21 - 1;
    }
    *(void *)(v17 + 8 * v20) = result + 144;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
  }
  *(void *)__n128 result = &unk_26C5C76E8;
  uint64_t v22 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(result + 168) = v22;
  *(void *)(result + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  uint64_t v25 = *(void *)(a2 + 184);
  uint64_t v23 = a2 + 184;
  uint64_t v24 = v25;
  *(void *)(result + 184) = v25;
  uint64_t v26 = *(void *)(v23 + 8);
  *(void *)(result + 192) = v26;
  *(_DWORD *)(result + 200) = *(_DWORD *)(v23 + 16);
  if (v26)
  {
    unint64_t v27 = *(void *)(v24 + 8);
    unint64_t v28 = *(void *)(result + 176);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28) {
        v27 %= v28;
      }
    }
    else
    {
      v27 &= v28 - 1;
    }
    *(void *)(v22 + 8 * v27) = result + 184;
    *(void *)uint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
  }
  return result;
}

double *mlcore::ForeignProperty<double>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = sqlite3_column_double(*(sqlite3_stmt **)(*(void *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  unint64_t v8 = a1;
  __n128 result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a2 + 88, a1, &v8);
  result[3] = v6;
  return result;
}

uint64_t mlcore::ItemPropertyStoreCloudUniversalLibraryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::ItemPropertySubscriptionStoreItemID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySubscriptionStoreItemID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySubscriptionStoreItemID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySubscriptionStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySubscriptionStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCloudAlbumID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreCloudAlbumID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreCloudAlbumID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudAlbumID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudAlbumID(void)::property;
}

uint64_t mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, long long *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v9 = *a5;
    *(void *)(a1 + 64) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 48) = v9;
  }
  mlcore::LocalizedSectionsInfo::_initializeLocalizedIndices((std::vector<std::string> *)a1, a3, a4);
  return a1;
}

void sub_214DD7034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSectionsInfo::_initializeLocalizedIndices(std::vector<std::string> *a1, uint64_t *a2, void *a3)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*(char *)(v4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      }
      else {
        std::string __p = *(std::string *)v4;
      }
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
      if (v7)
      {
        p_p = (long long *)(v7 + 40);
        std::vector<std::string>::pointer end = v13.__end_;
        if (v13.__end_ < v13.__end_cap_.__value_)
        {
          if ((char)v7[63] < 0)
          {
            std::string::__init_copy_ctor_external(v13.__end_, *((const std::string::value_type **)v7 + 5), *((void *)v7 + 6));
          }
          else
          {
            long long v10 = *p_p;
            v13.__end_->__r_.__value_.__r.__words[2] = *((void *)v7 + 7);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
          }
LABEL_16:
          unint64_t v11 = end + 1;
          goto LABEL_17;
        }
      }
      else
      {
        std::vector<std::string>::pointer end = v13.__end_;
        if (v13.__end_ < v13.__end_cap_.__value_)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v13.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)v13.__end_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          }
          goto LABEL_16;
        }
        p_p = (long long *)&__p;
      }
      unint64_t v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v13, p_p);
LABEL_17:
      v13.__end_ = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  if (&a1[1] != &v13) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, v13.__begin_, (long long *)v13.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3));
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_214DD71D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *mlcore::EntityQuery::setIdentityPropertiesToFetch(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(a1 + 104);
  if (result != (char *)a2) {
    return std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void *mediaplatform::Describable::className@<X0>(mediaplatform::Describable *this@<X0>, void *a2@<X8>)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  char v2 = (char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void mlcore::ForeignProperty<double>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  int8x8_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DD7420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::DatabaseModelProperty<double>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void mlcore::PropertiesQuery::~PropertiesQuery(mlcore::PropertiesQuery *this)
{
  *(void *)this = &unk_26C5C5DE0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)((char *)this + 56);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_26C5C84C0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  mlcore::PropertiesQuery::~PropertiesQuery(this);
  JUMPOUT(0x2166B26F0);
}

void std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 24;
      uint8x8_t v7 = v4 - 24;
      unint64_t v8 = v4 - 24;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint8x8_t v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void mlcore::AggregateFunctionQuery::_allPropertiesToFetch(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  long long v5 = *(atomic_ullong **)(a2 + 8);
  v7[0] = *(mlcore::LibraryView **)a2;
  v7[1] = (mlcore::LibraryView *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  mlcore::Query::_allPropertiesToFetch(a1, v7, (uint64_t)a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v6);
  }
}

void sub_214DD7644(_Unwind_Exception *a1)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::_allPropertiesToFetch(void *a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  long long v5 = *(atomic_ullong **)(a2 + 8);
  v14[0] = *(mlcore::LibraryView **)a2;
  v14[1] = (mlcore::LibraryView *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  v6.n128_f64[0] = mlcore::Query::_allPropertiesToFetch((uint64_t)a1, v14, (uint64_t)a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  (*(void (**)(void **__return_ptr, void *, __n128))(*a1 + 120))(&__p, a1, v6);
  uint8x8_t v7 = (uint64_t *)__p;
  unint64_t v8 = v12;
  while (v7 != v8)
  {
    uint64_t v15 = *v7;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v15);
    ++v7;
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v13);
  if (__p)
  {
    unint64_t v12 = (uint64_t *)__p;
    operator delete(__p);
  }
  uint64_t v10 = a1[7];
  uint64_t v9 = a1[8];
  while (v10 != v9)
  {
    std::string __p = *(void **)(v10 + 8);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, (uint64_t *)&__p);
    v10 += 24;
  }
}

void sub_214DD776C(_Unwind_Exception *a1)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPropertyPredicate::_allProperties@<X0>(mlcore::ComparisonPropertyPredicate *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 3);
  v4[0] = *((void *)this + 1);
  v4[1] = v2;
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v4, 2);
}

uint64_t mlcore::InPredicateBase::_allProperties@<X0>(mlcore::InPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *((void *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

void mlcore::PropertiesQuery::_allPropertiesToFetch(void *a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  long long v5 = *(atomic_ullong **)(a2 + 8);
  v10[0] = *(mlcore::LibraryView **)a2;
  v10[1] = (mlcore::LibraryView *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  mlcore::Query::_allPropertiesToFetch((uint64_t)a1, v10, (uint64_t)a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  __n128 v6 = (uint64_t *)a1[10];
  uint8x8_t v7 = (uint64_t *)a1[11];
  while (v6 != v7)
  {
    uint64_t v11 = *v6;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v11);
    ++v6;
  }
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  while (v9 != v8)
  {
    uint64_t v11 = *(void *)(v9 + 8);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v11);
    v9 += 24;
  }
}

void sub_214DD7924(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::Query::_allPropertiesToFetch@<D0>(uint64_t a1@<X0>, mlcore::LibraryView **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    __n128 v6 = *a2;
    if (!*a2) {
      goto LABEL_11;
    }
    unint64_t v9 = v5;
    uint64_t v10 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
    mlcore::LibraryView::_predicateByApplyingFilters(v6, &v9, *(mlcore::EntityClass **)(a1 + 8), &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v5 = v11.n128_u64[0];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v4 = (std::__shared_weak_count *)v7;
LABEL_11:
    if (v5) {
      goto LABEL_12;
    }
LABEL_17:
    double result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
    if (!v4) {
      return result;
    }
    goto LABEL_13;
  }
  __n128 v6 = *a2;
  if (*a2)
  {
    unint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = 0;
  if (!v5) {
    goto LABEL_17;
  }
LABEL_12:
  (*(void (**)(unint64_t))(*(void *)v5 + 56))(v5);
  if (!v4) {
    return result;
  }
LABEL_13:
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return result;
}

void sub_214DD7A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::UnaryPredicateBase::_allProperties@<X0>(mlcore::UnaryPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *((void *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

void mlcore::CompoundPredicate::_allProperties(mlcore::CompoundPredicate *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  for (uint64_t i = (uint64_t *)*((void *)this + 2); v3 != i; v3 += 2)
  {
    uint64_t v5 = *v3;
    __n128 v6 = (std::__shared_weak_count *)v3[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v5 + 56))(&__p);
    unint64_t v7 = (uint64_t *)__p;
    uint64_t v8 = v10;
    while (v7 != v8)
    {
      uint64_t v12 = *v7;
      mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v12);
      ++v7;
    }
    std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v11);
    if (__p)
    {
      uint64_t v10 = (uint64_t *)__p;
      operator delete(__p);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_214DD7BF4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicateBase::_allProperties@<X0>(mlcore::ComparisonPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *((void *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

uint64_t mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v7 = *a2;
      mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a1, &v7);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_214DD7D04(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLRenderer(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 72))(&v9);
  uint64_t v5 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CA0F8;
  long long v6 = v9;
  long long v9 = 0u;
  long long v10 = v6;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  mlcore::SQLRenderer::SQLRenderer((uint64_t)(v5 + 24), (uint64_t)&v10);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a3 = v5 + 24;
  a3[1] = v5;
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_214DD7E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLSelectStatement(unsigned char *a1@<X0>, uint64_t *a2@<X1>, mediaplatform::SQLSelectStatement **a3@<X8>)
{
  long long v6 = (std::__shared_weak_count *)a2[1];
  v22[0] = *a2;
  v22[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::RangeQuery::_SQLSelectStatement((uint64_t)a1, v22, a3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *a3;
  *(unsigned char *)(*((void *)*a3 + 1) + 8) = a1[48];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  uint64_t v19 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *))(*(void *)a1 + 64))(&v20, a1, &v18);
  mediaplatform::SQLSelectStatement::setFromStatement((uint64_t)v7, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t **__return_ptr, unsigned char *, uint64_t *))(*(void *)a1 + 48))(&v16, a1, &v14);
  long long v10 = (uint64_t *)(*((void *)v7 + 1) + 16);
  if (v10 != (uint64_t *)&v16) {
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v10, v16, v17, ((char *)v17 - (char *)v16) >> 4);
  }
  uint64_t v23 = (void **)&v16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  uint64_t v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t **__return_ptr, unsigned char *, uint64_t *))(*(void *)a1 + 56))(&v16, a1, &v12);
  if ((uint64_t **)((char *)v7 + 56) != &v16) {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>((uint64_t *)v7 + 7, v16, v17, ((char *)v17 - (char *)v16) >> 4);
  }
  uint64_t v23 = (void **)&v16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_214DD805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 56) = &a13;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 56));
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (*(void *)(v13 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v13 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_214DD80C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x214DD809CLL);
  }
  JUMPOUT(0x214DD8098);
}

void sub_214DD80D4()
{
  if (!v0) {
    JUMPOUT(0x214DD80ACLL);
  }
  JUMPOUT(0x214DD80A4);
}

void mlcore::Query::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, mediaplatform::SQLSelectStatement **a3@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN13mediaplatform18SQLSelectStatementENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  long long v6 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  uint64_t v23 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 48))(&v24, a1, &v22);
  uint64_t v8 = (uint64_t *)(*((void *)v6 + 1) + 16);
  if (v8 != (uint64_t *)&v24) {
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v8, (uint64_t *)v24, *((uint64_t **)&v24 + 1), (uint64_t)(*((void *)&v24 + 1) - v24) >> 4);
  }
  uint64_t v25 = (void **)&v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  long long v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  uint64_t v19 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 64))(&v20, a1, &v18);
  mediaplatform::SQLSelectStatement::setFromStatement((uint64_t)v6, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  unint64_t v16 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 80))(&v24, a1, &v15);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  long long v17 = v24;
  long long v24 = 0uLL;
  mediaplatform::SQLSelectStatement::setWhereExpression((uint64_t)v6, (uint64_t *)&v17);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 56))(&v24, a1, &v13);
  if ((long long *)((char *)v6 + 56) != &v24) {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>((uint64_t *)v6 + 7, (uint64_t *)v24, *((uint64_t **)&v24 + 1), (uint64_t)(*((void *)&v24 + 1) - v24) >> 4);
  }
  uint64_t v25 = (void **)&v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_214DD8330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  *(void *)(v13 - 56) = v13 - 80;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 56));
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v12 + 8);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void sub_214DD8384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x214DD8370);
  }
  JUMPOUT(0x214DD836CLL);
}

void sub_214DD8394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x214DD8370);
  }
  JUMPOUT(0x214DD836CLL);
}

void std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  long long v9 = a1 + 2;
  uint64_t v8 = a1[2];
  long long v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    uint64_t v15 = a2;
    goto LABEL_13;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v10) >> 4;
  if (v16 < a4)
  {
    long long v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, v17, v10);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    uint64_t v15 = v17;
LABEL_13:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v14, v15, a3, v13);
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, a3, v10);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    uint64_t v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void mediaplatform::SQLSelectStatement::setFromStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 48);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void mlcore::PropertiesQuery::_SQLOrderingTerms(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = (uint64_t *)(a1 + 56);
  v5[0] = *a2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::SQLOrderingTermsForSortDescriptors(v4, v5, a3);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_214DD85BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SQLOrderingTermsForSortDescriptors(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v3 + 8);
      long long v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v28 = *a2;
      unint64_t v29 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v30);
      if (*(_DWORD *)(v3 + 16) >= 2u)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "unkown sort ordering type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v27 = *(_DWORD *)(v3 + 16);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLOrderingTerm,std::allocator<mediaplatform::SQLOrderingTerm>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLOrderingTerm::OrderingType,void>(&v31, &v30, &v27);
      if (*((void *)&v30 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      long long v10 = v31;
      if (*((void *)&v31 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = a3[1];
      }
      unint64_t v11 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v11)
      {
        long long v26 = v10;
        unint64_t v12 = *a3;
        uint64_t v13 = (v7 - *a3) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)v12;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
        uint64_t v18 = &v17[16 * v13];
        uint64_t v20 = &v17[16 * v19];
        *(_OWORD *)uint64_t v18 = v26;
        unint64_t v21 = v18 + 16;
        if (v7 == v12)
        {
          *a3 = v18;
          a3[1] = v21;
          a3[2] = v20;
        }
        else
        {
          do
          {
            long long v22 = *((_OWORD *)v7 - 1);
            v7 -= 16;
            *((_OWORD *)v18 - 1) = v22;
            v18 -= 16;
            *(void *)uint64_t v7 = 0;
            *((void *)v7 + 1) = 0;
          }
          while (v7 != v12);
          uint64_t v7 = *a3;
          uint64_t v23 = a3[1];
          *a3 = v18;
          a3[1] = v21;
          a3[2] = v20;
          while (v23 != v7)
          {
            long long v24 = (std::__shared_weak_count *)*((void *)v23 - 1);
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            v23 -= 16;
          }
        }
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v21;
      }
      else
      {
        *(_OWORD *)uint64_t v7 = v10;
        v7 += 16;
        a3[1] = v7;
      }
      a3[1] = v7;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
}

void sub_214DD87F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLOrderingTerm,std::allocator<mediaplatform::SQLOrderingTerm>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLOrderingTerm::OrderingType,void>(void *a1, long long *a2, unsigned int *a3)
{
  long long v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)long long v6 = &unk_26C5C98A8;
  long long v7 = *a2;
  *a2 = 0u;
  unsigned int v8 = *a3;
  *((void *)v6 + 3) = &unk_26C5BEBF8;
  *((void *)v6 + 4) = v8;
  *(_OWORD *)(v6 + 40) = v7;
  if (*((void *)&v7 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

mediaplatform::SQLSelectStatement *_ZNSt3__115allocate_sharedB8ne180100IN13mediaplatform18SQLSelectStatementENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mediaplatform::SQLSelectStatement **a1)
{
  uint64_t v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5C9B80;
  double result = mediaplatform::SQLSelectStatement::SQLSelectStatement((mediaplatform::SQLSelectStatement *)(v2 + 3));
  *a1 = result;
  a1[1] = (mediaplatform::SQLSelectStatement *)v2;
  return result;
}

void sub_214DD8970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

mediaplatform::SQLSelectStatement *mediaplatform::SQLSelectStatement::SQLSelectStatement(mediaplatform::SQLSelectStatement *this)
{
  *(void *)this = &unk_26C5BEE18;
  uint64_t v2 = (char *)operator new(0x70uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26C5C9DB0;
  *((void *)v2 + 3) = &unk_26C5BF140;
  v2[32] = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)this + 1) = v2 + 24;
  *((void *)this + 2) = v2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return this;
}

void mediaplatform::SQLSelectStatement::setWhereExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 64);
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void mlcore::RangeQuery::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, mediaplatform::SQLSelectStatement **a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v17[0] = *a2;
  v17[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::Query::_SQLSelectStatement(a1, v17, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 104))(&v15, a1);
  uint64_t v8 = v15;
  long long v7 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)v6 + 6);
  *((void *)v6 + 5) = v8;
  *((void *)v6 + 6) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v13, a1);
  uint64_t v11 = v13;
  long long v10 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)v6 + 4);
  *((void *)v6 + 3) = v11;
  *((void *)v6 + 4) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_214DD8BD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::RangeQuery::_SQLOffsetExpression(mlcore::RangeQuery *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 4))
  {
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<unsigned long>,std::allocator<mediaplatform::SQLLiteralValue<unsigned long>>,unsigned long &,void>(&v3, (uint64_t *)this + 4);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

void mlcore::RangeQuery::_SQLLimitExpression(mlcore::RangeQuery *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 5))
  {
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<unsigned long>,std::allocator<mediaplatform::SQLLiteralValue<unsigned long>>,unsigned long &,void>(&v3, (uint64_t *)this + 5);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

void mlcore::Query::_SQLWhereExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v7 = *(mlcore::LibraryView **)a2;
    if (!*(void *)a2) {
      goto LABEL_11;
    }
    unint64_t v12 = v6;
    uint64_t v13 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
    mlcore::LibraryView::_predicateByApplyingFilters(v7, &v12, *(mlcore::EntityClass **)(a1 + 8), &v14);
    unint64_t v8 = v14.n128_u64[1];
    unint64_t v6 = v14.n128_u64[0];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v5 = (std::__shared_weak_count *)v8;
LABEL_11:
    if (v6) {
      goto LABEL_12;
    }
LABEL_20:
    *a3 = 0;
    a3[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_17;
  }
  long long v7 = *(mlcore::LibraryView **)a2;
  if (*(void *)a2)
  {
    unint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
  if (!v6) {
    goto LABEL_20;
  }
LABEL_12:
  long long v9 = *(std::__shared_weak_count **)(a2 + 8);
  long long v10 = *(mlcore::LibraryView **)a2;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(unint64_t, mlcore::LibraryView **))(*(void *)v6 + 64))(v6, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v5) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_214DD8DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_214DD8DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x214DD8DC0);
  }
  JUMPOUT(0x214DD8DBCLL);
}

void mlcore::ContentRestrictions::_predicate(mlcore::ContentRestrictions *this@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  v116[1] = *MEMORY[0x263EF8340];
  uint64_t Foreign = (mlcore *)mlcore::ItemPropertyMediaType(this);
  long long v7 = (mlcore *)mlcore::ItemPropertyContentRating(Foreign);
  unint64_t v8 = (mlcore *)mlcore::ItemPropertyContentRatingLevel(v7);
  uint64_t v9 = (uint64_t)v8;
  if (a2)
  {
    uint64_t v10 = mlcore::PlaylistItemPropertyItemPersistentID(v8);
    v112[0] = 0;
    v112[1] = 0;
    uint64_t Foreign = (mlcore *)mlcore::GetForeignProperty<int>(v10, (uint64_t)Foreign, v112);
    uint64_t v11 = mlcore::PlaylistItemPropertyItemPersistentID(Foreign);
    v111[0] = 0;
    v111[1] = 0;
    long long v7 = (mlcore *)mlcore::GetForeignProperty<int>(v11, (uint64_t)v7, v111);
    uint64_t v12 = mlcore::PlaylistItemPropertyItemPersistentID(v7);
    v110[0] = 0;
    v110[1] = 0;
    uint64_t v9 = mlcore::GetForeignProperty<int>(v12, v9, v110);
  }
  uint64_t v13 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(void *)uint64_t v13 = &unk_26C5CAB78;
  *((void *)v13 + 5) = 0x100000000;
  *((void *)v13 + 3) = &unk_26C5C7978;
  *((void *)v13 + 4) = v7;
  *((_DWORD *)v13 + 12) = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  *(void *)&long long v14 = v13 + 24;
  *((void *)&v14 + 1) = v13;
  long long v114 = v14;
  uint64_t v15 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v15 + 8) = 0u;
  *(void *)uint64_t v15 = &unk_26C5CAB78;
  *((void *)v15 + 5) = 0x100000000;
  *((void *)v15 + 3) = &unk_26C5C7978;
  *((void *)v15 + 4) = v7;
  *((_DWORD *)v15 + 12) = 2;
  *(_OWORD *)(v15 + 56) = 0u;
  v16.n128_u64[0] = (unint64_t)(v15 + 24);
  v16.n128_u64[1] = (unint64_t)v15;
  __n128 v115 = v16;
  uint64_t v107 = 0;
  long long v108 = 0u;
  LOBYTE(v105) = 0;
  uint64_t v107 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v108 = v107;
  *((void *)&v108 + 1) = v107 + 4;
  *(void *)&long long v108 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v108 + 8, &v114, v116, v107);
  mlcore::CreateAndPredicate(&v107, &v109);
  int v104 = (void **)&v107;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v104);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)&v114 + i);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  int v19 = *(unsigned __int8 *)this;
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  if (v19)
  {
    uint64_t v20 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v20 + 8) = 0u;
    *(void *)uint64_t v20 = &unk_26C5CAB78;
    *((void *)v20 + 5) = 0x700000000;
    *((void *)v20 + 3) = &unk_26C5C7978;
    *((void *)v20 + 4) = Foreign;
    *((_DWORD *)v20 + 12) = 12;
    *(_OWORD *)(v20 + 56) = 0u;
    *(void *)&long long v114 = v20 + 24;
    *((void *)&v114 + 1) = v20;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v20 + 1, 1uLL, memory_order_relaxed);
    __n128 v115 = v109;
    if (v109.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v109.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    unint64_t v102 = 0;
    *(void *)&long long v113 = &v100;
    BYTE8(v113) = 0;
    uint64_t v100 = (uint64_t *)operator new(0x20uLL);
    unint64_t v101 = v100;
    unint64_t v102 = v100 + 4;
    unint64_t v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v102, &v114, v116, v100);
    mlcore::CreateAndPredicate(&v100, &v103);
    *(void *)&long long v113 = &v100;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    for (uint64_t j = 24; j != -8; j -= 16)
    {
      long long v22 = *(std::__shared_weak_count **)((char *)&v114 + j);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
    mlcore::CreateNotPredicate(&v103, &v113);
    long long v23 = v113;
    long long v113 = 0uLL;
    long long v24 = v105;
    if ((unint64_t)v105 >= v106)
    {
      long long v87 = v23;
      int64_t v26 = (v105 - (char *)v104) >> 4;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = (uint64_t)(v106 - (void)v104) >> 3;
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      if (v106 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      v116[0] = &v106;
      unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v28);
      long long v30 = &v29[16 * v26];
      *(void *)&long long v114 = v29;
      *((void *)&v114 + 1) = v30;
      v115.n128_u64[1] = (unint64_t)&v29[16 * v31];
      *(_OWORD *)long long v30 = v87;
      v115.n128_u64[0] = (unint64_t)(v30 + 16);
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v104, &v114);
      uint64_t v25 = v105;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v114);
    }
    else
    {
      *(_OWORD *)uint64_t v105 = v23;
      uint64_t v25 = v24 + 16;
    }
    uint64_t v105 = v25;
    if (v103.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.n128_u64[1]);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
  }
  if (*((unsigned char *)this + 1))
  {
    unint64_t v32 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v32 + 8) = 0u;
    *(void *)unint64_t v32 = &unk_26C5CAB78;
    *((void *)v32 + 5) = 0x700000000;
    *((void *)v32 + 3) = &unk_26C5C7978;
    *((void *)v32 + 4) = Foreign;
    *((_DWORD *)v32 + 12) = 65538;
    *(_OWORD *)(v32 + 56) = 0u;
    *(void *)&long long v114 = v32 + 24;
    *((void *)&v114 + 1) = v32;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
    __n128 v115 = v109;
    if (v109.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v109.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v97 = 0;
    uint64_t v98 = 0;
    unint64_t v99 = 0;
    *(void *)&long long v113 = &v97;
    BYTE8(v113) = 0;
    unint64_t v97 = (uint64_t *)operator new(0x20uLL);
    uint64_t v98 = v97;
    unint64_t v99 = v97 + 4;
    uint64_t v98 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v99, &v114, v116, v97);
    mlcore::CreateAndPredicate(&v97, &v103);
    *(void *)&long long v113 = &v97;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    for (uint64_t k = 24; k != -8; k -= 16)
    {
      unint64_t v34 = *(std::__shared_weak_count **)((char *)&v114 + k);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
    mlcore::CreateNotPredicate(&v103, &v113);
    long long v35 = v113;
    long long v113 = 0uLL;
    char v36 = v105;
    if ((unint64_t)v105 >= v106)
    {
      long long v88 = v35;
      int64_t v38 = (v105 - (char *)v104) >> 4;
      if ((unint64_t)(v38 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v39 = (uint64_t)(v106 - (void)v104) >> 3;
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      if (v106 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      v116[0] = &v106;
      unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v40);
      uint64_t v42 = &v41[16 * v38];
      *(void *)&long long v114 = v41;
      *((void *)&v114 + 1) = v42;
      v115.n128_u64[1] = (unint64_t)&v41[16 * v43];
      *(_OWORD *)uint64_t v42 = v88;
      v115.n128_u64[0] = (unint64_t)(v42 + 16);
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v104, &v114);
      uint64_t v37 = v105;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v114);
    }
    else
    {
      *(_OWORD *)uint64_t v105 = v35;
      uint64_t v37 = v36 + 16;
    }
    uint64_t v105 = v37;
    if (v103.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.n128_u64[1]);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
  }
  if (*((unsigned char *)this + 2))
  {
    int v44 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v44 + 8) = 0u;
    *(void *)int v44 = &unk_26C5CAB78;
    *((void *)v44 + 5) = 0x700000000;
    *((void *)v44 + 3) = &unk_26C5C7978;
    *((void *)v44 + 4) = Foreign;
    *((_DWORD *)v44 + 12) = 1024;
    *(_OWORD *)(v44 + 56) = 0u;
    *(void *)&long long v45 = v44 + 24;
    *((void *)&v45 + 1) = v44;
    long long v113 = v45;
    mlcore::CreateNotPredicate(&v113, &v103);
    __n128 v46 = v103;
    __n128 v103 = 0uLL;
    long long v47 = v105;
    if ((unint64_t)v105 >= v106)
    {
      __n128 v89 = v46;
      int64_t v49 = (v105 - (char *)v104) >> 4;
      if ((unint64_t)(v49 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v50 = (uint64_t)(v106 - (void)v104) >> 3;
      if (v50 <= v49 + 1) {
        unint64_t v50 = v49 + 1;
      }
      if (v106 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      v116[0] = &v106;
      std::exception v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v51);
      uint64_t v53 = (__n128 *)&v52[16 * v49];
      *(void *)&long long v114 = v52;
      *((void *)&v114 + 1) = v53;
      v115.n128_u64[1] = (unint64_t)&v52[16 * v54];
      __n128 *v53 = v89;
      v115.n128_u64[0] = (unint64_t)v53[1].n128_u64;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v104, &v114);
      long long v48 = v105;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v114);
    }
    else
    {
      *(__n128 *)uint64_t v105 = v46;
      long long v48 = v47 + 16;
    }
    uint64_t v105 = v48;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44);
  }
  int v55 = *((_DWORD *)this + 1);
  if (v55 <= 999)
  {
    uint64_t v56 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v56 + 8) = 0u;
    *(void *)uint64_t v56 = &unk_26C5CAB78;
    *((void *)v56 + 5) = 0x700000000;
    *((void *)v56 + 3) = &unk_26C5C7978;
    *((void *)v56 + 4) = Foreign;
    *((_DWORD *)v56 + 12) = 2048;
    *(_OWORD *)(v56 + 56) = 0u;
    *(void *)&long long v114 = v56 + 24;
    *((void *)&v114 + 1) = v56;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v56 + 1, 1uLL, memory_order_relaxed);
    char v57 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v57 + 8) = 0u;
    *(void *)char v57 = &unk_26C5CAB78;
    *((void *)v57 + 5) = 0x200000000;
    *((void *)v57 + 3) = &unk_26C5C7978;
    *((void *)v57 + 4) = v9;
    *((_DWORD *)v57 + 12) = v55;
    *(_OWORD *)(v57 + 56) = 0u;
    v58.n128_u64[0] = (unint64_t)(v57 + 24);
    v58.n128_u64[1] = (unint64_t)v57;
    __n128 v115 = v58;
    uint64_t v95 = 0;
    long long v96 = 0u;
    *(void *)&long long v113 = &v95;
    BYTE8(v113) = 0;
    uint64_t v95 = (uint64_t *)operator new(0x20uLL);
    *(void *)&long long v96 = v95;
    *((void *)&v96 + 1) = v95 + 4;
    *(void *)&long long v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v96 + 8, &v114, v116, v95);
    mlcore::CreateAndPredicate(&v95, &v103);
    *(void *)&long long v113 = &v95;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    for (uint64_t m = 24; m != -8; m -= 16)
    {
      int v60 = *(std::__shared_weak_count **)((char *)&v114 + m);
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
    }
    mlcore::CreateNotPredicate(&v103, &v113);
    long long v61 = v113;
    long long v113 = 0uLL;
    long long v62 = v105;
    if ((unint64_t)v105 >= v106)
    {
      long long v90 = v61;
      int64_t v64 = (v105 - (char *)v104) >> 4;
      if ((unint64_t)(v64 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v65 = (uint64_t)(v106 - (void)v104) >> 3;
      if (v65 <= v64 + 1) {
        unint64_t v65 = v64 + 1;
      }
      if (v106 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      v116[0] = &v106;
      long long v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v66);
      uint64_t v68 = &v67[16 * v64];
      *(void *)&long long v114 = v67;
      *((void *)&v114 + 1) = v68;
      v115.n128_u64[1] = (unint64_t)&v67[16 * v69];
      *(_OWORD *)uint64_t v68 = v90;
      v115.n128_u64[0] = (unint64_t)(v68 + 16);
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v104, &v114);
      long long v63 = v105;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v114);
    }
    else
    {
      *(_OWORD *)uint64_t v105 = v61;
      long long v63 = v62 + 16;
    }
    uint64_t v105 = v63;
    if (v103.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.n128_u64[1]);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56);
  }
  int v70 = *((_DWORD *)this + 2);
  if (v70 <= 999)
  {
    uint64_t v71 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v71 + 8) = 0u;
    *(void *)uint64_t v71 = &unk_26C5CAB78;
    *((void *)v71 + 5) = 0x700000000;
    *((void *)v71 + 3) = &unk_26C5C7978;
    *((void *)v71 + 4) = Foreign;
    *((_DWORD *)v71 + 12) = 512;
    *(_OWORD *)(v71 + 56) = 0u;
    *(void *)&long long v114 = v71 + 24;
    *((void *)&v114 + 1) = v71;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v71 + 1, 1uLL, memory_order_relaxed);
    unint64_t v72 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v72 + 8) = 0u;
    *(void *)unint64_t v72 = &unk_26C5CAB78;
    *((void *)v72 + 5) = 0x200000000;
    *((void *)v72 + 3) = &unk_26C5C7978;
    *((void *)v72 + 4) = v9;
    *((_DWORD *)v72 + 12) = v70;
    *(_OWORD *)(v72 + 56) = 0u;
    v73.n128_u64[0] = (unint64_t)(v72 + 24);
    v73.n128_u64[1] = (unint64_t)v72;
    __n128 v115 = v73;
    uint64_t v93 = 0;
    long long v94 = 0u;
    *(void *)&long long v113 = &v93;
    BYTE8(v113) = 0;
    uint64_t v93 = (uint64_t *)operator new(0x20uLL);
    *(void *)&long long v94 = v93;
    *((void *)&v94 + 1) = v93 + 4;
    *(void *)&long long v94 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v94 + 8, &v114, v116, v93);
    mlcore::CreateAndPredicate(&v93, &v103);
    *(void *)&long long v113 = &v93;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    for (uint64_t n = 24; n != -8; n -= 16)
    {
      int v75 = *(std::__shared_weak_count **)((char *)&v114 + n);
      if (v75) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
    }
    mlcore::CreateNotPredicate(&v103, &v113);
    long long v76 = v113;
    long long v113 = 0uLL;
    int v77 = v105;
    if ((unint64_t)v105 >= v106)
    {
      long long v91 = v76;
      int64_t v79 = (v105 - (char *)v104) >> 4;
      if ((unint64_t)(v79 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v80 = (uint64_t)(v106 - (void)v104) >> 3;
      if (v80 <= v79 + 1) {
        unint64_t v80 = v79 + 1;
      }
      if (v106 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v80;
      }
      v116[0] = &v106;
      uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v81);
      long long v83 = &v82[16 * v79];
      *(void *)&long long v114 = v82;
      *((void *)&v114 + 1) = v83;
      v115.n128_u64[1] = (unint64_t)&v82[16 * v84];
      *(_OWORD *)long long v83 = v91;
      v115.n128_u64[0] = (unint64_t)(v83 + 16);
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v104, &v114);
      uint64_t v78 = v105;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v114);
    }
    else
    {
      *(_OWORD *)uint64_t v105 = v76;
      uint64_t v78 = v77 + 16;
    }
    uint64_t v105 = v78;
    if (v103.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.n128_u64[1]);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71);
  }
  unint64_t v85 = (v105 - (char *)v104) >> 4;
  if (v85 == 1)
  {
    uint64_t v86 = (atomic_ullong *)v104[1];
    a3->n128_u64[0] = (unint64_t)*v104;
    a3->n128_u64[1] = (unint64_t)v86;
    if (v86) {
      atomic_fetch_add_explicit(v86 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else if (v85)
  {
    memset(v92, 0, sizeof(v92));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v92, v104, v105, v85);
    mlcore::CreateAndPredicate(v92, a3);
    *(void *)&long long v114 = v92;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  }
  else
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
  }
  *(void *)&long long v114 = &v104;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  if (v109.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109.n128_u64[1]);
  }
}

void sub_214DD99F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  *(void *)(v37 - 144) = v36;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 144));
  *(void *)(v37 - 160) = &a29;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 160));
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyMediaType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyMediaType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyMediaType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMediaType(void)::property;
}

uint64_t mlcore::ItemPropertyContentRatingLevel(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyContentRatingLevel(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyContentRatingLevel(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRatingLevel(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyContentRatingLevel(void)::property;
}

uint64_t mlcore::ItemPropertyContentRating(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyContentRating(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyContentRating(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRating(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyContentRating(void)::property;
}

uint64_t mlcore::SQLRenderer::SQLRenderer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C48B8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_26C5BEFF0;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = (void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  unint64_t v6 = (char *)operator new(0x70uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_26C5C9C98;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *((_DWORD *)v6 + 26) = 1065353216;
  uint64_t v15 = a1 + 80;
  long long v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(1uLL);
  *(void *)&long long v8 = v6 + 24;
  *((void *)&v8 + 1) = v6;
  *(void *)&long long v12 = v7;
  *((void *)&v12 + 1) = v7;
  long long v14 = &v7[v9];
  *long long v7 = v8;
  uint64_t v13 = v7 + 1;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(v5, &v12);
  uint64_t v10 = *(void *)(a1 + 72);
  std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v12);
  *(void *)(a1 + 72) = v10;
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 16))(&v12);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  *(_OWORD *)uint64_t v4 = v12;
  *(void *)(v4 + 16) = v13;
  return a1;
}

void sub_214DD9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(void *)(v6 + 32) = v7;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v6 + 31) < 0) {
    operator delete(*v8);
  }
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLSelectCoreStatement::sql(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
    uint64_t v5 = __p;
    uint64_t v4 = v20;
  }
  else
  {
    uint64_t v4 = (char *)operator new(0x70uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = &unk_26C5C9C98;
    uint64_t v5 = v4 + 24;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_DWORD *)v4 + 16) = 1065353216;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *((_DWORD *)v4 + 26) = 1065353216;
  }
  _DWORD *v5 = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SELECT ", 7);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v6 = "DISTINCT ";
  }
  else {
    uint64_t v6 = "ALL ";
  }
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v7 = 9;
  }
  else {
    uint64_t v7 = 4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v6, v7);
  std::string::basic_string[abi:ne180100]<0>(v17, ", ");
  mediaplatform::SQLStringWithStatementList<mediaplatform::SQLExpression>((uint64_t)&__p, (uint64_t **)(a1 + 16), a2, (uint64_t)v17);
  if ((v21 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v9 = v21;
  }
  else {
    uint64_t v9 = (uint64_t)v20;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)p_p, v9);
  if ((char)v21 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  _DWORD *v5 = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" FROM ", 6);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 16))(&__p);
  if ((v21 & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = __p;
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v11 = v21;
  }
  else {
    uint64_t v11 = (uint64_t)v20;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
  if ((char)v21 < 0) {
    operator delete(__p);
  }
  if (*(void *)(a1 + 56))
  {
    _DWORD *v5 = 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" WHERE ", 7);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 16))(&__p);
    long long v12 = (v21 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v13 = (v21 & 0x80u) == 0 ? v21 : (uint64_t)v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v12, v13);
    if ((char)v21 < 0) {
      operator delete(__p);
    }
  }
  if (!*(void *)(a1 + 72)
    || ((_DWORD *v5 = 3,
         std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" GROUP BY ", 10),
         (*(void (**)(void **__return_ptr))(**(void **)(a1 + 72) + 16))(&__p),
         (v21 & 0x80u) == 0)
      ? (long long v14 = &__p)
      : (long long v14 = __p),
        (v21 & 0x80u) == 0 ? (uint64_t v15 = v21) : (uint64_t v15 = (uint64_t)v20),
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v14, v15),
        ((char)v21 & 0x80000000) == 0))
  {
    if (!a2) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  operator delete(__p);
  if (a2) {
LABEL_46:
  }
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
LABEL_47:
  std::stringbuf::str();
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  v22[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v22[1] = MEMORY[0x263F8C318] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v24);
}

void sub_214DDA3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

uint64_t mediaplatform::SQLSelectStatement::sql(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
    uint64_t v5 = __p;
    uint64_t v4 = v18;
  }
  else
  {
    uint64_t v4 = (char *)operator new(0x70uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = &unk_26C5C9C98;
    uint64_t v5 = v4 + 24;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_DWORD *)v4 + 16) = 1065353216;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *((_DWORD *)v4 + 26) = 1065353216;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 16))(&__p);
  if ((v19 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)v18;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, v7);
  if ((char)v19 < 0) {
    operator delete(__p);
  }
  if (*(void *)(a1 + 64) != *(void *)(a1 + 56))
  {
    _DWORD *v5 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ORDER BY ", 10);
    std::string::basic_string[abi:ne180100]<0>(v15, ", ");
    mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>((uint64_t)&__p, (uint64_t **)(a1 + 56), a2, (uint64_t)v15);
    if ((v19 & 0x80u) == 0) {
      long long v8 = &__p;
    }
    else {
      long long v8 = __p;
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v9 = v19;
    }
    else {
      uint64_t v9 = (uint64_t)v18;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, v9);
    if ((char)v19 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  if (*(void *)(a1 + 24))
  {
    _DWORD *v5 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" LIMIT ", 7);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 24) + 16))(&__p);
    uint64_t v10 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v11 = (v19 & 0x80u) == 0 ? v19 : (uint64_t)v18;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v10, v11);
    if ((char)v19 < 0) {
      operator delete(__p);
    }
  }
  if (!*(void *)(a1 + 40)
    || ((_DWORD *v5 = 6,
         std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" OFFSET ", 8),
         (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 16))(&__p),
         (v19 & 0x80u) == 0)
      ? (long long v12 = &__p)
      : (long long v12 = __p),
        (v19 & 0x80u) == 0 ? (uint64_t v13 = v19) : (uint64_t v13 = (uint64_t)v18),
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v12, v13),
        ((char)v19 & 0x80000000) == 0))
  {
    if (!a2) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  operator delete(__p);
  if (a2) {
LABEL_41:
  }
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
LABEL_42:
  std::stringbuf::str();
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  v20[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v22);
}

void sub_214DDA864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void mlcore::SQLRenderer::pushRenderingContext(mlcore::SQLRenderer *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 8))(&v26);
  std::unordered_set<std::string>::unordered_set((uint64_t)v28, v26 + 48);
  uint64_t v4 = (char *)operator new(0x70uLL);
  uint64_t v5 = (atomic_ullong *)v4;
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_26C5C9C98;
  uint64_t v6 = v4 + 24;
  uint64_t v7 = v28[0];
  unint64_t v8 = (unint64_t)v28[1];
  *(_OWORD *)unint64_t v28 = 0u;
  std::string __p = v7;
  uint64_t v33 = (_OWORD *)v8;
  unint64_t v34 = v29;
  long long v35 = v30;
  LODWORD(v36) = v31;
  if (v30)
  {
    unint64_t v9 = *((void *)v29 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      BOOL v11 = v9 >= v8;
      unint64_t v10 = v9 % v8;
      if (!v11) {
        unint64_t v10 = *((void *)v29 + 1);
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v9;
    }
    *((void *)v7 + v10) = &v34;
    unint64_t v29 = 0;
    long long v30 = 0;
  }
  mediaplatform::SQLRenderingContext::SQLRenderingContext((uint64_t)(v4 + 24), (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v34);
  long long v12 = __p;
  std::string __p = 0;
  if (v12) {
    operator delete(v12);
  }
  *a2 = v6;
  a2[1] = v5;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v29);
  uint64_t v13 = v28[0];
  v28[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  unint64_t v14 = *((void *)this + 10);
  uint64_t v15 = (void *)*((void *)this + 9);
  if ((unint64_t)v15 >= v14)
  {
    uint64_t v17 = *((void *)this + 8);
    uint64_t v18 = ((uint64_t)v15 - v17) >> 4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v14 - v17;
    if (v20 >> 3 > v19) {
      unint64_t v19 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    uint64_t v36 = (char *)this + 80;
    uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
    char v23 = &v22[16 * v18];
    std::string __p = v22;
    uint64_t v33 = v23;
    long long v35 = &v22[16 * v24];
    long long v25 = *(_OWORD *)a2;
    *(_OWORD *)char v23 = *(_OWORD *)a2;
    if (*((void *)&v25 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v34 = v23 + 16;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer((void *)this + 8, &__p);
    char v16 = (void *)*((void *)this + 9);
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    void *v15 = *a2;
    v15[1] = v5;
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    char v16 = v15 + 2;
    *((void *)this + 9) = v15 + 2;
  }
  *((void *)this + 9) = v16;
}

void sub_214DDAB14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      char v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t mediaplatform::SQLRenderingContext::SQLRenderingContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::unordered_set<std::string>::unordered_set(a1 + 48, a2);
  return a1;
}

void sub_214DDAC30(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_214DDACA4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void mlcore::SQLRenderer::popRenderingContext(mlcore::SQLRenderer *this)
{
  uint64_t v1 = *((void *)this + 9);
  if ((unint64_t)(v1 - *((void *)this + 8)) <= 0x1F) {
    __assert_rtn("popRenderingContext", "SQLRenderer.cpp", 47, "_renderingContexts.size() > 1");
  }
  long long v3 = *(std::__shared_weak_count **)(v1 - 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 9) = v1 - 16;
}

uint64_t mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    char v9 = 1;
    while (1)
    {
      uint64_t v11 = *v7;
      unint64_t v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v9 & 1) == 0)
      {
        int v12 = *(char *)(a4 + 23);
        if (v12 >= 0) {
          uint64_t v13 = a4;
        }
        else {
          uint64_t v13 = *(void *)a4;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          uint64_t v14 = *(void *)(a4 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v13, v14);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 16))(__p, v11, a3);
      uint64_t v15 = (v19 & 0x80u) == 0 ? __p : (void **)__p[0];
      char v16 = (v19 & 0x80u) == 0 ? (void *)v19 : __p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v15, (uint64_t)v16);
      if ((char)v19 < 0) {
        break;
      }
      if (v10) {
        goto LABEL_21;
      }
LABEL_22:
      char v9 = 0;
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_26;
      }
    }
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_22;
    }
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_22;
  }
LABEL_26:
  std::stringbuf::str();
  v20[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v22);
}

void sub_214DDAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t mediaplatform::SQLOrderingTerm::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 16))(&__p);
  if ((v11 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v3 = v11;
  }
  else {
    uint64_t v3 = v10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v3);
  if ((char)v11 < 0) {
    operator delete(__p);
  }
  if (*(_DWORD *)(a1 + 12))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    mediaplatform::NameForCollateType(&__p, *(_DWORD *)(a1 + 12));
    uint64_t v4 = (v11 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v5 = (v11 & 0x80u) == 0 ? v11 : v10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
    if ((char)v11 < 0) {
      operator delete(__p);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  mediaplatform::NameForOrderingType(&__p, *(_DWORD *)(a1 + 8));
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = __p;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = v11;
  }
  else {
    uint64_t v7 = v10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v6, v7);
  if ((char)v11 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v14);
}

void sub_214DDB1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *mediaplatform::NameForOrderingType(void *a1, int a2)
{
  if (a2)
  {
    if (a2 != 1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown ordering type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    char v2 = "DESC";
  }
  else
  {
    char v2 = "ASC";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void sub_214DDB28C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::Query::_SQLResultColumnExpressions(void *a1@<X8>)
{
  v8[1] = *MEMORY[0x263EF8340];
  int v3 = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v4, &v3);
  long long v7 = v4;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v5 = a1;
  char v6 = 0;
  char v2 = operator new(0x10uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 2;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a1 + 2), &v7, v8, v2);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_214DDB360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void mlcore::Query::_SQLOrderingTerms(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::EntityPropertiesQuery::_SQLWhereExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  int v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 64))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DDB408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyKeepLocalStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyKeepLocalStatus(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyKeepLocalStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalStatus(void)::property;
}

void mlcore::Query::setPredicate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *mlcore::EntityCache::setCacheDisabled(void *this, int a2)
{
  *((unsigned char *)this + 120) = a2;
  if (a2)
  {
    uint64_t v2 = this;
    if (this[22])
    {
      std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node((void *)this[21]);
      v2[21] = 0;
      uint64_t v3 = v2[20];
      if (v3)
      {
        for (uint64_t i = 0; i != v3; ++i)
          *(void *)(v2[19] + 8 * i) = 0;
      }
      v2[22] = 0;
    }
    this = std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear(v2 + 24);
    v2[18] = 0;
  }
  return this;
}

void mlcore::EntityCache::~EntityCache(mlcore::EntityCache *this)
{
  *(void *)this = &unk_26C5C43E8;
  std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear((void *)this + 24);
  std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node(*((void **)this + 21));
  uint64_t v2 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    do
    {
      char v6 = (void *)*v5;
      long long v7 = (std::__shared_weak_count *)v5[4];
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v8 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    operator delete(v8);
  }
  std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  mlcore::EntityCache::~EntityCache(this);
  JUMPOUT(0x2166B26F0);
}

void *std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[5];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t mlcore::ComparisonPredicate<long long>::ComparisonPredicate(uint64_t result, uint64_t a2, int a3, void *a4, int a5)
{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(void *)double result = &unk_26C5C79D0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = *a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(void *)double result = &unk_26C5C79D0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = *a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t mlcore::ComparisonPredicate<int>::ComparisonPredicate(uint64_t result, uint64_t a2, int a3, _DWORD *a4, int a5)
{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(void *)double result = &unk_26C5C7978;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 24) = *a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(void *)double result = &unk_26C5C7978;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 24) = *a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t mlcore::SortDescriptor::SortDescriptor(uint64_t result, uint64_t a2, int a3)
{
  *(void *)double result = &unk_26C5C5398;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  *(void *)double result = &unk_26C5C5398;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

void mlcore::InPredicate<std::string>::InPredicate(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::InPredicate<std::string>::InPredicate();
}

{
  void *__p;

  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::InPredicate<std::string>::InPredicate();
}

void sub_214DDB7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_214DDB86C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = operator new(0x28uLL);
  void *v15 = 0;
  v15[1] = v8;
  char v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v15 = *v24;
LABEL_41:
    *uint64_t v24 = v15;
    goto LABEL_42;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_214DDBAB4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<std::string>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5C45B8;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*(void *)(a3 + 24) >= 0x1F5uLL) {
    mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>();
  }
  if (v4 != a3)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
    for (uint64_t i = *(uint64_t **)(a3 + 16); i; uint64_t i = (uint64_t *)*i)
    {
      char v6 = (char *)operator new(0x28uLL);
      uint64_t v7 = (uint64_t)v6;
      unint64_t v8 = v6 + 16;
      *(void *)char v6 = 0;
      *((void *)v6 + 1) = 0;
      if (*((char *)i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v6 + 16), (const std::string::value_type *)i[2], i[3]);
      }
      else
      {
        long long v9 = *((_OWORD *)i + 1);
        *((void *)v6 + 4) = i[4];
        _OWORD *v8 = v9;
      }
      *(void *)(v7 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v8);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v4, v7);
    }
  }
  return a1;
}

void sub_214DDBBFC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = operator new(8 * *(void *)&prime);
      char v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      unint64_t v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        unint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              uint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              uint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                unint64_t v25 = (void *)v22;
                while (1)
                {
                  uint64_t v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break; {
                  uint64_t v24 = (void *)*v26;
                  }
                  unint64_t v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                uint64_t v24 = v26;
                uint64_t v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                uint64_t v26 = (void *)v22;
              }
              uint64_t *v15 = (uint64_t)v24;
              void *v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              uint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      unint64_t v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  int v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    unint64_t v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        unint64_t v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        unint64_t v32 = *(unsigned __int8 **)v34;
        int v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v31;
  *(void *)int v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

uint64_t mlcore::PlaylistItemPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyReportingStoreItemID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyReportingStoreItemID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyReportingStoreItemID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyReportingStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyReportingStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyHasNonPurgeableAsset(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasNonPurgeableAsset(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasNonPurgeableAsset(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasNonPurgeableAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasNonPurgeableAsset(void)::property;
}

uint64_t mlcore::ItemPropertyAssetStoreItemID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAssetStoreItemID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAssetStoreItemID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAssetStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAssetStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyCloudKVSKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCloudKVSKey(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCloudKVSKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudKVSKey(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudKVSKey(void)::property;
}

uint64_t mlcore::ItemPropertyIsExplicit(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsExplicit(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsExplicit(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsExplicit(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsExplicit(void)::property;
}

uint64_t mlcore::ItemPropertyDatePlayed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDatePlayed(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDatePlayed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDatePlayed(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDatePlayed(void)::property;
}

uint64_t mlcore::ItemPropertyTotalTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTotalTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTotalTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTotalTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTotalTime(void)::property;
}

uint64_t mlcore::ItemPropertyTitle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTitle(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTitle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitle(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Genre>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::GenreTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

void mlcore::Transaction::~Transaction(mediaplatform::DatabaseConnection ***this)
{
  mediaplatform::DatabaseConnection::popTransaction(*this[6], *((unsigned __int8 *)this + 64));
  char v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void mediaplatform::DatabaseConnection::popTransaction(mediaplatform::DatabaseConnection *this, BOOL a2)
{
  int v2 = *((_DWORD *)this + 37);
  if (v2)
  {
    int v4 = v2 - 1;
    if (v4)
    {
      *((_DWORD *)this + 37) = v4;
      *((unsigned char *)this + 152) |= !a2;
    }
    else
    {
      if (a2) {
        a2 = *((unsigned char *)this + 152) == 0;
      }
      mediaplatform::DatabaseConnection::_internalEndTransaction(this, a2);
      *((_DWORD *)this + 37) = 0;
      *((unsigned char *)this + 152) = 0;
    }
  }
}

void mediaplatform::DatabaseConnection::_internalEndTransaction(mediaplatform::DatabaseConnection *this, int a2)
{
  if (a2)
  {
    unint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF788;
    uint64_t v4 = (uint64_t)&v3[1];
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF288;
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)operator new(0x38uLL);
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF7F8;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = (uint64_t)&v3[1];
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF2B0;
    p_shared_owners = (std::string *)&v3[1].__shared_owners_;
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external(p_shared_owners, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&p_shared_owners->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v3[2].__vftable = v9;
    }
  }
  if (*((unsigned char *)this + 145))
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    mediaplatform::DatabaseConnection::executeQueryStatement<int>(&v6, this, v4);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mediaplatform::DatabaseConnection::_compactPreparedStatementsCache(this);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_214DDC740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseConnection::_compactPreparedStatementsCache(mediaplatform::DatabaseConnection *this)
{
  int v2 = (long long *)*((void *)this + 37);
  unint64_t v3 = (long long *)*((void *)this + 38);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 1);
      if (!v4) {
        break;
      }
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t shared_owners = v4->__shared_owners_;
      std::__shared_weak_count::__release_weak(v4);
      if (shared_owners == -1) {
        break;
      }
      if (++v2 == v3)
      {
        int v2 = v3;
        goto LABEL_14;
      }
    }
    if (v2 != v3)
    {
      for (uint64_t i = v2 + 1; i != v3; ++i)
      {
        float v7 = (std::__shared_weak_count *)*((void *)i + 1);
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v8 = v7->__shared_owners_;
          std::__shared_weak_count::__release_weak(v7);
          if (v8 != -1)
          {
            long long v9 = *i;
            *(void *)uint64_t i = 0;
            *((void *)i + 1) = 0;
            unint64_t v10 = (std::__shared_weak_count *)*((void *)v2 + 1);
            long long *v2 = v9;
            if (v10) {
              std::__shared_weak_count::__release_weak(v10);
            }
            ++v2;
          }
        }
      }
    }
  }
LABEL_14:
  unint64_t v11 = (long long *)*((void *)this + 38);
  if (v2 != v11)
  {
    while (v11 != v2)
    {
      int v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      --v11;
    }
    *((void *)this + 38) = v2;
  }
}

void *mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mlcore::LocalLibrary *this, mediaplatform::DatabaseConnection *a2)
{
  v36[4] = *MEMORY[0x263EF8340];
  v35[0] = &unk_26C5C8C00;
  void v35[3] = v35;
  LODWORD(v36[0]) = 3;
  LODWORD(v34[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v25, (int *)v36, (uint64_t)v35, (int *)v34);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  LODWORD(v36[0]) = 5;
  LODWORD(v34[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v23, (int *)v36, (uint64_t)v35, (int *)v34);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  LODWORD(v36[0]) = 7;
  LODWORD(v34[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v21, (int *)v36, (uint64_t)v35, (int *)v34);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  LODWORD(v36[0]) = 9;
  LODWORD(v34[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v19, (int *)v36, (uint64_t)v35, (int *)v34);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  LODWORD(v36[0]) = 11;
  LODWORD(v34[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v17, (int *)v36, (uint64_t)v35, (int *)v34);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  v34[0] = &unk_26C5C8C58;
  v34[1] = this;
  v34[3] = v34;
  LODWORD(v36[0]) = -1;
  LODWORD(v33[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v15, "LocalizedStringSearch", (int *)v36, (uint64_t)v34, (int *)v33);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v33[0] = &unk_26C5C8CB0;
  v33[3] = v33;
  uint64_t v4 = (std::string *)operator new(0x60uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C98E0;
  std::string::basic_string[abi:ne180100]<0>(&v30, "HashtableLookupInt");
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)v36, (uint64_t)v33);
  mediaplatform::DatabaseFunction::DatabaseFunction(v4 + 1, &v30, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v36, 0);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v36);
  if (v31 < 0) {
    operator delete((void *)v30);
  }
  v14[0] = (const char *)&v4[1];
  v14[1] = (const char *)v4;
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, v14);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  *(void *)&long long v30 = &unk_26C5C8D08;
  unint64_t v32 = &v30;
  unint64_t v5 = (std::string *)operator new(0x60uLL);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C98E0;
  std::string::basic_string[abi:ne180100]<0>(&v27, "HashtableLookupInt64");
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)v36, (uint64_t)&v30);
  mediaplatform::DatabaseFunction::DatabaseFunction(v5 + 1, &v27, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v36, 2048);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v36);
  if (v28 < 0) {
    operator delete((void *)v27);
  }
  v13[0] = (const char *)&v5[1];
  v13[1] = (const char *)v5;
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, v13);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  v36[0] = &unk_26C5C8D60;
  v36[3] = v36;
  LODWORD(v27) = -1;
  int v10 = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v11, "HashtableLookupString", (int *)&v27, (uint64_t)v36, &v10);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)&long long v27 = &unk_26C5C8DB8;
  unint64_t v29 = &v27;
  int v10 = -1;
  int v7 = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v8, "HashtableLookupDouble", &v10, (uint64_t)&v27, &v7);
  mediaplatform::DatabaseConnection::registerDatabaseFunction(a2, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&v27);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v36);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&v30);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v33);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v34);
  return std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v35);
}

void sub_214DDCD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&a32);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100]((void *)(v36 - 88));
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&a36);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100]((void *)(v36 - 184));
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100]((void *)(v36 - 152));
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100]((void *)(v36 - 120));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void mediaplatform::DatabaseConnection::registerDatabaseFunction(mediaplatform::DatabaseConnection *a1, const char **a2)
{
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(a1);
  if ((*a2)[23] >= 0) {
    uint64_t v4 = *a2;
  }
  else {
    uint64_t v4 = *(const char **)*a2;
  }
  if (sqlite3_create_function_v2(*(sqlite3 **)a1, v4, *((_DWORD *)*a2 + 6), *((_DWORD *)*a2 + 16) | 1, (void *)*a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))mediaplatform::_DatabaseConnectionFunctionSQLiteCallback, 0, 0, 0))
  {
    int v24 = 31;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v25, &v24, (long long *)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v25);
  }
  uint64_t v6 = (char *)*((void *)a1 + 21);
  unint64_t v5 = *((void *)a1 + 22);
  if ((unint64_t)v6 < v5)
  {
    *(void *)uint64_t v6 = *a2;
    int v7 = a2[1];
    *((void *)v6 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6 + 16;
    *((void *)a1 + 21) = v6 + 16;
    goto LABEL_27;
  }
  long long v9 = (char *)*((void *)a1 + 20);
  uint64_t v10 = (v6 - v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v14 = (char *)operator new(16 * v13);
  uint64_t v15 = &v14[16 * v10];
  long long v16 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
  if (*((void *)&v16 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v9 = (char *)*((void *)a1 + 20);
    uint64_t v6 = (char *)*((void *)a1 + 21);
  }
  uint8x8_t v17 = &v14[16 * v13];
  uint64_t v8 = v15 + 16;
  if (v6 == v9)
  {
    *((void *)a1 + 20) = v15;
    *((void *)a1 + 21) = v8;
    *((void *)a1 + 22) = v17;
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  do
  {
    long long v18 = *((_OWORD *)v6 - 1);
    v6 -= 16;
    *((_OWORD *)v15 - 1) = v18;
    v15 -= 16;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
  }
  while (v6 != v9);
  unint64_t v19 = (char *)*((void *)a1 + 20);
  long long v9 = (char *)*((void *)a1 + 21);
  *((void *)a1 + 20) = v15;
  *((void *)a1 + 21) = v8;
  *((void *)a1 + 22) = v17;
  if (v9 != v19)
  {
    do
    {
      uint8x8_t v20 = (std::__shared_weak_count *)*((void *)v9 - 1);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      v9 -= 16;
    }
    while (v9 != v19);
    long long v9 = v19;
  }
  if (v9) {
LABEL_26:
  }
    operator delete(v9);
LABEL_27:
  *((void *)a1 + 21) = v8;
}

void sub_214DDD19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::exception a18)
{
}

void mediaplatform::DatabaseConnection::executeQueryStatement<int>(uint64_t *a1, mediaplatform::DatabaseConnection *a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a3 + 16))(__p, a3, 0);
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(a2);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)a2, (unsigned __int8 *)__p, &v9);
  uint64_t v6 = v9;
  unint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *a1 = v6;
    a1[1] = (uint64_t)v5;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *a1 = v9;
    a1[1] = 0;
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_214DDD298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::DatabaseConnection *mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(mediaplatform::DatabaseConnection *this)
{
  if (!*((unsigned char *)this + 144)) {
    mediaplatform::DatabaseConnection::open(this);
  }
  return this;
}

void sub_214DDD320(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mediaplatform::SQLCommitTransactionStatement::sql@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "COMMIT TRANSACTION");
}

void mediaplatform::SQLBeginTransactionStatement::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= 3)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    MEMORY[0x2166B2280](&__p, (&off_26422ED28)[v3]);
    uint64_t v4 = HIBYTE(v10);
    int v5 = SHIBYTE(v10);
    uint64_t v6 = v9;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    if (v5 < 0) {
      uint64_t v4 = v6;
    }
    if (v4)
    {
      mediaplatform::FormatString<std::string>(&v7, (std::string *)"BEGIN {0} TRANSACTION", (uint64_t)&__p);
      *a2 = v7;
      goto LABEL_8;
    }
  }
  MEMORY[0x2166B2280](a2, "BEGIN TRANSACTION");
LABEL_8:
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_214DDD404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatString<std::string>(std::string *a1, std::string *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string>(a2, a1, 0, &v3);
}

void sub_214DDD484(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  uint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    long long v27 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    long long v27 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    long long v27 = v9 + 2;
    int v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v17 = 0;
      long long v18 = v9 + 3;
      do
      {
        unint64_t v19 = v18;
        long long v27 = v18;
        uint64_t v17 = (v16 - 48) + 10 * v17;
        ++v18;
        int v21 = *v19;
        uint8x8_t v20 = (unsigned __int8 *)(v19 - 1);
        int v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      long long v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,std::string>::formatOptionsAtIndex<std::string>(v17);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v23, (const char **)&v27);
  if (v23[1]) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string>>();
  }
  uint64_t v12 = *a4;
  uint64_t v28 = v12;
  long long v29 = v23[0];
  long long v30 = v24;
  long long v31 = v25;
  uint64_t v32 = v26;
  if (*(char *)(v12 + 23) < 0) {
    unint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  unint64_t v14 = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1) <= v13) {
    unint64_t v14 = v13;
  }
  if ((_BYTE)v24) {
    unint64_t v13 = v14;
  }
  mediaplatform::FormatImplementation<std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (char *)a2;
  }
  else {
    uint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(v23, &v15[i], (uint64_t)&v28);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_214DDD6F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(void *a1, int *a2, uint64_t a3, int *a4)
{
  v12[4] = *MEMORY[0x263EF8340];
  char v8 = (std::string *)operator new(0x60uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C98E0;
  std::string::basic_string[abi:ne180100]<0>(__p, "SearchTermWeight");
  std::string::size_type v9 = *a2;
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  mediaplatform::DatabaseFunction::DatabaseFunction(v8 + 1, (long long *)__p, v9, (uint64_t)v12, *a4);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v8 + 1;
  a1[1] = v8;
}

void sub_214DDD800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

std::string *mediaplatform::DatabaseFunction::DatabaseFunction(std::string *this, long long *a2, std::string::size_type a3, uint64_t a4, int a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)&this[1].__r_.__value_.__l.__size_, a4);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = a5;
  return this;
}

void sub_214DDD8B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_0,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_0>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8C00;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(void *a1, char *a2, int *a3, uint64_t a4, int *a5)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = (std::string *)operator new(0x60uLL);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C98E0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string::size_type v11 = *a3;
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)v14, a4);
  mediaplatform::DatabaseFunction::DatabaseFunction(v10 + 1, (long long *)__p, v11, (uint64_t)v14, *a5);
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v10 + 1;
  a1[1] = v10;
}

void sub_214DDDA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_5,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_5>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8DB8;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_4,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_4>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8D60;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_3,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_3>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8D08;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_2,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_2>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8CB0;
}

uint64_t std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_1,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_1>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5C8C58;
  a2[1] = v2;
  return result;
}

void mediaplatform::DatabaseConnection::open(mediaplatform::DatabaseConnection *this)
{
  mediaplatform::File::File((mediaplatform::File *)&v1, (mediaplatform::DatabaseConnection *)((char *)this + 8));
}

void sub_214DDDEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a16);
  *(void *)(v22 - 64) = &unk_26C5BF318;
  std::unique_ptr<mediaplatform::File::FilePrivate>::reset[abi:ne180100]((uint64_t *)(v22 - 56));
  _Unwind_Resume(a1);
}

BOOL mediaplatform::File::exists(mediaplatform::FilePath **this)
{
  mediaplatform::FilePath::str(this[1], (uint64_t)__p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  int v2 = access((const char *)v1, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != -1;
}

uint64_t *std::unique_ptr<mediaplatform::File::FilePrivate>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  mediaplatform::SQLSelectStatement *result = 0;
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26C5BF338;
    int v2 = (void **)(v1 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x2166B26F0);
  }
  return result;
}

void *std::__function::__func<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0,std::allocator<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0>,void ()(mediaplatform::DatabaseConnection &)>::operator()(uint64_t a1, mediaplatform::DatabaseConnection *a2)
{
  return mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(*(mlcore::LocalLibrary **)(a1 + 8), a2);
}

BOOL mediaplatform::File::isReadable(mediaplatform::FilePath **this)
{
  mediaplatform::FilePath::str(this[1], (uint64_t)__p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  int v2 = access((const char *)v1, 4);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != -1;
}

BOOL mediaplatform::DatabaseConnection::isInMemoryDatabase(mediaplatform::DatabaseConnection *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ":memory:");
  mediaplatform::FilePath::FilePath(&v5, &__p);
  BOOL v2 = mediaplatform::FilePath::operator==((uint64_t)this + 8, (uint64_t)&v5);
  char v5 = &unk_26C5BF338;
  std::string v7 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v2;
}

void sub_214DDE1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL mediaplatform::FilePath::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 ***)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 != v2)
  {
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v6 = *(unsigned __int8 **)(v3 + 8);
      }
      std::string v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
      int v8 = (char)v7;
      if ((char)v7 < 0) {
        std::string v7 = v4[1];
      }
      if (v6 != v7) {
        break;
      }
      if (v8 >= 0) {
        long long v9 = (unsigned __int8 *)v4;
      }
      else {
        long long v9 = *v4;
      }
      if ((v5 & 0x80) != 0)
      {
        BOOL result = memcmp(*(const void **)v3, v9, *(void *)(v3 + 8)) == 0;
      }
      else if (*(unsigned char *)(v3 + 23))
      {
        uint64_t v10 = 0;
        uint64_t v11 = v5 - 1;
        do
        {
          int v12 = *(unsigned __int8 *)(v3 + v10);
          int v13 = v9[v10];
          BOOL result = v12 == v13;
        }
        while (v12 == v13 && v11 != v10++);
      }
      else
      {
        BOOL result = 1;
      }
      v3 += 24;
      v4 += 3;
      if (!result || v3 == v2) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

void mediaplatform::File::File(mediaplatform::File *this, const mediaplatform::FilePath *a2)
{
  *(void *)this = &unk_26C5BF318;
  operator new();
}

void sub_214DDE348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2166B26F0](v15, 0xA0C4030951706);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItemReactionPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemReactionPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyPersistentID(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPersistentID(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsFavoritedSongs(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsFavoritedSongs(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsFavoritedSongs(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsFavoritedSongs(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsFavoritedSongs(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocalConstraints(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyKeepLocalConstraints(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyKeepLocalConstraints(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::ItemPropertyIsMasteredForiTunes(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsMasteredForiTunes(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsMasteredForiTunes(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMasteredForiTunes(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsMasteredForiTunes(void)::property;
}

uint64_t mlcore::ItemPropertyHasCloudSyncSource(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasCloudSyncSource(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasCloudSyncSource(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudSyncSource(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasCloudSyncSource(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudGlobalID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudGlobalID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudGlobalID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudGlobalID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudGlobalID(void)::property;
}

uint64_t mlcore::ItemPropertyLongDescription(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLongDescription(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLongDescription(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLongDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLongDescription(void)::property;
}

uint64_t mlcore::ItemArtistPropertyStoreID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyStoreID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyStoreID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyStoreID(void)::property;
}

uint64_t mlcore::ArtistPropertyLikedState(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyLikedState(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyLikedState(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLikedState(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsOwner(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsOwner(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsOwner(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsOwner(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsOwner(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyKeepLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyKeepLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocal(void)::property;
}

uint64_t mlcore::ArtistPropertyStoreID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyStoreID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyStoreID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyStoreID(void)::property;
}

uint64_t mlcore::ItemPropertyLocation(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLocation(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLocation(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLocation(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLocation(void)::property;
}

uint64_t mlcore::ItemPropertySyncID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySyncID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySyncID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySyncID(void)::property;
}

uint64_t mlcore::ArtistPropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyName(void)::property;
}

void mlcore::EntityQueryResult::~EntityQueryResult(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C5C7470;
  char v2 = (std::__shared_weak_count *)this[33].__vftable;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[28].__vftable;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[26].__vftable;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[24].__vftable;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[21].__vftable;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  mlcore::QueryResult::~QueryResult(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26C5C7470;
  char v2 = (std::__shared_weak_count *)this[33].__vftable;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[28].__vftable;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[26].__vftable;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[24].__vftable;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[21].__vftable;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26C5C7470;
  char v2 = (std::__shared_weak_count *)this[33].__vftable;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[28].__vftable;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[26].__vftable;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[24].__vftable;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[21].__vftable;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  mlcore::QueryResult::~QueryResult(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::OrPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlcore::UnaryPredicate<int>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(void *)BOOL result = &unk_26C5C54E0;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(void *)BOOL result = &unk_26C5C54E0;
  *(void *)(result + 8) = a2;
  return result;
}

void *mlcore::LibraryView::filterPredicateForEntityClass@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  BOOL result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a1 + 8), a2);
  if (result)
  {
    uint64_t v5 = result[4];
    *a3 = result[3];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void *mlcore::EntityQueryResult::entityAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(void *)this + 16))(this);
  uint64_t v6 = mlcore::EntityQueryResult::persistentIDAtIndex(this, a2);
  uint64_t v7 = **((void **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(void *)(*((void *)this + 23) + 8) - v7) >> 3) <= a2) {
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v8 = v6;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v10, v7 + 216 * a2);
  v10[0] = &unk_26C5C4EE8;
  v10[26] = &unk_26C5C4F10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, v5, v8, v10);
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v10);
}

void sub_214DDECFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityQueryResult::persistentIDAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v2 = **((void **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(void *)(*((void *)this + 23) + 8) - v2) >> 3) <= a2) {
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = v2 + 216 * a2;
  uint64_t v4 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(void *)this + 16))(this);
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(v3, v5);
}

uint64_t mlcore::EntityQueryResult::entityClassAtIndex(mlcore::EntityQueryResult *this)
{
  return *((void *)this + 22);
}

void mlcore::EntityQuery::songsQuery(mlcore *a1)
{
  v3[6] = *MEMORY[0x263EF8340];
  uint64_t v1 = mlcore::ItemPropertyMediaType(a1);
  v3[0] = 0x40800000008;
  mlcore::CreateInPredicate<int>((uint64_t)&v2, v1, (int *)v3, 2);
}

void sub_214DDF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void **a22)
{
  a22 = (void **)&a11;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v25 = 24;
  while (1)
  {
    uint64_t v26 = *(std::__shared_weak_count **)(v23 - 88 + v25);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    v25 -= 16;
    if (v25 == -8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (a21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a21);
      }
      _Unwind_Resume(a1);
    }
  }
}

char *mlcore::PropertiesQuery::setSortDescriptors(char *result, char *a2)
{
  uint64_t v2 = result + 56;
  if (result + 56 != a2)
  {
    uint64_t v3 = result;
    uint64_t v5 = *(void *)a2;
    uint64_t v4 = *((void *)a2 + 1);
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)a2) >> 3);
    uint64_t v7 = *((void *)result + 7);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)result + 9) - v7) >> 3) < v6)
    {
      std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)result + 7);
      if (v6 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0x5555555555555556 * ((uint64_t)(*((void *)v3 + 9) - *((void *)v3 + 7)) >> 3);
      if (v8 <= v6) {
        unint64_t v8 = v6;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v3 + 9) - *((void *)v3 + 7)) >> 3) >= 0x555555555555555) {
        unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v9 = v8;
      }
      BOOL result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](v2, v9);
      uint64_t v10 = *((void *)v3 + 8);
      if (v5 != v4)
      {
        uint64_t v11 = *((void *)v3 + 8);
        do
        {
          *(void *)uint64_t v10 = &unk_26C5C5398;
          uint64_t v12 = *(void *)(v5 + 8);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v5 + 16);
          *(void *)(v10 + 8) = v12;
          v5 += 24;
          v10 += 24;
          v11 += 24;
        }
        while (v5 != v4);
      }
LABEL_22:
      *((void *)v3 + 8) = v10;
      return result;
    }
    uint64_t v13 = *((void *)result + 8);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v7) >> 3);
    if (v14 < v6)
    {
      uint64_t v15 = v5 + 8 * ((v13 - v7) >> 3);
      if (v13 != v7)
      {
        uint64_t v16 = v7 + 8;
        uint64_t v17 = 24 * v14;
        long long v18 = (uint64_t *)(v5 + 8);
        do
        {
          uint64_t v19 = *v18;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v18 + 2);
          *(void *)uint64_t v16 = v19;
          v16 += 24;
          v18 += 3;
          v17 -= 24;
        }
        while (v17);
        uint64_t v7 = *((void *)result + 8);
      }
      uint64_t v20 = v7;
      if (v15 != v4)
      {
        uint64_t v21 = v7;
        uint64_t v20 = v7;
        do
        {
          *(void *)uint64_t v20 = &unk_26C5C5398;
          uint64_t v22 = *(void *)(v15 + 8);
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v15 + 16);
          *(void *)(v20 + 8) = v22;
          v15 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v15 != v4);
      }
      uint64_t v10 = v20;
      goto LABEL_22;
    }
    if (v5 != v4)
    {
      do
      {
        uint64_t v23 = *(void *)(v5 + 8);
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(v5 + 16);
        *(void *)(v7 + 8) = v23;
        v5 += 24;
        v7 += 24;
      }
      while (v5 != v4);
      uint64_t v13 = *((void *)result + 8);
    }
    if (v13 != v7)
    {
      uint64_t v24 = v13 - 24;
      uint64_t v25 = (uint64_t (***)(void))(v13 - 24);
      uint64_t v26 = (uint64_t (***)(void))(v13 - 24);
      do
      {
        long long v27 = *v26;
        v26 -= 3;
        BOOL result = (char *)(*v27)(v25);
        v24 -= 24;
        BOOL v28 = v25 == (uint64_t (***)(void))v7;
        uint64_t v25 = v26;
      }
      while (!v28);
    }
    *((void *)v3 + 8) = v7;
  }
  return result;
}

void std::vector<mlcore::SortDescriptor>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 24;
      unint64_t v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        unint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v1;
        unint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(void *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t v8 = operator new(0x98uLL);
  BOOL v9 = v8;
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C5C9FE0;
  uint64_t v10 = v8 + 3;
  v11[0] = a3;
  v11[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::EntityQuery::EntityQuery(v8 + 3, a2, v11);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_214DDF50C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t mlcore::StandardSongSortDescriptors(mlcore *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  return mlcore::StandardSongSortDescriptors(void)::sortDescriptors;
}

void sub_214DDF6E8(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void mlcore::CreateInPredicate<int>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  if (a4)
  {
    uint64_t v5 = 4 * a4;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v7, *a3, *a3);
      ++a3;
      v5 -= 4;
    }
    while (v5);
  }
  unint64_t v6 = operator new(0x68uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26C5CA018;
  mlcore::InPredicate<int>::InPredicate();
}

void sub_214DDF7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<int>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5C4668;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*(void *)(a3 + 24) >= 0x1F5uLL) {
    mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>();
  }
  if (v4 != (void *)a3)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
    for (std::string::size_type i = *(uint64_t ***)(a3 + 16); i; std::string::size_type i = (uint64_t **)*i)
    {
      unint64_t v6 = operator new(0x18uLL);
      *(void *)unint64_t v6 = 0;
      unint64_t v7 = *((int *)i + 4);
      v6[4] = v7;
      *((void *)v6 + 1) = v7;
      inserted = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__node_insert_multi_prepare((uint64_t)v4, v7, v6 + 4);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v4, v6, inserted);
    }
  }
  return a1;
}

void sub_214DDF900(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      uint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (std::string::size_type i = *v16; *v16; std::string::size_type i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            uint64_t v16 = (uint64_t **)i;
          }
          else
          {
            uint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                uint64_t v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              std::__shared_weak_count *v16 = v24;
              *uint64_t v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              uint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  BOOL v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    BOOL result = v28;
    BOOL v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *mlcore::EntityQuery::EntityQuery(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  v6[0] = *a3;
  v6[1] = (uint64_t)v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    mlcore::PropertiesQuery::PropertiesQuery((uint64_t)a1, a2, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    mlcore::PropertiesQuery::PropertiesQuery((uint64_t)a1, a2, v6);
  }
  *a1 = &unk_26C5C44C8;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  return a1;
}

void mlcore::EntityQuery::_perform(mlcore::EntityQuery *a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a2;
  uint64_t v4 = *(mlcore::DeviceLibraryView **)(*a2 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v2 = (void *)*a2;
  }
  uint64_t v5 = v2[6];
  unint64_t v6 = *(mediaplatform::DatabaseConnection **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v2 = (void *)*a2;
  }
  float v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v9 = (std::__shared_weak_count *)v2[3];
  unint64_t v32 = (uint64_t *)v2[2];
  BOOL v33 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v34 = v2;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::EntityRevisionController::latestRevisionNumber((mlcore::EntityRevisionController *)&v32);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  v42[2] = (uint64_t)v4;
  unint64_t v43 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 128))(&v44);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v10 = v44;
  unint64_t v40 = &unk_26C5BEFF0;
  memset(v41, 0, sizeof(v41));
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(v41, *(void **)(v44 + 40), *(void **)(v44 + 48), (uint64_t)(*(void *)(v44 + 48) - *(void *)(v44 + 40)) >> 4);
  mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(v42, v6, (unsigned __int8 *)(v10 + 8), (uint64_t)&v40);
  unint64_t v40 = &unk_26C5BEFF0;
  unint64_t v32 = v41;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  int v39 = -1;
  int v38 = -1;
  v37[2] = 0;
  v37[3] = 0;
  mlcore::DeviceLibraryView::library(v4, v37);
  uint64_t v12 = *(void *)(v37[0] + 152);
  uint64_t v11 = *(void *)(v37[0] + 160);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v32 = 0;
  BOOL v33 = 0;
  int v34 = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)&v32, *(void *)(v12 + 280), *(void *)(v12 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v12 + 288) - *(void *)(v12 + 280)) >> 3));
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, *(long long **)(v12 + 304), *(long long **)(v12 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 312) - *(void *)(v12 + 304)) >> 3));
  if (*(char *)(v12 + 351) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v12 + 328), *(void *)(v12 + 336));
  }
  else {
    std::string v36 = *(std::string *)(v12 + 328);
  }
  uint64_t v31 = mlcore::EntityQuery::_sectionProperty(a1);
  BOOL v30 = v31 != 0;
  int v29 = -1;
  long long v28 = 0uLL;
  long long v27 = 0uLL;
  if (v31)
  {
    mlcore::LocalizedSectionsInfo::allLocalizedHeaderTitles(&v32, (std::vector<std::string> *)&__x);
    uint64_t v13 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v13 + 8) = 0u;
    *(void *)uint64_t v13 = &unk_26C5CB438;
    *((void *)v13 + 3) = 0;
    *((_OWORD *)v13 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v13 + 1, (long long *)__x.__r_.__value_.__l.__data_, (long long *)__x.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__x.__r_.__value_.__l.__size_ - __x.__r_.__value_.__r.__words[0]) >> 3));
    *(void *)&long long v14 = v13 + 24;
    *((void *)&v14 + 1) = v13;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    long long v28 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    std::string __p = &__x;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v16 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v16 + 8) = 0u;
    *(void *)uint64_t v16 = &unk_26C5CB438;
    *((void *)v16 + 3) = 0;
    *((_OWORD *)v16 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v16 + 1, (long long *)v35.__r_.__value_.__l.__data_, (long long *)v35.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
    *(void *)&long long v17 = v16 + 24;
    *((void *)&v17 + 1) = v16;
    uint8x8_t v18 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    long long v27 = v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    unint64_t v19 = (std::vector<std::string> *)v28;
    uint8x8_t v20 = *(const std::string **)(v28 + 8);
    int v29 = -1431655765 * (((unint64_t)v20 - *(void *)v28) >> 3) + 1;
    mlcore::_LocalizedString((mlcore *)&__x, @"NUMERIC_SECTION_HEADER_TITLE");
    v21.__i_ = v20;
    std::vector<std::string>::insert(v19, v21, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = (std::vector<std::string> *)v27;
    unint64_t v23 = *(const std::string **)(v27 + 8);
    mlcore::_LocalizedString((mlcore *)&__x, @"NUMERIC_SECTION_INDEX_TITLE");
    v24.__i_ = v23;
    std::vector<std::string>::insert(v22, v24, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_214DE0A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo((void **)&a47);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  long long v63 = *(std::__shared_weak_count **)(v61 - 232);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  int64_t v64 = *(std::__shared_weak_count **)(v61 - 200);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a1);
}

uint64_t *std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  uint64_t v7 = a2[1];
  while (1)
  {
    uint64_t v8 = v7 + v4;
    if (v5 + v4 == v6) {
      break;
    }
    BOOL result = (uint64_t *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v8 - 216, v5 + v4 - 216);
    uint64_t *result = (uint64_t)&unk_26C5C4EE8;
    *(void *)(v7 + v4 - 8) = &unk_26C5C4F10;
    v4 -= 216;
  }
  a2[1] = v8;
  uint64_t v9 = *v3;
  uint64_t *v3 = v8;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  uint64_t v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<mlcore::PropertyCache>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 216);
    *(void *)(a1 + 16) = i - 216;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::__split_buffer<std::string>::pointer begin = this->__begin_;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)__position.__i_ - (char *)begin;
    int64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v14 > v11) {
      unint64_t v11 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v11;
    }
    v32.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    std::__split_buffer<std::string>::pointer v18 = (std::__split_buffer<std::string>::pointer)(v15 + 24 * v13);
    v32.__first_ = (std::__split_buffer<std::string>::pointer)v15;
    v32.__begin_ = v18;
    v32.__end_ = v18;
    v32.__end_cap_.__value_ = (std::string *)(v15 + 24 * v16);
    if (v13 == v16)
    {
      if (v12 < 1)
      {
        if (begin == __position.__i_) {
          unint64_t v20 = 1;
        }
        else {
          unint64_t v20 = 2 * v13;
        }
        v33.__end_cap_.__value_ = p_end_cap;
        std::vector<std::string>::const_iterator v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
        std::__split_buffer<std::string>::pointer v23 = v32.__begin_;
        if (v32.__end_ == v32.__begin_)
        {
          int64x2_t v29 = vdupq_n_s64((unint64_t)v32.__begin_);
          uint64_t v25 = &v21[v20 >> 2];
        }
        else
        {
          int64_t v24 = v32.__end_ - v32.__begin_;
          uint64_t v25 = &v21[(v20 >> 2) + v24];
          uint64_t v26 = 24 * v24;
          long long v27 = &v21[v20 >> 2];
          do
          {
            long long v28 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            ++v27;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            ++v23;
            v26 -= 24;
          }
          while (v26);
          int64x2_t v29 = *(int64x2_t *)&v32.__begin_;
        }
        BOOL v30 = v32.__end_cap_.__value_;
        v33.__first_ = v32.__first_;
        v32.__first_ = v21;
        v32.__begin_ = &v21[v20 >> 2];
        *(int64x2_t *)&v33.__begin_ = v29;
        v32.__end_ = v25;
        v32.__end_cap_.__value_ = &v21[v22];
        v33.__end_cap_.__value_ = v30;
        std::__split_buffer<std::string>::~__split_buffer(&v33);
        std::__split_buffer<std::string>::pointer v18 = v32.__end_;
      }
      else
      {
        uint64_t v19 = v13 + 2;
        if (v13 >= -1) {
          uint64_t v19 = v13 + 1;
        }
        v18 -= v19 >> 1;
        v32.__begin_ = v18;
        v32.__end_ = v18;
      }
    }
    long long v31 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    v18->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v31;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    ++v32.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(this, &v32, (std::vector<std::string>::pointer)__position.__i_);
    std::__split_buffer<std::string>::~__split_buffer(&v32);
  }
  else if (__position.__i_ == end)
  {
    long long v17 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v17;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(__position.__i_->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__position.__i_->__r_.__value_.__l.__data_);
    }
    long long v9 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v9;
    *((unsigned char *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)this;
}

void sub_214DE11A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer v3 = __p;
  std::__split_buffer<std::string>::pointer begin = __v->__begin_;
  uint64_t p_end_cap = &this->__end_cap_;
  __v->__begin_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<std::string>::pointer v9 = __v->__end_;
  std::__split_buffer<std::string>::pointer v17 = v9;
  std::__split_buffer<std::string>::pointer v18 = v9;
  v15[0] = p_end_cap;
  v15[1] = &v17;
  v15[2] = &v18;
  if (end != v3)
  {
    do
    {
      long long v10 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v9;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      ++v3;
    }
    while (v3 != end);
    std::__split_buffer<std::string>::pointer v18 = v9;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  __v->__end_ = v9;
  unint64_t v11 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v11;
  uint64_t v12 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v12;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void mlcore::_LocalizedString(mlcore *this, const __CFString *a2)
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.MediaLibraryCore");
  CFStringRef v5 = CFBundleCopyLocalizedString(BundleWithIdentifier, a2, a2, @"MediaLibraryCore");
  CFStringRef v6 = v5;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  if (v5)
  {
    CFIndex Length = CFStringGetLength(v5);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      CFIndex v9 = MaximumSizeForEncoding + 1;
      long long v10 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(v6, v10, v9, 0x8000100u)) {
        MEMORY[0x2166B2280](this, v10);
      }
      free(v10);
    }
  }
  CFRelease(v6);
}

void sub_214DE1380(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::EntityQuery::_SQLResultColumnExpressions(uint64_t a1@<X0>, const mlcore::EntityClass *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  mlcore::SQLColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), a2, &v54);
  __n128 v6 = v54;
  unint64_t v7 = a3[2];
  uint64_t v8 = (__n128 *)a3[1];
  if ((unint64_t)v8 >= v7)
  {
    __n128 v49 = v54;
    uint64_t v10 = ((uint64_t)v8 - *a3) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v7 - *a3;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v59 = a3 + 2;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
    unint64_t v15 = &v14[16 * v10];
    int v55 = v14;
    uint64_t v56 = v15;
    __n128 v58 = &v14[16 * v16];
    *(__n128 *)unint64_t v15 = v49;
    char v57 = v15 + 16;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v55);
    CFIndex v9 = (__n128 *)a3[1];
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v55);
  }
  else
  {
    __n128 *v8 = v54;
    CFIndex v9 = v8 + 1;
  }
  a3[1] = v9;
  uint64_t v17 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), v6);
  std::__split_buffer<std::string>::pointer v18 = *(uint64_t **)(a1 + 104);
  uint64_t v19 = *(uint64_t **)(a1 + 112);
  if (v18 != v19)
  {
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *v18;
      if (*v18 != v20)
      {
        uint64_t v22 = (std::__shared_weak_count *)*((void *)a2 + 1);
        uint64_t v53 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(__n128 *__return_ptr))(*(void *)v21 + 96))(&v54);
        __n128 v23 = v54;
        __n128 v54 = 0uLL;
        uint64_t v25 = (__n128 *)a3[1];
        unint64_t v24 = a3[2];
        if ((unint64_t)v25 >= v24)
        {
          __n128 v50 = v23;
          uint64_t v26 = ((uint64_t)v25 - *a3) >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - *a3;
          if (v28 >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          uint64_t v59 = a3 + 2;
          BOOL v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v29);
          long long v31 = &v30[16 * v26];
          int v55 = v30;
          uint64_t v56 = v31;
          __n128 v58 = &v30[16 * v32];
          *(__n128 *)long long v31 = v50;
          char v57 = v31 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v55);
          uint64_t v33 = a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v55);
          int v34 = (std::__shared_weak_count *)v54.n128_u64[1];
          a3[1] = v33;
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
        }
        else
        {
          *uint64_t v25 = v23;
          a3[1] = v25 + 1;
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  uint64_t v35 = mlcore::EntityQuery::_sectionProperty((mlcore::EntityQuery *)a1);
  if (v35)
  {
    std::string v36 = (std::__shared_weak_count *)*((void *)a2 + 1);
    std::exception v52 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(__n128 *__return_ptr))(*(void *)v35 + 96))(&v54);
    __n128 v37 = v54;
    __n128 v54 = 0uLL;
    int v39 = (__n128 *)a3[1];
    unint64_t v38 = a3[2];
    if ((unint64_t)v39 >= v38)
    {
      __n128 v51 = v37;
      uint64_t v40 = ((uint64_t)v39 - *a3) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = v38 - *a3;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      uint64_t v59 = a3 + 2;
      uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v43);
      long long v45 = &v44[16 * v40];
      int v55 = v44;
      uint64_t v56 = v45;
      __n128 v58 = &v44[16 * v46];
      *(__n128 *)long long v45 = v51;
      char v57 = v45 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v55);
      uint64_t v47 = a3[1];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v55);
      long long v48 = (std::__shared_weak_count *)v54.n128_u64[1];
      a3[1] = v47;
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
    }
    else
    {
      __n128 *v39 = v37;
      a3[1] = v39 + 1;
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
  }
}

void sub_214DE1700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void **a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::_resultPropertiesToFetch(mlcore::EntityQuery *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  if (v8) {
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v8);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  CFStringRef v5 = (uint64_t *)*((void *)this + 14);
  while (v4 != v5)
  {
    uint64_t v7 = *v4;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v7);
    ++v4;
  }
  uint64_t v6 = mlcore::EntityQuery::_sectionProperty(this);
  if (v6)
  {
    uint64_t v7 = v6;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v7);
  }
}

void sub_214DE1870(_Unwind_Exception *a1)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  std::vector<std::string>::pointer v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
  {
    return mlcore::ItemPropertyTitleOrderSection(v3);
  }
  else
  {
    uint64_t v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
    if (v4 == a2)
    {
      return mlcore::ItemPropertyAlbumOrderSection(v4);
    }
    else
    {
      HasArtist = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
      if (HasArtist == a2 || (HasArtist = (mlcore *)mlcore::ItemPropertyHasArtist(HasArtist), HasArtist == a2))
      {
        return mlcore::ItemPropertyArtistOrderSection(HasArtist);
      }
      else
      {
        uint64_t v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(HasArtist);
        if (v6 == a2)
        {
          return mlcore::ItemPropertyComposerOrderSection(v6);
        }
        else
        {
          uint64_t v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
          if (v7 == a2)
          {
            return mlcore::ItemPropertyGenreOrderSection(v7);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
}

uint64_t mlcore::ItemPropertyTitleOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTitleOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    std::vector<std::string>::pointer v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTitleOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitleOrder(void)::property;
}

uint64_t mlcore::ItemPropertyTitleOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTitleOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    std::vector<std::string>::pointer v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTitleOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitleOrderSection(void)::property;
}

uint64_t mlcore::EntityQuery::_sectionProperty(mlcore::EntityQuery *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (*((void *)this + 8) == v1) {
    return 0;
  }
  std::vector<std::string>::pointer v3 = *(const void **)(v1 + 8);
  if ((*(unsigned int (**)(const void *))(*(void *)v3 + 88))(v3))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 24))(v4);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 8) + 144))(*(void *)(v5 + 8), v5);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v4 + 16))(v4);
      v10[0] = 0;
      v10[1] = 0;
      return mlcore::GetForeignProperty<int>(v8, v7, v10);
    }
  }
  else
  {
    CFIndex v9 = *(uint64_t (**)(void))(**((void **)this + 1) + 144);
    return v9();
  }
  return result;
}

void mlcore::SQLColumnNameFromEntityPrimaryKey(mlcore *this@<X0>, const mlcore::EntityClass *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(mlcore *, const mlcore::EntityClass *))(*(void *)this + 88))(this, a2);
  (*(void (**)(void *__return_ptr))(*(void *)v5 + 24))(v8);
  uint64_t v6 = (long long *)v8[0];
  uint64_t v7 = (*(uint64_t (**)(mlcore *))(*(void *)this + 88))(this);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a3, v6, (long long *)(v7 + 8));
  CFIndex v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_214DE1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlcore::Section>::__swap_out_circular_buffer(const std::string::value_type ***a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (const std::string::value_type **)a2[1];
  *(void *)&long long v19 = v6;
  *((void *)&v19 + 1) = v6;
  long long v18 = v19;
  v16[0] = a1 + 2;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (v5 != v4)
  {
    do
    {
      uint64_t v7 = (std::string *)(v6 - 6);
      uint64_t v8 = v5 - 6;
      if (*((char *)v5 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(v5 - 6), (std::string::size_type)*(v5 - 5));
        uint64_t v10 = (const std::string::value_type **)*((void *)&v19 + 1);
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        *(v6 - 4) = *(v5 - 4);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
        uint64_t v10 = v6;
      }
      int v11 = *((_DWORD *)v5 - 2);
      *(_OWORD *)(v6 - 3) = *(_OWORD *)(v5 - 3);
      *((_DWORD *)v6 - 2) = v11;
      uint64_t v6 = v10 - 6;
      *((void *)&v19 + 1) = v10 - 6;
      v5 -= 6;
    }
    while (v8 != v4);
  }
  char v17 = 1;
  uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  a2[1] = v6;
  unint64_t v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  unint64_t v14 = a1[1];
  a1[1] = (const std::string::value_type **)a2[2];
  a2[2] = v14;
  unint64_t v15 = a1[2];
  a1[2] = (const std::string::value_type **)a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void sub_214DE1DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::vector<mlcore::Section>::__construct_one_at_end[abi:ne180100]<mlcore::Section const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(_DWORD *)(v4 + 40) = *((_DWORD *)a2 + 10);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_214DE1E64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    std::vector<std::string>::pointer v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 56)
  {
    long long v5 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    long long v5 = (void **)(i - 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      v3 += 48;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t std::__split_buffer<mlcore::Section>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100](void ***result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x2166B26F0);
  }
  return result;
}

void std::shared_ptr<std::vector<mlcore::PropertyCache>>::shared_ptr[abi:ne180100]<std::vector<mlcore::PropertyCache>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_214DE213C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100](void ***result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x2166B26F0);
  }
  return result;
}

void mlcore::LocalizedSectionsInfo::allLocalizedHeaderTitles(uint64_t **this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  uint64_t v3 = *this;
  char v17 = this[1];
  if (*this != v17)
  {
    uint64_t p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      uint64_t v20 = *v3;
      memset(&v21, 0, sizeof(v21));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, (long long *)v3[1], (long long *)v3[2], 0xAAAAAAAAAAAAAAABLL * ((v3[2] - v3[1]) >> 3));
      memset(&v22, 0, sizeof(v22));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (long long *)v3[4], (long long *)v3[5], 0xAAAAAAAAAAAAAAABLL * ((v3[5] - v3[4]) >> 3));
      memset(&v19, 0, sizeof(v19));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (long long *)v22.__r_.__value_.__l.__data_, (long long *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
      std::string::size_type v4 = v19.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >= 1)
      {
        std::vector<std::string>::pointer end = a2->__end_;
        int64_t v6 = (int64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) / 24;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)p_end_cap - (void)end) >> 3)) >= v6)
        {
          if (v6 <= 0)
          {
            std::string::size_type v11 = v19.__r_.__value_.__r.__words[0] + 24 * v6;
            std::vector<std::string>::__move_range(a2, a2->__end_, a2->__end_, &end[v6]);
            while (v4 != v11)
            {
              std::string::operator=(end, (const std::string *)v4);
              v4 += 24;
              ++end;
            }
          }
          else
          {
            a2->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, a2->__end_);
          }
        }
        else
        {
          unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
          unint64_t v8 = v7 + v6;
          if (v7 + v6 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a2->__begin_) >> 3) > v8) {
            unint64_t v8 = 0x5555555555555556 * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a2->__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a2->__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v9 = v8;
          }
          __v.__end_cap_.__value_ = p_end_cap;
          if (v9) {
            unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v12 = (std::string *)(v9 + 24 * v7);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
          __v.__begin_ = v12;
          __v.__end_ = v12;
          __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
          uint64_t v13 = 3 * v6;
          unint64_t v14 = &v12[v6];
          uint64_t v15 = 8 * v13;
          do
          {
            if (*(char *)(v4 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
            }
            else
            {
              long long v16 = *(_OWORD *)v4;
              v12->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
              *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v16;
            }
            ++v12;
            v4 += 24;
            v15 -= 24;
          }
          while (v15);
          __v.__end_ = v14;
          std::vector<std::string>::__swap_out_circular_buffer(a2, &__v, end);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
      }
      __v.__first_ = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v3 += 7;
    }
    while (v3 != v17);
  }
}

void sub_214DE2488(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__split_buffer<std::string> *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  v21->__begin_ = v22;
  a21 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  mlcore::LocalizedSectionHeader::~LocalizedSectionHeader((mlcore::LocalizedSectionHeader *)&a14);
  a14 = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

sqlite3_int64 mlcore::EntityRevisionController::latestRevisionNumber(mlcore::EntityRevisionController *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(mediaplatform::DatabaseConnection ***)(v1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlcore::DeviceLibraryView::checkoutReader(*(mlcore::DeviceLibraryView **)this, __p);
    uint64_t v2 = (mediaplatform::DatabaseConnection **)__p[0];
    uint64_t v3 = (std::__shared_weak_count *)__p[1];
  }
  std::string::size_type v4 = *v2;
  std::string::basic_string[abi:ne180100]<0>(__p, "SELECT MAX(revision) FROM entity_revision");
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(v4);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)v4, (unsigned __int8 *)__p, &v13);
  uint64_t v6 = v13;
  long long v5 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    uint64_t v11 = v6;
    uint64_t v12 = v5;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    uint64_t v11 = v13;
    uint64_t v12 = 0;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sqlite3_int64 v7 = mediaplatform::DatabaseResult<long long>::valueForFirstRowAndColumn(&v11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v7;
}

void sub_214DE25F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDiscNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDiscNumber(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDiscNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDiscNumber(void)::property;
}

void *std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = a1[1];
    uint64_t v7 = 24 * a3;
    unint64_t v8 = (uint64_t *)(a2 + 8);
    uint64_t v9 = v6;
    do
    {
      *(void *)uint64_t v9 = &unk_26C5C5398;
      uint64_t v10 = *v8;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v8 + 2);
      *(void *)(v9 + 8) = v10;
      v9 += 24;
      v8 += 3;
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
    a1[1] = v9;
  }
  return a1;
}

void sub_214DE2758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyMaximumItemTrackNumber(void)::$_0 &&>>()
{
}

void sub_214DE28E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyTrackNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTrackNumber(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTrackNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTrackNumber(void)::property;
}

uint64_t mlcore::ItemPropertyItemArtistOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyItemArtistOrder(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyItemArtistOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistOrder(void)::property;
}

uint64_t mlcore::InPredicate<long long>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5C46C0;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::size_type v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*(void *)(a3 + 24) >= 0x1F5uLL) {
    mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>();
  }
  if (v4 != (void *)a3)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
    for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
    {
      uint64_t v6 = operator new(0x18uLL);
      void *v6 = 0;
      unint64_t v7 = i[2];
      uint64_t v6[2] = v7;
      v6[1] = v7;
      inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v4, v7, v6 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v4, v6, inserted);
    }
  }
  return a1;
}

void sub_214DE2B0C(_Unwind_Exception *a1)
{
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      long long v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            long long v16 = i;
          }
          else
          {
            unint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                unint64_t v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              void *v16 = v24;
              *uint64_t v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              long long v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      uint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    __n128 result = v28;
    uint64_t v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyAlbumCount(void)::$_0 &&>>()
{
}

void sub_214DE30E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AlbumPropertyArtistPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyArtistPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyArtistPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyArtistPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyEpisodeCount(void)::$_0 &&>>()
{
}

void sub_214DE3304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyItemArtistPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyItemArtistPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyItemArtistPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLibraryItemCount(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214DE3640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyItemCount(void)::$_0 &&>>()
{
}

void sub_214DE3858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAlbumArtistPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAlbumArtistPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAlbumArtistPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumArtistPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
}

void sub_214DE3A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyLatestItemDateAdded(void)::$_0 &&>>()
{
}

void sub_214DE3C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::GenrePropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::GenrePropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::GenrePropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyPersistentID(void)::property;
}

uint64_t mlcore::AlbumPropertyGenrePersistentID(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyGenrePersistentID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyGenrePersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGenrePersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGenrePersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenrePersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenrePersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyStoreID(void)::$_0 &&>>()
{
}

void sub_214DE3F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStorePlaylistID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStorePlaylistID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStorePlaylistID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaylistID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorePlaylistID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPreOrderItemCount(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214DE42F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsPreorder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsPreorder(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsPreorder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPreorder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPreorder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyItemCount(void)::$_0 &&>>()
{
}

void sub_214DE457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyStoreDownloadableItemCount(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214DE485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsStoreRedownloadable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsStoreRedownloadable(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsStoreRedownloadable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsStoreRedownloadable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsStoreRedownloadable(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLibraryTracksItemCount(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214DE4C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyVolumeNormalization(void)::$_0 &&>>()
{
}

void sub_214DE4E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyVolumeNormalization(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyVolumeNormalization(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyVolumeNormalization(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyVolumeNormalization(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyVolumeNormalization(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDateDownloaded(void)::$_0 &&>>()
{
}

void sub_214DE5070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::$_0 &&>>()
{
}

void sub_214DE5244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDateDownloaded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDateDownloaded(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDateDownloaded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateDownloaded(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
}

void sub_214DE5480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
}

void sub_214DE5654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyComposerPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyComposerPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyComposerPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComposerPersistentID(void)::property;
}

uint64_t mlcore::ComposerPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
}

void sub_214DE58F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(void *a1, uint64_t a2, int a3, uint64_t a4, long long *a5)
{
  unint64_t v10 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(void *)unint64_t v10 = &unk_26C5CADA8;
  long long v13 = *a5;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  *a5 = 0u;
  uint64_t v12 = v11;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v10 + 24), a2, a3, a4, (uint64_t *)&v13, 0);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *a1 = v10 + 24;
  a1[1] = v10;
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(void *a1, uint64_t a2, int a3, long long *a4)
{
  float v8 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)float v8 = &unk_26C5CADA8;
  long long v11 = *a4;
  BOOL v9 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  *a4 = 0u;
  unint64_t v10 = v9;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v8 + 24), a2, a3, 0, (uint64_t *)&v11, 0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

uint64_t mlcore::PropertiesQuery::PropertiesQuery(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a3[1];
  v7[0] = *a3;
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = 0uLL;
  mlcore::RangeQuery::RangeQuery(a1, a2, v7, &v6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_26C5C5DE0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return a1;
}

uint64_t mlcore::AggregateFunctionQuery::AggregateFunctionQuery(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v10 = (std::__shared_weak_count *)a5[1];
  v13[0] = *a5;
  v13[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = 0uLL;
  mlcore::RangeQuery::RangeQuery(a1, a2, v13, &v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(void *)a1 = &unk_26C5C7FF8;
  *(_DWORD *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = a6;
  return a1;
}

uint64_t mlcore::RangeQuery::RangeQuery(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v7 = *a3;
  long long v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C5C84C0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = &unk_26C5C4328;
  *(_OWORD *)(a1 + 32) = *a4;
  return a1;
}

uint64_t mlcore::ItemPropertyDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDateAdded(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateAdded(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyEpisodeCount(void)::$_0 &&>>()
{
}

void sub_214DE5E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AlbumPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    int8x8_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyAlbumLikeState(mlcore *this)
{
  char v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  uint64_t v2 = mlcore::AlbumPropertyLikedState(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyAlbumPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAlbumPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAlbumPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumPersistentID(void)::property;
}

uint64_t mlcore::AlbumPropertyLikedState(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyLikedState(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyLikedState(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLikedState(void)::property;
}

uint64_t mlcore::AlbumPropertyCopyright(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyCopyright(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyCopyright(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCopyright(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCopyright(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCopyright(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCopyright(void)::property;
}

uint64_t mlcore::AlbumPropertyDateReleased(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyDateReleased(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyDateReleased(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDateReleased(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDateReleased(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateReleased(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateReleased(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemCollectionDescription(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyCollectionDescription(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyCollectionDescription(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCollectionDescription(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCollectionDescription(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCollectionDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCollectionDescription(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyHasTitle(void)::$_0 &&>>()
{
}

void sub_214DE63F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AlbumPropertyRepresentativeItemMediaType(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyMediaType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::AlbumPropertyOrder(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyAlbumOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyAlbumOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAlbumOrder(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAlbumOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumOrder(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemAvailableArtworkToken(mlcore *this)
{
  char v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyAvailableArtworkToken(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::AlbumPropertyRepresentativeItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    int8x8_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::ItemArtistPropertyFetchableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  char v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  unint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)unint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  uint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  long long v13 = 0;
  long long v14 = 0u;
  long long v16 = (void **)&v13;
  char v17 = 0;
  long long v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  long long v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    long long v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214DE67C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    unint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ItemArtistPropertyAvailableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  char v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  unint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)unint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  uint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  long long v13 = 0;
  long long v14 = 0u;
  long long v16 = (void **)&v13;
  char v17 = 0;
  long long v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  long long v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    long long v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214DE6A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    unint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ItemArtistPropertyFetchableArtworkSourceType(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  char v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  unint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)unint64_t v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  uint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  long long v13 = 0;
  long long v14 = 0u;
  long long v16 = (void **)&v13;
  char v17 = 0;
  long long v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  long long v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    long long v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return Foreign;
}

void sub_214DE6C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    unint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ItemArtistPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyPersistentID(void)::property;
}

void *mlcore::LocalizedSortingDetails::LocalizedSortingDetails(void *a1, long long **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

__n128 mlcore::Library::createLibrary@<Q0>(long long **a1@<X0>, uint64_t a2@<X1>, const mlcore::LanguageResources *a3@<X2>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0xE8uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C5CA478;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  mlcore::DeviceLibrary::DeviceLibrary((uint64_t)(v8 + 3), a1, (long long *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_214DE6E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DeviceLibrary::DeviceLibrary(uint64_t a1, long long **a2, long long *a3, const mlcore::LanguageResources *a4)
{
  *(void *)mlcore::Library::Library(a1, a3, a2) = &unk_26C5C4D08;
  long long v8 = operator new(0x1A8uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C5CA328;
  mediaplatform::FilePath::FilePath(&v10, (std::string *)a3);
  mlcore::LocalLibrary::LocalLibrary((mlcore::LocalLibrary *)(v8 + 3), a2, (const mediaplatform::FilePath *)&v10, a4);
  unint64_t v10 = &unk_26C5BF338;
  long long v12 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  *(void *)(a1 + 152) = v8 + 3;
  *(void *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  return a1;
}

void sub_214DE6FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v16 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  mlcore::Library::~Library(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 208))
  {
    uint64_t v3 = *(void **)(v2 + 192);
    unint64_t v4 = *(void **)(a1 + 16);
    uint64_t v6 = v3[4];
    uint64_t v5 = v3[5];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)v4[1];
    void *v4 = v6;
    v4[1] = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::erase((void *)(v2 + 192), v3);
    long long v8 = *(unint64_t **)(a1 + 16);
    unint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = *v8;
    return std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>((uint64_t *)(v2 + 216), v9, v11, v10);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 24);
    char v19 = *(unsigned char *)(v2 + 80);
    uint64_t v14 = *(void *)(v13 + 24);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v14 + 48))(&v18);
    uint64_t v15 = *(void *)(a1 + 16);
    long long v16 = v18;
    long long v18 = 0uLL;
    char v17 = *(std::__shared_weak_count **)(v15 + 8);
    *(_OWORD *)uint64_t v15 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (*((void *)&v18 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
    }
    mediaplatform::DatabaseConnection::setDelegateCallbacks(**(mediaplatform::DatabaseConnection ***)(a1 + 16), (const mediaplatform::DatabaseConnectionCallbacks *)(v2 + 96));
    return std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>((uint64_t *)(v2 + 216), **(void **)(a1 + 16), **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  }
}

uint64_t *std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)result;
  long long v8 = (uint64_t **)(result + 1);
  uint64_t v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        long long v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        long long v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v9 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    return std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at(v6, (uint64_t)v9, v8, v11);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              uint64_t v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        uint64_t v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(void *a1)
{
  char v1 = (uint64_t *)a1[1];
  uint64_t v2 = (void *)v1[28];
  if (!v2) {
    goto LABEL_12;
  }
  unint64_t v4 = a1[2];
  uint64_t v5 = v1 + 28;
  do
  {
    unint64_t v6 = v2[4];
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      int v8 = v2;
    }
    else {
      int v8 = v2 + 1;
    }
    if (v7) {
      uint64_t v5 = v2;
    }
    uint64_t v2 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v1 + 28 || v4 < v5[4]) {
LABEL_12:
  }
    __assert_rtn("operator()", "DatabaseConnectionPool.cpp", 200, "connectionItr != _busyConnections.end()");
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::erase(v1 + 27, v5);
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  return std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>(v1 + 24, v9, v9, v10);
}

void std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::erase(void *a1, void *__p)
{
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    do
    {
      unint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = __p;
    do
    {
      unint64_t v4 = (void *)v5[2];
      BOOL v26 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v26);
  }
  if ((void *)*a1 == __p) {
    *a1 = v4;
  }
  unint64_t v6 = (void *)a1[1];
  --a1[2];
  uint64_t v7 = *__p;
  if (*__p)
  {
    int v8 = (void *)__p[1];
    if (!v8)
    {
      unint64_t v9 = __p;
      goto LABEL_17;
    }
    do
    {
      unint64_t v9 = v8;
      int v8 = (void *)*v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v9 = __p;
  }
  uint64_t v7 = v9[1];
  if (v7)
  {
LABEL_17:
    int v10 = 0;
    *(void *)(v7 + 16) = v9[2];
    goto LABEL_18;
  }
  int v10 = 1;
LABEL_18:
  uint64_t v11 = (void **)v9[2];
  uint64_t v12 = *v11;
  if (*v11 == v9)
  {
    uint64_t *v11 = (void *)v7;
    if (v9 == v6)
    {
      uint64_t v12 = 0;
      unint64_t v6 = (void *)v7;
    }
    else
    {
      uint64_t v12 = v11[1];
    }
  }
  else
  {
    v11[1] = (void *)v7;
  }
  int v13 = *((unsigned __int8 *)v9 + 24);
  if (v9 != __p)
  {
    uint64_t v14 = __p[2];
    void v9[2] = v14;
    *(void *)(v14 + 8 * (*(void *)__p[2] != (void)__p)) = v9;
    uint64_t v16 = *__p;
    uint64_t v15 = __p[1];
    *(void *)(v16 + 16) = v9;
    *unint64_t v9 = v16;
    v9[1] = v15;
    if (v15) {
      *(void *)(v15 + 16) = v9;
    }
    *((unsigned char *)v9 + 24) = *((unsigned char *)__p + 24);
    if (v6 == __p) {
      unint64_t v6 = v9;
    }
  }
  if (!v13 || !v6) {
    goto LABEL_82;
  }
  if (!v10)
  {
    *(unsigned char *)(v7 + 24) = 1;
    goto LABEL_82;
  }
  while (1)
  {
    uint64_t v17 = v12[2];
    if (*(void **)v17 != v12) {
      break;
    }
    if (!*((unsigned char *)v12 + 24))
    {
      *((unsigned char *)v12 + 24) = 1;
      *(unsigned char *)(v17 + 24) = 0;
      uint64_t v23 = v12[1];
      *(void *)uint64_t v17 = v23;
      if (v23) {
        *(void *)(v23 + 16) = v17;
      }
      v12[2] = *(void *)(v17 + 16);
      *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v12;
      v12[1] = v17;
      *(void *)(v17 + 16) = v12;
      if (v6 == (void *)v17) {
        unint64_t v6 = v12;
      }
      uint64_t v12 = *(void **)v17;
    }
    unint64_t v24 = (unsigned char *)*v12;
    if (*v12 && !v24[24]) {
      goto LABEL_77;
    }
    uint64_t v25 = (void *)v12[1];
    if (v25 && !*((unsigned char *)v25 + 24))
    {
      if (v24 && !v24[24])
      {
LABEL_77:
        uint64_t v25 = v12;
      }
      else
      {
        *((unsigned char *)v25 + 24) = 1;
        *((unsigned char *)v12 + 24) = 0;
        uint64_t v31 = *v25;
        v12[1] = *v25;
        if (v31) {
          *(void *)(v31 + 16) = v12;
        }
        v25[2] = v12[2];
        *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v25;
        *uint64_t v25 = v12;
        v12[2] = v25;
        unint64_t v24 = v12;
      }
      uint64_t v28 = v25[2];
      *((unsigned char *)v25 + 24) = *(unsigned char *)(v28 + 24);
      *(unsigned char *)(v28 + 24) = 1;
      v24[24] = 1;
      int v29 = *(uint64_t **)v28;
      uint64_t v32 = *(void *)(*(void *)v28 + 8);
      *(void *)uint64_t v28 = v32;
      if (v32) {
        *(void *)(v32 + 16) = v28;
      }
      v29[2] = *(void *)(v28 + 16);
      *(void *)(*(void *)(v28 + 16) + 8 * (**(void **)(v28 + 16) != v28)) = v29;
      v29[1] = v28;
      goto LABEL_81;
    }
    *((unsigned char *)v12 + 24) = 0;
    std::string v22 = (unsigned char *)v12[2];
    if (v22[24]) {
      BOOL v26 = v22 == (unsigned char *)v6;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_62;
    }
LABEL_59:
    uint64_t v12 = *(void **)(*((void *)v22 + 2) + 8 * (**((void **)v22 + 2) == (void)v22));
  }
  if (!*((unsigned char *)v12 + 24))
  {
    *((unsigned char *)v12 + 24) = 1;
    *(unsigned char *)(v17 + 24) = 0;
    long long v18 = *(uint64_t **)(v17 + 8);
    uint64_t v19 = *v18;
    *(void *)(v17 + 8) = *v18;
    if (v19) {
      *(void *)(v19 + 16) = v17;
    }
    _OWORD v18[2] = *(void *)(v17 + 16);
    *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v18;
    *long long v18 = v17;
    *(void *)(v17 + 16) = v18;
    if (v6 == (void *)*v12) {
      unint64_t v6 = v12;
    }
    uint64_t v12 = *(void **)(*v12 + 8);
  }
  uint8x8_t v20 = (void *)*v12;
  if (!*v12 || *((unsigned char *)v20 + 24))
  {
    uint64_t v21 = (void *)v12[1];
    if (v21 && !*((unsigned char *)v21 + 24)) {
      goto LABEL_68;
    }
    *((unsigned char *)v12 + 24) = 0;
    std::string v22 = (unsigned char *)v12[2];
    if (v22 == (unsigned char *)v6)
    {
      std::string v22 = v6;
LABEL_62:
      v22[24] = 1;
      goto LABEL_82;
    }
    if (!v22[24]) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  uint64_t v21 = (void *)v12[1];
  if (v21 && !*((unsigned char *)v21 + 24))
  {
LABEL_68:
    uint8x8_t v20 = v12;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v12 + 24) = 0;
    uint64_t v27 = v20[1];
    *uint64_t v12 = v27;
    if (v27) {
      *(void *)(v27 + 16) = v12;
    }
    v20[2] = v12[2];
    *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v20;
    v20[1] = v12;
    v12[2] = v20;
    uint64_t v21 = v12;
  }
  uint64_t v28 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v28 + 24);
  *(unsigned char *)(v28 + 24) = 1;
  *((unsigned char *)v21 + 24) = 1;
  int v29 = *(uint64_t **)(v28 + 8);
  uint64_t v30 = *v29;
  *(void *)(v28 + 8) = *v29;
  if (v30) {
    *(void *)(v30 + 16) = v28;
  }
  v29[2] = *(void *)(v28 + 16);
  *(void *)(*(void *)(v28 + 16) + 8 * (**(void **)(v28 + 16) != v28)) = v29;
  uint64_t *v29 = v28;
LABEL_81:
  *(void *)(v28 + 16) = v29;
LABEL_82:
  BOOL v33 = (std::__shared_weak_count *)__p[5];
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL),std::allocator<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL)>,std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void mediaplatform::DefaultConnectionAllocator(mediaplatform *this@<X0>, const mediaplatform::FilePath *a2@<X1>, void *a3@<X8>)
{
  char v3 = (char)a2;
  unint64_t v6 = operator new(0x158uLL);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  void *v6 = &unk_26C5BF6A8;
  mediaplatform::FilePath::str(this, (uint64_t)&__p);
  mediaplatform::DatabaseConnection::DatabaseConnection((uint64_t)(v6 + 3), &__p, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a3 = v6 + 3;
  a3[1] = v6;
}

void sub_214DE7964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseConnection::DatabaseConnection(uint64_t a1, std::string *a2, char a3)
{
  *(void *)a1 = 0;
  mediaplatform::FilePath::FilePath((void *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 145) = a3;
  *(unsigned char *)(a1 + 146) = 1;
  *(_DWORD *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 50;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(void *)(a1 + 272) = a1 + 272;
  *(void *)(a1 + 280) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  return a1;
}

void *mediaplatform::DatabaseConnection::setDelegateCallbacks(mediaplatform::DatabaseConnection *this, const mediaplatform::DatabaseConnectionCallbacks *a2)
{
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 6, a2);
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 10, (void *)a2 + 4);
  return std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 14, (void *)a2 + 8);
}

mlcore::LocalLibrary *mlcore::LocalLibrary::LocalLibrary(mlcore::LocalLibrary *this, long long **a2, const mediaplatform::FilePath *a3, const mlcore::LanguageResources *a4)
{
  v21[4] = *MEMORY[0x263EF8340];
  mlcore::LocalLibrary::_libraryIdentifierFromContentBundleAndRelativePath(a2, a3, &__p);
  mlcore::Library::Library((uint64_t)this, (long long *)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C4B90;
  mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(a2, a3, (uint64_t)&__p);
  mediaplatform::FilePath::FilePath((void *)this + 19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = (long long *)*((void *)this + 20);
  unint64_t v9 = (long long *)*((void *)this + 21);
  uint64_t v15 = &unk_26C5BF338;
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3));
  v21[0] = &unk_26C5C8998;
  v21[1] = mediaplatform::DefaultConnectionAllocator;
  void v21[3] = v21;
  mediaplatform::DatabaseConnectionPool::DatabaseConnectionPool((uint64_t)this + 184, (uint64_t)&v15, 10, 1, (uint64_t)v21);
  std::__function::__value_func<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::~__value_func[abi:ne180100](v21);
  uint64_t v15 = &unk_26C5BF338;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)this + 280, *(void *)a4, *((void *)a4 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 3));
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 304), *((long long **)a4 + 3), *((long long **)a4 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 4) - *((void *)a4 + 3)) >> 3));
  int v10 = (std::string *)((char *)this + 328);
  if (*((char *)a4 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a4 + 6), *((void *)a4 + 7));
  }
  else
  {
    long long v11 = *((_OWORD *)a4 + 3);
    *((void *)this + 43) = *((void *)a4 + 8);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)this + 352, *((long long **)a4 + 9), *((long long **)a4 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 10) - *((void *)a4 + 9)) >> 3));
  uint64_t v12 = (std::string *)((char *)this + 376);
  if (*((char *)a4 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a4 + 12), *((void *)a4 + 13));
  }
  else
  {
    long long v13 = *((_OWORD *)a4 + 6);
    *((void *)this + 49) = *((void *)a4 + 14);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  uint64_t v18 = 0;
  v19[0] = &unk_26C5C8E10;
  v19[1] = this;
  uint64_t v19[3] = v19;
  v20[3] = 0;
  mediaplatform::DBCPSubpool::setDelegateCallbacks(*((mediaplatform::DBCPSubpool **)this + 33), (const mediaplatform::DatabaseConnectionCallbacks *)&__p);
  mediaplatform::DBCPSubpool::setDelegateCallbacks(*((mediaplatform::DBCPSubpool **)this + 31), (const mediaplatform::DatabaseConnectionCallbacks *)&__p);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100](&__p);
  return this;
}

void sub_214DE7D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(v22);
  mediaplatform::DatabaseConnectionPool::~DatabaseConnectionPool(v21);
  *uint8x8_t v20 = &unk_26C5BF338;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlcore::Library::~Library(v19);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    int v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    uint64_t v6[2] = &v7[24 * v9];
    uint64_t v14 = v7;
    long long v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    uint64_t v11[2] = &v14;
    char v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::wstring::__init_copy_ctor_external(v7, *(void **)a2, *((void *)a2 + 1));
          uint64_t v7 = v14;
        }
        else
        {
          long long v10 = *a2;
          *((void *)v7 + 2) = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v7 = v10;
        }
        a2 = (long long *)((char *)a2 + 24);
        v7 += 24;
        uint64_t v14 = v7;
      }
      while (a2 != a3);
      int v8 = v7;
    }
    char v12 = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_214DE7F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DBCPSubpool *this, const mediaplatform::DatabaseConnectionCallbacks *a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 12, a2);
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 16, (void *)a2 + 4);
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((void *)this + 20, (void *)a2 + 8);
  (*(void (**)(uint64_t *__return_ptr, mediaplatform::DBCPSubpool *))(*(void *)this + 24))(&v4, this);
  v6[0] = &unk_26C5BF4D8;
  v6[1] = this;
  uint64_t v6[2] = a2;
  v6[3] = v6;
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DE80A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=(void *a1, void *a2)
{
  void v9[3] = *MEMORY[0x263EF8340];
  char v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      int v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      int v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v7 != a1)
  {
    uint64_t v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        int v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        int v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        int v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      int v8 = v7;
    }
    else
    {
      int v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_214DE83C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void mlcore::DeviceLibraryView::_performQuery(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  void v18[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  if (!*a3)
  {
    std::shared_ptr<mlcore::DeviceLibraryView>::shared_ptr[abi:ne180100]<mlcore::DeviceLibraryView,void>(&v15, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
    int v8 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)int v8 = &unk_26C5CA168;
    long long v17 = v15;
    long long v15 = 0u;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    mlcore::Transaction::Transaction((uint64_t)(v8 + 24), (uint64_t)&v17, 1);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *(void *)&long long v16 = v8 + 24;
    *((void *)&v16 + 1) = v8;
    std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v16, (void *)v8 + 3, (uint64_t)(v8 + 24));
    long long v10 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v16;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    uint64_t v7 = *a3;
  }
  uint64_t v11 = *a2;
  char v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v13 = v7;
  uint64_t v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::__value_func[abi:ne180100]((uint64_t)v18, a4);
  (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v11 + 96))(v11, &v13, v18);
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100](v18);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_214DE85DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v21);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

double mlcore::LibraryView::viewWithLibrary@<D0>(long long *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  long long v8 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a1 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = operator new(0x80uLL);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  void *v6 = &unk_26C5CA9F0;
  long long v10 = v8;
  mlcore::DeviceLibraryView::DeviceLibraryView((uint64_t)(v6 + 3), (uint64_t *)&v10, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)&long long v9 = v6 + 3;
  *((void *)&v9 + 1) = v6;
  std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v9, v6 + 14, (uint64_t)(v6 + 3));
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_214DE8708(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

uint64_t mlcore::DeviceLibraryView::DeviceLibraryView(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C5C4718;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_WORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 50) = 0;
  *(int32x2_t *)(a1 + 52) = vdup_n_s32(0x3E8u);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 80) = a3;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a3;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_26C5C7410;
  return a1;
}

void *std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::shared_ptr<mlcore::DeviceLibraryView>::shared_ptr[abi:ne180100]<mlcore::DeviceLibraryView,void>(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t mlcore::Transaction::Transaction(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(mlcore::DeviceLibraryView **)a2;
  *(void *)(a1 + 16) = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(mlcore::DeviceLibraryView **)(a1 + 16);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 65) = a3;
  if (!v4) {
    __assert_rtn("Transaction", "Transaction.cpp", 21, "_libraryView");
  }
  if (a3) {
    mlcore::DeviceLibraryView::checkoutReader(v4, &v8);
  }
  else {
    mlcore::DeviceLibraryView::checkoutWriter(v4, &v8);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v8;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  mediaplatform::DatabaseConnection::pushTransaction(**(void **)(a1 + 48), 0);
  return a1;
}

void sub_214DE8A94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[3];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)v1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DeviceLibraryView::checkoutReader(mlcore::DeviceLibraryView *this@<X0>, void *a2@<X8>)
{
  mlcore::DeviceLibraryView::library(this, &v6);
  uint64_t v3 = *(void *)(v6 + 152);
  uint64_t v4 = *(std::__shared_weak_count **)(v6 + 160);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::DatabaseConnectionPool::_checkoutConnection((mediaplatform::DatabaseConnectionPool *)(v3 + 184), 1, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_214DE8B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DeviceLibraryView::library(mlcore::DeviceLibraryView *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v3;
    a2[1] = v2;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    *a2 = v3;
    a2[1] = 0;
  }
}

void mediaplatform::DatabaseConnectionPool::_checkoutConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = (char *)this + 64;
  uint64_t v6 = 80;
  if (a2) {
    uint64_t v6 = 64;
  }
  else {
    uint64_t v5 = (char *)this + 80;
  }
  uint64_t v7 = *(dispatch_semaphore_t **)((char *)this + v6);
  long long v8 = (std::__shared_weak_count *)*((void *)v5 + 1);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_semaphore_wait(v7[11], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v19 = 0;
  uint8x8_t v20 = 0;
  ((void (*)(dispatch_semaphore_t **__return_ptr, dispatch_semaphore_t *))(*v7)[3].isa)(&v21, v7);
  long long v9 = v21;
  long long v10 = operator new(0x20uLL);
  void *v10 = &unk_26C5BF428;
  v10[1] = v7;
  uint64_t v10[2] = &v19;
  void v10[3] = (char *)this + 32;
  BOOL v26 = v10;
  ((void (*)(dispatch_semaphore_t *, void *))(*v9)[6].isa)(v9, v25);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v25);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v11 = (char *)operator new(0x48uLL);
  char v12 = v11;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = &unk_26C5BF7C0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *a3 = v11 + 24;
  a3[1] = v11;
  uint64_t v13 = v19;
  uint64_t v14 = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v15 = (std::__shared_weak_count *)*((void *)v11 + 4);
    *((void *)v12 + 3) = v13;
    *((void *)v12 + 4) = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v8) {
      goto LABEL_12;
    }
  }
  else
  {
    *((void *)v11 + 3) = v19;
    *((void *)v11 + 4) = 0;
    if (v8) {
LABEL_12:
    }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v19;
  long long v16 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v7;
  std::string v22 = v8;
  uint64_t v23 = v17;
  unint64_t v24 = v16;
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = &unk_26C5BF5E0;
  v18[1] = v7;
  _OWORD v18[2] = v8;
  v18[3] = v17;
  void v18[4] = v16;
  BOOL v26 = v18;
  if (*((char **)v12 + 8) == v12 + 40)
  {
    (*(void (**)(char *, void *))(*((void *)v12 + 5) + 24))(v12 + 40, v25);
    (*(void (**)(void))(**((void **)v12 + 8) + 32))(*((void *)v12 + 8));
    *((void *)v12 + 8) = v26;
    BOOL v26 = v25;
  }
  else
  {
    BOOL v26 = (void *)*((void *)v12 + 8);
    *((void *)v12 + 8) = v18;
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v25);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_214DE8E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::operator()(void *a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  char v1 = (dispatch_semaphore_t *)a1[1];
  uint64_t v3 = a1[3];
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t *__return_ptr, dispatch_semaphore_t *))(*v1)[3].isa)(&v6, v1);
  uint64_t v4 = v6;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26C5BF3D0;
  v5[1] = v1;
  uint64_t v5[2] = v3;
  void v5[3] = v2;
  void v8[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v8);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    dispatch_semaphore_signal(v1[11]);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    dispatch_semaphore_signal(v1[11]);
  }
}

void sub_214DE9100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a2)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a12);
    if (a11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a11);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::WorkQueueDispatchTarget::targetQueue@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::WorkQueue_Dispatch::invokeSync(void *a1, void *a2)
{
  (*(void (**)(void *))(*a1 + 72))(a1);
  uint64_t v4 = a1[10];
  dispatch_sync_f(v4, a2, (dispatch_function_t)mediaplatform::_SyncDispatcher);
}

void mediaplatform::WorkQueue_Dispatch::assertIsNotActiveQueue(dispatch_queue_t *this)
{
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__alloc_func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void mediaplatform::DatabaseConnection::pushTransaction(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 148);
  if (v3)
  {
    *(_DWORD *)(a1 + 148) = v3 + 1;
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    uint64_t v6 = v5;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF750;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF260;
    LODWORD(v5[1].__shared_owners_) = a2;
    if (*(unsigned char *)(a1 + 145))
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      mediaplatform::DatabaseConnection::executeQueryStatement<int>(&v7, (mediaplatform::DatabaseConnection *)a1, (uint64_t)&v5[1]);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(unsigned char *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 148) = 1;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_214DE93EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0,std::allocator<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0>,void ()(mediaplatform::DatabaseConnection &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5C8E10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26C5C8B50;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_214DE94C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityCache::entityForClassAndPersistentID(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v29 = a3;
  unint64_t v30 = a2;
  v28[0] = a2;
  v28[1] = a3;
  if (*(unsigned char *)(a1 + 120))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    __n128 v37 = (void *)v7;
    long long v10 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, v7, &v37);
    uint64_t v11 = (uint64_t *)v10[3];
    uint64_t v12 = (uint64_t)(v10[4] - (void)v11) >> 3;
    if (v12 == 1)
    {
      uint64_t v13 = *v11;
      if (v13 == (*(uint64_t (**)(unint64_t))(*(void *)v30 + 112))(v30))
      {
        uint64_t v40 = 1065353216;
        *(_OWORD *)&v42[8] = 0u;
        uint64_t v45 = 1065353216;
        *(_OWORD *)&v47[8] = 0u;
        long long v39 = 0u;
        long long v38 = 0u;
        long long v41 = 0u;
        *(_OWORD *)uint64_t v42 = 0u;
        *(_DWORD *)&v42[16] = 1065353216;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v46 = 0u;
        *(_OWORD *)uint64_t v47 = 0u;
        *(_DWORD *)&v47[16] = 1065353216;
        memset(v48, 0, sizeof(v48));
        uint64_t v49 = 1065353216;
        __n128 v37 = &unk_26C5C4EE8;
        __n128 v50 = &unk_26C5C4F10;
        *(void *)&long long v51 = (*(uint64_t (**)(unint64_t))(*(void *)v30 + 112))(v30);
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v48, v51, &v51)[3] = a3;
        *(void *)&long long v51 = &unk_26C5C8E68;
        std::exception v52 = &v51;
        mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)&v37, a4, (uint64_t)&v51);
        std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](&v51);
        (*(void (**)(long long *__return_ptr))(*(void *)v30 + 48))(&v51);
        long long v25 = v51;
        long long v51 = 0uLL;
        BOOL v26 = (std::__shared_weak_count *)a5[1];
        *(_OWORD *)a5 = v25;
        if (v26)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          if (*((void *)&v51 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
          }
        }
        mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v37);
        goto LABEL_37;
      }
    }
    else if (!v12)
    {
      __assert_rtn("entityForClassAndPersistentID", "EntityCache.cpp", 63, "propertiesToFetch.size() > 0");
    }
    uint64_t v14 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>((uint64_t *)(a1 + 48), v30, (uint64_t *)&v30);
    uint64_t v16 = v14[3];
    long long v15 = (std::__shared_weak_count *)v14[4];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(void *)(v16 + 120);
    *(void *)(v17 + 24) = a3;
    uint64_t v18 = *(void *)(v17 + 32);
    if (v18) {
      *(void *)(v18 + 8) = a3;
    }
    dispatch_semaphore_t dsema = dispatch_semaphore_create(0);
    uint64_t v19 = *(void (****)(void, uint64_t *, uint64_t *, void **))(a1 + 88);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *(void *)(a1 + 104);
    uint8x8_t v20 = *(std::__shared_weak_count **)(a1 + 112);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v36 = 0;
    std::string v22 = operator new(0x30uLL);
    *std::string v22 = &unk_26C5C8A48;
    v22[1] = a4;
    uint64_t v22[2] = a5;
    v22[3] = &v30;
    v22[4] = &v29;
    v22[5] = &dsema;
    std::string v36 = v22;
    uint64_t v33 = v16;
    int v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = v21;
    uint64_t v32 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)&v51, (uint64_t)v35);
    *(void *)&long long v39 = 0;
    uint64_t v23 = operator new(0x28uLL);
    void *v23 = &unk_26C5C8B50;
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v23 + 1), (uint64_t)&v51);
    *(void *)&long long v39 = v23;
    (**v19)(v19, &v33, &v31, &v37);
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100](&v37);
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](&v51);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](v35);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(dsema);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    else
    {
      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(dsema);
    }
LABEL_37:
    if (!*(unsigned char *)(a1 + 120))
    {
      if (*a5) {
        mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::setValueForKey(a1 + 128, a5, (uint64_t)v28);
      }
    }
    return;
  }
  mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::valueForKey((uint64_t)&v37, a1 + 128, a2, a3);
  if (!BYTE8(v38))
  {
    unint64_t v7 = v30;
    goto LABEL_2;
  }
  mediaplatform::Optional<std::shared_ptr<mlcore::Entity>>::value((uint64_t)&v37);
  unint64_t v24 = v38;
  *a5 = (unint64_t)v37;
  a5[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  if (BYTE8(v38) && (void)v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38);
  }
}

void sub_214DE99D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a22);
  BOOL v26 = *(std::__shared_weak_count **)(v24 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  std::__shared_weak_count *v3 = 0;
  return a1;
}

__n128 std::__function::__func<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C5C8A48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::setValueForKey(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v7 = (void **)(a1 + 24);
  long long v8 = std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>((void *)(a1 + 24), *(void *)a3, *(void *)(a3 + 8));
  if (v8) {
    mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((void *)a1, v8);
  }
  if (*(void *)(a1 + 16) > *(void *)(a1 + 8))
  {
    uint64_t v9 = a1 + 64;
    uint64_t v10 = a1 + 72;
    do
    {
      do
      {
        uint64_t v11 = *(void *)v10;
        uint64_t v12 = *(void *)(*(void *)v10 + 24);
        uint64_t v10 = *(void *)v10 + 8;
      }
      while (v11 != v9 && v12 == 0);
      if (v11 == v9)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no room in cache");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((void *)a1, *(void **)(v11 + 16));
      uint64_t v10 = a1 + 72;
    }
    while (*(void *)(a1 + 16) > *(void *)(a1 + 8));
  }
  if ((unint64_t)(*(void *)(a1 + 48) + 1) > *(void *)a1) {
    mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((void *)a1, *(void **)(*(void *)(a1 + 72) + 16));
  }
  uint64_t v14 = operator new(0x20uLL);
  v14[2] = 0;
  int v55 = v14 + 2;
  v14[3] = 0;
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(v15 + 8) = v14;
  *(void *)(a1 + 64) = v14;
  void *v14 = v15;
  v14[1] = a1 + 64;
  ++*(void *)(a1 + 80);
  unint64_t v16 = *a2;
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v19 = *(void *)a3;
    uint64_t v18 = *(void *)(a3 + 8);
    *(void *)&long long v57 = v16;
    *((void *)&v57 + 1) = v17;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v20 = v17;
  }
  else
  {
    uint8x8_t v20 = 0;
    unint64_t v19 = *(void *)a3;
    uint64_t v18 = *(void *)(a3 + 8);
    long long v57 = v16;
  }
  unint64_t v21 = 0x9DDFEA08EB382D69 * (((8 * v19) + 8) ^ HIDWORD(v19));
  unint64_t v22 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v21 >> 47) ^ v21);
  unint64_t v23 = (0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47))) ^ v18;
  unint64_t v24 = *(void *)(a1 + 32);
  uint64_t v56 = v17;
  if (!v24) {
    goto LABEL_37;
  }
  uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    unint64_t v3 = (0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47))) ^ v18;
    if (v23 >= v24) {
      unint64_t v3 = v23 % v24;
    }
  }
  else
  {
    unint64_t v3 = v23 & (v24 - 1);
  }
  BOOL v26 = (void **)*((void *)*v7 + v3);
  if (!v26 || (uint64_t v27 = *v26) == 0)
  {
LABEL_37:
    uint64_t v27 = operator new(0x38uLL);
    unint64_t v30 = (void *)(a1 + 40);
    *uint64_t v27 = 0;
    v27[1] = v23;
    v27[2] = v19;
    void v27[3] = v18;
    *((_OWORD *)v27 + 2) = v57;
    v27[6] = v14;
    float v31 = (float)(unint64_t)(*(void *)(a1 + 48) + 1);
    float v32 = *(float *)(a1 + 56);
    if (v24 && (float)(v32 * (float)v24) >= v31)
    {
      uint64_t v33 = v14 + 2;
      goto LABEL_85;
    }
    BOOL v34 = 1;
    if (v24 >= 3) {
      BOOL v34 = (v24 & (v24 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v24);
    unint64_t v36 = vcvtps_u32_f32(v31 / v32);
    if (v35 <= v36) {
      int8x8_t prime = (int8x8_t)v36;
    }
    else {
      int8x8_t prime = (int8x8_t)v35;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v24 = *(void *)(a1 + 32);
    }
    if (*(void *)&prime > v24)
    {
LABEL_50:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v38 = operator new(8 * *(void *)&prime);
      long long v39 = *v7;
      *unint64_t v7 = v38;
      if (v39) {
        operator delete(v39);
      }
      uint64_t v40 = 0;
      *(int8x8_t *)(a1 + 32) = prime;
      do
        *((void *)*v7 + v40++) = 0;
      while (*(void *)&prime != v40);
      long long v41 = (void *)*v30;
      if (*v30)
      {
        unint64_t v42 = v41[1];
        uint8x8_t v43 = (uint8x8_t)vcnt_s8(prime);
        v43.i16[0] = vaddlv_u8(v43);
        if (v43.u32[0] > 1uLL)
        {
          if (v42 >= *(void *)&prime) {
            v42 %= *(void *)&prime;
          }
        }
        else
        {
          v42 &= *(void *)&prime - 1;
        }
        *((void *)*v7 + v42) = v30;
        uint64_t v47 = (void *)*v41;
        if (*v41)
        {
          do
          {
            unint64_t v48 = v47[1];
            if (v43.u32[0] > 1uLL)
            {
              if (v48 >= *(void *)&prime) {
                v48 %= *(void *)&prime;
              }
            }
            else
            {
              v48 &= *(void *)&prime - 1;
            }
            if (v48 != v42)
            {
              if (!*((void *)*v7 + v48))
              {
                *((void *)*v7 + v48) = v41;
                goto LABEL_75;
              }
              *long long v41 = *v47;
              *uint64_t v47 = **((void **)*v7 + v48);
              **((void **)*v7 + v48) = v47;
              uint64_t v47 = v41;
            }
            unint64_t v48 = v42;
LABEL_75:
            long long v41 = v47;
            uint64_t v47 = (void *)*v47;
            unint64_t v42 = v48;
          }
          while (v47);
        }
      }
      unint64_t v24 = (unint64_t)prime;
      goto LABEL_79;
    }
    if (*(void *)&prime < v24)
    {
      unint64_t v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v24 < 3 || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        unint64_t v44 = std::__next_prime(v44);
      }
      else
      {
        uint64_t v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2) {
          unint64_t v44 = v46;
        }
      }
      if (*(void *)&prime <= v44) {
        int8x8_t prime = (int8x8_t)v44;
      }
      if (*(void *)&prime < v24)
      {
        if (!*(void *)&prime)
        {
          uint64_t v53 = *v7;
          *unint64_t v7 = 0;
          uint64_t v33 = v55;
          if (v53) {
            operator delete(v53);
          }
          unint64_t v24 = 0;
          *(void *)(a1 + 32) = 0;
          goto LABEL_80;
        }
        goto LABEL_50;
      }
      unint64_t v24 = *(void *)(a1 + 32);
    }
LABEL_79:
    uint64_t v33 = v55;
LABEL_80:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24) {
        unint64_t v3 = v23 % v24;
      }
      else {
        unint64_t v3 = v23;
      }
    }
    else
    {
      unint64_t v3 = (v24 - 1) & v23;
    }
LABEL_85:
    uint64_t v49 = *v7;
    __n128 v50 = (void *)*((void *)*v7 + v3);
    if (v50)
    {
      *uint64_t v27 = *v50;
      long long v51 = v56;
    }
    else
    {
      *uint64_t v27 = *v30;
      *unint64_t v30 = v27;
      v49[v3] = v30;
      long long v51 = v56;
      if (!*v27)
      {
LABEL_94:
        ++*(void *)(a1 + 48);
        goto LABEL_96;
      }
      unint64_t v52 = *(void *)(*v27 + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v52 >= v24) {
          v52 %= v24;
        }
      }
      else
      {
        v52 &= v24 - 1;
      }
      __n128 v50 = (char *)*v7 + 8 * v52;
    }
    *__n128 v50 = v27;
    goto LABEL_94;
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == v23) {
      break;
    }
    if (v25.u32[0] > 1uLL)
    {
      if (v28 >= v24) {
        v28 %= v24;
      }
    }
    else
    {
      v28 &= v24 - 1;
    }
    if (v28 != v3) {
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_37;
    }
  }
  if (v27[2] != v19 || v27[3] != v18) {
    goto LABEL_36;
  }
  uint64_t v33 = v14 + 2;
  long long v51 = v17;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
LABEL_96:
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  *uint64_t v33 = v27;
}

void sub_214DEA274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,void *>>>::operator()[abi:ne180100](1, v12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>(void *a1, unint64_t a2, uint64_t a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
  unint64_t v6 = (0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47))) ^ a3;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v3) {
      unint64_t v8 = v6 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v3 - 1);
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  __n128 result = (void *)*v9;
  if (*v9)
  {
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v6)
      {
        if (result[2] == a2 && result[3] == a3) {
          return result;
        }
      }
      else
      {
        if (v7.u32[0] > 1uLL)
        {
          if (v11 >= *(void *)&v3) {
            v11 %= *(void *)&v3;
          }
        }
        else
        {
          v11 &= *(void *)&v3 - 1;
        }
        if (v11 != v8) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::valueForKey(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>((void *)(a2 + 24), a3, a4);
  if (v6)
  {
    uint8x8_t v7 = v6;
    unint64_t v8 = (_OWORD *)v6[6];
    uint64_t v9 = operator new(0x20uLL);
    v9[1] = v8[1];
    uint64_t v11 = *(void *)(a2 + 64);
    uint64_t v10 = (void *)(a2 + 64);
    *(void *)(v11 + 8) = v9;
    void *v10 = v9;
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v10;
    uint64_t v12 = *(void *)v8;
    *(void *)(v12 + 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v12;
    operator delete(v8);
    v7[6] = v9;
    uint64_t v13 = v7[5];
    *(void *)a1 = v7[4];
    *(void *)(a1 + 8) = v13;
    if (v13)
    {
      uint64_t v14 = (atomic_ullong *)(v13 + 8);
      char v15 = 1;
      atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v15 = 1;
    }
  }
  else
  {
    char v15 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v15;
}

uint64_t mlcore::Library::Library(uint64_t a1, long long *a2, long long **a3)
{
  *(void *)a1 = &unk_26C5C8768;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = &unk_26C5BF338;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 3));
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = &unk_26C5BF338;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 72), a3[5], a3[6], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[6] - (char *)a3[5]) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_26C5BF338;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), a3[9], a3[10], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[10] - (char *)a3[9]) >> 3));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 128), a3[12], a3[13], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[13] - (char *)a3[12]) >> 3));
  return a1;
}

void sub_214DEA620(_Unwind_Exception *a1, void *a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  void *v6 = v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *a2 = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *a4 = a3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 31) < 0) {
    operator delete(*v5);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void mlcore::LocalLibrary::_libraryIdentifierFromContentBundleAndRelativePath(long long **this@<X0>, const mediaplatform::ContentBundle *a2@<X1>, std::string *a3@<X8>)
{
  mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(this, a2, (uint64_t)&v6);
  long long v5 = std::string::insert(&v6, 0, "local:");
  *a3 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_214DEA780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseConnectionPool::DatabaseConnectionPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  *(void *)a1 = &unk_26C5BF338;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  uint64_t v8 = *(void *)(a5 + 24);
  if (v8)
  {
    if (v8 == a5)
    {
      *(void *)(a1 + 56) = a1 + 32;
      (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), a1 + 32);
      goto LABEL_6;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  *(void *)(a1 + 56) = v8;
LABEL_6:
  v12[0] = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>((void *)(a1 + 64), *(long long **)(a2 + 8), *(long long **)(a2 + 16), &v11, v12);
  v12[0] = 0;
  std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>((void *)(a1 + 80), *(long long **)(a2 + 8), *(long long **)(a2 + 16), &v10, v12);
  return a1;
}

void sub_214DEA8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  void *v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>(void *a1, long long *a2, long long *a3, uint64_t *a4, char *a5)
{
  uint64_t v10 = (char *)operator new(0x108uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(void *)uint64_t v10 = &unk_26C5BF638;
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, a2, a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
  uint64_t v11 = *a4;
  char v12 = *a5;
  if (*a5) {
    uint64_t v13 = "DBCPSubpool RO";
  }
  else {
    uint64_t v13 = "DBCPSubpool RW";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  mediaplatform::WorkQueue::makeWorkQueue((uint64_t)__p, 0, v20);
  uint64_t v14 = v10 + 24;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = &unk_26C5BF208;
  char v15 = (std::__shared_weak_count *)v20[1];
  *((void *)v10 + 6) = v20[0];
  *((void *)v10 + 7) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  *((void *)v10 + 9) = 0;
  *((void *)v10 + 3) = &unk_26C5BEA08;
  *((void *)v10 + 8) = &unk_26C5BF338;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 11) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v10 + 3, (long long *)v17.__r_.__value_.__l.__data_, (long long *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  *((void *)v10 + 12) = v11;
  v10[104] = v12;
  *((void *)v10 + 14) = dispatch_semaphore_create((int)v11);
  *((void *)v10 + 18) = 0;
  *((void *)v10 + 22) = 0;
  *((void *)v10 + 28) = 0;
  *((void *)v10 + 26) = 0;
  *((void *)v10 + 27) = v10 + 224;
  *((void *)v10 + 32) = 0;
  *((void *)v10 + 31) = 0;
  *((void *)v10 + 29) = 0;
  *((void *)v10 + 30) = v10 + 248;
  __p[0] = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *a1 = v14;
  a1[1] = v10;
  unint64_t v16 = (std::__shared_weak_count *)*((void *)v10 + 5);
  if (v16)
  {
    if (v16->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 4) = v14;
    *((void *)v10 + 5) = v10;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 4) = v14;
    *((void *)v10 + 5) = v10;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
}

void sub_214DEAB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  mediaplatform::SerialDispatchTarget::~SerialDispatchTarget(v20);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v22);
  _Unwind_Resume(a1);
}

dispatch_queue_t mediaplatform::WorkQueue::makeWorkQueue@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  std::string v6 = (char *)operator new(0x78uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)std::string v6 = &unk_26C5BF718;
  *((void *)v6 + 3) = &unk_26C5BEE88;
  *((void *)v6 + 4) = 850045863;
  *((void *)v6 + 13) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_DWORD *)v6 + 28) = a2;
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v7 = (const char *)a1;
  }
  else {
    uint64_t v7 = *(const char **)a1;
  }
  if (a2 == 1) {
    uint64_t v8 = MEMORY[0x263EF83A8];
  }
  else {
    uint64_t v8 = 0;
  }
  dispatch_queue_t result = dispatch_queue_create(v7, v8);
  *((void *)v6 + 13) = result;
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL),std::allocator<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL)>,std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5C8998;
  a2[1] = v2;
  return result;
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v100 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string v101 = *(std::string *)(a3 + 8);
  }
  int v102 = *(_DWORD *)(a3 + 32);
  uint64_t v100 = &unk_26C5C3818;
  char v103 = *(unsigned char *)(a3 + 36);
  if (*(char *)(a3 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else {
    std::string v104 = *(std::string *)(a3 + 40);
  }
  uint64_t v95 = &unk_26C5C3AF0;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string __s = *(std::string *)(a4 + 8);
  }
  int v97 = *(_DWORD *)(a4 + 32);
  uint64_t v95 = &unk_26C5C3818;
  char v98 = *(unsigned char *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(a4 + 40), *(void *)(a4 + 48));
  }
  else {
    std::string v99 = *(std::string *)(a4 + 40);
  }
  long long v90 = &unk_26C5C3AF0;
  if (*(char *)(a5 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
  }
  else {
    std::string v91 = *(std::string *)(a5 + 8);
  }
  int v92 = *(_DWORD *)(a5 + 32);
  long long v90 = &unk_26C5C3818;
  char v93 = *(unsigned char *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a5 + 40), *(void *)(a5 + 48));
  }
  else {
    std::string v94 = *(std::string *)(a5 + 40);
  }
  unint64_t v85 = &unk_26C5C3AF0;
  if (*(char *)(a6 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a6 + 8), *(void *)(a6 + 16));
  }
  else {
    std::string v86 = *(std::string *)(a6 + 8);
  }
  int v87 = *(_DWORD *)(a6 + 32);
  unint64_t v85 = &unk_26C5C3818;
  char v88 = *(unsigned char *)(a6 + 36);
  if (*(char *)(a6 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(a6 + 40), *(void *)(a6 + 48));
  }
  else {
    std::string v89 = *(std::string *)(a6 + 40);
  }
  uint64_t v78 = &unk_26C5C3AF0;
  if (*(char *)(a7 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(a7 + 8), *(void *)(a7 + 16));
  }
  else {
    std::string v79 = *(std::string *)(a7 + 8);
  }
  int v80 = *(_DWORD *)(a7 + 32);
  uint64_t v78 = &unk_26C5C37F8;
  char v81 = *(unsigned char *)(a7 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v82, *(const void **)(a7 + 64), *(void *)(a7 + 48), 1);
  long long v74 = &unk_26C5C3AF0;
  if (*(char *)(a8 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(a8 + 8), *(void *)(a8 + 16));
  }
  else {
    std::string v75 = *(std::string *)(a8 + 8);
  }
  int v76 = *(_DWORD *)(a8 + 32);
  long long v74 = &unk_26C5C3858;
  uint64_t v77 = *(void *)(a8 + 36);
  uint64_t v69 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v70 = *(std::string *)(a9 + 8);
  }
  int v71 = *(_DWORD *)(a9 + 32);
  uint64_t v69 = &unk_26C5C3878;
  uint64_t v72 = *(void *)(a9 + 36);
  int v73 = *(_DWORD *)(a9 + 44);
  int64_t v64 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v65 = *(std::string *)(a10 + 8);
  }
  int v66 = *(_DWORD *)(a10 + 32);
  int64_t v64 = &unk_26C5C3878;
  uint64_t v67 = *(void *)(a10 + 36);
  int v68 = *(_DWORD *)(a10 + 44);
  int v60 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v61 = *(std::string *)(a11 + 8);
  }
  int v62 = *(_DWORD *)(a11 + 32);
  int v60 = &unk_26C5C3858;
  uint64_t v63 = *(void *)(a11 + 36);
  uint64_t v56 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v57 = *(std::string *)(a12 + 8);
  }
  int v58 = *(_DWORD *)(a12 + 32);
  uint64_t v56 = &unk_26C5C3858;
  uint64_t v59 = *(void *)(a12 + 36);
  unint64_t v52 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v53 = *(std::string *)(a13 + 8);
  }
  int v54 = *(_DWORD *)(a13 + 32);
  unint64_t v52 = &unk_26C5C3858;
  uint64_t v55 = *(void *)(a13 + 36);
  unint64_t v48 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v49 = *(std::string *)(a14 + 8);
  }
  int v50 = *(_DWORD *)(a14 + 32);
  unint64_t v48 = &unk_26C5C3858;
  uint64_t v51 = *(void *)(a14 + 36);
  long long v41 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v42 = *(std::string *)(a15 + 8);
  }
  int v43 = *(_DWORD *)(a15 + 32);
  long long v41 = &unk_26C5C37F8;
  char v44 = *(unsigned char *)(a15 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v45, *(const void **)(a15 + 64), *(void *)(a15 + 48), 1);
  unint64_t v36 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v37 = *(std::string *)(a16 + 8);
  }
  int v38 = *(_DWORD *)(a16 + 32);
  unint64_t v36 = &unk_26C5C3878;
  uint64_t v39 = *(void *)(a16 + 36);
  int v40 = *(_DWORD *)(a16 + 44);
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v33 = *(std::string *)(a17 + 8);
  }
  int v34 = *(_DWORD *)(a17 + 32);
  uint64_t v35 = *(void *)(a17 + 36);
  std::string v168 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v169, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v169 = __s;
  }
  int v170 = v97;
  std::string v168 = &unk_26C5C3818;
  char v171 = v98;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v172, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v172 = v99;
  }
  unint64_t v163 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v164, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v164 = v91;
  }
  int v165 = v92;
  unint64_t v163 = &unk_26C5C3818;
  char v166 = v93;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v167, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    std::string v167 = v94;
  }
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v159, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v159 = v86;
  }
  int v160 = v87;
  uint64_t v158 = &unk_26C5C3818;
  char v161 = v88;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v162, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v162 = v89;
  }
  unint64_t v151 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v152, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else {
    std::string v152 = v79;
  }
  int v153 = v80;
  unint64_t v151 = &unk_26C5C37F8;
  char v154 = v81;
  mediaplatform::Data::Data((mediaplatform::Data *)&v155, __src, __n, 1);
  uint64_t v147 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v148, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v148 = v75;
  }
  int v149 = v76;
  uint64_t v147 = &unk_26C5C3858;
  uint64_t v150 = v77;
  long long v142 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v143, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v143 = v70;
  }
  int v144 = v71;
  long long v142 = &unk_26C5C3878;
  uint64_t v145 = v72;
  int v146 = v73;
  uint64_t v137 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v138, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v138 = v65;
  }
  int v139 = v66;
  uint64_t v137 = &unk_26C5C3878;
  uint64_t v140 = v67;
  int v141 = v68;
  uint64_t v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v134, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v134 = v61;
  }
  int v135 = v62;
  uint64_t v133 = &unk_26C5C3858;
  uint64_t v136 = v63;
  long long v129 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v130, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v130 = v57;
  }
  int v131 = v58;
  long long v129 = &unk_26C5C3858;
  uint64_t v132 = v59;
  unint64_t v125 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v126, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v126 = v53;
  }
  int v127 = v54;
  unint64_t v125 = &unk_26C5C3858;
  uint64_t v128 = v55;
  uint64_t v121 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v122, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v122 = v49;
  }
  int v123 = v50;
  uint64_t v121 = &unk_26C5C3858;
  uint64_t v124 = v51;
  long long v114 = &unk_26C5C3AF0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v115, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  }
  else {
    std::string v115 = v42;
  }
  int v116 = v43;
  long long v114 = &unk_26C5C37F8;
  char v117 = v44;
  mediaplatform::Data::Data((mediaplatform::Data *)&v118, v47, v46, 1);
  __n128 v109 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v110, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v110 = v37;
  }
  int v111 = v38;
  __n128 v109 = &unk_26C5C3878;
  uint64_t v112 = v39;
  int v113 = v40;
  uint64_t v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v33;
  }
  int v107 = v34;
  uint64_t v105 = &unk_26C5C3858;
  uint64_t v108 = v35;
  uint64_t v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v232, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  }
  else {
    std::string v232 = v164;
  }
  int v233 = v165;
  uint64_t v231 = &unk_26C5C3818;
  char v234 = v166;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v167;
  }
  uint64_t v226 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v227, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v227 = v159;
  }
  int v228 = v160;
  uint64_t v226 = &unk_26C5C3818;
  char v229 = v161;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = v162;
  }
  uint64_t v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v220, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v220 = v152;
  }
  int v221 = v153;
  uint64_t v219 = &unk_26C5C37F8;
  char v222 = v154;
  mediaplatform::Data::Data((mediaplatform::Data *)&v223, v157, v156, 1);
  std::string v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v216, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  }
  else {
    std::string v216 = v148;
  }
  int v217 = v149;
  std::string v215 = &unk_26C5C3858;
  uint64_t v218 = v150;
  unint64_t v210 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v211, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  }
  else {
    std::string v211 = v143;
  }
  int v212 = v144;
  unint64_t v210 = &unk_26C5C3878;
  uint64_t v213 = v145;
  int v214 = v146;
  uint64_t v205 = &unk_26C5C3AF0;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v206, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  }
  else {
    std::string v206 = v138;
  }
  int v207 = v139;
  uint64_t v205 = &unk_26C5C3878;
  uint64_t v208 = v140;
  int v209 = v141;
  uint64_t v201 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v202, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v202 = v134;
  }
  int v203 = v135;
  uint64_t v201 = &unk_26C5C3858;
  uint64_t v204 = v136;
  unint64_t v197 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v198, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v198 = v130;
  }
  int v199 = v131;
  unint64_t v197 = &unk_26C5C3858;
  uint64_t v200 = v132;
  std::string v193 = &unk_26C5C3AF0;
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v194, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  }
  else {
    std::string v194 = v126;
  }
  int v195 = v127;
  std::string v193 = &unk_26C5C3858;
  uint64_t v196 = v128;
  uint64_t v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = v122;
  }
  int v191 = v123;
  uint64_t v189 = &unk_26C5C3858;
  uint64_t v192 = v124;
  int v182 = &unk_26C5C3AF0;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v183, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v183 = v115;
  }
  int v184 = v116;
  int v182 = &unk_26C5C37F8;
  char v185 = v117;
  mediaplatform::Data::Data((mediaplatform::Data *)&v186, v120, v119, 1);
  uint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v178, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  }
  else {
    std::string v178 = v110;
  }
  int v179 = v111;
  uint64_t v177 = &unk_26C5C3878;
  uint64_t v180 = v112;
  int v181 = v113;
  unint64_t v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v106;
  }
  int v175 = v107;
  unint64_t v173 = &unk_26C5C3858;
  uint64_t v176 = v108;
  int v289 = &unk_26C5C3AF0;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v290, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  }
  else {
    std::string v290 = v227;
  }
  int v291 = v228;
  int v289 = &unk_26C5C3818;
  char v292 = v229;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v293, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v293 = v230;
  }
  unint64_t v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v283, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v283 = v220;
  }
  int v284 = v221;
  unint64_t v282 = &unk_26C5C37F8;
  char v285 = v222;
  mediaplatform::Data::Data((mediaplatform::Data *)&v286, v225, v224, 1);
  int v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v279, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  }
  else {
    std::string v279 = v216;
  }
  int v280 = v217;
  int v278 = &unk_26C5C3858;
  uint64_t v281 = v218;
  unint64_t v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v211;
  }
  int v275 = v212;
  unint64_t v273 = &unk_26C5C3878;
  uint64_t v276 = v213;
  int v277 = v214;
  unint64_t v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v269, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  }
  else {
    std::string v269 = v206;
  }
  int v270 = v207;
  unint64_t v268 = &unk_26C5C3878;
  uint64_t v271 = v208;
  int v272 = v209;
  uint64_t v264 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v265, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  }
  else {
    std::string v265 = v202;
  }
  int v266 = v203;
  uint64_t v264 = &unk_26C5C3858;
  uint64_t v267 = v204;
  int v260 = &unk_26C5C3AF0;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v261, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  }
  else {
    std::string v261 = v198;
  }
  int v262 = v199;
  int v260 = &unk_26C5C3858;
  uint64_t v263 = v200;
  uint64_t v256 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v257, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  }
  else {
    std::string v257 = v194;
  }
  int v258 = v195;
  uint64_t v256 = &unk_26C5C3858;
  uint64_t v259 = v196;
  unint64_t v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v253, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v253 = v190;
  }
  int v254 = v191;
  unint64_t v252 = &unk_26C5C3858;
  uint64_t v255 = v192;
  int v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v246, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v246 = v183;
  }
  int v247 = v184;
  int v245 = &unk_26C5C37F8;
  char v248 = v185;
  mediaplatform::Data::Data((mediaplatform::Data *)&v249, v188, v187, 1);
  unint64_t v240 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v241, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v241 = v178;
  }
  int v242 = v179;
  unint64_t v240 = &unk_26C5C3878;
  uint64_t v243 = v180;
  int v244 = v181;
  uint64_t v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v237, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
    std::string v237 = v174;
  }
  int v238 = v175;
  uint64_t v236 = &unk_26C5C3858;
  uint64_t v239 = v176;
  std::string v338 = &unk_26C5C3AF0;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v339, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  }
  else {
    std::string v339 = v283;
  }
  int v340 = v284;
  std::string v338 = &unk_26C5C37F8;
  char v341 = v285;
  mediaplatform::Data::Data((mediaplatform::Data *)&v342, v288, v287, 1);
  int v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v335, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  }
  else {
    std::string v335 = v279;
  }
  int v336 = v280;
  int v334 = &unk_26C5C3858;
  uint64_t v337 = v281;
  uint64_t v329 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v330, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  }
  else {
    std::string v330 = v274;
  }
  int v331 = v275;
  uint64_t v329 = &unk_26C5C3878;
  uint64_t v332 = v276;
  int v333 = v277;
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v269;
  }
  int v326 = v270;
  uint64_t v324 = &unk_26C5C3878;
  uint64_t v327 = v271;
  int v328 = v272;
  std::string v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v321, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  }
  else {
    std::string v321 = v265;
  }
  int v322 = v266;
  std::string v320 = &unk_26C5C3858;
  uint64_t v323 = v267;
  std::string v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v317, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  }
  else {
    std::string v317 = v261;
  }
  int v318 = v262;
  std::string v316 = &unk_26C5C3858;
  uint64_t v319 = v263;
  int v312 = &unk_26C5C3AF0;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v313, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  }
  else {
    std::string v313 = v257;
  }
  int v314 = v258;
  int v312 = &unk_26C5C3858;
  uint64_t v315 = v259;
  uint64_t v308 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v309, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  }
  else {
    std::string v309 = v253;
  }
  int v310 = v254;
  uint64_t v308 = &unk_26C5C3858;
  uint64_t v311 = v255;
  char v303 = &unk_26C5C3AF0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v304, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else {
    std::string v304 = v246;
  }
  int v305 = v247;
  char v303 = &unk_26C5C37F8;
  char v306 = v248;
  mediaplatform::Data::Data((mediaplatform::Data *)&v307, v251, v250, 1);
  unint64_t v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v241;
  }
  int v300 = v242;
  unint64_t v298 = &unk_26C5C3878;
  uint64_t v301 = v243;
  int v302 = v244;
  uint64_t v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v237;
  }
  int v296 = v238;
  uint64_t v294 = &unk_26C5C3858;
  uint64_t v297 = v239;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(a1, (uint64_t)&v338, (uint64_t)&v334, (uint64_t)&v329, (uint64_t)&v324, (uint64_t)&v320, (uint64_t)&v316, (uint64_t)&v312, (uint64_t)&v308, (uint64_t)&v303, (uint64_t)&v298, (uint64_t)&v294);
  uint64_t v294 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v303);
  uint64_t v308 = &unk_26C5C3AF0;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  int v312 = &unk_26C5C3AF0;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v313.__r_.__value_.__l.__data_);
  }
  std::string v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  std::string v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  uint64_t v329 = &unk_26C5C3AF0;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v330.__r_.__value_.__l.__data_);
  }
  int v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v335.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v338);
  *(void *)(a1 + 592) = &unk_26C5C3AF0;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 600), v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 600) = v290;
  }
  *(_DWORD *)(a1 + 624) = v291;
  *(void *)(a1 + 592) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 628) = v292;
  uint8x8_t v25 = (std::string *)(a1 + 632);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
    *(void *)(a1 + 648) = *((void *)&v293.__r_.__value_.__l + 2);
  }
  uint64_t v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  unint64_t v240 = &unk_26C5C3AF0;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v245);
  unint64_t v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  uint64_t v256 = &unk_26C5C3AF0;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  int v260 = &unk_26C5C3AF0;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  uint64_t v264 = &unk_26C5C3AF0;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v265.__r_.__value_.__l.__data_);
  }
  unint64_t v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  unint64_t v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  int v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v282);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v289);
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 664), v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 664) = v232;
  }
  *(_DWORD *)(a1 + 688) = v233;
  *(void *)(a1 + 656) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 692) = v234;
  BOOL v26 = (std::string *)(a1 + 696);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
    *(void *)(a1 + 712) = *((void *)&v235.__r_.__value_.__l + 2);
  }
  unint64_t v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  uint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v182);
  uint64_t v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  std::string v193 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  unint64_t v197 = &unk_26C5C3AF0;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v198.__r_.__value_.__l.__data_);
  }
  uint64_t v201 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  uint64_t v205 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v206.__r_.__value_.__l.__data_);
  }
  unint64_t v210 = &unk_26C5C3AF0;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v211.__r_.__value_.__l.__data_);
  }
  std::string v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v219);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 728), v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 728) = v169;
  }
  *(_DWORD *)(a1 + 752) = v170;
  *(void *)(a1 + 720) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 756) = v171;
  uint64_t v27 = (std::string *)(a1 + 760);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
    *(void *)(a1 + 776) = *((void *)&v172.__r_.__value_.__l + 2);
  }
  uint64_t v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  __n128 v109 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v114);
  uint64_t v121 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  unint64_t v125 = &unk_26C5C3AF0;
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  long long v129 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  uint64_t v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  uint64_t v137 = &unk_26C5C3AF0;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  long long v142 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  uint64_t v147 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v151);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v158);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v163);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v168);
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 792), v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 792) = v101;
  }
  *(_DWORD *)(a1 + 816) = v102;
  *(void *)(a1 + 784) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 820) = v103;
  unint64_t v28 = (std::string *)(a1 + 824);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
    *(void *)(a1 + 840) = *((void *)&v104.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  unint64_t v36 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v41);
  unint64_t v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  unint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  int v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  int64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  long long v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v78);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v85);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v90);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v95);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v100);
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  uint64_t v29 = (std::string *)(a1 + 856);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v30 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 872) = *(void *)(a2 + 24);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
  }
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 848) = &unk_26C5C3878;
  uint64_t v31 = *(void *)(a2 + 36);
  *(_DWORD *)(a1 + 892) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 884) = v31;
  return a1;
}

void sub_214DEDBDC(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

void sub_214DEE4A4()
{
  *(void *)(v1 - 168) = v0;
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  JUMPOUT(0x214DEE0ACLL);
}

void sub_214DEE4C0()
{
  STACK[0xB48] = v0;
  if (SLOBYTE(STACK[0xB67]) < 0) {
    operator delete((void *)STACK[0xB50]);
  }
  JUMPOUT(0x214DEE0E4);
}

void sub_214DEE4DC()
{
  STACK[0xCE8] = v0;
  if (SLOBYTE(STACK[0xD07]) < 0) {
    operator delete((void *)STACK[0xCF0]);
  }
  JUMPOUT(0x214DEE194);
}

void sub_214DEE4F8()
{
  STACK[0x878] = v0;
  if (SLOBYTE(STACK[0x897]) < 0) {
    operator delete((void *)STACK[0x880]);
  }
  JUMPOUT(0x214DEE1D4);
}

void sub_214DEE514()
{
  STACK[0xA18] = v0;
  if (SLOBYTE(STACK[0xA37]) < 0) {
    operator delete((void *)STACK[0xA20]);
  }
  JUMPOUT(0x214DEE284);
}

void sub_214DEE530()
{
  STACK[0x568] = v0;
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete((void *)STACK[0x570]);
  }
  JUMPOUT(0x214DEE2CCLL);
}

void sub_214DEE54C()
{
  STACK[0x708] = v0;
  if (SLOBYTE(STACK[0x727]) < 0) {
    operator delete((void *)STACK[0x710]);
  }
  JUMPOUT(0x214DEE37CLL);
}

void sub_214DEE568()
{
  STACK[0x218] = v0;
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  JUMPOUT(0x214DEE3CCLL);
}

void sub_214DEE584()
{
  STACK[0x3B8] = v0;
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  JUMPOUT(0x214DEE47CLL);
}

uint64_t mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C37F8;
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 40));
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::Data::~Data(mediaplatform::Data *this)
{
  *(void *)this = &unk_26C5BF2D8;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 3);
    if (v1) {
      MEMORY[0x2166B26D0](v1, 0x1000C8077774924);
    }
  }
}

{
  uint64_t vars8;

  mediaplatform::Data::~Data(this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::EntityQuery::~EntityQuery(mlcore::EntityQuery *this)
{
  *(void *)this = &unk_26C5C44C8;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  mlcore::PropertiesQuery::~PropertiesQuery(this);
}

{
  uint64_t vars8;

  mlcore::EntityQuery::~EntityQuery(this);
  JUMPOUT(0x2166B26F0);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52ELm53ELm54ELm55ELm56ELm57ELm58ELm59ELm60ELm61ELm62ELm63ELm64ELm65ELm66ELm67ELm68ELm69ELm70ELm71ELm72ELm73ELm74ELm75ELm76ELm77ELm78ELm79ELm80ELm81ELm82ELm83ELm84ELm85ELm86EEEEJN6mlcore11MediaColumnIxEENS4_IiEES5_S5_S5_NS4_INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES5_S6_S6_S5_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S5_S6_NS4_IN13mediaplatform4DataEEES6_S6_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S5_S5_S6_SD_SD_S6_S6_S6_S6_S5_SD_SD_S5_S5_S6_S6_S6_S6_S6_S6_S6_SD_SD_SD_S6_S5_S6_SD_S5_SD_SD_S6_S5_S6_SD_S6_S5_S6_S6_S6_SD_SD_S5_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52ELm53ELm54ELm55ELm56ELm57ELm58ELm59ELm60ELm61ELm62ELm63ELm64ELm65ELm66ELm67ELm68ELm69ELm70ELm71ELm72ELm73ELm74ELm75ELm76ELm77ELm78ELm79ELm80ELm81ELm82ELm83ELm84ELm85ELm86EEJS5_S6_S5_S5_S5_SD_S5_S6_S6_S5_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S5_S6_SG_S6_S6_S6_S6_S6_S6_SD_S6_S6_S6_S6_S6_S5_S5_S6_SD_SD_S6_S6_S6_S6_S5_SD_SD_S5_S5_S6_S6_S6_S6_S6_S6_S6_SD_SD_SD_S6_S5_S6_SD_S5_SD_SD_S6_S5_S6_SD_S6_S5_S6_S6_S6_SD_SD_S5_S6_S6_EJEJEJRS5_RS6_SJ_SJ_SJ_RSD_SJ_SK_SK_SJ_SK_SK_SK_SK_SL_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SK_SJ_SK_RSG_SK_SK_SK_SK_SK_SK_SL_SK_SK_SK_SK_SK_SJ_SJ_SK_SL_SL_SK_SK_SK_SK_SJ_SL_SL_SJ_SJ_SK_SK_SK_SK_SK_SK_SK_SL_SL_SL_SK_SJ_SK_SL_SJ_SL_SL_SK_SJ_SK_SL_SK_SJ_SK_SK_SK_SL_SL_SJ_SK_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v79 = std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1, a2)+ 48;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v79, a3);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 96, a4);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 144, a5);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 192, a6);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 240, a7);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 304, a8);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 352, a9);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 400, a10);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 448, a11);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 496, a12);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 544, a13);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 592, a14);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 640, a15);
  *(void *)(a1 + 688) = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 696), *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else
  {
    long long v80 = *(_OWORD *)(a16 + 8);
    *(void *)(a1 + 712) = *(void *)(a16 + 24);
    *(_OWORD *)(a1 + 696) = v80;
  }
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a16 + 32);
  *(void *)(a1 + 688) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 724) = *(unsigned char *)(a16 + 36);
  char v81 = (std::string *)(a1 + 728);
  if (*(char *)(a16 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(a16 + 40), *(void *)(a16 + 48));
  }
  else
  {
    long long v82 = *(_OWORD *)(a16 + 40);
    *(void *)(a1 + 744) = *(void *)(a16 + 56);
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
  }
  *(void *)(a1 + 688) = &unk_26C5C4788;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 752, a17);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 800, a18);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 848, a19);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 896, a20);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 944, a21);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 992, a22);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1040, a23);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1088, a24);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1136, a25);
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  long long v83 = (std::string *)(a1 + 1192);
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
  }
  else
  {
    long long v84 = *(_OWORD *)(a26 + 8);
    *(void *)(a1 + 1208) = *(void *)(a26 + 24);
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
  }
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a26 + 32);
  *(void *)(a1 + 1184) = &unk_26C5C3858;
  *(void *)(a1 + 1220) = *(void *)(a26 + 36);
  *(void *)(a1 + 1184) = &unk_26C5C47C8;
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1240), *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else
  {
    long long v85 = *(_OWORD *)(a27 + 8);
    *(void *)(a1 + 1256) = *(void *)(a27 + 24);
    *(_OWORD *)(a1 + 1240) = v85;
  }
  *(_DWORD *)(a1 + 1264) = *(_DWORD *)(a27 + 32);
  *(void *)(a1 + 1232) = &unk_26C5C3858;
  *(void *)(a1 + 1268) = *(void *)(a27 + 36);
  *(void *)(a1 + 1232) = &unk_26C5C47C8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1280, a28);
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  std::string v86 = (std::string *)(a1 + 1336);
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else
  {
    long long v87 = *(_OWORD *)(a29 + 8);
    *(void *)(a1 + 1352) = *(void *)(a29 + 24);
    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
  }
  *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a29 + 32);
  *(void *)(a1 + 1328) = &unk_26C5C3878;
  uint64_t v88 = *(void *)(a29 + 36);
  *(_DWORD *)(a1 + 1372) = *(_DWORD *)(a29 + 44);
  *(void *)(a1 + 1364) = v88;
  *(void *)(a1 + 1328) = &unk_26C5C47E8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1376, a30);
  *(void *)(a1 + 1424) = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1432), *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
  }
  else
  {
    long long v89 = *(_OWORD *)(a31 + 8);
    *(void *)(a1 + 1448) = *(void *)(a31 + 24);
    *(_OWORD *)(a1 + 1432) = v89;
  }
  *(_DWORD *)(a1 + 1456) = *(_DWORD *)(a31 + 32);
  *(void *)(a1 + 1424) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 1460) = *(unsigned char *)(a31 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 1464), *(const void **)(a31 + 64), *(void *)(a31 + 48), 1);
  *(void *)(a1 + 1424) = &unk_26C5C4768;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1504, a32);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1552, a33);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1600, a34);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1648, a35);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1696, a36);
  *(void *)(a1 + 1744) = &unk_26C5C3AF0;
  long long v90 = (std::string *)(a1 + 1752);
  if (*(char *)(a37 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else
  {
    long long v91 = *(_OWORD *)(a37 + 8);
    *(void *)(a1 + 1768) = *(void *)(a37 + 24);
    *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v91;
  }
  *(_DWORD *)(a1 + 1776) = *(_DWORD *)(a37 + 32);
  *(void *)(a1 + 1744) = &unk_26C5C3858;
  *(void *)(a1 + 1780) = *(void *)(a37 + 36);
  *(void *)(a1 + 1744) = &unk_26C5C47C8;
  std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 1792, a38);
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1864), *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
  }
  else
  {
    long long v92 = *(_OWORD *)(a39 + 8);
    *(void *)(a1 + 1880) = *(void *)(a39 + 24);
    *(_OWORD *)(a1 + 1864) = v92;
  }
  *(_DWORD *)(a1 + 1888) = *(_DWORD *)(a39 + 32);
  *(void *)(a1 + 1856) = &unk_26C5C3858;
  *(void *)(a1 + 1892) = *(void *)(a39 + 36);
  *(void *)(a1 + 1856) = &unk_26C5C47C8;
  *(void *)(a1 + 1904) = &unk_26C5C3AF0;
  char v93 = (std::string *)(a1 + 1912);
  if (*(char *)(a40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
  }
  else
  {
    long long v94 = *(_OWORD *)(a40 + 8);
    *(void *)(a1 + 1928) = *(void *)(a40 + 24);
    *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v94;
  }
  *(_DWORD *)(a1 + 1936) = *(_DWORD *)(a40 + 32);
  *(void *)(a1 + 1904) = &unk_26C5C3858;
  *(void *)(a1 + 1940) = *(void *)(a40 + 36);
  *(void *)(a1 + 1904) = &unk_26C5C47C8;
  *(void *)(a1 + 1952) = &unk_26C5C3AF0;
  uint64_t v95 = (std::string *)(a1 + 1960);
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v95, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
  }
  else
  {
    long long v96 = *(_OWORD *)(a41 + 8);
    *(void *)(a1 + 1976) = *(void *)(a41 + 24);
    *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
  }
  *(_DWORD *)(a1 + 1984) = *(_DWORD *)(a41 + 32);
  *(void *)(a1 + 1952) = &unk_26C5C3858;
  *(void *)(a1 + 1988) = *(void *)(a41 + 36);
  *(void *)(a1 + 1952) = &unk_26C5C47C8;
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a42 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2008), *(const std::string::value_type **)(a42 + 8), *(void *)(a42 + 16));
  }
  else
  {
    long long v97 = *(_OWORD *)(a42 + 8);
    *(void *)(a1 + 2024) = *(void *)(a42 + 24);
    *(_OWORD *)(a1 + 2008) = v97;
  }
  *(_DWORD *)(a1 + 2032) = *(_DWORD *)(a42 + 32);
  *(void *)(a1 + 2000) = &unk_26C5C3858;
  *(void *)(a1 + 2036) = *(void *)(a42 + 36);
  *(void *)(a1 + 2000) = &unk_26C5C47C8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2048, a43);
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a44 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2104), *(const std::string::value_type **)(a44 + 8), *(void *)(a44 + 16));
  }
  else
  {
    long long v98 = *(_OWORD *)(a44 + 8);
    *(void *)(a1 + 2120) = *(void *)(a44 + 24);
    *(_OWORD *)(a1 + 2104) = v98;
  }
  *(_DWORD *)(a1 + 2128) = *(_DWORD *)(a44 + 32);
  *(void *)(a1 + 2096) = &unk_26C5C3878;
  uint64_t v99 = *(void *)(a44 + 36);
  *(_DWORD *)(a1 + 2140) = *(_DWORD *)(a44 + 44);
  *(void *)(a1 + 2132) = v99;
  *(void *)(a1 + 2096) = &unk_26C5C47E8;
  *(void *)(a1 + 2144) = &unk_26C5C3AF0;
  uint64_t v100 = (std::string *)(a1 + 2152);
  if (*(char *)(a45 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)(a45 + 8), *(void *)(a45 + 16));
  }
  else
  {
    long long v101 = *(_OWORD *)(a45 + 8);
    *(void *)(a1 + 2168) = *(void *)(a45 + 24);
    *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
  }
  *(_DWORD *)(a1 + 2176) = *(_DWORD *)(a45 + 32);
  *(void *)(a1 + 2144) = &unk_26C5C3878;
  uint64_t v102 = *(void *)(a45 + 36);
  *(_DWORD *)(a1 + 2188) = *(_DWORD *)(a45 + 44);
  *(void *)(a1 + 2180) = v102;
  *(void *)(a1 + 2144) = &unk_26C5C47E8;
  *(void *)(a1 + 2192) = &unk_26C5C3AF0;
  char v103 = (std::string *)(a1 + 2200);
  if (*(char *)(a46 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v103, *(const std::string::value_type **)(a46 + 8), *(void *)(a46 + 16));
  }
  else
  {
    long long v104 = *(_OWORD *)(a46 + 8);
    *(void *)(a1 + 2216) = *(void *)(a46 + 24);
    *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
  }
  *(_DWORD *)(a1 + 2224) = *(_DWORD *)(a46 + 32);
  *(void *)(a1 + 2192) = &unk_26C5C3858;
  *(void *)(a1 + 2228) = *(void *)(a46 + 36);
  *(void *)(a1 + 2192) = &unk_26C5C47C8;
  *(void *)(a1 + 2240) = &unk_26C5C3AF0;
  if (*(char *)(a47 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2248), *(const std::string::value_type **)(a47 + 8), *(void *)(a47 + 16));
  }
  else
  {
    long long v105 = *(_OWORD *)(a47 + 8);
    *(void *)(a1 + 2264) = *(void *)(a47 + 24);
    *(_OWORD *)(a1 + 2248) = v105;
  }
  *(_DWORD *)(a1 + 2272) = *(_DWORD *)(a47 + 32);
  *(void *)(a1 + 2240) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 2276) = *(unsigned char *)(a47 + 36);
  std::string v106 = (std::string *)(a1 + 2280);
  if (*(char *)(a47 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)(a47 + 40), *(void *)(a47 + 48));
  }
  else
  {
    long long v107 = *(_OWORD *)(a47 + 40);
    *(void *)(a1 + 2296) = *(void *)(a47 + 56);
    *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
  }
  *(void *)(a1 + 2240) = &unk_26C5C4788;
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a48 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2312), *(const std::string::value_type **)(a48 + 8), *(void *)(a48 + 16));
  }
  else
  {
    long long v108 = *(_OWORD *)(a48 + 8);
    *(void *)(a1 + 2328) = *(void *)(a48 + 24);
    *(_OWORD *)(a1 + 2312) = v108;
  }
  *(_DWORD *)(a1 + 2336) = *(_DWORD *)(a48 + 32);
  *(void *)(a1 + 2304) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 2340) = *(unsigned char *)(a48 + 36);
  __n128 v109 = (std::string *)(a1 + 2344);
  if (*(char *)(a48 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)(a48 + 40), *(void *)(a48 + 48));
  }
  else
  {
    long long v110 = *(_OWORD *)(a48 + 40);
    *(void *)(a1 + 2360) = *(void *)(a48 + 56);
    *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
  }
  *(void *)(a1 + 2304) = &unk_26C5C4788;
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2376), *(const std::string::value_type **)(a49 + 8), *(void *)(a49 + 16));
  }
  else
  {
    long long v111 = *(_OWORD *)(a49 + 8);
    *(void *)(a1 + 2392) = *(void *)(a49 + 24);
    *(_OWORD *)(a1 + 2376) = v111;
  }
  *(_DWORD *)(a1 + 2400) = *(_DWORD *)(a49 + 32);
  *(void *)(a1 + 2368) = &unk_26C5C3858;
  *(void *)(a1 + 2404) = *(void *)(a49 + 36);
  *(void *)(a1 + 2368) = &unk_26C5C47C8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2416, a50);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2464, a51);
  *(void *)(a1 + 2512) = &unk_26C5C3AF0;
  uint64_t v112 = (std::string *)(a1 + 2520);
  if (*(char *)(a52 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v112, *(const std::string::value_type **)(a52 + 8), *(void *)(a52 + 16));
  }
  else
  {
    long long v113 = *(_OWORD *)(a52 + 8);
    *(void *)(a1 + 2536) = *(void *)(a52 + 24);
    *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
  }
  *(_DWORD *)(a1 + 2544) = *(_DWORD *)(a52 + 32);
  *(void *)(a1 + 2512) = &unk_26C5C3858;
  *(void *)(a1 + 2548) = *(void *)(a52 + 36);
  *(void *)(a1 + 2512) = &unk_26C5C47C8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2560, a53);
  std::__tuple_leaf<52ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 2608, a54);
  *(void *)(a1 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(a55 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2680), *(const std::string::value_type **)(a55 + 8), *(void *)(a55 + 16));
  }
  else
  {
    long long v114 = *(_OWORD *)(a55 + 8);
    *(void *)(a1 + 2696) = *(void *)(a55 + 24);
    *(_OWORD *)(a1 + 2680) = v114;
  }
  *(_DWORD *)(a1 + 2704) = *(_DWORD *)(a55 + 32);
  *(void *)(a1 + 2672) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 2708) = *(unsigned char *)(a55 + 36);
  std::string v115 = (std::string *)(a1 + 2712);
  if (*(char *)(a55 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v115, *(const std::string::value_type **)(a55 + 40), *(void *)(a55 + 48));
  }
  else
  {
    long long v116 = *(_OWORD *)(a55 + 40);
    *(void *)(a1 + 2728) = *(void *)(a55 + 56);
    *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v116;
  }
  *(void *)(a1 + 2672) = &unk_26C5C4788;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2736, a56);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2784, a57);
  *(void *)(a1 + 2832) = &unk_26C5C3AF0;
  char v117 = (std::string *)(a1 + 2840);
  if (*(char *)(a58 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v117, *(const std::string::value_type **)(a58 + 8), *(void *)(a58 + 16));
  }
  else
  {
    long long v118 = *(_OWORD *)(a58 + 8);
    *(void *)(a1 + 2856) = *(void *)(a58 + 24);
    *(_OWORD *)&v117->__r_.__value_.__l.__data_ = v118;
  }
  *(_DWORD *)(a1 + 2864) = *(_DWORD *)(a58 + 32);
  *(void *)(a1 + 2832) = &unk_26C5C3858;
  *(void *)(a1 + 2868) = *(void *)(a58 + 36);
  *(void *)(a1 + 2832) = &unk_26C5C47C8;
  *(void *)(a1 + 2880) = &unk_26C5C3AF0;
  if (*(char *)(a59 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2888), *(const std::string::value_type **)(a59 + 8), *(void *)(a59 + 16));
  }
  else
  {
    long long v119 = *(_OWORD *)(a59 + 8);
    *(void *)(a1 + 2904) = *(void *)(a59 + 24);
    *(_OWORD *)(a1 + 2888) = v119;
  }
  *(_DWORD *)(a1 + 2912) = *(_DWORD *)(a59 + 32);
  *(void *)(a1 + 2880) = &unk_26C5C3858;
  *(void *)(a1 + 2916) = *(void *)(a59 + 36);
  *(void *)(a1 + 2880) = &unk_26C5C47C8;
  *(void *)(a1 + 2928) = &unk_26C5C3AF0;
  uint64_t v120 = (std::string *)(a1 + 2936);
  if (*(char *)(a60 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)(a60 + 8), *(void *)(a60 + 16));
  }
  else
  {
    long long v121 = *(_OWORD *)(a60 + 8);
    *(void *)(a1 + 2952) = *(void *)(a60 + 24);
    *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
  }
  *(_DWORD *)(a1 + 2960) = *(_DWORD *)(a60 + 32);
  *(void *)(a1 + 2928) = &unk_26C5C3858;
  *(void *)(a1 + 2964) = *(void *)(a60 + 36);
  *(void *)(a1 + 2928) = &unk_26C5C47C8;
  *(void *)(a1 + 2976) = &unk_26C5C3AF0;
  std::string v122 = (std::string *)(a1 + 2984);
  if (*(char *)(a61 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v122, *(const std::string::value_type **)(a61 + 8), *(void *)(a61 + 16));
  }
  else
  {
    long long v123 = *(_OWORD *)(a61 + 8);
    *(void *)(a1 + 3000) = *(void *)(a61 + 24);
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
  }
  *(_DWORD *)(a1 + 3008) = *(_DWORD *)(a61 + 32);
  *(void *)(a1 + 2976) = &unk_26C5C3858;
  *(void *)(a1 + 3012) = *(void *)(a61 + 36);
  *(void *)(a1 + 2976) = &unk_26C5C47C8;
  *(void *)(a1 + 3024) = &unk_26C5C3AF0;
  uint64_t v124 = (std::string *)(a1 + 3032);
  if (*(char *)(a62 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)(a62 + 8), *(void *)(a62 + 16));
  }
  else
  {
    long long v125 = *(_OWORD *)(a62 + 8);
    *(void *)(a1 + 3048) = *(void *)(a62 + 24);
    *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v125;
  }
  *(_DWORD *)(a1 + 3056) = *(_DWORD *)(a62 + 32);
  *(void *)(a1 + 3024) = &unk_26C5C3858;
  *(void *)(a1 + 3060) = *(void *)(a62 + 36);
  *(void *)(a1 + 3024) = &unk_26C5C47C8;
  *(void *)(a1 + 3072) = &unk_26C5C3AF0;
  std::string v126 = (std::string *)(a1 + 3080);
  if (*(char *)(a63 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v126, *(const std::string::value_type **)(a63 + 8), *(void *)(a63 + 16));
  }
  else
  {
    long long v127 = *(_OWORD *)(a63 + 8);
    *(void *)(a1 + 3096) = *(void *)(a63 + 24);
    *(_OWORD *)&v126->__r_.__value_.__l.__data_ = v127;
  }
  *(_DWORD *)(a1 + 3104) = *(_DWORD *)(a63 + 32);
  *(void *)(a1 + 3072) = &unk_26C5C3858;
  *(void *)(a1 + 3108) = *(void *)(a63 + 36);
  *(void *)(a1 + 3072) = &unk_26C5C47C8;
  *(void *)(a1 + 3120) = &unk_26C5C3AF0;
  uint64_t v128 = (std::string *)(a1 + 3128);
  if (*(char *)(a64 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v128, *(const std::string::value_type **)(a64 + 8), *(void *)(a64 + 16));
  }
  else
  {
    long long v129 = *(_OWORD *)(a64 + 8);
    *(void *)(a1 + 3144) = *(void *)(a64 + 24);
    *(_OWORD *)&v128->__r_.__value_.__l.__data_ = v129;
  }
  *(_DWORD *)(a1 + 3152) = *(_DWORD *)(a64 + 32);
  *(void *)(a1 + 3120) = &unk_26C5C3858;
  *(void *)(a1 + 3156) = *(void *)(a64 + 36);
  *(void *)(a1 + 3120) = &unk_26C5C47C8;
  *(void *)(a1 + 3168) = &unk_26C5C3AF0;
  if (*(char *)(a65 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3176), *(const std::string::value_type **)(a65 + 8), *(void *)(a65 + 16));
  }
  else
  {
    long long v130 = *(_OWORD *)(a65 + 8);
    *(void *)(a1 + 3192) = *(void *)(a65 + 24);
    *(_OWORD *)(a1 + 3176) = v130;
  }
  *(_DWORD *)(a1 + 3200) = *(_DWORD *)(a65 + 32);
  *(void *)(a1 + 3168) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3204) = *(unsigned char *)(a65 + 36);
  int v131 = (std::string *)(a1 + 3208);
  if (*(char *)(a65 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v131, *(const std::string::value_type **)(a65 + 40), *(void *)(a65 + 48));
  }
  else
  {
    long long v132 = *(_OWORD *)(a65 + 40);
    *(void *)(a1 + 3224) = *(void *)(a65 + 56);
    *(_OWORD *)&v131->__r_.__value_.__l.__data_ = v132;
  }
  *(void *)(a1 + 3168) = &unk_26C5C4788;
  *(void *)(a1 + 3232) = &unk_26C5C3AF0;
  if (*(char *)(a66 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3240), *(const std::string::value_type **)(a66 + 8), *(void *)(a66 + 16));
  }
  else
  {
    long long v133 = *(_OWORD *)(a66 + 8);
    *(void *)(a1 + 3256) = *(void *)(a66 + 24);
    *(_OWORD *)(a1 + 3240) = v133;
  }
  *(_DWORD *)(a1 + 3264) = *(_DWORD *)(a66 + 32);
  *(void *)(a1 + 3232) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3268) = *(unsigned char *)(a66 + 36);
  std::string v134 = (std::string *)(a1 + 3272);
  if (*(char *)(a66 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)(a66 + 40), *(void *)(a66 + 48));
  }
  else
  {
    long long v135 = *(_OWORD *)(a66 + 40);
    *(void *)(a1 + 3288) = *(void *)(a66 + 56);
    *(_OWORD *)&v134->__r_.__value_.__l.__data_ = v135;
  }
  *(void *)(a1 + 3232) = &unk_26C5C4788;
  *(void *)(a1 + 3296) = &unk_26C5C3AF0;
  if (*(char *)(a67 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3304), *(const std::string::value_type **)(a67 + 8), *(void *)(a67 + 16));
  }
  else
  {
    long long v136 = *(_OWORD *)(a67 + 8);
    *(void *)(a1 + 3320) = *(void *)(a67 + 24);
    *(_OWORD *)(a1 + 3304) = v136;
  }
  *(_DWORD *)(a1 + 3328) = *(_DWORD *)(a67 + 32);
  *(void *)(a1 + 3296) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3332) = *(unsigned char *)(a67 + 36);
  uint64_t v137 = (std::string *)(a1 + 3336);
  if (*(char *)(a67 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v137, *(const std::string::value_type **)(a67 + 40), *(void *)(a67 + 48));
  }
  else
  {
    long long v138 = *(_OWORD *)(a67 + 40);
    *(void *)(a1 + 3352) = *(void *)(a67 + 56);
    *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v138;
  }
  *(void *)(a1 + 3296) = &unk_26C5C4788;
  *(void *)(a1 + 3360) = &unk_26C5C3AF0;
  if (*(char *)(a68 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3368), *(const std::string::value_type **)(a68 + 8), *(void *)(a68 + 16));
  }
  else
  {
    long long v139 = *(_OWORD *)(a68 + 8);
    *(void *)(a1 + 3384) = *(void *)(a68 + 24);
    *(_OWORD *)(a1 + 3368) = v139;
  }
  *(_DWORD *)(a1 + 3392) = *(_DWORD *)(a68 + 32);
  *(void *)(a1 + 3360) = &unk_26C5C3858;
  *(void *)(a1 + 3396) = *(void *)(a68 + 36);
  *(void *)(a1 + 3360) = &unk_26C5C47C8;
  *(void *)(a1 + 3408) = &unk_26C5C3AF0;
  uint64_t v140 = (std::string *)(a1 + 3416);
  if (*(char *)(a69 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)(a69 + 8), *(void *)(a69 + 16));
  }
  else
  {
    long long v141 = *(_OWORD *)(a69 + 8);
    *(void *)(a1 + 3432) = *(void *)(a69 + 24);
    *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v141;
  }
  *(_DWORD *)(a1 + 3440) = *(_DWORD *)(a69 + 32);
  *(void *)(a1 + 3408) = &unk_26C5C3878;
  uint64_t v142 = *(void *)(a69 + 36);
  *(_DWORD *)(a1 + 3452) = *(_DWORD *)(a69 + 44);
  *(void *)(a1 + 3444) = v142;
  *(void *)(a1 + 3408) = &unk_26C5C47E8;
  *(void *)(a1 + 3456) = &unk_26C5C3AF0;
  std::string v143 = (std::string *)(a1 + 3464);
  if (*(char *)(a70 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v143, *(const std::string::value_type **)(a70 + 8), *(void *)(a70 + 16));
  }
  else
  {
    long long v144 = *(_OWORD *)(a70 + 8);
    *(void *)(a1 + 3480) = *(void *)(a70 + 24);
    *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
  }
  *(_DWORD *)(a1 + 3488) = *(_DWORD *)(a70 + 32);
  *(void *)(a1 + 3456) = &unk_26C5C3858;
  *(void *)(a1 + 3492) = *(void *)(a70 + 36);
  *(void *)(a1 + 3456) = &unk_26C5C47C8;
  *(void *)(a1 + 3504) = &unk_26C5C3AF0;
  if (*(char *)(a71 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3512), *(const std::string::value_type **)(a71 + 8), *(void *)(a71 + 16));
  }
  else
  {
    long long v145 = *(_OWORD *)(a71 + 8);
    *(void *)(a1 + 3528) = *(void *)(a71 + 24);
    *(_OWORD *)(a1 + 3512) = v145;
  }
  *(_DWORD *)(a1 + 3536) = *(_DWORD *)(a71 + 32);
  *(void *)(a1 + 3504) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3540) = *(unsigned char *)(a71 + 36);
  int v146 = (std::string *)(a1 + 3544);
  if (*(char *)(a71 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v146, *(const std::string::value_type **)(a71 + 40), *(void *)(a71 + 48));
  }
  else
  {
    long long v147 = *(_OWORD *)(a71 + 40);
    *(void *)(a1 + 3560) = *(void *)(a71 + 56);
    *(_OWORD *)&v146->__r_.__value_.__l.__data_ = v147;
  }
  *(void *)(a1 + 3504) = &unk_26C5C4788;
  *(void *)(a1 + 3568) = &unk_26C5C3AF0;
  std::string v148 = (std::string *)(a1 + 3576);
  if (*(char *)(a72 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v148, *(const std::string::value_type **)(a72 + 8), *(void *)(a72 + 16));
  }
  else
  {
    long long v149 = *(_OWORD *)(a72 + 8);
    *(void *)(a1 + 3592) = *(void *)(a72 + 24);
    *(_OWORD *)&v148->__r_.__value_.__l.__data_ = v149;
  }
  unint64_t v150 = STACK[0x600];
  *(_DWORD *)(a1 + 3600) = *(_DWORD *)(a72 + 32);
  *(void *)(a1 + 3568) = &unk_26C5C3878;
  uint64_t v151 = *(void *)(a72 + 36);
  *(_DWORD *)(a1 + 3612) = *(_DWORD *)(a72 + 44);
  *(void *)(a1 + 3604) = v151;
  *(void *)(a1 + 3568) = &unk_26C5C47E8;
  *(void *)(a1 + 3616) = &unk_26C5C3AF0;
  if (*(char *)(v150 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3624), *(const std::string::value_type **)(v150 + 8), *(void *)(v150 + 16));
  }
  else
  {
    long long v152 = *(_OWORD *)(v150 + 8);
    *(void *)(a1 + 3640) = *(void *)(v150 + 24);
    *(_OWORD *)(a1 + 3624) = v152;
  }
  *(_DWORD *)(a1 + 3648) = *(_DWORD *)(v150 + 32);
  *(void *)(a1 + 3616) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3652) = *(unsigned char *)(v150 + 36);
  int v153 = (std::string *)(a1 + 3656);
  if (*(char *)(v150 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v153, *(const std::string::value_type **)(v150 + 40), *(void *)(v150 + 48));
  }
  else
  {
    long long v154 = *(_OWORD *)(v150 + 40);
    *(void *)(a1 + 3672) = *(void *)(v150 + 56);
    *(_OWORD *)&v153->__r_.__value_.__l.__data_ = v154;
  }
  unint64_t v155 = STACK[0x608];
  *(void *)(a1 + 3616) = &unk_26C5C4788;
  *(void *)(a1 + 3680) = &unk_26C5C3AF0;
  if (*(char *)(v155 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3688), *(const std::string::value_type **)(v155 + 8), *(void *)(v155 + 16));
  }
  else
  {
    long long v156 = *(_OWORD *)(v155 + 8);
    *(void *)(a1 + 3704) = *(void *)(v155 + 24);
    *(_OWORD *)(a1 + 3688) = v156;
  }
  *(_DWORD *)(a1 + 3712) = *(_DWORD *)(v155 + 32);
  *(void *)(a1 + 3680) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3716) = *(unsigned char *)(v155 + 36);
  uint64_t v157 = (std::string *)(a1 + 3720);
  if (*(char *)(v155 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v157, *(const std::string::value_type **)(v155 + 40), *(void *)(v155 + 48));
  }
  else
  {
    long long v158 = *(_OWORD *)(v155 + 40);
    *(void *)(a1 + 3736) = *(void *)(v155 + 56);
    *(_OWORD *)&v157->__r_.__value_.__l.__data_ = v158;
  }
  unint64_t v159 = STACK[0x610];
  *(void *)(a1 + 3680) = &unk_26C5C4788;
  *(void *)(a1 + 3744) = &unk_26C5C3AF0;
  if (*(char *)(v159 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3752), *(const std::string::value_type **)(v159 + 8), *(void *)(v159 + 16));
  }
  else
  {
    long long v160 = *(_OWORD *)(v159 + 8);
    *(void *)(a1 + 3768) = *(void *)(v159 + 24);
    *(_OWORD *)(a1 + 3752) = v160;
  }
  unint64_t v161 = STACK[0x618];
  *(_DWORD *)(a1 + 3776) = *(_DWORD *)(v159 + 32);
  *(void *)(a1 + 3744) = &unk_26C5C3858;
  *(void *)(a1 + 3780) = *(void *)(v159 + 36);
  *(void *)(a1 + 3744) = &unk_26C5C47C8;
  *(void *)(a1 + 3792) = &unk_26C5C3AF0;
  std::string v162 = (std::string *)(a1 + 3800);
  if (*(char *)(v161 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v162, *(const std::string::value_type **)(v161 + 8), *(void *)(v161 + 16));
  }
  else
  {
    long long v163 = *(_OWORD *)(v161 + 8);
    *(void *)(a1 + 3816) = *(void *)(v161 + 24);
    *(_OWORD *)&v162->__r_.__value_.__l.__data_ = v163;
  }
  unint64_t v164 = STACK[0x620];
  *(_DWORD *)(a1 + 3824) = *(_DWORD *)(v161 + 32);
  *(void *)(a1 + 3792) = &unk_26C5C3878;
  uint64_t v165 = *(void *)(v161 + 36);
  *(_DWORD *)(a1 + 3836) = *(_DWORD *)(v161 + 44);
  *(void *)(a1 + 3828) = v165;
  *(void *)(a1 + 3792) = &unk_26C5C47E8;
  *(void *)(a1 + 3840) = &unk_26C5C3AF0;
  char v166 = (std::string *)(a1 + 3848);
  if (*(char *)(v164 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v166, *(const std::string::value_type **)(v164 + 8), *(void *)(v164 + 16));
  }
  else
  {
    long long v167 = *(_OWORD *)(v164 + 8);
    *(void *)(a1 + 3864) = *(void *)(v164 + 24);
    *(_OWORD *)&v166->__r_.__value_.__l.__data_ = v167;
  }
  unint64_t v168 = STACK[0x628];
  *(_DWORD *)(a1 + 3872) = *(_DWORD *)(v164 + 32);
  *(void *)(a1 + 3840) = &unk_26C5C3858;
  *(void *)(a1 + 3876) = *(void *)(v164 + 36);
  *(void *)(a1 + 3840) = &unk_26C5C47C8;
  *(void *)(a1 + 3888) = &unk_26C5C3AF0;
  if (*(char *)(v168 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3896), *(const std::string::value_type **)(v168 + 8), *(void *)(v168 + 16));
  }
  else
  {
    long long v169 = *(_OWORD *)(v168 + 8);
    *(void *)(a1 + 3912) = *(void *)(v168 + 24);
    *(_OWORD *)(a1 + 3896) = v169;
  }
  *(_DWORD *)(a1 + 3920) = *(_DWORD *)(v168 + 32);
  *(void *)(a1 + 3888) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 3924) = *(unsigned char *)(v168 + 36);
  int v170 = (std::string *)(a1 + 3928);
  if (*(char *)(v168 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v170, *(const std::string::value_type **)(v168 + 40), *(void *)(v168 + 48));
  }
  else
  {
    long long v171 = *(_OWORD *)(v168 + 40);
    *(void *)(a1 + 3944) = *(void *)(v168 + 56);
    *(_OWORD *)&v170->__r_.__value_.__l.__data_ = v171;
  }
  unint64_t v172 = STACK[0x630];
  *(void *)(a1 + 3888) = &unk_26C5C4788;
  *(void *)(a1 + 3952) = &unk_26C5C3AF0;
  if (*(char *)(v172 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 3960), *(const std::string::value_type **)(v172 + 8), *(void *)(v172 + 16));
  }
  else
  {
    long long v173 = *(_OWORD *)(v172 + 8);
    *(void *)(a1 + 3976) = *(void *)(v172 + 24);
    *(_OWORD *)(a1 + 3960) = v173;
  }
  unint64_t v174 = STACK[0x638];
  *(_DWORD *)(a1 + 3984) = *(_DWORD *)(v172 + 32);
  *(void *)(a1 + 3952) = &unk_26C5C3858;
  *(void *)(a1 + 3988) = *(void *)(v172 + 36);
  *(void *)(a1 + 3952) = &unk_26C5C47C8;
  *(void *)(a1 + 4000) = &unk_26C5C3AF0;
  int v175 = (std::string *)(a1 + 4008);
  if (*(char *)(v174 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v175, *(const std::string::value_type **)(v174 + 8), *(void *)(v174 + 16));
  }
  else
  {
    long long v176 = *(_OWORD *)(v174 + 8);
    *(void *)(a1 + 4024) = *(void *)(v174 + 24);
    *(_OWORD *)&v175->__r_.__value_.__l.__data_ = v176;
  }
  unint64_t v177 = STACK[0x640];
  *(_DWORD *)(a1 + 4032) = *(_DWORD *)(v174 + 32);
  *(void *)(a1 + 4000) = &unk_26C5C3878;
  uint64_t v178 = *(void *)(v174 + 36);
  *(_DWORD *)(a1 + 4044) = *(_DWORD *)(v174 + 44);
  *(void *)(a1 + 4036) = v178;
  *(void *)(a1 + 4000) = &unk_26C5C47E8;
  *(void *)(a1 + 4048) = &unk_26C5C3AF0;
  int v179 = (std::string *)(a1 + 4056);
  if (*(char *)(v177 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v179, *(const std::string::value_type **)(v177 + 8), *(void *)(v177 + 16));
  }
  else
  {
    long long v180 = *(_OWORD *)(v177 + 8);
    *(void *)(a1 + 4072) = *(void *)(v177 + 24);
    *(_OWORD *)&v179->__r_.__value_.__l.__data_ = v180;
  }
  unint64_t v181 = STACK[0x648];
  *(_DWORD *)(a1 + 4080) = *(_DWORD *)(v177 + 32);
  *(void *)(a1 + 4048) = &unk_26C5C3858;
  *(void *)(a1 + 4084) = *(void *)(v177 + 36);
  *(void *)(a1 + 4048) = &unk_26C5C47C8;
  *(void *)(a1 + 4096) = &unk_26C5C3AF0;
  int v182 = (std::string *)(a1 + 4104);
  if (*(char *)(v181 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v182, *(const std::string::value_type **)(v181 + 8), *(void *)(v181 + 16));
  }
  else
  {
    long long v183 = *(_OWORD *)(v181 + 8);
    *(void *)(a1 + 4120) = *(void *)(v181 + 24);
    *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
  }
  unint64_t v184 = STACK[0x650];
  *(_DWORD *)(a1 + 4128) = *(_DWORD *)(v181 + 32);
  *(void *)(a1 + 4096) = &unk_26C5C3858;
  *(void *)(a1 + 4132) = *(void *)(v181 + 36);
  *(void *)(a1 + 4096) = &unk_26C5C47C8;
  *(void *)(a1 + 4144) = &unk_26C5C3AF0;
  char v185 = (std::string *)(a1 + 4152);
  if (*(char *)(v184 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v185, *(const std::string::value_type **)(v184 + 8), *(void *)(v184 + 16));
  }
  else
  {
    long long v186 = *(_OWORD *)(v184 + 8);
    *(void *)(a1 + 4168) = *(void *)(v184 + 24);
    *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
  }
  unint64_t v187 = STACK[0x658];
  *(_DWORD *)(a1 + 4176) = *(_DWORD *)(v184 + 32);
  *(void *)(a1 + 4144) = &unk_26C5C3858;
  *(void *)(a1 + 4180) = *(void *)(v184 + 36);
  *(void *)(a1 + 4144) = &unk_26C5C47C8;
  *(void *)(a1 + 4192) = &unk_26C5C3AF0;
  if (*(char *)(v187 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 4200), *(const std::string::value_type **)(v187 + 8), *(void *)(v187 + 16));
  }
  else
  {
    long long v188 = *(_OWORD *)(v187 + 8);
    *(void *)(a1 + 4216) = *(void *)(v187 + 24);
    *(_OWORD *)(a1 + 4200) = v188;
  }
  *(_DWORD *)(a1 + 4224) = *(_DWORD *)(v187 + 32);
  *(void *)(a1 + 4192) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 4228) = *(unsigned char *)(v187 + 36);
  uint64_t v189 = (std::string *)(a1 + 4232);
  if (*(char *)(v187 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v189, *(const std::string::value_type **)(v187 + 40), *(void *)(v187 + 48));
  }
  else
  {
    long long v190 = *(_OWORD *)(v187 + 40);
    *(void *)(a1 + 4248) = *(void *)(v187 + 56);
    *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v190;
  }
  unint64_t v191 = STACK[0x660];
  *(void *)(a1 + 4192) = &unk_26C5C4788;
  *(void *)(a1 + 4256) = &unk_26C5C3AF0;
  if (*(char *)(v191 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 4264), *(const std::string::value_type **)(v191 + 8), *(void *)(v191 + 16));
  }
  else
  {
    long long v192 = *(_OWORD *)(v191 + 8);
    *(void *)(a1 + 4280) = *(void *)(v191 + 24);
    *(_OWORD *)(a1 + 4264) = v192;
  }
  *(_DWORD *)(a1 + 4288) = *(_DWORD *)(v191 + 32);
  *(void *)(a1 + 4256) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 4292) = *(unsigned char *)(v191 + 36);
  std::string v193 = (std::string *)(a1 + 4296);
  if (*(char *)(v191 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v193, *(const std::string::value_type **)(v191 + 40), *(void *)(v191 + 48));
  }
  else
  {
    long long v194 = *(_OWORD *)(v191 + 40);
    *(void *)(a1 + 4312) = *(void *)(v191 + 56);
    *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v194;
  }
  unint64_t v195 = STACK[0x668];
  *(void *)(a1 + 4256) = &unk_26C5C4788;
  *(void *)(a1 + 4320) = &unk_26C5C3AF0;
  if (*(char *)(v195 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 4328), *(const std::string::value_type **)(v195 + 8), *(void *)(v195 + 16));
  }
  else
  {
    long long v196 = *(_OWORD *)(v195 + 8);
    *(void *)(a1 + 4344) = *(void *)(v195 + 24);
    *(_OWORD *)(a1 + 4328) = v196;
  }
  unint64_t v197 = STACK[0x670];
  *(_DWORD *)(a1 + 4352) = *(_DWORD *)(v195 + 32);
  *(void *)(a1 + 4320) = &unk_26C5C3878;
  int v198 = *(_DWORD *)(v195 + 44);
  *(void *)(a1 + 4356) = *(void *)(v195 + 36);
  *(_DWORD *)(a1 + 4364) = v198;
  *(void *)(a1 + 4320) = &unk_26C5C47E8;
  *(void *)(a1 + 4368) = &unk_26C5C3AF0;
  if (*(char *)(v197 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 4376), *(const std::string::value_type **)(v197 + 8), *(void *)(v197 + 16));
  }
  else
  {
    long long v199 = *(_OWORD *)(v197 + 8);
    *(void *)(a1 + 4392) = *(void *)(v197 + 24);
    *(_OWORD *)(a1 + 4376) = v199;
  }
  unint64_t v200 = STACK[0x678];
  *(_DWORD *)(a1 + 4400) = *(_DWORD *)(v197 + 32);
  *(void *)(a1 + 4368) = &unk_26C5C3858;
  *(void *)(a1 + 4404) = *(void *)(v197 + 36);
  *(void *)(a1 + 4368) = &unk_26C5C47C8;
  *(void *)(a1 + 4416) = &unk_26C5C3AF0;
  uint64_t v201 = (std::string *)(a1 + 4424);
  if (*(char *)(v200 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v201, *(const std::string::value_type **)(v200 + 8), *(void *)(v200 + 16));
  }
  else
  {
    long long v202 = *(_OWORD *)(v200 + 8);
    *(void *)(a1 + 4440) = *(void *)(v200 + 24);
    *(_OWORD *)&v201->__r_.__value_.__l.__data_ = v202;
  }
  *(_DWORD *)(a1 + 4448) = *(_DWORD *)(v200 + 32);
  *(void *)(a1 + 4416) = &unk_26C5C3858;
  *(void *)(a1 + 4452) = *(void *)(v200 + 36);
  *(void *)(a1 + 4416) = &unk_26C5C47C8;
  return a1;
}

void sub_214DF0BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *exception_objecta, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,void **a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,void **a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,void **a39,uint64_t a40,void **a41,uint64_t a42,void **a43,void **a44,void **a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,void **a61,uint64_t a62,void **a63)
{
  *(void *)(v70 + 4368) = v76;
  if (v74[3179] < 0) {
    operator delete(*v71);
  }
  *(void *)(v70 + 4320) = v73;
  if (v74[3131] < 0) {
    operator delete(*v75);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a10);
  *(void *)(v70 + 4144) = a13;
  if (v74[2955] < 0) {
    operator delete(*a11);
  }
  *(void *)(v70 + 4096) = a17;
  if (v74[2907] < 0) {
    operator delete(*a12);
  }
  *(void *)(v70 + 4048) = a18;
  if (*(char *)(v70 + 4079) < 0) {
    operator delete(*a14);
  }
  *(void *)(v70 + 4000) = a19;
  if (*(char *)(v70 + 4031) < 0) {
    operator delete(*a15);
  }
  *(void *)(v70 + 3952) = a21;
  if (*(char *)(v70 + 3983) < 0) {
    operator delete(*a16);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a23);
  *(void *)(v70 + 3840) = a25;
  if (*(char *)(v70 + 3871) < 0) {
    operator delete(*a20);
  }
  *(void *)(v70 + 3792) = a26;
  if (*(char *)(v70 + 3823) < 0) {
    operator delete(*a22);
  }
  *(void *)(v70 + 3744) = a28;
  if (*(char *)(v70 + 3775) < 0) {
    operator delete(*a24);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a29);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a31);
  *(void *)(v70 + 3568) = a34;
  if (*(char *)(v70 + 3599) < 0) {
    operator delete(*a27);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a35);
  *(void *)(v70 + 3456) = a36;
  if (*(char *)(v70 + 3487) < 0) {
    operator delete(*a30);
  }
  *(void *)(v70 + 3408) = a38;
  if (*(char *)(v70 + 3439) < 0) {
    operator delete(*a32);
  }
  *(void *)(v70 + 3360) = a40;
  if (*(char *)(v70 + 3391) < 0) {
    operator delete(*a33);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a42);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a46);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a48);
  *(void *)(v70 + 3120) = a49;
  if (*(char *)(v70 + 3151) < 0) {
    operator delete(*a37);
  }
  *(void *)(v70 + 3072) = a50;
  if (*(char *)(v70 + 3103) < 0) {
    operator delete(*a39);
  }
  *(void *)(v70 + 3024) = a51;
  if (*(char *)(v70 + 3055) < 0) {
    operator delete(*a41);
  }
  *(void *)(v70 + 2976) = a52;
  if (*(char *)(v70 + 3007) < 0) {
    operator delete(*a43);
  }
  *(void *)(v70 + 2928) = a53;
  if (*(char *)(v70 + 2959) < 0) {
    operator delete(*a44);
  }
  *(void *)(v70 + 2880) = a54;
  if (*(char *)(v70 + 2911) < 0) {
    operator delete(*a45);
  }
  *(void *)(v70 + 2832) = a55;
  if (*(char *)(v70 + 2863) < 0) {
    operator delete(*a47);
  }
  *(void *)(v70 + 2784) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2815) < 0) {
    operator delete(*(void **)(v70 + 2792));
  }
  *(void *)(v70 + 2736) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2767) < 0) {
    operator delete(*(void **)(v70 + 2744));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a60);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a62);
  *(void *)(v70 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2591) < 0) {
    operator delete(*(void **)(v70 + 2568));
  }
  *(void *)(v70 + 2512) = a67;
  if (*(char *)(v70 + 2543) < 0) {
    operator delete(*a56);
  }
  *(void *)(v70 + 2464) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2495) < 0) {
    operator delete(*(void **)(v70 + 2472));
  }
  *(void *)(v70 + 2416) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2447) < 0) {
    operator delete(*(void **)(v70 + 2424));
  }
  *(void *)(v70 + 2368) = STACK[0x208];
  if (*(char *)(v70 + 2399) < 0) {
    operator delete(*a59);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x210]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x218]);
  *(void *)(v70 + 2192) = STACK[0x220];
  if (*(char *)(v70 + 2223) < 0) {
    operator delete(*a61);
  }
  *(void *)(v70 + 2144) = STACK[0x228];
  if (*(char *)(v70 + 2175) < 0) {
    operator delete(*a63);
  }
  *(void *)(v70 + 2096) = STACK[0x230];
  if (*(char *)(v70 + 2127) < 0) {
    operator delete(*a65);
  }
  *(void *)(v70 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 2079) < 0) {
    operator delete(*(void **)(v70 + 2056));
  }
  *(void *)(v70 + 2000) = STACK[0x240];
  if (*(char *)(v70 + 2031) < 0) {
    operator delete(*a66);
  }
  *(void *)(v70 + 1952) = STACK[0x248];
  if (*(char *)(v70 + 1983) < 0) {
    operator delete(*a68);
  }
  *(void *)(v70 + 1904) = STACK[0x250];
  if (*(char *)(v70 + 1935) < 0) {
    operator delete(*a69);
  }
  *(void *)(v70 + 1856) = STACK[0x258];
  if (*(char *)(v70 + 1887) < 0) {
    operator delete(*a70);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x268]);
  *(void *)(v70 + 1744) = STACK[0x280];
  if (*(char *)(v70 + 1775) < 0) {
    operator delete(*(void **)STACK[0x200]);
  }
  *(void *)(v70 + 1696) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1727) < 0) {
    operator delete(*(void **)(v70 + 1704));
  }
  *(void *)(v70 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1679) < 0) {
    operator delete(*(void **)(v70 + 1656));
  }
  *(void *)(v70 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1631) < 0) {
    operator delete(*(void **)(v70 + 1608));
  }
  *(void *)(v70 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1583) < 0) {
    operator delete(*(void **)(v70 + 1560));
  }
  *(void *)(v70 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1535) < 0) {
    operator delete(*(void **)(v70 + 1512));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(STACK[0x2B0]);
  *(void *)(v70 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1407) < 0) {
    operator delete(*(void **)(v70 + 1384));
  }
  *(void *)(v70 + 1328) = STACK[0x2C0];
  if (*(char *)(v70 + 1359) < 0) {
    operator delete(*(void **)STACK[0x260]);
  }
  *(void *)(v70 + 1280) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1311) < 0) {
    operator delete(*(void **)(v70 + 1288));
  }
  *(void *)(v70 + 1232) = STACK[0x2D0];
  if (*(char *)(v70 + 1263) < 0) {
    operator delete(*(void **)STACK[0x270]);
  }
  *(void *)(v70 + 1184) = STACK[0x2D8];
  if (*(char *)(v70 + 1215) < 0) {
    operator delete(*(void **)STACK[0x278]);
  }
  *(void *)(v70 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1167) < 0) {
    operator delete(*(void **)(v70 + 1144));
  }
  *(void *)(v70 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1119) < 0) {
    operator delete(*(void **)(v70 + 1096));
  }
  *(void *)(v70 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1071) < 0) {
    operator delete(*(void **)(v70 + 1048));
  }
  *(void *)(v70 + 992) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 1023) < 0) {
    operator delete(*(void **)(v70 + 1000));
  }
  *(void *)(v70 + 944) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 975) < 0) {
    operator delete(*(void **)(v70 + 952));
  }
  *(void *)(v70 + 896) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 927) < 0) {
    operator delete(*(void **)(v70 + 904));
  }
  *(void *)(v70 + 848) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 879) < 0) {
    operator delete(*(void **)(v70 + 856));
  }
  *(void *)(v70 + 800) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 831) < 0) {
    operator delete(*(void **)(v70 + 808));
  }
  *(void *)(v70 + 752) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 783) < 0) {
    operator delete(*(void **)(v70 + 760));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(*(void *)(v77 - 200));
  *(void *)(v70 + 640) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 671) < 0) {
    operator delete(*(void **)(v70 + 648));
  }
  *(void *)(v70 + 592) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 623) < 0) {
    operator delete(*(void **)(v70 + 600));
  }
  *(void *)(v70 + 544) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 575) < 0) {
    operator delete(*(void **)(v70 + 552));
  }
  *(void *)(v70 + 496) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 527) < 0) {
    operator delete(*(void **)(v70 + 504));
  }
  *(void *)(v70 + 448) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 479) < 0) {
    operator delete(*(void **)(v70 + 456));
  }
  *(void *)(v70 + 400) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 431) < 0) {
    operator delete(*(void **)(v70 + 408));
  }
  *(void *)(v70 + 352) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 383) < 0) {
    operator delete(*(void **)(v70 + 360));
  }
  *(void *)(v70 + 304) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 335) < 0) {
    operator delete(*(void **)(v70 + 312));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(*(void *)(v77 - 128));
  *(void *)(v70 + 192) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 223) < 0) {
    operator delete(*(void **)(v70 + 200));
  }
  *(void *)(v70 + 144) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 175) < 0) {
    operator delete(*(void **)(v70 + 152));
  }
  *(void *)(v70 + 96) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 127) < 0) {
    operator delete(*(void **)(v70 + 104));
  }
  *(void *)(v70 + 48) = &unk_26C5C3AF0;
  if (*(char *)(v70 + 79) < 0) {
    operator delete(*(void **)(v70 + 56));
  }
  *(void *)uint64_t v70 = &unk_26C5C3AF0;
  if (*(char *)(v70 + 31) < 0) {
    operator delete(*(void **)(v70 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_214DF16D8()
{
}

void sub_214DF16E0()
{
}

void sub_214DF16E8()
{
}

void sub_214DF16F0()
{
  *(void *)(v0 + 3888) = v2;
  if (*(char *)(v0 + 3919) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0CE0);
}

void sub_214DF170C()
{
}

void sub_214DF1714()
{
}

void sub_214DF171C()
{
}

void sub_214DF1724()
{
}

void sub_214DF172C()
{
  *(void *)(v0 + 3680) = v2;
  if (*(char *)(v0 + 3711) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0D3CLL);
}

void sub_214DF1748()
{
}

void sub_214DF1750()
{
  *(void *)(v0 + 3616) = v2;
  if (*(char *)(v0 + 3647) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0D44);
}

void sub_214DF176C()
{
}

void sub_214DF1774()
{
}

void sub_214DF177C()
{
  *(void *)(v0 + 3504) = v2;
  if (*(char *)(v0 + 3535) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0D68);
}

void sub_214DF1798()
{
}

void sub_214DF17A0()
{
}

void sub_214DF17A8()
{
}

void sub_214DF17B0()
{
}

void sub_214DF17B8()
{
  *(void *)(v0 + 3296) = v2;
  if (*(char *)(v0 + 3327) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0DC4);
}

void sub_214DF17D4()
{
}

void sub_214DF17DC()
{
  *(void *)(v0 + 3232) = v2;
  if (*(char *)(v0 + 3263) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0DCCLL);
}

void sub_214DF17F8()
{
}

void sub_214DF1800()
{
  *(void *)(v0 + 3168) = v2;
  if (*(char *)(v0 + 3199) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0DD4);
}

void sub_214DF181C()
{
}

void sub_214DF1824()
{
}

void sub_214DF182C()
{
}

void sub_214DF1834()
{
}

void sub_214DF183C()
{
}

void sub_214DF1844()
{
}

void sub_214DF184C()
{
}

void sub_214DF1854()
{
}

void sub_214DF185C()
{
  *(void *)(v0 + 2672) = v2;
  if (*(char *)(v0 + 2703) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0F00);
}

void sub_214DF1878()
{
}

void sub_214DF1880()
{
}

void sub_214DF1888()
{
}

void sub_214DF1890()
{
  *(void *)(v0 + 2304) = v2;
  if (*(char *)(v0 + 2335) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0FD8);
}

void sub_214DF18AC()
{
}

void sub_214DF18B4()
{
  *(void *)(v0 + 2240) = v2;
  if (*(char *)(v0 + 2271) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF0FE0);
}

void sub_214DF18D0()
{
}

void sub_214DF18D8()
{
}

void sub_214DF18E0()
{
}

void sub_214DF18E8()
{
}

void sub_214DF18F0()
{
}

void sub_214DF18F8()
{
}

void sub_214DF1900()
{
}

void sub_214DF1908()
{
}

void sub_214DF1910()
{
}

void sub_214DF1918()
{
}

void sub_214DF1920()
{
}

void sub_214DF1928()
{
}

void sub_214DF1930()
{
}

void sub_214DF1938()
{
  *(void *)(v0 + 688) = v2;
  if (*(char *)(v0 + 719) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF145CLL);
}

void sub_214DF1954()
{
}

void sub_214DF195C()
{
}

void sub_214DF1964()
{
}

void sub_214DF196C()
{
}

void sub_214DF1974()
{
}

void sub_214DF197C()
{
}

void sub_214DF1984()
{
}

void sub_214DF198C()
{
}

void sub_214DF1994()
{
}

void sub_214DF199C()
{
}

void sub_214DF19A4()
{
}

void sub_214DF19AC()
{
}

void sub_214DF19B4()
{
}

void sub_214DF19BC()
{
}

void sub_214DF19C4()
{
  *(void *)(v0 + 1424) = v2;
  if (*(char *)(v0 + 1455) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x214DF11F0);
}

void sub_214DF19E0()
{
}

void sub_214DF19E8()
{
}

void sub_214DF19F0()
{
}

void sub_214DF19F8()
{
}

void sub_214DF1A00()
{
}

void sub_214DF1A08()
{
}

void sub_214DF1A10()
{
}

void sub_214DF1A18()
{
}

void sub_214DF1A20()
{
}

void sub_214DF1A28()
{
}

void sub_214DF1A30()
{
}

void sub_214DF1A38()
{
}

void sub_214DF1A40()
{
}

void sub_214DF1A48()
{
}

void sub_214DF1A50()
{
}

void sub_214DF1A58()
{
}

void sub_214DF1A60()
{
}

void sub_214DF1A68()
{
}

void sub_214DF1A70()
{
}

void sub_214DF1A78()
{
}

void sub_214DF1A80()
{
}

void sub_214DF1A88()
{
}

void sub_214DF1A90()
{
}

void sub_214DF1A98()
{
}

uint64_t std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3858;
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(void *)a1 = &unk_26C5C47C8;
  return a1;
}

uint64_t std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3878;
  uint64_t v6 = *(void *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 36) = v6;
  *(void *)a1 = &unk_26C5C47E8;
  return a1;
}

uint64_t std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214DF1D04(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214DF1E18(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<52ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214DF1F2C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyHasName(void)::$_0 &&>>()
{
}

void sub_214DF20A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyHasSeriesName(void)::$_0 &&>>()
{
}

void sub_214DF2238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::TVShowPropertySeriesOrder(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertySeriesNameOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemArtistPropertyOrder(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyArtistOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemArtistPropertyRepresentativeItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyArtistOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyArtistOrder(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyArtistOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyArtistOrder(void)::property;
}

uint64_t mlcore::ItemPropertySeriesNameOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySeriesNameOrder(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySeriesNameOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeriesNameOrder(void)::property;
}

uint64_t mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationInvitationURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaborationInvitationURL(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationInvitationURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURL(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationInvitationURL(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudUniversalLibraryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::ItemPropertyStorePlaybackEndpointType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStorePlaybackEndpointType(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStorePlaybackEndpointType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaybackEndpointType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorePlaybackEndpointType(void)::property;
}

uint64_t mlcore::ItemPropertyMatchRedownloadParameters(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyMatchRedownloadParameters(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyMatchRedownloadParameters(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMatchRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMatchRedownloadParameters(void)::property;
}

uint64_t mlcore::ItemPropertyIsArtistUploadedContent(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsArtistUploadedContent(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsArtistUploadedContent(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsArtistUploadedContent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsArtistUploadedContent(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovementNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyClassicalMovementNumber(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyClassicalMovementNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovementNumber(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationMode(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaborationMode(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationMode(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationMode(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationMode(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudVersionHash(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudVersionHash(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudVersionHash(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudVersionHash(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudVersionHash(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCanonicalItemId(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreCanonicalItemId(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreCanonicalItemId(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCanonicalItemId(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCanonicalItemId(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsCollaborative(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsCollaborative(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsCollaborative(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCollaborative(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsCollaborative(void)::property;
}

uint64_t mlcore::ItemPropertyCloudAssetAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCloudAssetAvailable(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCloudAssetAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudAssetAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudAssetAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyHLSAudioCapability(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHLSAudioCapability(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHLSAudioCapability(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAudioCapability(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSAudioCapability(void)::property;
}

uint64_t mlcore::ItemPropertyExcludeFromShuffle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyExcludeFromShuffle(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyExcludeFromShuffle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyExcludeFromShuffle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyExcludeFromShuffle(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudIsPublic(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudIsPublic(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsPublic(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsPublic(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsPublic(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyPosition(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyPosition(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyPosition(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPosition(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPosition(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCloudStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreCloudStatus(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreCloudStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudStatus(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyLikedState(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyLikedState(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyLikedState(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyLikedState(void)::property;
}

uint64_t mlcore::ItemArtistPropertyHasName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyHasName(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyHasName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyHasName(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsSmart(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsSmart(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsSmart(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSmart(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSmart(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEpisodeType(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEpisodeType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeType(void)::property;
}

uint64_t mlcore::ItemPropertyUserRating(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyUserRating(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyUserRating(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyUserRating(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyUserRating(void)::property;
}

uint64_t mlcore::ItemPropertyLikedState(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLikedState(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLikedState(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLikedState(void)::property;
}

uint64_t mlcore::ItemArtistPropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyName(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyName(void)::property;
}

uint64_t mlcore::AlbumPropertyHasTitle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyHasTitle(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyHasTitle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyHasTitle(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyHasTitle(void)::property;
}

uint64_t mlcore::AlbumPropertyStoreID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyStoreID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyStoreID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyStoreID(void)::property;
}

uint64_t mlcore::ItemPropertyIsVideo(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsVideo(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsVideo(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsVideo(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsVideo(void)::property;
}

uint64_t mlcore::PersonPropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyName(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyName(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyName(void)::property;
}

uint64_t mlcore::AlbumPropertyTitle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyTitle(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyTitle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyTitle(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyTitle(void)::property;
}

uint64_t mlcore::AlbumPropertyYear(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyYear(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyYear(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyYear(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyYear(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsVideo(void)::$_0 &&>>()
{
}

void sub_214DF31D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>()
{
  uint64_t v0 = operator new(0x68uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_26C5CA018;
  mlcore::InPredicate<int>::InPredicate();
}

void sub_214DF32A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::InPredicate<int>::InPredicate(uint64_t a1, uint64_t a2, int **a3)
{
  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<int>::InPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<int>::InPredicate();
}

void sub_214DF330C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    long long v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_214DF3388(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  char v12 = operator new(0x18uLL);
  *char v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint8x8_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *char v12 = *v20;
LABEL_38:
    *uint8x8_t v20 = v12;
    goto LABEL_39;
  }
  *char v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint8x8_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_214DF3590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistAuthorSocialProfileID(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::PlaylistAuthorPropertyPersonPersistentID(this);
  uint64_t v2 = mlcore::PersonPropertyCloudIdentifier(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::PlaylistAuthorPropertyPersonPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::PersonPropertyCloudIdentifier(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyCloudIdentifier(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyCloudIdentifier(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyCloudIdentifier(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyCloudIdentifier(void)::property;
}

void **std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x2166B26F0);
  }
  return result;
}

void std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t mlcore::PropertiesQueryResult::enumerateResults(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2 != *(void *)(result + 168))
  {
    uint64_t v4 = result;
    do
    {
      char v6 = 0;
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      dispatch_queue_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v5 + 48))(v5, v2, &v6);
      if (v6) {
        break;
      }
      v2 += 216;
    }
    while (v2 != *(void *)(v4 + 168));
  }
  return result;
}

void mediaplatform::SQLFunctionExpression::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  mediaplatform::SQLExpressionList::sql(a1 + 32, a2, &v12);
  unint64_t v7 = *(const std::string::value_type **)(a1 + 8);
  uint64_t v6 = a1 + 8;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(v6 + 8);
  }
  unint64_t v11 = std::string::insert(&v12, 0, v9, v10);
  *a3 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_214DF38C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLExpressionList::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, ", ");
  mediaplatform::SQLStringWithStatementList<mediaplatform::SQLExpression>((uint64_t)&v11, v5, a2, (uint64_t)__p);
  uint64_t v6 = std::string::insert(&v11, 0, "(");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v12, ")");
  *a3 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_214DF39BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistItemPropertyAvailableArtworkToken(mlcore *this)
{
  v23[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  unint64_t v3 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v2);
  uint64_t v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  uint64_t v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CAB78;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = &unk_26C5C7978;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(void *)&long long v6 = v5 + 24;
  *((void *)&v6 + 1) = v5;
  v22[0] = v6;
  long long v7 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  uint64_t v8 = mlcore::ItemPropertyEffectiveArtworkType(v7);
  uint64_t v9 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(void *)uint64_t v9 = &unk_26C5CAF68;
  *((void *)v9 + 4) = v7;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 3) = &unk_26C5C82D0;
  *((void *)v9 + 6) = v8;
  *(void *)&long long v10 = v9 + 24;
  *((void *)&v10 + 1) = v9;
  v22[1] = v10;
  unint64_t v17 = 0;
  long long v18 = 0u;
  uint8x8_t v20 = (void **)&v17;
  char v21 = 0;
  unint64_t v17 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v18 = v17;
  *((void *)&v18 + 1) = v17 + 4;
  *(void *)&long long v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v18 + 8, v22, v23, v17);
  mlcore::CreateAndPredicate(&v17, &v19);
  uint64_t v11 = mlcore::GetForeignProperty<std::string>((uint64_t)v2, (uint64_t)v3, (uint64_t *)&v19);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v12 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, v11, v16);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  uint8x8_t v20 = (void **)&v17;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    float v14 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  return v12;
}

void sub_214DF3C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void **a17, uint64_t a18, char a19)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  a17 = (void **)&a12;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  uint64_t v20 = 24;
  while (1)
  {
    char v21 = *(std::__shared_weak_count **)(&a19 + v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    v20 -= 16;
    if (v20 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistItemPropertyFetchableArtworkToken(mlcore *this)
{
  v23[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  unint64_t v3 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v2);
  uint64_t v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  uint64_t v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CAB78;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = &unk_26C5C7978;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(void *)&long long v6 = v5 + 24;
  *((void *)&v6 + 1) = v5;
  v22[0] = v6;
  long long v7 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  uint64_t v8 = mlcore::ItemPropertyEffectiveArtworkType(v7);
  uint64_t v9 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(void *)uint64_t v9 = &unk_26C5CAF68;
  *((void *)v9 + 4) = v7;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 3) = &unk_26C5C82D0;
  *((void *)v9 + 6) = v8;
  *(void *)&long long v10 = v9 + 24;
  *((void *)&v10 + 1) = v9;
  v22[1] = v10;
  unint64_t v17 = 0;
  long long v18 = 0u;
  uint64_t v20 = (void **)&v17;
  char v21 = 0;
  unint64_t v17 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v18 = v17;
  *((void *)&v18 + 1) = v17 + 4;
  *(void *)&long long v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v18 + 8, v22, v23, v17);
  mlcore::CreateAndPredicate(&v17, &v19);
  uint64_t v11 = mlcore::GetForeignProperty<std::string>((uint64_t)v2, (uint64_t)v3, (uint64_t *)&v19);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v12 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, v11, v16);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  uint64_t v20 = (void **)&v17;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    float v14 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  return v12;
}

void sub_214DF3E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void **a17, uint64_t a18, char a19)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  a17 = (void **)&a12;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  uint64_t v20 = 24;
  while (1)
  {
    char v21 = *(std::__shared_weak_count **)(&a19 + v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    v20 -= 16;
    if (v20 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistItemPropertyFetchableArtworkSourceType(mlcore *this)
{
  v23[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  unint64_t v3 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v2);
  uint64_t v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  uint64_t v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CAB78;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = &unk_26C5C7978;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(void *)&long long v6 = v5 + 24;
  *((void *)&v6 + 1) = v5;
  v22[0] = v6;
  long long v7 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  uint64_t v8 = mlcore::ItemPropertyEffectiveArtworkType(v7);
  uint64_t v9 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(void *)uint64_t v9 = &unk_26C5CAF68;
  *((void *)v9 + 4) = v7;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 3) = &unk_26C5C82D0;
  *((void *)v9 + 6) = v8;
  *(void *)&long long v10 = v9 + 24;
  *((void *)&v10 + 1) = v9;
  v22[1] = v10;
  unint64_t v17 = 0;
  long long v18 = 0u;
  uint64_t v20 = (void **)&v17;
  char v21 = 0;
  unint64_t v17 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v18 = v17;
  *((void *)&v18 + 1) = v17 + 4;
  *(void *)&long long v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v18 + 8, v22, v23, v17);
  mlcore::CreateAndPredicate(&v17, &v19);
  uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v2, (uint64_t)v3, (uint64_t *)&v19);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v12 = mlcore::GetForeignProperty<int>((uint64_t)v1, Foreign, v16);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  uint64_t v20 = (void **)&v17;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    float v14 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  return v12;
}

void sub_214DF4114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void **a17, uint64_t a18, char a19)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  a17 = (void **)&a12;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  uint64_t v20 = 24;
  while (1)
  {
    char v21 = *(std::__shared_weak_count **)(&a19 + v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    v20 -= 16;
    if (v20 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistItemPropertyItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyItemPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyEffectiveArtworkType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEffectiveArtworkType(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEffectiveArtworkType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEffectiveArtworkType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEffectiveArtworkType(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::$_0 &&>>()
{
}

void sub_214DF4414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::purchaseHistoryRedownloadParamsColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3647) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 453), *((void *)this + 454));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3624);
    *(void *)(a2 + 24) = *((void *)this + 455);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 912);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3652);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3679) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 457), *((void *)this + 458));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3656);
    *(void *)(a2 + 56) = *((void *)this + 459);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF4598(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMatchRedownloadParameters(void)::$_0 &&>>()
{
}

void sub_214DF4758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::matchRedownloadParamsColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3759) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 467), *((void *)this + 468));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3736);
    *(void *)(a2 + 24) = *((void *)this + 469);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 940);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3764);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3791) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 471), *((void *)this + 472));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3768);
    *(void *)(a2 + 56) = *((void *)this + 473);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF48DC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCanonicalItemId(void)::$_0 &&>>()
{
}

void sub_214DF4A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::assetStoreCanonicalItemId(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6223;
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6223) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 775), *((void *)this + 776));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6200);
    *(void *)(a2 + 24) = *((void *)this + 777);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1556);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 779), *((void *)this + 780));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6232);
    *(void *)(a2 + 56) = *((void *)this + 781);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF4C38(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreTVShowCanonicalItemId(void)::$_0 &&>>()
{
}

void sub_214DF4DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::assetStoreTVShowCanonicalItemId(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6287;
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6287) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 783), *((void *)this + 784));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6264);
    *(void *)(a2 + 24) = *((void *)this + 785);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1572);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 787), *((void *)this + 788));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6296);
    *(void *)(a2 + 56) = *((void *)this + 789);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF4F94(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreID(void)::$_0 &&>>()
{
}

void sub_214DF517C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storeItemIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 411), *((void *)this + 412));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3288);
    *(void *)(a2 + 24) = *((void *)this + 413);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 828);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 831);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3316);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsArtistUploadedContent(void)::$_0 &&>>()
{
}

void sub_214DF549C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::isArtistUploadedContentColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5615) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 699), *((void *)this + 700));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5592);
    *(void *)(a2 + 24) = *((void *)this + 701);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1404);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1407);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5620);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudStatus(void)::$_0 &&>>()
{
}

void sub_214DF57C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::cloudStatusColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3823) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 475), *((void *)this + 476));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3800);
    *(void *)(a2 + 24) = *((void *)this + 477);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 956);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 959);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3828);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPodcastExternalGUID(void)::$_0 &&>>()
{
}

void sub_214DF5ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::externalGuidColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 4543;
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4543) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 565), *((void *)this + 566));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4520);
    *(void *)(a2 + 24) = *((void *)this + 567);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1136);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 569), *((void *)this + 570));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4552);
    *(void *)(a2 + 56) = *((void *)this + 571);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF5C58(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreAccountID(void)::$_0 &&>>()
{
}

void sub_214DF5E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::accountIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4063) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 505), *((void *)this + 506));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4040);
    *(void *)(a2 + 24) = *((void *)this + 507);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1016);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1019);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4068);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudID(void)::$_0 &&>>()
{
}

void sub_214DF6160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storeSagaIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 461), *((void *)this + 462));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3688);
    *(void *)(a2 + 24) = *((void *)this + 463);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 928);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 931);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3716);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(void)::$_0 &&>>()
{
}

void sub_214DF6458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudAlbumID(void)::$_0 &&>>()
{
}

void sub_214DF6684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DF6788(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStoreTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  char v2 = operator new(0x1908uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA600;
  dispatch_queue_t result = mlcore::ItemStoreTable::ItemStoreTable((mlcore::ItemStoreTable *)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_214DF6814(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemStoreTable::assetStoreTVSeasonCanonicalItemId(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6351;
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6351) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 791), *((void *)this + 792));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6328);
    *(void *)(a2 + 24) = *((void *)this + 793);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1588);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 795), *((void *)this + 796));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6360);
    *(void *)(a2 + 56) = *((void *)this + 797);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF693C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::cloudAlbumIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5855;
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5855) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 729), *((void *)this + 730));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5832);
    *(void *)(a2 + 24) = *((void *)this + 731);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1464);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 733), *((void *)this + 734));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5864);
    *(void *)(a2 + 56) = *((void *)this + 735);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF6A6C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHasLightweightProfile(void)::$_0 &&>>()
{
}

void sub_214DF6C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::lightweightProfileColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 109), *((void *)this + 110));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 872);
    *(void *)(a2 + 24) = *((void *)this + 111);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 224);
  *(void *)(a2 + 36) = *(void *)((char *)this + 900);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214DF6F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::persistentIDColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((void *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(void *)(a2 + 24) = *((void *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 135);
  *(void *)(a2 + 36) = *(void *)((char *)this + 532);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHandle(void)::$_0 &&>>()
{
}

void sub_214DF7260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::handleColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 644);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 81), *((void *)this + 82));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(void *)(a2 + 56) = *((void *)this + 83);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF73E4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyCloudIdentifier(void)::$_0 &&>>()
{
}

void sub_214DF75A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::cloudIdentifierColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((void *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(void *)(a2 + 24) = *((void *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 580);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 607) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 73), *((void *)this + 74));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 584);
    *(void *)(a2 + 56) = *((void *)this + 75);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF7728(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageURL(void)::$_0 &&>>()
{
}

void sub_214DF78E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyName(void)::$_0 &&>>()
{
}

void sub_214DF7B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C5C7D20;
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 96) = *(void *)(a3 + 24);
    *(_OWORD *)(a1 + 80) = v5;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 72) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a3 + 36);
  long long v6 = (std::string *)(a1 + 112);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 40);
    *(void *)(a1 + 128) = *(void *)(a3 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 72) = &unk_26C5C4788;
  return a1;
}

void sub_214DF7CCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DF7D74(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__sharedPointer;
}

mlcore::PersonTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11PersonTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::PersonTable **a1)
{
  char v2 = operator new(0x3A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA0C0;
  dispatch_queue_t result = mlcore::PersonTable::PersonTable((mlcore::PersonTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::PersonTable *)v2;
  return result;
}

void sub_214DF7E68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::PersonTable::imageURLColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 93), *((void *)this + 94));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 744);
    *(void *)(a2 + 24) = *((void *)this + 95);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 192);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 772);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 799) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 97), *((void *)this + 98));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 776);
    *(void *)(a2 + 56) = *((void *)this + 99);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF7F78(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::nameColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 85), *((void *)this + 86));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 680);
    *(void *)(a2 + 24) = *((void *)this + 87);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 176);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 708);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 735) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 89), *((void *)this + 90));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 712);
    *(void *)(a2 + 56) = *((void *)this + 91);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214DF8090(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>((uint64_t *)&v8, *(void *)(a1 + 8) + 192, *(void *)(a1 + 8) + 216);
  char v2 = v8;
  if (v8 != v9)
  {
    do
    {
      uint64_t v3 = (mediaplatform::DatabaseConnection *)v2[4];
      uint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      mediaplatform::DatabaseConnection::setDelegateCallbacks(v3, *(const mediaplatform::DatabaseConnectionCallbacks **)(a1 + 16));
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      long long v5 = v2[1];
      if (v5)
      {
        do
        {
          long long v6 = (void **)v5;
          long long v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (void **)v2[2];
          BOOL v7 = *v6 == v2;
          char v2 = v6;
        }
        while (!v7);
      }
      char v2 = v6;
    }
    while (v6 != v9);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(v9[0]);
}

void sub_214DF8178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a11);
  _Unwind_Resume(a1);
}

void std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*a1);
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a1[1]);
    char v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t *mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>(a1, *(void **)a3, (void *)(a3 + 8));
}

void sub_214DF8248(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = result;
    long long v6 = result + 1;
    do
    {
      BOOL v7 = (uint64_t *)v5[1];
      uint64_t v8 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v9 = (uint64_t *)v5[1];
      long long v10 = v6;
      if (v7)
      {
        do
        {
          uint64_t v8 = v9;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          long long v10 = v8;
        }
        while (v11);
      }
      unint64_t v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_9:
        if (v7) {
          float v13 = (uint64_t **)v8;
        }
        else {
          float v13 = (uint64_t **)v6;
        }
        if (v7) {
          float v14 = (uint64_t **)(v8 + 1);
        }
        else {
          float v14 = (uint64_t **)v6;
        }
      }
      else
      {
        float v13 = (uint64_t **)v6;
        float v14 = (uint64_t **)v6;
        if (v7)
        {
          float v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              float v13 = (uint64_t **)v7;
              unint64_t v19 = v7[4];
              if (v12 >= v19) {
                break;
              }
              BOOL v7 = *v13;
              float v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v19 >= v12) {
              break;
            }
            float v14 = v13 + 1;
            BOOL v7 = v13[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        BOOL v15 = (uint64_t *)operator new(0x30uLL);
        uint64_t v16 = v4[5];
        v15[4] = v4[4];
        v15[5] = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        dispatch_queue_t result = std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      unint64_t v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v4[2];
          BOOL v11 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v11);
      }
      uint64_t v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAppData(void)::$_0 &&>>()
{
}

void sub_214DF8570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartCriteria(void)::$_0 &&>>()
{
}

void sub_214DF879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C5C7C98;
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 96) = *(void *)(a3 + 24);
    *(_OWORD *)(a1 + 80) = v5;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 72) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a3 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 112), *(const void **)(a3 + 64), *(void *)(a3 + 48), 1);
  *(void *)(a1 + 72) = &unk_26C5C4768;
  return a1;
}

void sub_214DF893C(_Unwind_Exception *a1)
{
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

mediaplatform::Data *mlcore::ContainerTable::smartCriteriaColumn@<X0>(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5999;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5999) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 747), *((void *)this + 748));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5976);
    *(void *)(a2 + 24) = *((void *)this + 749);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1500);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = v4[5];
  dispatch_queue_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 754), *((void *)this + 752), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_214DF8A5C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::AlbumTable::appDataColumn@<X0>(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2383) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 295), *((void *)this + 296));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2360);
    *(void *)(a2 + 24) = *((void *)this + 297);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 596);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2388);
  dispatch_queue_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 302), *((void *)this + 300), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_214DF8B58(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  long long v74 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string v75 = *(std::string *)(a3 + 8);
  }
  int v76 = *(_DWORD *)(a3 + 32);
  long long v74 = &unk_26C5C3858;
  uint64_t v77 = *(void *)(a3 + 36);
  uint64_t v69 = &unk_26C5C3AF0;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string __s = *(std::string *)(a4 + 8);
  }
  int v71 = *(_DWORD *)(a4 + 32);
  uint64_t v69 = &unk_26C5C3878;
  uint64_t v72 = *(void *)(a4 + 36);
  int v73 = *(_DWORD *)(a4 + 44);
  int64_t v64 = &unk_26C5C3AF0;
  if (*(char *)(a5 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
  }
  else {
    std::string v65 = *(std::string *)(a5 + 8);
  }
  int v66 = *(_DWORD *)(a5 + 32);
  int64_t v64 = &unk_26C5C3878;
  uint64_t v67 = *(void *)(a5 + 36);
  int v68 = *(_DWORD *)(a5 + 44);
  int v60 = &unk_26C5C3AF0;
  if (*(char *)(a6 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a6 + 8), *(void *)(a6 + 16));
  }
  else {
    std::string v61 = *(std::string *)(a6 + 8);
  }
  int v62 = *(_DWORD *)(a6 + 32);
  int v60 = &unk_26C5C3858;
  uint64_t v63 = *(void *)(a6 + 36);
  uint64_t v56 = &unk_26C5C3AF0;
  if (*(char *)(a7 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a7 + 8), *(void *)(a7 + 16));
  }
  else {
    std::string v57 = *(std::string *)(a7 + 8);
  }
  int v58 = *(_DWORD *)(a7 + 32);
  uint64_t v56 = &unk_26C5C3858;
  uint64_t v59 = *(void *)(a7 + 36);
  unint64_t v52 = &unk_26C5C3AF0;
  if (*(char *)(a8 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a8 + 8), *(void *)(a8 + 16));
  }
  else {
    std::string v53 = *(std::string *)(a8 + 8);
  }
  int v54 = *(_DWORD *)(a8 + 32);
  unint64_t v52 = &unk_26C5C3858;
  uint64_t v55 = *(void *)(a8 + 36);
  unint64_t v48 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v49 = *(std::string *)(a9 + 8);
  }
  int v50 = *(_DWORD *)(a9 + 32);
  unint64_t v48 = &unk_26C5C3858;
  uint64_t v51 = *(void *)(a9 + 36);
  long long v41 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v42 = *(std::string *)(a10 + 8);
  }
  int v43 = *(_DWORD *)(a10 + 32);
  long long v41 = &unk_26C5C37F8;
  char v44 = *(unsigned char *)(a10 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v45, *(const void **)(a10 + 64), *(void *)(a10 + 48), 1);
  unint64_t v36 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v37 = *(std::string *)(a11 + 8);
  }
  int v38 = *(_DWORD *)(a11 + 32);
  unint64_t v36 = &unk_26C5C3878;
  uint64_t v39 = *(void *)(a11 + 36);
  int v40 = *(_DWORD *)(a11 + 44);
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string __p = *(std::string *)(a12 + 8);
  }
  int v34 = *(_DWORD *)(a12 + 32);
  uint64_t v35 = *(void *)(a12 + 36);
  std::string v115 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v116, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v116 = __s;
  }
  int v117 = v71;
  std::string v115 = &unk_26C5C3878;
  uint64_t v118 = v72;
  int v119 = v73;
  long long v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v111, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v111 = v65;
  }
  int v112 = v66;
  long long v110 = &unk_26C5C3878;
  uint64_t v113 = v67;
  int v114 = v68;
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v61;
  }
  int v108 = v62;
  std::string v106 = &unk_26C5C3858;
  uint64_t v109 = v63;
  uint64_t v102 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v103, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v103 = v57;
  }
  int v104 = v58;
  uint64_t v102 = &unk_26C5C3858;
  uint64_t v105 = v59;
  long long v98 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v99, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v99 = v53;
  }
  int v100 = v54;
  long long v98 = &unk_26C5C3858;
  uint64_t v101 = v55;
  long long v94 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v95, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v95 = v49;
  }
  int v96 = v50;
  long long v94 = &unk_26C5C3858;
  uint64_t v97 = v51;
  long long v87 = &unk_26C5C3AF0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v88, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  }
  else {
    std::string v88 = v42;
  }
  int v89 = v43;
  long long v87 = &unk_26C5C37F8;
  char v90 = v44;
  mediaplatform::Data::Data((mediaplatform::Data *)&v91, __src, __n, 1);
  long long v82 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v83, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v83 = v37;
  }
  int v84 = v38;
  long long v82 = &unk_26C5C3878;
  uint64_t v85 = v39;
  int v86 = v40;
  uint64_t v78 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = __p;
  }
  int v80 = v34;
  uint64_t v78 = &unk_26C5C3858;
  uint64_t v81 = v35;
  long long v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v153, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v153 = v111;
  }
  int v154 = v112;
  long long v152 = &unk_26C5C3878;
  uint64_t v155 = v113;
  int v156 = v114;
  std::string v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v107;
  }
  int v150 = v108;
  std::string v148 = &unk_26C5C3858;
  uint64_t v151 = v109;
  long long v144 = &unk_26C5C3AF0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v145, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  }
  else {
    std::string v145 = v103;
  }
  int v146 = v104;
  long long v144 = &unk_26C5C3858;
  uint64_t v147 = v105;
  uint64_t v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v141, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v141 = v99;
  }
  int v142 = v100;
  uint64_t v140 = &unk_26C5C3858;
  uint64_t v143 = v101;
  long long v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v137, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  }
  else {
    std::string v137 = v95;
  }
  int v138 = v96;
  long long v136 = &unk_26C5C3858;
  uint64_t v139 = v97;
  long long v129 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v130, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  }
  else {
    std::string v130 = v88;
  }
  int v131 = v89;
  long long v129 = &unk_26C5C37F8;
  char v132 = v90;
  mediaplatform::Data::Data((mediaplatform::Data *)&v133, v93, v92, 1);
  uint64_t v124 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v125, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v125 = v83;
  }
  int v126 = v84;
  uint64_t v124 = &unk_26C5C3878;
  uint64_t v127 = v85;
  int v128 = v86;
  uint64_t v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v121, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else {
    std::string v121 = v79;
  }
  int v122 = v80;
  uint64_t v120 = &unk_26C5C3858;
  uint64_t v123 = v81;
  char v185 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v149;
  }
  int v187 = v150;
  char v185 = &unk_26C5C3858;
  uint64_t v188 = v151;
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v182, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  }
  else {
    std::string v182 = v145;
  }
  int v183 = v146;
  unint64_t v181 = &unk_26C5C3858;
  uint64_t v184 = v147;
  unint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v178, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  }
  else {
    std::string v178 = v141;
  }
  int v179 = v142;
  unint64_t v177 = &unk_26C5C3858;
  uint64_t v180 = v143;
  long long v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v137;
  }
  int v175 = v138;
  long long v173 = &unk_26C5C3858;
  uint64_t v176 = v139;
  char v166 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v167, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v167 = v130;
  }
  int v168 = v131;
  char v166 = &unk_26C5C37F8;
  char v169 = v132;
  mediaplatform::Data::Data((mediaplatform::Data *)&v170, v135, v134, 1);
  unint64_t v161 = &unk_26C5C3AF0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v162, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v162 = v125;
  }
  int v163 = v126;
  unint64_t v161 = &unk_26C5C3878;
  uint64_t v164 = v127;
  int v165 = v128;
  uint64_t v157 = &unk_26C5C3AF0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v158, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else {
    std::string v158 = v121;
  }
  int v159 = v122;
  uint64_t v157 = &unk_26C5C3858;
  uint64_t v160 = v123;
  uint64_t v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v214, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else {
    std::string v214 = v182;
  }
  int v215 = v183;
  uint64_t v213 = &unk_26C5C3858;
  uint64_t v216 = v184;
  int v209 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v210, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v210 = v178;
  }
  int v211 = v179;
  int v209 = &unk_26C5C3858;
  uint64_t v212 = v180;
  uint64_t v205 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v206, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
    std::string v206 = v174;
  }
  int v207 = v175;
  uint64_t v205 = &unk_26C5C3858;
  uint64_t v208 = v176;
  int v198 = &unk_26C5C3AF0;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v199, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  }
  else {
    std::string v199 = v167;
  }
  int v200 = v168;
  int v198 = &unk_26C5C37F8;
  char v201 = v169;
  mediaplatform::Data::Data((mediaplatform::Data *)&v202, v172, v171, 1);
  std::string v193 = &unk_26C5C3AF0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v194, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  }
  else {
    std::string v194 = v162;
  }
  int v195 = v163;
  std::string v193 = &unk_26C5C3878;
  uint64_t v196 = v164;
  int v197 = v165;
  uint64_t v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = v158;
  }
  int v191 = v159;
  uint64_t v189 = &unk_26C5C3858;
  uint64_t v192 = v160;
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v210;
  }
  int v239 = v211;
  std::string v237 = &unk_26C5C3858;
  uint64_t v240 = v212;
  int v233 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v234, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  }
  else {
    std::string v234 = v206;
  }
  int v235 = v207;
  int v233 = &unk_26C5C3858;
  uint64_t v236 = v208;
  uint64_t v226 = &unk_26C5C3AF0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v227, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  }
  else {
    std::string v227 = v199;
  }
  int v228 = v200;
  uint64_t v226 = &unk_26C5C37F8;
  char v229 = v201;
  mediaplatform::Data::Data((mediaplatform::Data *)&v230, v204, v203, 1);
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v194;
  }
  int v223 = v195;
  int v221 = &unk_26C5C3878;
  uint64_t v224 = v196;
  int v225 = v197;
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v218, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v218 = v190;
  }
  int v219 = v191;
  int v217 = &unk_26C5C3858;
  uint64_t v220 = v192;
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v258, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v258 = v234;
  }
  int v259 = v235;
  std::string v257 = &unk_26C5C3858;
  uint64_t v260 = v236;
  size_t v250 = &unk_26C5C3AF0;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v251, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  }
  else {
    std::string v251 = v227;
  }
  int v252 = v228;
  size_t v250 = &unk_26C5C37F8;
  char v253 = v229;
  mediaplatform::Data::Data((mediaplatform::Data *)&v254, v232, v231, 1);
  int v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v246, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else {
    std::string v246 = v222;
  }
  int v247 = v223;
  int v245 = &unk_26C5C3878;
  uint64_t v248 = v224;
  int v249 = v225;
  std::string v241 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v242, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  }
  else {
    std::string v242 = v218;
  }
  int v243 = v219;
  std::string v241 = &unk_26C5C3858;
  uint64_t v244 = v220;
  int v270 = &unk_26C5C3AF0;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v271, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  }
  else {
    std::string v271 = v251;
  }
  int v272 = v252;
  int v270 = &unk_26C5C37F8;
  char v273 = v253;
  mediaplatform::Data::Data((mediaplatform::Data *)&v274, v256, v255, 1);
  std::string v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v266, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else {
    std::string v266 = v246;
  }
  int v267 = v247;
  std::string v265 = &unk_26C5C3878;
  uint64_t v268 = v248;
  int v269 = v249;
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v242;
  }
  int v263 = v243;
  std::string v261 = &unk_26C5C3858;
  uint64_t v264 = v244;
  uint64_t v281 = &unk_26C5C3AF0;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v282, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  }
  else {
    std::string v282 = v266;
  }
  int v283 = v267;
  uint64_t v281 = &unk_26C5C3878;
  uint64_t v284 = v268;
  int v285 = v269;
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v278, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  }
  else {
    std::string v278 = v262;
  }
  int v20 = v263;
  int v279 = v263;
  int v277 = &unk_26C5C3858;
  uint64_t v21 = v264;
  uint64_t v280 = v264;
  uint64_t v286 = &unk_26C5C3AF0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v287, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
    int v20 = v279;
    uint64_t v21 = v280;
  }
  else
  {
    std::string v287 = v278;
  }
  int v288 = v20;
  uint64_t v286 = &unk_26C5C3858;
  uint64_t v289 = v21;
  *(void *)a1 = &unk_26C5C3AF0;
  char v22 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
    int v20 = v288;
    uint64_t v21 = v289;
    char v22 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(std::string *)(a1 + 8) = v287;
  }
  *(_DWORD *)(a1 + 32) = v20;
  *(void *)a1 = &unk_26C5C3858;
  *(void *)(a1 + 36) = v21;
  uint64_t v286 = &unk_26C5C3AF0;
  if (v22 < 0) {
    operator delete(v287.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  unint64_t v23 = (std::string *)(a1 + 56);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v23, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
    *(void *)(a1 + 72) = *((void *)&v282.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 80) = v283;
  *(void *)(a1 + 48) = &unk_26C5C3878;
  *(void *)(a1 + 84) = v284;
  *(_DWORD *)(a1 + 92) = v285;
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  uint64_t v281 = &unk_26C5C3AF0;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v282.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 104), v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 104) = v271;
  }
  *(_DWORD *)(a1 + 128) = v272;
  *(void *)(a1 + 96) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 132) = v273;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 136), v276, v275, 1);
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  std::string v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v266.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v270);
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  unint64_t v24 = (std::string *)(a1 + 184);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v258.__r_.__value_.__l.__data_;
    *(void *)(a1 + 200) = *((void *)&v258.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 208) = v259;
  *(void *)(a1 + 176) = &unk_26C5C3858;
  *(void *)(a1 + 212) = v260;
  std::string v241 = &unk_26C5C3AF0;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  int v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v246.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v250);
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  uint8x8_t v25 = (std::string *)(a1 + 232);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
    *(void *)(a1 + 248) = *((void *)&v238.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 256) = v239;
  *(void *)(a1 + 224) = &unk_26C5C3858;
  *(void *)(a1 + 260) = v240;
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v226);
  int v233 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  BOOL v26 = (std::string *)(a1 + 280);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&v214.__r_.__value_.__l.__data_;
    *(void *)(a1 + 296) = *((void *)&v214.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 304) = v215;
  *(void *)(a1 + 272) = &unk_26C5C3858;
  *(void *)(a1 + 308) = v216;
  uint64_t v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  std::string v193 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v198);
  uint64_t v205 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v206.__r_.__value_.__l.__data_);
  }
  int v209 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v210.__r_.__value_.__l.__data_);
  }
  uint64_t v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  uint64_t v27 = (std::string *)(a1 + 328);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v186.__r_.__value_.__l.__data_;
    *(void *)(a1 + 344) = *((void *)&v186.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 352) = v187;
  *(void *)(a1 + 320) = &unk_26C5C3858;
  *(void *)(a1 + 356) = v188;
  uint64_t v157 = &unk_26C5C3AF0;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  unint64_t v161 = &unk_26C5C3AF0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v166);
  long long v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  unint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  char v185 = &unk_26C5C3AF0;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  unint64_t v28 = (std::string *)(a1 + 376);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
    *(void *)(a1 + 392) = *((void *)&v153.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 400) = v154;
  *(void *)(a1 + 368) = &unk_26C5C3878;
  *(void *)(a1 + 404) = v155;
  *(_DWORD *)(a1 + 412) = v156;
  uint64_t v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  uint64_t v124 = &unk_26C5C3AF0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v129);
  long long v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  uint64_t v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  long long v144 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  std::string v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  long long v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  uint64_t v29 = (std::string *)(a1 + 424);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v29, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *(void *)(a1 + 440) = *((void *)&v116.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 448) = v117;
  *(void *)(a1 + 416) = &unk_26C5C3878;
  *(void *)(a1 + 452) = v118;
  *(_DWORD *)(a1 + 460) = v119;
  uint64_t v78 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  long long v82 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v87);
  long long v94 = &unk_26C5C3AF0;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  long long v98 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  uint64_t v102 = &unk_26C5C3AF0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  long long v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  std::string v115 = &unk_26C5C3AF0;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  long long v30 = (std::string *)(a1 + 472);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
    *(void *)(a1 + 488) = *((void *)&v75.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 496) = v76;
  *(void *)(a1 + 464) = &unk_26C5C3858;
  *(void *)(a1 + 500) = v77;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v36 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v41);
  unint64_t v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  unint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  int v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  int64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  long long v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 512) = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 520), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 536) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 520) = v31;
  }
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 512) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 548) = *(unsigned char *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 552), *(const void **)(a2 + 64), *(void *)(a2 + 48), 1);
  return a1;
}

void sub_214DFB4DC(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

void sub_214DFBC14()
{
  STACK[0xC18] = v0;
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  JUMPOUT(0x214DFB7E4);
}

void sub_214DFBC30()
{
  STACK[0xB38] = v0;
  if (SLOBYTE(STACK[0xB57]) < 0) {
    operator delete((void *)STACK[0xB40]);
  }
  JUMPOUT(0x214DFB81CLL);
}

void sub_214DFBC4C()
{
  STACK[0xA28] = v0;
  if (SLOBYTE(STACK[0xA47]) < 0) {
    operator delete((void *)STACK[0xA30]);
  }
  JUMPOUT(0x214DFB86CLL);
}

void sub_214DFBC68()
{
  STACK[0x8E8] = v0;
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete((void *)STACK[0x8F0]);
  }
  JUMPOUT(0x214DFB8D4);
}

void sub_214DFBC84()
{
  STACK[0x778] = v0;
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  JUMPOUT(0x214DFB954);
}

void sub_214DFBCA0()
{
  STACK[0x5D8] = v0;
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  JUMPOUT(0x214DFB9ECLL);
}

void sub_214DFBCBC()
{
  STACK[0x408] = v0;
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  JUMPOUT(0x214DFBA9CLL);
}

void sub_214DFBCD8()
{
  STACK[0x208] = v0;
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  JUMPOUT(0x214DFBB64);
}

mediaplatform::Data *mediaplatform::Data::Data(mediaplatform::Data *this, const void *__src, size_t __n, int a4)
{
  *(void *)this = &unk_26C5BF2D8;
  *((void *)this + 1) = __n;
  *((void *)this + 2) = __n;
  if (__n && a4) {
    operator new[]();
  }
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = a4;
  if (a4)
  {
    if (__src) {
      memcpy(0, __src, __n);
    }
    else {
      bzero(0, __n);
    }
  }
  else
  {
    *((void *)this + 3) = __src;
  }
  return this;
}

void *mlcore::InPredicate<long long>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C46C0;
  char v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

void mlcore::OrPredicate::~OrPredicate(mlcore::OrPredicate *this)
{
  *(void *)this = &unk_26C5C73B8;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_26C5C73B8;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2166B26F0);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryID(void)::$_0 &&>>()
{
}

void sub_214DFC014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::purchaseHistoryIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3551) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 441), *((void *)this + 442));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3528);
    *(void *)(a2 + 24) = *((void *)this + 443);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 888);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 891);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3556);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrder(void)::$_0 &&>>()
{
}

void sub_214DFC334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::titleOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((void *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(void *)(a2 + 24) = *((void *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 511);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2036);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrder(void)::$_0 &&>>()
{
}

void sub_214DFC654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::genreOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2847) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 353), *((void *)this + 354));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2824);
    *(void *)(a2 + 24) = *((void *)this + 355);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 712);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 715);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2852);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::$_0 &&>>()
{
}

void sub_214DFC974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::assetStoreExtendedLyricsAttributeColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 769), *((void *)this + 770));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6152);
    *(void *)(a2 + 24) = *((void *)this + 771);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1544);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1547);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6180);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySyncID(void)::$_0 &&>>()
{
}

void sub_214DFCC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::syncIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 995), *((void *)this + 996));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7960);
    *(void *)(a2 + 24) = *((void *)this + 997);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1996);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1999);
  *(void *)(a2 + 36) = *(void *)((char *)this + 7988);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateDownloaded(void)::$_0 &&>>()
{
}

void sub_214DFCFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::dateDownloadedColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3663) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 455), *((void *)this + 456));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3640);
    *(void *)(a2 + 24) = *((void *)this + 457);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 916);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 919);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3668);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBaseLocationID(void)::$_0 &&>>()
{
}

void sub_214DFD2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::baseLocationIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3087) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 383), *((void *)this + 384));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3064);
    *(void *)(a2 + 24) = *((void *)this + 385);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 772);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 775);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3092);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTotalTime(void)::$_0 &&>>()
{
}

void sub_214DFD604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStartTime(void)::$_0 &&>>()
{
}

void sub_214DFD87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C5C7DA8;
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 72) = &unk_26C5C3838;
  uint64_t v7 = *(void *)(a3 + 36);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a3 + 44);
  *(void *)(a1 + 108) = v7;
  *(void *)(a1 + 72) = &unk_26C5C47A8;
  return a1;
}

void sub_214DFDA24(_Unwind_Exception *a1)
{
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

void mlcore::ItemExtraTable::totalTimeColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2255) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 279), *((void *)this + 280));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2232);
    *(void *)(a2 + 24) = *((void *)this + 281);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 564);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 567);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2260);
  *(void *)a2 = &unk_26C5C47A8;
}

void mlcore::ItemPlaybackTable::startTimeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((void *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(void *)(a2 + 24) = *((void *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 511);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2036);
  *(void *)a2 = &unk_26C5C47A8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStopTime(void)::$_0 &&>>()
{
}

void sub_214DFDD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::stopTimeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 257), *((void *)this + 258));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2056);
    *(void *)(a2 + 24) = *((void *)this + 259);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 520);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 523);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2084);
  *(void *)a2 = &unk_26C5C47A8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRelativeVolume(void)::$_0 &&>>()
{
}

void sub_214DFE070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::relativeVolumeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((void *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(void *)(a2 + 24) = *((void *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1940);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDurationInSamples(void)::$_0 &&>>()
{
}

void sub_214DFE388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::durationColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 187), *((void *)this + 188));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1496);
    *(void *)(a2 + 24) = *((void *)this + 189);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 380);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 383);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1524);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessHeuristicInfo(void)::$_0 &&>>()
{
}

void sub_214DFE6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::gaplessHeuristicInfoColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1695) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 209), *((void *)this + 210));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1672);
    *(void *)(a2 + 24) = *((void *)this + 211);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 424);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 427);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1700);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDrain(void)::$_0 &&>>()
{
}

void sub_214DFE9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::gaplessEncodingDrainColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1791) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 221), *((void *)this + 222));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1768);
    *(void *)(a2 + 24) = *((void *)this + 223);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 448);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 451);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1796);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDelay(void)::$_0 &&>>()
{
}

void sub_214DFECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyVolumeNormalization(void)::$_0 &&>>()
{
}

void sub_214DFEF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessLastFrameResync(void)::$_0 &&>>()
{
}

void sub_214DFF1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214DFF300(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore17ItemPlaybackTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  char v2 = operator new(0x8A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CAA98;
  uint64_t result = mlcore::ItemPlaybackTable::ItemPlaybackTable((mlcore::ItemPlaybackTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_214DFF38C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemPlaybackTable::volumeNormalizationEnergyColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 263), *((void *)this + 264));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2104);
    *(void *)(a2 + 24) = *((void *)this + 265);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 532);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2132);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::gaplessLastFrameResyncColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 227), *((void *)this + 228));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1816);
    *(void *)(a2 + 24) = *((void *)this + 229);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 460);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 463);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1844);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemPlaybackTable::gaplessEncodingDelayColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1743) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 215), *((void *)this + 216));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1720);
    *(void *)(a2 + 24) = *((void *)this + 217);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 436);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 439);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1748);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214DFF75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214DFF9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C5C7EB8;
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 72) = &unk_26C5C3878;
  uint64_t v7 = *(void *)(a3 + 36);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a3 + 44);
  *(void *)(a1 + 108) = v7;
  *(void *)(a1 + 72) = &unk_26C5C47E8;
  return a1;
}

void sub_214DFFB7C(_Unwind_Exception *a1)
{
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

void mlcore::ItemTable::persistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((void *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(void *)(a2 + 24) = *((void *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 487);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1940);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyHasName(void)::$_0 &&>>()
{
}

void sub_214DFFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::GenrePropertyOrder(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::GenrePropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyGenreOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::GenrePropertyRepresentativeItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::GenrePropertyRepresentativeItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::GenrePropertyRepresentativeItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyGenreOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGenreOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGenreOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenreOrder(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationJoinRequestPending(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyPersonPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::ItemArtistPropertyClassicalExperienceAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::ContainerItemPersonPropertyPersonPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::ArtistPropertyRepresentativeItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyContainerPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::property;
}

uint64_t mlcore::ArtistPropertyClassicalExperienceAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyClassicalExperienceAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyClassicalExperienceAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::PlaylistPropertyExternalVendorDisplayName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyExternalVendorDisplayName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorDisplayName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorDisplayName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorDisplayName(void)::property;
}

uint64_t mlcore::AlbumPropertyClassicalExperienceAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyClassicalExperienceAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyClassicalExperienceAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::TVSeasonPropertyLatestItemDateDownloaded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsExternalVendorPlaylist(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyReactionText(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemReactionPropertyReactionText(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyReactionText(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyReactionText(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyReactionText(void)::property;
}

uint64_t mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreTVSeasonCanonicalItemId(void)::property;
}

uint64_t mlcore::ItemPropertyStoreExtendedLyricsAttribute(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsTracklistUserEditable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsTracklistUserEditable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsTracklistUserEditable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsTracklistUserEditable(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaboratorPermissions(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaboratorPermissions(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaboratorPermissions(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorPermissions(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaboratorPermissions(void)::property;
}

uint64_t mlcore::ItemPropertyStoreTVShowCanonicalItemId(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreTVShowCanonicalItemId(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreTVShowCanonicalItemId(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreTVShowCanonicalItemId(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreTVShowCanonicalItemId(void)::property;
}

uint64_t mlcore::PlaylistPropertyLikedStateChangedDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyLikedStateChangedDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyLikedStateChangedDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalStatusReason(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyKeepLocalStatusReason(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalStatusReason(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::ItemPropertyTimeSyncedLyricsAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyHomeSharingAssetAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHomeSharingAssetAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHomeSharingAssetAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingAssetAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHomeSharingAssetAvailable(void)::property;
}

uint64_t mlcore::ArtistPropertyCloudUniversalLibraryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyCloudUniversalLibraryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyCloudUniversalLibraryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalConstraints(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyKeepLocalConstraints(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalConstraints(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::TVSeasonPropertyLatestItemDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVSeasonPropertyLatestItemDateAdded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVSeasonPropertyLatestItemDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::PersonPropertyHasLightweightProfile(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyHasLightweightProfile(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyHasLightweightProfile(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHasLightweightProfile(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyHasLightweightProfile(void)::property;
}

uint64_t mlcore::ComposerPropertyLatestItemDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyLatestItemDateAdded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyLatestItemDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyHasBeenPlayed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::property;
}

uint64_t mlcore::ArtistPropertyLikedStateChangedDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyLikedStateChangedDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyLikedStateChangedDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::AlbumPropertyMaximumItemTrackNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyMaximumItemTrackNumber(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyMaximumItemTrackNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyMaximumItemTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyMaximumItemTrackNumber(void)::property;
}

uint64_t mlcore::AlbumPropertyLibraryTracksItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyLibraryTracksItemCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyLibraryTracksItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLibraryTracksItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLibraryTracksItemCount(void)::property;
}

uint64_t mlcore::PlaylistPropertyShouldDisplayIndex(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyShouldDisplayIndex(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyShouldDisplayIndex(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyShouldDisplayIndex(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyShouldDisplayIndex(void)::property;
}

uint64_t mlcore::PlaylistPropertyParentPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyParentPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyParentPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyParentPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyParentPersistentID(void)::property;
}

uint64_t mlcore::PlaylistPropertyCoverArtworkRecipe(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCoverArtworkRecipe(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCoverArtworkRecipe(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCoverArtworkRecipe(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCoverArtworkRecipe(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaboratorStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCollaboratorStatus(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCollaboratorStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorStatus(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaboratorStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorStoreID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudAuthorStoreID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorStoreID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorStoreID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorStoreID(void)::property;
}

uint64_t mlcore::ItemPropertyLibraryLyricsAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLibraryLyricsAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLibraryLyricsAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLibraryLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLibraryLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessLastFrameResync(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGaplessLastFrameResync(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGaplessLastFrameResync(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessLastFrameResync(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessLastFrameResync(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeTypeDisplayName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEpisodeTypeDisplayName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEpisodeTypeDisplayName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeTypeDisplayName(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeTypeDisplayName(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovementCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyClassicalMovementCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyClassicalMovementCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovementCount(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyBookmarkTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkTime(void)::property;
}

uint64_t mlcore::AlbumPropertyLikedStateChangedDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyLikedStateChangedDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyLikedStateChangedDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalStatusReason(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyKeepLocalStatusReason(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalStatusReason(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::AlbumPropertyIsStoreRedownloadable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyIsStoreRedownloadable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyIsStoreRedownloadable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyIsStoreRedownloadable(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyIsStoreRedownloadable(void)::property;
}

uint64_t mlcore::AlbumPropertyContainsClassicalWork(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyContainsClassicalWork(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyContainsClassicalWork(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyContainsClassicalWork(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyContainsClassicalWork(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorHandle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudAuthorHandle(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorHandle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorHandle(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorHandle(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsPersonalMix(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistCategoryTypeIsPersonalMix(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsPersonalMix(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsPersonalMix(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsPersonalMix(void)::property;
}

uint64_t mlcore::ItemPropertyLikedStateChangedDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLikedStateChangedDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLikedStateChangedDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocalStatusReason(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyKeepLocalStatusReason(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyKeepLocalStatusReason(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::ItemPropertyHasLoFiStreamingAsset(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasLoFiStreamingAsset(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasLoFiStreamingAsset(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasLoFiStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasLoFiStreamingAsset(void)::property;
}

uint64_t mlcore::ArtistPropertyLatestItemDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyLatestItemDateAdded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyLatestItemDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalConstraints(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyKeepLocalConstraints(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalConstraints(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemReactionPropertyDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyDate(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyPositionUUID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyPositionUUID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyPositionUUID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPositionUUID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPositionUUID(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyOccurrenceID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyOccurrenceID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyOccurrenceID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyOccurrenceID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyOccurrenceID(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsUserShared(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistCategoryTypeIsUserShared(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsUserShared(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsUserShared(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsUserShared(void)::property;
}

uint64_t mlcore::ItemPropertyStoreLyricsAvailable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreLyricsAvailable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreLyricsAvailable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyShowComposerAsArtist(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyShowComposerAsArtist(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyShowComposerAsArtist(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowComposerAsArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyShowComposerAsArtist(void)::property;
}

uint64_t mlcore::ItemPropertyRememberBookmarkTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyRememberBookmarkTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyRememberBookmarkTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRememberBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRememberBookmarkTime(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyServerProtocol(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHLSKeyServerProtocol(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHLSKeyServerProtocol(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerProtocol(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyServerProtocol(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyCertificateURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHLSKeyCertificateURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHLSKeyCertificateURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyCertificateURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyCertificateURL(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessHeuristicInfo(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGaplessHeuristicInfo(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGaplessHeuristicInfo(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessHeuristicInfo(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessHeuristicInfo(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessEncodingDrain(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGaplessEncodingDrain(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGaplessEncodingDrain(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDrain(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessEncodingDrain(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessEncodingDelay(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGaplessEncodingDelay(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGaplessEncodingDelay(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDelay(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessEncodingDelay(void)::property;
}

uint64_t mlcore::GenrePropertyLatestItemDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::GenrePropertyLatestItemDateAdded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::GenrePropertyLatestItemDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::AlbumPropertyVolumeNormalization(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyVolumeNormalization(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyVolumeNormalization(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyVolumeNormalization(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyVolumeNormalization(void)::property;
}

uint64_t mlcore::AlbumPropertyLatestItemDateAdded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyLatestItemDateAdded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyLatestItemDateAdded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyKeepLocalStatus(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyDatePlayedLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDatePlayedLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDatePlayedLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayedLocal(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDatePlayedLocal(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudAuthorName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorName(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsEditorial(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistCategoryTypeIsEditorial(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsEditorial(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsEditorial(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsEditorial(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyIsPending(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyIsPending(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyIsPending(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyIsPending(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyIsPending(void)::property;
}

uint64_t mlcore::ItemPropertyStoreNeedsReporting(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreNeedsReporting(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreNeedsReporting(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreNeedsReporting(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreNeedsReporting(void)::property;
}

uint64_t mlcore::ItemPropertyPodcastExternalGUID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPodcastExternalGUID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPodcastExternalGUID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPodcastExternalGUID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPodcastExternalGUID(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeSubSortOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEpisodeSubSortOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEpisodeSubSortOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSubSortOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeSubSortOrder(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyPlayCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyPlayCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyPlayCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyPlayCount(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyPlayCount(void)::property;
}

uint64_t mlcore::TVEpisodePropertyEpisodeSortID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVEpisodePropertyEpisodeSortID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVEpisodePropertyEpisodeSortID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyEpisodeSortID(void)::$_0 &&>>);
  }
  return mlcore::TVEpisodePropertyEpisodeSortID(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsCuratorOwned(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsCuratorOwned(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsCuratorOwned(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCuratorOwned(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsCuratorOwned(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateDownloaded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDateDownloaded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDateDownloaded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateDownloaded(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudIsVisible(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudIsVisible(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsVisible(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsVisible(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsVisible(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyPosition(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyPosition(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPosition(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPosition(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPosition(void)::property;
}

uint64_t mlcore::ArtistPropertyLibraryItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyLibraryItemCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyLibraryItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLibraryItemCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLibraryItemCount(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudShareURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudShareURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudShareURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudShareURL(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudShareURL(void)::property;
}

uint64_t mlcore::ItemPropertyPurchaseHistoryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPurchaseHistoryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryID(void)::property;
}

uint64_t mlcore::ItemPropertyHasStreamingAsset(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasStreamingAsset(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasStreamingAsset(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasStreamingAsset(void)::property;
}

uint64_t mlcore::ItemPropertyDurationInSamples(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDurationInSamples(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDurationInSamples(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDurationInSamples(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDurationInSamples(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovement(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyClassicalMovement(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyClassicalMovement(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovement(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovement(void)::property;
}

uint64_t mlcore::TVSeasonPropertyEpisodeCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVSeasonPropertyEpisodeCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVSeasonPropertyEpisodeCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyEpisodeCount(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyEpisodeCount(void)::property;
}

uint64_t mlcore::PlaylistPropertyStoreCloudID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyStoreCloudID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyStoreCloudID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyStoreCloudID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyStoreCloudID(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateModified(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDateModified(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDateModified(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateModified(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateModified(void)::property;
}

uint64_t mlcore::ItemArtistPropertySeriesName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertySeriesName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertySeriesName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySeriesName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySeriesName(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyKeepLocalStatus(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalStatus(void)::property;
}

uint64_t mlcore::AlbumPropertyDatePlayedLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyDatePlayedLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyDatePlayedLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDatePlayedLocal(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyDatePlayedLocal(void)::property;
}

uint64_t mlcore::AlbumPropertyAllCompilations(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyAllCompilations(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyAllCompilations(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAllCompilations(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyAllCompilations(void)::property;
}

uint64_t mlcore::TVShowPropertyHasSeriesName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVShowPropertyHasSeriesName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVShowPropertyHasSeriesName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyHasSeriesName(void)::$_0 &&>>);
  }
  return mlcore::TVShowPropertyHasSeriesName(void)::property;
}

uint64_t mlcore::PlaylistPropertyDescription(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDescription(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDescription(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDescription(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDescription(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateCreated(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDateCreated(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDateCreated(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateCreated(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateCreated(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyServerURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHLSKeyServerURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHLSKeyServerURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyServerURL(void)::property;
}

uint64_t mlcore::ItemPropertyAlbumTrackCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAlbumTrackCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAlbumTrackCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumTrackCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumTrackCount(void)::property;
}

uint64_t mlcore::AlbumPropertyDateDownloaded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyDateDownloaded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyDateDownloaded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyDateDownloaded(void)::property;
}

uint64_t mlcore::AlbumPropertyCloudLibraryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyCloudLibraryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyCloudLibraryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyCloudLibraryID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyCloudLibraryID(void)::property;
}

uint64_t mlcore::TVShowPropertyEpisodeCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVShowPropertyEpisodeCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVShowPropertyEpisodeCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyEpisodeCount(void)::$_0 &&>>);
  }
  return mlcore::TVShowPropertyEpisodeCount(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyRole(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistAuthorPropertyRole(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistAuthorPropertyRole(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyRole(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyRole(void)::property;
}

uint64_t mlcore::PersonPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyStoreAccountID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreAccountID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreAccountID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreAccountID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreAccountID(void)::property;
}

uint64_t mlcore::ItemPropertyRelativeVolume(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyRelativeVolume(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyRelativeVolume(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRelativeVolume(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRelativeVolume(void)::property;
}

uint64_t mlcore::ItemPropertyHasTrackNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasTrackNumber(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasTrackNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasTrackNumber(void)::property;
}

uint64_t mlcore::ItemPropertyHLSAssetTraits(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHLSAssetTraits(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHLSAssetTraits(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAssetTraits(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSAssetTraits(void)::property;
}

uint64_t mlcore::PlaylistPropertyNameOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyNameOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyNameOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyNameOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyNameOrder(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyKeepLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocal(void)::property;
}

uint64_t mlcore::ItemPropertySkipCountUser(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySkipCountUser(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySkipCountUser(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountUser(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySkipCountUser(void)::property;
}

uint64_t mlcore::ItemPropertyPlayCountUser(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPlayCountUser(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPlayCountUser(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountUser(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPlayCountUser(void)::property;
}

uint64_t mlcore::ItemPropertyHomeSharingID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHomeSharingID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHomeSharingID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHomeSharingID(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeSortID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEpisodeSortID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEpisodeSortID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSortID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeSortID(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalWork(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyClassicalWork(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyClassicalWork(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalWork(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalWork(void)::property;
}

uint64_t mlcore::AlbumPropertySeasonNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertySeasonNumber(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertySeasonNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySeasonNumber(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertySeasonNumber(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyUUID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyUUID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyUUID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyUUID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyUUID(void)::property;
}

uint64_t mlcore::ArtistPropertyAlbumCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyAlbumCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyAlbumCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyAlbumCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyAlbumCount(void)::property;
}

uint64_t mlcore::ItemPropertyIsProtected(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsProtected(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsProtected(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsProtected(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsProtected(void)::property;
}

uint64_t mlcore::ItemPropertyIsMusicShow(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsMusicShow(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsMusicShow(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMusicShow(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsMusicShow(void)::property;
}

uint64_t mlcore::ComposerPropertyHasName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyHasName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyHasName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyHasName(void)::property;
}

uint64_t mlcore::ArtistPropertyItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyItemCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyItemCount(void)::property;
}

uint64_t mlcore::AlbumPropertyIsPreOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyIsPreOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyIsPreOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyIsPreOrder(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyIsPreOrder(void)::property;
}

uint64_t mlcore::PlaylistPropertyTraits(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyTraits(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyTraits(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyTraits(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyTraits(void)::property;
}

uint64_t mlcore::PlaylistPropertySyncID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySyncID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySyncID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySyncID(void)::property;
}

uint64_t mlcore::PersonPropertyImageURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyImageURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyImageURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageURL(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyImageURL(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyKeepLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyKeepLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocal(void)::property;
}

uint64_t mlcore::AlbumPropertyItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyItemCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyItemCount(void)::property;
}

uint64_t mlcore::ItemPropertyStartTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStartTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStartTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStartTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStartTime(void)::property;
}

uint64_t mlcore::PlaylistPropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyName(void)::property;
}

uint64_t mlcore::PersonPropertyHandle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyHandle(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyHandle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHandle(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyHandle(void)::property;
}

uint64_t mlcore::ItemPropertyStopTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStopTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStopTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStopTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStopTime(void)::property;
}

uint64_t mlcore::ItemPropertyGrouping(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGrouping(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGrouping(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGrouping(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGrouping(void)::property;
}

uint64_t mlcore::ItemPropertyFileSize(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyFileSize(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyFileSize(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFileSize(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyFileSize(void)::property;
}

uint64_t mlcore::GenrePropertyHasName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::GenrePropertyHasName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::GenrePropertyHasName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyHasName(void)::property;
}

uint64_t mlcore::ComposerPropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyName(void)::property;
}

uint64_t mlcore::AlbumPropertyFeedURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyFeedURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyFeedURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyFeedURL(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyFeedURL(void)::property;
}

uint64_t mlcore::AlbumPropertyAppData(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyAppData(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyAppData(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAppData(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyAppData(void)::property;
}

uint64_t mlcore::AlbumPropertySyncID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertySyncID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertySyncID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertySyncID(void)::property;
}

uint64_t mlcore::MoviePropertyInfo(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::MoviePropertyInfo(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::MoviePropertyInfo(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyInfo(void)::$_0 &&>>);
  }
  return mlcore::MoviePropertyInfo(void)::property;
}

uint64_t mlcore::GenrePropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::GenrePropertyName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::GenrePropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyName(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyName(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyYear(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyYear(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyYear(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyYear(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyYear(void)::property;
}

uint64_t mlcore::ItemPropertyBPM(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyBPM(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyBPM(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBPM(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBPM(void)::property;
}

std::string *mlcore::Section::Section(std::string *this, long long *a2, _OWORD *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
  return this;
}

{
  long long v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
  return this;
}

__n128 mlcore::TypedEntityClass<mlcore::Item>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C5CAFD8;
  mlcore::Item::Item((mlcore::Item *)(v8 + 3), a2);
  v11[0] = (unint64_t)&unk_26C5C8E68;
  void v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  void v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_214E03BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

double mlcore::Item::Item(mlcore::Item *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8380;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8380;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPosition(void)::$_0 &&>>()
{
}

void sub_214E048F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerAuthorTable::positionColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(void *)(a2 + 36) = *(void *)((char *)this + 644);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::$_0 &&>>()
{
}

void sub_214E04C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerAuthorTable::personPersistentIDColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 495) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 59), *((void *)this + 60));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 472);
    *(void *)(a2 + 24) = *((void *)this + 61);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 124);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 127);
  *(void *)(a2 + 36) = *(void *)((char *)this + 500);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::$_0 &&>>()
{
}

void sub_214E04F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerAuthorTable::containerPersistentIDColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(void *)(a2 + 24) = *((void *)this + 55);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 112);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 115);
  *(void *)(a2 + 36) = *(void *)((char *)this + 452);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E05244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyRole(void)::$_0 &&>>()
{
}

void sub_214E054BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyIsPending(void)::$_0 &&>>()
{
}

void sub_214E05734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E0585C(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__sharedPointer;
}

mlcore::ContainerAuthorTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore20ContainerAuthorTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerAuthorTable **a1)
{
  char v2 = operator new(0x2A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CAC58;
  double result = mlcore::ContainerAuthorTable::ContainerAuthorTable((mlcore::ContainerAuthorTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerAuthorTable *)v2;
  return result;
}

void sub_214E05950(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ContainerAuthorTable::persistentIDColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(void *)(a2 + 24) = *((void *)this + 49);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 100);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 103);
  *(void *)(a2 + 36) = *(void *)((char *)this + 404);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerAuthorTable::isPendingColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 71), *((void *)this + 72));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(void *)(a2 + 24) = *((void *)this + 73);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 148);
  *(void *)(a2 + 36) = *(void *)((char *)this + 596);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerAuthorTable::roleColumn(mlcore::ContainerAuthorTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 65), *((void *)this + 66));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 520);
    *(void *)(a2 + 24) = *((void *)this + 67);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 136);
  *(void *)(a2 + 36) = *(void *)((char *)this + 548);
  *(void *)a2 = &unk_26C5C47C8;
}

uint64_t std::__tuple_leaf<37ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E05C40(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<30ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E05D54(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<29ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E05E68(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<28ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E05F7C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<27ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  long long v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E06090(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<double>::_SQLJoinClauses(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(&v36, a1);
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (v36 != v37)
  {
    do
    {
      uint64_t v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(__p, v7);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        uint64_t v32 = 0;
        std::string v33 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 96))(&v38, v7, &v32);
        LODWORD(v28) = 13;
        (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v10 + 32))(&v31, v10, *(void *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v34, &v38, (int *)&v28, &v31);
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v38 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v12 = a1[11];
        if (v12)
        {
          LODWORD(v28) = 1;
          uint64_t v29 = 0;
          long long v30 = 0;
          (*(void (**)(long long *__return_ptr))(*(void *)v12 + 64))(&v31);
          float v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v38, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v28, &v31);
          long long v14 = v38;
          long long v34 = v38;
          long long v26 = v38;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            long long v14 = v26;
          }
          if (*((void *)&v31 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
            long long v14 = v26;
          }
          if (v30)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            long long v14 = v26;
          }
        }
        else
        {
          long long v14 = v34;
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v31, v14, *((std::__shared_weak_count **)&v14 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v28, 1, v10 + 8, (uint64_t *)&v31);
        long long v15 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v17 = (_OWORD *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v17 >= v16)
        {
          long long v27 = v15;
          uint64_t v19 = ((uint64_t)v17 - *a3) >> 4;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - *a3;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          long long v41 = a3 + 2;
          unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v22);
          unint64_t v24 = &v23[16 * v19];
          *(void *)&long long v38 = v23;
          *((void *)&v38 + 1) = v24;
          int v40 = &v23[16 * v25];
          *(_OWORD *)unint64_t v24 = v27;
          uint64_t v39 = v24 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v38);
          long long v18 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          *unint64_t v17 = v15;
          long long v18 = v17 + 1;
          a3[1] = v18;
        }
        a3[1] = v18;
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v36;
  }
  if (v8)
  {
    std::string v37 = v8;
    operator delete(v8);
  }
}

void sub_214E064B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
}

uint64_t mlcore::ForeignProperty<double>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<double>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))();
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214E06658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_214E066EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::ColumnNamesApplier::operator()<double>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a2 + 8);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  long long v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    std::string *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    long long v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string *v4 = v12;
    long long v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_214E06848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyAvailableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 5;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214E06A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistPropertyFetchableArtworkSourceType(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 5;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return Foreign;
}

void sub_214E06CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistPropertyFetchableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 5;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  float v13 = 0;
  long long v14 = 0u;
  unint64_t v16 = (void **)&v13;
  char v17 = 0;
  float v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  unint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214E06F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::PlaylistPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyContainsClassicalWork(void)::$_0 &&>>()
{
}

void sub_214E071FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::containsClassicalWorkColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 305), *((void *)this + 306));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2440);
    *(void *)(a2 + 24) = *((void *)this + 307);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 616);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2468);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
}

void sub_214E07514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::keepLocalConstraintsColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2335) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 289), *((void *)this + 290));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2312);
    *(void *)(a2 + 24) = *((void *)this + 291);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 584);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2340);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySyncID(void)::$_0 &&>>()
{
}

void sub_214E0782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::syncIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2607) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 323), *((void *)this + 324));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2584);
    *(void *)(a2 + 24) = *((void *)this + 325);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 652);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 655);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2612);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyArtistPersistentID(void)::$_0 &&>>()
{
}

void sub_214E07B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::albumArtistPersistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1663) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 205), *((void *)this + 206));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1640);
    *(void *)(a2 + 24) = *((void *)this + 207);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 416);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 419);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1668);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyCloudLibraryID(void)::$_0 &&>>()
{
}

void sub_214E07E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::cloudLibraryIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 341), *((void *)this + 342));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2728);
    *(void *)(a2 + 24) = *((void *)this + 343);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 688);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2756);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2783) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 345), *((void *)this + 346));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2760);
    *(void *)(a2 + 56) = *((void *)this + 347);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E07FC8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDatePlayedLocal(void)::$_0 &&>>()
{
}

void sub_214E081B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::datePlayedLocalColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 311), *((void *)this + 312));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(void *)(a2 + 24) = *((void *)this + 313);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 628);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 631);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2516);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyFeedURL(void)::$_0 &&>>()
{
}

void sub_214E084A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::feedURLColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((void *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(void *)(a2 + 24) = *((void *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2036);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2063) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 255), *((void *)this + 256));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2040);
    *(void *)(a2 + 56) = *((void *)this + 257);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0862C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
}

void sub_214E08814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::likedStateChangedDateColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2815) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 349), *((void *)this + 350));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2792);
    *(void *)(a2 + 24) = *((void *)this + 351);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 704);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 707);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2820);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatus(void)::$_0 &&>>()
{
}

void sub_214E08B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::keepLocalStatusColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2239) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 277), *((void *)this + 278));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2216);
    *(void *)(a2 + 24) = *((void *)this + 279);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 560);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2244);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
}

void sub_214E08E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::representativeItemPersistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 211), *((void *)this + 212));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1688);
    *(void *)(a2 + 24) = *((void *)this + 213);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 428);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 431);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1716);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySeasonNumber(void)::$_0 &&>>()
{
}

void sub_214E0916C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::seasonNumberColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2095) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 259), *((void *)this + 260));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2072);
    *(void *)(a2 + 24) = *((void *)this + 261);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 524);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2100);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyYear(void)::$_0 &&>>()
{
}

void sub_214E09484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::albumYearColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2143) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 265), *((void *)this + 266));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2120);
    *(void *)(a2 + 24) = *((void *)this + 267);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 536);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2148);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocal(void)::$_0 &&>>()
{
}

void sub_214E0979C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::keepLocalColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2191) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 271), *((void *)this + 272));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2168);
    *(void *)(a2 + 24) = *((void *)this + 273);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 548);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2196);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
}

void sub_214E09AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::keepLocalStatusReasonColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2287) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 283), *((void *)this + 284));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2264);
    *(void *)(a2 + 24) = *((void *)this + 285);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 572);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2292);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyTitle(void)::$_0 &&>>()
{
}

void sub_214E09DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::titleColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1535) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 189), *((void *)this + 190));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1512);
    *(void *)(a2 + 24) = *((void *)this + 191);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 384);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1540);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1567) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 193), *((void *)this + 194));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1544);
    *(void *)(a2 + 56) = *((void *)this + 195);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E09F28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E0A110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::persistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((void *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(void *)(a2 + 24) = *((void *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1492);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAllCompilations(void)::$_0 &&>>()
{
}

void sub_214E0A430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::allCompilationsColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((void *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(void *)(a2 + 24) = *((void *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1988);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyClassicalExperienceAvailable(void)::$_0 &&>>()
{
}

void sub_214E0A748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedState(void)::$_0 &&>>()
{
}

void sub_214E0A9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E0AAE8(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::AlbumTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore10AlbumTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::AlbumTable **a1)
{
  char v2 = operator new(0xB28uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5C9F00;
  double result = mlcore::AlbumTable::AlbumTable((mlcore::AlbumTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::AlbumTable *)v2;
  return result;
}

void sub_214E0AB74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::AlbumTable::classicalExperienceAvailableColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2655) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 329), *((void *)this + 330));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2632);
    *(void *)(a2 + 24) = *((void *)this + 331);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 664);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2660);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::AlbumTable::likedStateColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((void *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(void *)(a2 + 24) = *((void *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1940);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitle(void)::$_0 &&>>()
{
}

void sub_214E0AE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::titleColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((void *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(void *)(a2 + 24) = *((void *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2036);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2063) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 255), *((void *)this + 256));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2040);
    *(void *)(a2 + 56) = *((void *)this + 257);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0AFF0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyYear(void)::$_0 &&>>()
{
}

void sub_214E0B1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::yearColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 285), *((void *)this + 286));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2280);
    *(void *)(a2 + 24) = *((void *)this + 287);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 576);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2308);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLocation(void)::$_0 &&>>()
{
}

void sub_214E0B4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::locationColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2351) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 291), *((void *)this + 292));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2328);
    *(void *)(a2 + 24) = *((void *)this + 293);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 588);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2356);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2383) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 295), *((void *)this + 296));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2360);
    *(void *)(a2 + 56) = *((void *)this + 297);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0B64C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRatingLevel(void)::$_0 &&>>()
{
}

void sub_214E0B834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::contentRatingLevelColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2735) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 339), *((void *)this + 340));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2712);
    *(void *)(a2 + 24) = *((void *)this + 341);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 684);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2740);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementCount(void)::$_0 &&>>()
{
}

void sub_214E0BB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::classicalMovementCountColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 461), *((void *)this + 462));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3688);
    *(void *)(a2 + 24) = *((void *)this + 463);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 928);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3716);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFileSize(void)::$_0 &&>>()
{
}

void sub_214E0BE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::fileSizeColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 299), *((void *)this + 300));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2392);
    *(void *)(a2 + 24) = *((void *)this + 301);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 604);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 607);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2420);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGrouping(void)::$_0 &&>>()
{
}

void sub_214E0C15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::groupingColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2991) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 371), *((void *)this + 372));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2968);
    *(void *)(a2 + 24) = *((void *)this + 373);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 748);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2996);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3023) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 375), *((void *)this + 376));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3000);
    *(void *)(a2 + 56) = *((void *)this + 377);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0C2E0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementNumber(void)::$_0 &&>>()
{
}

void sub_214E0C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::classicalMovementNumberColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3759) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 467), *((void *)this + 468));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3736);
    *(void *)(a2 + 24) = *((void *)this + 469);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 940);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3764);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPreorder(void)::$_0 &&>>()
{
}

void sub_214E0C7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::isPreorderColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3807) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 473), *((void *)this + 474));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3784);
    *(void *)(a2 + 24) = *((void *)this + 475);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 952);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3812);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRating(void)::$_0 &&>>()
{
}

void sub_214E0CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::contentRatingColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2687) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 333), *((void *)this + 334));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2664);
    *(void *)(a2 + 24) = *((void *)this + 335);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 672);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2692);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBPM(void)::$_0 &&>>()
{
}

void sub_214E0CE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::BPMColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2831) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 351), *((void *)this + 352));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2808);
    *(void *)(a2 + 24) = *((void *)this + 353);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 708);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2836);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCopyright(void)::$_0 &&>>()
{
}

void sub_214E0D100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::copyrightColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 403), *((void *)this + 404));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3224);
    *(void *)(a2 + 24) = *((void *)this + 405);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 812);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3252);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3279) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 407), *((void *)this + 408));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3256);
    *(void *)(a2 + 56) = *((void *)this + 409);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0D284(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalWork(void)::$_0 &&>>()
{
}

void sub_214E0D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::classicalWorkColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3583) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 445), *((void *)this + 446));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3560);
    *(void *)(a2 + 24) = *((void *)this + 447);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 896);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3588);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3615) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 449), *((void *)this + 450));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3592);
    *(void *)(a2 + 56) = *((void *)this + 451);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0D5C8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumTrackCount(void)::$_0 &&>>()
{
}

void sub_214E0D7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::trackCountColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2207) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 273), *((void *)this + 274));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2184);
    *(void *)(a2 + 24) = *((void *)this + 275);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 552);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2212);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovement(void)::$_0 &&>>()
{
}

void sub_214E0DAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLongDescription(void)::$_0 &&>>()
{
}

void sub_214E0DCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E0DDD0(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ItemExtraTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemExtraTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemExtraTable **a1)
{
  char v2 = operator new(0xF08uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA590;
  double result = mlcore::ItemExtraTable::ItemExtraTable((mlcore::ItemExtraTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemExtraTable *)v2;
  return result;
}

void sub_214E0DE5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemExtraTable::classicalMovementColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3647) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 453), *((void *)this + 454));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3624);
    *(void *)(a2 + 24) = *((void *)this + 455);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 912);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3652);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3679) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 457), *((void *)this + 458));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3656);
    *(void *)(a2 + 56) = *((void *)this + 459);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0DF6C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemExtraTable::descriptionLongColumn(mlcore::ItemExtraTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3119) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 387), *((void *)this + 388));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3096);
    *(void *)(a2 + 24) = *((void *)this + 389);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 780);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3124);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 391), *((void *)this + 392));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3128);
    *(void *)(a2 + 56) = *((void *)this + 393);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E0E084(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSmart(void)::$_0 &&>>()
{
}

void sub_214E0E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsTracklistUserEditable(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214E0E7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  if (*(char *)(v28 - 137) < 0) {
    operator delete(*(void **)(v28 - 160));
  }
  _Unwind_Resume(exception_object);
}

void sub_214E0E970()
{
}

uint64_t mlcore::PlaylistPropertySmartIsFolder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsFolder(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsFolder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFolder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsFolder(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsHidden(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsHidden(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsHidden(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsHidden(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsHidden(void)::property;
}

uint64_t mlcore::PlaylistPropertySmartIsGenius(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsGenius(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsGenius(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsGenius(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsGenius(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsSubscribed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsSubscribed(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsSubscribed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSubscribed(void)::property;
}

uint64_t mlcore::PlaylistPropertySmartCriteria(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartCriteria(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartCriteria(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartCriteria(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartCriteria(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsFavoritedSongs(void)::$_0 &&>>()
{
}

void sub_214E0ECD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyDistinguishedKind(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDistinguishedKind(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDistinguishedKind(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDistinguishedKind(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDistinguishedKind(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsEditable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsEditable(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsEditable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsEditable(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsEditable(void)::property;
}

uint64_t mlcore::LocalizedSectionHeader::LocalizedSectionHeader(uint64_t a1, int a2, int a3, long long **a4, void *a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  mlcore::LocalizedSectionHeader::_initializeLocalizedHeaderTitles(a1, a5);
  return a1;
}

void sub_214E0EE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *mediaplatform::StringToUCharString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)pErrorCode = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    long long v4 = (const char *)a1;
  }
  else {
    long long v4 = *(const char **)a1;
  }
  if (v3 >= 0) {
    int32_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    int32_t v5 = *(_DWORD *)(a1 + 8);
  }
  u_strFromUTF8(dest, 256, (int32_t *)&pErrorCode[1], v4, v5, pErrorCode);
  if (pErrorCode[0] != U_STRING_NOT_TERMINATED_WARNING)
  {
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR) {
      operator new[]();
    }
    if (pErrorCode[0])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      int v11 = 37;
      std::to_string(&v9, pErrorCode[0]);
      long long v8 = std::string::insert(&v9, 0, "u_strFromUTF8: ");
      std::string v10 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v11, (long long *)&v10);
    }
  }
  return std::wstring::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
}

void sub_214E0F0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x2166B26D0](v21, 0x1000C80BDFB0063);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *std::wstring::basic_string[abi:ne180100](void *__dst, void *__src, unint64_t a3)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 0xB)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v7 = a3 | 3;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    uint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 5)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a3 | 1) != 5) {
      uint64_t v7 = a3 | 1;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    uint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 4 * a3);
LABEL_9:
  *((_DWORD *)v6 + a3) = 0;
  return __dst;
}

void mediaplatform::UTF8ToUTF16String()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_214E0F300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x2166B26F0);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]()
{
}

void sub_214E0F468(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(std::wstring *this, uint64_t a2, char *a3, char *a4)
{
  int32_t v5 = this;
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 184) = 0;
  if (!*(void *)(a2 + 48)) {
    goto LABEL_32;
  }
  uint64_t v7 = a3;
  unint64_t v8 = 2 * (a4 - a3);
  if (v8 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 5)
  {
    uint64_t v9 = v8 + 2;
    if ((v8 | 1) != 5) {
      uint64_t v9 = v8 | 1;
    }
    this = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v9 + 1);
    v5->__r_.__value_.__l.__size_ = v8;
    v5->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)this;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v8;
    if (a4 == a3) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = 0;
  do
    this->__r_.__value_.__s.__data_[v11++] = 0;
  while (v8 != v11);
LABEL_11:
  this->__r_.__value_.__s.__data_[v8] = 0;
  if (v7 != a4)
  {
    if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::wstring::size_type v12 = 4;
    }
    else {
      std::wstring::size_type v12 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::wstring::resize(v5, v12, 0);
    long long v13 = *(_OWORD *)(a2 + 136);
    v54[4] = *(_OWORD *)(a2 + 120);
    v54[5] = v13;
    long long v14 = *(_OWORD *)(a2 + 168);
    v54[6] = *(_OWORD *)(a2 + 152);
    v54[7] = v14;
    long long v15 = *(_OWORD *)(a2 + 72);
    v54[0] = *(_OWORD *)(a2 + 56);
    v54[1] = v15;
    __n128 v16 = *(__n128 *)(a2 + 88);
    long long v17 = *(_OWORD *)(a2 + 104);
    std::wstring::size_type size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::wstring::size_type size = v5->__r_.__value_.__l.__size_;
    }
    uint64_t v20 = (char *)v19 + 4 * size;
    v54[2] = *(_OWORD *)(a2 + 88);
    v54[3] = v17;
    while (1)
    {
      int v21 = (*(uint64_t (**)(void, _OWORD *, char *, char *, char **, std::wstring *, char *, uint64_t *, __n128))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v54, v7, a4, &v50, v19, v20, &v49, v16);
      BOOL v22 = v50 == v7;
      *(void *)(a2 + 184) += v50 - v7;
      if (v22) {
        goto LABEL_45;
      }
      if (v21 != 1) {
        break;
      }
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v23 = v5;
      }
      else {
        int v23 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      }
      uint64_t v24 = v49 - (void)v23;
      std::wstring::resize(v5, (v49 - (uint64_t)v23) >> 1, 0);
      std::wstring::size_type v25 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
      char v26 = v25;
      long long v27 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      if ((v25 & 0x80u) == 0) {
        long long v27 = v5;
      }
      uint64_t v19 = (std::wstring *)((char *)v27 + v24);
      if ((v25 & 0x80u) != 0) {
        std::wstring::size_type v25 = v5->__r_.__value_.__l.__size_;
      }
      uint64_t v20 = (char *)v27 + 4 * v25;
      uint64_t v7 = v50;
      if (v50 >= a4)
      {
        if ((v26 & 0x80) == 0) {
          goto LABEL_32;
        }
LABEL_46:
        operator delete(v5->__r_.__value_.__l.__data_);
LABEL_32:
        uint64_t v28 = (const std::wstring::value_type **)(a2 + 24);
        if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        {
          if (*(unsigned char *)(a2 + 47))
          {
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v28;
            v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
            return;
          }
LABEL_83:
          std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
        }
        std::wstring::size_type v35 = *(void *)(a2 + 32);
        if (!v35) {
          goto LABEL_83;
        }
        std::wstring::__init_copy_ctor_external(v5, *v28, v35);
        return;
      }
    }
    if (v21)
    {
      if (v21 != 3)
      {
LABEL_45:
        if ((*((unsigned char *)&v5->__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_46;
        }
        goto LABEL_32;
      }
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = v5;
      }
      else {
        uint64_t v29 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      }
      std::wstring::resize(v5, ((char *)v19 - (char *)v29) >> 2, 0);
      LODWORD(v30) = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
      if ((v30 & 0x80000000) != 0)
      {
        uint64_t v32 = a4 - v7;
        if (a4 == v7) {
          return;
        }
        std::wstring::size_type v31 = v5->__r_.__value_.__l.__size_;
        unint64_t v37 = v5->__r_.__value_.__r.__words[2];
        std::wstring::size_type v33 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        long long v34 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
        unint64_t v30 = HIBYTE(v37);
      }
      else
      {
        if (v7 == a4) {
          return;
        }
        std::wstring::size_type v31 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        uint64_t v32 = a4 - v7;
        std::wstring::size_type v33 = 4;
        long long v34 = v5;
      }
      unint64_t v38 = v32 >> 2;
      if (v34 > (std::wstring *)v7 || (char *)v34->__r_.__value_.__r.__words + 4 * v31 + 4 <= v7)
      {
        if (v33 - v31 < v38)
        {
          std::wstring::__grow_by(v5, v33, v31 - v33 + v38, v31, v31, 0, 0);
          v5->__r_.__value_.__l.__size_ = v31;
          LOBYTE(v30) = *((unsigned char *)&v5->__r_.__value_.__s + 23);
        }
        int v40 = v5;
        if ((v30 & 0x80) != 0) {
          int v40 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
        }
        long long v41 = (std::wstring *)((char *)v40 + 4 * v31);
        while (v7 != a4)
        {
          std::wstring::value_type v42 = *(_DWORD *)v7;
          v7 += 4;
          v41->__r_.__value_.__s.__data_[0] = v42;
          long long v41 = (std::wstring *)((char *)v41 + 4);
        }
        v41->__r_.__value_.__s.__data_[0] = 0;
        std::wstring::size_type v43 = v38 + v31;
        if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
          v5->__r_.__value_.__l.__size_ = v43;
        }
        else {
          *((unsigned char *)&v5->__r_.__value_.__s + 23) = v43 & 0x7F;
        }
      }
      else
      {
        if (v32 < 0) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if ((unint64_t)v32 > 0x13)
        {
          uint64_t v44 = (v38 & 0xFFFFFFFFFFFFFFFELL) + 2;
          if ((v38 | 1) != 5) {
            uint64_t v44 = v38 | 1;
          }
          p_p = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v44 + 1);
          std::wstring::size_type v52 = v38;
          int64_t v53 = v45 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v53) = (unint64_t)v32 >> 2;
          p_p = &__p;
        }
        while (v7 != a4)
        {
          std::wstring::value_type v46 = *(_DWORD *)v7;
          v7 += 4;
          *p_p++ = v46;
        }
        _DWORD *p_p = 0;
        if (v53 >= 0) {
          uint64_t v47 = (const std::wstring::value_type *)&__p;
        }
        else {
          uint64_t v47 = (const std::wstring::value_type *)__p;
        }
        if (v53 >= 0) {
          std::wstring::size_type v48 = HIBYTE(v53);
        }
        else {
          std::wstring::size_type v48 = v52;
        }
        std::wstring::append(v5, v47, v48);
        if (SHIBYTE(v53) < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v36 = v5;
      }
      else {
        unint64_t v36 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      }
      std::wstring::resize(v5, (v49 - (uint64_t)v36) >> 2, 0);
    }
  }
}

void sub_214E0F8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLibraryLyricsAvailable(void)::$_0 &&>>()
{
}

void sub_214E0FA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyLyrics(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyLyrics(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyLyrics(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLyrics(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLyrics(void)::property;
}

void mlcore::CreateComparisonPredicate(char *__s@<X2>, std::string::size_type a2@<X0>, int a3@<W1>, int a4@<W3>, std::string **a5@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v9 = (std::string *)operator new(0x58uLL);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5CAB08;
  uint64_t v10 = v9 + 1;
  LODWORD(v9[1].__r_.__value_.__r.__words[2]) = a4;
  HIDWORD(v9[1].__r_.__value_.__r.__words[2]) = a3;
  v9[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C78C8;
  v9[1].__r_.__value_.__l.__size_ = a2;
  uint64_t v11 = v9 + 2;
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v12 = SHIBYTE(v14);
    v9[3].__r_.__value_.__r.__words[0] = 0;
    v9[3].__r_.__value_.__l.__size_ = 0;
    *a5 = v10;
    a5[1] = v9;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v9[2].__r_.__value_.__r.__words[2] = v14;
    v9[3].__r_.__value_.__r.__words[0] = 0;
    v9[3].__r_.__value_.__l.__size_ = 0;
    *a5 = v10;
    a5[1] = v9;
  }
}

void sub_214E0FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasNonPurgeableAsset(void)::$_0 &&>>()
{
}

void sub_214E0FD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasLoFiStreamingAsset(void)::$_0 &&>>()
{
}

void sub_214E0FEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasStreamingAsset(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214E101E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyBaseLocationID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyBaseLocationID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyBaseLocationID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBaseLocationID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBaseLocationID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BaseLocationPropertyFilePath(void)::$_0 &&>>()
{
}

void sub_214E10490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::BaseLocationTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::BaseLocationTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E10594(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudKVSKey(void)::$_0 &&>>()
{
}

void sub_214E1076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<1ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 248), *(void *)(a2 + 256));
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 248);
    *(void *)(a1 + 24) = *(void *)(a2 + 264);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 272);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 276);
  long long v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 280), *(void *)(a2 + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 280);
    *(void *)(a1 + 56) = *(void *)(a2 + 296);
  }
  *(void *)a1 = &unk_26C5C4788;
}

void sub_214E108E8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mlcore::BaseLocationTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore17BaseLocationTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::BaseLocationTable **a1)
{
  char v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA9B8;
  double result = mlcore::BaseLocationTable::BaseLocationTable((mlcore::BaseLocationTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::BaseLocationTable *)v2;
  return result;
}

void sub_214E1095C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__sharedPointer;
}

void mediaplatform::FilePath::operator+(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v6, 0, sizeof(v6));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v6, (std::string *)v6.__r_.__value_.__l.__size_, (long long *)v5.__r_.__value_.__l.__data_, (long long *)v5.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5.__r_.__value_.__l.__size_ - v5.__r_.__value_.__r.__words[0]) >> 3));
  uint64_t v7 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  *(void *)a3 = &unk_26C5BF338;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 8), (long long *)v6.__r_.__value_.__l.__data_, (long long *)v6.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6.__r_.__value_.__l.__size_ - v6.__r_.__value_.__r.__words[0]) >> 3));
  v5.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_214E10AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, long long *a3, long long *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    std::string v6 = a3;
    uint64_t v7 = a2;
    value = a1->__end_cap_.__value_;
    uint64_t p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    uint64_t v10 = value;
    int v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v21 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        BOOL v22 = (long long *)((char *)a3 + 24 * a5);
      }
      else
      {
        BOOL v22 = (long long *)((char *)a3 + 8 * (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v22, a4, *((std::string **)p_end_cap - 1));
        if (v21 < 1) {
          return;
        }
      }
      std::vector<std::string>::__move_range(a1, v7, v12, &v7[a5]);
      for (; v6 != v22; ++v7)
      {
        std::string::operator=(v7, (const std::string *)v6);
        std::string v6 = (long long *)((char *)v6 + 24);
      }
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
      {
        uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v18);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      int v23 = v19 + v15;
      __v.__first_ = v19;
      __v.__begin_ = v23;
      __v.__end_ = v23;
      __v.__end_cap_.__value_ = &v19[v20];
      uint64_t v24 = 3 * a5;
      std::wstring::size_type v25 = &v23[a5];
      uint64_t v26 = 8 * v24;
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v27 = *v6;
          v23->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v27;
        }
        ++v23;
        std::string v6 = (long long *)((char *)v6 + 24);
        v26 -= 24;
      }
      while (v26);
      __v.__end_ = v25;
      std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v7);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_214E10CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComparisonPredicate<std::string>::ComparisonPredicate(uint64_t a1, uint64_t a2, int a3, long long *a4, int a5)
{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_26C5C78C8;
  *(void *)(a1 + 8) = a2;
  std::string v6 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    v6->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsEditorial(void)::$_0 &&>>()
{
}

void sub_214E10EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsUserShared(void)::$_0 &&>>()
{
}

void sub_214E11080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsPersonalMix(void)::$_0 &&>>()
{
}

void sub_214E11218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCategoryType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCategoryType(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCategoryType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCategoryType(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCategoryType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyIsStoreRedownloadable(void)::$_0 &&>>()
{
}

void sub_214E11418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AlbumPropertyStoreDownloadableItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyStoreDownloadableItemCount(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyStoreDownloadableItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyStoreDownloadableItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyStoreDownloadableItemCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyIsPreOrder(void)::$_0 &&>>()
{
}

void sub_214E11618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AlbumPropertyPreOrderItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AlbumPropertyPreOrderItemCount(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AlbumPropertyPreOrderItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPreOrderItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyPreOrderItemCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEffectiveArtworkType(void)::$_0 &&>>()
{
}

void sub_214E119DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26)
{
  if (*(char *)(v28 - 65) < 0) {
    operator delete(*(void **)(v28 - 88));
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  MEMORY[0x2166B26F0](v26, 0x10B3C40F6CDA669);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(void *a1, _DWORD *a2)
{
  long long v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = &unk_26C5C9800;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)v4 + 3) = &unk_26C5C3910;
  *((_DWORD *)v4 + 8) = *a2;
  std::string v5 = (std::string *)(v4 + 40);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)v4 + 7) = v7;
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_214E11BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComplexProperty<int>::ComplexProperty(uint64_t a1, void *a2, void **a3)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26C5C5728;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>(a1 + 80, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_214E11CB4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)v1);
  _Unwind_Resume(a1);
}

void *mediaplatform::SQLCaseExpression::SQLCaseExpression(void *result, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  mlcore::BaseLocationTable *result = &unk_26C5BED50;
  result[1] = v5;
  result[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a3[1];
  result[3] = *a3;
  result[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[1];
  result[5] = *a4;
  result[6] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  result[7] = 0;
  result[8] = 0;
  if (!result[1])
  {
    unint64_t v8 = "_evaluationExpression";
    int v9 = 326;
    goto LABEL_12;
  }
  if (!result[3])
  {
    unint64_t v8 = "_thenResultExpression";
    int v9 = 327;
LABEL_12:
    __assert_rtn("SQLCaseExpression", "SQLExpression.cpp", v9, v8);
  }
  return result;
}

void sub_214E11DA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[4];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DeviceLibrary::setExpectedEntityQuerySize(mlcore::DeviceLibrary *this, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *((void *)this + 22);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*((void *)this + 21) + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              goto LABEL_74;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  long long v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v9;
  uint64_t v13[2] = a2;
  void v13[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)this + 24) + 1);
  float v16 = *((float *)this + 50);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *((void *)this + 22);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)this + 24) / *((float *)this + 50));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)this + 22);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          BOOL v22 = (void *)*((void *)this + 21);
          *((void *)this + 21) = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)this + 22) = prime;
          do
            *(void *)(*((void *)this + 21) + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)this + 23);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)this + 21) + 8 * v25) = (char *)this + 184;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  uint64_t v32 = *((void *)this + 21);
                  if (!*(void *)(v32 + 8 * v31))
                  {
                    *(void *)(v32 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  *unint64_t v30 = **(void **)(*((void *)this + 21) + 8 * v31);
                  **(void **)(*((void *)this + 21) + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v36 = (void *)*((void *)this + 21);
        *((void *)this + 21) = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v10 = 0;
        *((void *)this + 22) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v33 = *((void *)this + 21);
  long long v34 = *(void **)(v33 + 8 * v3);
  if (v34)
  {
    void *v13 = *v34;
LABEL_72:
    void *v34 = v13;
    goto LABEL_73;
  }
  void *v13 = *((void *)this + 23);
  *((void *)this + 23) = v13;
  *(void *)(v33 + 8 * v3) = (char *)this + 184;
  if (*v13)
  {
    unint64_t v35 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    long long v34 = (void *)(*((void *)this + 21) + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)this + 24);
LABEL_74:
  void v13[3] = a3;
}

void sub_214E121F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingAssetAvailable(void)::$_0 &&>>()
{
}

void sub_214E12358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudSyncSource(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214E12640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsStoreRedownloadable(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_214E12988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyRemoteLocationID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyRemoteLocationID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyRemoteLocationID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRemoteLocationID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRemoteLocationID(void)::property;
}

void mlcore::LibraryView::setFilterPredicateForEntityClass(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v8 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>((uint64_t *)(a1 + 8), a2, (uint64_t *)&v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[4];
  uint64_t v4[3] = v6;
  v4[4] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = a1 + 2;
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v15 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v15;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = a1[1];
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v14;
            unint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *unint64_t v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  unint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                unint64_t v25 = v31;
                unint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v37 = (void *)*a1;
        *a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v33 = *a1;
  long long v34 = *(void **)(*a1 + 8 * v3);
  if (v34)
  {
    *uint64_t i = *v34;
LABEL_72:
    void *v34 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v14;
  void *v14 = i;
  *(void *)(v33 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    long long v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_214E12F08(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountUser(void)::$_0 &&>>()
{
}

void sub_214E130E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDatePlayed(void)::$_0 &&>>()
{
}

void sub_214E13360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedState(void)::$_0 &&>>()
{
}

void sub_214E135D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountUser(void)::$_0 &&>>()
{
}

void sub_214E13850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
}

void sub_214E13AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E13BF0(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLyrics(void)::$_0 &&>>()
{
}

void sub_214E13DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreLyricsAvailable(void)::$_0 &&>>()
{
}

void sub_214E1401C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::$_0 &&>>()
{
}

void sub_214E14294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E143BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
}

void sub_214E145BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C5C7E30;
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 72) = &unk_26C5C3858;
  *(void *)(a1 + 108) = *(void *)(a3 + 36);
  *(void *)(a1 + 72) = &unk_26C5C47C8;
  return a1;
}

void sub_214E1475C(_Unwind_Exception *a1)
{
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStatsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  char v2 = operator new(0x868uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA5C8;
  uint64_t result = mlcore::ItemStatsTable::ItemStatsTable((mlcore::ItemStatsTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_214E147C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

mlcore::LyricsTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11LyricsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::LyricsTable **a1)
{
  char v2 = operator new(0x2C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA050;
  uint64_t result = mlcore::LyricsTable::LyricsTable((mlcore::LyricsTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::LyricsTable *)v2;
  return result;
}

void sub_214E14830(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemTable::keepLocalConstraintsColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3375) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 419), *((void *)this + 420));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3352);
    *(void *)(a2 + 24) = *((void *)this + 421);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 844);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3380);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStatsTable::likedStateChangedDateColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2111) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 261), *((void *)this + 262));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2088);
    *(void *)(a2 + 24) = *((void *)this + 263);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 528);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 531);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2116);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStatsTable::skipCountUserColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1679) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 207), *((void *)this + 208));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1656);
    *(void *)(a2 + 24) = *((void *)this + 209);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 420);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1684);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStatsTable::playCountUserColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1343) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 165), *((void *)this + 166));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1320);
    *(void *)(a2 + 24) = *((void *)this + 167);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 336);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1348);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStatsTable::likedStateColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1967) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 243), *((void *)this + 244));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1944);
    *(void *)(a2 + 24) = *((void *)this + 245);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 492);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1972);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStatsTable::datePlayedColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((void *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(void *)(a2 + 24) = *((void *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1492);
  *(void *)a2 = &unk_26C5C47E8;
}

uint64_t mlcore::ItemStatsTable::ItemStatsTable(mlcore::ItemStatsTable *this)
{
  uint64_t v1 = MEMORY[0x270FA5388](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_stats");
  std::string::basic_string[abi:ne180100]<0>(v131, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v133, (uint64_t)v131, 1);
  std::string::basic_string[abi:ne180100]<0>(v125, "user_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v127, (uint64_t)v125, 0);
  std::string::basic_string[abi:ne180100]<0>(v119, "needs_restore");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v121, (uint64_t)v119, 0);
  std::string::basic_string[abi:ne180100]<0>(v112, "download_identifier");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v114, (uint64_t)v112, 0);
  std::string::basic_string[abi:ne180100]<0>(v106, "play_count_user");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v108, (uint64_t)v106, 0);
  std::string::basic_string[abi:ne180100]<0>(v100, "play_count_recent");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v102, (uint64_t)v100, 0);
  std::string::basic_string[abi:ne180100]<0>(v94, "has_been_played");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v96, (uint64_t)v94, 0);
  std::string::basic_string[abi:ne180100]<0>(v87, "date_played");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v89, (uint64_t)v87);
  std::string::basic_string[abi:ne180100]<0>(v80, "date_skipped");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v82, (uint64_t)v80);
  std::string::basic_string[abi:ne180100]<0>(v73, "date_accessed");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v75, (uint64_t)v73);
  std::string::basic_string[abi:ne180100]<0>(v67, "is_alarm");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v69, (uint64_t)v67, 0);
  std::string::basic_string[abi:ne180100]<0>(v61, "skip_count_user");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v63, (uint64_t)v61, 0);
  std::string::basic_string[abi:ne180100]<0>(v55, "skip_count_recent");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v57, (uint64_t)v55, 0);
  std::string::basic_string[abi:ne180100]<0>(v49, "remember_bookmark");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v51, (uint64_t)v49, 0);
  std::string::basic_string[abi:ne180100]<0>(v42, "bookmark_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v44, (uint64_t)v42);
  std::string::basic_string[abi:ne180100]<0>(v36, "hidden");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v38, (uint64_t)v36, 0);
  std::string::basic_string[abi:ne180100]<0>(v30, "chosen_by_auto_fill");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v32, (uint64_t)v30, 0);
  std::string::basic_string[abi:ne180100]<0>(v24, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v26, (uint64_t)v24, 0);
  std::string::basic_string[abi:ne180100]<0>(v18, "liked_state_changed");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v20, (uint64_t)v18, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "user_rating_is_derived");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v14, (uint64_t)v12, 0);
  std::string::basic_string[abi:ne180100]<0>(v5, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v7, (uint64_t)v5);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = __s;
  }
  int v225 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v226, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v226 = v134;
  }
  int v227 = v135;
  int v225 = &unk_26C5C3878;
  uint64_t v228 = v136;
  int v229 = v137;
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v128;
  }
  int v223 = v129;
  int v221 = &unk_26C5C3858;
  uint64_t v224 = v130;
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v218, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v218 = v122;
  }
  int v219 = v123;
  int v217 = &unk_26C5C3858;
  uint64_t v220 = v124;
  uint64_t v212 = &unk_26C5C3AF0;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v213, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v213 = v115;
  }
  int v214 = v116;
  uint64_t v212 = &unk_26C5C3818;
  char v215 = v117;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v216, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else {
    std::string v216 = v118;
  }
  uint64_t v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v209, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v209 = v109;
  }
  int v210 = v110;
  uint64_t v208 = &unk_26C5C3858;
  uint64_t v211 = v111;
  uint64_t v204 = &unk_26C5C3AF0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v205, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  }
  else {
    std::string v205 = v103;
  }
  int v206 = v104;
  uint64_t v204 = &unk_26C5C3858;
  uint64_t v207 = v105;
  int v200 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v201, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v201 = v97;
  }
  int v202 = v98;
  int v200 = &unk_26C5C3858;
  uint64_t v203 = v99;
  int v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v196, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v196 = v90;
  }
  int v197 = v91;
  int v195 = &unk_26C5C3878;
  uint64_t v198 = v92;
  int v199 = v93;
  std::string v190 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v191, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v191 = v83;
  }
  int v192 = v84;
  std::string v190 = &unk_26C5C3878;
  uint64_t v193 = v85;
  int v194 = v86;
  char v185 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v76;
  }
  int v187 = v77;
  char v185 = &unk_26C5C3878;
  uint64_t v188 = v78;
  int v189 = v79;
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v182, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v182 = v70;
  }
  int v183 = v71;
  unint64_t v181 = &unk_26C5C3858;
  uint64_t v184 = v72;
  unint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v178, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else {
    std::string v178 = v64;
  }
  int v179 = v65;
  unint64_t v177 = &unk_26C5C3858;
  uint64_t v180 = v66;
  long long v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v58;
  }
  int v175 = v59;
  long long v173 = &unk_26C5C3858;
  uint64_t v176 = v60;
  char v169 = &unk_26C5C3AF0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v170, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else {
    std::string v170 = v52;
  }
  int v171 = v53;
  char v169 = &unk_26C5C3858;
  uint64_t v172 = v54;
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v45;
  }
  int v166 = v46;
  uint64_t v164 = &unk_26C5C3838;
  uint64_t v167 = v47;
  int v168 = v48;
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v39;
  }
  int v162 = v40;
  uint64_t v160 = &unk_26C5C3858;
  uint64_t v163 = v41;
  int v156 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v33;
  }
  int v158 = v34;
  int v156 = &unk_26C5C3858;
  uint64_t v159 = v35;
  long long v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v153, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v153 = v27;
  }
  int v154 = v28;
  long long v152 = &unk_26C5C3858;
  uint64_t v155 = v29;
  std::string v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v21;
  }
  int v150 = v22;
  std::string v148 = &unk_26C5C3858;
  uint64_t v151 = v23;
  long long v144 = &unk_26C5C3AF0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v145, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v145 = v15;
  }
  int v146 = v16;
  long long v144 = &unk_26C5C3858;
  uint64_t v147 = v17;
  uint64_t v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v140, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string v140 = v8;
  }
  int v141 = v9;
  uint64_t v139 = &unk_26C5C3878;
  uint64_t v142 = v10;
  int v143 = v11;
  *(void *)uint64_t v1 = &unk_26C5BED18;
  char v2 = (std::string *)(v1 + 8);
  int v4 = SHIBYTE(v230.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
    *(void *)(v1 + 24) = *((void *)&v230.__r_.__value_.__l + 2);
  }
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)uint64_t v1 = &unk_26C5C3520;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  std::string v317 = &unk_26C5C3AF0;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v318, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  }
  else {
    std::string v318 = v226;
  }
  int v319 = v227;
  std::string v317 = &unk_26C5C3878;
  uint64_t v320 = v228;
  int v321 = v229;
  std::string v313 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v314, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else {
    std::string v314 = v222;
  }
  int v315 = v223;
  std::string v313 = &unk_26C5C3858;
  uint64_t v316 = v224;
  std::string v309 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v310, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  }
  else {
    std::string v310 = v218;
  }
  int v311 = v219;
  std::string v309 = &unk_26C5C3858;
  uint64_t v312 = v220;
  std::string v304 = &unk_26C5C3AF0;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v305, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  }
  else {
    std::string v305 = v213;
  }
  int v306 = v214;
  std::string v304 = &unk_26C5C3818;
  char v307 = v215;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v308, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  }
  else {
    std::string v308 = v216;
  }
  int v300 = &unk_26C5C3AF0;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v301, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  }
  else {
    std::string v301 = v209;
  }
  int v302 = v210;
  int v300 = &unk_26C5C3858;
  uint64_t v303 = v211;
  int v296 = &unk_26C5C3AF0;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v297, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  }
  else {
    std::string v297 = v205;
  }
  int v298 = v206;
  int v296 = &unk_26C5C3858;
  uint64_t v299 = v207;
  char v292 = &unk_26C5C3AF0;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v293, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  }
  else {
    std::string v293 = v201;
  }
  int v294 = v202;
  char v292 = &unk_26C5C3858;
  uint64_t v295 = v203;
  std::string v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v288, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else {
    std::string v288 = v196;
  }
  int v289 = v197;
  std::string v287 = &unk_26C5C3878;
  uint64_t v290 = v198;
  int v291 = v199;
  std::string v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v283, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else {
    std::string v283 = v191;
  }
  int v284 = v192;
  std::string v282 = &unk_26C5C3878;
  uint64_t v285 = v193;
  int v286 = v194;
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v278, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  else {
    std::string v278 = v186;
  }
  int v279 = v187;
  int v277 = &unk_26C5C3878;
  uint64_t v280 = v188;
  int v281 = v189;
  char v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v182;
  }
  int v275 = v183;
  char v273 = &unk_26C5C3858;
  uint64_t v276 = v184;
  int v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v270, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v270 = v178;
  }
  int v271 = v179;
  int v269 = &unk_26C5C3858;
  uint64_t v272 = v180;
  std::string v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v266, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
    std::string v266 = v174;
  }
  int v267 = v175;
  std::string v265 = &unk_26C5C3858;
  uint64_t v268 = v176;
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v170;
  }
  int v263 = v171;
  std::string v261 = &unk_26C5C3858;
  uint64_t v264 = v172;
  uint64_t v256 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v257, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    std::string v257 = v165;
  }
  int v258 = v166;
  uint64_t v256 = &unk_26C5C3838;
  uint64_t v259 = v167;
  int v260 = v168;
  int v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v253, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v253 = v161;
  }
  int v254 = v162;
  int v252 = &unk_26C5C3858;
  uint64_t v255 = v163;
  uint64_t v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v249, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v249 = v157;
  }
  int v250 = v158;
  uint64_t v248 = &unk_26C5C3858;
  uint64_t v251 = v159;
  uint64_t v244 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v245, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else {
    std::string v245 = v153;
  }
  int v246 = v154;
  uint64_t v244 = &unk_26C5C3858;
  uint64_t v247 = v155;
  uint64_t v240 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v241, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v241 = v149;
  }
  int v242 = v150;
  uint64_t v240 = &unk_26C5C3858;
  uint64_t v243 = v151;
  uint64_t v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v237, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  }
  else {
    std::string v237 = v145;
  }
  int v238 = v146;
  uint64_t v236 = &unk_26C5C3858;
  uint64_t v239 = v147;
  size_t v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v140;
  }
  int v233 = v141;
  size_t v231 = &unk_26C5C3878;
  uint64_t v234 = v142;
  int v235 = v143;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(v1 + 80, (uint64_t)&v317, (uint64_t)&v313, (uint64_t)&v309, (uint64_t)&v304, (uint64_t)&v300, (uint64_t)&v296, (uint64_t)&v292, (uint64_t)&v287, (uint64_t)&v282, (uint64_t)&v277, (uint64_t)&v273, (uint64_t)&v269, (uint64_t)&v265, (uint64_t)&v261, (uint64_t)&v256, (uint64_t)&v252, (uint64_t)&v248, (uint64_t)&v244,
    (uint64_t)&v240,
    (uint64_t)&v236,
    (uint64_t)&v231);
  size_t v231 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  uint64_t v240 = &unk_26C5C3AF0;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  uint64_t v244 = &unk_26C5C3AF0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  uint64_t v248 = &unk_26C5C3AF0;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  int v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  uint64_t v256 = &unk_26C5C3AF0;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  std::string v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v266.__r_.__value_.__l.__data_);
  }
  int v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  char v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  std::string v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v283.__r_.__value_.__l.__data_);
  }
  std::string v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v288.__r_.__value_.__l.__data_);
  }
  char v292 = &unk_26C5C3AF0;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v293.__r_.__value_.__l.__data_);
  }
  int v296 = &unk_26C5C3AF0;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v297.__r_.__value_.__l.__data_);
  }
  int v300 = &unk_26C5C3AF0;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v304);
  std::string v309 = &unk_26C5C3AF0;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  std::string v313 = &unk_26C5C3AF0;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v314.__r_.__value_.__l.__data_);
  }
  std::string v317 = &unk_26C5C3AF0;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v318.__r_.__value_.__l.__data_);
  }
  uint64_t v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  long long v144 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  std::string v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  long long v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  int v156 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  char v169 = &unk_26C5C3AF0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v170.__r_.__value_.__l.__data_);
  }
  long long v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  unint64_t v177 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  char v185 = &unk_26C5C3AF0;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  std::string v190 = &unk_26C5C3AF0;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  int v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  int v200 = &unk_26C5C3AF0;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  uint64_t v204 = &unk_26C5C3AF0;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }
  uint64_t v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v212);
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  int v225 = &unk_26C5C3AF0;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v226.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v1 = &unk_26C5C4050;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 1104, (uint64_t)&v133);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1152, (uint64_t)&v127);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1200, (uint64_t)&v121);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 1248, (uint64_t)v114);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1312, (uint64_t)&v108);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1360, (uint64_t)&v102);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1408, (uint64_t)&v96);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 1456, (uint64_t)&v89);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 1504, (uint64_t)&v82);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 1552, (uint64_t)&v75);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1600, (uint64_t)&v69);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1648, (uint64_t)&v63);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1696, (uint64_t)&v57);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1744, (uint64_t)&v51);
  *(void *)(v1 + 1792) = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1800), v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v1 + 1800) = v45;
  }
  *(_DWORD *)(v1 + 1824) = v46;
  *(void *)(v1 + 1828) = v47;
  *(_DWORD *)(v1 + 1836) = v48;
  *(void *)(v1 + 1792) = &unk_26C5C47A8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1840, (uint64_t)&v38);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1888, (uint64_t)&v32);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1936, (uint64_t)&v26);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 1984, (uint64_t)&v20);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v1 + 2032, (uint64_t)&v14);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v1 + 2080, (uint64_t)&v7);
  unint64_t v7 = &unk_26C5C3AF0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  unint64_t v14 = &unk_26C5C3AF0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  unint64_t v20 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  unint64_t v26 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  unint64_t v32 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  unint64_t v38 = &unk_26C5C3AF0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  uint64_t v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  uint64_t v51 = &unk_26C5C3AF0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  std::string v57 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  uint64_t v63 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  std::string v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  long long v82 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  int v89 = &unk_26C5C3AF0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  int v96 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  uint64_t v102 = &unk_26C5C3AF0;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (v107 < 0) {
    operator delete(v106[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v114);
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  std::string v121 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (v120 < 0) {
    operator delete(v119[0]);
  }
  uint64_t v127 = &unk_26C5C3AF0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  uint64_t v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (v132 < 0) {
    operator delete(v131[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v1 = &unk_26C5C5250;
  return v1;
}

void sub_214E17298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_Unwind_Exception *exception_objecta,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v73 + 1744) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1775) < 0) {
    operator delete(*(void **)(v73 + 1752));
  }
  *(void *)(v73 + 1696) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1727) < 0) {
    operator delete(*(void **)(v73 + 1704));
  }
  *(void *)(v73 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1679) < 0) {
    operator delete(*(void **)(v73 + 1656));
  }
  *(void *)(v73 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1631) < 0) {
    operator delete(*(void **)(v73 + 1608));
  }
  *(void *)(v73 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1583) < 0) {
    operator delete(*(void **)(v73 + 1560));
  }
  *(void *)(v73 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1535) < 0) {
    operator delete(*(void **)(v73 + 1512));
  }
  *(void *)(v73 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1487) < 0) {
    operator delete(*(void **)(v73 + 1464));
  }
  *(void *)(v73 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1439) < 0) {
    operator delete(*(void **)(v73 + 1416));
  }
  *(void *)(v73 + 1360) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1391) < 0) {
    operator delete(*(void **)(v73 + 1368));
  }
  *(void *)(v73 + 1312) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1343) < 0) {
    operator delete(*(void **)(v73 + 1320));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a63);
  *(void *)(v73 + 1200) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1231) < 0) {
    operator delete(*(void **)(v73 + 1208));
  }
  *(void *)(v73 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1183) < 0) {
    operator delete(*(void **)(v73 + 1160));
  }
  *(void *)(v73 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(v73 + 1135) < 0) {
    operator delete(*(void **)(v73 + 1112));
  }
  mediaplatform::DatabaseTable<long long,int,int,std::string,int,int,int,long long,long long,long long,int,int,int,int,double,int,int,int,int,int,long long>::~DatabaseTable(v73);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  STACK[0x230] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  STACK[0x278] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  STACK[0x2C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  STACK[0x308] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  STACK[0x350] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  STACK[0x398] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  STACK[0x3E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  STACK[0x428] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  STACK[0x470] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  STACK[0x4B8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  STACK[0x500] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  STACK[0x548] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x547]) < 0) {
    operator delete((void *)STACK[0x530]);
  }
  STACK[0x590] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  STACK[0x5D8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  STACK[0x620] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x63F]) < 0) {
    operator delete((void *)STACK[0x628]);
  }
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  STACK[0x668] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x687]) < 0) {
    operator delete((void *)STACK[0x670]);
  }
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  STACK[0x708] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x727]) < 0) {
    operator delete((void *)STACK[0x710]);
  }
  if (SLOBYTE(STACK[0x707]) < 0) {
    operator delete((void *)STACK[0x6F0]);
  }
  STACK[0x750] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x76F]) < 0) {
    operator delete((void *)STACK[0x758]);
  }
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  STACK[0x798] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  if (SLOBYTE(STACK[0x7DF]) < 0) {
    operator delete((void *)STACK[0x7C8]);
  }
  _Unwind_Resume(a1);
}

void sub_214E18154()
{
}

void sub_214E1815C()
{
}

void sub_214E18164()
{
}

void sub_214E1816C()
{
}

void sub_214E18174()
{
}

void sub_214E1817C()
{
}

void sub_214E18184()
{
}

void sub_214E1818C()
{
}

void sub_214E18194()
{
}

void sub_214E1819C()
{
}

void sub_214E181A4()
{
}

void sub_214E181AC()
{
}

void sub_214E181B4()
{
}

void sub_214E181BC()
{
}

void sub_214E181C4()
{
}

void sub_214E181CC()
{
}

void sub_214E181D4()
{
}

void sub_214E181DC()
{
}

void sub_214E181E4()
{
}

void sub_214E181EC()
{
}

void sub_214E181F4()
{
}

void sub_214E181FC()
{
}

void sub_214E18204()
{
}

void sub_214E1820C()
{
}

void sub_214E18214()
{
}

void sub_214E1821C()
{
}

void sub_214E18224()
{
}

void sub_214E1822C()
{
}

void sub_214E18234()
{
}

void sub_214E1823C()
{
}

void sub_214E18244()
{
}

void sub_214E1824C()
{
}

void sub_214E18254()
{
}

void sub_214E1825C()
{
}

void sub_214E18264()
{
}

void sub_214E1826C()
{
}

void sub_214E18274()
{
}

void sub_214E1827C()
{
}

void sub_214E18284()
{
}

void sub_214E1828C()
{
}

void sub_214E18294()
{
}

void sub_214E1829C()
{
}

void mlcore::LyricsTable::timeSyncedLyricsAvailableColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 81), *((void *)this + 82));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(void *)(a2 + 24) = *((void *)this + 83);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 168);
  *(void *)(a2 + 36) = *(void *)((char *)this + 676);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::LyricsTable::storeLyricsAvailableColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 623) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 75), *((void *)this + 76));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 600);
    *(void *)(a2 + 24) = *((void *)this + 77);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 156);
  *(void *)(a2 + 36) = *(void *)((char *)this + 628);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::LyricsTable::lyricsColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 67), *((void *)this + 68));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 536);
    *(void *)(a2 + 24) = *((void *)this + 69);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 140);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 564);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 71), *((void *)this + 72));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(void *)(a2 + 56) = *((void *)this + 73);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E184DC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22 = MEMORY[0x270FA5388](a1);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = v23;
  uint64_t v36 = v35;
  uint64_t v37 = v22;
  char v126 = &unk_26C5C3AF0;
  if (*(char *)(v23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
  }
  else {
    std::string v127 = *(std::string *)(v23 + 8);
  }
  int v128 = *(_DWORD *)(v34 + 32);
  char v126 = &unk_26C5C3858;
  uint64_t v129 = *(void *)(v34 + 36);
  std::string v122 = &unk_26C5C3AF0;
  if (*(char *)(v33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v33 + 8), *(void *)(v33 + 16));
  }
  else {
    std::string __s = *(std::string *)(v33 + 8);
  }
  int v124 = *(_DWORD *)(v33 + 32);
  std::string v122 = &unk_26C5C3858;
  uint64_t v125 = *(void *)(v33 + 36);
  char v117 = &unk_26C5C3AF0;
  if (*(char *)(v31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v31 + 8), *(void *)(v31 + 16));
  }
  else {
    std::string v118 = *(std::string *)(v31 + 8);
  }
  int v119 = *(_DWORD *)(v31 + 32);
  char v117 = &unk_26C5C3818;
  char v120 = *(unsigned char *)(v31 + 36);
  if (*(char *)(v31 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(v31 + 40), *(void *)(v31 + 48));
  }
  else {
    std::string v121 = *(std::string *)(v31 + 40);
  }
  char v113 = &unk_26C5C3AF0;
  if (*(char *)(v29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v29 + 8), *(void *)(v29 + 16));
  }
  else {
    std::string v114 = *(std::string *)(v29 + 8);
  }
  int v115 = *(_DWORD *)(v29 + 32);
  char v113 = &unk_26C5C3858;
  uint64_t v116 = *(void *)(v29 + 36);
  std::string v109 = &unk_26C5C3AF0;
  if (*(char *)(v27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
  }
  else {
    std::string v110 = *(std::string *)(v27 + 8);
  }
  int v111 = *(_DWORD *)(v27 + 32);
  std::string v109 = &unk_26C5C3858;
  uint64_t v112 = *(void *)(v27 + 36);
  uint64_t v105 = &unk_26C5C3AF0;
  if (*(char *)(v25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(v25 + 8), *(void *)(v25 + 16));
  }
  else {
    std::string v106 = *(std::string *)(v25 + 8);
  }
  int v107 = *(_DWORD *)(v25 + 32);
  uint64_t v105 = &unk_26C5C3858;
  uint64_t v108 = *(void *)(v25 + 36);
  int v100 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v101 = *(std::string *)(a9 + 8);
  }
  int v102 = *(_DWORD *)(a9 + 32);
  int v100 = &unk_26C5C3878;
  uint64_t v103 = *(void *)(a9 + 36);
  int v104 = *(_DWORD *)(a9 + 44);
  char v95 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v96 = *(std::string *)(a10 + 8);
  }
  int v97 = *(_DWORD *)(a10 + 32);
  char v95 = &unk_26C5C3878;
  uint64_t v98 = *(void *)(a10 + 36);
  int v99 = *(_DWORD *)(a10 + 44);
  std::string v90 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v91 = *(std::string *)(a11 + 8);
  }
  int v92 = *(_DWORD *)(a11 + 32);
  std::string v90 = &unk_26C5C3878;
  uint64_t v93 = *(void *)(a11 + 36);
  int v94 = *(_DWORD *)(a11 + 44);
  int v86 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v87 = *(std::string *)(a12 + 8);
  }
  int v88 = *(_DWORD *)(a12 + 32);
  int v86 = &unk_26C5C3858;
  uint64_t v89 = *(void *)(a12 + 36);
  long long v82 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v83 = *(std::string *)(a13 + 8);
  }
  int v84 = *(_DWORD *)(a13 + 32);
  long long v82 = &unk_26C5C3858;
  uint64_t v85 = *(void *)(a13 + 36);
  uint64_t v78 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v79 = *(std::string *)(a14 + 8);
  }
  int v80 = *(_DWORD *)(a14 + 32);
  uint64_t v78 = &unk_26C5C3858;
  uint64_t v81 = *(void *)(a14 + 36);
  char v74 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v75 = *(std::string *)(a15 + 8);
  }
  int v76 = *(_DWORD *)(a15 + 32);
  char v74 = &unk_26C5C3858;
  uint64_t v77 = *(void *)(a15 + 36);
  uint64_t v69 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v70 = *(std::string *)(a16 + 8);
  }
  int v71 = *(_DWORD *)(a16 + 32);
  uint64_t v69 = &unk_26C5C3838;
  uint64_t v72 = *(void *)(a16 + 36);
  int v73 = *(_DWORD *)(a16 + 44);
  int v65 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v66 = *(std::string *)(a17 + 8);
  }
  int v67 = *(_DWORD *)(a17 + 32);
  int v65 = &unk_26C5C3858;
  uint64_t v68 = *(void *)(a17 + 36);
  std::string v61 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v62 = *(std::string *)(a18 + 8);
  }
  int v63 = *(_DWORD *)(a18 + 32);
  std::string v61 = &unk_26C5C3858;
  uint64_t v64 = *(void *)(a18 + 36);
  std::string v57 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v58 = *(std::string *)(a19 + 8);
  }
  int v59 = *(_DWORD *)(a19 + 32);
  std::string v57 = &unk_26C5C3858;
  uint64_t v60 = *(void *)(a19 + 36);
  int v53 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v54 = *(std::string *)(a20 + 8);
  }
  int v55 = *(_DWORD *)(a20 + 32);
  int v53 = &unk_26C5C3858;
  uint64_t v56 = *(void *)(a20 + 36);
  uint64_t v49 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v50 = *(std::string *)(a21 + 8);
  }
  int v51 = *(_DWORD *)(a21 + 32);
  uint64_t v49 = &unk_26C5C3858;
  uint64_t v52 = *(void *)(a21 + 36);
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v45 = *(std::string *)(a22 + 8);
  }
  int v46 = *(_DWORD *)(a22 + 32);
  uint64_t v47 = *(void *)(a22 + 36);
  int v48 = *(_DWORD *)(a22 + 44);
  uint64_t v208 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v209, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v209 = __s;
  }
  int v210 = v124;
  uint64_t v208 = &unk_26C5C3858;
  uint64_t v211 = v125;
  uint64_t v203 = &unk_26C5C3AF0;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v204, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else {
    std::string v204 = v118;
  }
  int v205 = v119;
  uint64_t v203 = &unk_26C5C3818;
  char v206 = v120;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v207, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else {
    std::string v207 = v121;
  }
  int v199 = &unk_26C5C3AF0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v200, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  }
  else {
    std::string v200 = v114;
  }
  int v201 = v115;
  int v199 = &unk_26C5C3858;
  uint64_t v202 = v116;
  int v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v196, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  }
  else {
    std::string v196 = v110;
  }
  int v197 = v111;
  int v195 = &unk_26C5C3858;
  uint64_t v198 = v112;
  std::string v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v192, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v192 = v106;
  }
  int v193 = v107;
  std::string v191 = &unk_26C5C3858;
  uint64_t v194 = v108;
  std::string v186 = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v187, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else {
    std::string v187 = v101;
  }
  int v188 = v102;
  std::string v186 = &unk_26C5C3878;
  uint64_t v189 = v103;
  int v190 = v104;
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v182, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v182 = v96;
  }
  int v183 = v97;
  unint64_t v181 = &unk_26C5C3878;
  uint64_t v184 = v98;
  int v185 = v99;
  uint64_t v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v177, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v177 = v91;
  }
  int v178 = v92;
  uint64_t v176 = &unk_26C5C3878;
  uint64_t v179 = v93;
  int v180 = v94;
  uint64_t v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v173, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  }
  else {
    std::string v173 = v87;
  }
  int v174 = v88;
  uint64_t v172 = &unk_26C5C3858;
  uint64_t v175 = v89;
  int v168 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v169, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v169 = v83;
  }
  int v170 = v84;
  int v168 = &unk_26C5C3858;
  uint64_t v171 = v85;
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v79;
  }
  int v166 = v80;
  uint64_t v164 = &unk_26C5C3858;
  uint64_t v167 = v81;
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v75;
  }
  int v162 = v76;
  uint64_t v160 = &unk_26C5C3858;
  uint64_t v163 = v77;
  uint64_t v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v156, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v156 = v70;
  }
  int v157 = v71;
  uint64_t v155 = &unk_26C5C3838;
  uint64_t v158 = v72;
  int v159 = v73;
  uint64_t v151 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v152, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v152 = v66;
  }
  int v153 = v67;
  uint64_t v151 = &unk_26C5C3858;
  uint64_t v154 = v68;
  uint64_t v147 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v148, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v148 = v62;
  }
  int v149 = v63;
  uint64_t v147 = &unk_26C5C3858;
  uint64_t v150 = v64;
  int v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v58;
  }
  int v145 = v59;
  int v143 = &unk_26C5C3858;
  uint64_t v146 = v60;
  uint64_t v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v140, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v140 = v54;
  }
  int v141 = v55;
  uint64_t v139 = &unk_26C5C3858;
  uint64_t v142 = v56;
  int v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v136, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v136 = v50;
  }
  int v137 = v51;
  int v135 = &unk_26C5C3858;
  uint64_t v138 = v52;
  uint64_t v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v45;
  }
  int v132 = v46;
  uint64_t v130 = &unk_26C5C3878;
  uint64_t v133 = v47;
  int v134 = v48;
  uint64_t v285 = &unk_26C5C3AF0;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v286, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else {
    std::string v286 = v204;
  }
  int v287 = v205;
  uint64_t v285 = &unk_26C5C3818;
  char v288 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v289, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  }
  else {
    std::string v289 = v207;
  }
  int v281 = &unk_26C5C3AF0;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v282, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else {
    std::string v282 = v200;
  }
  int v283 = v201;
  int v281 = &unk_26C5C3858;
  uint64_t v284 = v202;
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v278, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else {
    std::string v278 = v196;
  }
  int v279 = v197;
  int v277 = &unk_26C5C3858;
  uint64_t v280 = v198;
  char v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v192;
  }
  int v275 = v193;
  char v273 = &unk_26C5C3858;
  uint64_t v276 = v194;
  uint64_t v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v269, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  }
  else {
    std::string v269 = v187;
  }
  int v270 = v188;
  uint64_t v268 = &unk_26C5C3878;
  uint64_t v271 = v189;
  int v272 = v190;
  int v263 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v264, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else {
    std::string v264 = v182;
  }
  int v265 = v183;
  int v263 = &unk_26C5C3878;
  uint64_t v266 = v184;
  int v267 = v185;
  int v258 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v259, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  }
  else {
    std::string v259 = v177;
  }
  int v260 = v178;
  int v258 = &unk_26C5C3878;
  uint64_t v261 = v179;
  int v262 = v180;
  int v254 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v255, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v255 = v173;
  }
  int v256 = v174;
  int v254 = &unk_26C5C3858;
  uint64_t v257 = v175;
  int v250 = &unk_26C5C3AF0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v251, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else {
    std::string v251 = v169;
  }
  int v252 = v170;
  int v250 = &unk_26C5C3858;
  uint64_t v253 = v171;
  int v246 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v247, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    std::string v247 = v165;
  }
  int v248 = v166;
  int v246 = &unk_26C5C3858;
  uint64_t v249 = v167;
  int v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v243, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v243 = v161;
  }
  int v244 = v162;
  int v242 = &unk_26C5C3858;
  uint64_t v245 = v163;
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v156;
  }
  int v239 = v157;
  std::string v237 = &unk_26C5C3838;
  uint64_t v240 = v158;
  int v241 = v159;
  int v233 = &unk_26C5C3AF0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v234, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v234 = v152;
  }
  int v235 = v153;
  int v233 = &unk_26C5C3858;
  uint64_t v236 = v154;
  int v229 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = v148;
  }
  int v231 = v149;
  int v229 = &unk_26C5C3858;
  uint64_t v232 = v150;
  int v225 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v226, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v226 = v144;
  }
  int v227 = v145;
  int v225 = &unk_26C5C3858;
  uint64_t v228 = v146;
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v140;
  }
  int v223 = v141;
  int v221 = &unk_26C5C3858;
  uint64_t v224 = v142;
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v218, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  }
  else {
    std::string v218 = v136;
  }
  int v219 = v137;
  int v217 = &unk_26C5C3858;
  uint64_t v220 = v138;
  uint64_t v212 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v213, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else {
    std::string v213 = v131;
  }
  int v214 = v132;
  uint64_t v212 = &unk_26C5C3878;
  uint64_t v215 = v133;
  int v216 = v134;
  long long v359 = &unk_26C5C3AF0;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v360, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  }
  else {
    std::string v360 = v282;
  }
  int v361 = v283;
  long long v359 = &unk_26C5C3858;
  uint64_t v362 = v284;
  int v355 = &unk_26C5C3AF0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v356, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  }
  else {
    std::string v356 = v278;
  }
  int v357 = v279;
  int v355 = &unk_26C5C3858;
  uint64_t v358 = v280;
  int v351 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v352, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  }
  else {
    std::string v352 = v274;
  }
  int v353 = v275;
  int v351 = &unk_26C5C3858;
  uint64_t v354 = v276;
  int v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v347, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  }
  else {
    std::string v347 = v269;
  }
  int v348 = v270;
  int v346 = &unk_26C5C3878;
  uint64_t v349 = v271;
  int v350 = v272;
  char v341 = &unk_26C5C3AF0;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v342, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  }
  else {
    std::string v342 = v264;
  }
  int v343 = v265;
  char v341 = &unk_26C5C3878;
  uint64_t v344 = v266;
  int v345 = v267;
  int v336 = &unk_26C5C3AF0;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v337, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  }
  else {
    std::string v337 = v259;
  }
  int v338 = v260;
  int v336 = &unk_26C5C3878;
  uint64_t v339 = v261;
  int v340 = v262;
  uint64_t v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v333, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  }
  else {
    std::string v333 = v255;
  }
  int v334 = v256;
  uint64_t v332 = &unk_26C5C3858;
  uint64_t v335 = v257;
  int v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v329, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  }
  else {
    std::string v329 = v251;
  }
  int v330 = v252;
  int v328 = &unk_26C5C3858;
  uint64_t v331 = v253;
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v247;
  }
  int v326 = v248;
  uint64_t v324 = &unk_26C5C3858;
  uint64_t v327 = v249;
  uint64_t v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v321, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  }
  else {
    std::string v321 = v243;
  }
  int v322 = v244;
  uint64_t v320 = &unk_26C5C3858;
  uint64_t v323 = v245;
  int v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v316, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else {
    std::string v316 = v238;
  }
  int v317 = v239;
  int v315 = &unk_26C5C3838;
  uint64_t v318 = v240;
  int v319 = v241;
  int v311 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v312, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v312 = v234;
  }
  int v313 = v235;
  int v311 = &unk_26C5C3858;
  uint64_t v314 = v236;
  char v307 = &unk_26C5C3AF0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v308, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v308 = v230;
  }
  int v309 = v231;
  char v307 = &unk_26C5C3858;
  uint64_t v310 = v232;
  uint64_t v303 = &unk_26C5C3AF0;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v304, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  }
  else {
    std::string v304 = v226;
  }
  int v305 = v227;
  uint64_t v303 = &unk_26C5C3858;
  uint64_t v306 = v228;
  uint64_t v299 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v300, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else {
    std::string v300 = v222;
  }
  int v301 = v223;
  uint64_t v299 = &unk_26C5C3858;
  uint64_t v302 = v224;
  uint64_t v295 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v296, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  }
  else {
    std::string v296 = v218;
  }
  int v297 = v219;
  uint64_t v295 = &unk_26C5C3858;
  uint64_t v298 = v220;
  uint64_t v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v213;
  }
  int v292 = v214;
  uint64_t v290 = &unk_26C5C3878;
  uint64_t v293 = v215;
  int v294 = v216;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(v37, (uint64_t)&v359, (uint64_t)&v355, (uint64_t)&v351, (uint64_t)&v346, (uint64_t)&v341, (uint64_t)&v336, (uint64_t)&v332, (uint64_t)&v328, (uint64_t)&v324, (uint64_t)&v320, (uint64_t)&v315, (uint64_t)&v311, (uint64_t)&v307, (uint64_t)&v303, (uint64_t)&v299, (uint64_t)&v295, (uint64_t)&v290);
  uint64_t v290 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v295 = &unk_26C5C3AF0;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v296.__r_.__value_.__l.__data_);
  }
  uint64_t v299 = &unk_26C5C3AF0;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  uint64_t v303 = &unk_26C5C3AF0;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v304.__r_.__value_.__l.__data_);
  }
  char v307 = &unk_26C5C3AF0;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v308.__r_.__value_.__l.__data_);
  }
  int v311 = &unk_26C5C3AF0;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  int v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v316.__r_.__value_.__l.__data_);
  }
  uint64_t v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  uint64_t v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  int v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v329.__r_.__value_.__l.__data_);
  }
  uint64_t v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  int v336 = &unk_26C5C3AF0;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v337.__r_.__value_.__l.__data_);
  }
  char v341 = &unk_26C5C3AF0;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v342.__r_.__value_.__l.__data_);
  }
  int v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v347.__r_.__value_.__l.__data_);
  }
  int v351 = &unk_26C5C3AF0;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v352.__r_.__value_.__l.__data_);
  }
  int v355 = &unk_26C5C3AF0;
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v356.__r_.__value_.__l.__data_);
  }
  long long v359 = &unk_26C5C3AF0;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v360.__r_.__value_.__l.__data_);
  }
  *(void *)(v37 + 816) = &unk_26C5C3AF0;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v37 + 824), v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v37 + 824) = v286;
  }
  *(_DWORD *)(v37 + 848) = v287;
  *(void *)(v37 + 816) = &unk_26C5C3818;
  *(unsigned char *)(v37 + 852) = v288;
  unint64_t v38 = (std::string *)(v37 + 856);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
    *(void *)(v37 + 872) = *((void *)&v289.__r_.__value_.__l + 2);
  }
  uint64_t v212 = &unk_26C5C3AF0;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  int v225 = &unk_26C5C3AF0;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v226.__r_.__value_.__l.__data_);
  }
  int v229 = &unk_26C5C3AF0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  int v233 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  int v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v243.__r_.__value_.__l.__data_);
  }
  int v246 = &unk_26C5C3AF0;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  int v250 = &unk_26C5C3AF0;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  int v254 = &unk_26C5C3AF0;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v255.__r_.__value_.__l.__data_);
  }
  int v258 = &unk_26C5C3AF0;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  int v263 = &unk_26C5C3AF0;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v264.__r_.__value_.__l.__data_);
  }
  uint64_t v268 = &unk_26C5C3AF0;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  char v273 = &unk_26C5C3AF0;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  int v277 = &unk_26C5C3AF0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  int v281 = &unk_26C5C3AF0;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v282.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v285);
  *(void *)(v37 + 880) = &unk_26C5C3AF0;
  std::string v39 = (std::string *)(v37 + 888);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v39, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v209.__r_.__value_.__l.__data_;
    *(void *)(v37 + 904) = *((void *)&v209.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v37 + 912) = v210;
  *(void *)(v37 + 880) = &unk_26C5C3858;
  *(void *)(v37 + 916) = v211;
  uint64_t v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  int v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  uint64_t v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  int v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  uint64_t v147 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  uint64_t v151 = &unk_26C5C3AF0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  uint64_t v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  int v168 = &unk_26C5C3AF0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  uint64_t v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  uint64_t v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  std::string v186 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  std::string v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  int v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  int v199 = &unk_26C5C3AF0;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  uint64_t v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  *(void *)(v37 + 928) = &unk_26C5C3AF0;
  int v40 = (std::string *)(v37 + 936);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
    *(void *)(v37 + 952) = *((void *)&v127.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v37 + 960) = v128;
  *(void *)(v37 + 928) = &unk_26C5C3858;
  *(void *)(v37 + 964) = v129;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  int v53 = &unk_26C5C3AF0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v57 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  std::string v61 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  int v65 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  char v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  uint64_t v78 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  long long v82 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  int v86 = &unk_26C5C3AF0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  char v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  int v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  uint64_t v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::string v109 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  char v113 = &unk_26C5C3AF0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v117);
  std::string v122 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  *(void *)(v37 + 976) = &unk_26C5C3AF0;
  uint64_t v41 = (std::string *)(v37 + 984);
  if (*(char *)(v36 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)(v36 + 8), *(void *)(v36 + 16));
  }
  else
  {
    long long v42 = *(_OWORD *)(v36 + 8);
    *(void *)(v37 + 1000) = *(void *)(v36 + 24);
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
  }
  *(_DWORD *)(v37 + 1008) = *(_DWORD *)(v36 + 32);
  *(void *)(v37 + 976) = &unk_26C5C3878;
  uint64_t v43 = *(void *)(v36 + 36);
  *(_DWORD *)(v37 + 1020) = *(_DWORD *)(v36 + 44);
  *(void *)(v37 + 1012) = v43;
  return v37;
}

void sub_214E1B828(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ArtistPropertyFetchableArtworkSourceType(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  int v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)int v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  char v13 = 0;
  long long v14 = 0u;
  int v16 = (void **)&v13;
  char v17 = 0;
  char v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  int v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return Foreign;
}

void sub_214E1C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    char v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::ArtistPropertyAvailableArtworkToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  int v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)int v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 4;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  char v13 = 0;
  long long v14 = 0u;
  int v16 = (void **)&v13;
  char v17 = 0;
  char v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  int v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214E1C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    char v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::$_0 &&>>()
{
}

void sub_214E1C868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerItemReactionTable::personPersistentIDColumn(mlcore::ContainerItemReactionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 55), *((void *)this + 56));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    *(void *)(a2 + 24) = *((void *)this + 57);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 116);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 119);
  *(void *)(a2 + 36) = *(void *)((char *)this + 468);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::$_0 &&>>()
{
}

void sub_214E1CB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerItemReactionTable::containerItemPersistentIDColumn(mlcore::ContainerItemReactionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(void *)(a2 + 24) = *((void *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 107);
  *(void *)(a2 + 36) = *(void *)((char *)this + 420);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyReactionText(void)::$_0 &&>>()
{
}

void sub_214E1CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerItemReactionTable::reactionTextColumn(mlcore::ContainerItemReactionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 61), *((void *)this + 62));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 488);
    *(void *)(a2 + 24) = *((void *)this + 63);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 128);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 516);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 543) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 65), *((void *)this + 66));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 520);
    *(void *)(a2 + 56) = *((void *)this + 67);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E1CFF8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E1D1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyDate(void)::$_0 &&>>()
{
}

void sub_214E1D458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E1D580(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__sharedPointer;
}

mlcore::ContainerItemReactionTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore26ContainerItemReactionTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerItemReactionTable **a1)
{
  char v2 = operator new(0x268uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CAEF8;
  uint64_t result = mlcore::ContainerItemReactionTable::ContainerItemReactionTable((mlcore::ContainerItemReactionTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerItemReactionTable *)v2;
  return result;
}

void sub_214E1D674(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ContainerItemReactionTable::persistentIDColumn(mlcore::ContainerItemReactionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 43), *((void *)this + 44));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    *(void *)(a2 + 24) = *((void *)this + 45);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 92);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 95);
  *(void *)(a2 + 36) = *(void *)((char *)this + 372);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerItemReactionTable::dateColumn(mlcore::ContainerItemReactionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((void *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(void *)(a2 + 24) = *((void *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 147);
  *(void *)(a2 + 36) = *(void *)((char *)this + 580);
  *(void *)a2 = &unk_26C5C47E8;
}

mlcore::ContainerItemReactionTable *mlcore::ContainerItemReactionTable::ContainerItemReactionTable(mlcore::ContainerItemReactionTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "container_item_reaction");
  std::string::basic_string[abi:ne180100]<0>(v41, "container_item_reaction_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v43, (uint64_t)v41, 1);
  std::string::basic_string[abi:ne180100]<0>(v34, "container_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v36, (uint64_t)v34);
  std::string::basic_string[abi:ne180100]<0>(v27, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v29, (uint64_t)v27);
  std::string::basic_string[abi:ne180100]<0>(v20, "reaction");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v22, (uint64_t)v20, (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(v11, "date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v13, (uint64_t)v11);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = __s;
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v70, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = v44;
  }
  int v71 = v45;
  uint64_t v69 = &unk_26C5C3878;
  uint64_t v72 = v46;
  int v73 = v47;
  uint64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v37;
  }
  int v66 = v38;
  uint64_t v64 = &unk_26C5C3878;
  uint64_t v67 = v39;
  int v68 = v40;
  int v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v30;
  }
  int v61 = v31;
  int v59 = &unk_26C5C3878;
  uint64_t v62 = v32;
  int v63 = v33;
  std::string v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v55, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v55 = v23;
  }
  int v56 = v24;
  std::string v54 = &unk_26C5C3818;
  char v57 = v25;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = v26;
  }
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = __p;
  }
  int v51 = v15;
  uint64_t v49 = &unk_26C5C3878;
  uint64_t v52 = v16;
  int v53 = v17;
  *(void *)this = &unk_26C5BED18;
  char v2 = (std::string *)((char *)this + 8);
  int v10 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v74.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3788;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  char v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v96, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v96 = v70;
  }
  int v97 = v71;
  char v95 = &unk_26C5C3878;
  uint64_t v98 = v72;
  int v99 = v73;
  std::string v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v91, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = v65;
  }
  int v92 = v66;
  std::string v90 = &unk_26C5C3878;
  uint64_t v93 = v67;
  int v94 = v68;
  uint64_t v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v60;
  }
  int v87 = v61;
  uint64_t v85 = &unk_26C5C3878;
  uint64_t v88 = v62;
  int v89 = v63;
  int v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v55;
  }
  int v82 = v56;
  int v80 = &unk_26C5C3818;
  char v83 = v57;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = v58;
  }
  std::string v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = v50;
  }
  int v77 = v51;
  std::string v75 = &unk_26C5C3878;
  uint64_t v78 = v52;
  int v79 = v53;
  int v115 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v116, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v116 = v91;
  }
  int v117 = v92;
  int v115 = &unk_26C5C3878;
  uint64_t v118 = v93;
  int v119 = v94;
  std::string v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v111, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v111 = v86;
  }
  int v112 = v87;
  std::string v110 = &unk_26C5C3878;
  uint64_t v113 = v88;
  int v114 = v89;
  uint64_t v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v81;
  }
  int v107 = v82;
  uint64_t v105 = &unk_26C5C3818;
  char v108 = v83;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v109, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v109 = v84;
  }
  int v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v101, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v101 = v76;
  }
  int v102 = v77;
  int v100 = &unk_26C5C3878;
  uint64_t v103 = v78;
  int v104 = v79;
  uint64_t v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v111;
  }
  int v132 = v112;
  uint64_t v130 = &unk_26C5C3878;
  uint64_t v133 = v113;
  int v134 = v114;
  uint64_t v125 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v126, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v126 = v106;
  }
  int v127 = v107;
  uint64_t v125 = &unk_26C5C3818;
  char v128 = v108;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v129, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v129 = v109;
  }
  char v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v121, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else {
    std::string v121 = v101;
  }
  int v122 = v102;
  char v120 = &unk_26C5C3878;
  uint64_t v123 = v103;
  int v124 = v104;
  std::string v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v141, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  }
  else {
    std::string v141 = v126;
  }
  int v142 = v127;
  std::string v140 = &unk_26C5C3818;
  char v143 = v128;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v129;
  }
  int v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v136, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else {
    std::string v136 = v121;
  }
  int v3 = v122;
  int v137 = v122;
  int v135 = &unk_26C5C3878;
  uint64_t v138 = v123;
  int v139 = v124;
  int v145 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v146, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
    int v3 = v137;
  }
  else
  {
    std::string v146 = v136;
  }
  int v147 = v3;
  int v145 = &unk_26C5C3878;
  uint64_t v148 = v138;
  int v149 = v139;
  *((void *)this + 10) = &unk_26C5C3AF0;
  char v4 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
    int v3 = v147;
    char v4 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v146;
  }
  *((_DWORD *)this + 28) = v3;
  *((void *)this + 10) = &unk_26C5C3878;
  *(void *)((char *)this + 116) = v148;
  *((_DWORD *)this + 31) = v149;
  int v145 = &unk_26C5C3AF0;
  if (v4 < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 136) = v141;
  }
  *((_DWORD *)this + 40) = v142;
  *((void *)this + 16) = &unk_26C5C3818;
  *((unsigned char *)this + 164) = v143;
  long long v5 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
    *((void *)this + 23) = *((void *)&v144.__r_.__value_.__l + 2);
  }
  int v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v140);
  *((void *)this + 24) = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)((char *)this + 200);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
    *((void *)this + 27) = *((void *)&v131.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 56) = v132;
  *((void *)this + 24) = &unk_26C5C3878;
  *(void *)((char *)this + 228) = v133;
  *((_DWORD *)this + 59) = v134;
  char v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v125);
  uint64_t v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  *((void *)this + 30) = &unk_26C5C3AF0;
  unint64_t v7 = (std::string *)((char *)this + 248);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *((void *)this + 33) = *((void *)&v116.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 68) = v117;
  *((void *)this + 30) = &unk_26C5C3878;
  *(void *)((char *)this + 276) = v118;
  *((_DWORD *)this + 71) = v119;
  int v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v105);
  std::string v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  int v115 = &unk_26C5C3AF0;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  *((void *)this + 36) = &unk_26C5C3AF0;
  long long v8 = (std::string *)((char *)this + 296);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
    *((void *)this + 39) = *((void *)&v96.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 80) = v97;
  *((void *)this + 36) = &unk_26C5C3878;
  *(void *)((char *)this + 324) = v98;
  *((_DWORD *)this + 83) = v99;
  std::string v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v80);
  uint64_t v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  std::string v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  char v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v54);
  int v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  uint64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C42B8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 336, (uint64_t)&v43);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 384, (uint64_t)&v36);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 432, (uint64_t)&v29);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 480, (uint64_t)v22);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 544, (uint64_t)&v13);
  char v13 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v22);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v29 = &unk_26C5C3AF0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  uint64_t v36 = &unk_26C5C3AF0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  uint64_t v43 = &unk_26C5C3AF0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C8278;
  return this;
}

void sub_214E1EBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,unint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a13);
  STACK[0x360] = a20;
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x390]);
  STACK[0x3D0] = a21;
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  STACK[0x400] = a22;
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  STACK[0x430] = a23;
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  if (*(char *)(v80 + 79) < 0) {
    operator delete(*a9);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v80);
  STACK[0x240] = a24;
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x270]);
  STACK[0x2B0] = a25;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  STACK[0x2E0] = a26;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  STACK[0x310] = a27;
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a55);
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  a69 = &unk_26C5C3AF0;
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  a75 = &unk_26C5C3AF0;
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  a80 = &unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void sub_214E1F11C()
{
}

void sub_214E1F124()
{
}

void sub_214E1F12C()
{
}

void sub_214E1F134()
{
}

void sub_214E1F13C()
{
}

void sub_214E1F144()
{
}

void sub_214E1F14C()
{
}

void sub_214E1F154()
{
}

void sub_214E1F15C()
{
}

void sub_214E1F164()
{
}

void sub_214E1F16C()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E1F374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::persistentIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1007) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 123), *((void *)this + 124));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 984);
    *(void *)(a2 + 24) = *((void *)this + 125);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 252);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 255);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1012);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>()
{
}

void sub_214E1F694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::classicalExperienceAvailableColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1855) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 229), *((void *)this + 230));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1832);
    *(void *)(a2 + 24) = *((void *)this + 231);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 464);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1860);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyName(void)::$_0 &&>>()
{
}

void sub_214E1F984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::nameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1055) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 129), *((void *)this + 130));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1032);
    *(void *)(a2 + 24) = *((void *)this + 131);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 264);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1060);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1087) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 133), *((void *)this + 134));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1064);
    *(void *)(a2 + 56) = *((void *)this + 135);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E1FB08(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySeriesName(void)::$_0 &&>>()
{
}

void sub_214E1FCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyStoreID(void)::$_0 &&>>()
{
}

void sub_214E1FF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
}

void sub_214E20194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E202BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__sharedPointer;
}

std::string *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemArtistTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(std::string **a1)
{
  char v2 = (std::string *)operator new(0x768uLL);
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5CA7C0;
  uint64_t result = mlcore::ItemArtistTable::ItemArtistTable(v2 + 1);
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_214E203B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemArtistTable::representativeItemPersistentIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((void *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(void *)(a2 + 24) = *((void *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1492);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemArtistTable::seriesNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 145), *((void *)this + 146));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1160);
    *(void *)(a2 + 24) = *((void *)this + 147);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 296);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1188);
  long long v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1215) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 149), *((void *)this + 150));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1192);
    *(void *)(a2 + 56) = *((void *)this + 151);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E20568(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::storeIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 177), *((void *)this + 178));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1416);
    *(void *)(a2 + 24) = *((void *)this + 179);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 360);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 363);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1444);
  *(void *)a2 = &unk_26C5C47E8;
}

std::string *mlcore::ItemArtistTable::ItemArtistTable(std::string *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_artist");
  std::string::basic_string[abi:ne180100]<0>(v110, "item_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v112, (uint64_t)v110, 1);
  std::string::basic_string[abi:ne180100]<0>(v103, "item_artist");
  std::string::basic_string[abi:ne180100]<0>(v101, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v105, (uint64_t)v103, (uint64_t)v101);
  std::string::basic_string[abi:ne180100]<0>(v94, "sort_item_artist");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v96, (uint64_t)v94, 0);
  std::string::basic_string[abi:ne180100]<0>(v87, "series_name");
  std::string::basic_string[abi:ne180100]<0>(v85, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v89, (uint64_t)v87, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v78, "sort_series_name");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v80, (uint64_t)v78, 0);
  std::string::basic_string[abi:ne180100]<0>(v70, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v72, (uint64_t)v70);
  std::string::basic_string[abi:ne180100]<0>(v64, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v66, (uint64_t)v64, 0);
  std::string::basic_string[abi:ne180100]<0>(v57, "store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v59, (uint64_t)v57);
  std::string::basic_string[abi:ne180100]<0>(v50, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v52, (uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(v44, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v46, (uint64_t)v44, 0);
  std::string::basic_string[abi:ne180100]<0>(v38, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v40, (uint64_t)v38, 0);
  std::string::basic_string[abi:ne180100]<0>(v32, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v34, (uint64_t)v32, 0);
  std::string::basic_string[abi:ne180100]<0>(v26, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v28, (uint64_t)v26, 0);
  std::string::basic_string[abi:ne180100]<0>(v18, "app_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v20, (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(v11, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v13, (uint64_t)v11);
  std::string::basic_string[abi:ne180100]<0>(v5, "classical_experience_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v7, (uint64_t)v5, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v196, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v196 = __s;
  }
  std::string v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v192, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v192 = v113;
  }
  int v193 = v114;
  std::string v191 = &unk_26C5C3878;
  uint64_t v194 = v115;
  int v195 = v116;
  std::string v186 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v187, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v187 = v106;
  }
  int v188 = v107;
  std::string v186 = &unk_26C5C3818;
  char v189 = v108;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = v109;
  }
  unint64_t v181 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v182, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v182 = v97;
  }
  int v183 = v98;
  unint64_t v181 = &unk_26C5C3818;
  char v184 = v99;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v185, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else {
    std::string v185 = v100;
  }
  uint64_t v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v177, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v177 = v90;
  }
  int v178 = v91;
  uint64_t v176 = &unk_26C5C3818;
  char v179 = v92;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v180, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string v180 = v93;
  }
  uint64_t v171 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v172, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v172 = v81;
  }
  int v173 = v82;
  uint64_t v171 = &unk_26C5C3818;
  char v174 = v83;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v175, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v175 = v84;
  }
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v73;
  }
  int v166 = v74;
  uint64_t v164 = &unk_26C5C37F8;
  char v167 = v75;
  mediaplatform::Data::Data((mediaplatform::Data *)&v168, __src, __n, 1);
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v67;
  }
  int v162 = v68;
  uint64_t v160 = &unk_26C5C3858;
  uint64_t v163 = v69;
  uint64_t v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v156, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v156 = v60;
  }
  int v157 = v61;
  uint64_t v155 = &unk_26C5C3878;
  uint64_t v158 = v62;
  int v159 = v63;
  uint64_t v150 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v151, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v151 = v53;
  }
  int v152 = v54;
  uint64_t v150 = &unk_26C5C3878;
  uint64_t v153 = v55;
  int v154 = v56;
  std::string v146 = &unk_26C5C3AF0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v47;
  }
  int v148 = v48;
  std::string v146 = &unk_26C5C3858;
  uint64_t v149 = v49;
  int v142 = &unk_26C5C3AF0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v143, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v143 = v41;
  }
  int v144 = v42;
  int v142 = &unk_26C5C3858;
  uint64_t v145 = v43;
  uint64_t v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v139, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v139 = v35;
  }
  int v140 = v36;
  uint64_t v138 = &unk_26C5C3858;
  uint64_t v141 = v37;
  int v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v135, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v135 = v29;
  }
  int v136 = v30;
  int v134 = &unk_26C5C3858;
  uint64_t v137 = v31;
  int v127 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v128, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v128 = v21;
  }
  int v129 = v22;
  int v127 = &unk_26C5C37F8;
  std::string::value_type v130 = v23;
  mediaplatform::Data::Data((mediaplatform::Data *)&v131, v25, v24, 1);
  int v122 = &unk_26C5C3AF0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v123, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string v123 = v14;
  }
  int v124 = v15;
  int v122 = &unk_26C5C3878;
  uint64_t v125 = v16;
  int v126 = v17;
  uint64_t v118 = &unk_26C5C3AF0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v119, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string v119 = v8;
  }
  int v120 = v9;
  uint64_t v118 = &unk_26C5C3858;
  uint64_t v121 = v10;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BED18;
  char v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  int v4 = SHIBYTE(v196.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__r.__words[0] = v196.__r_.__value_.__r.__words[2];
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C3360;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  uint64_t v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v267, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  }
  else {
    std::string v267 = v192;
  }
  int v268 = v193;
  uint64_t v266 = &unk_26C5C3878;
  uint64_t v269 = v194;
  int v270 = v195;
  uint64_t v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v187;
  }
  int v263 = v188;
  uint64_t v261 = &unk_26C5C3818;
  char v264 = v189;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v265, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v265 = v190;
  }
  int v256 = &unk_26C5C3AF0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v257, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else {
    std::string v257 = v182;
  }
  int v258 = v183;
  int v256 = &unk_26C5C3818;
  char v259 = v184;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v260, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else {
    std::string v260 = v185;
  }
  std::string v251 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v252, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  }
  else {
    std::string v252 = v177;
  }
  int v253 = v178;
  std::string v251 = &unk_26C5C3818;
  char v254 = v179;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v255, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  }
  else {
    std::string v255 = v180;
  }
  int v246 = &unk_26C5C3AF0;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v247, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  }
  else {
    std::string v247 = v172;
  }
  int v248 = v173;
  int v246 = &unk_26C5C3818;
  char v249 = v174;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v250, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else {
    std::string v250 = v175;
  }
  int v241 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v242, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    std::string v242 = v165;
  }
  int v243 = v166;
  int v241 = &unk_26C5C37F8;
  char v244 = v167;
  mediaplatform::Data::Data((mediaplatform::Data *)&v245, v170, v169, 1);
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v161;
  }
  int v239 = v162;
  std::string v237 = &unk_26C5C3858;
  uint64_t v240 = v163;
  uint64_t v232 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v233, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  }
  else {
    std::string v233 = v156;
  }
  int v234 = v157;
  uint64_t v232 = &unk_26C5C3878;
  uint64_t v235 = v158;
  int v236 = v159;
  int v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v228, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  }
  else {
    std::string v228 = v151;
  }
  int v229 = v152;
  int v227 = &unk_26C5C3878;
  uint64_t v230 = v153;
  int v231 = v154;
  int v223 = &unk_26C5C3AF0;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v224, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else {
    std::string v224 = v147;
  }
  int v225 = v148;
  int v223 = &unk_26C5C3858;
  uint64_t v226 = v149;
  int v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v220, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  }
  else {
    std::string v220 = v143;
  }
  int v221 = v144;
  int v219 = &unk_26C5C3858;
  uint64_t v222 = v145;
  uint64_t v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v216, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v216 = v139;
  }
  int v217 = v140;
  uint64_t v215 = &unk_26C5C3858;
  uint64_t v218 = v141;
  uint64_t v211 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v212, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else {
    std::string v212 = v135;
  }
  int v213 = v136;
  uint64_t v211 = &unk_26C5C3858;
  uint64_t v214 = v137;
  char v206 = &unk_26C5C3AF0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v207, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else {
    std::string v207 = v128;
  }
  int v208 = v129;
  char v206 = &unk_26C5C37F8;
  std::string::value_type v209 = v130;
  mediaplatform::Data::Data((mediaplatform::Data *)&v210, v133, v132, 1);
  int v201 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v202, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else {
    std::string v202 = v123;
  }
  int v203 = v124;
  int v201 = &unk_26C5C3878;
  uint64_t v204 = v125;
  int v205 = v126;
  int v197 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v119;
  }
  int v199 = v120;
  int v197 = &unk_26C5C3858;
  uint64_t v200 = v121;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)&this[3].__r_.__value_.__l.__size_, (uint64_t)&v266, (uint64_t)&v261, (uint64_t)&v256, (uint64_t)&v251, (uint64_t)&v246, (uint64_t)&v241, (uint64_t)&v237, (uint64_t)&v232, (uint64_t)&v227, (uint64_t)&v223, (uint64_t)&v219, (uint64_t)&v215, (uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v197);
  int v197 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v201 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v206);
  uint64_t v211 = &unk_26C5C3AF0;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
  uint64_t v215 = &unk_26C5C3AF0;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  int v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  int v223 = &unk_26C5C3AF0;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  int v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  uint64_t v232 = &unk_26C5C3AF0;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  std::string v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v241);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v251);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v261);
  uint64_t v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v267.__r_.__value_.__l.__data_);
  }
  uint64_t v118 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  int v122 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v127);
  int v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  uint64_t v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  int v142 = &unk_26C5C3AF0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  std::string v146 = &unk_26C5C3AF0;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  uint64_t v150 = &unk_26C5C3AF0;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  uint64_t v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  uint64_t v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v164);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v171);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v176);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v181);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v186);
  std::string v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C3E90;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)&this[40].__r_.__value_.__r.__words[2], (uint64_t)&v112);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)&this[42].__r_.__value_.__r.__words[2], (uint64_t)v105);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)&this[45].__r_.__value_.__l.__size_, (uint64_t)v96);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)&this[48], (uint64_t)v89);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)&this[50].__r_.__value_.__r.__words[2], (uint64_t)v80);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>((uint64_t)&this[53].__r_.__value_.__l.__size_, (uint64_t)v72);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[56].__r_.__value_.__r.__words[2], (uint64_t)&v66);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)&this[58].__r_.__value_.__r.__words[2], (uint64_t)&v59);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)&this[60].__r_.__value_.__r.__words[2], (uint64_t)&v52);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[62].__r_.__value_.__r.__words[2], (uint64_t)&v46);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[64].__r_.__value_.__r.__words[2], (uint64_t)&v40);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[66].__r_.__value_.__r.__words[2], (uint64_t)&v34);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[68].__r_.__value_.__r.__words[2], (uint64_t)&v28);
  this[70].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(this + 71, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    this[71] = v21;
  }
  LODWORD(this[72].__r_.__value_.__l.__data_) = v22;
  this[70].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26C5C37F8;
  this[72].__r_.__value_.__s.__data_[4] = v23;
  mediaplatform::Data::Data((mediaplatform::Data *)&this[72].__r_.__value_.__r.__words[1], v25, v24, 1);
  this[70].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26C5C4768;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)&this[74], (uint64_t)&v13);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)&this[76], (uint64_t)&v7);
  unint64_t v7 = &unk_26C5C3AF0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  char v13 = &unk_26C5C3AF0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v20);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  char v28 = &unk_26C5C3AF0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  uint64_t v34 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  int v40 = &unk_26C5C3AF0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v46 = &unk_26C5C3AF0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  uint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  int v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  int v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v72);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v80);
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v89);
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v96);
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v105);
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  int v112 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C5D20;
  return this;
}

void sub_214E22440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_Unwind_Exception *exception_objecta,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  *(void *)(v75 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1679) < 0) {
    operator delete(*(void **)(v75 + 1656));
  }
  *(void *)(v75 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1631) < 0) {
    operator delete(*(void **)(v75 + 1608));
  }
  *(void *)(v75 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1583) < 0) {
    operator delete(*(void **)(v75 + 1560));
  }
  *(void *)(v75 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1535) < 0) {
    operator delete(*(void **)(v75 + 1512));
  }
  *(void *)(v75 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1487) < 0) {
    operator delete(*(void **)(v75 + 1464));
  }
  *(void *)(v75 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1439) < 0) {
    operator delete(*(void **)(v75 + 1416));
  }
  *(void *)(v75 + 1360) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1391) < 0) {
    operator delete(*(void **)(v75 + 1368));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a40);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a41);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a42);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a43);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a44);
  *(void *)(v75 + 976) = &unk_26C5C3AF0;
  if (*(char *)(v75 + 1007) < 0) {
    operator delete(*(void **)(v75 + 984));
  }
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~DatabaseTable(v75);
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a75);
  if (a74 < 0) {
    operator delete(a73);
  }
  STACK[0x238] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  STACK[0x280] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  STACK[0x2C8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  STACK[0x310] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  STACK[0x358] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  STACK[0x3A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  STACK[0x3E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x430]);
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x498]);
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete((void *)STACK[0x4D8]);
  }
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x560]);
  if (SLOBYTE(STACK[0x55F]) < 0) {
    operator delete((void *)STACK[0x548]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  STACK[0x628] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  if (SLOBYTE(STACK[0x66F]) < 0) {
    operator delete((void *)STACK[0x658]);
  }
  _Unwind_Resume(a1);
}

void sub_214E22E54()
{
  STACK[0xC10] = v0;
  if (SLOBYTE(STACK[0xC2F]) < 0) {
    operator delete((void *)STACK[0xC18]);
  }
  JUMPOUT(0x214E22988);
}

void sub_214E22E70()
{
  STACK[0x6D0] = v0;
  if (SLOBYTE(STACK[0x6EF]) < 0) {
    operator delete((void *)STACK[0x6D8]);
  }
  JUMPOUT(0x214E22A14);
}

void sub_214E22E8C()
{
  STACK[0x870] = v0;
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  JUMPOUT(0x214E22AC4);
}

void sub_214E22EA8()
{
}

void sub_214E22EB0()
{
}

void sub_214E22EB8()
{
}

void sub_214E22EC0()
{
}

void sub_214E22EC8()
{
}

void sub_214E22ED0()
{
}

void sub_214E22ED8()
{
}

void sub_214E22EE0()
{
}

void sub_214E22EE8()
{
}

void sub_214E22EF0()
{
}

void sub_214E22EF8()
{
}

void sub_214E22F00()
{
}

void sub_214E22F08()
{
}

void sub_214E22F10()
{
}

void sub_214E22F18()
{
}

void sub_214E22F20()
{
}

void sub_214E22F28()
{
}

void sub_214E22F30()
{
}

void sub_214E22F38()
{
}

void sub_214E22F40()
{
}

void sub_214E22F48()
{
}

void sub_214E22F50()
{
}

void sub_214E22F58()
{
}

void sub_214E22F60()
{
}

void sub_214E22F68()
{
}

void sub_214E22F70()
{
}

void sub_214E22F78()
{
}

void sub_214E22F80()
{
}

void sub_214E22F88()
{
}

void sub_214E22F90()
{
}

void sub_214E22F98()
{
}

void sub_214E22FA0()
{
}

void sub_214E22FA8()
{
}

void sub_214E22FB0()
{
}

uint64_t std::__tuple_leaf<5ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), *(const void **)(a2 + 64), *(void *)(a2 + 48), 1);
  *(void *)a1 = &unk_26C5C4768;
  return a1;
}

void sub_214E23094(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::TVEpisodePropertyFetchableScreenshotToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::TVEpisodePropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 2;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  char v13 = 0;
  long long v14 = 0u;
  uint64_t v16 = (void **)&v13;
  char v17 = 0;
  char v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  uint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214E2329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    char v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::TVEpisodePropertyAvailableScreenshotToken(mlcore *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (mlcore *)mlcore::TVEpisodePropertyPersistentID(this);
  char v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  uint64_t v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CAB78;
  *((void *)v4 + 4) = v3;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C7978;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)&long long v5 = v4 + 24;
  *((void *)&v5 + 1) = v4;
  v18[0] = v5;
  uint64_t v6 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v4);
  unint64_t v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)unint64_t v7 = &unk_26C5CAB78;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26C5C7978;
  *((_DWORD *)v7 + 12) = 2;
  *(_OWORD *)(v7 + 56) = 0u;
  *(void *)&long long v8 = v7 + 24;
  *((void *)&v8 + 1) = v7;
  v18[1] = v8;
  char v13 = 0;
  long long v14 = 0u;
  uint64_t v16 = (void **)&v13;
  char v17 = 0;
  char v13 = (uint64_t *)operator new(0x20uLL);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v13 + 4;
  *(void *)&long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v14 + 8, v18, v19, v13);
  mlcore::CreateAndPredicate(&v13, &v15);
  uint64_t v9 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, (uint64_t *)&v15);
  if (v15.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.n128_u64[1]);
  }
  uint64_t v16 = (void **)&v13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v16);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v11 = *(std::__shared_weak_count **)((char *)v18 + i);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v9;
}

void sub_214E234F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, char a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a15 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v18 = 24;
  while (1)
  {
    char v19 = *(std::__shared_weak_count **)(&a17 + v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::TVEpisodePropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TVEpisodePropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::TVEpisodePropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::TVEpisodePropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerProtocol(void)::$_0 &&>>()
{
}

void sub_214E2376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowSortType(void)::$_0 &&>>()
{
}

void sub_214E239C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSubSortOrder(void)::$_0 &&>>()
{
}

void sub_214E23C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E23D60(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ItemVideoTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemVideoTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemVideoTable **a1)
{
  char v2 = operator new(0x1088uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CA638;
  uint64_t result = mlcore::ItemVideoTable::ItemVideoTable((mlcore::ItemVideoTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemVideoTable *)v2;
  return result;
}

void sub_214E23DEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::ItemVideoTable::episodeSubSortOrderColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 437), *((void *)this + 438));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3496);
    *(void *)(a2 + 24) = *((void *)this + 439);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 880);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 883);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3524);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemVideoTable::hlsKeyServerProtocol(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 4175;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4175) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 519), *((void *)this + 520));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4152);
    *(void *)(a2 + 24) = *((void *)this + 521);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1044);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  uint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 523), *((void *)this + 524));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4184);
    *(void *)(a2 + 56) = *((void *)this + 525);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E23FBC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::showSortTypeColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 417), *((void *)this + 418));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3336);
    *(void *)(a2 + 24) = *((void *)this + 419);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 840);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 843);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3364);
  *(void *)a2 = &unk_26C5C47E8;
}

mlcore::ItemExtraTable *mlcore::ItemExtraTable::ItemExtraTable(mlcore::ItemExtraTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v137, "item_extra");
  std::string::basic_string[abi:ne180100]<0>(v133, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v135, (uint64_t)v133, 1);
  std::string::basic_string[abi:ne180100]<0>(v130, "title");
  std::string::basic_string[abi:ne180100]<0>(v128, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v132, (uint64_t)v130, (uint64_t)v128);
  std::string::basic_string[abi:ne180100]<0>(v125, "sort_title");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v127, (uint64_t)v125, 0);
  std::string::basic_string[abi:ne180100]<0>(v121, "disc_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v123, (uint64_t)v121, 0);
  std::string::basic_string[abi:ne180100]<0>(v117, "track_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v119, (uint64_t)v117, 0);
  std::string::basic_string[abi:ne180100]<0>(v113, "total_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)v115, (uint64_t)v113);
  std::string::basic_string[abi:ne180100]<0>(v109, "year");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v111, (uint64_t)v109, 0);
  std::string::basic_string[abi:ne180100]<0>(v106, "location");
  std::string::basic_string[abi:ne180100]<0>(v104, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v108, (uint64_t)v106, (uint64_t)v104);
  std::string::basic_string[abi:ne180100]<0>(v100, "file_size");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v102, (uint64_t)v100);
  std::string::basic_string[abi:ne180100]<0>(v97, "integrity");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v99, (uint64_t)v97);
  std::string::basic_string[abi:ne180100]<0>(v93, "is_audible_audio_book");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v95, (uint64_t)v93, 0);
  std::string::basic_string[abi:ne180100]<0>(v89, "date_modified");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v91, (uint64_t)v89);
  std::string::basic_string[abi:ne180100]<0>(v85, "media_kind");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v87, (uint64_t)v85, 0);
  std::string::basic_string[abi:ne180100]<0>(v81, "content_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v83, (uint64_t)v81, 0);
  std::string::basic_string[abi:ne180100]<0>(v77, "content_rating_level");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v79, (uint64_t)v77, 0);
  std::string::basic_string[abi:ne180100]<0>(v73, "is_user_disabled");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v75, (uint64_t)v73, 0);
  std::string::basic_string[abi:ne180100]<0>(v69, "bpm");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v71, (uint64_t)v69, 0);
  std::string::basic_string[abi:ne180100]<0>(v65, "genius_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v67, (uint64_t)v65);
  std::string::basic_string[abi:ne180100]<0>(v62, "comment");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v64, (uint64_t)v62, 0);
  std::string::basic_string[abi:ne180100]<0>(v59, "grouping");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v61, (uint64_t)v59, 0);
  std::string::basic_string[abi:ne180100]<0>(v56, "description");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v58, (uint64_t)v56, 0);
  std::string::basic_string[abi:ne180100]<0>(v53, "description_long");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v55, (uint64_t)v53, 0);
  std::string::basic_string[abi:ne180100]<0>(v50, "collection_description");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v52, (uint64_t)v50, 0);
  std::string::basic_string[abi:ne180100]<0>(v47, "copyright");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v49, (uint64_t)v47, 0);
  std::string::basic_string[abi:ne180100]<0>(v43, "pending_genius_checksum");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v45, (uint64_t)v43);
  std::string::basic_string[abi:ne180100]<0>(v39, "category_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v41, (uint64_t)v39);
  std::string::basic_string[abi:ne180100]<0>(v35, "location_kind_id");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v37, (uint64_t)v35, 0);
  std::string::basic_string[abi:ne180100]<0>(v32, "version");
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v34, (uint64_t)v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v27, "display_version");
  std::string::basic_string[abi:ne180100]<0>(v25, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v29, (uint64_t)v27, (uint64_t)v25);
  std::string::basic_string[abi:ne180100]<0>(v22, "classical_work");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v24, (uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v17, "classical_movement");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v19, (uint64_t)v17, (uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(v11, "classical_movement_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v13, (uint64_t)v11, 0);
  std::string::basic_string[abi:ne180100]<0>(v7, "classical_movement_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v9, (uint64_t)v7, 0);
  std::string::basic_string[abi:ne180100]<0>(v3, "is_preorder");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v5, (uint64_t)v3, 0);
  mlcore::MediaTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::MediaTable((uint64_t)this, (uint64_t)v137, (uint64_t)v135, (uint64_t)v132, (uint64_t)v127, (uint64_t)v123, (uint64_t)v119, (uint64_t)v115, (uint64_t)v111, (uint64_t)v108, (uint64_t)v102, (uint64_t)v99, (uint64_t)v95, (uint64_t)v91, (uint64_t)v87, (uint64_t)v83, (uint64_t)v79, (uint64_t)v75, (uint64_t)v71,
    (uint64_t)v67,
    (uint64_t)v64,
    (uint64_t)v61,
    (uint64_t)v58,
    (uint64_t)v55,
    (uint64_t)v52,
    (uint64_t)v49,
    (uint64_t)v45,
    (uint64_t)v41,
    (uint64_t)v37,
    (uint64_t)v34,
    (uint64_t)v29,
    (uint64_t)v24,
    (uint64_t)v19,
    (uint64_t)v13,
    (uint64_t)v9,
    (uint64_t)v5);
  v5[0] = &unk_26C5C3AF0;
  if (v6 < 0) {
    operator delete((void *)v5[1]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  v9[0] = &unk_26C5C3AF0;
  if (v10 < 0) {
    operator delete((void *)v9[1]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  v13[0] = &unk_26C5C3AF0;
  if (v14 < 0) {
    operator delete((void *)v13[1]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v19);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v24);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v29);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v34);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  v37[0] = &unk_26C5C3AF0;
  if (v38 < 0) {
    operator delete((void *)v37[1]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  v41[0] = &unk_26C5C3AF0;
  if (v42 < 0) {
    operator delete((void *)v41[1]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v45[0] = &unk_26C5C3AF0;
  if (v46 < 0) {
    operator delete((void *)v45[1]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v49);
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v52);
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v55);
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v58);
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v64);
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  v67[0] = &unk_26C5C3AF0;
  if (v68 < 0) {
    operator delete((void *)v67[1]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  v71[0] = &unk_26C5C3AF0;
  if (v72 < 0) {
    operator delete((void *)v71[1]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  v75[0] = &unk_26C5C3AF0;
  if (v76 < 0) {
    operator delete((void *)v75[1]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  v79[0] = &unk_26C5C3AF0;
  if (v80 < 0) {
    operator delete((void *)v79[1]);
  }
  if (v78 < 0) {
    operator delete(v77[0]);
  }
  v83[0] = &unk_26C5C3AF0;
  if (v84 < 0) {
    operator delete((void *)v83[1]);
  }
  if (v82 < 0) {
    operator delete(v81[0]);
  }
  v87[0] = &unk_26C5C3AF0;
  if (v88 < 0) {
    operator delete((void *)v87[1]);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  v91[0] = &unk_26C5C3AF0;
  if (v92 < 0) {
    operator delete((void *)v91[1]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  v95[0] = &unk_26C5C3AF0;
  if (v96 < 0) {
    operator delete((void *)v95[1]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v99);
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  v102[0] = &unk_26C5C3AF0;
  if (v103 < 0) {
    operator delete((void *)v102[1]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v108);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if (v107 < 0) {
    operator delete(v106[0]);
  }
  v111[0] = &unk_26C5C3AF0;
  if (v112 < 0) {
    operator delete((void *)v111[1]);
  }
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  v115[0] = &unk_26C5C3AF0;
  if (v116 < 0) {
    operator delete((void *)v115[1]);
  }
  if (v114 < 0) {
    operator delete(v113[0]);
  }
  v119[0] = &unk_26C5C3AF0;
  if (v120 < 0) {
    operator delete((void *)v119[1]);
  }
  if (v118 < 0) {
    operator delete(v117[0]);
  }
  v123[0] = &unk_26C5C3AF0;
  if (v124 < 0) {
    operator delete((void *)v123[1]);
  }
  if (v122 < 0) {
    operator delete(v121[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v127);
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v132);
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  v135[0] = &unk_26C5C3AF0;
  if (v136 < 0) {
    operator delete((void *)v135[1]);
  }
  if (v134 < 0) {
    operator delete(v133[0]);
  }
  if (v138 < 0) {
    operator delete(v137[0]);
  }
  *(void *)this = &unk_26C5C5218;
  return this;
}

void sub_214E24CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a79);
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x260]);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x340]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  STACK[0x398] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  STACK[0x3E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  STACK[0x428] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x470]);
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x520]);
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x578]);
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x628]);
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  STACK[0x680] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x69F]) < 0) {
    operator delete((void *)STACK[0x688]);
  }
  if (SLOBYTE(STACK[0x67F]) < 0) {
    operator delete((void *)STACK[0x668]);
  }
  STACK[0x6C8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  if (SLOBYTE(STACK[0x6C7]) < 0) {
    operator delete((void *)STACK[0x6B0]);
  }
  STACK[0x710] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x72F]) < 0) {
    operator delete((void *)STACK[0x718]);
  }
  if (SLOBYTE(STACK[0x70F]) < 0) {
    operator delete((void *)STACK[0x6F8]);
  }
  STACK[0x758] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }
  if (SLOBYTE(STACK[0x757]) < 0) {
    operator delete((void *)STACK[0x740]);
  }
  STACK[0x7A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7BF]) < 0) {
    operator delete((void *)STACK[0x7A8]);
  }
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  STACK[0x7E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x807]) < 0) {
    operator delete((void *)STACK[0x7F0]);
  }
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  STACK[0x830] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x84F]) < 0) {
    operator delete((void *)STACK[0x838]);
  }
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  STACK[0x878] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x897]) < 0) {
    operator delete((void *)STACK[0x880]);
  }
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x8C0]);
  if (SLOBYTE(STACK[0x8BF]) < 0) {
    operator delete((void *)STACK[0x8A8]);
  }
  STACK[0x928] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x988]);
  if (SLOBYTE(STACK[0x96F]) < 0) {
    operator delete((void *)STACK[0x958]);
  }
  if (SLOBYTE(STACK[0x987]) < 0) {
    operator delete((void *)STACK[0x970]);
  }
  STACK[0x9E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x9FF]) < 0) {
    operator delete((void *)STACK[0x9E8]);
  }
  if (SLOBYTE(STACK[0x9DF]) < 0) {
    operator delete((void *)STACK[0x9C8]);
  }
  STACK[0xA28] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA47]) < 0) {
    operator delete((void *)STACK[0xA30]);
  }
  if (SLOBYTE(STACK[0xA27]) < 0) {
    operator delete((void *)STACK[0xA10]);
  }
  STACK[0xA70] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA8F]) < 0) {
    operator delete((void *)STACK[0xA78]);
  }
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  STACK[0xAB8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xAD7]) < 0) {
    operator delete((void *)STACK[0xAC0]);
  }
  if (SLOBYTE(STACK[0xAB7]) < 0) {
    operator delete((void *)STACK[0xAA0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB00]);
  if (SLOBYTE(STACK[0xAFF]) < 0) {
    operator delete((void *)STACK[0xAE8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v79 - 192);
  if (*(char *)(v79 - 217) < 0) {
    operator delete(*(void **)(v79 - 240));
  }
  if (*(char *)(v79 - 193) < 0) {
    operator delete(*(void **)(v79 - 216));
  }
  *(void *)(v79 - 104) = &unk_26C5C3AF0;
  if (*(char *)(v79 - 73) < 0) {
    operator delete(*(void **)(v79 - 96));
  }
  if (*(char *)(v79 - 105) < 0) {
    operator delete(*(void **)(v79 - 128));
  }
  if (*(char *)(v79 - 33) < 0) {
    operator delete(*(void **)(v79 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_214E25400()
{
}

void sub_214E25408()
{
}

void sub_214E25410()
{
}

void sub_214E25418()
{
}

void sub_214E25420()
{
}

void sub_214E25428()
{
}

void sub_214E25430()
{
}

void sub_214E25438()
{
}

void sub_214E25440()
{
}

void sub_214E25448()
{
}

void sub_214E25450()
{
}

void sub_214E25458()
{
}

void sub_214E25460()
{
}

void sub_214E25468()
{
}

void sub_214E25470()
{
}

void sub_214E25478()
{
}

void sub_214E25480()
{
}

void sub_214E25488()
{
}

void sub_214E25490()
{
}

void sub_214E25498()
{
}

void sub_214E254A0()
{
}

void sub_214E254A8()
{
}

void sub_214E254B0()
{
}

void sub_214E254B8()
{
}

void sub_214E254C0()
{
}

void sub_214E254C8()
{
}

void sub_214E254D0()
{
}

void sub_214E254D8()
{
}

void sub_214E254E0()
{
}

void sub_214E254E8()
{
}

void sub_214E254F0()
{
}

void sub_214E254F8()
{
}

void sub_214E25500()
{
}

void sub_214E25508()
{
}

void sub_214E25510()
{
}

void sub_214E25518()
{
}

void sub_214E25520()
{
}

void sub_214E25528()
{
}

void sub_214E25530()
{
}

void sub_214E25538()
{
}

void sub_214E25540()
{
}

void sub_214E25548()
{
}

void sub_214E25550()
{
}

void sub_214E25558()
{
}

void sub_214E25560()
{
}

void sub_214E25568()
{
}

void sub_214E25570()
{
}

void sub_214E25578()
{
}

void sub_214E25580()
{
}

void sub_214E25588()
{
}

void sub_214E25590()
{
}

void sub_214E25598()
{
}

void sub_214E255A0()
{
}

void sub_214E255A8()
{
}

void sub_214E255B0()
{
}

void sub_214E255B8()
{
}

void sub_214E255C0()
{
}

void sub_214E255C8()
{
}

void sub_214E255D0()
{
}

void sub_214E255D8()
{
}

void sub_214E255E0()
{
}

void sub_214E255E8()
{
}

void sub_214E255F0()
{
}

void sub_214E255F8()
{
}

void sub_214E25600()
{
}

void sub_214E25608()
{
}

uint64_t mlcore::MediaColumn<std::string>::MediaColumn(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  char v6 = (std::string *)(a1 + 8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = a3;
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v9.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = a3;
  }
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  if (v5 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E25744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(v9);
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

mlcore::ItemVideoTable *mlcore::ItemVideoTable::ItemVideoTable(mlcore::ItemVideoTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v168, "item_video");
  std::string::basic_string[abi:ne180100]<0>(v164, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v166, (uint64_t)v164, 1);
  std::string::basic_string[abi:ne180100]<0>(v160, "video_quality");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v162, (uint64_t)v160, 0);
  std::string::basic_string[abi:ne180100]<0>(v156, "is_rental");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v158, (uint64_t)v156, 0);
  std::string::basic_string[abi:ne180100]<0>(v152, "has_chapter_data");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v154, (uint64_t)v152, 0);
  std::string::basic_string[abi:ne180100]<0>(v148, "season_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v150, (uint64_t)v148, 0);
  std::string::basic_string[abi:ne180100]<0>(v145, "episode_id");
  std::string::basic_string[abi:ne180100]<0>(v143, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v147, (uint64_t)v145, (uint64_t)v143);
  std::string::basic_string[abi:ne180100]<0>(v140, "network_name");
  std::string::basic_string[abi:ne180100]<0>(v138, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v142, (uint64_t)v140, (uint64_t)v138);
  std::string::basic_string[abi:ne180100]<0>(v135, "extended_content_rating");
  std::string::basic_string[abi:ne180100]<0>(v133, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v137, (uint64_t)v135, (uint64_t)v133);
  std::string::basic_string[abi:ne180100]<0>(v130, "movie_info");
  std::string::basic_string[abi:ne180100]<0>(v128, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v132, (uint64_t)v130, (uint64_t)v128);
  std::string::basic_string[abi:ne180100]<0>(v124, "has_alternate_audio");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v126, (uint64_t)v124, 0);
  std::string::basic_string[abi:ne180100]<0>(v120, "has_subtitles");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v122, (uint64_t)v120, 0);
  std::string::basic_string[abi:ne180100]<0>(v116, "audio_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v118, (uint64_t)v116, 0);
  std::string::basic_string[abi:ne180100]<0>(v112, "audio_track_index");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v114, (uint64_t)v112, 0);
  std::string::basic_string[abi:ne180100]<0>(v108, "audio_track_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v110, (uint64_t)v108);
  std::string::basic_string[abi:ne180100]<0>(v104, "subtitle_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v106, (uint64_t)v104, 0);
  std::string::basic_string[abi:ne180100]<0>(v100, "subtitle_track_index");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v102, (uint64_t)v100, 0);
  std::string::basic_string[abi:ne180100]<0>(v96, "rental_duration");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v98, (uint64_t)v96, 0);
  std::string::basic_string[abi:ne180100]<0>(v92, "rental_playback_duration");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v94, (uint64_t)v92, 0);
  std::string::basic_string[abi:ne180100]<0>(v88, "rental_playback_date_started");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v90, (uint64_t)v88, 0);
  std::string::basic_string[abi:ne180100]<0>(v84, "rental_date_started");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v86, (uint64_t)v84, 0);
  std::string::basic_string[abi:ne180100]<0>(v80, "is_demo");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v82, (uint64_t)v80, 0);
  std::string::basic_string[abi:ne180100]<0>(v76, "has_hls");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v78, (uint64_t)v76, 0);
  std::string::basic_string[abi:ne180100]<0>(v73, "audio_track_locale");
  std::string::basic_string[abi:ne180100]<0>(v71, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v75, (uint64_t)v73, (uint64_t)v71);
  std::string::basic_string[abi:ne180100]<0>(v67, "show_sort_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v69, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(v63, "episode_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v65, (uint64_t)v63);
  std::string::basic_string[abi:ne180100]<0>(v60, "episode_type_display_name");
  std::string::basic_string[abi:ne180100]<0>(v58, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v62, (uint64_t)v60, (uint64_t)v58);
  std::string::basic_string[abi:ne180100]<0>(v54, "episode_sub_sort_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v51, "hls_offline_playback_keys");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v53, (uint64_t)v51);
  std::string::basic_string[abi:ne180100]<0>(v47, "is_premium");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v49, (uint64_t)v47, 0);
  std::string::basic_string[abi:ne180100]<0>(v43, "color_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v45, (uint64_t)v43, 0);
  std::string::basic_string[abi:ne180100]<0>(v39, "hls_color_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v41, (uint64_t)v39, 0);
  std::string::basic_string[abi:ne180100]<0>(v35, "hls_video_quality");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v37, (uint64_t)v35, 0);
  std::string::basic_string[abi:ne180100]<0>(v32, "hls_playlist_url");
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v34, (uint64_t)v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v26, "audio_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v28, (uint64_t)v26, 0);
  std::string::basic_string[abi:ne180100]<0>(v22, "hls_audio_capability");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v24, (uint64_t)v22);
  std::string::basic_string[abi:ne180100]<0>(v18, "hls_asset_traits");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v20, (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(v15, "hls_key_server_url");
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v17, (uint64_t)v15, (uint64_t)v13);
  std::string::basic_string[abi:ne180100]<0>(v10, "hls_key_cert_url");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v12, (uint64_t)v10, (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(v5, "hls_key_server_protocol");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::MediaTable((uint64_t)this, (uint64_t)v168, (uint64_t)v166, (uint64_t)v162, (uint64_t)v158, (uint64_t)v154, (uint64_t)v150, (uint64_t)v147, (uint64_t)v142, (uint64_t)v137, (uint64_t)v132, (uint64_t)v126, (uint64_t)v122, (uint64_t)v118, (uint64_t)v114, (uint64_t)v110, (uint64_t)v106, (uint64_t)v102, (uint64_t)v98,
    (uint64_t)v94,
    (uint64_t)v90,
    (uint64_t)v86,
    (uint64_t)v82,
    (uint64_t)v78,
    (uint64_t)v75,
    (uint64_t)v69,
    (uint64_t)v65,
    (uint64_t)v62,
    (uint64_t)v56,
    (uint64_t)v53,
    (uint64_t)v49,
    (uint64_t)v45,
    (uint64_t)v41,
    (uint64_t)v37,
    (uint64_t)v34,
    (uint64_t)v28,
    (uint64_t)v24,
    (uint64_t)v20,
    (uint64_t)v17,
    (uint64_t)v12,
    (uint64_t)v7);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v12);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v17);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  v20[0] = &unk_26C5C3AF0;
  if (v21 < 0) {
    operator delete((void *)v20[1]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  v24[0] = &unk_26C5C3AF0;
  if (v25 < 0) {
    operator delete((void *)v24[1]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  v28[0] = &unk_26C5C3AF0;
  if (v29 < 0) {
    operator delete((void *)v28[1]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v34);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  v37[0] = &unk_26C5C3AF0;
  if (v38 < 0) {
    operator delete((void *)v37[1]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  v41[0] = &unk_26C5C3AF0;
  if (v42 < 0) {
    operator delete((void *)v41[1]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v45[0] = &unk_26C5C3AF0;
  if (v46 < 0) {
    operator delete((void *)v45[1]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  v49[0] = &unk_26C5C3AF0;
  if (v50 < 0) {
    operator delete((void *)v49[1]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v53);
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  v56[0] = &unk_26C5C3AF0;
  if (v57 < 0) {
    operator delete((void *)v56[1]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v62);
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  v65[0] = &unk_26C5C3AF0;
  if (v66 < 0) {
    operator delete((void *)v65[1]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  v69[0] = &unk_26C5C3AF0;
  if (v70 < 0) {
    operator delete((void *)v69[1]);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v75);
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  v78[0] = &unk_26C5C3AF0;
  if (v79 < 0) {
    operator delete((void *)v78[1]);
  }
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  v82[0] = &unk_26C5C3AF0;
  if (v83 < 0) {
    operator delete((void *)v82[1]);
  }
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  v86[0] = &unk_26C5C3AF0;
  if (v87 < 0) {
    operator delete((void *)v86[1]);
  }
  if (v85 < 0) {
    operator delete(v84[0]);
  }
  v90[0] = &unk_26C5C3AF0;
  if (v91 < 0) {
    operator delete((void *)v90[1]);
  }
  if (v89 < 0) {
    operator delete(v88[0]);
  }
  v94[0] = &unk_26C5C3AF0;
  if (v95 < 0) {
    operator delete((void *)v94[1]);
  }
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  v98[0] = &unk_26C5C3AF0;
  if (v99 < 0) {
    operator delete((void *)v98[1]);
  }
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  v102[0] = &unk_26C5C3AF0;
  if (v103 < 0) {
    operator delete((void *)v102[1]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  v106[0] = &unk_26C5C3AF0;
  if (v107 < 0) {
    operator delete((void *)v106[1]);
  }
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  v110[0] = &unk_26C5C3AF0;
  if (v111 < 0) {
    operator delete((void *)v110[1]);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  v114[0] = &unk_26C5C3AF0;
  if (v115 < 0) {
    operator delete((void *)v114[1]);
  }
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  v118[0] = &unk_26C5C3AF0;
  if (v119 < 0) {
    operator delete((void *)v118[1]);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  v122[0] = &unk_26C5C3AF0;
  if (v123 < 0) {
    operator delete((void *)v122[1]);
  }
  if (v121 < 0) {
    operator delete(v120[0]);
  }
  v126[0] = &unk_26C5C3AF0;
  if (v127 < 0) {
    operator delete((void *)v126[1]);
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v132);
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v137);
  if (v134 < 0) {
    operator delete(v133[0]);
  }
  if (v136 < 0) {
    operator delete(v135[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v142);
  if (v139 < 0) {
    operator delete(v138[0]);
  }
  if (v141 < 0) {
    operator delete(v140[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v147);
  if (v144 < 0) {
    operator delete(v143[0]);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  v150[0] = &unk_26C5C3AF0;
  if (v151 < 0) {
    operator delete((void *)v150[1]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  v154[0] = &unk_26C5C3AF0;
  if (v155 < 0) {
    operator delete((void *)v154[1]);
  }
  if (v153 < 0) {
    operator delete(v152[0]);
  }
  v158[0] = &unk_26C5C3AF0;
  if (v159 < 0) {
    operator delete((void *)v158[1]);
  }
  if (v157 < 0) {
    operator delete(v156[0]);
  }
  v162[0] = &unk_26C5C3AF0;
  if (v163 < 0) {
    operator delete((void *)v162[1]);
  }
  if (v161 < 0) {
    operator delete(v160[0]);
  }
  v166[0] = &unk_26C5C3AF0;
  if (v167 < 0) {
    operator delete((void *)v166[1]);
  }
  if (v165 < 0) {
    operator delete(v164[0]);
  }
  if (v169 < 0) {
    operator delete(v168[0]);
  }
  *(void *)this = &unk_26C5C52C0;
  return this;
}

void sub_214E266D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a55);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  STACK[0x278] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  STACK[0x2C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  STACK[0x308] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x368]);
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  STACK[0x3C0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  STACK[0x408] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  STACK[0x450] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  STACK[0x498] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x4E0]);
  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete((void *)STACK[0x4C8]);
  }
  STACK[0x548] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x547]) < 0) {
    operator delete((void *)STACK[0x530]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  STACK[0x600] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  STACK[0x648] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6A8]);
  if (SLOBYTE(STACK[0x68F]) < 0) {
    operator delete((void *)STACK[0x678]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  STACK[0x700] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  STACK[0x748] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x767]) < 0) {
    operator delete((void *)STACK[0x750]);
  }
  if (SLOBYTE(STACK[0x747]) < 0) {
    operator delete((void *)STACK[0x730]);
  }
  STACK[0x790] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7AF]) < 0) {
    operator delete((void *)STACK[0x798]);
  }
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  STACK[0x7D8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  STACK[0x820] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  if (SLOBYTE(STACK[0x81F]) < 0) {
    operator delete((void *)STACK[0x808]);
  }
  STACK[0x868] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }
  STACK[0x8B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  if (SLOBYTE(STACK[0x8AF]) < 0) {
    operator delete((void *)STACK[0x898]);
  }
  STACK[0x8F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  if (SLOBYTE(STACK[0x8F7]) < 0) {
    operator delete((void *)STACK[0x8E0]);
  }
  STACK[0x940] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x93F]) < 0) {
    operator delete((void *)STACK[0x928]);
  }
  STACK[0x988] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x9A7]) < 0) {
    operator delete((void *)STACK[0x990]);
  }
  if (SLOBYTE(STACK[0x987]) < 0) {
    operator delete((void *)STACK[0x970]);
  }
  STACK[0x9D0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x9EF]) < 0) {
    operator delete((void *)STACK[0x9D8]);
  }
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  STACK[0xA18] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA37]) < 0) {
    operator delete((void *)STACK[0xA20]);
  }
  if (SLOBYTE(STACK[0xA17]) < 0) {
    operator delete((void *)STACK[0xA00]);
  }
  STACK[0xA60] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA7F]) < 0) {
    operator delete((void *)STACK[0xA68]);
  }
  if (SLOBYTE(STACK[0xA5F]) < 0) {
    operator delete((void *)STACK[0xA48]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xAC0]);
  if (SLOBYTE(STACK[0xAA7]) < 0) {
    operator delete((void *)STACK[0xA90]);
  }
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB30]);
  if (SLOBYTE(STACK[0xB17]) < 0) {
    operator delete((void *)STACK[0xB00]);
  }
  if (SLOBYTE(STACK[0xB2F]) < 0) {
    operator delete((void *)STACK[0xB18]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xBA0]);
  if (SLOBYTE(STACK[0xB87]) < 0) {
    operator delete((void *)STACK[0xB70]);
  }
  if (SLOBYTE(STACK[0xB9F]) < 0) {
    operator delete((void *)STACK[0xB88]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC10]);
  if (SLOBYTE(STACK[0xBF7]) < 0) {
    operator delete((void *)STACK[0xBE0]);
  }
  if (SLOBYTE(STACK[0xC0F]) < 0) {
    operator delete((void *)STACK[0xBF8]);
  }
  STACK[0xC68] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xC87]) < 0) {
    operator delete((void *)STACK[0xC70]);
  }
  if (SLOBYTE(STACK[0xC67]) < 0) {
    operator delete((void *)STACK[0xC50]);
  }
  STACK[0xCB0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xCCF]) < 0) {
    operator delete((void *)STACK[0xCB8]);
  }
  if (SLOBYTE(STACK[0xCAF]) < 0) {
    operator delete((void *)STACK[0xC98]);
  }
  *(void *)(v74 - 248) = &unk_26C5C3AF0;
  if (*(char *)(v74 - 217) < 0) {
    operator delete(*(void **)(v74 - 240));
  }
  if (SLOBYTE(STACK[0xCF7]) < 0) {
    operator delete((void *)STACK[0xCE0]);
  }
  *(void *)(v74 - 176) = &unk_26C5C3AF0;
  if (*(char *)(v74 - 145) < 0) {
    operator delete(*(void **)(v74 - 168));
  }
  if (*(char *)(v74 - 177) < 0) {
    operator delete(*(void **)(v74 - 200));
  }
  *(void *)(v74 - 104) = &unk_26C5C3AF0;
  if (*(char *)(v74 - 73) < 0) {
    operator delete(*(void **)(v74 - 96));
  }
  if (*(char *)(v74 - 105) < 0) {
    operator delete(*(void **)(v74 - 128));
  }
  if (*(char *)(v74 - 33) < 0) {
    operator delete(*(void **)(v74 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_214E26FD8()
{
}

void sub_214E26FE0()
{
}

void sub_214E26FE8()
{
}

void sub_214E26FF0()
{
}

void sub_214E26FF8()
{
}

void sub_214E27000()
{
}

void sub_214E27008()
{
}

void sub_214E27010()
{
}

void sub_214E27018()
{
}

void sub_214E27020()
{
}

void sub_214E27028()
{
}

void sub_214E27030()
{
}

void sub_214E27038()
{
}

void sub_214E27040()
{
}

void sub_214E27048()
{
}

void sub_214E27050()
{
}

void sub_214E27058()
{
}

void sub_214E27060()
{
}

void sub_214E27068()
{
}

void sub_214E27070()
{
}

void sub_214E27078()
{
}

void sub_214E27080()
{
}

void sub_214E27088()
{
}

void sub_214E27090()
{
}

void sub_214E27098()
{
}

void sub_214E270A0()
{
}

void sub_214E270A8()
{
}

void sub_214E270B0()
{
}

void sub_214E270B8()
{
}

void sub_214E270C0()
{
}

void sub_214E270C8()
{
}

void sub_214E270D0()
{
}

void sub_214E270D8()
{
}

void sub_214E270E0()
{
}

void sub_214E270E8()
{
}

void sub_214E270F0()
{
}

void sub_214E270F8()
{
}

void sub_214E27100()
{
}

void sub_214E27108()
{
}

void sub_214E27110()
{
}

void sub_214E27118()
{
}

void sub_214E27120()
{
}

void sub_214E27128()
{
}

void sub_214E27130()
{
}

void sub_214E27138()
{
}

void sub_214E27140()
{
}

void sub_214E27148()
{
}

void sub_214E27150()
{
}

void sub_214E27158()
{
}

void sub_214E27160()
{
}

void sub_214E27168()
{
}

void sub_214E27170()
{
}

void sub_214E27178()
{
}

void sub_214E27180()
{
}

void sub_214E27188()
{
}

void sub_214E27190()
{
}

void sub_214E27198()
{
}

void sub_214E271A0()
{
}

void sub_214E271A8()
{
}

void sub_214E271B0()
{
}

void sub_214E271B8()
{
}

void sub_214E271C0()
{
}

void sub_214E271C8()
{
}

void sub_214E271D0()
{
}

void sub_214E271D8()
{
}

void sub_214E271E0()
{
}

void sub_214E271E8()
{
}

void sub_214E271F0()
{
}

void sub_214E271F8()
{
}

void sub_214E27200()
{
}

void sub_214E27208()
{
}

void sub_214E27210()
{
}

void sub_214E27218()
{
}

void sub_214E27220()
{
}

void sub_214E27228()
{
}

void sub_214E27230()
{
}

void sub_214E27238()
{
}

void sub_214E27240()
{
}

void sub_214E27248()
{
}

void sub_214E27250()
{
}

uint64_t mlcore::MediaColumn<int>::MediaColumn(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  char v6 = (std::string *)(a1 + 8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = 16;
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v9.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = 16;
  }
  *(void *)a1 = &unk_26C5C3858;
  *(unsigned char *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = a3;
  if (v5 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C47C8;
  return a1;
}

{
  int v5;
  std::string *v6;
  std::string __p;
  std::string v9;

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  char v6 = (std::string *)(a1 + 8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = a3;
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v9.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = a3;
  }
  *(void *)a1 = &unk_26C5C3858;
  *(unsigned char *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (v5 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C47C8;
  return a1;
}

void sub_214E27394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(v9);
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41 = MEMORY[0x270FA5388](a1);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v55 = v41;
  if (*(char *)(v42 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)v42, *(void *)(v42 + 8));
  }
  else {
    std::string v283 = *(std::string *)v42;
  }
  std::string v278 = &unk_26C5C3AF0;
  if (*(char *)(v54 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v54 + 8), *(void *)(v54 + 16));
  }
  else {
    std::string __s = *(std::string *)(v54 + 8);
  }
  int v280 = *(_DWORD *)(v54 + 32);
  std::string v278 = &unk_26C5C3878;
  uint64_t v281 = *(void *)(v54 + 36);
  int v282 = *(_DWORD *)(v54 + 44);
  std::string v274 = &unk_26C5C3AF0;
  if (*(char *)(v52 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)(v52 + 8), *(void *)(v52 + 16));
  }
  else {
    std::string v275 = *(std::string *)(v52 + 8);
  }
  int v276 = *(_DWORD *)(v52 + 32);
  std::string v274 = &unk_26C5C3858;
  uint64_t v277 = *(void *)(v52 + 36);
  int v270 = &unk_26C5C3AF0;
  if (*(char *)(v50 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(v50 + 8), *(void *)(v50 + 16));
  }
  else {
    std::string v271 = *(std::string *)(v50 + 8);
  }
  int v272 = *(_DWORD *)(v50 + 32);
  int v270 = &unk_26C5C3858;
  uint64_t v273 = *(void *)(v50 + 36);
  uint64_t v266 = &unk_26C5C3AF0;
  if (*(char *)(v48 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v48 + 8), *(void *)(v48 + 16));
  }
  else {
    std::string v267 = *(std::string *)(v48 + 8);
  }
  int v268 = *(_DWORD *)(v48 + 32);
  uint64_t v266 = &unk_26C5C3858;
  uint64_t v269 = *(void *)(v48 + 36);
  std::string v262 = &unk_26C5C3AF0;
  if (*(char *)(v46 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(v46 + 8), *(void *)(v46 + 16));
  }
  else {
    std::string v263 = *(std::string *)(v46 + 8);
  }
  int v264 = *(_DWORD *)(v46 + 32);
  std::string v262 = &unk_26C5C3858;
  uint64_t v265 = *(void *)(v46 + 36);
  std::string v257 = &unk_26C5C3AF0;
  if (*(char *)(v44 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(v44 + 8), *(void *)(v44 + 16));
  }
  else {
    std::string v258 = *(std::string *)(v44 + 8);
  }
  int v259 = *(_DWORD *)(v44 + 32);
  std::string v257 = &unk_26C5C3818;
  char v260 = *(unsigned char *)(v44 + 36);
  if (*(char *)(v44 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(v44 + 40), *(void *)(v44 + 48));
  }
  else {
    std::string v261 = *(std::string *)(v44 + 40);
  }
  uint64_t v56 = a9;
  std::string v252 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
    uint64_t v56 = a9;
  }
  else
  {
    std::string v253 = *(std::string *)(a9 + 8);
  }
  int v254 = *(_DWORD *)(v56 + 32);
  std::string v252 = &unk_26C5C3818;
  char v255 = *(unsigned char *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(a9 + 40), *(void *)(a9 + 48));
  }
  else {
    std::string v256 = *(std::string *)(a9 + 40);
  }
  uint64_t v57 = a10;
  std::string v247 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
    uint64_t v57 = a10;
  }
  else
  {
    std::string v248 = *(std::string *)(a10 + 8);
  }
  int v249 = *(_DWORD *)(v57 + 32);
  std::string v247 = &unk_26C5C3818;
  char v250 = *(unsigned char *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a10 + 40), *(void *)(a10 + 48));
  }
  else {
    std::string v251 = *(std::string *)(a10 + 40);
  }
  uint64_t v58 = a11;
  std::string v242 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
    uint64_t v58 = a11;
  }
  else
  {
    std::string v243 = *(std::string *)(a11 + 8);
  }
  int v244 = *(_DWORD *)(v58 + 32);
  std::string v242 = &unk_26C5C3818;
  char v245 = *(unsigned char *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a11 + 40), *(void *)(a11 + 48));
  }
  else {
    std::string v246 = *(std::string *)(a11 + 40);
  }
  std::string v238 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v239 = *(std::string *)(a12 + 8);
  }
  int v240 = *(_DWORD *)(a12 + 32);
  std::string v238 = &unk_26C5C3858;
  uint64_t v241 = *(void *)(a12 + 36);
  int v234 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v235 = *(std::string *)(a13 + 8);
  }
  int v236 = *(_DWORD *)(a13 + 32);
  int v234 = &unk_26C5C3858;
  uint64_t v237 = *(void *)(a13 + 36);
  uint64_t v230 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v231 = *(std::string *)(a14 + 8);
  }
  uint64_t v59 = a15;
  int v232 = *(_DWORD *)(a14 + 32);
  uint64_t v230 = &unk_26C5C3858;
  uint64_t v233 = *(void *)(a14 + 36);
  uint64_t v226 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
    uint64_t v59 = a15;
  }
  else
  {
    std::string v227 = *(std::string *)(a15 + 8);
  }
  int v228 = *(_DWORD *)(v59 + 32);
  uint64_t v226 = &unk_26C5C3858;
  uint64_t v106 = v59;
  uint64_t v229 = *(void *)(v59 + 36);
  int v221 = &unk_26C5C3AF0;
  uint64_t v60 = a16;
  if (*(char *)(a16 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
    uint64_t v60 = a16;
  }
  else
  {
    std::string v222 = *(std::string *)(a16 + 8);
  }
  int v223 = *(_DWORD *)(v60 + 32);
  int v221 = &unk_26C5C3878;
  uint64_t v224 = *(void *)(v60 + 36);
  uint64_t v105 = v60;
  int v225 = *(_DWORD *)(v60 + 44);
  int v217 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v218 = *(std::string *)(a17 + 8);
  }
  uint64_t v61 = a18;
  int v219 = *(_DWORD *)(a17 + 32);
  int v217 = &unk_26C5C3858;
  uint64_t v220 = *(void *)(a17 + 36);
  int v213 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
    uint64_t v61 = a18;
  }
  else
  {
    std::string v214 = *(std::string *)(a18 + 8);
  }
  int v215 = *(_DWORD *)(v61 + 32);
  int v213 = &unk_26C5C3858;
  uint64_t v104 = v61;
  uint64_t v216 = *(void *)(v61 + 36);
  std::string::value_type v209 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v210 = *(std::string *)(a19 + 8);
  }
  uint64_t v62 = a20;
  int v211 = *(_DWORD *)(a19 + 32);
  std::string::value_type v209 = &unk_26C5C3858;
  uint64_t v212 = *(void *)(a19 + 36);
  int v205 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
    uint64_t v62 = a20;
  }
  else
  {
    std::string v206 = *(std::string *)(a20 + 8);
  }
  int v207 = *(_DWORD *)(v62 + 32);
  int v205 = &unk_26C5C3858;
  uint64_t v103 = v62;
  uint64_t v208 = *(void *)(v62 + 36);
  int v201 = &unk_26C5C3AF0;
  uint64_t v63 = a21;
  if (*(char *)(a21 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
    uint64_t v63 = a21;
  }
  else
  {
    std::string v202 = *(std::string *)(a21 + 8);
  }
  int v203 = *(_DWORD *)(v63 + 32);
  int v201 = &unk_26C5C3858;
  uint64_t v102 = v63;
  uint64_t v204 = *(void *)(v63 + 36);
  int v197 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v198 = *(std::string *)(a22 + 8);
  }
  uint64_t v64 = a23;
  int v199 = *(_DWORD *)(a22 + 32);
  int v197 = &unk_26C5C3858;
  uint64_t v200 = *(void *)(a22 + 36);
  int v193 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
    uint64_t v64 = a23;
  }
  else
  {
    std::string v194 = *(std::string *)(a23 + 8);
  }
  int v195 = *(_DWORD *)(v64 + 32);
  int v193 = &unk_26C5C3858;
  uint64_t v65 = *(void *)(v64 + 36);
  uint64_t v66 = a24;
  uint64_t v196 = v65;
  char v189 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
    uint64_t v66 = a24;
  }
  else
  {
    std::string v190 = *(std::string *)(a24 + 8);
  }
  int v191 = *(_DWORD *)(v66 + 32);
  char v189 = &unk_26C5C3858;
  uint64_t v101 = v66;
  uint64_t v192 = *(void *)(v66 + 36);
  uint64_t v67 = a25;
  char v184 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
    uint64_t v67 = a25;
  }
  else
  {
    std::string v185 = *(std::string *)(a25 + 8);
  }
  int v186 = *(_DWORD *)(v67 + 32);
  char v184 = &unk_26C5C3818;
  char v187 = *(unsigned char *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a25 + 40), *(void *)(a25 + 48));
  }
  else {
    std::string v188 = *(std::string *)(a25 + 40);
  }
  uint64_t v68 = a26;
  char v179 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
    uint64_t v68 = a26;
  }
  else
  {
    std::string v180 = *(std::string *)(a26 + 8);
  }
  int v181 = *(_DWORD *)(v68 + 32);
  char v179 = &unk_26C5C3878;
  uint64_t v182 = *(void *)(v68 + 36);
  int v69 = *(_DWORD *)(v68 + 44);
  uint64_t v70 = a27;
  int v183 = v69;
  char v174 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
    uint64_t v70 = a27;
  }
  else
  {
    std::string v175 = *(std::string *)(a27 + 8);
  }
  int v176 = *(_DWORD *)(v70 + 32);
  char v174 = &unk_26C5C3878;
  uint64_t v177 = *(void *)(v70 + 36);
  uint64_t v100 = v70;
  int v178 = *(_DWORD *)(v70 + 44);
  char v169 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else {
    std::string v170 = *(std::string *)(a28 + 8);
  }
  int v171 = *(_DWORD *)(a28 + 32);
  char v169 = &unk_26C5C3818;
  char v172 = *(unsigned char *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a28 + 40), *(void *)(a28 + 48));
  }
  else {
    std::string v173 = *(std::string *)(a28 + 40);
  }
  uint64_t v71 = a29;
  uint64_t v164 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
    uint64_t v71 = a29;
  }
  else
  {
    std::string v165 = *(std::string *)(a29 + 8);
  }
  uint64_t v72 = *(void *)(v71 + 36);
  int v166 = *(_DWORD *)(v71 + 32);
  uint64_t v164 = &unk_26C5C3878;
  uint64_t v167 = v72;
  char v99 = (uint64_t *)(v71 + 36);
  int v168 = *(_DWORD *)(v71 + 44);
  char v157 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else {
    std::string v158 = *(std::string *)(a30 + 8);
  }
  int v159 = *(_DWORD *)(a30 + 32);
  char v157 = &unk_26C5C37F8;
  char v160 = *(unsigned char *)(a30 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v161, *(const void **)(a30 + 64), *(void *)(a30 + 48), 1);
  char v153 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
  }
  else {
    std::string v154 = *(std::string *)(a31 + 8);
  }
  int v155 = *(_DWORD *)(a31 + 32);
  char v153 = &unk_26C5C3858;
  uint64_t v156 = *(void *)(a31 + 36);
  char v149 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
  }
  else {
    std::string v150 = *(std::string *)(a32 + 8);
  }
  int v151 = *(_DWORD *)(a32 + 32);
  char v149 = &unk_26C5C3858;
  uint64_t v152 = *(void *)(a32 + 36);
  uint64_t v145 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v146 = *(std::string *)(a33 + 8);
  }
  uint64_t v73 = a34;
  int v147 = *(_DWORD *)(a33 + 32);
  uint64_t v145 = &unk_26C5C3858;
  uint64_t v148 = *(void *)(a33 + 36);
  char v141 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
    uint64_t v73 = a34;
  }
  else
  {
    std::string v142 = *(std::string *)(a34 + 8);
  }
  int v143 = *(_DWORD *)(v73 + 32);
  char v141 = &unk_26C5C3858;
  uint64_t v98 = v73;
  uint64_t v144 = *(void *)(v73 + 36);
  char v136 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else {
    std::string v137 = *(std::string *)(a35 + 8);
  }
  int v138 = *(_DWORD *)(a35 + 32);
  char v136 = &unk_26C5C3818;
  char v139 = *(unsigned char *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)(a35 + 40), *(void *)(a35 + 48));
  }
  else {
    std::string v140 = *(std::string *)(a35 + 40);
  }
  uint64_t v74 = a36;
  size_t v132 = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
    uint64_t v74 = a36;
  }
  else
  {
    std::string v133 = *(std::string *)(a36 + 8);
  }
  int v134 = *(_DWORD *)(v74 + 32);
  size_t v132 = &unk_26C5C3858;
  uint64_t v97 = v74;
  uint64_t v135 = *(void *)(v74 + 36);
  char v127 = &unk_26C5C3AF0;
  if (*(char *)(a37 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else {
    std::string v128 = *(std::string *)(a37 + 8);
  }
  uint64_t v75 = a38;
  int v129 = *(_DWORD *)(a37 + 32);
  char v127 = &unk_26C5C3878;
  uint64_t v130 = *(void *)(a37 + 36);
  int v131 = *(_DWORD *)(a37 + 44);
  char v122 = &unk_26C5C3AF0;
  if (*(char *)(a38 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(a38 + 8), *(void *)(a38 + 16));
    uint64_t v75 = a38;
  }
  else
  {
    std::string v123 = *(std::string *)(a38 + 8);
  }
  uint64_t v76 = a39;
  int v124 = *(_DWORD *)(v75 + 32);
  char v122 = &unk_26C5C3878;
  uint64_t v125 = *(void *)(v75 + 36);
  uint64_t v96 = v75;
  int v126 = *(_DWORD *)(v75 + 44);
  char v117 = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
    uint64_t v76 = a39;
  }
  else
  {
    std::string v118 = *(std::string *)(a39 + 8);
  }
  int v119 = *(_DWORD *)(v76 + 32);
  char v117 = &unk_26C5C3818;
  char v120 = *(unsigned char *)(v76 + 36);
  if (*(char *)(v76 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(v76 + 40), *(void *)(v76 + 48));
  }
  else {
    std::string v121 = *(std::string *)(v76 + 40);
  }
  uint64_t v77 = a40;
  char v112 = &unk_26C5C3AF0;
  if (*(char *)(a40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
    uint64_t v77 = a40;
  }
  else
  {
    std::string v113 = *(std::string *)(a40 + 8);
  }
  int v114 = *(_DWORD *)(v77 + 32);
  char v112 = &unk_26C5C3818;
  char v115 = *(unsigned char *)(v77 + 36);
  if (*(char *)(v77 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(v77 + 40), *(void *)(v77 + 48));
  }
  else {
    std::string v116 = *(std::string *)(v77 + 40);
  }
  uint64_t v78 = a41;
  char v107 = &unk_26C5C3AF0;
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
    uint64_t v78 = a41;
  }
  else
  {
    std::string v108 = *(std::string *)(a41 + 8);
  }
  int v109 = *(_DWORD *)(v78 + 32);
  char v107 = &unk_26C5C3818;
  char v110 = *(unsigned char *)(v78 + 36);
  char v95 = (long long *)(v78 + 40);
  if (*(char *)(v78 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(v78 + 40), *(void *)(v78 + 48));
  }
  else {
    std::string v111 = *(std::string *)(v78 + 40);
  }
  *(void *)uint64_t v55 = &unk_26C5BED18;
  char v79 = (std::string *)(v55 + 8);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v283.__r_.__value_.__l.__data_;
    *(void *)(v55 + 24) = *((void *)&v283.__r_.__value_.__l + 2);
  }
  *(void *)(v55 + 32) = 0;
  *(void *)(v55 + 40) = 0;
  *(void *)(v55 + 56) = 0;
  *(void *)(v55 + 48) = 0;
  *(void *)uint64_t v55 = &unk_26C5C3590;
  *(void *)(v55 + 64) = 0;
  *(void *)(v55 + 72) = 0;
  v453 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v454, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v454 = __s;
  }
  int v455 = v280;
  v453 = &unk_26C5C3878;
  uint64_t v456 = v281;
  int v457 = v282;
  std::string v449 = &unk_26C5C3AF0;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v450, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  }
  else {
    std::string v450 = v275;
  }
  int v451 = v276;
  std::string v449 = &unk_26C5C3858;
  uint64_t v452 = v277;
  std::string v445 = &unk_26C5C3AF0;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v446, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  }
  else {
    std::string v446 = v271;
  }
  int v447 = v272;
  std::string v445 = &unk_26C5C3858;
  uint64_t v448 = v273;
  std::string v441 = &unk_26C5C3AF0;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v442, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  }
  else {
    std::string v442 = v267;
  }
  int v443 = v268;
  std::string v441 = &unk_26C5C3858;
  uint64_t v444 = v269;
  long long v437 = &unk_26C5C3AF0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v438, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  }
  else {
    std::string v438 = v263;
  }
  int v439 = v264;
  long long v437 = &unk_26C5C3858;
  uint64_t v440 = v265;
  __n128 v432 = &unk_26C5C3AF0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v433, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  }
  else {
    std::string v433 = v258;
  }
  int v434 = v259;
  __n128 v432 = &unk_26C5C3818;
  char v435 = v260;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v436, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  }
  else {
    std::string v436 = v261;
  }
  long long v427 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v428, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  }
  else {
    std::string v428 = v253;
  }
  int v429 = v254;
  long long v427 = &unk_26C5C3818;
  char v430 = v255;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v431, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  }
  else {
    std::string v431 = v256;
  }
  char v422 = &unk_26C5C3AF0;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v423, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  }
  else {
    std::string v423 = v248;
  }
  int v424 = v249;
  char v422 = &unk_26C5C3818;
  char v425 = v250;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v426, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  }
  else {
    std::string v426 = v251;
  }
  int v417 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v418, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  }
  else {
    std::string v418 = v243;
  }
  int v419 = v244;
  int v417 = &unk_26C5C3818;
  char v420 = v245;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v421, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else {
    std::string v421 = v246;
  }
  int v413 = &unk_26C5C3AF0;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v414, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  }
  else {
    std::string v414 = v239;
  }
  int v415 = v240;
  int v413 = &unk_26C5C3858;
  uint64_t v416 = v241;
  int v409 = &unk_26C5C3AF0;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v410, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string v410 = v235;
  }
  int v411 = v236;
  int v409 = &unk_26C5C3858;
  uint64_t v412 = v237;
  int v405 = &unk_26C5C3AF0;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v406, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  }
  else {
    std::string v406 = v231;
  }
  int v407 = v232;
  int v405 = &unk_26C5C3858;
  uint64_t v408 = v233;
  __n128 v401 = &unk_26C5C3AF0;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v402, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  }
  else {
    std::string v402 = v227;
  }
  int v403 = v228;
  __n128 v401 = &unk_26C5C3858;
  uint64_t v404 = v229;
  std::string v396 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v397, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else {
    std::string v397 = v222;
  }
  int v398 = v223;
  std::string v396 = &unk_26C5C3878;
  uint64_t v399 = v224;
  int v400 = v225;
  uint64_t v392 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v393, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  }
  else {
    std::string v393 = v218;
  }
  int v394 = v219;
  uint64_t v392 = &unk_26C5C3858;
  uint64_t v395 = v220;
  std::string v388 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v389, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  }
  else {
    std::string v389 = v214;
  }
  int v390 = v215;
  std::string v388 = &unk_26C5C3858;
  uint64_t v391 = v216;
  std::string v384 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v385, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else {
    std::string v385 = v210;
  }
  int v386 = v211;
  std::string v384 = &unk_26C5C3858;
  uint64_t v387 = v212;
  uint64_t v380 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v381, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  }
  else {
    std::string v381 = v206;
  }
  int v382 = v207;
  uint64_t v380 = &unk_26C5C3858;
  uint64_t v383 = v208;
  std::string v376 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v377, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  }
  else {
    std::string v377 = v202;
  }
  int v378 = v203;
  std::string v376 = &unk_26C5C3858;
  uint64_t v379 = v204;
  std::string v372 = &unk_26C5C3AF0;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v373, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  }
  else {
    std::string v373 = v198;
  }
  int v374 = v199;
  std::string v372 = &unk_26C5C3858;
  uint64_t v375 = v200;
  int v368 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v369, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  }
  else {
    std::string v369 = v194;
  }
  int v370 = v195;
  int v368 = &unk_26C5C3858;
  uint64_t v371 = v196;
  int v364 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v365, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v365 = v190;
  }
  int v366 = v191;
  int v364 = &unk_26C5C3858;
  uint64_t v367 = v192;
  long long v359 = &unk_26C5C3AF0;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v360, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else {
    std::string v360 = v185;
  }
  int v361 = v186;
  long long v359 = &unk_26C5C3818;
  char v362 = v187;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v363, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  }
  else {
    std::string v363 = v188;
  }
  uint64_t v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v355, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  }
  else {
    std::string v355 = v180;
  }
  int v356 = v181;
  uint64_t v354 = &unk_26C5C3878;
  uint64_t v357 = v182;
  int v358 = v183;
  uint64_t v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v350, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else {
    std::string v350 = v175;
  }
  int v351 = v176;
  uint64_t v349 = &unk_26C5C3878;
  uint64_t v352 = v177;
  int v353 = v178;
  uint64_t v344 = &unk_26C5C3AF0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v345, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  }
  else {
    std::string v345 = v170;
  }
  int v346 = v171;
  uint64_t v344 = &unk_26C5C3818;
  char v347 = v172;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v348, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v348 = v173;
  }
  uint64_t v339 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v340, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    std::string v340 = v165;
  }
  int v341 = v166;
  uint64_t v339 = &unk_26C5C3878;
  uint64_t v342 = v167;
  int v343 = v168;
  int v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v335, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  }
  else {
    std::string v335 = v158;
  }
  int v336 = v159;
  int v334 = &unk_26C5C37F8;
  char v337 = v160;
  mediaplatform::Data::Data((mediaplatform::Data *)&v338, __src, __n, 1);
  int v330 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v331, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else {
    std::string v331 = v154;
  }
  int v332 = v155;
  int v330 = &unk_26C5C3858;
  uint64_t v333 = v156;
  int v326 = &unk_26C5C3AF0;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v327, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  }
  else {
    std::string v327 = v150;
  }
  int v328 = v151;
  int v326 = &unk_26C5C3858;
  uint64_t v329 = v152;
  int v322 = &unk_26C5C3AF0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v323, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  }
  else {
    std::string v323 = v146;
  }
  int v324 = v147;
  int v322 = &unk_26C5C3858;
  uint64_t v325 = v148;
  uint64_t v318 = &unk_26C5C3AF0;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v319, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string v319 = v142;
  }
  int v320 = v143;
  uint64_t v318 = &unk_26C5C3858;
  uint64_t v321 = v144;
  int v313 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v314, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  }
  else {
    std::string v314 = v137;
  }
  int v315 = v138;
  int v313 = &unk_26C5C3818;
  char v316 = v139;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v317, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  }
  else {
    std::string v317 = v140;
  }
  int v309 = &unk_26C5C3AF0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v310, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  }
  else {
    std::string v310 = v133;
  }
  int v311 = v134;
  int v309 = &unk_26C5C3858;
  uint64_t v312 = v135;
  std::string v304 = &unk_26C5C3AF0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v305, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else {
    std::string v305 = v128;
  }
  int v306 = v129;
  std::string v304 = &unk_26C5C3878;
  uint64_t v307 = v130;
  int v308 = v131;
  uint64_t v299 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v123;
  }
  int v301 = v124;
  uint64_t v299 = &unk_26C5C3878;
  uint64_t v302 = v125;
  int v303 = v126;
  int v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v295, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else {
    std::string v295 = v118;
  }
  int v296 = v119;
  int v294 = &unk_26C5C3818;
  char v297 = v120;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v298, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else {
    std::string v298 = v121;
  }
  std::string v289 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v290, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v290 = v113;
  }
  int v291 = v114;
  std::string v289 = &unk_26C5C3818;
  char v292 = v115;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v293, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else {
    std::string v293 = v116;
  }
  uint64_t v284 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v285, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v285 = v108;
  }
  int v286 = v109;
  uint64_t v284 = &unk_26C5C3818;
  char v287 = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v288, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v288 = v111;
  }
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v55 + 80, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v445, (uint64_t)&v441, (uint64_t)&v437, (uint64_t)&v432, (uint64_t)&v427, (uint64_t)&v422, (uint64_t)&v417, (uint64_t)&v413, (uint64_t)&v409, (uint64_t)&v405, (uint64_t)&v401, (uint64_t)&v396, (uint64_t)&v392, (uint64_t)&v388, (uint64_t)&v384, (uint64_t)&v380,
    (uint64_t)&v376,
    (uint64_t)&v372,
    (uint64_t)&v368,
    (uint64_t)&v364,
    (uint64_t)&v359,
    (uint64_t)&v354,
    (uint64_t)&v349,
    (uint64_t)&v344,
    (uint64_t)&v339,
    (uint64_t)&v334,
    (uint64_t)&v330,
    (uint64_t)&v326,
    (uint64_t)&v322,
    (uint64_t)&v318,
    (uint64_t)&v313,
    (uint64_t)&v309,
    (uint64_t)&v304,
    (uint64_t)&v299,
    (uint64_t)&v294,
    (uint64_t)&v289,
    (uint64_t)&v284);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v284);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v289);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v294);
  uint64_t v299 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v304 = &unk_26C5C3AF0;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v305.__r_.__value_.__l.__data_);
  }
  int v309 = &unk_26C5C3AF0;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v313);
  uint64_t v318 = &unk_26C5C3AF0;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v319.__r_.__value_.__l.__data_);
  }
  int v322 = &unk_26C5C3AF0;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v323.__r_.__value_.__l.__data_);
  }
  int v326 = &unk_26C5C3AF0;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v327.__r_.__value_.__l.__data_);
  }
  int v330 = &unk_26C5C3AF0;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v331.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v334);
  uint64_t v339 = &unk_26C5C3AF0;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v340.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v344);
  uint64_t v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v350.__r_.__value_.__l.__data_);
  }
  uint64_t v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v359);
  int v364 = &unk_26C5C3AF0;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v365.__r_.__value_.__l.__data_);
  }
  int v368 = &unk_26C5C3AF0;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v369.__r_.__value_.__l.__data_);
  }
  std::string v372 = &unk_26C5C3AF0;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v373.__r_.__value_.__l.__data_);
  }
  std::string v376 = &unk_26C5C3AF0;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v377.__r_.__value_.__l.__data_);
  }
  uint64_t v380 = &unk_26C5C3AF0;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v381.__r_.__value_.__l.__data_);
  }
  std::string v384 = &unk_26C5C3AF0;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v385.__r_.__value_.__l.__data_);
  }
  std::string v388 = &unk_26C5C3AF0;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v389.__r_.__value_.__l.__data_);
  }
  uint64_t v392 = &unk_26C5C3AF0;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393.__r_.__value_.__l.__data_);
  }
  std::string v396 = &unk_26C5C3AF0;
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v397.__r_.__value_.__l.__data_);
  }
  __n128 v401 = &unk_26C5C3AF0;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  int v405 = &unk_26C5C3AF0;
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  int v409 = &unk_26C5C3AF0;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v410.__r_.__value_.__l.__data_);
  }
  int v413 = &unk_26C5C3AF0;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v414.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v417);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v422);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v427);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v432);
  long long v437 = &unk_26C5C3AF0;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v438.__r_.__value_.__l.__data_);
  }
  std::string v441 = &unk_26C5C3AF0;
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v442.__r_.__value_.__l.__data_);
  }
  std::string v445 = &unk_26C5C3AF0;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v446.__r_.__value_.__l.__data_);
  }
  std::string v449 = &unk_26C5C3AF0;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v450.__r_.__value_.__l.__data_);
  }
  v453 = &unk_26C5C3AF0;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v454.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v107);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v117);
  char v122 = &unk_26C5C3AF0;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  char v127 = &unk_26C5C3AF0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  size_t v132 = &unk_26C5C3AF0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v136);
  char v141 = &unk_26C5C3AF0;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  uint64_t v145 = &unk_26C5C3AF0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  char v149 = &unk_26C5C3AF0;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  char v153 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v157);
  uint64_t v164 = &unk_26C5C3AF0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  char v174 = &unk_26C5C3AF0;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v175.__r_.__value_.__l.__data_);
  }
  char v179 = &unk_26C5C3AF0;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v184);
  char v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  int v193 = &unk_26C5C3AF0;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  int v197 = &unk_26C5C3AF0;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v198.__r_.__value_.__l.__data_);
  }
  int v201 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  int v205 = &unk_26C5C3AF0;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v206.__r_.__value_.__l.__data_);
  }
  std::string::value_type v209 = &unk_26C5C3AF0;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v210.__r_.__value_.__l.__data_);
  }
  int v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  int v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  int v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  uint64_t v226 = &unk_26C5C3AF0;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v227.__r_.__value_.__l.__data_);
  }
  uint64_t v230 = &unk_26C5C3AF0;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  int v234 = &unk_26C5C3AF0;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  std::string v238 = &unk_26C5C3AF0;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v242);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v247);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v252);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v257);
  std::string v262 = &unk_26C5C3AF0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v263.__r_.__value_.__l.__data_);
  }
  uint64_t v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v267.__r_.__value_.__l.__data_);
  }
  int v270 = &unk_26C5C3AF0;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v271.__r_.__value_.__l.__data_);
  }
  std::string v274 = &unk_26C5C3AF0;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v275.__r_.__value_.__l.__data_);
  }
  std::string v278 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v283.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v55 = &unk_26C5C40C0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 2144, v54);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2192, v52);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2240, v50);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2288, v48);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2336, v46);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 2384, v44);
  std::__tuple_leaf<6ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 2448, a9);
  std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 2512, a10);
  std::__tuple_leaf<8ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 2576, a11);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2640, a12);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2688, a13);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2736, a14);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2784, v106);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 2832, v105);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2880, a17);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2928, v104);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 2976, a19);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3024, v103);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3072, v102);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3120, a22);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3168, a23);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3216, v101);
  std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 3264, a25);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 3328, a26);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 3376, v100);
  *(void *)(v55 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v55 + 3432), *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else
  {
    long long v80 = *(_OWORD *)(a28 + 8);
    *(void *)(v55 + 3448) = *(void *)(a28 + 24);
    *(_OWORD *)(v55 + 3432) = v80;
  }
  *(_DWORD *)(v55 + 3456) = *(_DWORD *)(a28 + 32);
  *(void *)(v55 + 3424) = &unk_26C5C3818;
  *(unsigned char *)(v55 + 3460) = *(unsigned char *)(a28 + 36);
  char v81 = (std::string *)(v55 + 3464);
  if (*(char *)(a28 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(a28 + 40), *(void *)(a28 + 48));
  }
  else
  {
    long long v82 = *(_OWORD *)(a28 + 40);
    *(void *)(v55 + 3480) = *(void *)(a28 + 56);
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
  }
  *(void *)(v55 + 3424) = &unk_26C5C4788;
  *(void *)(v55 + 3488) = &unk_26C5C3AF0;
  uint64_t v83 = a29;
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v55 + 3496), *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
    uint64_t v83 = a29;
  }
  else
  {
    long long v84 = *(_OWORD *)(a29 + 8);
    *(void *)(v55 + 3512) = *(void *)(a29 + 24);
    *(_OWORD *)(v55 + 3496) = v84;
  }
  *(_DWORD *)(v55 + 3520) = *(_DWORD *)(v83 + 32);
  *(void *)(v55 + 3488) = &unk_26C5C3878;
  uint64_t v85 = *v99;
  *(_DWORD *)(v55 + 3532) = *((_DWORD *)v99 + 2);
  *(void *)(v55 + 3524) = v85;
  *(void *)(v55 + 3488) = &unk_26C5C47E8;
  *(void *)(v55 + 3536) = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v55 + 3544), *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else
  {
    long long v86 = *(_OWORD *)(a30 + 8);
    *(void *)(v55 + 3560) = *(void *)(a30 + 24);
    *(_OWORD *)(v55 + 3544) = v86;
  }
  *(_DWORD *)(v55 + 3568) = *(_DWORD *)(a30 + 32);
  *(void *)(v55 + 3536) = &unk_26C5C37F8;
  *(unsigned char *)(v55 + 3572) = *(unsigned char *)(a30 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(v55 + 3576), *(const void **)(a30 + 64), *(void *)(a30 + 48), 1);
  *(void *)(v55 + 3536) = &unk_26C5C4768;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3616, a31);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3664, a32);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3712, a33);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3760, v98);
  *(void *)(v55 + 3808) = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v55 + 3816), *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else
  {
    long long v87 = *(_OWORD *)(a35 + 8);
    *(void *)(v55 + 3832) = *(void *)(a35 + 24);
    *(_OWORD *)(v55 + 3816) = v87;
  }
  *(_DWORD *)(v55 + 3840) = *(_DWORD *)(a35 + 32);
  *(void *)(v55 + 3808) = &unk_26C5C3818;
  *(unsigned char *)(v55 + 3844) = *(unsigned char *)(a35 + 36);
  char v88 = (std::string *)(v55 + 3848);
  if (*(char *)(a35 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)(a35 + 40), *(void *)(a35 + 48));
  }
  else
  {
    long long v89 = *(_OWORD *)(a35 + 40);
    *(void *)(v55 + 3864) = *(void *)(a35 + 56);
    *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
  }
  *(void *)(v55 + 3808) = &unk_26C5C4788;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v55 + 3872, v97);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 3920, a37);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v55 + 3968, v96);
  std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 4016, a39);
  std::__tuple_leaf<37ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v55 + 4080, a40);
  *(void *)(v55 + 4144) = &unk_26C5C3AF0;
  uint64_t v90 = a41;
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v55 + 4152), *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
    uint64_t v90 = a41;
  }
  else
  {
    long long v91 = *(_OWORD *)(a41 + 8);
    *(void *)(v55 + 4168) = *(void *)(a41 + 24);
    *(_OWORD *)(v55 + 4152) = v91;
  }
  *(_DWORD *)(v55 + 4176) = *(_DWORD *)(v90 + 32);
  *(void *)(v55 + 4144) = &unk_26C5C3818;
  *(unsigned char *)(v55 + 4180) = *(unsigned char *)(v90 + 36);
  char v92 = (std::string *)(v55 + 4184);
  if (*(char *)(v90 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v92, *(const std::string::value_type **)(v90 + 40), *(void *)(v90 + 48));
  }
  else
  {
    long long v93 = *v95;
    *(void *)(v55 + 4200) = *((void *)v95 + 2);
    *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
  }
  *(void *)(v55 + 4144) = &unk_26C5C4788;
  return v55;
}

void sub_214E2B358(unint64_t a1)
{
  STACK[0x4B0] = a1;
  *(void *)(v1 + 4144) = v2;
  if (*v7 < 0) {
    operator delete(*v4);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v5);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v3);
  *(void *)(v1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3999) < 0) {
    operator delete(*(void **)(v1 + 3976));
  }
  *(void *)(v1 + 3920) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3951) < 0) {
    operator delete(*(void **)(v1 + 3928));
  }
  *(void *)(v1 + 3872) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3903) < 0) {
    operator delete(*(void **)(v1 + 3880));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v6);
  *(void *)(v1 + 3760) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3791) < 0) {
    operator delete(*(void **)(v1 + 3768));
  }
  *(void *)(v1 + 3712) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3743) < 0) {
    operator delete(*(void **)(v1 + 3720));
  }
  *(void *)(v1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3695) < 0) {
    operator delete(*(void **)(v1 + 3672));
  }
  *(void *)(v1 + 3616) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3647) < 0) {
    operator delete(*(void **)(v1 + 3624));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(STACK[0x4B8]);
  *(void *)(v1 + 3488) = STACK[0x3E8];
  if (*(char *)(v1 + 3519) < 0) {
    operator delete(*(void **)STACK[0x3D8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x3F0]);
  *(void *)(v1 + 3376) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3407) < 0) {
    operator delete(*(void **)(v1 + 3384));
  }
  *(void *)(v1 + 3328) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3359) < 0) {
    operator delete(*(void **)(v1 + 3336));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x3F8]);
  *(void *)(v1 + 3216) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3247) < 0) {
    operator delete(*(void **)(v1 + 3224));
  }
  *(void *)(v1 + 3168) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3199) < 0) {
    operator delete(*(void **)(v1 + 3176));
  }
  *(void *)(v1 + 3120) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3151) < 0) {
    operator delete(*(void **)(v1 + 3128));
  }
  *(void *)(v1 + 3072) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3103) < 0) {
    operator delete(*(void **)(v1 + 3080));
  }
  *(void *)(v1 + 3024) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3055) < 0) {
    operator delete(*(void **)(v1 + 3032));
  }
  *(void *)(v1 + 2976) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 3007) < 0) {
    operator delete(*(void **)(v1 + 2984));
  }
  *(void *)(v1 + 2928) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2959) < 0) {
    operator delete(*(void **)(v1 + 2936));
  }
  *(void *)(v1 + 2880) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2911) < 0) {
    operator delete(*(void **)(v1 + 2888));
  }
  *(void *)(v1 + 2832) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2863) < 0) {
    operator delete(*(void **)(v1 + 2840));
  }
  *(void *)(v1 + 2784) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2815) < 0) {
    operator delete(*(void **)(v1 + 2792));
  }
  *(void *)(v1 + 2736) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2767) < 0) {
    operator delete(*(void **)(v1 + 2744));
  }
  *(void *)(v1 + 2688) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2719) < 0) {
    operator delete(*(void **)(v1 + 2696));
  }
  *(void *)(v1 + 2640) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2671) < 0) {
    operator delete(*(void **)(v1 + 2648));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x4D0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x4D8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x458]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x460]);
  *(void *)(v1 + 2336) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2367) < 0) {
    operator delete(*(void **)(v1 + 2344));
  }
  *(void *)(v1 + 2288) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2319) < 0) {
    operator delete(*(void **)(v1 + 2296));
  }
  *(void *)(v1 + 2240) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2271) < 0) {
    operator delete(*(void **)(v1 + 2248));
  }
  *(void *)(v1 + 2192) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2223) < 0) {
    operator delete(*(void **)(v1 + 2200));
  }
  *(void *)(v1 + 2144) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2175) < 0) {
    operator delete(*(void **)(v1 + 2152));
  }
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable(v1);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x4B0]);
}

void sub_214E2C5C0(unint64_t a1)
{
  STACK[0x4B0] = a1;
  STACK[0xF60] = v1;
  if (SLOBYTE(STACK[0xF7F]) < 0) {
    operator delete((void *)STACK[0xF68]);
  }
  JUMPOUT(0x214E2BFF8);
}

void sub_214E2C5DC(unint64_t a1)
{
  STACK[0x4B0] = a1;
  STACK[0x730] = v1;
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  JUMPOUT(0x214E2C380);
}

uint64_t mlcore::MediaTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v50 = v36;
  if (*(char *)(v37 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
  }
  else {
    std::string v256 = *(std::string *)v37;
  }
  std::string v251 = &unk_26C5C3AF0;
  if (*(char *)(v49 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v49 + 8), *(void *)(v49 + 16));
  }
  else {
    std::string __s = *(std::string *)(v49 + 8);
  }
  int v253 = *(_DWORD *)(v49 + 32);
  std::string v251 = &unk_26C5C3878;
  uint64_t v254 = *(void *)(v49 + 36);
  int v255 = *(_DWORD *)(v49 + 44);
  std::string v246 = &unk_26C5C3AF0;
  if (*(char *)(v47 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(v47 + 8), *(void *)(v47 + 16));
  }
  else {
    std::string v247 = *(std::string *)(v47 + 8);
  }
  int v248 = *(_DWORD *)(v47 + 32);
  std::string v246 = &unk_26C5C3818;
  char v249 = *(unsigned char *)(v47 + 36);
  if (*(char *)(v47 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(v47 + 40), *(void *)(v47 + 48));
  }
  else {
    std::string v250 = *(std::string *)(v47 + 40);
  }
  uint64_t v241 = &unk_26C5C3AF0;
  if (*(char *)(v45 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(v45 + 8), *(void *)(v45 + 16));
  }
  else {
    std::string v242 = *(std::string *)(v45 + 8);
  }
  int v243 = *(_DWORD *)(v45 + 32);
  uint64_t v241 = &unk_26C5C3818;
  char v244 = *(unsigned char *)(v45 + 36);
  if (*(char *)(v45 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v45 + 40), *(void *)(v45 + 48));
  }
  else {
    std::string v245 = *(std::string *)(v45 + 40);
  }
  uint64_t v237 = &unk_26C5C3AF0;
  if (*(char *)(v43 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(v43 + 8), *(void *)(v43 + 16));
  }
  else {
    std::string v238 = *(std::string *)(v43 + 8);
  }
  int v239 = *(_DWORD *)(v43 + 32);
  uint64_t v237 = &unk_26C5C3858;
  uint64_t v240 = *(void *)(v43 + 36);
  uint64_t v233 = &unk_26C5C3AF0;
  if (*(char *)(v41 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(v41 + 8), *(void *)(v41 + 16));
  }
  else {
    std::string v234 = *(std::string *)(v41 + 8);
  }
  int v235 = *(_DWORD *)(v41 + 32);
  uint64_t v233 = &unk_26C5C3858;
  uint64_t v236 = *(void *)(v41 + 36);
  int v228 = &unk_26C5C3AF0;
  if (*(char *)(v39 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(v39 + 8), *(void *)(v39 + 16));
  }
  else {
    std::string v229 = *(std::string *)(v39 + 8);
  }
  uint64_t v51 = *(void *)(v39 + 36);
  int v230 = *(_DWORD *)(v39 + 32);
  uint64_t v52 = a9;
  int v228 = &unk_26C5C3838;
  uint64_t v231 = v51;
  int v232 = *(_DWORD *)(v39 + 44);
  uint64_t v224 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
    uint64_t v52 = a9;
  }
  else
  {
    std::string v225 = *(std::string *)(a9 + 8);
  }
  uint64_t v53 = a10;
  int v226 = *(_DWORD *)(v52 + 32);
  uint64_t v224 = &unk_26C5C3858;
  uint64_t v97 = v52;
  uint64_t v227 = *(void *)(v52 + 36);
  int v219 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
    uint64_t v53 = a10;
  }
  else
  {
    std::string v220 = *(std::string *)(a10 + 8);
  }
  int v221 = *(_DWORD *)(v53 + 32);
  int v219 = &unk_26C5C3818;
  char v222 = *(unsigned char *)(v53 + 36);
  if (*(char *)(v53 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(v53 + 40), *(void *)(v53 + 48));
  }
  else {
    std::string v223 = *(std::string *)(v53 + 40);
  }
  std::string v214 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v215 = *(std::string *)(a11 + 8);
  }
  uint64_t v54 = a12;
  int v216 = *(_DWORD *)(a11 + 32);
  std::string v214 = &unk_26C5C3878;
  uint64_t v217 = *(void *)(a11 + 36);
  int v218 = *(_DWORD *)(a11 + 44);
  int v207 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
    uint64_t v54 = a12;
  }
  else
  {
    std::string v208 = *(std::string *)(a12 + 8);
  }
  int v209 = *(_DWORD *)(v54 + 32);
  int v207 = &unk_26C5C37F8;
  char v210 = *(unsigned char *)(v54 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v211, *(const void **)(v54 + 64), *(void *)(v54 + 48), 1);
  int v203 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v204 = *(std::string *)(a13 + 8);
  }
  int v205 = *(_DWORD *)(a13 + 32);
  int v203 = &unk_26C5C3858;
  uint64_t v206 = *(void *)(a13 + 36);
  std::string v198 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v199 = *(std::string *)(a14 + 8);
  }
  uint64_t v55 = a15;
  int v200 = *(_DWORD *)(a14 + 32);
  std::string v198 = &unk_26C5C3878;
  uint64_t v201 = *(void *)(a14 + 36);
  int v202 = *(_DWORD *)(a14 + 44);
  std::string v194 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
    uint64_t v55 = a15;
  }
  else
  {
    std::string v195 = *(std::string *)(a15 + 8);
  }
  int v196 = *(_DWORD *)(v55 + 32);
  std::string v194 = &unk_26C5C3858;
  uint64_t v96 = v55;
  uint64_t v197 = *(void *)(v55 + 36);
  std::string v190 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v191 = *(std::string *)(a16 + 8);
  }
  uint64_t v56 = a17;
  int v192 = *(_DWORD *)(a16 + 32);
  std::string v190 = &unk_26C5C3858;
  uint64_t v193 = *(void *)(a16 + 36);
  int v186 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
    uint64_t v56 = a17;
  }
  else
  {
    std::string v187 = *(std::string *)(a17 + 8);
  }
  int v188 = *(_DWORD *)(v56 + 32);
  int v186 = &unk_26C5C3858;
  uint64_t v95 = v56;
  uint64_t v189 = *(void *)(v56 + 36);
  uint64_t v182 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v183 = *(std::string *)(a18 + 8);
  }
  uint64_t v57 = a19;
  int v184 = *(_DWORD *)(a18 + 32);
  uint64_t v182 = &unk_26C5C3858;
  uint64_t v185 = *(void *)(a18 + 36);
  int v178 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
    uint64_t v57 = a19;
  }
  else
  {
    std::string v179 = *(std::string *)(a19 + 8);
  }
  int v180 = *(_DWORD *)(v57 + 32);
  int v178 = &unk_26C5C3858;
  uint64_t v58 = *(void *)(v57 + 36);
  uint64_t v59 = a20;
  uint64_t v181 = v58;
  std::string v173 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
    uint64_t v59 = a20;
  }
  else
  {
    std::string v174 = *(std::string *)(a20 + 8);
  }
  int v175 = *(_DWORD *)(v59 + 32);
  std::string v173 = &unk_26C5C3878;
  uint64_t v176 = *(void *)(v59 + 36);
  uint64_t v94 = v59;
  int v177 = *(_DWORD *)(v59 + 44);
  int v168 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v169 = *(std::string *)(a21 + 8);
  }
  int v170 = *(_DWORD *)(a21 + 32);
  int v168 = &unk_26C5C3818;
  char v171 = *(unsigned char *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a21 + 40), *(void *)(a21 + 48));
  }
  else {
    std::string v172 = *(std::string *)(a21 + 40);
  }
  char v163 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v164 = *(std::string *)(a22 + 8);
  }
  int v165 = *(_DWORD *)(a22 + 32);
  char v163 = &unk_26C5C3818;
  char v166 = *(unsigned char *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a22 + 40), *(void *)(a22 + 48));
  }
  else {
    std::string v167 = *(std::string *)(a22 + 40);
  }
  std::string v158 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
  }
  else {
    std::string v159 = *(std::string *)(a23 + 8);
  }
  int v160 = *(_DWORD *)(a23 + 32);
  std::string v158 = &unk_26C5C3818;
  char v161 = *(unsigned char *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a23 + 40), *(void *)(a23 + 48));
  }
  else {
    std::string v162 = *(std::string *)(a23 + 40);
  }
  char v153 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else {
    std::string v154 = *(std::string *)(a24 + 8);
  }
  int v155 = *(_DWORD *)(a24 + 32);
  char v153 = &unk_26C5C3818;
  char v156 = *(unsigned char *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a24 + 40), *(void *)(a24 + 48));
  }
  else {
    std::string v157 = *(std::string *)(a24 + 40);
  }
  uint64_t v148 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
  }
  else {
    std::string v149 = *(std::string *)(a25 + 8);
  }
  int v150 = *(_DWORD *)(a25 + 32);
  uint64_t v148 = &unk_26C5C3818;
  char v151 = *(unsigned char *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a25 + 40), *(void *)(a25 + 48));
  }
  else {
    std::string v152 = *(std::string *)(a25 + 40);
  }
  uint64_t v60 = a26;
  int v143 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
    uint64_t v60 = a26;
  }
  else
  {
    std::string v144 = *(std::string *)(a26 + 8);
  }
  int v145 = *(_DWORD *)(v60 + 32);
  int v143 = &unk_26C5C3818;
  char v146 = *(unsigned char *)(v60 + 36);
  long long v91 = (long long *)(v60 + 40);
  if (*(char *)(v60 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(v60 + 40), *(void *)(v60 + 48));
  }
  else {
    std::string v147 = *(std::string *)(v60 + 40);
  }
  int v138 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else {
    std::string v139 = *(std::string *)(a27 + 8);
  }
  int v140 = *(_DWORD *)(a27 + 32);
  int v138 = &unk_26C5C3878;
  uint64_t v141 = *(void *)(a27 + 36);
  int v142 = *(_DWORD *)(a27 + 44);
  std::string v133 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else {
    std::string v134 = *(std::string *)(a28 + 8);
  }
  uint64_t v61 = a29;
  int v135 = *(_DWORD *)(a28 + 32);
  std::string v133 = &unk_26C5C3878;
  uint64_t v136 = *(void *)(a28 + 36);
  int v137 = *(_DWORD *)(a28 + 44);
  int v129 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
    uint64_t v61 = a29;
  }
  else
  {
    std::string v130 = *(std::string *)(a29 + 8);
  }
  int v131 = *(_DWORD *)(v61 + 32);
  int v129 = &unk_26C5C3858;
  uint64_t v93 = v61;
  uint64_t v132 = *(void *)(v61 + 36);
  uint64_t v62 = a30;
  int v124 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
    uint64_t v62 = a30;
  }
  else
  {
    std::string v125 = *(std::string *)(a30 + 8);
  }
  int v126 = *(_DWORD *)(v62 + 32);
  int v124 = &unk_26C5C3818;
  char v127 = *(unsigned char *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a30 + 40), *(void *)(a30 + 48));
  }
  else {
    std::string v128 = *(std::string *)(a30 + 40);
  }
  uint64_t v63 = a31;
  int v119 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
    uint64_t v63 = a31;
  }
  else
  {
    std::string v120 = *(std::string *)(a31 + 8);
  }
  int v121 = *(_DWORD *)(v63 + 32);
  int v119 = &unk_26C5C3818;
  char v122 = *(unsigned char *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(a31 + 40), *(void *)(a31 + 48));
  }
  else {
    std::string v123 = *(std::string *)(a31 + 40);
  }
  uint64_t v64 = a32;
  int v114 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
    uint64_t v64 = a32;
  }
  else
  {
    std::string v115 = *(std::string *)(a32 + 8);
  }
  int v116 = *(_DWORD *)(v64 + 32);
  int v114 = &unk_26C5C3818;
  char v117 = *(unsigned char *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(a32 + 40), *(void *)(a32 + 48));
  }
  else {
    std::string v118 = *(std::string *)(a32 + 40);
  }
  uint64_t v65 = a33;
  int v109 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
    uint64_t v65 = a33;
  }
  else
  {
    std::string v110 = *(std::string *)(a33 + 8);
  }
  int v111 = *(_DWORD *)(v65 + 32);
  int v109 = &unk_26C5C3818;
  char v112 = *(unsigned char *)(v65 + 36);
  if (*(char *)(v65 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v65 + 40), *(void *)(v65 + 48));
  }
  else {
    std::string v113 = *(std::string *)(v65 + 40);
  }
  uint64_t v66 = a34;
  uint64_t v105 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
    uint64_t v66 = a34;
  }
  else
  {
    std::string v106 = *(std::string *)(a34 + 8);
  }
  uint64_t v67 = a35;
  int v107 = *(_DWORD *)(v66 + 32);
  uint64_t v105 = &unk_26C5C3858;
  uint64_t v108 = *(void *)(v66 + 36);
  uint64_t v101 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
    uint64_t v67 = a35;
  }
  else
  {
    std::string v102 = *(std::string *)(a35 + 8);
  }
  int v103 = *(_DWORD *)(v67 + 32);
  uint64_t v101 = &unk_26C5C3858;
  uint64_t v92 = v67;
  uint64_t v104 = *(void *)(v67 + 36);
  if (*(char *)(a36 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
  }
  else {
    std::string v98 = *(std::string *)(a36 + 8);
  }
  int v99 = *(_DWORD *)(a36 + 32);
  uint64_t v100 = *(void *)(a36 + 36);
  *(void *)uint64_t v50 = &unk_26C5BED18;
  uint64_t v68 = (std::string *)(v50 + 8);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v68, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
    *(void *)(v50 + 24) = *((void *)&v256.__r_.__value_.__l + 2);
  }
  *(void *)(v50 + 32) = 0;
  *(void *)(v50 + 40) = 0;
  *(void *)(v50 + 56) = 0;
  *(void *)(v50 + 48) = 0;
  *(void *)uint64_t v50 = &unk_26C5C33D0;
  *(void *)(v50 + 64) = 0;
  *(void *)(v50 + 72) = 0;
  int v409 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v410, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v410 = __s;
  }
  int v411 = v253;
  int v409 = &unk_26C5C3878;
  uint64_t v412 = v254;
  int v413 = v255;
  uint64_t v404 = &unk_26C5C3AF0;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v405, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  }
  else {
    std::string v405 = v247;
  }
  int v406 = v248;
  uint64_t v404 = &unk_26C5C3818;
  char v407 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v408, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  }
  else {
    std::string v408 = v250;
  }
  uint64_t v399 = &unk_26C5C3AF0;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v400, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  }
  else {
    std::string v400 = v242;
  }
  int v401 = v243;
  uint64_t v399 = &unk_26C5C3818;
  char v402 = v244;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v403, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  }
  else {
    std::string v403 = v245;
  }
  uint64_t v395 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v396, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else {
    std::string v396 = v238;
  }
  int v397 = v239;
  uint64_t v395 = &unk_26C5C3858;
  uint64_t v398 = v240;
  uint64_t v391 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v392, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v392 = v234;
  }
  int v393 = v235;
  uint64_t v391 = &unk_26C5C3858;
  uint64_t v394 = v236;
  int v386 = &unk_26C5C3AF0;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v387, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  }
  else {
    std::string v387 = v229;
  }
  int v388 = v230;
  int v386 = &unk_26C5C3838;
  uint64_t v389 = v231;
  int v390 = v232;
  int v382 = &unk_26C5C3AF0;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v383, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  }
  else {
    std::string v383 = v225;
  }
  int v384 = v226;
  int v382 = &unk_26C5C3858;
  uint64_t v385 = v227;
  std::string v377 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v378, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v378 = v220;
  }
  int v379 = v221;
  std::string v377 = &unk_26C5C3818;
  char v380 = v222;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v381, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    std::string v381 = v223;
  }
  std::string v372 = &unk_26C5C3AF0;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v373, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  }
  else {
    std::string v373 = v215;
  }
  int v374 = v216;
  std::string v372 = &unk_26C5C3878;
  uint64_t v375 = v217;
  int v376 = v218;
  uint64_t v367 = &unk_26C5C3AF0;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v368, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  }
  else {
    std::string v368 = v208;
  }
  int v369 = v209;
  uint64_t v367 = &unk_26C5C37F8;
  char v370 = v210;
  mediaplatform::Data::Data((mediaplatform::Data *)&v371, __src, __n, 1);
  std::string v363 = &unk_26C5C3AF0;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v364, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else {
    std::string v364 = v204;
  }
  int v365 = v205;
  std::string v363 = &unk_26C5C3858;
  uint64_t v366 = v206;
  int v358 = &unk_26C5C3AF0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v359, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  }
  else {
    std::string v359 = v199;
  }
  int v360 = v200;
  int v358 = &unk_26C5C3878;
  uint64_t v361 = v201;
  int v362 = v202;
  uint64_t v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v355, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  }
  else {
    std::string v355 = v195;
  }
  int v356 = v196;
  uint64_t v354 = &unk_26C5C3858;
  uint64_t v357 = v197;
  std::string v350 = &unk_26C5C3AF0;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v351, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else {
    std::string v351 = v191;
  }
  int v352 = v192;
  std::string v350 = &unk_26C5C3858;
  uint64_t v353 = v193;
  int v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v347, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  }
  else {
    std::string v347 = v187;
  }
  int v348 = v188;
  int v346 = &unk_26C5C3858;
  uint64_t v349 = v189;
  uint64_t v342 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v343, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v343 = v183;
  }
  int v344 = v184;
  uint64_t v342 = &unk_26C5C3858;
  uint64_t v345 = v185;
  uint64_t v338 = &unk_26C5C3AF0;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v339, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  }
  else {
    std::string v339 = v179;
  }
  int v340 = v180;
  uint64_t v338 = &unk_26C5C3858;
  uint64_t v341 = v181;
  uint64_t v333 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v334, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
    std::string v334 = v174;
  }
  int v335 = v175;
  uint64_t v333 = &unk_26C5C3878;
  uint64_t v336 = v176;
  int v337 = v177;
  int v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v329, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else {
    std::string v329 = v169;
  }
  int v330 = v170;
  int v328 = &unk_26C5C3818;
  char v331 = v171;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v332, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  }
  else {
    std::string v332 = v172;
  }
  std::string v323 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v324, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  }
  else {
    std::string v324 = v164;
  }
  int v325 = v165;
  std::string v323 = &unk_26C5C3818;
  char v326 = v166;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v327, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  }
  else {
    std::string v327 = v167;
  }
  uint64_t v318 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v319, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v319 = v159;
  }
  int v320 = v160;
  uint64_t v318 = &unk_26C5C3818;
  char v321 = v161;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v322, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  }
  else {
    std::string v322 = v162;
  }
  int v313 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v314, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else {
    std::string v314 = v154;
  }
  int v315 = v155;
  int v313 = &unk_26C5C3818;
  char v316 = v156;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v317, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v317 = v157;
  }
  int v308 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v309, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v309 = v149;
  }
  int v310 = v150;
  int v308 = &unk_26C5C3818;
  char v311 = v151;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v312, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v312 = v152;
  }
  int v303 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v304, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v304 = v144;
  }
  int v305 = v145;
  int v303 = &unk_26C5C3818;
  char v306 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v307, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else {
    std::string v307 = v147;
  }
  std::string v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v139;
  }
  int v300 = v140;
  std::string v298 = &unk_26C5C3878;
  uint64_t v301 = v141;
  int v302 = v142;
  std::string v293 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v294, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v294 = v134;
  }
  int v295 = v135;
  std::string v293 = &unk_26C5C3878;
  uint64_t v296 = v136;
  int v297 = v137;
  std::string v289 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v290, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v290 = v130;
  }
  int v291 = v131;
  std::string v289 = &unk_26C5C3858;
  uint64_t v292 = v132;
  uint64_t v284 = &unk_26C5C3AF0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v285, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v285 = v125;
  }
  int v286 = v126;
  uint64_t v284 = &unk_26C5C3818;
  char v287 = v127;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v288, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else {
    std::string v288 = v128;
  }
  int v279 = &unk_26C5C3AF0;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v280, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v280 = v120;
  }
  int v281 = v121;
  int v279 = &unk_26C5C3818;
  char v282 = v122;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v283, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else {
    std::string v283 = v123;
  }
  std::string v274 = &unk_26C5C3AF0;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v275, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v275 = v115;
  }
  int v276 = v116;
  std::string v274 = &unk_26C5C3818;
  char v277 = v117;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v278, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else {
    std::string v278 = v118;
  }
  uint64_t v269 = &unk_26C5C3AF0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v270, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  }
  else {
    std::string v270 = v110;
  }
  int v271 = v111;
  uint64_t v269 = &unk_26C5C3818;
  char v272 = v112;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v273, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v273 = v113;
  }
  uint64_t v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v266, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v266 = v106;
  }
  int v267 = v107;
  uint64_t v265 = &unk_26C5C3858;
  uint64_t v268 = v108;
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v102;
  }
  int v263 = v103;
  std::string v261 = &unk_26C5C3858;
  uint64_t v264 = v104;
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v98;
  }
  int v259 = v99;
  std::string v257 = &unk_26C5C3858;
  uint64_t v260 = v100;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v50 + 80, (uint64_t)&v409, (uint64_t)&v404, (uint64_t)&v399, (uint64_t)&v395, (uint64_t)&v391, (uint64_t)&v386, (uint64_t)&v382, (uint64_t)&v377, (uint64_t)&v372, (uint64_t)&v367, (uint64_t)&v363, (uint64_t)&v358, (uint64_t)&v354, (uint64_t)&v350, (uint64_t)&v346, (uint64_t)&v342, (uint64_t)&v338, (uint64_t)&v333,
    (uint64_t)&v328,
    (uint64_t)&v323,
    (uint64_t)&v318,
    (uint64_t)&v313,
    (uint64_t)&v308,
    (uint64_t)&v303,
    (uint64_t)&v298,
    (uint64_t)&v293,
    (uint64_t)&v289,
    (uint64_t)&v284,
    (uint64_t)&v279,
    (uint64_t)&v274,
    (uint64_t)&v269,
    (uint64_t)&v265,
    (uint64_t)&v261,
    (uint64_t)&v257);
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  uint64_t v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v266.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v269);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v274);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v279);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v284);
  std::string v289 = &unk_26C5C3AF0;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v290.__r_.__value_.__l.__data_);
  }
  std::string v293 = &unk_26C5C3AF0;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v294.__r_.__value_.__l.__data_);
  }
  std::string v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v303);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v308);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v313);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v318);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v323);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v328);
  uint64_t v333 = &unk_26C5C3AF0;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v334.__r_.__value_.__l.__data_);
  }
  uint64_t v338 = &unk_26C5C3AF0;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v339.__r_.__value_.__l.__data_);
  }
  uint64_t v342 = &unk_26C5C3AF0;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v343.__r_.__value_.__l.__data_);
  }
  int v346 = &unk_26C5C3AF0;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v347.__r_.__value_.__l.__data_);
  }
  std::string v350 = &unk_26C5C3AF0;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  int v358 = &unk_26C5C3AF0;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v359.__r_.__value_.__l.__data_);
  }
  std::string v363 = &unk_26C5C3AF0;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v364.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v367);
  std::string v372 = &unk_26C5C3AF0;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v373.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v377);
  int v382 = &unk_26C5C3AF0;
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v383.__r_.__value_.__l.__data_);
  }
  int v386 = &unk_26C5C3AF0;
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v387.__r_.__value_.__l.__data_);
  }
  uint64_t v391 = &unk_26C5C3AF0;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v392.__r_.__value_.__l.__data_);
  }
  uint64_t v395 = &unk_26C5C3AF0;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v399);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v404);
  int v409 = &unk_26C5C3AF0;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v410.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  uint64_t v101 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  uint64_t v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v109);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v114);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v119);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v124);
  int v129 = &unk_26C5C3AF0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  std::string v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  int v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v143);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v148);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v153);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v158);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v163);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v168);
  std::string v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  int v178 = &unk_26C5C3AF0;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  uint64_t v182 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  int v186 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  std::string v190 = &unk_26C5C3AF0;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  std::string v194 = &unk_26C5C3AF0;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  std::string v198 = &unk_26C5C3AF0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  int v203 = &unk_26C5C3AF0;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v207);
  std::string v214 = &unk_26C5C3AF0;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v219);
  uint64_t v224 = &unk_26C5C3AF0;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  int v228 = &unk_26C5C3AF0;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  uint64_t v233 = &unk_26C5C3AF0;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  uint64_t v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v241);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  std::string v251 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v50 = &unk_26C5C3F00;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 1952, v49);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 2000, v47);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 2064, v45);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2128, v43);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2176, v41);
  *(void *)(v50 + 2224) = &unk_26C5C3AF0;
  int v69 = (std::string *)(v50 + 2232);
  if (*(char *)(v39 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)(v39 + 8), *(void *)(v39 + 16));
  }
  else
  {
    long long v70 = *(_OWORD *)(v39 + 8);
    *(void *)(v50 + 2248) = *(void *)(v39 + 24);
    *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v70;
  }
  *(_DWORD *)(v50 + 2256) = *(_DWORD *)(v39 + 32);
  *(void *)(v50 + 2224) = &unk_26C5C3838;
  uint64_t v71 = *(void *)(v39 + 36);
  *(_DWORD *)(v50 + 2268) = *(_DWORD *)(v39 + 44);
  *(void *)(v50 + 2260) = v71;
  *(void *)(v50 + 2224) = &unk_26C5C47A8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2272, v97);
  std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 2320, a10);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 2384, a11);
  *(void *)(v50 + 2432) = &unk_26C5C3AF0;
  uint64_t v72 = a12;
  if (*(char *)(a12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 2440), *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
    uint64_t v72 = a12;
  }
  else
  {
    long long v73 = *(_OWORD *)(a12 + 8);
    *(void *)(v50 + 2456) = *(void *)(a12 + 24);
    *(_OWORD *)(v50 + 2440) = v73;
  }
  *(_DWORD *)(v50 + 2464) = *(_DWORD *)(v72 + 32);
  *(void *)(v50 + 2432) = &unk_26C5C37F8;
  *(unsigned char *)(v50 + 2468) = *(unsigned char *)(v72 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(v50 + 2472), *(const void **)(v72 + 64), *(void *)(v72 + 48), 1);
  *(void *)(v50 + 2432) = &unk_26C5C4768;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2512, a13);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 2560, a14);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2608, v96);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2656, a16);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2704, v95);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2752, a18);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 2800, a19);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 2848, v94);
  *(void *)(v50 + 2896) = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 2904), *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else
  {
    long long v74 = *(_OWORD *)(a21 + 8);
    *(void *)(v50 + 2920) = *(void *)(a21 + 24);
    *(_OWORD *)(v50 + 2904) = v74;
  }
  *(_DWORD *)(v50 + 2928) = *(_DWORD *)(a21 + 32);
  *(void *)(v50 + 2896) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 2932) = *(unsigned char *)(a21 + 36);
  uint64_t v75 = (std::string *)(v50 + 2936);
  if (*(char *)(a21 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)(a21 + 40), *(void *)(a21 + 48));
  }
  else
  {
    long long v76 = *(_OWORD *)(a21 + 40);
    *(void *)(v50 + 2952) = *(void *)(a21 + 56);
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
  }
  *(void *)(v50 + 2896) = &unk_26C5C4788;
  *(void *)(v50 + 2960) = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 2968), *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else
  {
    long long v77 = *(_OWORD *)(a22 + 8);
    *(void *)(v50 + 2984) = *(void *)(a22 + 24);
    *(_OWORD *)(v50 + 2968) = v77;
  }
  *(_DWORD *)(v50 + 2992) = *(_DWORD *)(a22 + 32);
  *(void *)(v50 + 2960) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 2996) = *(unsigned char *)(a22 + 36);
  uint64_t v78 = (std::string *)(v50 + 3000);
  if (*(char *)(a22 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)(a22 + 40), *(void *)(a22 + 48));
  }
  else
  {
    long long v79 = *(_OWORD *)(a22 + 40);
    *(void *)(v50 + 3016) = *(void *)(a22 + 56);
    *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v79;
  }
  *(void *)(v50 + 2960) = &unk_26C5C4788;
  *(void *)(v50 + 3024) = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 3032), *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
  }
  else
  {
    long long v80 = *(_OWORD *)(a23 + 8);
    *(void *)(v50 + 3048) = *(void *)(a23 + 24);
    *(_OWORD *)(v50 + 3032) = v80;
  }
  *(_DWORD *)(v50 + 3056) = *(_DWORD *)(a23 + 32);
  *(void *)(v50 + 3024) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 3060) = *(unsigned char *)(a23 + 36);
  char v81 = (std::string *)(v50 + 3064);
  if (*(char *)(a23 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(a23 + 40), *(void *)(a23 + 48));
  }
  else
  {
    long long v82 = *(_OWORD *)(a23 + 40);
    *(void *)(v50 + 3080) = *(void *)(a23 + 56);
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
  }
  *(void *)(v50 + 3024) = &unk_26C5C4788;
  *(void *)(v50 + 3088) = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 3096), *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else
  {
    long long v83 = *(_OWORD *)(a24 + 8);
    *(void *)(v50 + 3112) = *(void *)(a24 + 24);
    *(_OWORD *)(v50 + 3096) = v83;
  }
  *(_DWORD *)(v50 + 3120) = *(_DWORD *)(a24 + 32);
  *(void *)(v50 + 3088) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 3124) = *(unsigned char *)(a24 + 36);
  long long v84 = (std::string *)(v50 + 3128);
  if (*(char *)(a24 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)(a24 + 40), *(void *)(a24 + 48));
  }
  else
  {
    long long v85 = *(_OWORD *)(a24 + 40);
    *(void *)(v50 + 3144) = *(void *)(a24 + 56);
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
  }
  *(void *)(v50 + 3088) = &unk_26C5C4788;
  std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 3152, a25);
  *(void *)(v50 + 3216) = &unk_26C5C3AF0;
  uint64_t v86 = a26;
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 3224), *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
    uint64_t v86 = a26;
  }
  else
  {
    long long v87 = *(_OWORD *)(a26 + 8);
    *(void *)(v50 + 3240) = *(void *)(a26 + 24);
    *(_OWORD *)(v50 + 3224) = v87;
  }
  *(_DWORD *)(v50 + 3248) = *(_DWORD *)(v86 + 32);
  *(void *)(v50 + 3216) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 3252) = *(unsigned char *)(v86 + 36);
  char v88 = (std::string *)(v50 + 3256);
  if (*(char *)(v86 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)(v86 + 40), *(void *)(v86 + 48));
  }
  else
  {
    long long v89 = *v91;
    *(void *)(v50 + 3272) = *((void *)v91 + 2);
    *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
  }
  *(void *)(v50 + 3216) = &unk_26C5C4788;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 3280, a27);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v50 + 3328, a28);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 3376, v93);
  std::__tuple_leaf<27ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 3424, a30);
  std::__tuple_leaf<28ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 3488, a31);
  std::__tuple_leaf<29ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 3552, a32);
  std::__tuple_leaf<30ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v50 + 3616, a33);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 3680, a34);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 3728, v92);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v50 + 3776, a36);
  return v50;
}

void sub_214E30018(unint64_t a1)
{
  STACK[0x468] = a1;
  *(void *)(v1 + 3216) = v3;
  if (*(char *)(v1 + 3247) < 0) {
    operator delete(*v2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x380]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v4);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x388]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x390]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x398]);
  *(void *)(v1 + 2848) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2879) < 0) {
    operator delete(*(void **)(v1 + 2856));
  }
  *(void *)(v1 + 2800) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2831) < 0) {
    operator delete(*(void **)(v1 + 2808));
  }
  *(void *)(v1 + 2752) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2783) < 0) {
    operator delete(*(void **)(v1 + 2760));
  }
  *(void *)(v1 + 2704) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2735) < 0) {
    operator delete(*(void **)(v1 + 2712));
  }
  *(void *)(v1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2687) < 0) {
    operator delete(*(void **)(v1 + 2664));
  }
  *(void *)(v1 + 2608) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2639) < 0) {
    operator delete(*(void **)(v1 + 2616));
  }
  *(void *)(v1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2591) < 0) {
    operator delete(*(void **)(v1 + 2568));
  }
  *(void *)(v1 + 2512) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2543) < 0) {
    operator delete(*(void **)(v1 + 2520));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(STACK[0x448]);
  *(void *)(v1 + 2384) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2415) < 0) {
    operator delete(*(void **)(v1 + 2392));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x3E0]);
  *(void *)(v1 + 2272) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2303) < 0) {
    operator delete(*(void **)(v1 + 2280));
  }
  *(void *)(v1 + 2224) = STACK[0x3F0];
  if (*(char *)(v1 + 2255) < 0) {
    operator delete(*(void **)STACK[0x3C8]);
  }
  *(void *)(v1 + 2176) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2207) < 0) {
    operator delete(*(void **)(v1 + 2184));
  }
  *(void *)(v1 + 2128) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 2159) < 0) {
    operator delete(*(void **)(v1 + 2136));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x408]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x410]);
  *(void *)(v1 + 1952) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 1983) < 0) {
    operator delete(*(void **)(v1 + 1960));
  }
  mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::~DatabaseTable(v1);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x468]);
}

void sub_214E30FB8(unint64_t a1)
{
  STACK[0x468] = a1;
  STACK[0x1100] = v1;
  if (SLOBYTE(STACK[0x111F]) < 0) {
    operator delete((void *)STACK[0x1108]);
  }
  JUMPOUT(0x214E30C70);
}

void sub_214E30FD8(unint64_t a1)
{
  STACK[0x468] = a1;
  STACK[0x990] = v1;
  if (SLOBYTE(STACK[0x9AF]) < 0) {
    operator delete((void *)STACK[0x998]);
  }
  JUMPOUT(0x214E30EF8);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40 = MEMORY[0x270FA5388](a1);
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = v41;
  uint64_t v54 = v53;
  uint64_t v55 = v40;
  int v228 = &unk_26C5C3AF0;
  if (*(char *)(v41 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(v41 + 8), *(void *)(v41 + 16));
  }
  else {
    std::string v229 = *(std::string *)(v41 + 8);
  }
  int v230 = *(_DWORD *)(v52 + 32);
  int v228 = &unk_26C5C3858;
  uint64_t v231 = *(void *)(v52 + 36);
  uint64_t v224 = &unk_26C5C3AF0;
  if (*(char *)(v51 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v51 + 8), *(void *)(v51 + 16));
  }
  else {
    std::string __s = *(std::string *)(v51 + 8);
  }
  int v226 = *(_DWORD *)(v51 + 32);
  uint64_t v224 = &unk_26C5C3858;
  uint64_t v227 = *(void *)(v51 + 36);
  std::string v220 = &unk_26C5C3AF0;
  if (*(char *)(v49 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(v49 + 8), *(void *)(v49 + 16));
  }
  else {
    std::string v221 = *(std::string *)(v49 + 8);
  }
  int v222 = *(_DWORD *)(v49 + 32);
  std::string v220 = &unk_26C5C3858;
  uint64_t v223 = *(void *)(v49 + 36);
  int v216 = &unk_26C5C3AF0;
  if (*(char *)(v47 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v47 + 8), *(void *)(v47 + 16));
  }
  else {
    std::string v217 = *(std::string *)(v47 + 8);
  }
  int v218 = *(_DWORD *)(v47 + 32);
  int v216 = &unk_26C5C3858;
  uint64_t v219 = *(void *)(v47 + 36);
  uint64_t v211 = &unk_26C5C3AF0;
  if (*(char *)(v45 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(v45 + 8), *(void *)(v45 + 16));
  }
  else {
    std::string v212 = *(std::string *)(v45 + 8);
  }
  int v213 = *(_DWORD *)(v45 + 32);
  uint64_t v211 = &unk_26C5C3818;
  char v214 = *(unsigned char *)(v45 + 36);
  if (*(char *)(v45 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(v45 + 40), *(void *)(v45 + 48));
  }
  else {
    std::string v215 = *(std::string *)(v45 + 40);
  }
  uint64_t v206 = &unk_26C5C3AF0;
  if (*(char *)(v43 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(v43 + 8), *(void *)(v43 + 16));
  }
  else {
    std::string v207 = *(std::string *)(v43 + 8);
  }
  int v208 = *(_DWORD *)(v43 + 32);
  uint64_t v206 = &unk_26C5C3818;
  char v209 = *(unsigned char *)(v43 + 36);
  if (*(char *)(v43 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(v43 + 40), *(void *)(v43 + 48));
  }
  else {
    std::string v210 = *(std::string *)(v43 + 40);
  }
  uint64_t v201 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v202 = *(std::string *)(a9 + 8);
  }
  int v203 = *(_DWORD *)(a9 + 32);
  uint64_t v201 = &unk_26C5C3818;
  char v204 = *(unsigned char *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a9 + 40), *(void *)(a9 + 48));
  }
  else {
    std::string v205 = *(std::string *)(a9 + 40);
  }
  int v196 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v197 = *(std::string *)(a10 + 8);
  }
  int v198 = *(_DWORD *)(a10 + 32);
  int v196 = &unk_26C5C3818;
  char v199 = *(unsigned char *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a10 + 40), *(void *)(a10 + 48));
  }
  else {
    std::string v200 = *(std::string *)(a10 + 40);
  }
  int v192 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v193 = *(std::string *)(a11 + 8);
  }
  int v194 = *(_DWORD *)(a11 + 32);
  int v192 = &unk_26C5C3858;
  uint64_t v195 = *(void *)(a11 + 36);
  int v188 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v189 = *(std::string *)(a12 + 8);
  }
  int v190 = *(_DWORD *)(a12 + 32);
  int v188 = &unk_26C5C3858;
  uint64_t v191 = *(void *)(a12 + 36);
  int v184 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v185 = *(std::string *)(a13 + 8);
  }
  int v186 = *(_DWORD *)(a13 + 32);
  int v184 = &unk_26C5C3858;
  uint64_t v187 = *(void *)(a13 + 36);
  int v180 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v181 = *(std::string *)(a14 + 8);
  }
  int v182 = *(_DWORD *)(a14 + 32);
  int v180 = &unk_26C5C3858;
  uint64_t v183 = *(void *)(a14 + 36);
  int v175 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v176 = *(std::string *)(a15 + 8);
  }
  int v177 = *(_DWORD *)(a15 + 32);
  int v175 = &unk_26C5C3878;
  uint64_t v178 = *(void *)(a15 + 36);
  int v179 = *(_DWORD *)(a15 + 44);
  char v171 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v172 = *(std::string *)(a16 + 8);
  }
  int v173 = *(_DWORD *)(a16 + 32);
  char v171 = &unk_26C5C3858;
  uint64_t v174 = *(void *)(a16 + 36);
  std::string v167 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v168 = *(std::string *)(a17 + 8);
  }
  int v169 = *(_DWORD *)(a17 + 32);
  std::string v167 = &unk_26C5C3858;
  uint64_t v170 = *(void *)(a17 + 36);
  char v163 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v164 = *(std::string *)(a18 + 8);
  }
  int v165 = *(_DWORD *)(a18 + 32);
  char v163 = &unk_26C5C3858;
  uint64_t v166 = *(void *)(a18 + 36);
  std::string v159 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v160 = *(std::string *)(a19 + 8);
  }
  int v161 = *(_DWORD *)(a19 + 32);
  std::string v159 = &unk_26C5C3858;
  uint64_t v162 = *(void *)(a19 + 36);
  int v155 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v156 = *(std::string *)(a20 + 8);
  }
  int v157 = *(_DWORD *)(a20 + 32);
  int v155 = &unk_26C5C3858;
  uint64_t v158 = *(void *)(a20 + 36);
  char v151 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v152 = *(std::string *)(a21 + 8);
  }
  int v153 = *(_DWORD *)(a21 + 32);
  char v151 = &unk_26C5C3858;
  uint64_t v154 = *(void *)(a21 + 36);
  std::string v147 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v148 = *(std::string *)(a22 + 8);
  }
  int v149 = *(_DWORD *)(a22 + 32);
  std::string v147 = &unk_26C5C3858;
  uint64_t v150 = *(void *)(a22 + 36);
  int v143 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
  }
  else {
    std::string v144 = *(std::string *)(a23 + 8);
  }
  int v145 = *(_DWORD *)(a23 + 32);
  int v143 = &unk_26C5C3858;
  uint64_t v146 = *(void *)(a23 + 36);
  int v138 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else {
    std::string v139 = *(std::string *)(a24 + 8);
  }
  int v140 = *(_DWORD *)(a24 + 32);
  int v138 = &unk_26C5C3818;
  char v141 = *(unsigned char *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a24 + 40), *(void *)(a24 + 48));
  }
  else {
    std::string v142 = *(std::string *)(a24 + 40);
  }
  std::string v133 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
  }
  else {
    std::string v134 = *(std::string *)(a25 + 8);
  }
  int v135 = *(_DWORD *)(a25 + 32);
  std::string v133 = &unk_26C5C3878;
  uint64_t v136 = *(void *)(a25 + 36);
  int v137 = *(_DWORD *)(a25 + 44);
  std::string v128 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
  }
  else {
    std::string v129 = *(std::string *)(a26 + 8);
  }
  int v130 = *(_DWORD *)(a26 + 32);
  std::string v128 = &unk_26C5C3878;
  uint64_t v131 = *(void *)(a26 + 36);
  int v132 = *(_DWORD *)(a26 + 44);
  std::string v123 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else {
    std::string v124 = *(std::string *)(a27 + 8);
  }
  int v125 = *(_DWORD *)(a27 + 32);
  std::string v123 = &unk_26C5C3818;
  char v126 = *(unsigned char *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a27 + 40), *(void *)(a27 + 48));
  }
  else {
    std::string v127 = *(std::string *)(a27 + 40);
  }
  std::string v118 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else {
    std::string v119 = *(std::string *)(a28 + 8);
  }
  int v120 = *(_DWORD *)(a28 + 32);
  std::string v118 = &unk_26C5C3878;
  uint64_t v121 = *(void *)(a28 + 36);
  int v122 = *(_DWORD *)(a28 + 44);
  int v111 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else {
    std::string v112 = *(std::string *)(a29 + 8);
  }
  int v113 = *(_DWORD *)(a29 + 32);
  int v111 = &unk_26C5C37F8;
  char v114 = *(unsigned char *)(a29 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v115, *(const void **)(a29 + 64), *(void *)(a29 + 48), 1);
  int v107 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else {
    std::string v108 = *(std::string *)(a30 + 8);
  }
  int v109 = *(_DWORD *)(a30 + 32);
  int v107 = &unk_26C5C3858;
  uint64_t v110 = *(void *)(a30 + 36);
  int v103 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
  }
  else {
    std::string v104 = *(std::string *)(a31 + 8);
  }
  int v105 = *(_DWORD *)(a31 + 32);
  int v103 = &unk_26C5C3858;
  uint64_t v106 = *(void *)(a31 + 36);
  int v99 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
  }
  else {
    std::string v100 = *(std::string *)(a32 + 8);
  }
  int v101 = *(_DWORD *)(a32 + 32);
  int v99 = &unk_26C5C3858;
  uint64_t v102 = *(void *)(a32 + 36);
  uint64_t v95 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v96 = *(std::string *)(a33 + 8);
  }
  int v97 = *(_DWORD *)(a33 + 32);
  uint64_t v95 = &unk_26C5C3858;
  uint64_t v98 = *(void *)(a33 + 36);
  uint64_t v90 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
  }
  else {
    std::string v91 = *(std::string *)(a34 + 8);
  }
  int v92 = *(_DWORD *)(a34 + 32);
  uint64_t v90 = &unk_26C5C3818;
  char v93 = *(unsigned char *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a34 + 40), *(void *)(a34 + 48));
  }
  else {
    std::string v94 = *(std::string *)(a34 + 40);
  }
  uint64_t v86 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else {
    std::string v87 = *(std::string *)(a35 + 8);
  }
  int v88 = *(_DWORD *)(a35 + 32);
  uint64_t v86 = &unk_26C5C3858;
  uint64_t v89 = *(void *)(a35 + 36);
  char v81 = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
  }
  else {
    std::string v82 = *(std::string *)(a36 + 8);
  }
  int v83 = *(_DWORD *)(a36 + 32);
  char v81 = &unk_26C5C3878;
  uint64_t v84 = *(void *)(a36 + 36);
  int v85 = *(_DWORD *)(a36 + 44);
  long long v76 = &unk_26C5C3AF0;
  if (*(char *)(a37 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else {
    std::string v77 = *(std::string *)(a37 + 8);
  }
  int v78 = *(_DWORD *)(a37 + 32);
  long long v76 = &unk_26C5C3878;
  uint64_t v79 = *(void *)(a37 + 36);
  int v80 = *(_DWORD *)(a37 + 44);
  uint64_t v71 = &unk_26C5C3AF0;
  if (*(char *)(a38 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a38 + 8), *(void *)(a38 + 16));
  }
  else {
    std::string v72 = *(std::string *)(a38 + 8);
  }
  int v73 = *(_DWORD *)(a38 + 32);
  uint64_t v71 = &unk_26C5C3818;
  char v74 = *(unsigned char *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(a38 + 40), *(void *)(a38 + 48));
  }
  else {
    std::string v75 = *(std::string *)(a38 + 40);
  }
  uint64_t v66 = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
  }
  else {
    std::string v67 = *(std::string *)(a39 + 8);
  }
  int v68 = *(_DWORD *)(a39 + 32);
  uint64_t v66 = &unk_26C5C3818;
  char v69 = *(unsigned char *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a39 + 40), *(void *)(a39 + 48));
  }
  else {
    std::string v70 = *(std::string *)(a39 + 40);
  }
  uint64_t v61 = &unk_26C5C3AF0;
  if (*(char *)(a40 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
  }
  else {
    std::string v62 = *(std::string *)(a40 + 8);
  }
  int v63 = *(_DWORD *)(a40 + 32);
  uint64_t v61 = &unk_26C5C3818;
  char v64 = *(unsigned char *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(a40 + 40), *(void *)(a40 + 48));
  }
  else {
    std::string v65 = *(std::string *)(a40 + 40);
  }
  int v393 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v394, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v394 = __s;
  }
  int v395 = v226;
  int v393 = &unk_26C5C3858;
  uint64_t v396 = v227;
  uint64_t v389 = &unk_26C5C3AF0;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v390, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v390 = v221;
  }
  int v391 = v222;
  uint64_t v389 = &unk_26C5C3858;
  uint64_t v392 = v223;
  uint64_t v385 = &unk_26C5C3AF0;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v386, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  }
  else {
    std::string v386 = v217;
  }
  int v387 = v218;
  uint64_t v385 = &unk_26C5C3858;
  uint64_t v388 = v219;
  char v380 = &unk_26C5C3AF0;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v381, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  }
  else {
    std::string v381 = v212;
  }
  int v382 = v213;
  char v380 = &unk_26C5C3818;
  char v383 = v214;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v384, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  }
  else {
    std::string v384 = v215;
  }
  uint64_t v375 = &unk_26C5C3AF0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v376, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  }
  else {
    std::string v376 = v207;
  }
  int v377 = v208;
  uint64_t v375 = &unk_26C5C3818;
  char v378 = v209;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v379, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else {
    std::string v379 = v210;
  }
  char v370 = &unk_26C5C3AF0;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v371, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  }
  else {
    std::string v371 = v202;
  }
  int v372 = v203;
  char v370 = &unk_26C5C3818;
  char v373 = v204;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v374, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  }
  else {
    std::string v374 = v205;
  }
  int v365 = &unk_26C5C3AF0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v366, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  }
  else {
    std::string v366 = v197;
  }
  int v367 = v198;
  int v365 = &unk_26C5C3818;
  char v368 = v199;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v369, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else {
    std::string v369 = v200;
  }
  uint64_t v361 = &unk_26C5C3AF0;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v362, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else {
    std::string v362 = v193;
  }
  int v363 = v194;
  uint64_t v361 = &unk_26C5C3858;
  uint64_t v364 = v195;
  uint64_t v357 = &unk_26C5C3AF0;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v358, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  }
  else {
    std::string v358 = v189;
  }
  int v359 = v190;
  uint64_t v357 = &unk_26C5C3858;
  uint64_t v360 = v191;
  uint64_t v353 = &unk_26C5C3AF0;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v354, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else {
    std::string v354 = v185;
  }
  int v355 = v186;
  uint64_t v353 = &unk_26C5C3858;
  uint64_t v356 = v187;
  uint64_t v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v350, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v350 = v181;
  }
  int v351 = v182;
  uint64_t v349 = &unk_26C5C3858;
  uint64_t v352 = v183;
  int v344 = &unk_26C5C3AF0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v345, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  }
  else {
    std::string v345 = v176;
  }
  int v346 = v177;
  int v344 = &unk_26C5C3878;
  uint64_t v347 = v178;
  int v348 = v179;
  int v340 = &unk_26C5C3AF0;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v341, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  }
  else {
    std::string v341 = v172;
  }
  int v342 = v173;
  int v340 = &unk_26C5C3858;
  uint64_t v343 = v174;
  uint64_t v336 = &unk_26C5C3AF0;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v337, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  }
  else {
    std::string v337 = v168;
  }
  int v338 = v169;
  uint64_t v336 = &unk_26C5C3858;
  uint64_t v339 = v170;
  std::string v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v333, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  }
  else {
    std::string v333 = v164;
  }
  int v334 = v165;
  std::string v332 = &unk_26C5C3858;
  uint64_t v335 = v166;
  int v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v329, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else {
    std::string v329 = v160;
  }
  int v330 = v161;
  int v328 = &unk_26C5C3858;
  uint64_t v331 = v162;
  std::string v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v156;
  }
  int v326 = v157;
  std::string v324 = &unk_26C5C3858;
  uint64_t v327 = v158;
  int v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v321, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v321 = v152;
  }
  int v322 = v153;
  int v320 = &unk_26C5C3858;
  uint64_t v323 = v154;
  char v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v317, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  }
  else {
    std::string v317 = v148;
  }
  int v318 = v149;
  char v316 = &unk_26C5C3858;
  uint64_t v319 = v150;
  std::string v312 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v313, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v313 = v144;
  }
  int v314 = v145;
  std::string v312 = &unk_26C5C3858;
  uint64_t v315 = v146;
  std::string v307 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v308, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v308 = v139;
  }
  int v309 = v140;
  std::string v307 = &unk_26C5C3818;
  char v310 = v141;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v311, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string v311 = v142;
  }
  int v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v303, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v303 = v134;
  }
  int v304 = v135;
  int v302 = &unk_26C5C3878;
  uint64_t v305 = v136;
  int v306 = v137;
  int v297 = &unk_26C5C3AF0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v298, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  }
  else {
    std::string v298 = v129;
  }
  int v299 = v130;
  int v297 = &unk_26C5C3878;
  uint64_t v300 = v131;
  int v301 = v132;
  uint64_t v292 = &unk_26C5C3AF0;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v293, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v293 = v124;
  }
  int v294 = v125;
  uint64_t v292 = &unk_26C5C3818;
  char v295 = v126;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v296, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v296 = v127;
  }
  char v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v288, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  }
  else {
    std::string v288 = v119;
  }
  int v289 = v120;
  char v287 = &unk_26C5C3878;
  uint64_t v290 = v121;
  int v291 = v122;
  char v282 = &unk_26C5C3AF0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v283, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    std::string v283 = v112;
  }
  int v284 = v113;
  char v282 = &unk_26C5C37F8;
  char v285 = v114;
  mediaplatform::Data::Data((mediaplatform::Data *)&v286, __src, __n, 1);
  std::string v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v279, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v279 = v108;
  }
  int v280 = v109;
  std::string v278 = &unk_26C5C3858;
  uint64_t v281 = v110;
  std::string v274 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v275, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v275 = v104;
  }
  int v276 = v105;
  std::string v274 = &unk_26C5C3858;
  uint64_t v277 = v106;
  std::string v270 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v271, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else {
    std::string v271 = v100;
  }
  int v272 = v101;
  std::string v270 = &unk_26C5C3858;
  uint64_t v273 = v102;
  std::string v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v267, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v267 = v96;
  }
  int v268 = v97;
  std::string v266 = &unk_26C5C3858;
  uint64_t v269 = v98;
  std::string v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v91;
  }
  int v263 = v92;
  std::string v261 = &unk_26C5C3818;
  char v264 = v93;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v265, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    std::string v265 = v94;
  }
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v258, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  }
  else {
    std::string v258 = v87;
  }
  int v259 = v88;
  std::string v257 = &unk_26C5C3858;
  uint64_t v260 = v89;
  std::string v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v253, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else {
    std::string v253 = v82;
  }
  int v254 = v83;
  std::string v252 = &unk_26C5C3878;
  uint64_t v255 = v84;
  int v256 = v85;
  std::string v247 = &unk_26C5C3AF0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v77;
  }
  int v249 = v78;
  std::string v247 = &unk_26C5C3878;
  uint64_t v250 = v79;
  int v251 = v80;
  std::string v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v243, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  }
  else {
    std::string v243 = v72;
  }
  int v244 = v73;
  std::string v242 = &unk_26C5C3818;
  char v245 = v74;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v246, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v246 = v75;
  }
  uint64_t v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v67;
  }
  int v239 = v68;
  uint64_t v237 = &unk_26C5C3818;
  char v240 = v69;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v241, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v241 = v70;
  }
  int v232 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v233, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v233 = v62;
  }
  int v234 = v63;
  int v232 = &unk_26C5C3818;
  char v235 = v64;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v236, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v236 = v65;
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v55, (uint64_t)&v393, (uint64_t)&v389, (uint64_t)&v385, (uint64_t)&v380, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v365, (uint64_t)&v361, (uint64_t)&v357, (uint64_t)&v353, (uint64_t)&v349, (uint64_t)&v344, (uint64_t)&v340, (uint64_t)&v336, (uint64_t)&v332, (uint64_t)&v328, (uint64_t)&v324, (uint64_t)&v320,
    (uint64_t)&v316,
    (uint64_t)&v312,
    (uint64_t)&v307,
    (uint64_t)&v302,
    (uint64_t)&v297,
    (uint64_t)&v292,
    (uint64_t)&v287,
    (uint64_t)&v282,
    (uint64_t)&v278,
    (uint64_t)&v274,
    (uint64_t)&v270,
    (uint64_t)&v266,
    (uint64_t)&v261,
    (uint64_t)&v257,
    (uint64_t)&v252,
    (uint64_t)&v247,
    (uint64_t)&v242,
    (uint64_t)&v237,
    (uint64_t)&v232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v237);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v242);
  std::string v247 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  std::string v257 = &unk_26C5C3AF0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v261);
  std::string v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v267.__r_.__value_.__l.__data_);
  }
  std::string v270 = &unk_26C5C3AF0;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v271.__r_.__value_.__l.__data_);
  }
  std::string v274 = &unk_26C5C3AF0;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v275.__r_.__value_.__l.__data_);
  }
  std::string v278 = &unk_26C5C3AF0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v282);
  char v287 = &unk_26C5C3AF0;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v288.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v292);
  int v297 = &unk_26C5C3AF0;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  int v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v307);
  std::string v312 = &unk_26C5C3AF0;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v313.__r_.__value_.__l.__data_);
  }
  char v316 = &unk_26C5C3AF0;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  int v320 = &unk_26C5C3AF0;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  std::string v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  int v328 = &unk_26C5C3AF0;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v329.__r_.__value_.__l.__data_);
  }
  std::string v332 = &unk_26C5C3AF0;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  uint64_t v336 = &unk_26C5C3AF0;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v337.__r_.__value_.__l.__data_);
  }
  int v340 = &unk_26C5C3AF0;
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v341.__r_.__value_.__l.__data_);
  }
  int v344 = &unk_26C5C3AF0;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
  uint64_t v349 = &unk_26C5C3AF0;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v350.__r_.__value_.__l.__data_);
  }
  uint64_t v353 = &unk_26C5C3AF0;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v354.__r_.__value_.__l.__data_);
  }
  uint64_t v357 = &unk_26C5C3AF0;
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  uint64_t v361 = &unk_26C5C3AF0;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v362.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v365);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v375);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v380);
  uint64_t v385 = &unk_26C5C3AF0;
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v386.__r_.__value_.__l.__data_);
  }
  uint64_t v389 = &unk_26C5C3AF0;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v390.__r_.__value_.__l.__data_);
  }
  int v393 = &unk_26C5C3AF0;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v394.__r_.__value_.__l.__data_);
  }
  *(void *)(v55 + 1968) = &unk_26C5C3AF0;
  uint64_t v56 = (std::string *)(v55 + 1976);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v56, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v229.__r_.__value_.__l.__data_;
    *(void *)(v55 + 1992) = *((void *)&v229.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v55 + 2000) = v230;
  *(void *)(v55 + 1968) = &unk_26C5C3858;
  *(void *)(v55 + 2004) = v231;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v61);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v66);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v71);
  long long v76 = &unk_26C5C3AF0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  char v81 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  uint64_t v86 = &unk_26C5C3AF0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v90);
  uint64_t v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  int v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  int v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  int v107 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v111);
  std::string v118 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v123);
  std::string v128 = &unk_26C5C3AF0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  std::string v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v138);
  int v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  std::string v147 = &unk_26C5C3AF0;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  char v151 = &unk_26C5C3AF0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  int v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  std::string v159 = &unk_26C5C3AF0;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  char v163 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  std::string v167 = &unk_26C5C3AF0;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  char v171 = &unk_26C5C3AF0;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v172.__r_.__value_.__l.__data_);
  }
  int v175 = &unk_26C5C3AF0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v176.__r_.__value_.__l.__data_);
  }
  int v180 = &unk_26C5C3AF0;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  int v184 = &unk_26C5C3AF0;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  int v188 = &unk_26C5C3AF0;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  int v192 = &unk_26C5C3AF0;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v196);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v201);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v206);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v211);
  int v216 = &unk_26C5C3AF0;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  std::string v220 = &unk_26C5C3AF0;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  uint64_t v224 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  int v228 = &unk_26C5C3AF0;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  *(void *)(v55 + 2016) = &unk_26C5C3AF0;
  uint64_t v57 = (std::string *)(v55 + 2024);
  if (*(char *)(v54 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)(v54 + 8), *(void *)(v54 + 16));
  }
  else
  {
    long long v58 = *(_OWORD *)(v54 + 8);
    *(void *)(v55 + 2040) = *(void *)(v54 + 24);
    *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
  }
  *(_DWORD *)(v55 + 2048) = *(_DWORD *)(v54 + 32);
  *(void *)(v55 + 2016) = &unk_26C5C3878;
  uint64_t v59 = *(void *)(v54 + 36);
  *(_DWORD *)(v55 + 2060) = *(_DWORD *)(v54 + 44);
  *(void *)(v55 + 2052) = v59;
  return v55;
}

void sub_214E344BC(unint64_t a1)
{
  STACK[0x220] = a1;
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x220]);
}

void sub_214E34F2C(unint64_t a1)
{
  STACK[0x220] = a1;
  STACK[0xD88] = v1;
  if (SLOBYTE(STACK[0xDA7]) < 0) {
    operator delete((void *)STACK[0xD90]);
  }
  JUMPOUT(0x214E34A24);
}

void sub_214E34F48(unint64_t a1)
{
  STACK[0x220] = a1;
  STACK[0x5A8] = v1;
  if (SLOBYTE(STACK[0x5C7]) < 0) {
    operator delete((void *)STACK[0x5B0]);
  }
  JUMPOUT(0x214E34D14);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35 = MEMORY[0x270FA5388](a1);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v47 = v36;
  uint64_t v49 = v48;
  uint64_t v50 = v35;
  char v204 = &unk_26C5C3AF0;
  if (*(char *)(v36 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(v36 + 8), *(void *)(v36 + 16));
  }
  else {
    std::string v205 = *(std::string *)(v36 + 8);
  }
  int v206 = *(_DWORD *)(v47 + 32);
  char v204 = &unk_26C5C3818;
  char v207 = *(unsigned char *)(v47 + 36);
  if (*(char *)(v47 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(v47 + 40), *(void *)(v47 + 48));
  }
  else {
    std::string v208 = *(std::string *)(v47 + 40);
  }
  char v199 = &unk_26C5C3AF0;
  if (*(char *)(v46 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v46 + 8), *(void *)(v46 + 16));
  }
  else {
    std::string __s = *(std::string *)(v46 + 8);
  }
  int v201 = *(_DWORD *)(v46 + 32);
  char v199 = &unk_26C5C3818;
  char v202 = *(unsigned char *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(v46 + 40), *(void *)(v46 + 48));
  }
  else {
    std::string v203 = *(std::string *)(v46 + 40);
  }
  uint64_t v195 = &unk_26C5C3AF0;
  if (*(char *)(v44 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(v44 + 8), *(void *)(v44 + 16));
  }
  else {
    std::string v196 = *(std::string *)(v44 + 8);
  }
  int v197 = *(_DWORD *)(v44 + 32);
  uint64_t v195 = &unk_26C5C3858;
  uint64_t v198 = *(void *)(v44 + 36);
  uint64_t v191 = &unk_26C5C3AF0;
  if (*(char *)(v42 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(v42 + 8), *(void *)(v42 + 16));
  }
  else {
    std::string v192 = *(std::string *)(v42 + 8);
  }
  int v193 = *(_DWORD *)(v42 + 32);
  uint64_t v191 = &unk_26C5C3858;
  uint64_t v194 = *(void *)(v42 + 36);
  int v186 = &unk_26C5C3AF0;
  if (*(char *)(v40 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(v40 + 8), *(void *)(v40 + 16));
  }
  else {
    std::string v187 = *(std::string *)(v40 + 8);
  }
  int v188 = *(_DWORD *)(v40 + 32);
  int v186 = &unk_26C5C3838;
  uint64_t v189 = *(void *)(v40 + 36);
  int v190 = *(_DWORD *)(v40 + 44);
  int v182 = &unk_26C5C3AF0;
  if (*(char *)(v38 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(v38 + 8), *(void *)(v38 + 16));
  }
  else {
    std::string v183 = *(std::string *)(v38 + 8);
  }
  int v184 = *(_DWORD *)(v38 + 32);
  int v182 = &unk_26C5C3858;
  uint64_t v185 = *(void *)(v38 + 36);
  int v177 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
  }
  else {
    std::string v178 = *(std::string *)(a9 + 8);
  }
  int v179 = *(_DWORD *)(a9 + 32);
  int v177 = &unk_26C5C3818;
  char v180 = *(unsigned char *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a9 + 40), *(void *)(a9 + 48));
  }
  else {
    std::string v181 = *(std::string *)(a9 + 40);
  }
  std::string v172 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
  }
  else {
    std::string v173 = *(std::string *)(a10 + 8);
  }
  int v174 = *(_DWORD *)(a10 + 32);
  std::string v172 = &unk_26C5C3878;
  uint64_t v175 = *(void *)(a10 + 36);
  int v176 = *(_DWORD *)(a10 + 44);
  int v165 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
  }
  else {
    std::string v166 = *(std::string *)(a11 + 8);
  }
  int v167 = *(_DWORD *)(a11 + 32);
  int v165 = &unk_26C5C37F8;
  char v168 = *(unsigned char *)(a11 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v169, *(const void **)(a11 + 64), *(void *)(a11 + 48), 1);
  int v161 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v162 = *(std::string *)(a12 + 8);
  }
  int v163 = *(_DWORD *)(a12 + 32);
  int v161 = &unk_26C5C3858;
  uint64_t v164 = *(void *)(a12 + 36);
  std::string v156 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v157 = *(std::string *)(a13 + 8);
  }
  int v158 = *(_DWORD *)(a13 + 32);
  std::string v156 = &unk_26C5C3878;
  uint64_t v159 = *(void *)(a13 + 36);
  int v160 = *(_DWORD *)(a13 + 44);
  std::string v152 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v153 = *(std::string *)(a14 + 8);
  }
  int v154 = *(_DWORD *)(a14 + 32);
  std::string v152 = &unk_26C5C3858;
  uint64_t v155 = *(void *)(a14 + 36);
  std::string v148 = &unk_26C5C3AF0;
  if (*(char *)(a15 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
  }
  else {
    std::string v149 = *(std::string *)(a15 + 8);
  }
  int v150 = *(_DWORD *)(a15 + 32);
  std::string v148 = &unk_26C5C3858;
  uint64_t v151 = *(void *)(a15 + 36);
  std::string v144 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v145 = *(std::string *)(a16 + 8);
  }
  int v146 = *(_DWORD *)(a16 + 32);
  std::string v144 = &unk_26C5C3858;
  uint64_t v147 = *(void *)(a16 + 36);
  int v140 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
  }
  else {
    std::string v141 = *(std::string *)(a17 + 8);
  }
  int v142 = *(_DWORD *)(a17 + 32);
  int v140 = &unk_26C5C3858;
  uint64_t v143 = *(void *)(a17 + 36);
  uint64_t v136 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v137 = *(std::string *)(a18 + 8);
  }
  int v138 = *(_DWORD *)(a18 + 32);
  uint64_t v136 = &unk_26C5C3858;
  uint64_t v139 = *(void *)(a18 + 36);
  uint64_t v131 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
  }
  else {
    std::string v132 = *(std::string *)(a19 + 8);
  }
  int v133 = *(_DWORD *)(a19 + 32);
  uint64_t v131 = &unk_26C5C3878;
  uint64_t v134 = *(void *)(a19 + 36);
  int v135 = *(_DWORD *)(a19 + 44);
  char v126 = &unk_26C5C3AF0;
  if (*(char *)(a20 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
  }
  else {
    std::string v127 = *(std::string *)(a20 + 8);
  }
  int v128 = *(_DWORD *)(a20 + 32);
  char v126 = &unk_26C5C3818;
  char v129 = *(unsigned char *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(a20 + 40), *(void *)(a20 + 48));
  }
  else {
    std::string v130 = *(std::string *)(a20 + 40);
  }
  uint64_t v121 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v122 = *(std::string *)(a21 + 8);
  }
  int v123 = *(_DWORD *)(a21 + 32);
  uint64_t v121 = &unk_26C5C3818;
  char v124 = *(unsigned char *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a21 + 40), *(void *)(a21 + 48));
  }
  else {
    std::string v125 = *(std::string *)(a21 + 40);
  }
  int v116 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
  }
  else {
    std::string v117 = *(std::string *)(a22 + 8);
  }
  int v118 = *(_DWORD *)(a22 + 32);
  int v116 = &unk_26C5C3818;
  char v119 = *(unsigned char *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a22 + 40), *(void *)(a22 + 48));
  }
  else {
    std::string v120 = *(std::string *)(a22 + 40);
  }
  int v111 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
  }
  else {
    std::string v112 = *(std::string *)(a23 + 8);
  }
  int v113 = *(_DWORD *)(a23 + 32);
  int v111 = &unk_26C5C3818;
  char v114 = *(unsigned char *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)(a23 + 40), *(void *)(a23 + 48));
  }
  else {
    std::string v115 = *(std::string *)(a23 + 40);
  }
  uint64_t v106 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
  }
  else {
    std::string v107 = *(std::string *)(a24 + 8);
  }
  int v108 = *(_DWORD *)(a24 + 32);
  uint64_t v106 = &unk_26C5C3818;
  char v109 = *(unsigned char *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(a24 + 40), *(void *)(a24 + 48));
  }
  else {
    std::string v110 = *(std::string *)(a24 + 40);
  }
  int v101 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
  }
  else {
    std::string v102 = *(std::string *)(a25 + 8);
  }
  int v103 = *(_DWORD *)(a25 + 32);
  int v101 = &unk_26C5C3818;
  char v104 = *(unsigned char *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)(a25 + 40), *(void *)(a25 + 48));
  }
  else {
    std::string v105 = *(std::string *)(a25 + 40);
  }
  std::string v96 = &unk_26C5C3AF0;
  if (*(char *)(a26 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
  }
  else {
    std::string v97 = *(std::string *)(a26 + 8);
  }
  int v98 = *(_DWORD *)(a26 + 32);
  std::string v96 = &unk_26C5C3878;
  uint64_t v99 = *(void *)(a26 + 36);
  int v100 = *(_DWORD *)(a26 + 44);
  std::string v91 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else {
    std::string v92 = *(std::string *)(a27 + 8);
  }
  int v93 = *(_DWORD *)(a27 + 32);
  std::string v91 = &unk_26C5C3878;
  uint64_t v94 = *(void *)(a27 + 36);
  int v95 = *(_DWORD *)(a27 + 44);
  std::string v87 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
  }
  else {
    std::string v88 = *(std::string *)(a28 + 8);
  }
  int v89 = *(_DWORD *)(a28 + 32);
  std::string v87 = &unk_26C5C3858;
  uint64_t v90 = *(void *)(a28 + 36);
  std::string v82 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else {
    std::string v83 = *(std::string *)(a29 + 8);
  }
  int v84 = *(_DWORD *)(a29 + 32);
  std::string v82 = &unk_26C5C3818;
  char v85 = *(unsigned char *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a29 + 40), *(void *)(a29 + 48));
  }
  else {
    std::string v86 = *(std::string *)(a29 + 40);
  }
  std::string v77 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else {
    std::string v78 = *(std::string *)(a30 + 8);
  }
  int v79 = *(_DWORD *)(a30 + 32);
  std::string v77 = &unk_26C5C3818;
  char v80 = *(unsigned char *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(a30 + 40), *(void *)(a30 + 48));
  }
  else {
    std::string v81 = *(std::string *)(a30 + 40);
  }
  std::string v72 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
  }
  else {
    std::string v73 = *(std::string *)(a31 + 8);
  }
  int v74 = *(_DWORD *)(a31 + 32);
  std::string v72 = &unk_26C5C3818;
  char v75 = *(unsigned char *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(a31 + 40), *(void *)(a31 + 48));
  }
  else {
    std::string v76 = *(std::string *)(a31 + 40);
  }
  std::string v67 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
  }
  else {
    std::string v68 = *(std::string *)(a32 + 8);
  }
  int v69 = *(_DWORD *)(a32 + 32);
  std::string v67 = &unk_26C5C3818;
  char v70 = *(unsigned char *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(a32 + 40), *(void *)(a32 + 48));
  }
  else {
    std::string v71 = *(std::string *)(a32 + 40);
  }
  int v63 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v64 = *(std::string *)(a33 + 8);
  }
  int v65 = *(_DWORD *)(a33 + 32);
  int v63 = &unk_26C5C3858;
  uint64_t v66 = *(void *)(a33 + 36);
  uint64_t v59 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
  }
  else {
    std::string v60 = *(std::string *)(a34 + 8);
  }
  int v61 = *(_DWORD *)(a34 + 32);
  uint64_t v59 = &unk_26C5C3858;
  uint64_t v62 = *(void *)(a34 + 36);
  if (*(char *)(a35 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
  }
  else {
    std::string v56 = *(std::string *)(a35 + 8);
  }
  int v57 = *(_DWORD *)(a35 + 32);
  uint64_t v58 = *(void *)(a35 + 36);
  int v351 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v352, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v352 = __s;
  }
  int v353 = v201;
  int v351 = &unk_26C5C3818;
  char v354 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v355, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  }
  else {
    std::string v355 = v203;
  }
  uint64_t v347 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v348, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else {
    std::string v348 = v196;
  }
  int v349 = v197;
  uint64_t v347 = &unk_26C5C3858;
  uint64_t v350 = v198;
  uint64_t v343 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v344, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  }
  else {
    std::string v344 = v192;
  }
  int v345 = v193;
  uint64_t v343 = &unk_26C5C3858;
  uint64_t v346 = v194;
  int v338 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v339, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  }
  else {
    std::string v339 = v187;
  }
  int v340 = v188;
  int v338 = &unk_26C5C3838;
  uint64_t v341 = v189;
  int v342 = v190;
  int v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v335, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v335 = v183;
  }
  int v336 = v184;
  int v334 = &unk_26C5C3858;
  uint64_t v337 = v185;
  std::string v329 = &unk_26C5C3AF0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v330, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v330 = v178;
  }
  int v331 = v179;
  std::string v329 = &unk_26C5C3818;
  char v332 = v180;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v333, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v333 = v181;
  }
  std::string v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v325, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v325 = v173;
  }
  int v326 = v174;
  std::string v324 = &unk_26C5C3878;
  uint64_t v327 = v175;
  int v328 = v176;
  uint64_t v319 = &unk_26C5C3AF0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v320, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  }
  else {
    std::string v320 = v166;
  }
  int v321 = v167;
  uint64_t v319 = &unk_26C5C37F8;
  char v322 = v168;
  mediaplatform::Data::Data((mediaplatform::Data *)&v323, __src, __n, 1);
  uint64_t v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v316, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  }
  else {
    std::string v316 = v162;
  }
  int v317 = v163;
  uint64_t v315 = &unk_26C5C3858;
  uint64_t v318 = v164;
  char v310 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v311, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v311 = v157;
  }
  int v312 = v158;
  char v310 = &unk_26C5C3878;
  uint64_t v313 = v159;
  int v314 = v160;
  int v306 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v307, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else {
    std::string v307 = v153;
  }
  int v308 = v154;
  int v306 = &unk_26C5C3858;
  uint64_t v309 = v155;
  int v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v303, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v303 = v149;
  }
  int v304 = v150;
  int v302 = &unk_26C5C3858;
  uint64_t v305 = v151;
  std::string v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v145;
  }
  int v300 = v146;
  std::string v298 = &unk_26C5C3858;
  uint64_t v301 = v147;
  int v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v295, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  }
  else {
    std::string v295 = v141;
  }
  int v296 = v142;
  int v294 = &unk_26C5C3858;
  uint64_t v297 = v143;
  uint64_t v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v291, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  }
  else {
    std::string v291 = v137;
  }
  int v292 = v138;
  uint64_t v290 = &unk_26C5C3858;
  uint64_t v293 = v139;
  char v285 = &unk_26C5C3AF0;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v286, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  }
  else {
    std::string v286 = v132;
  }
  int v287 = v133;
  char v285 = &unk_26C5C3878;
  uint64_t v288 = v134;
  int v289 = v135;
  int v280 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v281, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v281 = v127;
  }
  int v282 = v128;
  int v280 = &unk_26C5C3818;
  char v283 = v129;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v284, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v284 = v130;
  }
  std::string v275 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v276, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v276 = v122;
  }
  int v277 = v123;
  std::string v275 = &unk_26C5C3818;
  char v278 = v124;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v279, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v279 = v125;
  }
  std::string v270 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v271, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v271 = v117;
  }
  int v272 = v118;
  std::string v270 = &unk_26C5C3818;
  char v273 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v274, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v274 = v120;
  }
  std::string v265 = &unk_26C5C3AF0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v266, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    std::string v266 = v112;
  }
  int v267 = v113;
  std::string v265 = &unk_26C5C3818;
  char v268 = v114;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v269, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v269 = v115;
  }
  uint64_t v260 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v261, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else {
    std::string v261 = v107;
  }
  int v262 = v108;
  uint64_t v260 = &unk_26C5C3818;
  char v263 = v109;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v264, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  }
  else {
    std::string v264 = v110;
  }
  uint64_t v255 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v256, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  }
  else {
    std::string v256 = v102;
  }
  int v257 = v103;
  uint64_t v255 = &unk_26C5C3818;
  char v258 = v104;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v259, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  }
  else {
    std::string v259 = v105;
  }
  uint64_t v250 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v251, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v251 = v97;
  }
  int v252 = v98;
  uint64_t v250 = &unk_26C5C3878;
  uint64_t v253 = v99;
  int v254 = v100;
  char v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v246, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  }
  else {
    std::string v246 = v92;
  }
  int v247 = v93;
  char v245 = &unk_26C5C3878;
  uint64_t v248 = v94;
  int v249 = v95;
  std::string v241 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v242, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  }
  else {
    std::string v242 = v88;
  }
  int v243 = v89;
  std::string v241 = &unk_26C5C3858;
  uint64_t v244 = v90;
  std::string v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v237, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v237 = v83;
  }
  int v238 = v84;
  std::string v236 = &unk_26C5C3818;
  char v239 = v85;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v240, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v240 = v86;
  }
  uint64_t v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v232, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v232 = v78;
  }
  int v233 = v79;
  uint64_t v231 = &unk_26C5C3818;
  char v234 = v80;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v81;
  }
  int v226 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v227, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else {
    std::string v227 = v73;
  }
  int v228 = v74;
  int v226 = &unk_26C5C3818;
  char v229 = v75;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = v76;
  }
  std::string v221 = &unk_26C5C3AF0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v68;
  }
  int v223 = v69;
  std::string v221 = &unk_26C5C3818;
  char v224 = v70;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v225, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v225 = v71;
  }
  std::string v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v218, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else {
    std::string v218 = v64;
  }
  int v219 = v65;
  std::string v217 = &unk_26C5C3858;
  uint64_t v220 = v66;
  int v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v214, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v214 = v60;
  }
  int v215 = v61;
  int v213 = &unk_26C5C3858;
  uint64_t v216 = v62;
  char v209 = &unk_26C5C3AF0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v56;
  }
  int v211 = v57;
  char v209 = &unk_26C5C3858;
  uint64_t v212 = v58;
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v50, (uint64_t)&v351, (uint64_t)&v347, (uint64_t)&v343, (uint64_t)&v338, (uint64_t)&v334, (uint64_t)&v329, (uint64_t)&v324, (uint64_t)&v319, (uint64_t)&v315, (uint64_t)&v310, (uint64_t)&v306, (uint64_t)&v302, (uint64_t)&v298, (uint64_t)&v294, (uint64_t)&v290, (uint64_t)&v285, (uint64_t)&v280, (uint64_t)&v275,
    (uint64_t)&v270,
    (uint64_t)&v265,
    (uint64_t)&v260,
    (uint64_t)&v255,
    (uint64_t)&v250,
    (uint64_t)&v245,
    (uint64_t)&v241,
    (uint64_t)&v236,
    (uint64_t)&v231,
    (uint64_t)&v226,
    (uint64_t)&v221,
    (uint64_t)&v217,
    (uint64_t)&v213,
    (uint64_t)&v209);
  char v209 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  std::string v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v221);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  std::string v241 = &unk_26C5C3AF0;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  char v245 = &unk_26C5C3AF0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v246.__r_.__value_.__l.__data_);
  }
  uint64_t v250 = &unk_26C5C3AF0;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v255);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v260);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v265);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v270);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v275);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v280);
  char v285 = &unk_26C5C3AF0;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v286.__r_.__value_.__l.__data_);
  }
  uint64_t v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  int v294 = &unk_26C5C3AF0;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v295.__r_.__value_.__l.__data_);
  }
  std::string v298 = &unk_26C5C3AF0;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  int v302 = &unk_26C5C3AF0;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  int v306 = &unk_26C5C3AF0;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v307.__r_.__value_.__l.__data_);
  }
  char v310 = &unk_26C5C3AF0;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v311.__r_.__value_.__l.__data_);
  }
  uint64_t v315 = &unk_26C5C3AF0;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v316.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v319);
  std::string v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v329);
  int v334 = &unk_26C5C3AF0;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v335.__r_.__value_.__l.__data_);
  }
  int v338 = &unk_26C5C3AF0;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v339.__r_.__value_.__l.__data_);
  }
  uint64_t v343 = &unk_26C5C3AF0;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v344.__r_.__value_.__l.__data_);
  }
  uint64_t v347 = &unk_26C5C3AF0;
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v348.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v351);
  *(void *)(v50 + 1760) = &unk_26C5C3AF0;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 1768), v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v50 + 1768) = v205;
  }
  *(_DWORD *)(v50 + 1792) = v206;
  *(void *)(v50 + 1760) = &unk_26C5C3818;
  *(unsigned char *)(v50 + 1796) = v207;
  uint64_t v51 = (std::string *)(v50 + 1800);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v51, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
    *(void *)(v50 + 1816) = *((void *)&v208.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  uint64_t v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  int v63 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v67);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v77);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v82);
  std::string v87 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  std::string v91 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  std::string v96 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v101);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v106);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v111);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v116);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v121);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v126);
  uint64_t v131 = &unk_26C5C3AF0;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  uint64_t v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  int v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string v144 = &unk_26C5C3AF0;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  std::string v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  std::string v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string v156 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  int v161 = &unk_26C5C3AF0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v165);
  std::string v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v177);
  int v182 = &unk_26C5C3AF0;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  int v186 = &unk_26C5C3AF0;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  uint64_t v191 = &unk_26C5C3AF0;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  uint64_t v195 = &unk_26C5C3AF0;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  *(void *)(v50 + 1824) = &unk_26C5C3AF0;
  uint64_t v52 = (std::string *)(v50 + 1832);
  if (*(char *)(v49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)(v49 + 8), *(void *)(v49 + 16));
  }
  else
  {
    long long v53 = *(_OWORD *)(v49 + 8);
    *(void *)(v50 + 1848) = *(void *)(v49 + 24);
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
  }
  *(_DWORD *)(v50 + 1856) = *(_DWORD *)(v49 + 32);
  *(void *)(v50 + 1824) = &unk_26C5C3878;
  uint64_t v54 = *(void *)(v49 + 36);
  *(_DWORD *)(v50 + 1868) = *(_DWORD *)(v49 + 44);
  *(void *)(v50 + 1860) = v54;
  return v50;
}

void sub_214E37E10(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

void sub_214E38764()
{
  STACK[0xF08] = v0;
  if (SLOBYTE(STACK[0xF27]) < 0) {
    operator delete((void *)STACK[0xF10]);
  }
  JUMPOUT(0x214E38498);
}

void sub_214E38780()
{
  STACK[0x7E8] = v0;
  if (SLOBYTE(STACK[0x807]) < 0) {
    operator delete((void *)STACK[0x7F0]);
  }
  JUMPOUT(0x214E386CCLL);
}

uint64_t std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E38890(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E389A4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AggregateFunctionQuery::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, mediaplatform::SQLSelectStatement **a3@<X8>)
{
  long long v6 = (std::__shared_weak_count *)a2[1];
  v54[0] = *a2;
  v54[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::RangeQuery::_SQLSelectStatement(a1, v54, a3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  if (v7 >= 4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown aggregate function");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, (&off_26422EC40)[v7]);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    std::string v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v48 = *a2;
    uint64_t v49 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v60);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    if (*(unsigned char *)(a1 + 64))
    {
      int v10 = (std::__shared_weak_count *)*((void *)&v60 + 1);
      long long v47 = v60;
      if (*((void *)&v60 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v60 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      mediaplatform::SQLExpressionList::SQLExpressionList(&p_size, (uint64_t *)&v47);
      char v11 = (std::__shared_weak_count *)operator new(0x58uLL);
      v11->__shared_owners_ = 0;
      v11->__shared_weak_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9D78;
      std::string::basic_string[abi:ne180100]<0>(&__p, "DISTINCT");
      mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)&v11[1], (long long *)&__p, (uint64_t)&p_size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_std::wstring::size_type size = (std::string::size_type *)&unk_26C5BED78;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      *(void *)&long long v45 = v11 + 1;
      *((void *)&v45 + 1) = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      mediaplatform::SQLExpressionList::SQLExpressionList(&__p, (uint64_t *)&v45);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string &,mediaplatform::SQLExpressionList,void>(&v47, (uint64_t)&v53, (uint64_t)&__p);
      long long v12 = v47;
      long long v47 = 0uLL;
      char v13 = v51;
      if ((unint64_t)v51 >= v52)
      {
        long long v43 = v12;
        int64_t v19 = (v51 - v50) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = (uint64_t)(v52 - (void)v50) >> 3;
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        if (v52 - (unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        uint64_t v59 = &v52;
        int v22 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
        char v23 = &v22[2 * v19];
        p_std::wstring::size_type size = (std::string::size_type *)v22;
        std::string v56 = v23;
        uint64_t v58 = &v22[2 * v24];
        *(_OWORD *)char v23 = v43;
        int v57 = v23 + 2;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v50, &p_size);
        char v14 = (uint64_t *)v51;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
      }
      else
      {
        *(_OWORD *)uint64_t v51 = v12;
        char v14 = (uint64_t *)(v13 + 16);
      }
      uint64_t v51 = (char *)v14;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BED78;
      p_std::wstring::size_type size = &__p.__r_.__value_.__l.__size_;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    else
    {
      char v11 = (std::__shared_weak_count *)*((void *)&v60 + 1);
      long long v45 = v60;
      if (*((void *)&v60 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v60 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      mediaplatform::SQLExpressionList::SQLExpressionList(&__p, (uint64_t *)&v45);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string &,mediaplatform::SQLExpressionList,void>(&v47, (uint64_t)&v53, (uint64_t)&__p);
      long long v16 = v47;
      long long v47 = 0uLL;
      char v17 = v51;
      if ((unint64_t)v51 >= v52)
      {
        long long v44 = v16;
        int64_t v35 = (v51 - v50) >> 4;
        if ((unint64_t)(v35 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = (uint64_t)(v52 - (void)v50) >> 3;
        if (v36 <= v35 + 1) {
          unint64_t v36 = v35 + 1;
        }
        if (v52 - (unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        uint64_t v59 = &v52;
        uint64_t v38 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v37);
        uint64_t v39 = &v38[2 * v35];
        p_std::wstring::size_type size = (std::string::size_type *)v38;
        std::string v56 = v39;
        uint64_t v58 = &v38[2 * v40];
        *(_OWORD *)uint64_t v39 = v44;
        int v57 = v39 + 2;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v50, &p_size);
        char v18 = (uint64_t *)v51;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
      }
      else
      {
        *(_OWORD *)uint64_t v51 = v16;
        char v18 = (uint64_t *)(v17 + 16);
      }
      uint64_t v51 = (char *)v18;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BED78;
      p_std::wstring::size_type size = &__p.__r_.__value_.__l.__size_;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
      if (!v11) {
        goto LABEL_56;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_56:
    if (*((void *)&v60 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
    }
    goto LABEL_58;
  }
  __n128 v15 = operator new(0x58uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = &unk_26C5C9D78;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v53;
  }
  long long v60 = 0uLL;
  uint64_t v61 = 0;
  p_std::wstring::size_type size = (std::string::size_type *)&unk_26C5BED78;
  std::string v56 = 0;
  int v57 = 0;
  uint64_t v58 = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&v56, 0, 0, 0);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v15 + 3), (long long *)&__p, (uint64_t)&p_size);
  p_std::wstring::size_type size = (std::string::size_type *)&unk_26C5BED78;
  *(void *)&long long v47 = &v56;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  *(void *)&long long v47 = &v60;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v25 = v51;
  if ((unint64_t)v51 >= v52)
  {
    int64_t v27 = (v51 - v50) >> 4;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v52 - (void)v50;
    if ((uint64_t)(v52 - (void)v50) >> 3 > v28) {
      unint64_t v28 = v29 >> 3;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    uint64_t v59 = &v52;
    char v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v30);
    *(void *)&long long v32 = v15 + 3;
    *((void *)&v32 + 1) = v15;
    char v33 = &v31[2 * v27];
    p_std::wstring::size_type size = (std::string::size_type *)v31;
    std::string v56 = v33;
    uint64_t v58 = &v31[2 * v34];
    *(_OWORD *)char v33 = v32;
    int v57 = v33 + 2;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v50, &p_size);
    char v26 = (uint64_t *)v51;
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
  }
  else
  {
    *(void *)uint64_t v51 = v15 + 3;
    *((void *)v25 + 1) = v15;
    char v26 = (uint64_t *)(v25 + 16);
  }
  uint64_t v51 = (char *)v26;
LABEL_58:
  uint64_t v41 = (uint64_t *)(*((void *)*a3 + 1) + 16);
  if (v41 != (uint64_t *)&v50) {
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v41, (uint64_t *)v50, (uint64_t *)v51, (v51 - v50) >> 4);
  }
  p_std::wstring::size_type size = (std::string::size_type *)&v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_214E38FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  *(void *)(v34 - 72) = &a24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 72));
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(void *)(v32 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v32 + 8));
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string &,mediaplatform::SQLExpressionList,void>(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = operator new(0x58uLL);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  void *v6 = &unk_26C5C9D78;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v6 + 3), (long long *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_214E392AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLFunctionExpression::SQLFunctionExpression(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5BF078;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = &unk_26C5BED78;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((void *)(a1 + 40), *(void **)(a3 + 8), *(void **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  return a1;
}

void sub_214E39394(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *mediaplatform::SQLExpressionList::SQLExpressionList(void *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C5BED78;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  long long v4 = operator new(0x10uLL);
  a1[3] = v4 + 2;
  a1[1] = v4;
  a1[2] = v4;
  a1[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a1 + 3), &v6, &v8, v4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_214E39490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

mlcore::PersonTable *mlcore::PersonTable::PersonTable(mlcore::PersonTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "person");
  std::string::basic_string[abi:ne180100]<0>(v64, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v66, (uint64_t)v64, 1);
  std::string::basic_string[abi:ne180100]<0>(v57, "cloud_id");
  std::string::basic_string[abi:ne180100]<0>(v55, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v59, (uint64_t)v57, (uint64_t)v55);
  std::string::basic_string[abi:ne180100]<0>(v48, "handle");
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v50, (uint64_t)v48, (uint64_t)v46);
  std::string::basic_string[abi:ne180100]<0>(v39, "name");
  std::string::basic_string[abi:ne180100]<0>(v37, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v41, (uint64_t)v39, (uint64_t)v37);
  std::string::basic_string[abi:ne180100]<0>(v30, "image_url");
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v32, (uint64_t)v30, (uint64_t)v28);
  std::string::basic_string[abi:ne180100]<0>(v21, "image_token");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v23, (uint64_t)v21, (uint64_t)v19);
  std::string::basic_string[abi:ne180100]<0>(v13, "lightweight_profile");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v15, (uint64_t)v13, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = __s;
  }
  int v101 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v102, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v102 = v67;
  }
  int v103 = v68;
  int v101 = &unk_26C5C3878;
  uint64_t v104 = v69;
  int v105 = v70;
  std::string v96 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v60;
  }
  int v98 = v61;
  std::string v96 = &unk_26C5C3818;
  char v99 = v62;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v63;
  }
  std::string v91 = &unk_26C5C3AF0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v92, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v92 = v51;
  }
  int v93 = v52;
  std::string v91 = &unk_26C5C3818;
  char v94 = v53;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v95, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v95 = v54;
  }
  std::string v86 = &unk_26C5C3AF0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v87, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  }
  else {
    std::string v87 = v42;
  }
  int v88 = v43;
  std::string v86 = &unk_26C5C3818;
  char v89 = v44;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v90, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v90 = v45;
  }
  std::string v81 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v82, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v82 = v33;
  }
  int v83 = v34;
  std::string v81 = &unk_26C5C3818;
  char v84 = v35;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v85, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v85 = v36;
  }
  std::string v76 = &unk_26C5C3AF0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v77, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v77 = v24;
  }
  int v78 = v25;
  std::string v76 = &unk_26C5C3818;
  char v79 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v27;
  }
  std::string v72 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v73, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = __p;
  }
  int v74 = v17;
  std::string v72 = &unk_26C5C3858;
  uint64_t v75 = v18;
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v106.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3398;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v137, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  }
  else {
    std::string v137 = v102;
  }
  int v138 = v103;
  uint64_t v136 = &unk_26C5C3878;
  uint64_t v139 = v104;
  int v140 = v105;
  uint64_t v131 = &unk_26C5C3AF0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v132, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v132 = v97;
  }
  int v133 = v98;
  uint64_t v131 = &unk_26C5C3818;
  char v134 = v99;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v135, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else {
    std::string v135 = v100;
  }
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v92;
  }
  int v128 = v93;
  char v126 = &unk_26C5C3818;
  char v129 = v94;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v130, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  }
  else {
    std::string v130 = v95;
  }
  uint64_t v121 = &unk_26C5C3AF0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v122, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  }
  else {
    std::string v122 = v87;
  }
  int v123 = v88;
  uint64_t v121 = &unk_26C5C3818;
  char v124 = v89;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v125, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v125 = v90;
  }
  int v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v82;
  }
  int v118 = v83;
  int v116 = &unk_26C5C3818;
  char v119 = v84;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v120, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else {
    std::string v120 = v85;
  }
  int v111 = &unk_26C5C3AF0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v77;
  }
  int v113 = v78;
  int v111 = &unk_26C5C3818;
  char v114 = v79;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v115, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  }
  else {
    std::string v115 = v80;
  }
  std::string v107 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v108, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else {
    std::string v108 = v73;
  }
  int v109 = v74;
  std::string v107 = &unk_26C5C3858;
  uint64_t v110 = v75;
  int v165 = &unk_26C5C3AF0;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v166, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  }
  else {
    std::string v166 = v132;
  }
  int v167 = v133;
  int v165 = &unk_26C5C3818;
  char v168 = v134;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v169, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else {
    std::string v169 = v135;
  }
  int v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v127;
  }
  int v162 = v128;
  int v160 = &unk_26C5C3818;
  char v163 = v129;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v164, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v164 = v130;
  }
  uint64_t v155 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v156, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v156 = v122;
  }
  int v157 = v123;
  uint64_t v155 = &unk_26C5C3818;
  char v158 = v124;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v159, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v159 = v125;
  }
  int v150 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v151, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v151 = v117;
  }
  int v152 = v118;
  int v150 = &unk_26C5C3818;
  char v153 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v120;
  }
  std::string v145 = &unk_26C5C3AF0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v146, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    std::string v146 = v112;
  }
  int v147 = v113;
  std::string v145 = &unk_26C5C3818;
  char v148 = v114;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v115;
  }
  std::string v141 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v142, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v142 = v108;
  }
  int v143 = v109;
  std::string v141 = &unk_26C5C3858;
  uint64_t v144 = v110;
  uint64_t v189 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = v161;
  }
  int v191 = v162;
  uint64_t v189 = &unk_26C5C3818;
  char v192 = v163;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v193, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  }
  else {
    std::string v193 = v164;
  }
  int v184 = &unk_26C5C3AF0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v185, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  }
  else {
    std::string v185 = v156;
  }
  int v186 = v157;
  int v184 = &unk_26C5C3818;
  char v187 = v158;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v188, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v188 = v159;
  }
  int v179 = &unk_26C5C3AF0;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v180, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  }
  else {
    std::string v180 = v151;
  }
  int v181 = v152;
  int v179 = &unk_26C5C3818;
  char v182 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v183, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else {
    std::string v183 = v154;
  }
  int v174 = &unk_26C5C3AF0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v175, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  }
  else {
    std::string v175 = v146;
  }
  int v176 = v147;
  int v174 = &unk_26C5C3818;
  char v177 = v148;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v178, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v178 = v149;
  }
  uint64_t v170 = &unk_26C5C3AF0;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v171, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string v171 = v142;
  }
  int v172 = v143;
  uint64_t v170 = &unk_26C5C3858;
  uint64_t v173 = v144;
  std::string v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v209, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else {
    std::string v209 = v185;
  }
  int v210 = v186;
  std::string v208 = &unk_26C5C3818;
  char v211 = v187;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v212, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  }
  else {
    std::string v212 = v188;
  }
  std::string v203 = &unk_26C5C3AF0;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v204, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  }
  else {
    std::string v204 = v180;
  }
  int v205 = v181;
  std::string v203 = &unk_26C5C3818;
  char v206 = v182;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v207, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else {
    std::string v207 = v183;
  }
  uint64_t v198 = &unk_26C5C3AF0;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v199, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else {
    std::string v199 = v175;
  }
  int v200 = v176;
  uint64_t v198 = &unk_26C5C3818;
  char v201 = v177;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v202, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  }
  else {
    std::string v202 = v178;
  }
  uint64_t v194 = &unk_26C5C3AF0;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v195, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else {
    std::string v195 = v171;
  }
  int v196 = v172;
  uint64_t v194 = &unk_26C5C3858;
  uint64_t v197 = v173;
  std::string v222 = &unk_26C5C3AF0;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v223, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else {
    std::string v223 = v204;
  }
  int v224 = v205;
  std::string v222 = &unk_26C5C3818;
  char v225 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v226, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  }
  else {
    std::string v226 = v207;
  }
  std::string v217 = &unk_26C5C3AF0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v218, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  }
  else {
    std::string v218 = v199;
  }
  int v219 = v200;
  std::string v217 = &unk_26C5C3818;
  char v220 = v201;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v202;
  }
  int v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v214, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  }
  else {
    std::string v214 = v195;
  }
  int v215 = v196;
  int v213 = &unk_26C5C3858;
  uint64_t v216 = v197;
  uint64_t v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v232, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  }
  else {
    std::string v232 = v218;
  }
  int v233 = v219;
  uint64_t v231 = &unk_26C5C3818;
  char v234 = v220;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v221;
  }
  std::string v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v228, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  }
  else {
    std::string v228 = v214;
  }
  int v3 = v215;
  int v229 = v215;
  std::string v227 = &unk_26C5C3858;
  uint64_t v4 = v216;
  uint64_t v230 = v216;
  std::string v236 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v237, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
    int v3 = v229;
    uint64_t v4 = v230;
  }
  else
  {
    std::string v237 = v228;
  }
  int v238 = v3;
  std::string v236 = &unk_26C5C3858;
  uint64_t v239 = v4;
  *((void *)this + 10) = &unk_26C5C3AF0;
  char v5 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
    int v3 = v238;
    uint64_t v4 = v239;
    char v5 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v237;
  }
  *((_DWORD *)this + 28) = v3;
  *((void *)this + 10) = &unk_26C5C3858;
  *(void *)((char *)this + 116) = v4;
  std::string v236 = &unk_26C5C3AF0;
  if (v5 < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 136) = v232;
  }
  *((_DWORD *)this + 40) = v233;
  *((void *)this + 16) = &unk_26C5C3818;
  *((unsigned char *)this + 164) = v234;
  uint64_t v6 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
    *((void *)this + 23) = *((void *)&v235.__r_.__value_.__l + 2);
  }
  std::string v227 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  *((void *)this + 24) = &unk_26C5C3AF0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 200) = v223;
  }
  *((_DWORD *)this + 56) = v224;
  *((void *)this + 24) = &unk_26C5C3818;
  *((unsigned char *)this + 228) = v225;
  uint64_t v7 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v226.__r_.__value_.__l.__data_;
    *((void *)this + 31) = *((void *)&v226.__r_.__value_.__l + 2);
  }
  int v213 = &unk_26C5C3AF0;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v217);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  *((void *)this + 32) = &unk_26C5C3AF0;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)this + 11, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  }
  else {
    *((std::string *)this + 11) = v209;
  }
  *((_DWORD *)this + 72) = v210;
  *((void *)this + 32) = &unk_26C5C3818;
  *((unsigned char *)this + 292) = v211;
  uint64_t v8 = (std::string *)((char *)this + 296);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
    *((void *)this + 39) = *((void *)&v212.__r_.__value_.__l + 2);
  }
  uint64_t v194 = &unk_26C5C3AF0;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v198);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v208);
  *((void *)this + 40) = &unk_26C5C3AF0;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 328) = v190;
  }
  *((_DWORD *)this + 88) = v191;
  *((void *)this + 40) = &unk_26C5C3818;
  *((unsigned char *)this + 356) = v192;
  std::string v9 = (std::string *)((char *)this + 360);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    *((void *)this + 47) = *((void *)&v193.__r_.__value_.__l + 2);
  }
  uint64_t v170 = &unk_26C5C3AF0;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v174);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v184);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  *((void *)this + 48) = &unk_26C5C3AF0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 392) = v166;
  }
  *((_DWORD *)this + 104) = v167;
  *((void *)this + 48) = &unk_26C5C3818;
  *((unsigned char *)this + 420) = v168;
  int v10 = (std::string *)((char *)this + 424);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
    *((void *)this + 55) = *((void *)&v169.__r_.__value_.__l + 2);
  }
  std::string v141 = &unk_26C5C3AF0;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v155);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v165);
  *((void *)this + 56) = &unk_26C5C3AF0;
  char v11 = (std::string *)((char *)this + 456);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
    *((void *)this + 59) = *((void *)&v137.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 120) = v138;
  *((void *)this + 56) = &unk_26C5C3878;
  *(void *)((char *)this + 484) = v139;
  *((_DWORD *)this + 123) = v140;
  std::string v107 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v111);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v116);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v121);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v126);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v131);
  uint64_t v136 = &unk_26C5C3AF0;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  std::string v72 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v81);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v86);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v91);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v96);
  int v101 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C3EC8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 496, (uint64_t)&v66);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 544, (uint64_t)v59);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 608, (uint64_t)v50);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 672, (uint64_t)v41);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 736, (uint64_t)v32);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 800, (uint64_t)v23);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 864, (uint64_t)&v15);
  __n128 v15 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v23);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v32);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v41);
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v50);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v59);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  uint64_t v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C4860;
  return this;
}

void sub_214E3B680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a19);
  STACK[0x530] = a24;
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x560]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5A0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5E0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x620]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x660]);
  STACK[0x6A0] = a25;
  if (SLOBYTE(STACK[0x6BF]) < 0) {
    operator delete((void *)STACK[0x6A8]);
  }
  if (*(char *)(v78 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v78);
  STACK[0x370] = a26;
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x3A0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x3E0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x420]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x460]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x4A0]);
  STACK[0x4E0] = a27;
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a55);
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a78);
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x260]);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  STACK[0x328] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  _Unwind_Resume(a1);
}

void sub_214E3BF2C()
{
}

void sub_214E3BF34()
{
}

void sub_214E3BF3C()
{
}

void sub_214E3BF44()
{
}

void sub_214E3BF4C()
{
}

void sub_214E3BF54()
{
}

void sub_214E3BF5C()
{
}

void sub_214E3BF64()
{
}

void sub_214E3BF6C()
{
}

void sub_214E3BF74()
{
}

void sub_214E3BF7C()
{
}

void sub_214E3BF84()
{
}

void sub_214E3BF8C()
{
}

void sub_214E3BF94()
{
}

void sub_214E3BF9C()
{
}

void sub_214E3BFA4()
{
}

void sub_214E3BFAC()
{
}

void sub_214E3BFB4()
{
}

void sub_214E3BFBC()
{
}

uint64_t mlcore::MediaColumn<long long>::MediaColumn(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)(a1 + 8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = a3;
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v9.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = a3;
  }
  *(void *)a1 = &unk_26C5C3878;
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 0;
  if (v5 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C47E8;
  return a1;
}

void sub_214E3C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(v9);
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E3C210(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mlcore::ItemKVSTable *mlcore::ItemKVSTable::ItemKVSTable(mlcore::ItemKVSTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "item_kvs");
  std::string::basic_string[abi:ne180100]<0>(v8, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v10, (uint64_t)v8, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "key");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,std::string>::MediaTable((uint64_t)this, (uint64_t)v12, (uint64_t)v10, (uint64_t)v7);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  v10[0] = &unk_26C5C3AF0;
  if (v11 < 0) {
    operator delete((void *)v10[1]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *(void *)this = &unk_26C5C4B58;
  return this;
}

void sub_214E3C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a21);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  *(void *)(v34 - 88) = &unk_26C5C3AF0;
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 17) < 0) {
    operator delete(*(void **)(v34 - 40));
  }
  _Unwind_Resume(a1);
}

mlcore::BaseLocationTable *mlcore::BaseLocationTable::BaseLocationTable(mlcore::BaseLocationTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "base_location");
  std::string::basic_string[abi:ne180100]<0>(v6, "base_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v8, (uint64_t)v6, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v5, (uint64_t)__p, 16);
  mlcore::MediaTable<long long,std::string>::MediaTable((uint64_t)this, (uint64_t)v10, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  v8[0] = &unk_26C5C3AF0;
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *(void *)this = &unk_26C5C7380;
  return this;
}

void sub_214E3C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v29 - 88) = &unk_26C5C3AF0;
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 17) < 0) {
    operator delete(*(void **)(v29 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaTable<long long,std::string>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v16 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string __p = *(std::string *)(a3 + 8);
  }
  int v18 = *(_DWORD *)(a3 + 32);
  long long v16 = &unk_26C5C3878;
  uint64_t v19 = *(void *)(a3 + 36);
  int v20 = *(_DWORD *)(a3 + 44);
  char v11 = &unk_26C5C3AF0;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string v12 = *(std::string *)(a4 + 8);
  }
  int v13 = *(_DWORD *)(a4 + 32);
  char v11 = &unk_26C5C3818;
  char v14 = *(unsigned char *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a4 + 40), *(void *)(a4 + 48));
  }
  else {
    std::string v15 = *(std::string *)(a4 + 40);
  }
  *(void *)a1 = &unk_26C5BED18;
  char v7 = (std::string *)(a1 + 8);
  int v8 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v21.__r_.__value_.__l + 2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C5C3280;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::string v27 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = __p;
  }
  int v29 = v18;
  std::string v27 = &unk_26C5C3878;
  uint64_t v30 = v19;
  int v31 = v20;
  char v22 = &unk_26C5C3AF0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v12;
  }
  int v24 = v13;
  char v22 = &unk_26C5C3818;
  char v25 = v14;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v15;
  }
  uint64_t v32 = &unk_26C5C3AF0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v23;
  }
  int v34 = v24;
  uint64_t v32 = &unk_26C5C3818;
  char v35 = v25;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v26;
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(a1 + 80, (uint64_t)&v32);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v32);
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  char v9 = (std::string *)(a1 + 152);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *(void *)(a1 + 168) = *((void *)&v28.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 176) = v29;
  *(void *)(a1 + 144) = &unk_26C5C3878;
  *(void *)(a1 + 180) = v30;
  *(_DWORD *)(a1 + 188) = v31;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v22);
  std::string v27 = &unk_26C5C3AF0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v11);
  long long v16 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    operator delete(v21.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
  if (v8 < 0) {
    goto LABEL_40;
  }
LABEL_38:
  *(void *)a1 = &unk_26C5C3DB0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 192, a3);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 240, a4);
  return a1;
}

void sub_214E3CAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v45);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a37);
  *(void *)(v46 - 200) = v44;
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  if (*(char *)(v43 + 79) < 0) {
    operator delete(*a9);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v43);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a11);
  a22 = a10;
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E3CD30(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_214E3CE28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyEpisodeSortID(void)::$_0 &&>>()
{
}

void sub_214E3D010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSortID(void)::$_0 &&>>()
{
}

void sub_214E3D288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::episodeSortIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3039) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 377), *((void *)this + 378));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3016);
    *(void *)(a2 + 24) = *((void *)this + 379);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 760);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3044);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::$_0 &&>>()
{
}

void sub_214E3D578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::fetchableArtworkTokenColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 644);
  int v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 81), *((void *)this + 82));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(void *)(a2 + 56) = *((void *)this + 83);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E3D6FC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyEntityType(void)::$_0 &&>>()
{
}

void sub_214E3D8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::entityTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((void *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(void *)(a2 + 24) = *((void *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(void *)(a2 + 36) = *(void *)((char *)this + 484);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::$_0 &&>>()
{
}

void sub_214E3DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::fetchableArtworkSourceTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 85), *((void *)this + 86));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 680);
    *(void *)(a2 + 24) = *((void *)this + 87);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 176);
  *(void *)(a2 + 36) = *(void *)((char *)this + 708);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::$_0 &&>>()
{
}

void sub_214E3DEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyArtworkType(void)::$_0 &&>>()
{
}

void sub_214E3E13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance(void)::_sharedInstance;
}

void sub_214E3E264(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__sharedPointer;
}

mlcore::BestArtworkTokenTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore21BestArtworkTokenTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::BestArtworkTokenTable **a1)
{
  uint64_t v2 = operator new(0x2E8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26C5CAD00;
  uint64_t result = mlcore::BestArtworkTokenTable::BestArtworkTokenTable((mlcore::BestArtworkTokenTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::BestArtworkTokenTable *)v2;
  return result;
}

void sub_214E3E358(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mlcore::BestArtworkTokenTable::availableArtworkTokenColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((void *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(void *)(a2 + 24) = *((void *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 580);
  int v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 607) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 73), *((void *)this + 74));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 584);
    *(void *)(a2 + 56) = *((void *)this + 75);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_214E3E468(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::artworkTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((void *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(void *)(a2 + 24) = *((void *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(void *)(a2 + 36) = *(void *)((char *)this + 532);
  *(void *)a2 = &unk_26C5C47C8;
}

mlcore::BestArtworkTokenTable *mlcore::BestArtworkTokenTable::BestArtworkTokenTable(mlcore::BestArtworkTokenTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "best_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v49, "entity_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v51, (uint64_t)v49);
  std::string::basic_string[abi:ne180100]<0>(v43, "entity_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v45, (uint64_t)v43, 0);
  std::string::basic_string[abi:ne180100]<0>(v37, "artwork_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v39, (uint64_t)v37, 0);
  std::string::basic_string[abi:ne180100]<0>(v30, "available_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v32, (uint64_t)v30, (uint64_t)v28);
  std::string::basic_string[abi:ne180100]<0>(v21, "fetchable_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v23, (uint64_t)v21, (uint64_t)v19);
  std::string::basic_string[abi:ne180100]<0>(v13, "fetchable_artwork_source_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v15, (uint64_t)v13, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = __s;
  }
  char v79 = &unk_26C5C3AF0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v52;
  }
  int v81 = v53;
  char v79 = &unk_26C5C3878;
  uint64_t v82 = v54;
  int v83 = v55;
  uint64_t v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = v46;
  }
  int v77 = v47;
  uint64_t v75 = &unk_26C5C3858;
  uint64_t v78 = v48;
  std::string v71 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v72, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v72 = v40;
  }
  int v73 = v41;
  std::string v71 = &unk_26C5C3858;
  uint64_t v74 = v42;
  uint64_t v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v33;
  }
  int v68 = v34;
  uint64_t v66 = &unk_26C5C3818;
  char v69 = v35;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v70, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = v36;
  }
  int v61 = &unk_26C5C3AF0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = v24;
  }
  int v63 = v25;
  int v61 = &unk_26C5C3818;
  char v64 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v27;
  }
  int v57 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = __p;
  }
  int v59 = v17;
  int v57 = &unk_26C5C3858;
  uint64_t v60 = v18;
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  int v11 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v84.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C34B0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::string v107 = &unk_26C5C3AF0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v108, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  }
  else {
    std::string v108 = v80;
  }
  int v109 = v81;
  std::string v107 = &unk_26C5C3878;
  uint64_t v110 = v82;
  int v111 = v83;
  int v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v104, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v104 = v76;
  }
  int v105 = v77;
  int v103 = &unk_26C5C3858;
  uint64_t v106 = v78;
  char v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v72;
  }
  int v101 = v73;
  char v99 = &unk_26C5C3858;
  uint64_t v102 = v74;
  char v94 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v95, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v95 = v67;
  }
  int v96 = v68;
  char v94 = &unk_26C5C3818;
  char v97 = v69;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v98, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v98 = v70;
  }
  char v89 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v90, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v90 = v62;
  }
  int v91 = v63;
  char v89 = &unk_26C5C3818;
  char v92 = v64;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v93, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v93 = v65;
  }
  std::string v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v58;
  }
  int v87 = v59;
  std::string v85 = &unk_26C5C3858;
  uint64_t v88 = v60;
  std::string v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v104;
  }
  int v132 = v105;
  std::string v130 = &unk_26C5C3858;
  uint64_t v133 = v106;
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v100;
  }
  int v128 = v101;
  char v126 = &unk_26C5C3858;
  uint64_t v129 = v102;
  uint64_t v121 = &unk_26C5C3AF0;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v122, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  }
  else {
    std::string v122 = v95;
  }
  int v123 = v96;
  uint64_t v121 = &unk_26C5C3818;
  char v124 = v97;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v125, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else {
    std::string v125 = v98;
  }
  int v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v90;
  }
  int v118 = v91;
  int v116 = &unk_26C5C3818;
  char v119 = v92;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v120, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string v120 = v93;
  }
  std::string v112 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v113, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v113 = v86;
  }
  int v114 = v87;
  std::string v112 = &unk_26C5C3858;
  uint64_t v115 = v88;
  char v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v127;
  }
  int v150 = v128;
  char v148 = &unk_26C5C3858;
  uint64_t v151 = v129;
  int v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v122;
  }
  int v145 = v123;
  int v143 = &unk_26C5C3818;
  char v146 = v124;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v125;
  }
  int v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v139, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v139 = v117;
  }
  int v140 = v118;
  int v138 = &unk_26C5C3818;
  char v141 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v142, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v142 = v120;
  }
  char v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v135, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v135 = v113;
  }
  int v136 = v114;
  char v134 = &unk_26C5C3858;
  uint64_t v137 = v115;
  std::string v161 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v162, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v162 = v144;
  }
  int v163 = v145;
  std::string v161 = &unk_26C5C3818;
  char v164 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v147;
  }
  std::string v156 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v139;
  }
  int v158 = v140;
  std::string v156 = &unk_26C5C3818;
  char v159 = v141;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v160, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string v160 = v142;
  }
  int v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v153, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else {
    std::string v153 = v135;
  }
  int v154 = v136;
  int v152 = &unk_26C5C3858;
  uint64_t v155 = v137;
  uint64_t v170 = &unk_26C5C3AF0;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v171, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v171 = v157;
  }
  int v172 = v158;
  uint64_t v170 = &unk_26C5C3818;
  char v173 = v159;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v160;
  }
  std::string v166 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v167, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else {
    std::string v167 = v153;
  }
  int v3 = v154;
  int v168 = v154;
  std::string v166 = &unk_26C5C3858;
  uint64_t v4 = v155;
  uint64_t v169 = v155;
  std::string v175 = &unk_26C5C3AF0;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v176, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
    int v3 = v168;
    uint64_t v4 = v169;
  }
  else
  {
    std::string v176 = v167;
  }
  int v177 = v3;
  std::string v175 = &unk_26C5C3858;
  uint64_t v178 = v4;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v175);
  std::string v175 = &unk_26C5C3AF0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v176.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 136) = v171;
  }
  *((_DWORD *)this + 40) = v172;
  *((void *)this + 16) = &unk_26C5C3818;
  *((unsigned char *)this + 164) = v173;
  int v5 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v174.__r_.__value_.__l.__data_;
    *((void *)this + 23) = *((void *)&v174.__r_.__value_.__l + 2);
  }
  std::string v166 = &unk_26C5C3AF0;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v167.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v170);
  *((void *)this + 24) = &unk_26C5C3AF0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 200) = v162;
  }
  *((_DWORD *)this + 56) = v163;
  *((void *)this + 24) = &unk_26C5C3818;
  *((unsigned char *)this + 228) = v164;
  long long v6 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *((void *)this + 31) = *((void *)&v165.__r_.__value_.__l + 2);
  }
  int v152 = &unk_26C5C3AF0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v156);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v161);
  *((void *)this + 32) = &unk_26C5C3AF0;
  char v7 = (std::string *)((char *)this + 264);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    *((void *)this + 35) = *((void *)&v149.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 72) = v150;
  *((void *)this + 32) = &unk_26C5C3858;
  *(void *)((char *)this + 292) = v151;
  char v134 = &unk_26C5C3AF0;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v138);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v143);
  char v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  *((void *)this + 38) = &unk_26C5C3AF0;
  int v8 = (std::string *)((char *)this + 312);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
    *((void *)this + 41) = *((void *)&v131.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 84) = v132;
  *((void *)this + 38) = &unk_26C5C3858;
  *(void *)((char *)this + 340) = v133;
  std::string v112 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v116);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v121);
  char v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  std::string v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  *((void *)this + 44) = &unk_26C5C3AF0;
  char v9 = (std::string *)((char *)this + 360);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
    *((void *)this + 47) = *((void *)&v108.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 96) = v109;
  *((void *)this + 44) = &unk_26C5C3878;
  *(void *)((char *)this + 388) = v110;
  *((_DWORD *)this + 99) = v111;
  std::string v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v89);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v94);
  char v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  int v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string v107 = &unk_26C5C3AF0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  int v57 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v61);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v66);
  std::string v71 = &unk_26C5C3AF0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  uint64_t v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  char v79 = &unk_26C5C3AF0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C3FE0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 400, (uint64_t)&v51);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 448, (uint64_t)&v45);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 496, (uint64_t)&v39);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 544, (uint64_t)v32);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 608, (uint64_t)v23);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 672, (uint64_t)&v15);
  std::string v15 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v23);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v32);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  uint64_t v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  uint64_t v45 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  std::string v51 = &unk_26C5C3AF0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C7C60;
  std::string::basic_string[abi:ne180100]<0>(&__str, "UNIQUE (entity_pid, entity_type, artwork_type)");
  std::string::operator=((std::string *)((char *)this + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_214E3FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v79);
  STACK[0x430] = a21;
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x460]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x4A0]);
  STACK[0x4E0] = a22;
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  STACK[0x510] = a23;
  if (SLOBYTE(STACK[0x52F]) < 0) {
    operator delete((void *)STACK[0x518]);
  }
  STACK[0x540] = a24;
  if (SLOBYTE(STACK[0x55F]) < 0) {
    operator delete((void *)STACK[0x548]);
  }
  if (*(char *)(v78 + 79) < 0) {
    operator delete(*a16);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v78);
  STACK[0x2D0] = a25;
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x300]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x340]);
  STACK[0x380] = a26;
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  STACK[0x3B0] = a27;
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  STACK[0x3E0] = a28;
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a59);
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a75);
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  a78 = &unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  STACK[0x240] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  STACK[0x288] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  _Unwind_Resume(a1);
}

void sub_214E405A4()
{
}

void sub_214E405AC()
{
}

void sub_214E405B4()
{
}

void sub_214E405BC()
{
}

void sub_214E405C4()
{
}

void sub_214E405CC()
{
}

void sub_214E405D4()
{
}

void sub_214E405DC()
{
}

void sub_214E405E4()
{
}

void sub_214E405EC()
{
}

void sub_214E405F4()
{
}

void sub_214E405FC()
{
}

void sub_214E40604()
{
}

void sub_214E4060C()
{
}

uint64_t std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E40708(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *mlcore::LanguageResources::LanguageResources(std::string *a1, uint64_t a2, long long **a3, long long *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)a1, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  int v8 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)&a1[3], *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  int v10 = a1 + 4;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    a1[4].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return a1;
}

void sub_214E4084C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(v2);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>()
{
}

void sub_214E40A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::classicalExperienceAvailableColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1967) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 243), *((void *)this + 244));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1944);
    *(void *)(a2 + 24) = *((void *)this + 245);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 492);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1972);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
}

void sub_214E40D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::keepLocalStatusReasonColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3327) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 413), *((void *)this + 414));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3304);
    *(void *)(a2 + 24) = *((void *)this + 415);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 832);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3332);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowComposerAsArtist(void)::$_0 &&>>()
{
}

void sub_214E41094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::showComposerColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 443), *((void *)this + 444));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3544);
    *(void *)(a2 + 24) = *((void *)this + 445);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 892);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3572);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRememberBookmarkTime(void)::$_0 &&>>()
{
}

void sub_214E413AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStatsTable::rememberBookmarkColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1775) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 219), *((void *)this + 220));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1752);
    *(void *)(a2 + 24) = *((void *)this + 221);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 444);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1780);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyExcludeFromShuffle(void)::$_0 &&>>()
{
}

void sub_214E416C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::excludeFromShuffleColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 395), *((void *)this + 396));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3160);
    *(void *)(a2 + 24) = *((void *)this + 397);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 796);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3188);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrderSection(void)::$_0 &&>>()
{
}

void sub_214E419DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::titleOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 257), *((void *)this + 258));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2056);
    *(void *)(a2 + 24) = *((void *)this + 259);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 520);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2084);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatus(void)::$_0 &&>>()
{
}

void sub_214E41CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::keepLocalStatusColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3279) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 407), *((void *)this + 408));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3256);
    *(void *)(a2 + 24) = *((void *)this + 409);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 820);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3284);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedState(void)::$_0 &&>>()
{
}

void sub_214E4200C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::likedStateColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2015) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 249), *((void *)this + 250));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1992);
    *(void *)(a2 + 24) = *((void *)this + 251);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 504);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2020);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTrackNumber(void)::$_0 &&>>()
{
}

void sub_214E42324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::trackNumberColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2991) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 371), *((void *)this + 372));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2968);
    *(void *)(a2 + 24) = *((void *)this + 373);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 748);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2996);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyInMyLibrary(void)::$_0 &&>>()
{
}

void sub_214E4263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::inMyLibraryColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3423) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 425), *((void *)this + 426));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3400);
    *(void *)(a2 + 24) = *((void *)this + 427);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 856);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3428);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyUserRating(void)::$_0 &&>>()
{
}

void sub_214E42954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStatsTable::userRatingColumn(mlcore::ItemStatsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 145), *((void *)this + 146));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1160);
    *(void *)(a2 + 24) = *((void *)this + 147);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 296);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1188);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscNumber(void)::$_0 &&>>()
{
}

void sub_214E42C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::discNumberColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2943) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 365), *((void *)this + 366));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2920);
    *(void *)(a2 + 24) = *((void *)this + 367);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 736);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2948);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaType(void)::$_0 &&>>()
{
}

void sub_214E42F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::mediaTypeColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((void *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(void *)(a2 + 24) = *((void *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1988);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocal(void)::$_0 &&>>()
{
}

void sub_214E4329C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::keepLocalColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3231) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 401), *((void *)this + 402));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3208);
    *(void *)(a2 + 24) = *((void *)this + 403);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 808);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3236);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
}

void sub_214E435B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::representativeItemPersistentIDColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1535) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 189), *((void *)this + 190));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1512);
    *(void *)(a2 + 24) = *((void *)this + 191);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 384);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 387);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1540);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumArtistPersistentID(void)::$_0 &&>>()
{
}

void sub_214E438D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::albumArtistPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 311), *((void *)this + 312));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(void *)(a2 + 24) = *((void *)this + 313);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 628);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 631);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2516);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistPersistentID(void)::$_0 &&>>()
{
}

void sub_214E43BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::itemArtistPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 263), *((void *)this + 264));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2104);
    *(void *)(a2 + 24) = *((void *)this + 265);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 532);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 535);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2132);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerPersistentID(void)::$_0 &&>>()
{
}

void sub_214E43F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::composerPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2655) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 329), *((void *)this + 330));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2632);
    *(void *)(a2 + 24) = *((void *)this + 331);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 664);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 667);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2660);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAudioCapability(void)::$_0 &&>>()
{
}

void sub_214E44234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hlsAudioCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3951) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 491), *((void *)this + 492));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3928);
    *(void *)(a2 + 24) = *((void *)this + 493);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 988);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 991);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3956);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenrePersistentID(void)::$_0 &&>>()
{
}

void sub_214E44554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::genrePersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2799) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 347), *((void *)this + 348));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2776);
    *(void *)(a2 + 24) = *((void *)this + 349);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 700);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 703);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2804);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumPersistentID(void)::$_0 &&>>()
{
}

void sub_214E44874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::albumPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 293), *((void *)this + 294));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2344);
    *(void *)(a2 + 24) = *((void *)this + 295);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 592);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 595);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2372);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRemoteLocationID(void)::$_0 &&>>()
{
}

void sub_214E44B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::remoteLocationIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 389), *((void *)this + 390));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3112);
    *(void *)(a2 + 24) = *((void *)this + 391);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 784);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 787);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3140);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaylistID(void)::$_0 &&>>()
{
}

void sub_214E44EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storePlaylistIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3455) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 429), *((void *)this + 430));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3432);
    *(void *)(a2 + 24) = *((void *)this + 431);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 864);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 867);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3460);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrder(void)::$_0 &&>>()
{
}

void sub_214E451D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::seriesNameOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2271) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 281), *((void *)this + 282));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2248);
    *(void *)(a2 + 24) = *((void *)this + 283);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 568);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 571);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2276);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrder(void)::$_0 &&>>()
{
}

void sub_214E454F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::itemArtistOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((void *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(void *)(a2 + 24) = *((void *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 547);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2180);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAssetTraits(void)::$_0 &&>>()
{
}

void sub_214E45814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hlsAssetTraits(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3999) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 497), *((void *)this + 498));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3976);
    *(void *)(a2 + 24) = *((void *)this + 499);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1000);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1003);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4004);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E45B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::persistentIDColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 145), *((void *)this + 146));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1160);
    *(void *)(a2 + 24) = *((void *)this + 147);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 296);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 299);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1188);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingID(void)::$_0 &&>>()
{
}

void sub_214E45E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::homeSharingIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3919) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 487), *((void *)this + 488));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3896);
    *(void *)(a2 + 24) = *((void *)this + 489);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 980);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 983);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3924);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrder(void)::$_0 &&>>()
{
}

void sub_214E46174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::composerOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 335), *((void *)this + 336));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2680);
    *(void *)(a2 + 24) = *((void *)this + 337);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 676);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 679);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2708);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMusicShow(void)::$_0 &&>>()
{
}

void sub_214E46494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::isMusicShowColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3615) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 449), *((void *)this + 450));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3592);
    *(void *)(a2 + 24) = *((void *)this + 451);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 904);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 907);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3620);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeType(void)::$_0 &&>>()
{
}

void sub_214E467B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::episodeTypeColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3407) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 423), *((void *)this + 424));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3384);
    *(void *)(a2 + 24) = *((void *)this + 425);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 852);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 855);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3412);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrder(void)::$_0 &&>>()
{
}

void sub_214E46AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::albumArtistOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 317), *((void *)this + 318));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2536);
    *(void *)(a2 + 24) = *((void *)this + 319);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 640);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 643);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2564);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrder(void)::$_0 &&>>()
{
}

void sub_214E46DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::albumOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 299), *((void *)this + 300));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2392);
    *(void *)(a2 + 24) = *((void *)this + 301);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 604);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 607);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2420);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateAdded(void)::$_0 &&>>()
{
}

void sub_214E47114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemTable::dateAddedColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 437), *((void *)this + 438));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3496);
    *(void *)(a2 + 24) = *((void *)this + 439);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 880);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 883);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3524);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyStoreID(void)::$_0 &&>>()
{
}

void sub_214E47434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::storeIDColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((void *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(void *)(a2 + 24) = *((void *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1492);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrder(void)::$_0 &&>>()
{
}

void sub_214E47754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumArtistTable::sortOrderColumn(mlcore::AlbumArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2111) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 261), *((void *)this + 262));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2088);
    *(void *)(a2 + 24) = *((void *)this + 263);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 528);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 531);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2116);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncID(void)::$_0 &&>>()
{
}

void sub_214E47A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::syncIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3871) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 481), *((void *)this + 482));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3848);
    *(void *)(a2 + 24) = *((void *)this + 483);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 968);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 971);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3876);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsExplicit(void)::$_0 &&>>()
{
}

void sub_214E47D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::$_0 &&>>()
{
}

void sub_214E47F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaborationInvitationURLExpirationDateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1109), *((void *)this + 1110));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8872);
    *(void *)(a2 + 24) = *((void *)this + 1111);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2224);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2227);
  *(void *)(a2 + 36) = *(void *)((char *)this + 8900);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::$_0 &&>>()
{
}

void sub_214E4824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaborationJoinRequestPendingColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8943;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1115), *((void *)this + 1116));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8920);
    *(void *)(a2 + 24) = *((void *)this + 1117);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2236);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::$_0 &&>>()
{
}

void sub_214E48574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isExternalVendorPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7935;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 989), *((void *)this + 990));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7912);
    *(void *)(a2 + 24) = *((void *)this + 991);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1984);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorPermissions(void)::$_0 &&>>()
{
}

void sub_214E4889C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaboratorPermissionsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8719;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1087), *((void *)this + 1088));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8696);
    *(void *)(a2 + 24) = *((void *)this + 1089);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2180);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
}

void sub_214E48BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::likedStateChangedDateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1069), *((void *)this + 1070));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8552);
    *(void *)(a2 + 24) = *((void *)this + 1071);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2147);
  *(void *)(a2 + 36) = *(void *)((char *)this + 8580);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
}

void sub_214E48EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::keepLocalStatusReasonColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7647;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 953), *((void *)this + 954));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7624);
    *(void *)(a2 + 24) = *((void *)this + 955);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1912);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaybackEndpointType(void)::$_0 &&>>()
{
}

void sub_214E49214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::playbackEndpointTypeColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5343) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 665), *((void *)this + 666));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5320);
    *(void *)(a2 + 24) = *((void *)this + 667);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1336);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1339);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5348);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
}

void sub_214E4953C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::keepLocalConstraintsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7695;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 959), *((void *)this + 960));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7672);
    *(void *)(a2 + 24) = *((void *)this + 961);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1924);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySubscriptionStoreItemID(void)::$_0 &&>>()
{
}

void sub_214E49864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::subscriptionStoreItemIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5295) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 659), *((void *)this + 660));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5272);
    *(void *)(a2 + 24) = *((void *)this + 661);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1324);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1327);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5300);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyShouldDisplayIndex(void)::$_0 &&>>()
{
}

void sub_214E49B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::shouldDisplayIndexColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8319;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1037), *((void *)this + 1038));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8296);
    *(void *)(a2 + 24) = *((void *)this + 1039);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2080);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyParentPersistentID(void)::$_0 &&>>()
{
}

void sub_214E49EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::parentPersistentIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5023) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 625), *((void *)this + 626));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5000);
    *(void *)(a2 + 24) = *((void *)this + 627);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1256);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1259);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5028);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorStatus(void)::$_0 &&>>()
{
}

void sub_214E4A1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaboratorStatusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8991;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1121), *((void *)this + 1122));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8968);
    *(void *)(a2 + 24) = *((void *)this + 1123);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2248);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorStoreID(void)::$_0 &&>>()
{
}

void sub_214E4A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudAuthorStoreIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 889), *((void *)this + 890));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7112);
    *(void *)(a2 + 24) = *((void *)this + 891);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1784);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1787);
  *(void *)(a2 + 36) = *(void *)((char *)this + 7140);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDistinguishedKind(void)::$_0 &&>>()
{
}

void sub_214E4A82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::distinguishedKindColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 4623;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 575), *((void *)this + 576));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4600);
    *(void *)(a2 + 24) = *((void *)this + 577);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1156);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationMode(void)::$_0 &&>>()
{
}

void sub_214E4AB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaborationModeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8671;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1081), *((void *)this + 1082));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8648);
    *(void *)(a2 + 24) = *((void *)this + 1083);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2168);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyReportingStoreItemID(void)::$_0 &&>>()
{
}

void sub_214E4AE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::reportingStoreItemIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 751), *((void *)this + 752));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6008);
    *(void *)(a2 + 24) = *((void *)this + 753);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1508);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1511);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6036);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatus(void)::$_0 &&>>()
{
}

void sub_214E4B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::keepLocalStatusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7599;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 947), *((void *)this + 948));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7576);
    *(void *)(a2 + 24) = *((void *)this + 949);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1900);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCollaborative(void)::$_0 &&>>()
{
}

void sub_214E4B4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isColaborativeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8623;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1075), *((void *)this + 1076));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8600);
    *(void *)(a2 + 24) = *((void *)this + 1077);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2156);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayedLocal(void)::$_0 &&>>()
{
}

void sub_214E4B7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::datePlayedLocalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8143) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1015), *((void *)this + 1016));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8120);
    *(void *)(a2 + 24) = *((void *)this + 1017);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2036);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2039);
  *(void *)(a2 + 36) = *(void *)((char *)this + 8148);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreNeedsReporting(void)::$_0 &&>>()
{
}

void sub_214E4BB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::needsReportingColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 653), *((void *)this + 654));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5224);
    *(void *)(a2 + 24) = *((void *)this + 655);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1312);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1315);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5252);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMasteredForiTunes(void)::$_0 &&>>()
{
}

void sub_214E4BE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::isMasteredForItunesColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 5391;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 671), *((void *)this + 672));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5368);
    *(void *)(a2 + 24) = *((void *)this + 673);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1348);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudAssetAvailable(void)::$_0 &&>>()
{
}

void sub_214E4C16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::cloudAssetAvailableColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5663) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 705), *((void *)this + 706));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5640);
    *(void *)(a2 + 24) = *((void *)this + 707);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1416);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1419);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5668);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCuratorOwned(void)::$_0 &&>>()
{
}

void sub_214E4C494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsCuratorPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7087;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 883), *((void *)this + 884));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7064);
    *(void *)(a2 + 24) = *((void *)this + 885);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1772);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateDownloaded(void)::$_0 &&>>()
{
}

void sub_214E4C7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::dateDownloadedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1043), *((void *)this + 1044));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8344);
    *(void *)(a2 + 24) = *((void *)this + 1045);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2092);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2095);
  *(void *)(a2 + 36) = *(void *)((char *)this + 8372);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsVisible(void)::$_0 &&>>()
{
}

void sub_214E4CAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsVisibleColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 6991;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 871), *((void *)this + 872));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6968);
    *(void *)(a2 + 24) = *((void *)this + 873);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1748);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsGenius(void)::$_0 &&>>()
{
}

void sub_214E4CE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::smartIsGeniusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 5663;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 705), *((void *)this + 706));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5640);
    *(void *)(a2 + 24) = *((void *)this + 707);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1416);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFolder(void)::$_0 &&>>()
{
}

void sub_214E4D134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::smartIsFolderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 5519;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 687), *((void *)this + 688));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5496);
    *(void *)(a2 + 24) = *((void *)this + 689);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1380);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsPublic(void)::$_0 &&>>()
{
}

void sub_214E4D45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsPublicColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 6943;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 865), *((void *)this + 866));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6920);
    *(void *)(a2 + 24) = *((void *)this + 867);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1736);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyStoreCloudID(void)::$_0 &&>>()
{
}

void sub_214E4D784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::storeCloudIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 837), *((void *)this + 838));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6696);
    *(void *)(a2 + 24) = *((void *)this + 839);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1680);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1683);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6724);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_214E4DAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::persistentIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 569), *((void *)this + 570));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4552);
    *(void *)(a2 + 24) = *((void *)this + 571);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1147);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4580);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribed(void)::$_0 &&>>()
{
}

void sub_214E4DDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsSubscribedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7039;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 877), *((void *)this + 878));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7016);
    *(void *)(a2 + 24) = *((void *)this + 879);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1760);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateModified(void)::$_0 &&>>()
{
}

void sub_214E4E0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::dateModifiedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 587), *((void *)this + 588));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4696);
    *(void *)(a2 + 24) = *((void *)this + 589);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1180);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1183);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4724);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCategoryType(void)::$_0 &&>>()
{
}

void sub_214E4E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::categoryTypeMaskColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8415;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1049), *((void *)this + 1050));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8392);
    *(void *)(a2 + 24) = *((void *)this + 1051);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2104);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAssetStoreItemID(void)::$_0 &&>>()
{
}

void sub_214E4E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::assetStoreItemIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6079) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 757), *((void *)this + 758));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6056);
    *(void *)(a2 + 24) = *((void *)this + 759);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1520);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1523);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6084);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateCreated(void)::$_0 &&>>()
{
}

void sub_214E4EA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::dateCreatedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 581), *((void *)this + 582));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4648);
    *(void *)(a2 + 24) = *((void *)this + 583);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1168);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1171);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4676);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedState(void)::$_0 &&>>()
{
}

void sub_214E4ED9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::likedStateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 5423;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 675), *((void *)this + 676));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5400);
    *(void *)(a2 + 24) = *((void *)this + 677);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1356);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsEditable(void)::$_0 &&>>()
{
}

void sub_214E4F0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isEditableColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 4975;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 619), *((void *)this + 620));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4952);
    *(void *)(a2 + 24) = *((void *)this + 621);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1244);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyNameOrder(void)::$_0 &&>>()
{
}

void sub_214E4F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::nameOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4879) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 607), *((void *)this + 608));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4856);
    *(void *)(a2 + 24) = *((void *)this + 609);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1220);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1223);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4884);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocal(void)::$_0 &&>>()
{
}

void sub_214E4F714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::keepLocalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 7551;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 941), *((void *)this + 942));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7528);
    *(void *)(a2 + 24) = *((void *)this + 943);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1888);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsHidden(void)::$_0 &&>>()
{
}

void sub_214E4FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isHiddenColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 5167;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 643), *((void *)this + 644));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5144);
    *(void *)(a2 + 24) = *((void *)this + 645);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1292);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateReleased(void)::$_0 &&>>()
{
}

void sub_214E4FD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::dateReleasedColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4495) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 559), *((void *)this + 560));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4472);
    *(void *)(a2 + 24) = *((void *)this + 561);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1124);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1127);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4500);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsOwner(void)::$_0 &&>>()
{
}

void sub_214E5008C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isOwnerColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 4927;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 613), *((void *)this + 614));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4904);
    *(void *)(a2 + 24) = *((void *)this + 615);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1232);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsProtected(void)::$_0 &&>>()
{
}

void sub_214E503B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::isProtectedColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4207) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 523), *((void *)this + 524));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4184);
    *(void *)(a2 + 24) = *((void *)this + 525);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1052);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1055);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4212);
  *(void *)a2 = &unk_26C5C47E8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyTraits(void)::$_0 &&>>()
{
}

void sub_214E506DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::traitsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (char *)this + 8527;
  *(void *)a2 = &unk_26C5C3AF0;
  int v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1063), *((void *)this + 1064));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8504);
    *(void *)(a2 + 24) = *((void *)this + 1065);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2132);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasTrackNumber(void)::$_0 &&>>()
{
}

void sub_214E50990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

mlcore::AlbumTable *mlcore::AlbumTable::AlbumTable(mlcore::AlbumTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v105, "album");
  std::string::basic_string[abi:ne180100]<0>(v101, "album_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v103, (uint64_t)v101, 1);
  std::string::basic_string[abi:ne180100]<0>(v98, "album");
  std::string::basic_string[abi:ne180100]<0>(v96, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v100, (uint64_t)v98, (uint64_t)v96);
  std::string::basic_string[abi:ne180100]<0>(v93, "sort_album");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v95, (uint64_t)v93, 0);
  std::string::basic_string[abi:ne180100]<0>(v89, "album_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v91, (uint64_t)v89);
  std::string::basic_string[abi:ne180100]<0>(v85, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v87, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v82, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v84, (uint64_t)v82);
  std::string::basic_string[abi:ne180100]<0>(v78, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v80, (uint64_t)v78, 0);
  std::string::basic_string[abi:ne180100]<0>(v74, "user_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v76, (uint64_t)v74, 0);
  std::string::basic_string[abi:ne180100]<0>(v70, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v72, (uint64_t)v70, 0);
  std::string::basic_string[abi:ne180100]<0>(v66, "all_compilations");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v68, (uint64_t)v66, 0);
  std::string::basic_string[abi:ne180100]<0>(v63, "feed_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v65, (uint64_t)v63, 0);
  std::string::basic_string[abi:ne180100]<0>(v59, "season_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v61, (uint64_t)v59, 0);
  std::string::basic_string[abi:ne180100]<0>(v55, "album_year");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v57, (uint64_t)v55, 0);
  std::string::basic_string[abi:ne180100]<0>(v51, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v53, (uint64_t)v51, 0);
  std::string::basic_string[abi:ne180100]<0>(v47, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v49, (uint64_t)v47, 0);
  std::string::basic_string[abi:ne180100]<0>(v43, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v45, (uint64_t)v43, 0);
  std::string::basic_string[abi:ne180100]<0>(v39, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v41, (uint64_t)v39, 0);
  std::string::basic_string[abi:ne180100]<0>(v36, "app_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v38, (uint64_t)v36);
  std::string::basic_string[abi:ne180100]<0>(v32, "contains_classical_work");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v34, (uint64_t)v32, 0);
  std::string::basic_string[abi:ne180100]<0>(v28, "date_played_local");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v30, (uint64_t)v28);
  std::string::basic_string[abi:ne180100]<0>(v24, "user_rating_is_derived");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v26, (uint64_t)v24);
  std::string::basic_string[abi:ne180100]<0>(v20, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v16, "classical_experience_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v18, (uint64_t)v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v14, (uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>(v9, "cloud_library_id");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v11, (uint64_t)v9, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(v3, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v5, (uint64_t)v3);
  mlcore::MediaTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::MediaTable((uint64_t)this, (uint64_t)v105, (uint64_t)v103, (uint64_t)v100, (uint64_t)v95, (uint64_t)v91, (uint64_t)v87, (uint64_t)v84, (uint64_t)v80, (uint64_t)v76, (uint64_t)v72, (uint64_t)v68, (uint64_t)v65, (uint64_t)v61, (uint64_t)v57, (uint64_t)v53, (uint64_t)v49, (uint64_t)v45, (uint64_t)v41,
    (uint64_t)v38,
    (uint64_t)v34,
    (uint64_t)v30,
    (uint64_t)v26,
    (uint64_t)v22,
    (uint64_t)v18,
    (uint64_t)v14,
    (uint64_t)v11,
    (uint64_t)v5);
  v5[0] = &unk_26C5C3AF0;
  if (v6 < 0) {
    operator delete((void *)v5[1]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v11);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  v14[0] = &unk_26C5C3AF0;
  if (v15 < 0) {
    operator delete((void *)v14[1]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  v18[0] = &unk_26C5C3AF0;
  if (v19 < 0) {
    operator delete((void *)v18[1]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  v22[0] = &unk_26C5C3AF0;
  if (v23 < 0) {
    operator delete((void *)v22[1]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  v26[0] = &unk_26C5C3AF0;
  if (v27 < 0) {
    operator delete((void *)v26[1]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  v30[0] = &unk_26C5C3AF0;
  if (v31 < 0) {
    operator delete((void *)v30[1]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  v34[0] = &unk_26C5C3AF0;
  if (v35 < 0) {
    operator delete((void *)v34[1]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v38);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  v41[0] = &unk_26C5C3AF0;
  if (v42 < 0) {
    operator delete((void *)v41[1]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v45[0] = &unk_26C5C3AF0;
  if (v46 < 0) {
    operator delete((void *)v45[1]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  v49[0] = &unk_26C5C3AF0;
  if (v50 < 0) {
    operator delete((void *)v49[1]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  v53[0] = &unk_26C5C3AF0;
  if (v54 < 0) {
    operator delete((void *)v53[1]);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  v57[0] = &unk_26C5C3AF0;
  if (v58 < 0) {
    operator delete((void *)v57[1]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  v61[0] = &unk_26C5C3AF0;
  if (v62 < 0) {
    operator delete((void *)v61[1]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v65);
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  v68[0] = &unk_26C5C3AF0;
  if (v69 < 0) {
    operator delete((void *)v68[1]);
  }
  if (v67 < 0) {
    operator delete(v66[0]);
  }
  v72[0] = &unk_26C5C3AF0;
  if (v73 < 0) {
    operator delete((void *)v72[1]);
  }
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  v76[0] = &unk_26C5C3AF0;
  if (v77 < 0) {
    operator delete((void *)v76[1]);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  v80[0] = &unk_26C5C3AF0;
  if (v81 < 0) {
    operator delete((void *)v80[1]);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v84);
  if (v83 < 0) {
    operator delete(v82[0]);
  }
  v87[0] = &unk_26C5C3AF0;
  if (v88 < 0) {
    operator delete((void *)v87[1]);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  v91[0] = &unk_26C5C3AF0;
  if (v92 < 0) {
    operator delete((void *)v91[1]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v95);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v100);
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  if (v99 < 0) {
    operator delete(v98[0]);
  }
  v103[0] = &unk_26C5C3AF0;
  if (v104 < 0) {
    operator delete((void *)v103[1]);
  }
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  *(void *)this = &unk_26C5C3B10;
  return this;
}

void sub_214E513CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a57);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  a71 = &unk_26C5C3AF0;
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  a76 = &unk_26C5C3AF0;
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  STACK[0x208] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a79);
  }
  STACK[0x250] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  STACK[0x298] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  STACK[0x2E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  STACK[0x390] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  STACK[0x3D8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  STACK[0x420] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  STACK[0x468] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  STACK[0x4B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  STACK[0x4F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x540]);
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete((void *)STACK[0x528]);
  }
  STACK[0x598] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  STACK[0x5E0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  if (SLOBYTE(STACK[0x5DF]) < 0) {
    operator delete((void *)STACK[0x5C8]);
  }
  STACK[0x628] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  STACK[0x670] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x68F]) < 0) {
    operator delete((void *)STACK[0x678]);
  }
  if (SLOBYTE(STACK[0x66F]) < 0) {
    operator delete((void *)STACK[0x658]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x6B8]);
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }
  STACK[0x720] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x73F]) < 0) {
    operator delete((void *)STACK[0x728]);
  }
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  STACK[0x768] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  if (SLOBYTE(STACK[0x767]) < 0) {
    operator delete((void *)STACK[0x750]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7AF]) < 0) {
    operator delete((void *)STACK[0x798]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v79 - 192);
  if (*(char *)(v79 - 217) < 0) {
    operator delete(*(void **)(v79 - 240));
  }
  if (*(char *)(v79 - 193) < 0) {
    operator delete(*(void **)(v79 - 216));
  }
  *(void *)(v79 - 104) = &unk_26C5C3AF0;
  if (*(char *)(v79 - 73) < 0) {
    operator delete(*(void **)(v79 - 96));
  }
  if (*(char *)(v79 - 105) < 0) {
    operator delete(*(void **)(v79 - 128));
  }
  if (*(char *)(v79 - 33) < 0) {
    operator delete(*(void **)(v79 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_214E519D8()
{
}

void sub_214E519E0()
{
}

void sub_214E519E8()
{
}

void sub_214E519F0()
{
}

void sub_214E519F8()
{
}

void sub_214E51A00()
{
}

void sub_214E51A08()
{
}

void sub_214E51A10()
{
}

void sub_214E51A18()
{
}

void sub_214E51A20()
{
}

void sub_214E51A28()
{
}

void sub_214E51A30()
{
}

void sub_214E51A38()
{
}

void sub_214E51A40()
{
}

void sub_214E51A48()
{
}

void sub_214E51A50()
{
}

void sub_214E51A58()
{
}

void sub_214E51A60()
{
}

void sub_214E51A68()
{
}

void sub_214E51A70()
{
}

void sub_214E51A78()
{
}

void sub_214E51A80()
{
}

void sub_214E51A88()
{
}

void sub_214E51A90()
{
}

void sub_214E51A98()
{
}

void sub_214E51AA0()
{
}

void sub_214E51AA8()
{
}

void sub_214E51AB0()
{
}

void sub_214E51AB8()
{
}

void sub_214E51AC0()
{
}

void sub_214E51AC8()
{
}

void sub_214E51AD0()
{
}

void sub_214E51AD8()
{
}

void sub_214E51AE0()
{
}

void sub_214E51AE8()
{
}

void sub_214E51AF0()
{
}

void sub_214E51AF8()
{
}

void sub_214E51B00()
{
}

void sub_214E51B08()
{
}

void sub_214E51B10()
{
}

void sub_214E51B18()
{
}

void sub_214E51B20()
{
}

void sub_214E51B28()
{
}

void sub_214E51B30()
{
}

void sub_214E51B38()
{
}

void sub_214E51B40()
{
}

void *mlcore::ItemStoreTable::ItemStoreTable(mlcore::ItemStoreTable *this)
{
  uint64_t v1 = (void *)MEMORY[0x270FA5388](this);
  std::string::basic_string[abi:ne180100]<0>(v246, "item_store");
  std::string::basic_string[abi:ne180100]<0>(v242, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v244, (uint64_t)v242, 1);
  std::string::basic_string[abi:ne180100]<0>(v238, "store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v240, (uint64_t)v238);
  std::string::basic_string[abi:ne180100]<0>(v234, "store_composer_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v236, (uint64_t)v234);
  std::string::basic_string[abi:ne180100]<0>(v230, "store_genre_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v232, (uint64_t)v230);
  std::string::basic_string[abi:ne180100]<0>(v226, "store_playlist_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v228, (uint64_t)v226);
  std::string::basic_string[abi:ne180100]<0>(v222, "storefront_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v224, (uint64_t)v222);
  std::string::basic_string[abi:ne180100]<0>(v218, "purchase_history_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v220, (uint64_t)v218);
  std::string::basic_string[abi:ne180100]<0>(v214, "purchase_history_token");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v216, (uint64_t)v214);
  std::string::basic_string[abi:ne180100]<0>(v211, "purchase_history_redownload_params");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v213, (uint64_t)v211, 0);
  std::string::basic_string[abi:ne180100]<0>(v207, "store_saga_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v209, (uint64_t)v207);
  std::string::basic_string[abi:ne180100]<0>(v204, "match_redownload_params");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v206, (uint64_t)v204, 0);
  std::string::basic_string[abi:ne180100]<0>(v200, "cloud_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v202, (uint64_t)v200);
  std::string::basic_string[abi:ne180100]<0>(v196, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v198, (uint64_t)v196);
  std::string::basic_string[abi:ne180100]<0>(v192, "home_sharing_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v194, (uint64_t)v192);
  std::string::basic_string[abi:ne180100]<0>(v188, "is_ota_purchased");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v190, (uint64_t)v188);
  std::string::basic_string[abi:ne180100]<0>(v184, "store_kind");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v186, (uint64_t)v184);
  std::string::basic_string[abi:ne180100]<0>(v180, "account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v182, (uint64_t)v180);
  std::string::basic_string[abi:ne180100]<0>(v176, "downloader_account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v178, (uint64_t)v176);
  std::string::basic_string[abi:ne180100]<0>(v172, "family_account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v174, (uint64_t)v172);
  std::string::basic_string[abi:ne180100]<0>(v168, "is_protected");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v170, (uint64_t)v168);
  std::string::basic_string[abi:ne180100]<0>(v164, "key_versions");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v166, (uint64_t)v164);
  std::string::basic_string[abi:ne180100]<0>(v160, "key_platform_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v162, (uint64_t)v160);
  std::string::basic_string[abi:ne180100]<0>(v156, "key_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v158, (uint64_t)v156);
  std::string::basic_string[abi:ne180100]<0>(v152, "key_id_2");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v154, (uint64_t)v152);
  std::string::basic_string[abi:ne180100]<0>(v148, "date_purchased");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v150, (uint64_t)v148);
  std::string::basic_string[abi:ne180100]<0>(v144, "date_released");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v146, (uint64_t)v144);
  std::string::basic_string[abi:ne180100]<0>(v141, "external_guid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v143, (uint64_t)v141, 0);
  std::string::basic_string[abi:ne180100]<0>(v138, "feed_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v140, (uint64_t)v138, 0);
  std::string::basic_string[abi:ne180100]<0>(v135, "artwork_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v137, (uint64_t)v135, 0);
  std::string::basic_string[abi:ne180100]<0>(v132, "store_xid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v134, (uint64_t)v132, 0);
  std::string::basic_string[abi:ne180100]<0>(v129, "store_flavor");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v131, (uint64_t)v129, 0);
  std::string::basic_string[abi:ne180100]<0>(v125, "store_matched_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v127, (uint64_t)v125);
  std::string::basic_string[abi:ne180100]<0>(v121, "store_redownloaded_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v123, (uint64_t)v121);
  std::string::basic_string[abi:ne180100]<0>(v118, "extras_url");
  std::string::basic_string[abi:ne180100]<0>(v116, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v120, (uint64_t)v118, (uint64_t)v116);
  std::string::basic_string[abi:ne180100]<0>(v112, "vpp_is_licensed");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v114, (uint64_t)v112);
  std::string::basic_string[abi:ne180100]<0>(v108, "vpp_org_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v110, (uint64_t)v108);
  std::string::basic_string[abi:ne180100]<0>(v105, "vpp_org_name");
  std::string::basic_string[abi:ne180100]<0>(v103, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v107, (uint64_t)v105, (uint64_t)v103);
  std::string::basic_string[abi:ne180100]<0>(v100, "sync_redownload_params");
  std::string::basic_string[abi:ne180100]<0>(v98, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v102, (uint64_t)v100, (uint64_t)v98);
  std::string::basic_string[abi:ne180100]<0>(v94, "needs_reporting");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v96, (uint64_t)v94);
  std::string::basic_string[abi:ne180100]<0>(v90, "subscription_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v92, (uint64_t)v90);
  std::string::basic_string[abi:ne180100]<0>(v86, "playback_endpoint_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v88, (uint64_t)v86);
  std::string::basic_string[abi:ne180100]<0>(v82, "is_mastered_for_itunes");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v84, (uint64_t)v82, 0);
  std::string::basic_string[abi:ne180100]<0>(v79, "radio_station_id");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v81, (uint64_t)v79, (uint64_t)v77);
  std::string::basic_string[abi:ne180100]<0>(v74, "advertisement_unique_id");
  std::string::basic_string[abi:ne180100]<0>(v72, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v76, (uint64_t)v74, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v68, "advertisement_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v70, (uint64_t)v68);
  std::string::basic_string[abi:ne180100]<0>(v64, "is_artist_uploaded_content");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v66, (uint64_t)v64);
  std::string::basic_string[abi:ne180100]<0>(v60, "cloud_asset_available");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v62, (uint64_t)v60);
  std::string::basic_string[abi:ne180100]<0>(v56, "is_subscription");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v58, (uint64_t)v56);
  std::string::basic_string[abi:ne180100]<0>(v52, "sync_in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v54, (uint64_t)v52, 0);
  std::string::basic_string[abi:ne180100]<0>(v48, "cloud_in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v50, (uint64_t)v48, 0);
  std::string::basic_string[abi:ne180100]<0>(v45, "cloud_album_id");
  std::string::basic_string[abi:ne180100]<0>(v43, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v47, (uint64_t)v45, (uint64_t)v43);
  std::string::basic_string[abi:ne180100]<0>(v39, "cloud_playback_endpoint_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v41, (uint64_t)v39);
  std::string::basic_string[abi:ne180100]<0>(v36, "cloud_universal_library_id");
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v38, (uint64_t)v36, (uint64_t)v34);
  std::string::basic_string[abi:ne180100]<0>(v30, "reporting_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v26, "asset_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v28, (uint64_t)v26);
  std::string::basic_string[abi:ne180100]<0>(v22, "extended_playback_attribute");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v24, (uint64_t)v22);
  std::string::basic_string[abi:ne180100]<0>(v18, "extended_lyrics_attribute");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v20, (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(v15, "store_canonical_id");
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v17, (uint64_t)v15, (uint64_t)v13);
  std::string::basic_string[abi:ne180100]<0>(v10, "tv_show_canonical_id");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v12, (uint64_t)v10, (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(v5, "tv_season_canonical_id");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::MediaTable((uint64_t)v1, (uint64_t)v246, (uint64_t)v244, (uint64_t)v240, (uint64_t)v236, (uint64_t)v232, (uint64_t)v228, (uint64_t)v224, (uint64_t)v220, (uint64_t)v216, (uint64_t)v213, (uint64_t)v209, (uint64_t)v206, (uint64_t)v202, (uint64_t)v198, (uint64_t)v194, (uint64_t)v190, (uint64_t)v186, (uint64_t)v182,
    (uint64_t)v178,
    (uint64_t)v174,
    (uint64_t)v170,
    (uint64_t)v166,
    (uint64_t)v162,
    (uint64_t)v158,
    (uint64_t)v154,
    (uint64_t)v150,
    (uint64_t)v146,
    (uint64_t)v143,
    (uint64_t)v140,
    (uint64_t)v137,
    (uint64_t)v134,
    (uint64_t)v131,
    (uint64_t)v127,
    (uint64_t)v123,
    (uint64_t)v120,
    (uint64_t)v114,
    (uint64_t)v110,
    (uint64_t)v107,
    (uint64_t)v102,
    (uint64_t)v96,
    (uint64_t)v92,
    (uint64_t)v88,
    (uint64_t)v84,
    (uint64_t)v81,
    (uint64_t)v76,
    (uint64_t)v70,
    (uint64_t)v66,
    (uint64_t)v62,
    (uint64_t)v58,
    (uint64_t)v54,
    (uint64_t)v50,
    (uint64_t)v47,
    (uint64_t)v41,
    (uint64_t)v38,
    (uint64_t)v32,
    (uint64_t)v28,
    (uint64_t)v24,
    (uint64_t)v20,
    (uint64_t)v17,
    (uint64_t)v12,
    (uint64_t)v7);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v12);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v17);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  v20[0] = &unk_26C5C3AF0;
  if (v21 < 0) {
    operator delete((void *)v20[1]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  v24[0] = &unk_26C5C3AF0;
  if (v25 < 0) {
    operator delete((void *)v24[1]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  v28[0] = &unk_26C5C3AF0;
  if (v29 < 0) {
    operator delete((void *)v28[1]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  v32[0] = &unk_26C5C3AF0;
  if (v33 < 0) {
    operator delete((void *)v32[1]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v38);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  v41[0] = &unk_26C5C3AF0;
  if (v42 < 0) {
    operator delete((void *)v41[1]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v47);
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  v50[0] = &unk_26C5C3AF0;
  if (v51 < 0) {
    operator delete((void *)v50[1]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  v54[0] = &unk_26C5C3AF0;
  if (v55 < 0) {
    operator delete((void *)v54[1]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  v58[0] = &unk_26C5C3AF0;
  if (v59 < 0) {
    operator delete((void *)v58[1]);
  }
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  v62[0] = &unk_26C5C3AF0;
  if (v63 < 0) {
    operator delete((void *)v62[1]);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  v66[0] = &unk_26C5C3AF0;
  if (v67 < 0) {
    operator delete((void *)v66[1]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  v70[0] = &unk_26C5C3AF0;
  if (v71 < 0) {
    operator delete((void *)v70[1]);
  }
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v76);
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v81);
  if (v78 < 0) {
    operator delete(v77[0]);
  }
  if (v80 < 0) {
    operator delete(v79[0]);
  }
  v84[0] = &unk_26C5C3AF0;
  if (v85 < 0) {
    operator delete((void *)v84[1]);
  }
  if (v83 < 0) {
    operator delete(v82[0]);
  }
  v88[0] = &unk_26C5C3AF0;
  if (v89 < 0) {
    operator delete((void *)v88[1]);
  }
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  v92[0] = &unk_26C5C3AF0;
  if (v93 < 0) {
    operator delete((void *)v92[1]);
  }
  if (v91 < 0) {
    operator delete(v90[0]);
  }
  v96[0] = &unk_26C5C3AF0;
  if (v97 < 0) {
    operator delete((void *)v96[1]);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v102);
  if (v99 < 0) {
    operator delete(v98[0]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v107);
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  v110[0] = &unk_26C5C3AF0;
  if (v111 < 0) {
    operator delete((void *)v110[1]);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  v114[0] = &unk_26C5C3AF0;
  if (v115 < 0) {
    operator delete((void *)v114[1]);
  }
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v120);
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  v123[0] = &unk_26C5C3AF0;
  if (v124 < 0) {
    operator delete((void *)v123[1]);
  }
  if (v122 < 0) {
    operator delete(v121[0]);
  }
  v127[0] = &unk_26C5C3AF0;
  if (v128 < 0) {
    operator delete((void *)v127[1]);
  }
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v131);
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v134);
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v137);
  if (v136 < 0) {
    operator delete(v135[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v140);
  if (v139 < 0) {
    operator delete(v138[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v143);
  if (v142 < 0) {
    operator delete(v141[0]);
  }
  v146[0] = &unk_26C5C3AF0;
  if (v147 < 0) {
    operator delete((void *)v146[1]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  v150[0] = &unk_26C5C3AF0;
  if (v151 < 0) {
    operator delete((void *)v150[1]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  v154[0] = &unk_26C5C3AF0;
  if (v155 < 0) {
    operator delete((void *)v154[1]);
  }
  if (v153 < 0) {
    operator delete(v152[0]);
  }
  v158[0] = &unk_26C5C3AF0;
  if (v159 < 0) {
    operator delete((void *)v158[1]);
  }
  if (v157 < 0) {
    operator delete(v156[0]);
  }
  v162[0] = &unk_26C5C3AF0;
  if (v163 < 0) {
    operator delete((void *)v162[1]);
  }
  if (v161 < 0) {
    operator delete(v160[0]);
  }
  v166[0] = &unk_26C5C3AF0;
  if (v167 < 0) {
    operator delete((void *)v166[1]);
  }
  if (v165 < 0) {
    operator delete(v164[0]);
  }
  v170[0] = &unk_26C5C3AF0;
  if (v171 < 0) {
    operator delete((void *)v170[1]);
  }
  if (v169 < 0) {
    operator delete(v168[0]);
  }
  v174[0] = &unk_26C5C3AF0;
  if (v175 < 0) {
    operator delete((void *)v174[1]);
  }
  if (v173 < 0) {
    operator delete(v172[0]);
  }
  v178[0] = &unk_26C5C3AF0;
  if (v179 < 0) {
    operator delete((void *)v178[1]);
  }
  if (v177 < 0) {
    operator delete(v176[0]);
  }
  v182[0] = &unk_26C5C3AF0;
  if (v183 < 0) {
    operator delete((void *)v182[1]);
  }
  if (v181 < 0) {
    operator delete(v180[0]);
  }
  v186[0] = &unk_26C5C3AF0;
  if (v187 < 0) {
    operator delete((void *)v186[1]);
  }
  if (v185 < 0) {
    operator delete(v184[0]);
  }
  v190[0] = &unk_26C5C3AF0;
  if (v191 < 0) {
    operator delete((void *)v190[1]);
  }
  if (v189 < 0) {
    operator delete(v188[0]);
  }
  v194[0] = &unk_26C5C3AF0;
  if (v195 < 0) {
    operator delete((void *)v194[1]);
  }
  if (v193 < 0) {
    operator delete(v192[0]);
  }
  v198[0] = &unk_26C5C3AF0;
  if (v199 < 0) {
    operator delete((void *)v198[1]);
  }
  if (v197 < 0) {
    operator delete(v196[0]);
  }
  v202[0] = &unk_26C5C3AF0;
  if (v203 < 0) {
    operator delete((void *)v202[1]);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v206);
  if (v205 < 0) {
    operator delete(v204[0]);
  }
  v209[0] = &unk_26C5C3AF0;
  if (v210 < 0) {
    operator delete((void *)v209[1]);
  }
  if (v208 < 0) {
    operator delete(v207[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v213);
  if (v212 < 0) {
    operator delete(v211[0]);
  }
  v216[0] = &unk_26C5C3AF0;
  if (v217 < 0) {
    operator delete((void *)v216[1]);
  }
  if (v215 < 0) {
    operator delete(v214[0]);
  }
  v220[0] = &unk_26C5C3AF0;
  if (v221 < 0) {
    operator delete((void *)v220[1]);
  }
  if (v219 < 0) {
    operator delete(v218[0]);
  }
  v224[0] = &unk_26C5C3AF0;
  if (v225 < 0) {
    operator delete((void *)v224[1]);
  }
  if (v223 < 0) {
    operator delete(v222[0]);
  }
  v228[0] = &unk_26C5C3AF0;
  if (v229 < 0) {
    operator delete((void *)v228[1]);
  }
  if (v227 < 0) {
    operator delete(v226[0]);
  }
  v232[0] = &unk_26C5C3AF0;
  if (v233 < 0) {
    operator delete((void *)v232[1]);
  }
  if (v231 < 0) {
    operator delete(v230[0]);
  }
  v236[0] = &unk_26C5C3AF0;
  if (v237 < 0) {
    operator delete((void *)v236[1]);
  }
  if (v235 < 0) {
    operator delete(v234[0]);
  }
  v240[0] = &unk_26C5C3AF0;
  if (v241 < 0) {
    operator delete((void *)v240[1]);
  }
  if (v239 < 0) {
    operator delete(v238[0]);
  }
  v244[0] = &unk_26C5C3AF0;
  if (v245 < 0) {
    operator delete((void *)v244[1]);
  }
  if (v243 < 0) {
    operator delete(v242[0]);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  *uint64_t v1 = &unk_26C5C5288;
  return v1;
}

void sub_214E532E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a69 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x258]);
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  STACK[0x320] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  STACK[0x368] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  STACK[0x3B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  STACK[0x3F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x458]);
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  STACK[0x4B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x510]);
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete((void *)STACK[0x4F8]);
  }
  STACK[0x568] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete((void *)STACK[0x570]);
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  STACK[0x5B0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  STACK[0x5F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  STACK[0x640] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  if (SLOBYTE(STACK[0x63F]) < 0) {
    operator delete((void *)STACK[0x628]);
  }
  STACK[0x688] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  if (SLOBYTE(STACK[0x687]) < 0) {
    operator delete((void *)STACK[0x670]);
  }
  STACK[0x6D0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x6EF]) < 0) {
    operator delete((void *)STACK[0x6D8]);
  }
  if (SLOBYTE(STACK[0x6CF]) < 0) {
    operator delete((void *)STACK[0x6B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x730]);
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  if (SLOBYTE(STACK[0x72F]) < 0) {
    operator delete((void *)STACK[0x718]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7A0]);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  STACK[0x7F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  STACK[0x840] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x85F]) < 0) {
    operator delete((void *)STACK[0x848]);
  }
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  STACK[0x888] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x8A7]) < 0) {
    operator delete((void *)STACK[0x890]);
  }
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  STACK[0x8D0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x8EF]) < 0) {
    operator delete((void *)STACK[0x8D8]);
  }
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x930]);
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x9A0]);
  if (SLOBYTE(STACK[0x987]) < 0) {
    operator delete((void *)STACK[0x970]);
  }
  if (SLOBYTE(STACK[0x99F]) < 0) {
    operator delete((void *)STACK[0x988]);
  }
  STACK[0x9F8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA17]) < 0) {
    operator delete((void *)STACK[0xA00]);
  }
  if (SLOBYTE(STACK[0x9F7]) < 0) {
    operator delete((void *)STACK[0x9E0]);
  }
  STACK[0xA40] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xA5F]) < 0) {
    operator delete((void *)STACK[0xA48]);
  }
  if (SLOBYTE(STACK[0xA3F]) < 0) {
    operator delete((void *)STACK[0xA28]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xAA0]);
  if (SLOBYTE(STACK[0xA87]) < 0) {
    operator delete((void *)STACK[0xA70]);
  }
  if (SLOBYTE(STACK[0xA9F]) < 0) {
    operator delete((void *)STACK[0xA88]);
  }
  STACK[0xAF8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB17]) < 0) {
    operator delete((void *)STACK[0xB00]);
  }
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  STACK[0xB40] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  if (SLOBYTE(STACK[0xB3F]) < 0) {
    operator delete((void *)STACK[0xB28]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB88]);
  if (SLOBYTE(STACK[0xB87]) < 0) {
    operator delete((void *)STACK[0xB70]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xBE0]);
  if (SLOBYTE(STACK[0xBDF]) < 0) {
    operator delete((void *)STACK[0xBC8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC90]);
  if (SLOBYTE(STACK[0xC8F]) < 0) {
    operator delete((void *)STACK[0xC78]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xCE8]);
  if (SLOBYTE(STACK[0xCE7]) < 0) {
    operator delete((void *)STACK[0xCD0]);
  }
  STACK[0xD40] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xD5F]) < 0) {
    operator delete((void *)STACK[0xD48]);
  }
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  STACK[0xD88] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xDA7]) < 0) {
    operator delete((void *)STACK[0xD90]);
  }
  if (SLOBYTE(STACK[0xD87]) < 0) {
    operator delete((void *)STACK[0xD70]);
  }
  STACK[0xDD0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xDEF]) < 0) {
    operator delete((void *)STACK[0xDD8]);
  }
  if (SLOBYTE(STACK[0xDCF]) < 0) {
    operator delete((void *)STACK[0xDB8]);
  }
  STACK[0xE18] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xE37]) < 0) {
    operator delete((void *)STACK[0xE20]);
  }
  if (SLOBYTE(STACK[0xE17]) < 0) {
    operator delete((void *)STACK[0xE00]);
  }
  STACK[0xE60] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  if (SLOBYTE(STACK[0xE5F]) < 0) {
    operator delete((void *)STACK[0xE48]);
  }
  STACK[0xEA8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xEC7]) < 0) {
    operator delete((void *)STACK[0xEB0]);
  }
  if (SLOBYTE(STACK[0xEA7]) < 0) {
    operator delete((void *)STACK[0xE90]);
  }
  STACK[0xEF0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xF0F]) < 0) {
    operator delete((void *)STACK[0xEF8]);
  }
  if (SLOBYTE(STACK[0xEEF]) < 0) {
    operator delete((void *)STACK[0xED8]);
  }
  STACK[0xF38] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xF57]) < 0) {
    operator delete((void *)STACK[0xF40]);
  }
  if (SLOBYTE(STACK[0xF37]) < 0) {
    operator delete((void *)STACK[0xF20]);
  }
  STACK[0xF80] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xF9F]) < 0) {
    operator delete((void *)STACK[0xF88]);
  }
  if (SLOBYTE(STACK[0xF7F]) < 0) {
    operator delete((void *)STACK[0xF68]);
  }
  STACK[0xFC8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0xFE7]) < 0) {
    operator delete((void *)STACK[0xFD0]);
  }
  if (SLOBYTE(STACK[0xFC7]) < 0) {
    operator delete((void *)STACK[0xFB0]);
  }
  STACK[0x1010] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x102F]) < 0) {
    operator delete((void *)STACK[0x1018]);
  }
  if (SLOBYTE(STACK[0x100F]) < 0) {
    operator delete((void *)STACK[0xFF8]);
  }
  STACK[0x1058] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x1077]) < 0) {
    operator delete((void *)STACK[0x1060]);
  }
  if (SLOBYTE(STACK[0x1057]) < 0) {
    operator delete((void *)STACK[0x1040]);
  }
  STACK[0x10A0] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x10BF]) < 0) {
    operator delete((void *)STACK[0x10A8]);
  }
  if (SLOBYTE(STACK[0x109F]) < 0) {
    operator delete((void *)STACK[0x1088]);
  }
  STACK[0x10E8] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x1107]) < 0) {
    operator delete((void *)STACK[0x10F0]);
  }
  if (SLOBYTE(STACK[0x10E7]) < 0) {
    operator delete((void *)STACK[0x10D0]);
  }
  STACK[0x1130] = (unint64_t)&unk_26C5C3AF0;
  if (v73[31] < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  if (SLOBYTE(STACK[0x112F]) < 0) {
    operator delete((void *)STACK[0x1118]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1178]);
  if (v73[71] < 0) {
    operator delete((void *)STACK[0x1160]);
  }
  STACK[0x11D0] = (unint64_t)&unk_26C5C3AF0;
  if (v73[191] < 0) {
    operator delete((void *)STACK[0x11D8]);
  }
  if (v73[159] < 0) {
    operator delete((void *)STACK[0x11B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1218]);
  if (v73[231] < 0) {
    operator delete((void *)STACK[0x1200]);
  }
  STACK[0x1270] = (unint64_t)&unk_26C5C3AF0;
  if (v73[351] < 0) {
    operator delete((void *)STACK[0x1278]);
  }
  if (v73[319] < 0) {
    operator delete((void *)STACK[0x1258]);
  }
  STACK[0x12B8] = (unint64_t)&unk_26C5C3AF0;
  if (v73[423] < 0) {
    operator delete((void *)STACK[0x12C0]);
  }
  if (v73[391] < 0) {
    operator delete((void *)STACK[0x12A0]);
  }
  STACK[0x1300] = (unint64_t)&unk_26C5C3AF0;
  if (v73[495] < 0) {
    operator delete((void *)STACK[0x1308]);
  }
  if (v73[463] < 0) {
    operator delete((void *)STACK[0x12E8]);
  }
  STACK[0x1348] = (unint64_t)&unk_26C5C3AF0;
  if (v73[567] < 0) {
    operator delete((void *)STACK[0x1350]);
  }
  if (v73[535] < 0) {
    operator delete((void *)STACK[0x1330]);
  }
  STACK[0x1390] = (unint64_t)&unk_26C5C3AF0;
  if (v73[639] < 0) {
    operator delete((void *)STACK[0x1398]);
  }
  if (v73[607] < 0) {
    operator delete((void *)STACK[0x1378]);
  }
  *(void *)(v74 - 248) = &unk_26C5C3AF0;
  if (v73[711] < 0) {
    operator delete(*(void **)(v74 - 240));
  }
  if (v73[679] < 0) {
    operator delete((void *)STACK[0x13C0]);
  }
  *(void *)(v74 - 176) = &unk_26C5C3AF0;
  if (v73[783] < 0) {
    operator delete(*(void **)(v74 - 168));
  }
  if (v73[751] < 0) {
    operator delete(*(void **)(v74 - 200));
  }
  *(void *)(v74 - 104) = &unk_26C5C3AF0;
  if (v73[855] < 0) {
    operator delete(*(void **)(v74 - 96));
  }
  if (v73[823] < 0) {
    operator delete(*(void **)(v74 - 128));
  }
  if (v73[895] < 0) {
    operator delete(*(void **)(v74 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_214E54094()
{
}

void sub_214E5409C()
{
}

void sub_214E540A4()
{
}

void sub_214E540AC()
{
}

void sub_214E540B4()
{
}

void sub_214E540BC()
{
}

void sub_214E540C4()
{
}

void sub_214E540CC()
{
}

void sub_214E540D4()
{
}

void sub_214E540DC()
{
}

void sub_214E540E4()
{
}

void sub_214E540EC()
{
}

void sub_214E540F4()
{
}

void sub_214E540FC()
{
}

void sub_214E54104()
{
}

void sub_214E5410C()
{
}

void sub_214E54114()
{
}

void sub_214E5411C()
{
}

void sub_214E54124()
{
}

void sub_214E5412C()
{
}

void sub_214E54134()
{
}

void sub_214E5413C()
{
}

void sub_214E54144()
{
}

void sub_214E5414C()
{
}

void sub_214E54154()
{
}

void sub_214E5415C()
{
}

void sub_214E54164()
{
}

void sub_214E5416C()
{
}

void sub_214E54174()
{
}

void sub_214E5417C()
{
}

void sub_214E54184()
{
}

void sub_214E5418C()
{
}

void sub_214E54194()
{
}

void sub_214E5419C()
{
}

void sub_214E541A4()
{
}

void sub_214E541AC()
{
}

void sub_214E541B4()
{
}

void sub_214E541BC()
{
}

void sub_214E541C4()
{
}

void sub_214E541CC()
{
}

void sub_214E541D4()
{
}

void sub_214E541DC()
{
}

void sub_214E541E4()
{
}

void sub_214E541EC()
{
}

void sub_214E541F4()
{
}

void sub_214E541FC()
{
}

void sub_214E54204()
{
}

void sub_214E5420C()
{
}

void sub_214E54214()
{
}

void sub_214E5421C()
{
}

void sub_214E54224()
{
}

void sub_214E5422C()
{
}

void sub_214E54234()
{
}

void sub_214E5423C()
{
}

void sub_214E54244()
{
}

void sub_214E5424C()
{
}

void sub_214E54254()
{
}

void sub_214E5425C()
{
}

void sub_214E54264()
{
}

void sub_214E5426C()
{
}

void sub_214E54274()
{
}

void sub_214E5427C()
{
}

void sub_214E54284()
{
}

void sub_214E5428C()
{
}

void sub_214E54294()
{
}

void sub_214E5429C()
{
}

void sub_214E542A4()
{
}

void sub_214E542AC()
{
}

void sub_214E542B4()
{
}

void sub_214E542BC()
{
}

void sub_214E542C4()
{
}

void sub_214E542CC()
{
}

void sub_214E542D4()
{
}

void sub_214E542DC()
{
}

void sub_214E542E4()
{
}

void sub_214E542EC()
{
}

void sub_214E542F4()
{
}

void sub_214E542FC()
{
}

void sub_214E54304()
{
}

void sub_214E5430C()
{
}

void sub_214E54314()
{
}

void sub_214E5431C()
{
}

void sub_214E54324()
{
}

void sub_214E5432C()
{
}

void sub_214E54334()
{
}

void sub_214E5433C()
{
}

void sub_214E54344()
{
}

void sub_214E5434C()
{
}

void sub_214E54354()
{
}

void sub_214E5435C()
{
}

void sub_214E54364()
{
}

void sub_214E5436C()
{
}

void sub_214E54374()
{
}

void sub_214E5437C()
{
}

void sub_214E54384()
{
}

void sub_214E5438C()
{
}

void sub_214E54394()
{
}

void sub_214E5439C()
{
}

void sub_214E543A4()
{
}

void sub_214E543AC()
{
}

void sub_214E543B4()
{
}

void sub_214E543BC()
{
}

void sub_214E543C4()
{
}

void sub_214E543CC()
{
}

void sub_214E543D4()
{
}

void sub_214E543DC()
{
}

void sub_214E543E4()
{
}

void sub_214E543EC()
{
}

void sub_214E543F4()
{
}

void sub_214E543FC()
{
}

void sub_214E54404()
{
}

void sub_214E5440C()
{
}

void sub_214E54414()
{
}

void sub_214E5441C()
{
}

void sub_214E54424()
{
}

void sub_214E5442C()
{
}

void sub_214E54434()
{
}

void sub_214E5443C()
{
}

void sub_214E54444()
{
}

void sub_214E5444C()
{
}

void sub_214E54454()
{
}

void sub_214E5445C()
{
}

uint64_t mlcore::MediaColumn<long long>::MediaColumn(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = __p;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a1 + 8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = 16;
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v7.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = 16;
  }
  *(void *)a1 = &unk_26C5C3878;
  *(unsigned char *)(a1 + 36) = 1;
  *(void *)(a1 + 40) = 0;
  if (v3 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C47E8;
  return a1;
}

void sub_214E5459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(v9);
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaColumn<std::string>::MediaColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  int v5 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = 16;
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 32) = 16;
  }
  *(void *)a1 = &unk_26C5C3818;
  *(unsigned char *)(a1 + 36) = 1;
  char v6 = (std::string *)(a1 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a1 + 56) = *((void *)&__p.__r_.__value_.__l + 2);
  if (v5 < 0) {
LABEL_15:
  }
    operator delete(v9.__r_.__value_.__l.__data_);
LABEL_16:
  *(void *)a1 = &unk_26C5C4788;
  return a1;
}

void sub_214E54768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v25 = v22;
  *(void *)uint64_t v21 = v25;
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MediaTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62 = MEMORY[0x270FA5388](a1);
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v76 = v62;
  if (*(char *)(v63 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
  }
  else {
    std::string __sz = *(std::string *)v63;
  }
  v514 = &unk_26C5C3AF0;
  if (*(char *)(v75 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v75 + 8), *(void *)(v75 + 16));
  }
  else {
    std::string __s = *(std::string *)(v75 + 8);
  }
  int v516 = *(_DWORD *)(v75 + 32);
  v514 = &unk_26C5C3878;
  uint64_t v517 = *(void *)(v75 + 36);
  int v518 = *(_DWORD *)(v75 + 44);
  uint64_t v509 = &unk_26C5C3AF0;
  if (*(char *)(v73 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v510, *(const std::string::value_type **)(v73 + 8), *(void *)(v73 + 16));
  }
  else {
    std::string v510 = *(std::string *)(v73 + 8);
  }
  int v511 = *(_DWORD *)(v73 + 32);
  uint64_t v509 = &unk_26C5C3878;
  uint64_t v512 = *(void *)(v73 + 36);
  int v513 = *(_DWORD *)(v73 + 44);
  char v504 = &unk_26C5C3AF0;
  if (*(char *)(v71 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v505, *(const std::string::value_type **)(v71 + 8), *(void *)(v71 + 16));
  }
  else {
    std::string v505 = *(std::string *)(v71 + 8);
  }
  int v506 = *(_DWORD *)(v71 + 32);
  char v504 = &unk_26C5C3878;
  uint64_t v507 = *(void *)(v71 + 36);
  int v508 = *(_DWORD *)(v71 + 44);
  int v499 = &unk_26C5C3AF0;
  if (*(char *)(v69 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v500, *(const std::string::value_type **)(v69 + 8), *(void *)(v69 + 16));
  }
  else {
    std::string v500 = *(std::string *)(v69 + 8);
  }
  int v501 = *(_DWORD *)(v69 + 32);
  int v499 = &unk_26C5C3878;
  uint64_t v502 = *(void *)(v69 + 36);
  int v503 = *(_DWORD *)(v69 + 44);
  std::string v494 = &unk_26C5C3AF0;
  if (*(char *)(v67 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v495, *(const std::string::value_type **)(v67 + 8), *(void *)(v67 + 16));
  }
  else {
    std::string v495 = *(std::string *)(v67 + 8);
  }
  int v496 = *(_DWORD *)(v67 + 32);
  std::string v494 = &unk_26C5C3878;
  uint64_t v497 = *(void *)(v67 + 36);
  int v498 = *(_DWORD *)(v67 + 44);
  v489 = &unk_26C5C3AF0;
  if (*(char *)(v65 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v490, *(const std::string::value_type **)(v65 + 8), *(void *)(v65 + 16));
  }
  else {
    std::string v490 = *(std::string *)(v65 + 8);
  }
  uint64_t v77 = a9;
  int v491 = *(_DWORD *)(v65 + 32);
  v489 = &unk_26C5C3878;
  uint64_t v492 = *(void *)(v65 + 36);
  int v493 = *(_DWORD *)(v65 + 44);
  int v484 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v485, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
    uint64_t v77 = a9;
  }
  else
  {
    std::string v485 = *(std::string *)(a9 + 8);
  }
  int v486 = *(_DWORD *)(v77 + 32);
  int v484 = &unk_26C5C3878;
  uint64_t v487 = *(void *)(v77 + 36);
  int v78 = *(_DWORD *)(v77 + 44);
  uint64_t v79 = a10;
  int v488 = v78;
  std::string v479 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v480, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
    uint64_t v79 = a10;
  }
  else
  {
    std::string v480 = *(std::string *)(a10 + 8);
  }
  int v481 = *(_DWORD *)(v79 + 32);
  std::string v479 = &unk_26C5C3878;
  uint64_t v482 = *(void *)(v79 + 36);
  uint64_t v221 = v79;
  int v483 = *(_DWORD *)(v79 + 44);
  uint64_t v80 = a11;
  std::string v474 = &unk_26C5C3AF0;
  if (*(char *)(a11 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v475, *(const std::string::value_type **)(a11 + 8), *(void *)(a11 + 16));
    uint64_t v80 = a11;
  }
  else
  {
    std::string v475 = *(std::string *)(a11 + 8);
  }
  int v476 = *(_DWORD *)(v80 + 32);
  std::string v474 = &unk_26C5C3818;
  char v477 = *(unsigned char *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v478, *(const std::string::value_type **)(a11 + 40), *(void *)(a11 + 48));
  }
  else {
    std::string v478 = *(std::string *)(a11 + 40);
  }
  std::string v469 = &unk_26C5C3AF0;
  if (*(char *)(a12 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v470, *(const std::string::value_type **)(a12 + 8), *(void *)(a12 + 16));
  }
  else {
    std::string v470 = *(std::string *)(a12 + 8);
  }
  int v471 = *(_DWORD *)(a12 + 32);
  std::string v469 = &unk_26C5C3878;
  uint64_t v472 = *(void *)(a12 + 36);
  int v473 = *(_DWORD *)(a12 + 44);
  std::string v464 = &unk_26C5C3AF0;
  if (*(char *)(a13 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v465, *(const std::string::value_type **)(a13 + 8), *(void *)(a13 + 16));
  }
  else {
    std::string v465 = *(std::string *)(a13 + 8);
  }
  int v466 = *(_DWORD *)(a13 + 32);
  std::string v464 = &unk_26C5C3818;
  char v467 = *(unsigned char *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v468, *(const std::string::value_type **)(a13 + 40), *(void *)(a13 + 48));
  }
  else {
    std::string v468 = *(std::string *)(a13 + 40);
  }
  std::string v459 = &unk_26C5C3AF0;
  if (*(char *)(a14 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v460, *(const std::string::value_type **)(a14 + 8), *(void *)(a14 + 16));
  }
  else {
    std::string v460 = *(std::string *)(a14 + 8);
  }
  int v461 = *(_DWORD *)(a14 + 32);
  std::string v459 = &unk_26C5C3878;
  uint64_t v462 = *(void *)(a14 + 36);
  int v463 = *(_DWORD *)(a14 + 44);
  std::string v454 = &unk_26C5C3AF0;
  uint64_t v81 = a15;
  if (*(char *)(a15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(a15 + 8), *(void *)(a15 + 16));
    uint64_t v81 = a15;
  }
  else
  {
    std::string v455 = *(std::string *)(a15 + 8);
  }
  int v456 = *(_DWORD *)(v81 + 32);
  std::string v454 = &unk_26C5C3878;
  uint64_t v457 = *(void *)(v81 + 36);
  uint64_t v220 = v81;
  int v458 = *(_DWORD *)(v81 + 44);
  std::string v449 = &unk_26C5C3AF0;
  if (*(char *)(a16 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v450, *(const std::string::value_type **)(a16 + 8), *(void *)(a16 + 16));
  }
  else {
    std::string v450 = *(std::string *)(a16 + 8);
  }
  uint64_t v82 = a17;
  int v451 = *(_DWORD *)(a16 + 32);
  std::string v449 = &unk_26C5C3878;
  uint64_t v452 = *(void *)(a16 + 36);
  int v453 = *(_DWORD *)(a16 + 44);
  uint64_t v444 = &unk_26C5C3AF0;
  if (*(char *)(a17 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v445, *(const std::string::value_type **)(a17 + 8), *(void *)(a17 + 16));
    uint64_t v82 = a17;
  }
  else
  {
    std::string v445 = *(std::string *)(a17 + 8);
  }
  int v446 = *(_DWORD *)(v82 + 32);
  uint64_t v444 = &unk_26C5C3878;
  uint64_t v447 = *(void *)(v82 + 36);
  uint64_t v219 = v82;
  int v448 = *(_DWORD *)(v82 + 44);
  int v439 = &unk_26C5C3AF0;
  if (*(char *)(a18 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v440, *(const std::string::value_type **)(a18 + 8), *(void *)(a18 + 16));
  }
  else {
    std::string v440 = *(std::string *)(a18 + 8);
  }
  uint64_t v83 = a19;
  int v441 = *(_DWORD *)(a18 + 32);
  int v439 = &unk_26C5C3878;
  uint64_t v442 = *(void *)(a18 + 36);
  int v443 = *(_DWORD *)(a18 + 44);
  int v434 = &unk_26C5C3AF0;
  if (*(char *)(a19 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v435, *(const std::string::value_type **)(a19 + 8), *(void *)(a19 + 16));
    uint64_t v83 = a19;
  }
  else
  {
    std::string v435 = *(std::string *)(a19 + 8);
  }
  int v436 = *(_DWORD *)(v83 + 32);
  int v434 = &unk_26C5C3878;
  uint64_t v437 = *(void *)(v83 + 36);
  uint64_t v218 = v83;
  int v438 = *(_DWORD *)(v83 + 44);
  int v429 = &unk_26C5C3AF0;
  uint64_t v84 = a20;
  if (*(char *)(a20 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v430, *(const std::string::value_type **)(a20 + 8), *(void *)(a20 + 16));
    uint64_t v84 = a20;
  }
  else
  {
    std::string v430 = *(std::string *)(a20 + 8);
  }
  int v431 = *(_DWORD *)(v84 + 32);
  int v429 = &unk_26C5C3878;
  uint64_t v432 = *(void *)(v84 + 36);
  uint64_t v217 = v84;
  int v433 = *(_DWORD *)(v84 + 44);
  int v424 = &unk_26C5C3AF0;
  if (*(char *)(a21 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v425, *(const std::string::value_type **)(a21 + 8), *(void *)(a21 + 16));
  }
  else {
    std::string v425 = *(std::string *)(a21 + 8);
  }
  uint64_t v85 = a22;
  int v426 = *(_DWORD *)(a21 + 32);
  int v424 = &unk_26C5C3878;
  uint64_t v427 = *(void *)(a21 + 36);
  int v428 = *(_DWORD *)(a21 + 44);
  int v419 = &unk_26C5C3AF0;
  if (*(char *)(a22 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)(a22 + 8), *(void *)(a22 + 16));
    uint64_t v85 = a22;
  }
  else
  {
    std::string v420 = *(std::string *)(a22 + 8);
  }
  int v421 = *(_DWORD *)(v85 + 32);
  int v419 = &unk_26C5C3878;
  uint64_t v422 = *(void *)(v85 + 36);
  int v86 = *(_DWORD *)(v85 + 44);
  uint64_t v87 = a23;
  int v423 = v86;
  std::string v414 = &unk_26C5C3AF0;
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v415, *(const std::string::value_type **)(a23 + 8), *(void *)(a23 + 16));
    uint64_t v87 = a23;
  }
  else
  {
    std::string v415 = *(std::string *)(a23 + 8);
  }
  int v416 = *(_DWORD *)(v87 + 32);
  std::string v414 = &unk_26C5C3878;
  uint64_t v417 = *(void *)(v87 + 36);
  int v88 = *(_DWORD *)(v87 + 44);
  uint64_t v89 = a24;
  int v418 = v88;
  int v409 = &unk_26C5C3AF0;
  if (*(char *)(a24 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v410, *(const std::string::value_type **)(a24 + 8), *(void *)(a24 + 16));
    uint64_t v89 = a24;
  }
  else
  {
    std::string v410 = *(std::string *)(a24 + 8);
  }
  int v411 = *(_DWORD *)(v89 + 32);
  int v409 = &unk_26C5C3878;
  uint64_t v412 = *(void *)(v89 + 36);
  uint64_t v216 = v89;
  int v90 = *(_DWORD *)(v89 + 44);
  uint64_t v91 = a25;
  int v413 = v90;
  uint64_t v404 = &unk_26C5C3AF0;
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v405, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
    uint64_t v91 = a25;
  }
  else
  {
    std::string v405 = *(std::string *)(a25 + 8);
  }
  uint64_t v92 = *(void *)(v91 + 36);
  int v406 = *(_DWORD *)(v91 + 32);
  uint64_t v404 = &unk_26C5C3878;
  uint64_t v407 = v92;
  char v215 = (uint64_t *)(v91 + 36);
  int v408 = *(_DWORD *)(v91 + 44);
  uint64_t v399 = &unk_26C5C3AF0;
  uint64_t v93 = a26;
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v400, *(const std::string::value_type **)(a26 + 8), *(void *)(a26 + 16));
    uint64_t v93 = a26;
  }
  else
  {
    std::string v400 = *(std::string *)(a26 + 8);
  }
  int v401 = *(_DWORD *)(v93 + 32);
  uint64_t v399 = &unk_26C5C3878;
  uint64_t v402 = *(void *)(v93 + 36);
  uint64_t v214 = v93;
  int v403 = *(_DWORD *)(v93 + 44);
  std::string v394 = &unk_26C5C3AF0;
  if (*(char *)(a27 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v395, *(const std::string::value_type **)(a27 + 8), *(void *)(a27 + 16));
  }
  else {
    std::string v395 = *(std::string *)(a27 + 8);
  }
  uint64_t v94 = a28;
  int v396 = *(_DWORD *)(a27 + 32);
  std::string v394 = &unk_26C5C3878;
  uint64_t v397 = *(void *)(a27 + 36);
  int v398 = *(_DWORD *)(a27 + 44);
  uint64_t v389 = &unk_26C5C3AF0;
  if (*(char *)(a28 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v390, *(const std::string::value_type **)(a28 + 8), *(void *)(a28 + 16));
    uint64_t v94 = a28;
  }
  else
  {
    std::string v390 = *(std::string *)(a28 + 8);
  }
  int v391 = *(_DWORD *)(v94 + 32);
  uint64_t v389 = &unk_26C5C3878;
  uint64_t v392 = *(void *)(v94 + 36);
  uint64_t v213 = v94;
  int v393 = *(_DWORD *)(v94 + 44);
  std::string v384 = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v385, *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else {
    std::string v385 = *(std::string *)(a29 + 8);
  }
  int v386 = *(_DWORD *)(a29 + 32);
  std::string v384 = &unk_26C5C3818;
  char v387 = *(unsigned char *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v388, *(const std::string::value_type **)(a29 + 40), *(void *)(a29 + 48));
  }
  else {
    std::string v388 = *(std::string *)(a29 + 40);
  }
  std::string v379 = &unk_26C5C3AF0;
  if (*(char *)(a30 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v380, *(const std::string::value_type **)(a30 + 8), *(void *)(a30 + 16));
  }
  else {
    std::string v380 = *(std::string *)(a30 + 8);
  }
  int v381 = *(_DWORD *)(a30 + 32);
  std::string v379 = &unk_26C5C3818;
  char v382 = *(unsigned char *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v383, *(const std::string::value_type **)(a30 + 40), *(void *)(a30 + 48));
  }
  else {
    std::string v383 = *(std::string *)(a30 + 40);
  }
  uint64_t v95 = a31;
  std::string v374 = &unk_26C5C3AF0;
  if (*(char *)(a31 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(a31 + 8), *(void *)(a31 + 16));
    uint64_t v95 = a31;
  }
  else
  {
    std::string v375 = *(std::string *)(a31 + 8);
  }
  int v376 = *(_DWORD *)(v95 + 32);
  std::string v374 = &unk_26C5C3818;
  char v377 = *(unsigned char *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v378, *(const std::string::value_type **)(a31 + 40), *(void *)(a31 + 48));
  }
  else {
    std::string v378 = *(std::string *)(a31 + 40);
  }
  uint64_t v96 = a32;
  std::string v369 = &unk_26C5C3AF0;
  if (*(char *)(a32 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v370, *(const std::string::value_type **)(a32 + 8), *(void *)(a32 + 16));
    uint64_t v96 = a32;
  }
  else
  {
    std::string v370 = *(std::string *)(a32 + 8);
  }
  int v371 = *(_DWORD *)(v96 + 32);
  std::string v369 = &unk_26C5C3818;
  char v372 = *(unsigned char *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v373, *(const std::string::value_type **)(a32 + 40), *(void *)(a32 + 48));
  }
  else {
    std::string v373 = *(std::string *)(a32 + 40);
  }
  uint64_t v364 = &unk_26C5C3AF0;
  if (*(char *)(a33 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)(a33 + 8), *(void *)(a33 + 16));
  }
  else {
    std::string v365 = *(std::string *)(a33 + 8);
  }
  int v366 = *(_DWORD *)(a33 + 32);
  uint64_t v364 = &unk_26C5C3818;
  char v367 = *(unsigned char *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)(a33 + 40), *(void *)(a33 + 48));
  }
  else {
    std::string v368 = *(std::string *)(a33 + 40);
  }
  uint64_t v97 = a34;
  int v359 = &unk_26C5C3AF0;
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
    uint64_t v97 = a34;
  }
  else
  {
    std::string v360 = *(std::string *)(a34 + 8);
  }
  char v99 = (uint64_t *)(v97 + 36);
  uint64_t v98 = *(void *)(v97 + 36);
  int v361 = *(_DWORD *)(v97 + 32);
  uint64_t v100 = a35;
  int v359 = &unk_26C5C3878;
  uint64_t v362 = v98;
  char v212 = v99;
  int v363 = *((_DWORD *)v99 + 2);
  char v354 = &unk_26C5C3AF0;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
    uint64_t v100 = a35;
  }
  else
  {
    std::string v355 = *(std::string *)(a35 + 8);
  }
  uint64_t v101 = *(void *)(v100 + 36);
  int v356 = *(_DWORD *)(v100 + 32);
  char v354 = &unk_26C5C3878;
  uint64_t v357 = v101;
  char v211 = (uint64_t *)(v100 + 36);
  int v358 = *(_DWORD *)(v100 + 44);
  int v349 = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
  }
  else {
    std::string v350 = *(std::string *)(a36 + 8);
  }
  int v351 = *(_DWORD *)(a36 + 32);
  int v349 = &unk_26C5C3818;
  char v352 = *(unsigned char *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(a36 + 40), *(void *)(a36 + 48));
  }
  else {
    std::string v353 = *(std::string *)(a36 + 40);
  }
  std::string v344 = &unk_26C5C3AF0;
  if (*(char *)(a37 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v345, *(const std::string::value_type **)(a37 + 8), *(void *)(a37 + 16));
  }
  else {
    std::string v345 = *(std::string *)(a37 + 8);
  }
  uint64_t v102 = a38;
  int v346 = *(_DWORD *)(a37 + 32);
  std::string v344 = &unk_26C5C3878;
  uint64_t v347 = *(void *)(a37 + 36);
  int v348 = *(_DWORD *)(a37 + 44);
  std::string v339 = &unk_26C5C3AF0;
  if (*(char *)(a38 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)(a38 + 8), *(void *)(a38 + 16));
    uint64_t v102 = a38;
  }
  else
  {
    std::string v340 = *(std::string *)(a38 + 8);
  }
  int v341 = *(_DWORD *)(v102 + 32);
  std::string v339 = &unk_26C5C3878;
  uint64_t v342 = *(void *)(v102 + 36);
  uint64_t v210 = v102;
  int v343 = *(_DWORD *)(v102 + 44);
  int v334 = &unk_26C5C3AF0;
  if (*(char *)(a39 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(a39 + 8), *(void *)(a39 + 16));
  }
  else {
    std::string v335 = *(std::string *)(a39 + 8);
  }
  int v336 = *(_DWORD *)(a39 + 32);
  int v334 = &unk_26C5C3818;
  char v337 = *(unsigned char *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(a39 + 40), *(void *)(a39 + 48));
  }
  else {
    std::string v338 = *(std::string *)(a39 + 40);
  }
  uint64_t v103 = a40;
  std::string v329 = &unk_26C5C3AF0;
  if (*(char *)(a40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v330, *(const std::string::value_type **)(a40 + 8), *(void *)(a40 + 16));
    uint64_t v103 = a40;
  }
  else
  {
    std::string v330 = *(std::string *)(a40 + 8);
  }
  int v331 = *(_DWORD *)(v103 + 32);
  std::string v329 = &unk_26C5C3818;
  char v332 = *(unsigned char *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)(a40 + 40), *(void *)(a40 + 48));
  }
  else {
    std::string v333 = *(std::string *)(a40 + 40);
  }
  uint64_t v104 = a41;
  std::string v324 = &unk_26C5C3AF0;
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v325, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
    uint64_t v104 = a41;
  }
  else
  {
    std::string v325 = *(std::string *)(a41 + 8);
  }
  uint64_t v105 = *(void *)(v104 + 36);
  int v326 = *(_DWORD *)(v104 + 32);
  std::string v324 = &unk_26C5C3878;
  uint64_t v327 = v105;
  std::string v209 = (uint64_t *)(v104 + 36);
  int v328 = *(_DWORD *)(v104 + 44);
  uint64_t v319 = &unk_26C5C3AF0;
  if (*(char *)(a42 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)(a42 + 8), *(void *)(a42 + 16));
  }
  else {
    std::string v320 = *(std::string *)(a42 + 8);
  }
  uint64_t v106 = *(void *)(a42 + 36);
  int v321 = *(_DWORD *)(a42 + 32);
  uint64_t v319 = &unk_26C5C3878;
  uint64_t v322 = v106;
  int v323 = *(_DWORD *)(a42 + 44);
  int v314 = &unk_26C5C3AF0;
  if (*(char *)(a43 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)(a43 + 8), *(void *)(a43 + 16));
  }
  else {
    std::string v315 = *(std::string *)(a43 + 8);
  }
  uint64_t v107 = *(void *)(a43 + 36);
  int v316 = *(_DWORD *)(a43 + 32);
  uint64_t v108 = a44;
  int v314 = &unk_26C5C3878;
  uint64_t v317 = v107;
  int v318 = *(_DWORD *)(a43 + 44);
  char v310 = &unk_26C5C3AF0;
  if (*(char *)(a44 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)(a44 + 8), *(void *)(a44 + 16));
    uint64_t v108 = a44;
  }
  else
  {
    std::string v311 = *(std::string *)(a44 + 8);
  }
  int v312 = *(_DWORD *)(v108 + 32);
  char v310 = &unk_26C5C3858;
  uint64_t v208 = v108;
  uint64_t v313 = *(void *)(v108 + 36);
  uint64_t v305 = &unk_26C5C3AF0;
  if (*(char *)(a45 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)(a45 + 8), *(void *)(a45 + 16));
  }
  else {
    std::string v306 = *(std::string *)(a45 + 8);
  }
  int v307 = *(_DWORD *)(a45 + 32);
  uint64_t v305 = &unk_26C5C3818;
  char v308 = *(unsigned char *)(a45 + 36);
  if (*(char *)(a45 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a45 + 40), *(void *)(a45 + 48));
  }
  else {
    std::string v309 = *(std::string *)(a45 + 40);
  }
  int v300 = &unk_26C5C3AF0;
  if (*(char *)(a46 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(a46 + 8), *(void *)(a46 + 16));
  }
  else {
    std::string v301 = *(std::string *)(a46 + 8);
  }
  int v302 = *(_DWORD *)(a46 + 32);
  int v300 = &unk_26C5C3818;
  char v303 = *(unsigned char *)(a46 + 36);
  if (*(char *)(a46 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a46 + 40), *(void *)(a46 + 48));
  }
  else {
    std::string v304 = *(std::string *)(a46 + 40);
  }
  std::string v295 = &unk_26C5C3AF0;
  if (*(char *)(a47 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a47 + 8), *(void *)(a47 + 16));
  }
  else {
    std::string v296 = *(std::string *)(a47 + 8);
  }
  uint64_t v109 = *(void *)(a47 + 36);
  int v297 = *(_DWORD *)(a47 + 32);
  uint64_t v110 = a48;
  std::string v295 = &unk_26C5C3878;
  uint64_t v298 = v109;
  int v299 = *(_DWORD *)(a47 + 44);
  uint64_t v290 = &unk_26C5C3AF0;
  if (*(char *)(a48 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a48 + 8), *(void *)(a48 + 16));
    uint64_t v110 = a48;
  }
  else
  {
    std::string v291 = *(std::string *)(a48 + 8);
  }
  std::string v112 = (uint64_t *)(v110 + 36);
  uint64_t v111 = *(void *)(v110 + 36);
  int v292 = *(_DWORD *)(v110 + 32);
  uint64_t v113 = a49;
  uint64_t v290 = &unk_26C5C3878;
  uint64_t v293 = v111;
  std::string v207 = v112;
  int v294 = *((_DWORD *)v112 + 2);
  char v285 = &unk_26C5C3AF0;
  if (*(char *)(a49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a49 + 8), *(void *)(a49 + 16));
    uint64_t v113 = a49;
  }
  else
  {
    std::string v286 = *(std::string *)(a49 + 8);
  }
  uint64_t v114 = *(void *)(v113 + 36);
  int v287 = *(_DWORD *)(v113 + 32);
  char v285 = &unk_26C5C3878;
  uint64_t v288 = v114;
  char v206 = (uint64_t *)(v113 + 36);
  int v289 = *(_DWORD *)(v113 + 44);
  int v280 = &unk_26C5C3AF0;
  if (*(char *)(a50 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a50 + 8), *(void *)(a50 + 16));
  }
  else {
    std::string v281 = *(std::string *)(a50 + 8);
  }
  uint64_t v115 = *(void *)(a50 + 36);
  int v282 = *(_DWORD *)(a50 + 32);
  int v280 = &unk_26C5C3878;
  uint64_t v283 = v115;
  int v284 = *(_DWORD *)(a50 + 44);
  std::string v276 = &unk_26C5C3AF0;
  if (*(char *)(a51 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(a51 + 8), *(void *)(a51 + 16));
  }
  else {
    std::string v277 = *(std::string *)(a51 + 8);
  }
  uint64_t v116 = a52;
  int v278 = *(_DWORD *)(a51 + 32);
  std::string v276 = &unk_26C5C3858;
  uint64_t v279 = *(void *)(a51 + 36);
  int v272 = &unk_26C5C3AF0;
  if (*(char *)(a52 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a52 + 8), *(void *)(a52 + 16));
    uint64_t v116 = a52;
  }
  else
  {
    std::string v273 = *(std::string *)(a52 + 8);
  }
  int v274 = *(_DWORD *)(v116 + 32);
  int v272 = &unk_26C5C3858;
  uint64_t v205 = v116;
  uint64_t v275 = *(void *)(v116 + 36);
  int v267 = &unk_26C5C3AF0;
  if (*(char *)(a53 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a53 + 8), *(void *)(a53 + 16));
  }
  else {
    std::string v268 = *(std::string *)(a53 + 8);
  }
  int v269 = *(_DWORD *)(a53 + 32);
  int v267 = &unk_26C5C3818;
  char v270 = *(unsigned char *)(a53 + 36);
  if (*(char *)(a53 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a53 + 40), *(void *)(a53 + 48));
  }
  else {
    std::string v271 = *(std::string *)(a53 + 40);
  }
  int v262 = &unk_26C5C3AF0;
  if (*(char *)(a54 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a54 + 8), *(void *)(a54 + 16));
  }
  else {
    std::string v263 = *(std::string *)(a54 + 8);
  }
  uint64_t v117 = a55;
  int v264 = *(_DWORD *)(a54 + 32);
  int v262 = &unk_26C5C3878;
  uint64_t v265 = *(void *)(a54 + 36);
  int v266 = *(_DWORD *)(a54 + 44);
  int v257 = &unk_26C5C3AF0;
  if (*(char *)(a55 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a55 + 8), *(void *)(a55 + 16));
    uint64_t v117 = a55;
  }
  else
  {
    std::string v258 = *(std::string *)(a55 + 8);
  }
  int v259 = *(_DWORD *)(v117 + 32);
  int v257 = &unk_26C5C3818;
  char v260 = *(unsigned char *)(a55 + 36);
  if (*(char *)(a55 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(a55 + 40), *(void *)(a55 + 48));
  }
  else {
    std::string v261 = *(std::string *)(a55 + 40);
  }
  uint64_t v118 = a56;
  int v252 = &unk_26C5C3AF0;
  if (*(char *)(a56 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a56 + 8), *(void *)(a56 + 16));
    uint64_t v118 = a56;
  }
  else
  {
    std::string v253 = *(std::string *)(a56 + 8);
  }
  std::string v120 = (uint64_t *)(v118 + 36);
  uint64_t v119 = *(void *)(v118 + 36);
  int v254 = *(_DWORD *)(v118 + 32);
  uint64_t v121 = a57;
  int v252 = &unk_26C5C3878;
  uint64_t v255 = v119;
  std::string v204 = v120;
  int v256 = *((_DWORD *)v120 + 2);
  char v247 = &unk_26C5C3AF0;
  if (*(char *)(a57 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a57 + 8), *(void *)(a57 + 16));
    uint64_t v121 = a57;
  }
  else
  {
    std::string v248 = *(std::string *)(a57 + 8);
  }
  uint64_t v122 = a58;
  int v249 = *(_DWORD *)(v121 + 32);
  char v247 = &unk_26C5C3878;
  uint64_t v250 = *(void *)(v121 + 36);
  int v251 = *(_DWORD *)(v121 + 44);
  std::string v242 = &unk_26C5C3AF0;
  if (*(char *)(a58 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a58 + 8), *(void *)(a58 + 16));
    uint64_t v122 = a58;
  }
  else
  {
    std::string v243 = *(std::string *)(a58 + 8);
  }
  uint64_t v123 = a59;
  int v244 = *(_DWORD *)(v122 + 32);
  std::string v242 = &unk_26C5C3878;
  uint64_t v245 = *(void *)(v122 + 36);
  uint64_t v203 = v122;
  int v246 = *(_DWORD *)(v122 + 44);
  char v237 = &unk_26C5C3AF0;
  if (*(char *)(a59 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a59 + 8), *(void *)(a59 + 16));
    uint64_t v123 = a59;
  }
  else
  {
    std::string v238 = *(std::string *)(a59 + 8);
  }
  uint64_t v124 = a60;
  uint64_t v125 = *(void *)(v123 + 36);
  int v239 = *(_DWORD *)(v123 + 32);
  char v237 = &unk_26C5C3878;
  uint64_t v240 = v125;
  std::string v202 = (uint64_t *)(v123 + 36);
  int v241 = *(_DWORD *)(v123 + 44);
  std::string v232 = &unk_26C5C3AF0;
  if (*(char *)(a60 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a60 + 8), *(void *)(a60 + 16));
    uint64_t v124 = a60;
  }
  else
  {
    std::string v233 = *(std::string *)(a60 + 8);
  }
  int v234 = *(_DWORD *)(v124 + 32);
  std::string v232 = &unk_26C5C3818;
  char v235 = *(unsigned char *)(v124 + 36);
  char v201 = (long long *)(v124 + 40);
  if (*(char *)(v124 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(v124 + 40), *(void *)(v124 + 48));
  }
  else {
    std::string v236 = *(std::string *)(v124 + 40);
  }
  uint64_t v126 = a61;
  char v227 = &unk_26C5C3AF0;
  if (*(char *)(a61 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a61 + 8), *(void *)(a61 + 16));
    uint64_t v126 = a61;
  }
  else
  {
    std::string v228 = *(std::string *)(a61 + 8);
  }
  int v229 = *(_DWORD *)(v126 + 32);
  char v227 = &unk_26C5C3818;
  char v230 = *(unsigned char *)(v126 + 36);
  int v200 = (long long *)(v126 + 40);
  if (*(char *)(v126 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(v126 + 40), *(void *)(v126 + 48));
  }
  else {
    std::string v231 = *(std::string *)(v126 + 40);
  }
  uint64_t v127 = a62;
  std::string v222 = &unk_26C5C3AF0;
  if (*(char *)(a62 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a62 + 8), *(void *)(a62 + 16));
    uint64_t v127 = a62;
  }
  else
  {
    std::string v223 = *(std::string *)(a62 + 8);
  }
  int v224 = *(_DWORD *)(v127 + 32);
  std::string v222 = &unk_26C5C3818;
  char v225 = *(unsigned char *)(v127 + 36);
  char v199 = (long long *)(v127 + 40);
  if (*(char *)(v127 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(v127 + 40), *(void *)(v127 + 48));
  }
  else {
    std::string v226 = *(std::string *)(v127 + 40);
  }
  *(void *)uint64_t v76 = &unk_26C5BED18;
  char v128 = (std::string *)(v76 + 8);
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v128, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v128->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
    *(void *)(v76 + 24) = *((void *)&__sz.__r_.__value_.__l + 2);
  }
  *(void *)(v76 + 32) = 0;
  *(void *)(v76 + 40) = 0;
  *(void *)(v76 + 56) = 0;
  *(void *)(v76 + 48) = 0;
  *(void *)uint64_t v76 = &unk_26C5CB7B0;
  *(void *)(v76 + 64) = 0;
  *(void *)(v76 + 72) = 0;
  v812 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v813, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v813 = __s;
  }
  int v814 = v516;
  v812 = &unk_26C5C3878;
  uint64_t v815 = v517;
  int v816 = v518;
  v807 = &unk_26C5C3AF0;
  if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v808, v510.__r_.__value_.__l.__data_, v510.__r_.__value_.__l.__size_);
  }
  else {
    std::string v808 = v510;
  }
  int v809 = v511;
  v807 = &unk_26C5C3878;
  uint64_t v810 = v512;
  int v811 = v513;
  v802 = &unk_26C5C3AF0;
  if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v803, v505.__r_.__value_.__l.__data_, v505.__r_.__value_.__l.__size_);
  }
  else {
    std::string v803 = v505;
  }
  int v804 = v506;
  v802 = &unk_26C5C3878;
  uint64_t v805 = v507;
  int v806 = v508;
  v797 = &unk_26C5C3AF0;
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v798, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
  }
  else {
    std::string v798 = v500;
  }
  int v799 = v501;
  v797 = &unk_26C5C3878;
  uint64_t v800 = v502;
  int v801 = v503;
  v792 = &unk_26C5C3AF0;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v793, v495.__r_.__value_.__l.__data_, v495.__r_.__value_.__l.__size_);
  }
  else {
    std::string v793 = v495;
  }
  int v794 = v496;
  v792 = &unk_26C5C3878;
  uint64_t v795 = v497;
  int v796 = v498;
  v787 = &unk_26C5C3AF0;
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v788, v490.__r_.__value_.__l.__data_, v490.__r_.__value_.__l.__size_);
  }
  else {
    std::string v788 = v490;
  }
  int v789 = v491;
  v787 = &unk_26C5C3878;
  uint64_t v790 = v492;
  int v791 = v493;
  v782 = &unk_26C5C3AF0;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v783, v485.__r_.__value_.__l.__data_, v485.__r_.__value_.__l.__size_);
  }
  else {
    std::string v783 = v485;
  }
  int v784 = v486;
  v782 = &unk_26C5C3878;
  uint64_t v785 = v487;
  int v786 = v488;
  v777 = &unk_26C5C3AF0;
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v778, v480.__r_.__value_.__l.__data_, v480.__r_.__value_.__l.__size_);
  }
  else {
    std::string v778 = v480;
  }
  int v779 = v481;
  v777 = &unk_26C5C3878;
  uint64_t v780 = v482;
  int v781 = v483;
  v772 = &unk_26C5C3AF0;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v773, v475.__r_.__value_.__l.__data_, v475.__r_.__value_.__l.__size_);
  }
  else {
    std::string v773 = v475;
  }
  int v774 = v476;
  v772 = &unk_26C5C3818;
  char v775 = v477;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v776, v478.__r_.__value_.__l.__data_, v478.__r_.__value_.__l.__size_);
  }
  else {
    std::string v776 = v478;
  }
  v767 = &unk_26C5C3AF0;
  if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v768, v470.__r_.__value_.__l.__data_, v470.__r_.__value_.__l.__size_);
  }
  else {
    std::string v768 = v470;
  }
  int v769 = v471;
  v767 = &unk_26C5C3878;
  uint64_t v770 = v472;
  int v771 = v473;
  v762 = &unk_26C5C3AF0;
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v763, v465.__r_.__value_.__l.__data_, v465.__r_.__value_.__l.__size_);
  }
  else {
    std::string v763 = v465;
  }
  int v764 = v466;
  v762 = &unk_26C5C3818;
  char v765 = v467;
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v766, v468.__r_.__value_.__l.__data_, v468.__r_.__value_.__l.__size_);
  }
  else {
    std::string v766 = v468;
  }
  v757 = &unk_26C5C3AF0;
  if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v758, v460.__r_.__value_.__l.__data_, v460.__r_.__value_.__l.__size_);
  }
  else {
    std::string v758 = v460;
  }
  int v759 = v461;
  v757 = &unk_26C5C3878;
  uint64_t v760 = v462;
  int v761 = v463;
  v752 = &unk_26C5C3AF0;
  if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v753, v455.__r_.__value_.__l.__data_, v455.__r_.__value_.__l.__size_);
  }
  else {
    std::string v753 = v455;
  }
  int v754 = v456;
  v752 = &unk_26C5C3878;
  uint64_t v755 = v457;
  int v756 = v458;
  v747 = &unk_26C5C3AF0;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v748, v450.__r_.__value_.__l.__data_, v450.__r_.__value_.__l.__size_);
  }
  else {
    std::string v748 = v450;
  }
  int v749 = v451;
  v747 = &unk_26C5C3878;
  uint64_t v750 = v452;
  int v751 = v453;
  v742 = &unk_26C5C3AF0;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v743, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
  }
  else {
    std::string v743 = v445;
  }
  int v744 = v446;
  v742 = &unk_26C5C3878;
  uint64_t v745 = v447;
  int v746 = v448;
  v737 = &unk_26C5C3AF0;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v738, v440.__r_.__value_.__l.__data_, v440.__r_.__value_.__l.__size_);
  }
  else {
    std::string v738 = v440;
  }
  int v739 = v441;
  v737 = &unk_26C5C3878;
  uint64_t v740 = v442;
  int v741 = v443;
  v732 = &unk_26C5C3AF0;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v733, v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
  }
  else {
    std::string v733 = v435;
  }
  int v734 = v436;
  v732 = &unk_26C5C3878;
  uint64_t v735 = v437;
  int v736 = v438;
  v727 = &unk_26C5C3AF0;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v728, v430.__r_.__value_.__l.__data_, v430.__r_.__value_.__l.__size_);
  }
  else {
    std::string v728 = v430;
  }
  int v729 = v431;
  v727 = &unk_26C5C3878;
  uint64_t v730 = v432;
  int v731 = v433;
  v722 = &unk_26C5C3AF0;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v723, v425.__r_.__value_.__l.__data_, v425.__r_.__value_.__l.__size_);
  }
  else {
    std::string v723 = v425;
  }
  int v724 = v426;
  v722 = &unk_26C5C3878;
  uint64_t v725 = v427;
  int v726 = v428;
  v717 = &unk_26C5C3AF0;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v718, v420.__r_.__value_.__l.__data_, v420.__r_.__value_.__l.__size_);
  }
  else {
    std::string v718 = v420;
  }
  int v719 = v421;
  v717 = &unk_26C5C3878;
  uint64_t v720 = v422;
  int v721 = v423;
  v712 = &unk_26C5C3AF0;
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v713, v415.__r_.__value_.__l.__data_, v415.__r_.__value_.__l.__size_);
  }
  else {
    std::string v713 = v415;
  }
  int v714 = v416;
  v712 = &unk_26C5C3878;
  uint64_t v715 = v417;
  int v716 = v418;
  v707 = &unk_26C5C3AF0;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v708, v410.__r_.__value_.__l.__data_, v410.__r_.__value_.__l.__size_);
  }
  else {
    std::string v708 = v410;
  }
  int v709 = v411;
  v707 = &unk_26C5C3878;
  uint64_t v710 = v412;
  int v711 = v413;
  v702 = &unk_26C5C3AF0;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v703, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
  }
  else {
    std::string v703 = v405;
  }
  int v704 = v406;
  v702 = &unk_26C5C3878;
  uint64_t v705 = v407;
  int v706 = v408;
  v697 = &unk_26C5C3AF0;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v698, v400.__r_.__value_.__l.__data_, v400.__r_.__value_.__l.__size_);
  }
  else {
    std::string v698 = v400;
  }
  int v699 = v401;
  v697 = &unk_26C5C3878;
  uint64_t v700 = v402;
  int v701 = v403;
  v692 = &unk_26C5C3AF0;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v693, v395.__r_.__value_.__l.__data_, v395.__r_.__value_.__l.__size_);
  }
  else {
    std::string v693 = v395;
  }
  int v694 = v396;
  v692 = &unk_26C5C3878;
  uint64_t v695 = v397;
  int v696 = v398;
  v687 = &unk_26C5C3AF0;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v688, v390.__r_.__value_.__l.__data_, v390.__r_.__value_.__l.__size_);
  }
  else {
    std::string v688 = v390;
  }
  int v689 = v391;
  v687 = &unk_26C5C3878;
  uint64_t v690 = v392;
  int v691 = v393;
  v682 = &unk_26C5C3AF0;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v683, v385.__r_.__value_.__l.__data_, v385.__r_.__value_.__l.__size_);
  }
  else {
    std::string v683 = v385;
  }
  int v684 = v386;
  v682 = &unk_26C5C3818;
  char v685 = v387;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v686, v388.__r_.__value_.__l.__data_, v388.__r_.__value_.__l.__size_);
  }
  else {
    std::string v686 = v388;
  }
  v677 = &unk_26C5C3AF0;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v678, v380.__r_.__value_.__l.__data_, v380.__r_.__value_.__l.__size_);
  }
  else {
    std::string v678 = v380;
  }
  int v679 = v381;
  v677 = &unk_26C5C3818;
  char v680 = v382;
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v681, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
  }
  else {
    std::string v681 = v383;
  }
  v672 = &unk_26C5C3AF0;
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v673, v375.__r_.__value_.__l.__data_, v375.__r_.__value_.__l.__size_);
  }
  else {
    std::string v673 = v375;
  }
  int v674 = v376;
  v672 = &unk_26C5C3818;
  char v675 = v377;
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v676, v378.__r_.__value_.__l.__data_, v378.__r_.__value_.__l.__size_);
  }
  else {
    std::string v676 = v378;
  }
  v667 = &unk_26C5C3AF0;
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v668, v370.__r_.__value_.__l.__data_, v370.__r_.__value_.__l.__size_);
  }
  else {
    std::string v668 = v370;
  }
  int v669 = v371;
  v667 = &unk_26C5C3818;
  char v670 = v372;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v671, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  }
  else {
    std::string v671 = v373;
  }
  v662 = &unk_26C5C3AF0;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v663, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
  }
  else {
    std::string v663 = v365;
  }
  int v664 = v366;
  v662 = &unk_26C5C3818;
  char v665 = v367;
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v666, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  }
  else {
    std::string v666 = v368;
  }
  v657 = &unk_26C5C3AF0;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v658, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  }
  else {
    std::string v658 = v360;
  }
  int v659 = v361;
  v657 = &unk_26C5C3878;
  uint64_t v660 = v362;
  int v661 = v363;
  v652 = &unk_26C5C3AF0;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v653, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  }
  else {
    std::string v653 = v355;
  }
  int v654 = v356;
  v652 = &unk_26C5C3878;
  uint64_t v655 = v357;
  int v656 = v358;
  v647 = &unk_26C5C3AF0;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v648, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  }
  else {
    std::string v648 = v350;
  }
  int v649 = v351;
  v647 = &unk_26C5C3818;
  char v650 = v352;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v651, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  }
  else {
    std::string v651 = v353;
  }
  v642 = &unk_26C5C3AF0;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v643, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  }
  else {
    std::string v643 = v345;
  }
  int v644 = v346;
  v642 = &unk_26C5C3878;
  uint64_t v645 = v347;
  int v646 = v348;
  v637 = &unk_26C5C3AF0;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v638, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  }
  else {
    std::string v638 = v340;
  }
  int v639 = v341;
  v637 = &unk_26C5C3878;
  uint64_t v640 = v342;
  int v641 = v343;
  v632 = &unk_26C5C3AF0;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v633, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  }
  else {
    std::string v633 = v335;
  }
  int v634 = v336;
  v632 = &unk_26C5C3818;
  char v635 = v337;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v636, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  }
  else {
    std::string v636 = v338;
  }
  v627 = &unk_26C5C3AF0;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v628, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
  }
  else {
    std::string v628 = v330;
  }
  int v629 = v331;
  v627 = &unk_26C5C3818;
  char v630 = v332;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v631, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  }
  else {
    std::string v631 = v333;
  }
  v622 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v623, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  }
  else {
    std::string v623 = v325;
  }
  int v624 = v326;
  v622 = &unk_26C5C3878;
  uint64_t v625 = v327;
  int v626 = v328;
  v617 = &unk_26C5C3AF0;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v618, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  }
  else {
    std::string v618 = v320;
  }
  int v619 = v321;
  v617 = &unk_26C5C3878;
  uint64_t v620 = v322;
  int v621 = v323;
  v612 = &unk_26C5C3AF0;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v613, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  }
  else {
    std::string v613 = v315;
  }
  int v614 = v316;
  v612 = &unk_26C5C3878;
  uint64_t v615 = v317;
  int v616 = v318;
  v608 = &unk_26C5C3AF0;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v609, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  }
  else {
    std::string v609 = v311;
  }
  int v610 = v312;
  v608 = &unk_26C5C3858;
  uint64_t v611 = v313;
  v603 = &unk_26C5C3AF0;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v604, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  }
  else {
    std::string v604 = v306;
  }
  int v605 = v307;
  v603 = &unk_26C5C3818;
  char v606 = v308;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v607, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  }
  else {
    std::string v607 = v309;
  }
  v598 = &unk_26C5C3AF0;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v599, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  }
  else {
    std::string v599 = v301;
  }
  int v600 = v302;
  v598 = &unk_26C5C3818;
  char v601 = v303;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v602, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  }
  else {
    std::string v602 = v304;
  }
  v593 = &unk_26C5C3AF0;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v594, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  }
  else {
    std::string v594 = v296;
  }
  int v595 = v297;
  v593 = &unk_26C5C3878;
  uint64_t v596 = v298;
  int v597 = v299;
  v588 = &unk_26C5C3AF0;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v589, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  }
  else {
    std::string v589 = v291;
  }
  int v590 = v292;
  v588 = &unk_26C5C3878;
  uint64_t v591 = v293;
  int v592 = v294;
  v583 = &unk_26C5C3AF0;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v584, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  }
  else {
    std::string v584 = v286;
  }
  int v585 = v287;
  v583 = &unk_26C5C3878;
  uint64_t v586 = v288;
  int v587 = v289;
  v578 = &unk_26C5C3AF0;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v579, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  }
  else {
    std::string v579 = v281;
  }
  int v580 = v282;
  v578 = &unk_26C5C3878;
  uint64_t v581 = v283;
  int v582 = v284;
  v574 = &unk_26C5C3AF0;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v575, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  }
  else {
    std::string v575 = v277;
  }
  int v576 = v278;
  v574 = &unk_26C5C3858;
  uint64_t v577 = v279;
  v570 = &unk_26C5C3AF0;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v571, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  }
  else {
    std::string v571 = v273;
  }
  int v572 = v274;
  v570 = &unk_26C5C3858;
  uint64_t v573 = v275;
  std::string v565 = &unk_26C5C3AF0;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v566, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  }
  else {
    std::string v566 = v268;
  }
  int v567 = v269;
  std::string v565 = &unk_26C5C3818;
  char v568 = v270;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v569, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  }
  else {
    std::string v569 = v271;
  }
  v560 = &unk_26C5C3AF0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v561, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  }
  else {
    std::string v561 = v263;
  }
  int v562 = v264;
  v560 = &unk_26C5C3878;
  uint64_t v563 = v265;
  int v564 = v266;
  v555 = &unk_26C5C3AF0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v556, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  }
  else {
    std::string v556 = v258;
  }
  int v557 = v259;
  v555 = &unk_26C5C3818;
  char v558 = v260;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v559, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  }
  else {
    std::string v559 = v261;
  }
  v550 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v551, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  }
  else {
    std::string v551 = v253;
  }
  int v552 = v254;
  v550 = &unk_26C5C3878;
  uint64_t v553 = v255;
  int v554 = v256;
  v545 = &unk_26C5C3AF0;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v546, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  }
  else {
    std::string v546 = v248;
  }
  int v547 = v249;
  v545 = &unk_26C5C3878;
  uint64_t v548 = v250;
  int v549 = v251;
  v540 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v541, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  }
  else {
    std::string v541 = v243;
  }
  int v542 = v244;
  v540 = &unk_26C5C3878;
  uint64_t v543 = v245;
  int v544 = v246;
  v535 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v238;
  }
  int v537 = v239;
  v535 = &unk_26C5C3878;
  uint64_t v538 = v240;
  int v539 = v241;
  uint64_t v530 = &unk_26C5C3AF0;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v531, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  }
  else {
    std::string v531 = v233;
  }
  int v532 = v234;
  uint64_t v530 = &unk_26C5C3818;
  char v533 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v534, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  }
  else {
    std::string v534 = v236;
  }
  uint64_t v525 = &unk_26C5C3AF0;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v526, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  }
  else {
    std::string v526 = v228;
  }
  int v527 = v229;
  uint64_t v525 = &unk_26C5C3818;
  char v528 = v230;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v529, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  }
  else {
    std::string v529 = v231;
  }
  int v520 = &unk_26C5C3AF0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v521, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    std::string v521 = v223;
  }
  int v522 = v224;
  int v520 = &unk_26C5C3818;
  char v523 = v225;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v524, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  }
  else {
    std::string v524 = v226;
  }
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v76 + 80, (uint64_t)&v812, (uint64_t)&v807, (uint64_t)&v802, (uint64_t)&v797, (uint64_t)&v792, (uint64_t)&v787, (uint64_t)&v782, (uint64_t)&v777, (uint64_t)&v772, (uint64_t)&v767, (uint64_t)&v762, (uint64_t)&v757, (uint64_t)&v752, (uint64_t)&v747, (uint64_t)&v742, (uint64_t)&v737, (uint64_t)&v732, (uint64_t)&v727,
    (uint64_t)&v722,
    (uint64_t)&v717,
    (uint64_t)&v712,
    (uint64_t)&v707,
    (uint64_t)&v702,
    (uint64_t)&v697,
    (uint64_t)&v692,
    (uint64_t)&v687,
    (uint64_t)&v682,
    (uint64_t)&v677,
    (uint64_t)&v672,
    (uint64_t)&v667,
    (uint64_t)&v662,
    (uint64_t)&v657,
    (uint64_t)&v652,
    (uint64_t)&v647,
    (uint64_t)&v642,
    (uint64_t)&v637,
    (uint64_t)&v632,
    (uint64_t)&v627,
    (uint64_t)&v622,
    (uint64_t)&v617,
    (uint64_t)&v612,
    (uint64_t)&v608,
    (uint64_t)&v603,
    (uint64_t)&v598,
    (uint64_t)&v593,
    (uint64_t)&v588,
    (uint64_t)&v583,
    (uint64_t)&v578,
    (uint64_t)&v574,
    (uint64_t)&v570,
    (uint64_t)&v565,
    (uint64_t)&v560,
    (uint64_t)&v555,
    (uint64_t)&v550,
    (uint64_t)&v545,
    (uint64_t)&v540,
    (uint64_t)&v535,
    (uint64_t)&v530,
    (uint64_t)&v525,
    (uint64_t)&v520);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v520);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v525);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v530);
  v535 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v540 = &unk_26C5C3AF0;
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v541.__r_.__value_.__l.__data_);
  }
  v545 = &unk_26C5C3AF0;
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v546.__r_.__value_.__l.__data_);
  }
  v550 = &unk_26C5C3AF0;
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v551.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v555);
  v560 = &unk_26C5C3AF0;
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v561.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v565);
  v570 = &unk_26C5C3AF0;
  if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v571.__r_.__value_.__l.__data_);
  }
  v574 = &unk_26C5C3AF0;
  if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v575.__r_.__value_.__l.__data_);
  }
  v578 = &unk_26C5C3AF0;
  if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v579.__r_.__value_.__l.__data_);
  }
  v583 = &unk_26C5C3AF0;
  if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v584.__r_.__value_.__l.__data_);
  }
  v588 = &unk_26C5C3AF0;
  if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v589.__r_.__value_.__l.__data_);
  }
  v593 = &unk_26C5C3AF0;
  if (SHIBYTE(v594.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v594.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v598);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v603);
  v608 = &unk_26C5C3AF0;
  if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v609.__r_.__value_.__l.__data_);
  }
  v612 = &unk_26C5C3AF0;
  if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v613.__r_.__value_.__l.__data_);
  }
  v617 = &unk_26C5C3AF0;
  if (SHIBYTE(v618.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v618.__r_.__value_.__l.__data_);
  }
  v622 = &unk_26C5C3AF0;
  if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v623.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v627);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v632);
  v637 = &unk_26C5C3AF0;
  if (SHIBYTE(v638.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v638.__r_.__value_.__l.__data_);
  }
  v642 = &unk_26C5C3AF0;
  if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v643.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v647);
  v652 = &unk_26C5C3AF0;
  if (SHIBYTE(v653.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v653.__r_.__value_.__l.__data_);
  }
  v657 = &unk_26C5C3AF0;
  if (SHIBYTE(v658.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v658.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v662);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v667);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v677);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v682);
  v687 = &unk_26C5C3AF0;
  if (SHIBYTE(v688.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v688.__r_.__value_.__l.__data_);
  }
  v692 = &unk_26C5C3AF0;
  if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v693.__r_.__value_.__l.__data_);
  }
  v697 = &unk_26C5C3AF0;
  if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v698.__r_.__value_.__l.__data_);
  }
  v702 = &unk_26C5C3AF0;
  if (SHIBYTE(v703.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v703.__r_.__value_.__l.__data_);
  }
  v707 = &unk_26C5C3AF0;
  if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v708.__r_.__value_.__l.__data_);
  }
  v712 = &unk_26C5C3AF0;
  if (SHIBYTE(v713.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v713.__r_.__value_.__l.__data_);
  }
  v717 = &unk_26C5C3AF0;
  if (SHIBYTE(v718.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v718.__r_.__value_.__l.__data_);
  }
  v722 = &unk_26C5C3AF0;
  if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v723.__r_.__value_.__l.__data_);
  }
  v727 = &unk_26C5C3AF0;
  if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v728.__r_.__value_.__l.__data_);
  }
  v732 = &unk_26C5C3AF0;
  if (SHIBYTE(v733.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v733.__r_.__value_.__l.__data_);
  }
  v737 = &unk_26C5C3AF0;
  if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v738.__r_.__value_.__l.__data_);
  }
  v742 = &unk_26C5C3AF0;
  if (SHIBYTE(v743.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v743.__r_.__value_.__l.__data_);
  }
  v747 = &unk_26C5C3AF0;
  if (SHIBYTE(v748.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v748.__r_.__value_.__l.__data_);
  }
  v752 = &unk_26C5C3AF0;
  if (SHIBYTE(v753.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v753.__r_.__value_.__l.__data_);
  }
  v757 = &unk_26C5C3AF0;
  if (SHIBYTE(v758.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v758.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v762);
  v767 = &unk_26C5C3AF0;
  if (SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v768.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v772);
  v777 = &unk_26C5C3AF0;
  if (SHIBYTE(v778.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v778.__r_.__value_.__l.__data_);
  }
  v782 = &unk_26C5C3AF0;
  if (SHIBYTE(v783.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v783.__r_.__value_.__l.__data_);
  }
  v787 = &unk_26C5C3AF0;
  if (SHIBYTE(v788.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v788.__r_.__value_.__l.__data_);
  }
  v792 = &unk_26C5C3AF0;
  if (SHIBYTE(v793.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v793.__r_.__value_.__l.__data_);
  }
  v797 = &unk_26C5C3AF0;
  if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v798.__r_.__value_.__l.__data_);
  }
  v802 = &unk_26C5C3AF0;
  if (SHIBYTE(v803.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v803.__r_.__value_.__l.__data_);
  }
  v807 = &unk_26C5C3AF0;
  if (SHIBYTE(v808.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v808.__r_.__value_.__l.__data_);
  }
  v812 = &unk_26C5C3AF0;
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v813.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v227);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  char v237 = &unk_26C5C3AF0;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  std::string v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v243.__r_.__value_.__l.__data_);
  }
  char v247 = &unk_26C5C3AF0;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  int v252 = &unk_26C5C3AF0;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v257);
  int v262 = &unk_26C5C3AF0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v263.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v267);
  int v272 = &unk_26C5C3AF0;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  std::string v276 = &unk_26C5C3AF0;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  int v280 = &unk_26C5C3AF0;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v281.__r_.__value_.__l.__data_);
  }
  char v285 = &unk_26C5C3AF0;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v286.__r_.__value_.__l.__data_);
  }
  uint64_t v290 = &unk_26C5C3AF0;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  std::string v295 = &unk_26C5C3AF0;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v296.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v300);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  char v310 = &unk_26C5C3AF0;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v311.__r_.__value_.__l.__data_);
  }
  int v314 = &unk_26C5C3AF0;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v315.__r_.__value_.__l.__data_);
  }
  uint64_t v319 = &unk_26C5C3AF0;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v320.__r_.__value_.__l.__data_);
  }
  std::string v324 = &unk_26C5C3AF0;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v329);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v334);
  std::string v339 = &unk_26C5C3AF0;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v340.__r_.__value_.__l.__data_);
  }
  std::string v344 = &unk_26C5C3AF0;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v349);
  char v354 = &unk_26C5C3AF0;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  int v359 = &unk_26C5C3AF0;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v360.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v364);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v369);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v374);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v379);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v384);
  uint64_t v389 = &unk_26C5C3AF0;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v390.__r_.__value_.__l.__data_);
  }
  std::string v394 = &unk_26C5C3AF0;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v395.__r_.__value_.__l.__data_);
  }
  uint64_t v399 = &unk_26C5C3AF0;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v400.__r_.__value_.__l.__data_);
  }
  uint64_t v404 = &unk_26C5C3AF0;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  int v409 = &unk_26C5C3AF0;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v410.__r_.__value_.__l.__data_);
  }
  std::string v414 = &unk_26C5C3AF0;
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v415.__r_.__value_.__l.__data_);
  }
  int v419 = &unk_26C5C3AF0;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v420.__r_.__value_.__l.__data_);
  }
  int v424 = &unk_26C5C3AF0;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v425.__r_.__value_.__l.__data_);
  }
  int v429 = &unk_26C5C3AF0;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v430.__r_.__value_.__l.__data_);
  }
  int v434 = &unk_26C5C3AF0;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v435.__r_.__value_.__l.__data_);
  }
  int v439 = &unk_26C5C3AF0;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v440.__r_.__value_.__l.__data_);
  }
  uint64_t v444 = &unk_26C5C3AF0;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v445.__r_.__value_.__l.__data_);
  }
  std::string v449 = &unk_26C5C3AF0;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v450.__r_.__value_.__l.__data_);
  }
  std::string v454 = &unk_26C5C3AF0;
  if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v455.__r_.__value_.__l.__data_);
  }
  std::string v459 = &unk_26C5C3AF0;
  if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v460.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v464);
  std::string v469 = &unk_26C5C3AF0;
  if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v470.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v474);
  std::string v479 = &unk_26C5C3AF0;
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v480.__r_.__value_.__l.__data_);
  }
  int v484 = &unk_26C5C3AF0;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v485.__r_.__value_.__l.__data_);
  }
  v489 = &unk_26C5C3AF0;
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v490.__r_.__value_.__l.__data_);
  }
  std::string v494 = &unk_26C5C3AF0;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  int v499 = &unk_26C5C3AF0;
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v500.__r_.__value_.__l.__data_);
  }
  char v504 = &unk_26C5C3AF0;
  if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v505.__r_.__value_.__l.__data_);
  }
  uint64_t v509 = &unk_26C5C3AF0;
  if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v510.__r_.__value_.__l.__data_);
  }
  v514 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v76 = &unk_26C5CB778;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3232, v75);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3280, v73);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3328, v71);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3376, v69);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3424, v67);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3472, v65);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3520, a9);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3568, v221);
  std::__tuple_leaf<8ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 3616, a11);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3680, a12);
  std::__tuple_leaf<10ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 3728, a13);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3792, a14);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3840, v220);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3888, a16);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3936, v219);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 3984, a18);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4032, v218);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4080, v217);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4128, a21);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4176, a22);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4224, a23);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4272, v216);
  *(void *)(v76 + 4320) = &unk_26C5C3AF0;
  uint64_t v129 = (std::string *)(v76 + 4328);
  uint64_t v130 = a25;
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v129, *(const std::string::value_type **)(a25 + 8), *(void *)(a25 + 16));
    uint64_t v130 = a25;
  }
  else
  {
    long long v131 = *(_OWORD *)(a25 + 8);
    *(void *)(v76 + 4344) = *(void *)(a25 + 24);
    *(_OWORD *)&v129->__r_.__value_.__l.__data_ = v131;
  }
  *(_DWORD *)(v76 + 4352) = *(_DWORD *)(v130 + 32);
  *(void *)(v76 + 4320) = &unk_26C5C3878;
  uint64_t v132 = *v215;
  *(_DWORD *)(v76 + 4364) = *((_DWORD *)v215 + 2);
  *(void *)(v76 + 4356) = v132;
  *(void *)(v76 + 4320) = &unk_26C5C47E8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4368, v214);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4416, a27);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4464, v213);
  *(void *)(v76 + 4512) = &unk_26C5C3AF0;
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 4520), *(const std::string::value_type **)(a29 + 8), *(void *)(a29 + 16));
  }
  else
  {
    long long v133 = *(_OWORD *)(a29 + 8);
    *(void *)(v76 + 4536) = *(void *)(a29 + 24);
    *(_OWORD *)(v76 + 4520) = v133;
  }
  *(_DWORD *)(v76 + 4544) = *(_DWORD *)(a29 + 32);
  *(void *)(v76 + 4512) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 4548) = *(unsigned char *)(a29 + 36);
  char v134 = (std::string *)(v76 + 4552);
  if (*(char *)(a29 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)(a29 + 40), *(void *)(a29 + 48));
  }
  else
  {
    long long v135 = *(_OWORD *)(a29 + 40);
    *(void *)(v76 + 4568) = *(void *)(a29 + 56);
    *(_OWORD *)&v134->__r_.__value_.__l.__data_ = v135;
  }
  *(void *)(v76 + 4512) = &unk_26C5C4788;
  std::__tuple_leaf<27ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 4576, a30);
  std::__tuple_leaf<28ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 4640, a31);
  std::__tuple_leaf<29ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 4704, a32);
  std::__tuple_leaf<30ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 4768, a33);
  *(void *)(v76 + 4832) = &unk_26C5C3AF0;
  char v136 = (std::string *)(v76 + 4840);
  uint64_t v137 = a34;
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v136, *(const std::string::value_type **)(a34 + 8), *(void *)(a34 + 16));
    uint64_t v137 = a34;
  }
  else
  {
    long long v138 = *(_OWORD *)(a34 + 8);
    *(void *)(v76 + 4856) = *(void *)(a34 + 24);
    *(_OWORD *)&v136->__r_.__value_.__l.__data_ = v138;
  }
  *(_DWORD *)(v76 + 4864) = *(_DWORD *)(v137 + 32);
  *(void *)(v76 + 4832) = &unk_26C5C3878;
  uint64_t v139 = *v212;
  *(_DWORD *)(v76 + 4876) = *((_DWORD *)v212 + 2);
  *(void *)(v76 + 4868) = v139;
  *(void *)(v76 + 4832) = &unk_26C5C47E8;
  *(void *)(v76 + 4880) = &unk_26C5C3AF0;
  int v140 = (std::string *)(v76 + 4888);
  uint64_t v141 = a35;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)(a35 + 8), *(void *)(a35 + 16));
    uint64_t v141 = a35;
  }
  else
  {
    long long v142 = *(_OWORD *)(a35 + 8);
    *(void *)(v76 + 4904) = *(void *)(a35 + 24);
    *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v142;
  }
  *(_DWORD *)(v76 + 4912) = *(_DWORD *)(v141 + 32);
  *(void *)(v76 + 4880) = &unk_26C5C3878;
  uint64_t v143 = *v211;
  *(_DWORD *)(v76 + 4924) = *((_DWORD *)v211 + 2);
  *(void *)(v76 + 4916) = v143;
  *(void *)(v76 + 4880) = &unk_26C5C47E8;
  *(void *)(v76 + 4928) = &unk_26C5C3AF0;
  if (*(char *)(a36 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 4936), *(const std::string::value_type **)(a36 + 8), *(void *)(a36 + 16));
  }
  else
  {
    long long v144 = *(_OWORD *)(a36 + 8);
    *(void *)(v76 + 4952) = *(void *)(a36 + 24);
    *(_OWORD *)(v76 + 4936) = v144;
  }
  *(_DWORD *)(v76 + 4960) = *(_DWORD *)(a36 + 32);
  *(void *)(v76 + 4928) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 4964) = *(unsigned char *)(a36 + 36);
  char v145 = (std::string *)(v76 + 4968);
  if (*(char *)(a36 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v145, *(const std::string::value_type **)(a36 + 40), *(void *)(a36 + 48));
  }
  else
  {
    long long v146 = *(_OWORD *)(a36 + 40);
    *(void *)(v76 + 4984) = *(void *)(a36 + 56);
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = v146;
  }
  *(void *)(v76 + 4928) = &unk_26C5C4788;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 4992, a37);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 5040, v210);
  std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 5088, a39);
  std::__tuple_leaf<37ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 5152, a40);
  *(void *)(v76 + 5216) = &unk_26C5C3AF0;
  char v147 = (std::string *)(v76 + 5224);
  uint64_t v148 = a41;
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v147, *(const std::string::value_type **)(a41 + 8), *(void *)(a41 + 16));
    uint64_t v148 = a41;
  }
  else
  {
    long long v149 = *(_OWORD *)(a41 + 8);
    *(void *)(v76 + 5240) = *(void *)(a41 + 24);
    *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v149;
  }
  *(_DWORD *)(v76 + 5248) = *(_DWORD *)(v148 + 32);
  *(void *)(v76 + 5216) = &unk_26C5C3878;
  uint64_t v150 = *v209;
  *(_DWORD *)(v76 + 5260) = *((_DWORD *)v209 + 2);
  *(void *)(v76 + 5252) = v150;
  *(void *)(v76 + 5216) = &unk_26C5C47E8;
  *(void *)(v76 + 5264) = &unk_26C5C3AF0;
  char v151 = (std::string *)(v76 + 5272);
  if (*(char *)(a42 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v151, *(const std::string::value_type **)(a42 + 8), *(void *)(a42 + 16));
  }
  else
  {
    long long v152 = *(_OWORD *)(a42 + 8);
    *(void *)(v76 + 5288) = *(void *)(a42 + 24);
    *(_OWORD *)&v151->__r_.__value_.__l.__data_ = v152;
  }
  *(_DWORD *)(v76 + 5296) = *(_DWORD *)(a42 + 32);
  *(void *)(v76 + 5264) = &unk_26C5C3878;
  uint64_t v153 = *(void *)(a42 + 36);
  *(_DWORD *)(v76 + 5308) = *(_DWORD *)(a42 + 44);
  *(void *)(v76 + 5300) = v153;
  *(void *)(v76 + 5264) = &unk_26C5C47E8;
  *(void *)(v76 + 5312) = &unk_26C5C3AF0;
  int v154 = (std::string *)(v76 + 5320);
  if (*(char *)(a43 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v154, *(const std::string::value_type **)(a43 + 8), *(void *)(a43 + 16));
  }
  else
  {
    long long v155 = *(_OWORD *)(a43 + 8);
    *(void *)(v76 + 5336) = *(void *)(a43 + 24);
    *(_OWORD *)&v154->__r_.__value_.__l.__data_ = v155;
  }
  *(_DWORD *)(v76 + 5344) = *(_DWORD *)(a43 + 32);
  *(void *)(v76 + 5312) = &unk_26C5C3878;
  uint64_t v156 = *(void *)(a43 + 36);
  *(_DWORD *)(v76 + 5356) = *(_DWORD *)(a43 + 44);
  *(void *)(v76 + 5348) = v156;
  *(void *)(v76 + 5312) = &unk_26C5C47E8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v76 + 5360, v208);
  *(void *)(v76 + 5408) = &unk_26C5C3AF0;
  if (*(char *)(a45 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 5416), *(const std::string::value_type **)(a45 + 8), *(void *)(a45 + 16));
  }
  else
  {
    long long v157 = *(_OWORD *)(a45 + 8);
    *(void *)(v76 + 5432) = *(void *)(a45 + 24);
    *(_OWORD *)(v76 + 5416) = v157;
  }
  *(_DWORD *)(v76 + 5440) = *(_DWORD *)(a45 + 32);
  *(void *)(v76 + 5408) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 5444) = *(unsigned char *)(a45 + 36);
  int v158 = (std::string *)(v76 + 5448);
  if (*(char *)(a45 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v158, *(const std::string::value_type **)(a45 + 40), *(void *)(a45 + 48));
  }
  else
  {
    long long v159 = *(_OWORD *)(a45 + 40);
    *(void *)(v76 + 5464) = *(void *)(a45 + 56);
    *(_OWORD *)&v158->__r_.__value_.__l.__data_ = v159;
  }
  *(void *)(v76 + 5408) = &unk_26C5C4788;
  *(void *)(v76 + 5472) = &unk_26C5C3AF0;
  if (*(char *)(a46 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 5480), *(const std::string::value_type **)(a46 + 8), *(void *)(a46 + 16));
  }
  else
  {
    long long v160 = *(_OWORD *)(a46 + 8);
    *(void *)(v76 + 5496) = *(void *)(a46 + 24);
    *(_OWORD *)(v76 + 5480) = v160;
  }
  *(_DWORD *)(v76 + 5504) = *(_DWORD *)(a46 + 32);
  *(void *)(v76 + 5472) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 5508) = *(unsigned char *)(a46 + 36);
  char v161 = (std::string *)(v76 + 5512);
  if (*(char *)(a46 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v161, *(const std::string::value_type **)(a46 + 40), *(void *)(a46 + 48));
  }
  else
  {
    long long v162 = *(_OWORD *)(a46 + 40);
    *(void *)(v76 + 5528) = *(void *)(a46 + 56);
    *(_OWORD *)&v161->__r_.__value_.__l.__data_ = v162;
  }
  *(void *)(v76 + 5472) = &unk_26C5C4788;
  *(void *)(v76 + 5536) = &unk_26C5C3AF0;
  char v163 = (std::string *)(v76 + 5544);
  if (*(char *)(a47 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v163, *(const std::string::value_type **)(a47 + 8), *(void *)(a47 + 16));
  }
  else
  {
    long long v164 = *(_OWORD *)(a47 + 8);
    *(void *)(v76 + 5560) = *(void *)(a47 + 24);
    *(_OWORD *)&v163->__r_.__value_.__l.__data_ = v164;
  }
  *(_DWORD *)(v76 + 5568) = *(_DWORD *)(a47 + 32);
  *(void *)(v76 + 5536) = &unk_26C5C3878;
  uint64_t v165 = *(void *)(a47 + 36);
  *(_DWORD *)(v76 + 5580) = *(_DWORD *)(a47 + 44);
  *(void *)(v76 + 5572) = v165;
  *(void *)(v76 + 5536) = &unk_26C5C47E8;
  *(void *)(v76 + 5584) = &unk_26C5C3AF0;
  std::string v166 = (std::string *)(v76 + 5592);
  uint64_t v167 = a48;
  if (*(char *)(a48 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v166, *(const std::string::value_type **)(a48 + 8), *(void *)(a48 + 16));
    uint64_t v167 = a48;
  }
  else
  {
    long long v168 = *(_OWORD *)(a48 + 8);
    *(void *)(v76 + 5608) = *(void *)(a48 + 24);
    *(_OWORD *)&v166->__r_.__value_.__l.__data_ = v168;
  }
  *(_DWORD *)(v76 + 5616) = *(_DWORD *)(v167 + 32);
  *(void *)(v76 + 5584) = &unk_26C5C3878;
  uint64_t v169 = *v207;
  *(_DWORD *)(v76 + 5628) = *((_DWORD *)v207 + 2);
  *(void *)(v76 + 5620) = v169;
  *(void *)(v76 + 5584) = &unk_26C5C47E8;
  *(void *)(v76 + 5632) = &unk_26C5C3AF0;
  uint64_t v170 = (std::string *)(v76 + 5640);
  uint64_t v171 = a49;
  if (*(char *)(a49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v170, *(const std::string::value_type **)(a49 + 8), *(void *)(a49 + 16));
    uint64_t v171 = a49;
  }
  else
  {
    long long v172 = *(_OWORD *)(a49 + 8);
    *(void *)(v76 + 5656) = *(void *)(a49 + 24);
    *(_OWORD *)&v170->__r_.__value_.__l.__data_ = v172;
  }
  *(_DWORD *)(v76 + 5664) = *(_DWORD *)(v171 + 32);
  *(void *)(v76 + 5632) = &unk_26C5C3878;
  uint64_t v173 = *v206;
  *(_DWORD *)(v76 + 5676) = *((_DWORD *)v206 + 2);
  *(void *)(v76 + 5668) = v173;
  *(void *)(v76 + 5632) = &unk_26C5C47E8;
  *(void *)(v76 + 5680) = &unk_26C5C3AF0;
  std::string v174 = (std::string *)(v76 + 5688);
  if (*(char *)(a50 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v174, *(const std::string::value_type **)(a50 + 8), *(void *)(a50 + 16));
  }
  else
  {
    long long v175 = *(_OWORD *)(a50 + 8);
    *(void *)(v76 + 5704) = *(void *)(a50 + 24);
    *(_OWORD *)&v174->__r_.__value_.__l.__data_ = v175;
  }
  *(_DWORD *)(v76 + 5712) = *(_DWORD *)(a50 + 32);
  *(void *)(v76 + 5680) = &unk_26C5C3878;
  uint64_t v176 = *(void *)(a50 + 36);
  *(_DWORD *)(v76 + 5724) = *(_DWORD *)(a50 + 44);
  *(void *)(v76 + 5716) = v176;
  *(void *)(v76 + 5680) = &unk_26C5C47E8;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v76 + 5728, a51);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v76 + 5776, v205);
  *(void *)(v76 + 5824) = &unk_26C5C3AF0;
  if (*(char *)(a53 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 5832), *(const std::string::value_type **)(a53 + 8), *(void *)(a53 + 16));
  }
  else
  {
    long long v177 = *(_OWORD *)(a53 + 8);
    *(void *)(v76 + 5848) = *(void *)(a53 + 24);
    *(_OWORD *)(v76 + 5832) = v177;
  }
  *(_DWORD *)(v76 + 5856) = *(_DWORD *)(a53 + 32);
  *(void *)(v76 + 5824) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 5860) = *(unsigned char *)(a53 + 36);
  uint64_t v178 = (std::string *)(v76 + 5864);
  if (*(char *)(a53 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v178, *(const std::string::value_type **)(a53 + 40), *(void *)(a53 + 48));
  }
  else
  {
    long long v179 = *(_OWORD *)(a53 + 40);
    *(void *)(v76 + 5880) = *(void *)(a53 + 56);
    *(_OWORD *)&v178->__r_.__value_.__l.__data_ = v179;
  }
  *(void *)(v76 + 5824) = &unk_26C5C4788;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 5888, a54);
  std::__tuple_leaf<52ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v76 + 5936, a55);
  *(void *)(v76 + 6000) = &unk_26C5C3AF0;
  uint64_t v180 = a56;
  if (*(char *)(a56 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 6008), *(const std::string::value_type **)(a56 + 8), *(void *)(a56 + 16));
    uint64_t v180 = a56;
  }
  else
  {
    long long v181 = *(_OWORD *)(a56 + 8);
    *(void *)(v76 + 6024) = *(void *)(a56 + 24);
    *(_OWORD *)(v76 + 6008) = v181;
  }
  *(_DWORD *)(v76 + 6032) = *(_DWORD *)(v180 + 32);
  *(void *)(v76 + 6000) = &unk_26C5C3878;
  uint64_t v182 = *v204;
  *(_DWORD *)(v76 + 6044) = *((_DWORD *)v204 + 2);
  *(void *)(v76 + 6036) = v182;
  *(void *)(v76 + 6000) = &unk_26C5C47E8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 6048, a57);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v76 + 6096, v203);
  *(void *)(v76 + 6144) = &unk_26C5C3AF0;
  uint64_t v183 = a59;
  if (*(char *)(a59 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 6152), *(const std::string::value_type **)(a59 + 8), *(void *)(a59 + 16));
    uint64_t v183 = a59;
  }
  else
  {
    long long v184 = *(_OWORD *)(a59 + 8);
    *(void *)(v76 + 6168) = *(void *)(a59 + 24);
    *(_OWORD *)(v76 + 6152) = v184;
  }
  *(_DWORD *)(v76 + 6176) = *(_DWORD *)(v183 + 32);
  *(void *)(v76 + 6144) = &unk_26C5C3878;
  uint64_t v185 = *v202;
  *(_DWORD *)(v76 + 6188) = *((_DWORD *)v202 + 2);
  *(void *)(v76 + 6180) = v185;
  *(void *)(v76 + 6144) = &unk_26C5C47E8;
  *(void *)(v76 + 6192) = &unk_26C5C3AF0;
  uint64_t v186 = a60;
  if (*(char *)(a60 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 6200), *(const std::string::value_type **)(a60 + 8), *(void *)(a60 + 16));
    uint64_t v186 = a60;
  }
  else
  {
    long long v187 = *(_OWORD *)(a60 + 8);
    *(void *)(v76 + 6216) = *(void *)(a60 + 24);
    *(_OWORD *)(v76 + 6200) = v187;
  }
  *(_DWORD *)(v76 + 6224) = *(_DWORD *)(v186 + 32);
  *(void *)(v76 + 6192) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 6228) = *(unsigned char *)(v186 + 36);
  std::string v188 = (std::string *)(v76 + 6232);
  uint64_t v189 = a61;
  if (*(char *)(v186 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v188, *(const std::string::value_type **)(v186 + 40), *(void *)(v186 + 48));
    uint64_t v189 = a61;
  }
  else
  {
    long long v190 = *v201;
    *(void *)(v76 + 6248) = *((void *)v201 + 2);
    *(_OWORD *)&v188->__r_.__value_.__l.__data_ = v190;
  }
  *(void *)(v76 + 6192) = &unk_26C5C4788;
  *(void *)(v76 + 6256) = &unk_26C5C3AF0;
  if (*(char *)(v189 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 6264), *(const std::string::value_type **)(v189 + 8), *(void *)(v189 + 16));
    uint64_t v189 = a61;
  }
  else
  {
    long long v191 = *(_OWORD *)(a61 + 8);
    *(void *)(v76 + 6280) = *(void *)(a61 + 24);
    *(_OWORD *)(v76 + 6264) = v191;
  }
  *(_DWORD *)(v76 + 6288) = *(_DWORD *)(v189 + 32);
  *(void *)(v76 + 6256) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 6292) = *(unsigned char *)(v189 + 36);
  char v192 = (std::string *)(v76 + 6296);
  if (*(char *)(v189 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v192, *(const std::string::value_type **)(v189 + 40), *(void *)(v189 + 48));
  }
  else
  {
    long long v193 = *v200;
    *(void *)(v76 + 6312) = *((void *)v200 + 2);
    *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v193;
  }
  *(void *)(v76 + 6256) = &unk_26C5C4788;
  *(void *)(v76 + 6320) = &unk_26C5C3AF0;
  uint64_t v194 = a62;
  if (*(char *)(a62 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v76 + 6328), *(const std::string::value_type **)(a62 + 8), *(void *)(a62 + 16));
    uint64_t v194 = a62;
  }
  else
  {
    long long v195 = *(_OWORD *)(a62 + 8);
    *(void *)(v76 + 6344) = *(void *)(a62 + 24);
    *(_OWORD *)(v76 + 6328) = v195;
  }
  *(_DWORD *)(v76 + 6352) = *(_DWORD *)(v194 + 32);
  *(void *)(v76 + 6320) = &unk_26C5C3818;
  *(unsigned char *)(v76 + 6356) = *(unsigned char *)(v194 + 36);
  int v196 = (std::string *)(v76 + 6360);
  if (*(char *)(v194 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v196, *(const std::string::value_type **)(v194 + 40), *(void *)(v194 + 48));
  }
  else
  {
    long long v197 = *v199;
    *(void *)(v76 + 6376) = *((void *)v199 + 2);
    *(_OWORD *)&v196->__r_.__value_.__l.__data_ = v197;
  }
  *(void *)(v76 + 6320) = &unk_26C5C4788;
  return v76;
}