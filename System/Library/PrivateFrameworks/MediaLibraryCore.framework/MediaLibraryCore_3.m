void sub_2150454C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t mlcore::integerRangeValueForCriterionInfo(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8) || (uint64_t v1 = *(void *)(a1 + 16)) == 0 || *(_DWORD *)(a1 + 24) != 68)
  {
    int v5 = -50;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    mediaplatform::FormatString<int>(&v4, (std::string *)"invalid value for criterion info: {0}", &v5);
    std::runtime_error::runtime_error(exception, &v4);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(void *)v1;
}

void sub_2150455AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

CFTimeZoneRef mlcore::copyCurrentTimeZone(mlcore *this)
{
  time_t v3 = 0;
  time(&v3);
  uint64_t v1 = localtime(&v3);
  return CFTimeZoneCreateWithTimeIntervalFromGMT(0, (double)v1->tm_gmtoff);
}

CFAbsoluteTime mlcore::absoluteTimeRelativeToToday(mlcore *this, double a2)
{
  int v2 = (int)this;
  CFAbsoluteTime v11 = 0.0;
  CFAbsoluteTime at = 0.0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v5 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFCalendarIdentifier)*MEMORY[0x263EFFC90]);
  CFTimeZoneRef v6 = mlcore::copyCurrentTimeZone(v5);
  CFCalendarSetTimeZone(v5, v6);
  CFRelease(v6);
  uint64_t v10 = 0;
  unsigned int v9 = 0;
  CFCalendarDecomposeAbsoluteTime(v5, Current, "yMd", (char *)&v10 + 4, &v10, &v9);
  CFCalendarComposeAbsoluteTime(v5, &at, "yMdHms", HIDWORD(v10), v10, v9, 0, 0, 0);
  CFCalendarComposeAbsoluteTime(v5, &v11, "yMdHms", HIDWORD(v10), v10, v9, 23, 59, 59);
  CFRelease(v5);
  if (v2) {
    p_CFAbsoluteTime at = &at;
  }
  else {
    p_CFAbsoluteTime at = &v11;
  }
  return *p_at + a2;
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::FormatString<unsigned int>(std::string *a1, std::string *a2, unsigned int *a3)
{
  time_t v3 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<unsigned int>(a2, a1, 0, &v3);
}

void sub_215045888(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<unsigned int>(std::string *a1, std::string *a2, std::string::size_type a3, unsigned int **a4)
{
  char v8 = 0;
  uint64_t v52 = *MEMORY[0x263EF8340];
  unsigned int v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    v48 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    v48 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v48 = v9 + 2;
    int v35 = v9[2];
    if ((v35 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v36 = 0;
      v37 = v9 + 3;
      do
      {
        v38 = v37;
        v48 = v37;
        uint64_t v36 = (v35 - 48) + 10 * v36;
        ++v37;
        int v40 = *v38;
        v39 = (unsigned __int8 *)(v38 - 1);
        int v35 = v40;
      }
      while ((v40 - 58) >= 0xFFFFFFF6);
      v48 = (char *)(v39 + 2);
      if (*(v37 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,unsigned int>::formatOptionsAtIndex<unsigned int>(v36);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v42, (const char **)&v48);
  if (v43) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,unsigned int>>();
  }
  v12 = v48;
  unsigned int v13 = **a4;
  v14 = v42;
  *(void *)v49 = v42;
  uint64_t v50 = 0;
  char v51 = 1;
  switch(v42[1])
  {
    case 0:
      uint64_t v15 = 39;
      do
      {
        v49[v15--] = (v13 % 0xA) | 0x30;
        BOOL v16 = v13 >= 0xA;
        v13 /= 0xAu;
      }
      while (v16);
      goto LABEL_28;
    case 1:
      uint64_t v15 = 39;
      do
      {
        v49[v15--] = v13 & 7 | 0x30;
        BOOL v16 = v13 >= 8;
        v13 >>= 3;
      }
      while (v16);
      goto LABEL_28;
    case 2:
      v17 = &mediaplatform::TypeFormatterUpperHexMapping;
      if (!v46) {
        v17 = &mediaplatform::TypeFormatterLowerHexMapping;
      }
      uint64_t v15 = 39;
      do
      {
        v49[v15--] = v17[v13 & 0xF];
        BOOL v16 = v13 >= 0x10;
        v13 >>= 4;
      }
      while (v16);
      goto LABEL_28;
    case 3:
      uint64_t v15 = 39;
      do
      {
        v49[v15--] = v13 & 1 | 0x30;
        BOOL v16 = v13 >= 2;
        v13 >>= 1;
      }
      while (v16);
LABEL_28:
      uint64_t v18 = v15 - 7;
      uint64_t v50 = v15 - 7;
      v14 = *(_DWORD **)v49;
      BOOL v19 = v51 == 0;
      if (!v51) {
        goto LABEL_32;
      }
      goto LABEL_31;
    default:
      BOOL v19 = 0;
      uint64_t v18 = 0;
LABEL_31:
      if (*((unsigned char *)v14 + 48)) {
LABEL_32:
      }
        uint64_t v20 = 33;
      else {
        uint64_t v20 = 32;
      }
      unint64_t v21 = v20 - v18;
      if (*((unsigned char *)v14 + 50) && v21 <= *((void *)v14 + 3)) {
        unint64_t v21 = *((void *)v14 + 3);
      }
      unint64_t v22 = v45;
      if (v45 <= v21) {
        unint64_t v22 = v21;
      }
      if (v44) {
        unint64_t v21 = v22;
      }
      mediaplatform::FormatImplementation<unsigned int>(v12, a2, v21 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v23 = (char *)a2;
      }
      else {
        v23 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      if (v19 || *((unsigned char *)v14 + 48)) {
        uint64_t v24 = 33;
      }
      else {
        uint64_t v24 = 32;
      }
      v25 = &v23[i];
      unint64_t v26 = v24 - v18;
      if (*((unsigned char *)v14 + 50) && v26 <= *((void *)v14 + 3)) {
        unint64_t v26 = *((void *)v14 + 3);
      }
      if (!v44) {
        goto LABEL_57;
      }
      unint64_t v27 = v45;
      unint64_t v28 = v45 - v26;
      if (v45 <= v26) {
        goto LABEL_57;
      }
      if (v42[0])
      {
        if (v42[0] == 1)
        {
          unint64_t v29 = v28 >> 1;
          if (v28 >= 2)
          {
            if (v29 <= 1) {
              uint64_t v30 = 1;
            }
            else {
              uint64_t v30 = v28 >> 1;
            }
            do
            {
              *v25++ = v47;
              --v30;
            }
            while (v30);
          }
          mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>(v49, v25);
          if (v28 != v29)
          {
            unint64_t v31 = v28 - (v28 >> 1);
            v32 = &v25[v26];
            if (v31 <= 1) {
              unint64_t v31 = 1;
            }
            uint64_t v33 = -(uint64_t)v31;
            do
            {
              *v32++ = v47;
              BOOL v16 = __CFADD__(v33++, 1);
            }
            while (!v16);
          }
        }
        else if (v42[0] == 2)
        {
          if (v45 != v26)
          {
            do
            {
              *v25++ = v47;
              --v28;
            }
            while (v28);
          }
LABEL_57:
          mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>(v49, v25);
        }
      }
      else
      {
        mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>(v49, &v23[i]);
        if (v27 != v26)
        {
          v34 = &v23[v26];
          do
          {
            v34[i] = v47;
            ++v34;
            --v28;
          }
          while (v28);
        }
      }
      if (i != a3) {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      break;
  }
}

void sub_215045D98(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,unsigned int>::formatOptionsAtIndex<unsigned int>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<unsigned int>();
}

void sub_215045E18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,unsigned int>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215045E74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>(char *result, char *a2)
{
  time_t v3 = result + 40;
  uint64_t v2 = *((void *)result + 5);
  if (result[48])
  {
    uint64_t v4 = *(void *)result;
    if (!*(unsigned char *)(*(void *)result + 48))
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
    char v5 = *(unsigned char *)(v4 + 49);
  }
  else
  {
    char v5 = 45;
  }
  *a2++ = v5;
  uint64_t v4 = *(void *)result;
  uint64_t v6 = 1;
LABEL_7:
  if (*(unsigned char *)(v4 + 16))
  {
    if (*(unsigned char *)(v4 + 50))
    {
      unint64_t v7 = v6 - v2 + 32;
      if (v7 < *(void *)(v4 + 24))
      {
        do
        {
          *a2++ = 48;
          ++v7;
        }
        while (v7 < *(void *)(*(void *)result + 24));
      }
    }
  }
  char v8 = &result[*((void *)result + 5) + 8];
  if (v3 != v8) {
    return (char *)memmove(a2, v8, v3 - v8);
  }
  return result;
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<unsigned int>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215045F70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CABB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CABB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<std::string>,std::allocator<mlcore::ComparisonPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,mlcore::ComparisonOperator &,std::string const&,mlcore::ComparisonOptions &,void>()
{
  v0 = operator new(0x58uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_26C5CAB08;
  mlcore::ComparisonPredicate<std::string>::ComparisonPredicate();
}

void sub_215046250(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcoreL34PredicateForKindPropertyComparisonERK13CriterionInfoE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t result = 0;
  switch(**(_DWORD **)(a1 + 8))
  {
    case 1:
      uint64_t v4 = *(const void ***)(a1 + 16);
      int v5 = *((char *)v4 + 23);
      int v6 = *((char *)a2 + 23);
      if (v6 >= 0) {
        size_t v7 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v7 = (size_t)a2[1];
      }
      if (v6 >= 0) {
        char v8 = (char *)a2;
      }
      else {
        char v8 = (char *)*a2;
      }
      if (v5 >= 0) {
        size_t v9 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v9 = (size_t)v4[1];
      }
      if (v5 >= 0) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = *v4;
      }
      if (v9 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v9;
      }
      goto LABEL_89;
    case 2:
      v12 = *(char **)(a1 + 16);
      int64_t v13 = *((unsigned __int8 *)a2 + 23);
      if ((v13 & 0x80u) == 0) {
        v14 = (char *)a2;
      }
      else {
        v14 = (char *)*a2;
      }
      int v15 = v12[23];
      if (v15 >= 0) {
        BOOL v16 = v12;
      }
      else {
        BOOL v16 = *(char **)v12;
      }
      if (v15 >= 0) {
        int64_t v17 = v12[23];
      }
      else {
        int64_t v17 = *((void *)v12 + 1);
      }
      if (!v17) {
        return 1;
      }
      if ((v13 & 0x80u) != 0) {
        int64_t v13 = (int64_t)a2[1];
      }
      uint64_t v18 = &v14[v13];
      if (v13 < v17) {
        goto LABEL_30;
      }
      int v30 = *v16;
      unint64_t v31 = v14;
      do
      {
        int64_t v32 = v13 - v17;
        if (v32 == -1) {
          break;
        }
        uint64_t v33 = (char *)memchr(v31, v30, v32 + 1);
        if (!v33) {
          break;
        }
        BOOL v19 = v33;
        if (!memcmp(v33, v16, v17)) {
          return v19 != v18 && v19 - v14 != -1;
        }
        unint64_t v31 = v19 + 1;
        int64_t v13 = v18 - (v19 + 1);
      }
      while (v13 >= v17);
LABEL_30:
      BOOL v19 = v18;
      return v19 != v18 && v19 - v14 != -1;
    case 4:
      unint64_t v21 = *(void **)(a1 + 16);
      int v22 = *((char *)v21 + 23);
      if (v22 >= 0) {
        size_t v7 = *((unsigned __int8 *)v21 + 23);
      }
      else {
        size_t v7 = v21[1];
      }
      if (*((char *)a2 + 23) < 0)
      {
        if (v7 != -1)
        {
          unint64_t v27 = a2;
          a2 = (const void **)*a2;
          size_t v9 = (size_t)v27[1];
          goto LABEL_51;
        }
      }
      else if (v7 != -1)
      {
        size_t v9 = *((unsigned __int8 *)a2 + 23);
LABEL_51:
        if (v22 < 0) {
          unint64_t v21 = (void *)*v21;
        }
        if (v9 >= v7) {
          size_t v11 = v7;
        }
        else {
          size_t v11 = v9;
        }
        char v8 = (char *)a2;
        goto LABEL_88;
      }
      goto LABEL_92;
    case 8:
      size_t v23 = *((unsigned __int8 *)a2 + 23);
      uint64_t v24 = (char *)a2[1];
      if ((v23 & 0x80u) == 0) {
        size_t v25 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v25 = (size_t)a2[1];
      }
      unint64_t v21 = *(void **)(a1 + 16);
      size_t v26 = *((unsigned __int8 *)v21 + 23);
      if (*((char *)v21 + 23) < 0)
      {
        size_t v7 = v21[1];
        if (v25 < v7) {
          return 0;
        }
      }
      else
      {
        size_t v7 = *((unsigned __int8 *)v21 + 23);
        if (v25 < v26) {
          return 0;
        }
      }
      size_t v28 = v25 - v7;
      if ((v23 & 0x80) != 0)
      {
        if (v7 == -1 || (unint64_t)v24 < v28) {
LABEL_92:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        if (&v24[-v28] >= v24) {
          size_t v9 = (size_t)a2[1];
        }
        else {
          size_t v9 = (size_t)&v24[-v28];
        }
        a2 = (const void **)*a2;
      }
      else
      {
        if (v7 == -1 || v23 < v28) {
          goto LABEL_92;
        }
        if (v23 - v28 >= v23) {
          size_t v9 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v9 = v23 - v28;
        }
      }
      if ((v26 & 0x80u) != 0) {
        unint64_t v21 = (void *)*v21;
      }
      char v8 = (char *)a2 + v28;
      if (v9 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v9;
      }
LABEL_88:
      uint64_t v10 = v21;
LABEL_89:
      BOOL v35 = memcmp(v8, v10, v11) == 0;
      return v9 == v7 && v35;
    default:
      return result;
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
}

void sub_2150466F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

__n128 std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C95A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C5C95A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::~__func()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000021512820ELL)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void non-virtual thunk to'mlcore::ForeignProperty<std::string>::~ForeignProperty(void *a1)
{
  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5968;
  *a1 = &unk_26C5C5A08;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5968;
  *a1 = &unk_26C5C5A08;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

void mlcore::ModelPropertyBase::~ModelPropertyBase(void **this)
{
  *this = &unk_26C5C7508;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C96B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C96B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ForeignProperty<std::string>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 72))();
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void mlcore::ForeignProperty<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 72) + 40))(&v11);
  uint64_t v4 = std::string::append(&v11, "->");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  char v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_215046CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<std::string>::~ForeignProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C5968;
  *((void *)this + 8) = &unk_26C5C5A08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C5968;
  *((void *)this + 8) = &unk_26C5C5A08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

void *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000002151283F6)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  time_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v3 + 120))(*(void *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v4 + 80))(v4))
    {
      case 0u:
        uint64_t v5 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 1u:
        uint64_t v14 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<long long>(v14, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 2u:
        uint64_t v15 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<double>(v15, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 3u:
        uint64_t v16 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<std::string>(v16, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 4u:
        uint64_t v17 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v17, v4, (uint64_t *)__p);
LABEL_20:
        uint64_t v13 = Foreign;
        break;
      default:
        uint64_t v13 = 0;
        break;
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, void *))(*v3 + 136))(&v27, v3);
    uint64_t v19 = mlcore::GetForeignProperty<mediaplatform::Data>(v13, v18, (uint64_t *)&v27);
    size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  else
  {
    std::string::size_type v7 = *(void **)(a1 + 16);
    if (!v7 || (uint64_t v8 = v3[1], !(*(unsigned int (**)(void))(*v7 + 88))(*(void *)(a1 + 16)))) {
LABEL_14:
    }
      operator new();
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 32))(__p);
      unsigned __int8 v10 = __p[0];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      std::string::size_type v7 = (void *)v12;
      if (v11 == v8)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        size_t v23 = *(atomic_ullong **)(a1 + 32);
        __p[0] = *(void **)(a1 + 24);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = mlcore::GetForeignProperty<mediaplatform::Data>(v12, v22, (uint64_t *)__p);
        if (v23)
        {
          size = (std::__shared_weak_count *)v23;
          goto LABEL_22;
        }
        return v19;
      }
      if (!v12) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12) & 1) == 0 && v7[1] == v8) {
        break;
      }
      if (((*(uint64_t (**)(void *))(*v7 + 88))(v7) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
    uint64_t v25 = *(void *)(a1 + 8);
    size_t v26 = *(atomic_ullong **)(a1 + 32);
    __p[0] = *(void **)(a1 + 24);
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = mlcore::GetForeignProperty<mediaplatform::Data>(v24, v25, (uint64_t *)__p);
    if (v26)
    {
      size = (std::__shared_weak_count *)v26;
      goto LABEL_22;
    }
  }
  return v19;
}

void sub_2150473E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::~ForeignProperty(void *a1)
{
  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5890;
  *a1 = &unk_26C5C5930;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5890;
  *a1 = &unk_26C5C5930;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void mlcore::ForeignProperty<mediaplatform::Data>::_SQLJoinClauses(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(&v36, a1);
  uint64_t v8 = v36;
  size_t v9 = v37;
  if (v36 != v37)
  {
    do
    {
      uint64_t v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(__p, v7);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 96))(&v38, v7, &v32);
        LODWORD(v28) = 13;
        (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v10 + 32))(&v31, v10, *(void *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v34, &v38, (int *)&v28, &v31);
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v38 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v12 = a1[11];
        if (v12)
        {
          LODWORD(v28) = 1;
          uint64_t v29 = 0;
          int v30 = 0;
          (*(void (**)(long long *__return_ptr))(*(void *)v12 + 64))(&v31);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v38, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v28, &v31);
          long long v14 = v38;
          long long v34 = v38;
          long long v26 = v38;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            long long v14 = v26;
          }
          if (*((void *)&v31 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
            long long v14 = v26;
          }
          if (v30)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            long long v14 = v26;
          }
        }
        else
        {
          long long v14 = v34;
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v31, v14, *((std::__shared_weak_count **)&v14 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v28, 1, v10 + 8, (uint64_t *)&v31);
        long long v15 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (_OWORD *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v17 >= v16)
        {
          long long v27 = v15;
          uint64_t v19 = ((uint64_t)v17 - *a3) >> 4;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - *a3;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          v41 = a3 + 2;
          size_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v22);
          uint64_t v24 = &v23[16 * v19];
          *(void *)&long long v38 = v23;
          *((void *)&v38 + 1) = v24;
          int v40 = &v23[16 * v25];
          *(_OWORD *)uint64_t v24 = v27;
          v39 = v24 + 16;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a3, &v38);
          uint64_t v18 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          _OWORD *v17 = v15;
          uint64_t v18 = v17 + 1;
          a3[1] = v18;
        }
        a3[1] = v18;
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v36;
  }
  if (v8)
  {
    v37 = v8;
    operator delete(v8);
  }
}

void sub_2150479B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
}

void mlcore::ForeignProperty<mediaplatform::Data>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  time_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_215047B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 80))();
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 72))();
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))();
}

void mlcore::ForeignProperty<mediaplatform::Data>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(*(void *)(a3 + 8), *(_DWORD *)a3 + a4, (mediaplatform::Data *)v6);
  mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a2, (uint64_t)v6, a1);
  mediaplatform::Data::~Data((mediaplatform::Data *)v6);
}

void sub_215047C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (uint64_t *)(a1 + 8);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*v7 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == a3) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v16 = (void *)(a1 + 24);
  long long v14 = operator new(0x40uLL);
  v27[0] = (uint64_t)v14;
  v27[1] = a1 + 24;
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = a3;
  v14[3] = &unk_26C5BF2D8;
  v14[4] = 0;
  v14[5] = 0;
  v14[6] = 0;
  *((unsigned char *)v14 + 56) = 0;
  char v28 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v7, v22);
    unint64_t v11 = *(void *)(a1 + 16);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *v7;
  uint64_t v24 = *(void **)(*v7 + 8 * v3);
  if (v24)
  {
    void *v14 = *v24;
LABEL_38:
    *uint64_t v24 = v14;
    goto LABEL_39;
  }
  void *v14 = *v16;
  *unint64_t v16 = v14;
  *(void *)(v23 + 8 * v3) = v16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*v7 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  v27[0] = 0;
  ++*(void *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v27);
LABEL_40:
  return mediaplatform::Data::operator=((uint64_t)(v14 + 3), a2);
}

void sub_215047EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      mediaplatform::Data::~Data((mediaplatform::Data *)(v1 + 24));
    }
    operator delete((void *)v1);
  }
}

void mlcore::ForeignProperty<mediaplatform::Data>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 72) + 40))(&v11);
  uint64_t v4 = std::string::append(&v11, "->");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  unint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_21504804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<mediaplatform::Data>::~ForeignProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C5890;
  *((void *)this + 8) = &unk_26C5C5930;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C5890;
  *((void *)this + 8) = &unk_26C5C5930;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

void std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C90D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_26C5C90D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C90D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C90D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000021512801DLL)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v3 + 120))(*(void *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v4 + 80))(v4))
    {
      case 0u:
        uint64_t v5 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 1u:
        uint64_t v14 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<long long>(v14, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 2u:
        uint64_t v15 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<double>(v15, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 3u:
        uint64_t v16 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<std::string>(v16, v4, (uint64_t *)__p);
        goto LABEL_20;
      case 4u:
        uint64_t v17 = *(void *)(a1 + 16);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v17, v4, (uint64_t *)__p);
LABEL_20:
        uint64_t v13 = Foreign;
        break;
      default:
        uint64_t v13 = 0;
        break;
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, void *))(*v3 + 136))(&v27, v3);
    uint64_t v19 = mlcore::GetForeignProperty<double>(v13, v18, (uint64_t *)&v27);
    size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  else
  {
    std::string::size_type v7 = *(void **)(a1 + 16);
    if (!v7 || (uint64_t v8 = v3[1], !(*(unsigned int (**)(void))(*v7 + 88))(*(void *)(a1 + 16)))) {
LABEL_14:
    }
      operator new();
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 32))(__p);
      unsigned __int8 v10 = __p[0];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      std::string::size_type v7 = (void *)v12;
      if (v11 == v8)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(atomic_ullong **)(a1 + 32);
        __p[0] = *(void **)(a1 + 24);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = mlcore::GetForeignProperty<double>(v12, v22, (uint64_t *)__p);
        if (v23)
        {
          size = (std::__shared_weak_count *)v23;
          goto LABEL_22;
        }
        return v19;
      }
      if (!v12) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12) & 1) == 0 && v7[1] == v8) {
        break;
      }
      if (((*(uint64_t (**)(void *))(*v7 + 88))(v7) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
    uint64_t v25 = *(void *)(a1 + 8);
    long long v26 = *(atomic_ullong **)(a1 + 32);
    __p[0] = *(void **)(a1 + 24);
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = mlcore::GetForeignProperty<double>(v24, v25, (uint64_t *)__p);
    if (v26)
    {
      size = (std::__shared_weak_count *)v26;
      goto LABEL_22;
    }
  }
  return v19;
}

void sub_21504890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<double>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<double>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<double>::baseProperty(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void non-virtual thunk to'mlcore::ForeignProperty<double>::~ForeignProperty(void *a1)
{
  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5A40;
  *a1 = &unk_26C5C5AE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5A40;
  *a1 = &unk_26C5C5AE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

uint64_t mlcore::ForeignProperty<double>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<double>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t mlcore::ModelProperty<double>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  double v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  double v7 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7 < v6;
  }
}

uint64_t mlcore::ForeignProperty<double>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<double>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 72))();
}

uint64_t mlcore::ModelProperty<double>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  double v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6 < v5;
  }
}

void mlcore::ForeignProperty<double>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 72) + 40))(&v11);
  uint64_t v4 = std::string::append(&v11, "->");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0) {
    double v6 = __p;
  }
  else {
    double v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_215048CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<double>::~ForeignProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C5A40;
  *((void *)this + 8) = &unk_26C5C5AE0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C5A40;
  *((void *)this + 8) = &unk_26C5C5AE0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

void std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9180;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_26C5C9180;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9180;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9180;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000215127E9BLL)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'mlcore::ForeignProperty<long long>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void non-virtual thunk to'mlcore::ForeignProperty<long long>::~ForeignProperty(void *a1)
{
  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5BF0;
  *a1 = &unk_26C5C5C90;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5BF0;
  *a1 = &unk_26C5C5C90;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

uint64_t mlcore::ForeignProperty<long long>::predicate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 96);
  *a2 = *(void *)(result + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<long long>::foreignProperty(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t mlcore::ModelProperty<long long>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  uint64_t v7 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7 < v6;
  }
}

uint64_t mlcore::ForeignProperty<long long>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 72))();
}

uint64_t mlcore::ModelProperty<long long>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  uint64_t v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6 < v5;
  }
}

void mlcore::ForeignProperty<long long>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 72) + 40))(&v11);
  uint64_t v4 = std::string::append(&v11, "->");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_215049360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<long long>::~ForeignProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C5BF0;
  *((void *)this + 8) = &unk_26C5C5C90;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C5BF0;
  *((void *)this + 8) = &unk_26C5C5C90;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

void std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9230;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_26C5C9230;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9230;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9230;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000002151284C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void non-virtual thunk to'mlcore::ForeignProperty<int>::~ForeignProperty(void *a1)
{
  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5B18;
  *a1 = &unk_26C5C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void **)(a1 - 8);
  *(a1 - 8) = &unk_26C5C5B18;
  *a1 = &unk_26C5C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

uint64_t mlcore::ModelProperty<int>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  int v7 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7 < v6;
  }
}

uint64_t mlcore::ForeignProperty<int>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 72))();
}

uint64_t mlcore::ModelProperty<int>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  int v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6 < v5;
  }
}

void mlcore::ForeignProperty<int>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 72) + 40))(&v11);
  uint64_t v4 = std::string::append(&v11, "->");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_215049980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<int>::~ForeignProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C5B18;
  *((void *)this + 8) = &unk_26C5C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C5B18;
  *((void *)this + 8) = &unk_26C5C5BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

void std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C91D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_26C5C91D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C91D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C91D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9128;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_26C5C9128;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9128;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9128;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void mediaplatform::FormatImplementation<int>(std::string *a1, std::string *a2, std::string::size_type a3, int **a4)
{
  char v8 = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    uint64_t v29 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    uint64_t v29 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v29 = v9 + 2;
    int v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = v9 + 3;
      do
      {
        unint64_t v21 = v20;
        uint64_t v29 = v20;
        uint64_t v19 = (v18 - 48) + 10 * v19;
        ++v20;
        int v23 = *v21;
        uint64_t v22 = (unsigned __int8 *)(v21 - 1);
        int v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      uint64_t v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,int>::formatOptionsAtIndex<int>(v19);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  if (v26) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int>>();
  }
  std::string v12 = v29;
  mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)v30, **a4, (uint64_t)v25);
  if (v31 && !*(unsigned char *)(v30[0] + 48)) {
    uint64_t v13 = 32;
  }
  else {
    uint64_t v13 = 33;
  }
  unint64_t v14 = v13 - v30[5];
  if (*(unsigned char *)(v30[0] + 50) && v14 <= *(void *)(v30[0] + 24)) {
    unint64_t v14 = *(void *)(v30[0] + 24);
  }
  unint64_t v15 = v28;
  if (v28 <= v14) {
    unint64_t v15 = v14;
  }
  if (v27) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v14;
  }
  mediaplatform::FormatImplementation<int>(v12, a2, v16 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = (char *)a2;
  }
  else {
    uint64_t v17 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(v25, &v17[i], v30);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_21504A074(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,int>::formatOptionsAtIndex<int>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<int>();
}

void sub_21504A0E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21504A140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<int,void>::TypeFormatter(uint64_t result, int a2, uint64_t a3)
{
  *(void *)__n128 result = a3;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = a2 >= 0;
  switch(*(_DWORD *)(a3 + 4))
  {
    case 0:
      uint64_t v3 = 39;
      if (a2 < 0)
      {
        do
        {
          *(unsigned char *)(result + v3) = 48 - (char)a2 % 10;
          unsigned int v11 = a2 + 9;
          --v3;
          a2 /= 10;
        }
        while (v11 >= 0x13);
      }
      else
      {
        do
        {
          *(unsigned char *)(result + v3--) = (a2 % 0xAu) | 0x30;
          BOOL v4 = a2 >= 0xA;
          a2 /= 0xAu;
        }
        while (v4);
      }
      goto LABEL_26;
    case 1:
      if (a2 >= 0) {
        unsigned int v5 = a2;
      }
      else {
        unsigned int v5 = -a2;
      }
      uint64_t v3 = 39;
      do
      {
        *(unsigned char *)(result + v3--) = v5 & 7 | 0x30;
        BOOL v4 = v5 >= 8;
        v5 >>= 3;
      }
      while (v4);
      goto LABEL_26;
    case 2:
      int v6 = &mediaplatform::TypeFormatterUpperHexMapping;
      if (!*(unsigned char *)(a3 + 51)) {
        int v6 = &mediaplatform::TypeFormatterLowerHexMapping;
      }
      if (a2 >= 0) {
        unsigned int v7 = a2;
      }
      else {
        unsigned int v7 = -a2;
      }
      uint64_t v8 = 39;
      do
      {
        *(unsigned char *)(result + v8--) = v6[v7 & 0xF];
        BOOL v4 = v7 >= 0x10;
        v7 >>= 4;
      }
      while (v4);
      uint64_t v9 = v8 - 7;
      goto LABEL_27;
    case 3:
      if (a2 >= 0) {
        unsigned int v10 = a2;
      }
      else {
        unsigned int v10 = -a2;
      }
      uint64_t v3 = 39;
      do
      {
        *(unsigned char *)(result + v3--) = v10 & 1 | 0x30;
        BOOL v4 = v10 >= 2;
        v10 >>= 1;
      }
      while (v4);
LABEL_26:
      uint64_t v9 = v3 - 7;
LABEL_27:
      *(void *)(result + 40) = v9;
      break;
    default:
      return result;
  }
  return result;
}

char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(char *result, char *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  BOOL v4 = result;
  uint64_t v5 = *a3;
  if (*((unsigned char *)a3 + 48) && !*(unsigned char *)(v5 + 48)) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = 33;
  }
  unint64_t v7 = v6 - a3[5];
  if (*(unsigned char *)(v5 + 50))
  {
    unint64_t v8 = *(void *)(v5 + 24);
    if (v7 <= v8) {
      unint64_t v7 = v8;
    }
  }
  if (!result[16] || (unint64_t v9 = *((void *)result + 3), v10 = v9 - v7, v9 <= v7))
  {
LABEL_15:
    return mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  }
  int v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 != 1)
    {
      if (v11 != 2) {
        return result;
      }
      if (v9 != v7)
      {
        do
        {
          *v3++ = result[52];
          --v10;
        }
        while (v10);
      }
      goto LABEL_15;
    }
    unint64_t v12 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v10 >> 1;
      }
      do
      {
        *v3++ = result[52];
        --v13;
      }
      while (v13);
    }
    __n128 result = mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    if (v10 != v12)
    {
      unint64_t v14 = v10 - (v10 >> 1);
      unint64_t v15 = &v3[v7];
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      uint64_t v16 = -(uint64_t)v14;
      do
        *v15++ = v4[52];
      while (!__CFADD__(v16++, 1));
    }
  }
  else
  {
    __n128 result = mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, a2);
    if (v9 != v7)
    {
      int v18 = &v3[v7];
      do
      {
        *v18++ = v4[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<int>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21504A48C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::SortDescriptorsForPlaylistDisplayOrder(uint64_t *a1@<X0>, int a2@<W1>, long long *a3@<X8>)
{
  uint64_t v6 = *a1;
  unint64_t v7 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertyPlayOrder((mlcore *)a1);
  unint64_t v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  LODWORD(v6) = v8;
  uint64_t v9 = *a1;
  IsReversed = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertyIsReversed(v8);
  BOOL v11 = mlcore::Entity::valueForProperty<int>(v9, IsReversed) != 0;
  mlcore::_sortDescriptorsFromTrackOrder((char *)&v21, v6, v11 ^ a2);
  uint64_t v12 = *((void *)&v21 + 1);
  uint64_t v13 = v21;
  if (*((void *)&v21 + 1) != (void)v21) {
    goto LABEL_12;
  }
  unint64_t v14 = (std::__shared_weak_count *)a1[1];
  v18[0] = *a1;
  v18[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::SortDescriptorsForPlaylistLimitOrder((mlcore *)v18, a2, (char *)&v19);
  std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)&v21);
  long long v21 = v19;
  uint64_t v22 = v20;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  int v23 = (void **)&v19;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v12 = *((void *)&v21 + 1);
  uint64_t v13 = v21;
  if (*((void *)&v21 + 1) != (void)v21) {
    goto LABEL_12;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = (std::__shared_weak_count *)a1[1];
  v17[0] = v15;
  v17[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::SortDescriptorsForPlaylistEvaluationOrder((mlcore *)v17, a2, (char *)&v19);
  std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)&v21);
  long long v21 = v19;
  uint64_t v22 = v20;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  int v23 = (void **)&v19;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v12 = *((void *)&v21 + 1);
  uint64_t v13 = v21;
  if (*((void *)&v21 + 1) != (void)v21)
  {
LABEL_12:
    *(void *)a3 = v13;
    *((void *)a3 + 1) = v12;
    *((void *)a3 + 2) = v22;
    a3 = &v21;
  }
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)&long long v19 = &v21;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_21504A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  a13 = (void **)&a17;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t mlcore::Entity::valueForProperty<int>(uint64_t a1, mlcore::ModelPropertyBase *a2)
{
  uint64_t v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(v3, (unint64_t)a2);
}

void sub_21504A6F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *mlcore::_sortDescriptorsFromTrackOrder(char *this, int a2, int a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  BOOL v4 = this;
  switch(a2)
  {
    case 3:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyPersistentID((mlcore *)this);
      int v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    case 5:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyTitleOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 6:
    case 34:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyAlbumOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyArtistOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v15);
      int v19 = a3;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 7:
    case 32:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 8:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyBitRate((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 9:
    case 35:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 10:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyMediaKind((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 12:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyTrackNumber((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTitleOrder(v12);
      int v16 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v17, 4uLL);
      break;
    case 13:
    case 14:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyFileSize((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 15:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyYear((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 16:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertySampleRate((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 17:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyCategory((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 20:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDescription((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 21:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComment((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 22:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateAdded((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 23:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEQPreset((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 24:
    case 36:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComposerOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 25:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyVolumeNormalization((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 26:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyPlayCountUser((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 27:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDatePlayed((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 28:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDiscNumber((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyTrackNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTitleOrder(v12);
      int v16 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v17, 4uLL);
      break;
    case 29:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyUserRating((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 30:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyIsCompilation((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 31:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyIsCompilation(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 40:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateReleased((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 41:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyBPM((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 43:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGrouping((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      int v22 = a3;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 44:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertySeriesNameOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertySeasonNumber(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyEpisodeSortID(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyEpisodeID(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 45:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertySeasonNumber((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertySeriesNameOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyEpisodeSortID(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyEpisodeID(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 46:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEpisodeID((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 47:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEpisodeSortID((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyEpisodeID(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyTitleOrder(v9);
      int v13 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v14, 3uLL);
      break;
    case 49:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertySkipCountUser((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 50:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateSkipped((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 51:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyArtistOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      int v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 52:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyYear(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 53:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 54:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyUserAlbumRating((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 56:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComposerOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      int v22 = a3 ^ 1;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 57:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyCategory((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      int v22 = a3 ^ 1;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3 ^ 1;
      uint64_t v26 = &unk_26C5C5398;
      char v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      int v28 = a3 ^ 1;
      uint64_t v29 = &unk_26C5C5398;
      int v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      int v31 = a3 ^ 1;
      uint64_t v32 = &unk_26C5C5398;
      uint64_t v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      int v34 = a3 ^ 1;
      BOOL v35 = &unk_26C5C5398;
      uint64_t v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      int v37 = a3 ^ 1;
      long long v38 = &unk_26C5C5398;
      uint64_t v39 = mlcore::ItemPropertyTitleOrder(v36);
      int v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 58:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      int v22 = a3 ^ 1;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3 ^ 1;
      uint64_t v26 = &unk_26C5C5398;
      char v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      int v28 = a3 ^ 1;
      uint64_t v29 = &unk_26C5C5398;
      int v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      int v31 = a3 ^ 1;
      uint64_t v32 = &unk_26C5C5398;
      uint64_t v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      int v34 = a3 ^ 1;
      BOOL v35 = &unk_26C5C5398;
      uint64_t v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      int v37 = a3 ^ 1;
      long long v38 = &unk_26C5C5398;
      uint64_t v39 = mlcore::ItemPropertyTitleOrder(v36);
      int v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 59:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyDiscNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTrackNumber(v18);
      int v22 = a3 ^ 1;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 60:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGlobalID((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 61:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyFeedURL((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      int v22 = a3 ^ 1;
      int v23 = &unk_26C5C5398;
      uint64_t v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      int v25 = a3 ^ 1;
      uint64_t v26 = &unk_26C5C5398;
      char v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      int v28 = a3 ^ 1;
      uint64_t v29 = &unk_26C5C5398;
      int v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      int v31 = a3 ^ 1;
      uint64_t v32 = &unk_26C5C5398;
      uint64_t v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      int v34 = a3 ^ 1;
      BOOL v35 = &unk_26C5C5398;
      uint64_t v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      int v37 = a3 ^ 1;
      long long v38 = &unk_26C5C5398;
      uint64_t v39 = mlcore::ItemPropertyTitleOrder(v36);
      int v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 62:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreItemID((mlcore *)this);
      int v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    case 67:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyIsUserDisabled((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 70:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreCloudID((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 71:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreAccountID((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      int v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 72:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreCloudStatus((mlcore *)this);
      int v7 = a3;
      unint64_t v8 = &unk_26C5C5398;
      uint64_t v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      int v10 = a3 ^ 1;
      BOOL v11 = &unk_26C5C5398;
      uint64_t v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      int v13 = a3 ^ 1;
      unint64_t v14 = &unk_26C5C5398;
      uint64_t v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      int v16 = a3 ^ 1;
      uint64_t v17 = &unk_26C5C5398;
      int v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      int v19 = a3 ^ 1;
      uint64_t v20 = &unk_26C5C5398;
      long long v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      int v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 112:
      uint64_t v5 = &unk_26C5C5398;
      IsCompilation = (mlcore *)mlcore::ItemPropertyLikedStateChangedDate((mlcore *)this);
      int v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    default:
      return this;
  }
  return this;
}

void sub_21504D1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *mlcore::SortDescriptorsForPlaylistLimitOrder@<X0>(mlcore *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  int v7 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartLimitOrder(a1);
  unint64_t v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  int v9 = (int)v8;
  uint64_t v10 = *(void *)a1;
  BOOL v11 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartReverseLimitOrder(v8);
  int v12 = (mlcore::Entity::valueForProperty<int>(v10, v11) == 0) ^ a2;
  return mlcore::_sortDescriptorsFromTrackOrder(a3, v9, v12);
}

char *mlcore::SortDescriptorsForPlaylistEvaluationOrder@<X0>(mlcore *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  int v7 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartEvaluationOrder(a1);
  unint64_t v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  int v9 = (int)v8;
  uint64_t v10 = *(void *)a1;
  IsReversed = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertyIsReversed(v8);
  int v12 = (mlcore::Entity::valueForProperty<int>(v10, IsReversed) == 0) ^ a2;
  return mlcore::_sortDescriptorsFromTrackOrder(a3, v9, v12);
}

char *std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  int v7 = result;
  unint64_t v8 = *(_DWORD **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)result + 2) - *(void *)result) >> 3) < a4)
  {
    std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)result);
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*((void *)v7 + 2) - *(void *)v7) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v7 + 2) - *(void *)v7) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    __n128 result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](v7, v10);
    BOOL v11 = (_DWORD *)*((void *)v7 + 1);
    if (v6 != a3)
    {
      uint64_t v12 = *((void *)v7 + 1);
      do
      {
        *(void *)BOOL v11 = &unk_26C5C5398;
        uint64_t v13 = *(void *)(v6 + 8);
        v11[4] = *(_DWORD *)(v6 + 16);
        *((void *)v11 + 1) = v13;
        v6 += 24;
        v11 += 6;
        v12 += 24;
      }
      while (v6 != a3);
    }
LABEL_20:
    *((void *)v7 + 1) = v11;
    return result;
  }
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)v8) >> 3);
  if (v15 < a4)
  {
    uint64_t v16 = a2 + 8 * ((v14 - (unsigned char *)v8) >> 3);
    if (v14 != (unsigned char *)v8)
    {
      uint64_t v17 = (char *)(v8 + 2);
      uint64_t v18 = 24 * v15;
      int v19 = (uint64_t *)(a2 + 8);
      do
      {
        uint64_t v20 = *v19;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v19 + 2);
        *(void *)uint64_t v17 = v20;
        v17 += 24;
        v19 += 3;
        v18 -= 24;
      }
      while (v18);
      unint64_t v8 = (_DWORD *)*((void *)result + 1);
    }
    long long v21 = v8;
    if (v16 != a3)
    {
      int v22 = v8;
      long long v21 = v8;
      do
      {
        *(void *)long long v21 = &unk_26C5C5398;
        uint64_t v23 = *(void *)(v16 + 8);
        v21[4] = *(_DWORD *)(v16 + 16);
        *((void *)v21 + 1) = v23;
        v16 += 24;
        v21 += 6;
        v22 += 6;
      }
      while (v16 != a3);
    }
    BOOL v11 = v21;
    goto LABEL_20;
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v24 = *(void *)(v6 + 8);
      v8[4] = *(_DWORD *)(v6 + 16);
      *((void *)v8 + 1) = v24;
      v6 += 24;
      v8 += 6;
    }
    while (v6 != a3);
    unint64_t v14 = (unsigned char *)*((void *)result + 1);
  }
  if (v14 != (unsigned char *)v8)
  {
    int v25 = v14 - 24;
    uint64_t v26 = v14 - 24;
    char v27 = (uint64_t (***)(void))(v14 - 24);
    do
    {
      int v28 = (uint64_t (**)(_DWORD *))*v27;
      v27 -= 3;
      __n128 result = (char *)(*v28)(v26);
      v25 -= 24;
      BOOL v29 = v26 == v8;
      uint64_t v26 = v27;
    }
    while (!v29);
  }
  *((void *)v7 + 1) = v8;
  return result;
}

uint64_t mlcore::PropertyForPlaylistSmartLimitKind(mlcore *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartLimitKind(a1);
  uint64_t v3 = (mlcore *)mlcore::Entity::valueForProperty<int>(v1, v2);
  switch((int)v3)
  {
    case 0:
    case 3:
      uint64_t result = mlcore::ItemPropertyTotalTime(v3);
      break;
    case 1:
    case 4:
      uint64_t result = mlcore::ItemPropertyFileSize(v3);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void mlcore::DebugDescriptionFromSearchData(mlcore *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v4 = 0;
  ImportSearchCriteriaList(*((const void **)this + 3), *((_DWORD *)this + 2), &v4);
  mlcore::_criteriaListDescription(a2, v4, 0);
  DisposeSearchCriteriaList(v4);
}

void mlcore::_criteriaListDescription(uint64_t a1, _DWORD *a2, int a3)
{
  LockSearchCriteriaList((uint64_t)a2);
  memset(&v72, 0, sizeof(v72));
  if (a3 >= 1)
  {
    int v5 = a3;
    do
    {
      std::string::append(&v72, "   ");
      --v5;
    }
    while (v5);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v69);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v72;
  }
  else {
    uint64_t v6 = (std::string *)v72.__r_.__value_.__r.__words[0];
  }
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v72.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v6, size);
  if (a2 && *a2 == 1397519220)
  {
    int v8 = a2[3];
    int v9 = a2[4];
  }
  else
  {
    LOBYTE(v8) = 0;
    int v9 = 0;
  }
  if (v8) {
    unint64_t v10 = "||";
  }
  else {
    unint64_t v10 = "&&";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v10, 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(v69[0] - 24)));
  BOOL v11 = std::locale::use_facet((const std::locale *)&v80, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v80);
  std::ostream::put();
  std::ostream::flush();
  if (v9)
  {
    unsigned int v12 = 0;
    uint64_t v13 = (a3 + 1);
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (GetSearchCriterionInfo((uint64_t)a2, v12, (uint64_t)v67) || !BYTE1(v67[2]))
    {
LABEL_290:
      if (v9 == ++v12) {
        goto LABEL_291;
      }
    }
    memset(&__p, 0, sizeof(__p));
    if (LOBYTE(v67[2]))
    {
      mlcore::_criteriaListDescription(&v80, v68, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v80;
      goto LABEL_280;
    }
    unsigned int v14 = v67[0];
    if (v67[0] > 0xB8)
    {
LABEL_280:
      char v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
      }
      if (v53)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)p_p, v53);
        char v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v52 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_290;
    }
    memset(&v65, 0, sizeof(v65));
    unint64_t v15 = "Play Status";
    switch(v67[0])
    {
      case 0u:
        unint64_t v15 = "Invalid";
        goto LABEL_160;
      case 1u:
        goto LABEL_160;
      case 2u:
        unint64_t v15 = "Name";
        goto LABEL_160;
      case 3u:
        unint64_t v15 = "Album";
        goto LABEL_160;
      case 4u:
        unint64_t v15 = "Artist";
        goto LABEL_160;
      case 5u:
        unint64_t v15 = "Bit Rate";
        goto LABEL_160;
      case 6u:
        unint64_t v15 = "Sample Rate";
        goto LABEL_160;
      case 7u:
        unint64_t v15 = "Year";
        goto LABEL_160;
      case 8u:
        unint64_t v15 = "Genre";
        goto LABEL_160;
      case 9u:
        unint64_t v15 = "Kind";
        goto LABEL_160;
      case 0xAu:
        unint64_t v15 = "Date Modified";
        goto LABEL_160;
      case 0xBu:
        unint64_t v15 = "Track Number";
        goto LABEL_160;
      case 0xCu:
        unint64_t v15 = "Size";
        goto LABEL_160;
      case 0xDu:
        unint64_t v15 = "Total Time";
        goto LABEL_160;
      case 0xEu:
        unint64_t v15 = "Comment";
        goto LABEL_160;
      case 0xFu:
      case 0x85u:
        unint64_t v15 = "Location";
        goto LABEL_160;
      case 0x10u:
        unint64_t v15 = "Date Added";
        goto LABEL_160;
      case 0x11u:
        unint64_t v15 = "EQ Preset";
        goto LABEL_160;
      case 0x12u:
        unint64_t v15 = "Composer";
        goto LABEL_160;
      case 0x13u:
        unint64_t v15 = "Obsolete Display Artist";
        goto LABEL_160;
      case 0x14u:
        unint64_t v15 = "Volume";
        goto LABEL_160;
      case 0x15u:
        unint64_t v15 = "Stream Status";
        goto LABEL_160;
      case 0x16u:
        unint64_t v15 = "User Play Count";
        goto LABEL_160;
      case 0x17u:
        unint64_t v15 = "Play Date";
        goto LABEL_160;
      case 0x18u:
        unint64_t v15 = "Disc Number";
        goto LABEL_160;
      case 0x19u:
        unint64_t v15 = "Track Rating";
        goto LABEL_160;
      case 0x1Au:
        unint64_t v15 = "Price";
        goto LABEL_160;
      case 0x1Bu:
        unint64_t v15 = "Object ID";
        goto LABEL_160;
      case 0x1Cu:
        unint64_t v15 = "Persistent ID";
        goto LABEL_160;
      case 0x1Du:
        unint64_t v15 = "Checked";
        goto LABEL_160;
      case 0x1Eu:
        unint64_t v15 = "Playlist Item ID";
        goto LABEL_160;
      case 0x1Fu:
        unint64_t v15 = "Compilation";
        goto LABEL_160;
      case 0x20u:
        unint64_t v15 = "Purchase Date";
        goto LABEL_160;
      case 0x21u:
        unint64_t v15 = "Relevance";
        goto LABEL_160;
      case 0x22u:
        unint64_t v15 = "Release Date";
        goto LABEL_160;
      case 0x23u:
        unint64_t v15 = "Beat Per Minute";
        goto LABEL_160;
      case 0x24u:
        unint64_t v15 = "Parent Container ID";
        goto LABEL_160;
      case 0x25u:
        unint64_t v15 = "Artwork";
        goto LABEL_160;
      case 0x26u:
        unint64_t v15 = "Popuarity";
        goto LABEL_160;
      case 0x27u:
        unint64_t v15 = "Grouping";
        goto LABEL_160;
      case 0x28u:
        unint64_t v15 = "Playlist";
        goto LABEL_160;
      case 0x29u:
        unint64_t v15 = "Purchased";
        goto LABEL_160;
      case 0x2Au:
        unint64_t v15 = "Artist ID";
        goto LABEL_160;
      case 0x2Bu:
        unint64_t v15 = "Playlist ID";
        goto LABEL_160;
      case 0x2Cu:
        unint64_t v15 = "Composer ID";
        goto LABEL_160;
      case 0x2Du:
        unint64_t v15 = "Genre ID";
        goto LABEL_160;
      case 0x2Eu:
        unint64_t v15 = "Codec Type";
        goto LABEL_160;
      case 0x2Fu:
        unint64_t v15 = "Codec Sub-Type";
        goto LABEL_160;
      case 0x30u:
        unint64_t v15 = "Song Data Kind";
        goto LABEL_160;
      case 0x31u:
        unint64_t v15 = "Disc Count";
        goto LABEL_160;
      case 0x32u:
        unint64_t v15 = "Start Time";
        goto LABEL_160;
      case 0x33u:
        unint64_t v15 = "Stop Time";
        goto LABEL_160;
      case 0x34u:
        unint64_t v15 = "Track Count";
        goto LABEL_160;
      case 0x35u:
        unint64_t v15 = "Store Front ID";
        goto LABEL_160;
      case 0x36u:
        unint64_t v15 = "Description";
        goto LABEL_160;
      case 0x37u:
        unint64_t v15 = "Category";
        goto LABEL_160;
      case 0x38u:
        unint64_t v15 = "Keywords";
        goto LABEL_160;
      case 0x39u:
        unint64_t v15 = "Podcast";
        goto LABEL_160;
      case 0x3Au:
        unint64_t v15 = "Cloud Match State";
        goto LABEL_160;
      case 0x3Bu:
        unint64_t v15 = "Has Lyrics";
        goto LABEL_160;
      case 0x3Cu:
        unint64_t v15 = "Media Kind";
        goto LABEL_160;
      case 0x3Eu:
        unint64_t v15 = "Series Name";
        goto LABEL_160;
      case 0x3Fu:
        unint64_t v15 = "Season Number";
        goto LABEL_160;
      case 0x40u:
        unint64_t v15 = "Epsisode ID";
        goto LABEL_160;
      case 0x41u:
        unint64_t v15 = "Episode Sort ID";
        goto LABEL_160;
      case 0x42u:
        unint64_t v15 = "Network Name";
        goto LABEL_160;
      case 0x43u:
        unint64_t v15 = "Last Backup Date";
        goto LABEL_160;
      case 0x44u:
        unint64_t v15 = "Skips";
        goto LABEL_160;
      case 0x45u:
        unint64_t v15 = "Skip Date";
        goto LABEL_160;
      case 0x46u:
        unint64_t v15 = "Gapless Album";
        goto LABEL_160;
      case 0x47u:
        unint64_t v15 = "Album Artist";
        goto LABEL_160;
      case 0x48u:
        unint64_t v15 = "Shuffle ID";
        goto LABEL_160;
      case 0x49u:
        unint64_t v15 = "Track ID";
        goto LABEL_160;
      case 0x4Au:
        unint64_t v15 = "Relative Volumne";
        goto LABEL_160;
      case 0x4Bu:
        unint64_t v15 = "Attributes";
        goto LABEL_160;
      case 0x4Cu:
      case 0x60u:
        unint64_t v15 = "Private";
        goto LABEL_160;
      case 0x4Du:
        unint64_t v15 = "Album Info";
        goto LABEL_160;
      case 0x4Eu:
        unint64_t v15 = "Sort Name";
        goto LABEL_160;
      case 0x4Fu:
        unint64_t v15 = "Sort Album";
        goto LABEL_160;
      case 0x50u:
        unint64_t v15 = "Sort Artist";
        goto LABEL_160;
      case 0x51u:
        unint64_t v15 = "Sort Album Artist";
        goto LABEL_160;
      case 0x52u:
        unint64_t v15 = "Sort Composer";
        goto LABEL_160;
      case 0x53u:
        unint64_t v15 = "Sort Series Name";
        goto LABEL_160;
      case 0x54u:
        unint64_t v15 = "Moive Info";
        goto LABEL_160;
      case 0x55u:
        unint64_t v15 = "Poscast URL";
        goto LABEL_160;
      case 0x56u:
        unint64_t v15 = "Long Description";
        goto LABEL_160;
      case 0x57u:
        unint64_t v15 = "Exernal GUID";
        goto LABEL_160;
      case 0x58u:
        unint64_t v15 = "Chapter Data";
        goto LABEL_160;
      case 0x59u:
        unint64_t v15 = "Video Rating";
        goto LABEL_160;
      case 0x5Au:
        unint64_t v15 = "Album Rating";
        goto LABEL_160;
      case 0x5Bu:
        unint64_t v15 = "Rental Expiration Date";
        goto LABEL_160;
      case 0x5Cu:
        unint64_t v15 = "Obsolere Ringtone Status";
        goto LABEL_160;
      case 0x5Du:
        unint64_t v15 = "Bookmark Time";
        goto LABEL_160;
      case 0x5Eu:
        unint64_t v15 = "Remember Bookmark";
        goto LABEL_160;
      case 0x5Fu:
        unint64_t v15 = "Has Been Played";
        goto LABEL_160;
      case 0x61u:
        unint64_t v15 = "Has Subtitles";
        goto LABEL_160;
      case 0x62u:
        unint64_t v15 = "Audio Language";
        goto LABEL_160;
      case 0x63u:
        unint64_t v15 = "Audio Track Index";
        goto LABEL_160;
      case 0x64u:
        unint64_t v15 = "Audio Track ID";
        goto LABEL_160;
      case 0x65u:
        unint64_t v15 = "Subtitle Language";
        goto LABEL_160;
      case 0x66u:
        unint64_t v15 = "Subtitle Track Index";
        goto LABEL_160;
      case 0x67u:
        unint64_t v15 = "Subtitle Track ID";
        goto LABEL_160;
      case 0x68u:
        unint64_t v15 = "Studio";
        goto LABEL_160;
      case 0x69u:
        unint64_t v15 = "Reserved 1";
        goto LABEL_160;
      case 0x6Au:
        unint64_t v15 = "Reserved 2";
        goto LABEL_160;
      case 0x6Bu:
        unint64_t v15 = "Reserved 3";
        goto LABEL_160;
      case 0x6Cu:
        unint64_t v15 = "Reserved 4";
        goto LABEL_160;
      case 0x6Du:
        unint64_t v15 = "Reserved 5";
        goto LABEL_160;
      case 0x6Eu:
        unint64_t v15 = "Gpaless Info";
        goto LABEL_160;
      case 0x6Fu:
        unint64_t v15 = "Genius ID";
        goto LABEL_160;
      case 0x70u:
        unint64_t v15 = "Exclude From Shuffle";
        goto LABEL_160;
      case 0x71u:
        unint64_t v15 = "Lyrics";
        goto LABEL_160;
      case 0x72u:
        unint64_t v15 = "Store Persistent ID";
        goto LABEL_160;
      case 0x73u:
        unint64_t v15 = "Jukebox Votes";
        goto LABEL_160;
      case 0x74u:
        unint64_t v15 = "Voice Over Language";
        goto LABEL_160;
      case 0x75u:
        unint64_t v15 = "iTunes U";
        goto LABEL_160;
      case 0x76u:
        unint64_t v15 = "Uncompressed Size";
        goto LABEL_160;
      case 0x77u:
        unint64_t v15 = "XID";
        goto LABEL_160;
      case 0x78u:
        unint64_t v15 = "Game GUID";
        goto LABEL_160;
      case 0x79u:
        unint64_t v15 = "App Identifier";
        goto LABEL_160;
      case 0x7Au:
        unint64_t v15 = "Obsolete Track Kind";
        goto LABEL_160;
      case 0x7Bu:
        unint64_t v15 = "Version";
        goto LABEL_160;
      case 0x7Cu:
        unint64_t v15 = "Copyright";
        goto LABEL_160;
      case 0x7Du:
        unint64_t v15 = "User Disabled";
        goto LABEL_160;
      case 0x7Eu:
        unint64_t v15 = "Album Artwork";
        goto LABEL_160;
      case 0x7Fu:
        unint64_t v15 = "Collection Description";
        goto LABEL_160;
      case 0x80u:
        unint64_t v15 = "Flavor";
        goto LABEL_160;
      case 0x81u:
        unint64_t v15 = "Cloud ID";
        goto LABEL_160;
      case 0x82u:
        unint64_t v15 = "Cloud Download";
        goto LABEL_160;
      case 0x83u:
        unint64_t v15 = "Chosen By Auto Fill";
        goto LABEL_160;
      case 0x84u:
        unint64_t v15 = "Cloud User ID";
        goto LABEL_160;
      case 0x86u:
        unint64_t v15 = "iCloud Type";
        goto LABEL_160;
      case 0x9Au:
        unint64_t v15 = "Liked State";
        goto LABEL_160;
      case 0xB7u:
        unint64_t v15 = "Liked State Changed Date";
LABEL_160:
        MEMORY[0x2166B2280](&v65, v15);
        std::string::size_type v16 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v16 = v65.__r_.__value_.__l.__size_;
        }
        if (!v16) {
          goto LABEL_163;
        }
        goto LABEL_166;
      default:
LABEL_163:
        LODWORD(v73) = v14;
        mediaplatform::FormatString<unsigned int>(&v80, (std::string *)"(unsupported: {0})", (unsigned int *)&v73);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        std::string v65 = v80;
LABEL_166:
        HIDWORD(v18) = v67[0] - 29;
        LODWORD(v18) = v67[0] - 29;
        unsigned int v17 = v18 >> 1;
        if (v17 <= 6 && ((1 << v17) & 0x53) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v63, "is equal to");
          break;
        }
        v63[1] = 0;
        uint64_t v64 = 0;
        v63[0] = 0;
        unsigned int v24 = v67[1] & 0xFFFFFF;
        if ((v67[1] & 0xFFFFFF) <= 0x1F)
        {
          uint64_t v32 = "invalid";
          switch(v24)
          {
            case 0u:
              goto LABEL_233;
            case 1u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "is not equal to";
              char v27 = "is equal to";
              break;
            case 2u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "does not contain";
              char v27 = "contains";
              break;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
              goto LABEL_169;
            case 4u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "does not start with";
              char v27 = "starts with";
              break;
            case 8u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "does not end with";
              char v27 = "ends with";
              break;
            default:
              if (v24 != 16) {
                goto LABEL_169;
              }
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "is not greater than";
              char v27 = "is greater than";
              break;
          }
        }
        else if ((v67[1] & 0xFFFFFF) <= 0xFF)
        {
          switch(v24)
          {
            case 0x20u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "is not greater than or equal";
              char v27 = "is greater than or equal";
              break;
            case 0x40u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "is not less than";
              char v27 = "is less than";
              break;
            case 0x80u:
              BOOL v25 = (v67[1] & 0x2000000) == 0;
              uint64_t v26 = "is not less than or equal";
              char v27 = "is less than or equal";
              break;
            default:
              goto LABEL_169;
          }
        }
        else if ((v67[1] & 0xFFFFFF) > 0x3FF)
        {
          if (v24 != 1024 && v24 != 2048) {
            break;
          }
          BOOL v25 = (v67[1] & 0x2000000) == 0;
          uint64_t v26 = "is not";
          char v27 = "is";
        }
        else if (v24 == 256)
        {
          BOOL v25 = (v67[1] & 0x2000000) == 0;
          uint64_t v26 = "is not in range";
          char v27 = "is in range";
        }
        else
        {
          if (v24 != 512) {
            break;
          }
          BOOL v25 = (v67[1] & 0x2000000) == 0;
          uint64_t v26 = "is not between";
          char v27 = "is between";
        }
        if (v25) {
          uint64_t v32 = v27;
        }
        else {
          uint64_t v32 = v26;
        }
LABEL_233:
        MEMORY[0x2166B2280](v63, v32);
        break;
    }
LABEL_169:
    int v19 = v67[0];
    uint64_t v20 = &v80;
    switch(v67[0])
    {
      case 2u:
      case 3u:
      case 4u:
      case 8u:
      case 9u:
      case 0xEu:
      case 0x11u:
      case 0x12u:
      case 0x27u:
      case 0x36u:
      case 0x37u:
      case 0x3Eu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x47u:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x56u:
      case 0x57u:
      case 0x71u:
      case 0x7Cu:
      case 0x7Fu:
      case 0x80u:
        mlcore::stringValueForCriterionInfo(&v62, (void *)v68, DWORD2(v68));
        goto LABEL_257;
      case 5u:
      case 6u:
      case 7u:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0x14u:
      case 0x16u:
      case 0x18u:
      case 0x19u:
      case 0x1Bu:
      case 0x1Cu:
      case 0x23u:
      case 0x28u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x3Cu:
      case 0x3Fu:
      case 0x44u:
      case 0x4Au:
      case 0x5Au:
      case 0x5Du:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x6Fu:
      case 0x72u:
      case 0x76u:
      case 0x77u:
      case 0x81u:
      case 0x86u:
      case 0x9Au:
        if (LOBYTE(v67[2]) || !(void)v68)
        {
          uint64_t v22 = v60;
          uint64_t v21 = v61;
          uint64_t v23 = v59;
        }
        else
        {
          uint64_t v22 = v60;
          uint64_t v21 = v61;
          uint64_t v23 = v59;
          if (DWORD2(v68) == 68)
          {
            uint64_t v21 = *(void *)v68;
            uint64_t v22 = *(void *)(v68 + 8);
            uint64_t v23 = *(void *)(v68 + 16);
            uint64_t v58 = *(void *)(v68 + 24);
            uint64_t v57 = *(void *)(v68 + 32);
            uint64_t v56 = *(void *)(v68 + 40);
          }
        }
        __int16 v28 = v67[1];
        uint64_t v60 = v22;
        uint64_t v61 = v21;
        uint64_t v59 = v23;
        unint64_t v29 = v21 + v23 * v22;
        uint64_t v30 = v58 + v56 * v57;
        uint64_t v76 = v30;
        unint64_t v77 = v29;
        long long v73 = 0uLL;
        *(void *)&long long v74 = 0;
        memset(&v79, 0, sizeof(v79));
        if ((int)v67[0] <= 89)
        {
          if (v67[0] == 25)
          {
LABEL_191:
            int v75 = (int)v29 / 20;
            mediaplatform::FormatString<long long,int>(&v78, (uint64_t)&v77, (uint64_t)&v75);
            long long v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(void *)&long long v74 = *((void *)&v78.__r_.__value_.__l + 2);
            int v75 = (int)v30 / 20;
            mediaplatform::FormatString<long long,int>(&v78, (uint64_t)&v76, (uint64_t)&v75);
          }
          else if (v67[0] == 60)
          {
            mlcore::_stringForTrackFieldMediaKind((mlcore *)&v78, v29);
            long long v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(void *)&long long v74 = *((void *)&v78.__r_.__value_.__l + 2);
            mlcore::_stringForTrackFieldMediaKind((mlcore *)&v78, v30);
          }
          else
          {
LABEL_194:
            mlcore::_convertNumericValueFromCriterionMatchKey(&v78, v67[0], v29);
            long long v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(void *)&long long v74 = *((void *)&v78.__r_.__value_.__l + 2);
            mlcore::_convertNumericValueFromCriterionMatchKey(&v78, v19, v30);
          }
          std::string v79 = v78;
          goto LABEL_196;
        }
        if (v67[0] == 90) {
          goto LABEL_191;
        }
        if (v67[0] != 134) {
          goto LABEL_194;
        }
        int v31 = "invalid";
        if (v29 <= 7) {
          int v31 = (&off_26422EC60)[v29];
        }
        std::string::basic_string[abi:ne180100]<0>(&v78, v31);
        long long v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        *(void *)&long long v74 = *((void *)&v78.__r_.__value_.__l + 2);
LABEL_196:
        uint64_t v33 = (std::string *)"{0} to {1}";
        if ((v28 & 0x100) != 0 || (uint64_t v33 = (std::string *)"{0} and {1}", (v28 & 0x200) != 0))
        {
          mediaplatform::FormatString<std::string,std::string>(&v62, v33, (uint64_t)&v73, (uint64_t)&v79);
        }
        else
        {
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v73;
          v62.__r_.__value_.__r.__words[2] = v74;
          *(void *)&long long v74 = 0;
          long long v73 = 0uLL;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v74) < 0)
        {
          int v34 = (void *)v73;
          goto LABEL_204;
        }
        goto LABEL_257;
      case 0xAu:
      case 0x10u:
      case 0x17u:
      case 0x22u:
      case 0x45u:
      case 0xB7u:
        long long v73 = *(_OWORD *)v67;
        long long v74 = v68;
        if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::_dateStringForCriteriaInfo(CriterionInfo)::once, memory_order_acquire) != -1)
        {
          v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
          std::__call_once(&mlcore::_dateStringForCriteriaInfo(CriterionInfo)::once, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::_dateStringForCriteriaInfo(CriterionInfo)::$_0 &&>>);
        }
        uint64_t v35 = mlcore::dateRangeValueForCriterionInfo((uint64_t)&v73);
        uint64_t v37 = v36;
        CFDateRef v38 = CFDateCreate(allocator, (double)v35);
        CFDateRef v39 = CFDateCreate(allocator, (double)v37);
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(allocator, (CFDateFormatterRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter, v38);
        CFStringRef v41 = CFDateFormatterCreateStringWithDate(allocator, (CFDateFormatterRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter, v39);
        CFRelease(v38);
        CFRelease(v39);
        mediaplatform::StringFromCFString((mediaplatform *)&v79, StringWithDate);
        mediaplatform::StringFromCFString((mediaplatform *)&v78, v41);
        CFRelease(StringWithDate);
        CFRelease(v41);
        v42 = (std::string *)"({0}) to ({1})";
        if ((WORD2(v73) & 0x100) != 0 || (v42 = (std::string *)"({0}) and ({1})", (WORD2(v73) & 0x200) != 0))
        {
          mediaplatform::FormatString<std::string,std::string>(&v62, v42, (uint64_t)&v79, (uint64_t)&v78);
        }
        else
        {
          std::string v62 = v79;
          memset(&v79, 0, sizeof(v79));
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        {
          int v34 = (void *)v79.__r_.__value_.__r.__words[0];
LABEL_204:
          operator delete(v34);
        }
        goto LABEL_257;
      case 0x1Du:
      case 0x1Fu:
      case 0x25u:
      case 0x29u:
      case 0x39u:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x70u:
      case 0x75u:
      case 0x7Du:
      case 0x83u:
      case 0x85u:
        break;
      case 0x7Eu:
        uint64_t v20 = (std::string *)&v73;
        break;
      default:
        LODWORD(v73) = v67[0];
        mediaplatform::FormatString<unsigned int>(&v62, (std::string *)"(unsupported: %d)", (unsigned int *)&v73);
        goto LABEL_257;
    }
    long long v43 = v68;
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)v67;
    *(_OWORD *)&v20->__r_.__value_.__r.__words[2] = v43;
    HIDWORD(v44) = LODWORD(v20->__r_.__value_.__l.__data_) - 29;
    LODWORD(v44) = HIDWORD(v44);
    switch((v44 >> 1))
    {
      case 0u:
      case 4u:
      case 6u:
        if ((v20->__r_.__value_.__s.__data_[7] & 2) != 0) {
          unint64_t v45 = "true";
        }
        else {
          unint64_t v45 = "false";
        }
        goto LABEL_256;
      case 1u:
        if ((v20->__r_.__value_.__s.__data_[7] & 2) != 0) {
          unint64_t v45 = "false";
        }
        else {
          unint64_t v45 = "true";
        }
        goto LABEL_256;
      default:
        if (LODWORD(v20->__r_.__value_.__l.__data_) == 133
          && (v20->__r_.__value_.__r.__words[0] & 0x40000000000) != 0)
        {
          if (v20->__r_.__value_.__s.__data_[8]) {
            goto LABEL_255;
          }
          char v46 = (uint64_t *)v20->__r_.__value_.__r.__words[2];
          if (v46)
          {
            if (LODWORD(v20[1].__r_.__value_.__l.__data_) == 68)
            {
              uint64_t v47 = *v46;
              unint64_t v45 = "on this computer";
              if ((v47 & 1) != 0 || (unint64_t v45 = "on iCloud", (v47 & 0x10) != 0))
              {
LABEL_256:
                std::string::basic_string[abi:ne180100]<0>(&v62, v45);
LABEL_257:
                switch(v67[0])
                {
                  case 5u:
                    v49 = "kbps";
                    break;
                  case 0xCu:
                    v49 = "MB";
                    break;
                  case 6u:
                    v49 = "Hz";
                    break;
                  default:
                    v49 = "";
                    break;
                }
                std::string::basic_string[abi:ne180100]<0>(&v73, v49);
                v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
                v80.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
                v80.__r_.__value_.__r.__words[2] = (std::string::size_type)v63;
                v81 = &v65;
                v82 = &v72;
                memset(&v79, 0, sizeof(v79));
                mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>((std::string *)"{0}{1} {2} {3} {4}\n", &v79, 0, (uint64_t *)&v80);
                if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v50 = &v79;
                }
                else {
                  uint64_t v50 = (std::string *)v79.__r_.__value_.__r.__words[0];
                }
                if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v51 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v51 = v79.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v50, v51);
                if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v79.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v74) < 0) {
                  operator delete((void *)v73);
                }
                if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v62.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v64) < 0) {
                  operator delete(v63[0]);
                }
                if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v65.__r_.__value_.__l.__data_);
                }
                goto LABEL_280;
              }
            }
          }
        }
        else if (v20->__r_.__value_.__s.__data_[8])
        {
          goto LABEL_255;
        }
        v48 = (void *)v20->__r_.__value_.__r.__words[2];
        if (v48)
        {
          if (LODWORD(v20[1].__r_.__value_.__l.__data_) == 68)
          {
            unint64_t v45 = "true";
            if (*v48) {
              goto LABEL_256;
            }
          }
        }
LABEL_255:
        unint64_t v45 = "false";
        goto LABEL_256;
    }
  }
LABEL_291:
  UnlockSearchCriteriaList((uint64_t)a2);
  std::stringbuf::str();
  v69[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v69 + *(void *)(v69[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v69[1] = MEMORY[0x263F8C318] + 16;
  if (v70 < 0) {
    operator delete((void *)v69[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166B2650](&v71);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
}

void sub_21504EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v73 - 137) < 0) {
    operator delete(*(void **)(v73 - 160));
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  std::ostringstream::~ostringstream((uint64_t)&a44);
  if (a73 < 0) {
    operator delete(a72);
  }
  _Unwind_Resume(a1);
}

void *mlcore::_stringForTrackFieldMediaKind(mlcore *this, uint64_t a2)
{
  if (a2 > 4095)
  {
    if (a2 < 0x40000)
    {
      if (a2 >= 0x8000)
      {
        switch(a2)
        {
          case 0x8000:
            uint64_t v3 = "rental";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x10000:
            uint64_t v3 = "digital booklet";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x20000:
            uint64_t v3 = "software application";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
        }
      }
      else
      {
        switch(a2)
        {
          case 0x1000:
            uint64_t v3 = "software package";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x2000:
            uint64_t v3 = "forced music playlist";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x4000:
            uint64_t v3 = "ringtone";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
        }
      }
    }
    else if (a2 < 0x200000)
    {
      switch(a2)
      {
        case 0x40000:
          uint64_t v3 = "software game";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 0x80000:
          uint64_t v3 = "audio pass";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 0x100000:
          uint64_t v3 = "voice memo";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else if (a2 >= 0x800000)
    {
      if (a2 == 0x800000)
      {
        uint64_t v3 = "PDF book";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 0x1000000)
      {
        uint64_t v3 = "alert tone";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else
    {
      if (a2 == 0x200000)
      {
        uint64_t v3 = "iTunes U";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 0x400000)
      {
        uint64_t v3 = "book";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    goto LABEL_57;
  }
  if (a2 > 31)
  {
    if (a2 <= 255)
    {
      switch(a2)
      {
        case 32:
          uint64_t v3 = "music video";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 64:
          uint64_t v3 = "TV show";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 128:
          uint64_t v3 = "interactive booklet";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else if (a2 > 1023)
    {
      if (a2 == 1024)
      {
        uint64_t v3 = "home video";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 2048)
      {
        uint64_t v3 = "future video 3";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else
    {
      if (a2 == 256)
      {
        uint64_t v3 = "coached audio";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 512)
      {
        uint64_t v3 = "video pass";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
LABEL_57:
    uint64_t v3 = "invalid";
    return std::string::basic_string[abi:ne180100]<0>(this, v3);
  }
  uint64_t v3 = "unknown";
  switch(a2)
  {
    case 0:
      return std::string::basic_string[abi:ne180100]<0>(this, v3);
    case 1:
      uint64_t v3 = "music";
      break;
    case 2:
      uint64_t v3 = "movie";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_57;
    case 4:
      uint64_t v3 = "podcast";
      break;
    case 8:
      uint64_t v3 = "audiobook";
      break;
    default:
      if (a2 != 16) {
        goto LABEL_57;
      }
      uint64_t v3 = "PDF booklet";
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(this, v3);
}

void mediaplatform::FormatString<long long,int>(std::string *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<long long,int>((std::string *)"{0} ({1} stars)", a1, 0, (uint64_t)v3);
}

void sub_21504F620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::_convertNumericValueFromCriterionMatchKey(std::string *this, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  if (a2 == 13)
  {
    uint64_t v6 = a3 % 1000;
    uint64_t v5 = a3 / 1000 % 60;
    uint64_t v4 = a3 / 60000 % 60;
    v8[0] = &v4;
    v8[1] = &v5;
    v8[2] = &v6;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    this->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::FormatImplementation<long long,long long,long long>((std::string *)"{0}:{1}:{2}", this, 0, v8);
  }
  else
  {
    if (a2 == 12)
    {
      v8[0] = (uint64_t *)(a3 / 0x100000);
      uint64_t v3 = (uint64_t *)v8;
    }
    else
    {
      uint64_t v3 = &v7;
    }
    mediaplatform::FormatString<long long>(this, (std::string *)"{0}", v3);
  }
}

void sub_21504F76C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::StringFromCFString(mediaplatform *this, CFStringRef theString)
{
  if (theString)
  {
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    CFIndex Length = CFStringGetLength(theString);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      CFIndex v6 = MaximumSizeForEncoding + 1;
      uint64_t v7 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(theString, (char *)v7, v6, 0x8000100u))
      {
        MEMORY[0x2166B2280](&v8, v7);
        free(v7);
        *(_OWORD *)this = v8;
        *((void *)this + 2) = v9;
        return;
      }
      free(v7);
    }
    std::string::basic_string[abi:ne180100]<0>(this, "(invalid)");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(this, "(null)");
  }
}

void sub_21504F884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  uint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    char v27 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    char v27 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    char v27 = v9 + 2;
    int v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v18 = v9 + 3;
      do
      {
        int v19 = v18;
        char v27 = v18;
        uint64_t v17 = (v16 - 48) + 10 * v17;
        ++v18;
        int v21 = *v19;
        uint64_t v20 = (unsigned __int8 *)(v19 - 1);
        int v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      char v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(v17);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v23, (const char **)&v27);
  switch(*((void *)&v23 + 1))
  {
    case 0:
      uint64_t v12 = a4[4];
      break;
    case 1:
      uint64_t v12 = a4[3];
      break;
    case 2:
      uint64_t v12 = a4[2];
      break;
    case 3:
      uint64_t v12 = a4[1];
      break;
    case 4:
      uint64_t v12 = *a4;
      break;
    default:
      mediaplatform::FormatterParameters<5ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>>();
  }
  uint64_t v28 = v12;
  long long v29 = v23;
  long long v30 = v24;
  long long v31 = v25;
  uint64_t v32 = v26;
  if (*(char *)(v12 + 23) < 0) {
    unint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  unint64_t v14 = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1) <= v13) {
    unint64_t v14 = v13;
  }
  if ((_BYTE)v24) {
    unint64_t v13 = v14;
  }
  mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = (char *)a2;
  }
  else {
    unint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v23, &v15[i], (uint64_t)&v28);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_21504FB38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_21504FBB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<5ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21504FC10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_21504FC78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_21504FCE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  if (a1 == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<4ul,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_21504FD48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  if (a1 == 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<5ul>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>();
}

void sub_21504FDB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<5ul>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21504FE0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::_dateStringForCriteriaInfo(CriterionInfo)::$_0 &&>>()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  mlcore::_dateStringForCriteriaInfo(CriterionInfo)::locale = (uint64_t)CFLocaleCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"en");
  uint64_t v1 = CFDateFormatterCreate(v0, (CFLocaleRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::locale, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter = (uint64_t)v1;
  CFDateFormatterSetFormat(v1, @"MM/dd/yyyy HH:mm");
}

void mediaplatform::FormatterParameters<0ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,std::string>::formatOptionsAtIndex<std::string,std::string>(a1);
}

void sub_21504FEE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21504FF40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,std::string>::formatOptionsAtIndex<std::string,std::string>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,std::string>();
}

void sub_21504FFA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,std::string>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215050004(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatString<long long>(std::string *a1, std::string *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<long long>(a2, a1, 0, &v3);
}

void sub_215050060(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<long long,long long,long long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t **a4)
{
  char v8 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    uint64_t v35 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    uint64_t v35 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v35 = v9 + 2;
    int v24 = v9[2];
    if ((v24 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = v9 + 3;
      do
      {
        char v27 = v26;
        uint64_t v35 = v26;
        uint64_t v25 = (v24 - 48) + 10 * v25;
        ++v26;
        int v29 = *v27;
        uint64_t v28 = (unsigned __int8 *)(v27 - 1);
        int v24 = v29;
      }
      while ((v29 - 58) >= 0xFFFFFFF6);
      uint64_t v35 = (char *)(v28 + 2);
      if (*(v26 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,long long,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(v25);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v31, (const char **)&v35);
  uint64_t v12 = v35;
  if (v32)
  {
    if (v32 == 1)
    {
      mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, *a4[1], (uint64_t)v31);
      if (v38 && !*(unsigned char *)(v36[0] + 48)) {
        uint64_t v14 = 64;
      }
      else {
        uint64_t v14 = 65;
      }
      unint64_t v16 = v14 - v37;
      if (*(unsigned char *)(v36[0] + 50) && v16 <= *(void *)(v36[0] + 24)) {
        unint64_t v16 = *(void *)(v36[0] + 24);
      }
      unint64_t v17 = v34;
      if (v34 <= v16) {
        unint64_t v17 = v16;
      }
      if (v33) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v16;
      }
    }
    else
    {
      if (v32 != 2) {
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,long long,long long>>();
      }
      mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, **a4, (uint64_t)v31);
      if (v38 && !*(unsigned char *)(v36[0] + 48)) {
        uint64_t v13 = 64;
      }
      else {
        uint64_t v13 = 65;
      }
      unint64_t v21 = v13 - v37;
      if (*(unsigned char *)(v36[0] + 50) && v21 <= *(void *)(v36[0] + 24)) {
        unint64_t v21 = *(void *)(v36[0] + 24);
      }
      unint64_t v22 = v34;
      if (v34 <= v21) {
        unint64_t v22 = v21;
      }
      if (v33) {
        unint64_t v18 = v22;
      }
      else {
        unint64_t v18 = v21;
      }
    }
  }
  else
  {
    mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, *a4[2], (uint64_t)v31);
    if (v38 && !*(unsigned char *)(v36[0] + 48)) {
      uint64_t v15 = 64;
    }
    else {
      uint64_t v15 = 65;
    }
    unint64_t v19 = v15 - v37;
    if (*(unsigned char *)(v36[0] + 50) && v19 <= *(void *)(v36[0] + 24)) {
      unint64_t v19 = *(void *)(v36[0] + 24);
    }
    unint64_t v20 = v34;
    if (v34 <= v19) {
      unint64_t v20 = v19;
    }
    if (v33) {
      unint64_t v18 = v20;
    }
    else {
      unint64_t v18 = v19;
    }
  }
  mediaplatform::FormatImplementation<long long,long long,long long>(v12, a2, v18 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v23 = (char *)a2;
  }
  else {
    long long v23 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v31, &v23[i], v36);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_215050450(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,long long,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(a1);
}

void sub_2150504C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<long long,void>::TypeFormatter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a3;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = a2 >= 0;
  switch(*(_DWORD *)(a3 + 4))
  {
    case 0:
      uint64_t v3 = 71;
      if (a2 < 0)
      {
        do
        {
          *(unsigned char *)(result + v3) = 48 - (char)a2 % 10;
          unint64_t v11 = a2 + 9;
          --v3;
          a2 /= 10;
        }
        while (v11 >= 0x13);
      }
      else
      {
        do
        {
          *(unsigned char *)(result + v3--) = (a2 % 0xAuLL) | 0x30;
          BOOL v4 = (unint64_t)a2 >= 0xA;
          a2 /= 0xAuLL;
        }
        while (v4);
      }
      goto LABEL_26;
    case 1:
      if (a2 >= 0) {
        unint64_t v5 = a2;
      }
      else {
        unint64_t v5 = -a2;
      }
      uint64_t v3 = 71;
      do
      {
        *(unsigned char *)(result + v3--) = v5 & 7 | 0x30;
        BOOL v4 = v5 >= 8;
        v5 >>= 3;
      }
      while (v4);
      goto LABEL_26;
    case 2:
      CFIndex v6 = &mediaplatform::TypeFormatterUpperHexMapping;
      if (!*(unsigned char *)(a3 + 51)) {
        CFIndex v6 = &mediaplatform::TypeFormatterLowerHexMapping;
      }
      if (a2 >= 0) {
        unint64_t v7 = a2;
      }
      else {
        unint64_t v7 = -a2;
      }
      uint64_t v8 = 71;
      do
      {
        *(unsigned char *)(result + v8--) = v6[v7 & 0xF];
        BOOL v4 = v7 >= 0x10;
        v7 >>= 4;
      }
      while (v4);
      uint64_t v9 = v8 - 7;
      goto LABEL_27;
    case 3:
      if (a2 >= 0) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = -a2;
      }
      uint64_t v3 = 71;
      do
      {
        *(unsigned char *)(result + v3--) = v10 & 1 | 0x30;
        BOOL v4 = v10 >= 2;
        v10 >>= 1;
      }
      while (v4);
LABEL_26:
      uint64_t v9 = v3 - 7;
LABEL_27:
      *(void *)(result + 72) = v9;
      break;
    default:
      return result;
  }
  return result;
}

char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(char *result, char *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  BOOL v4 = result;
  uint64_t v5 = *a3;
  if (*((unsigned char *)a3 + 80) && !*(unsigned char *)(v5 + 48)) {
    uint64_t v6 = 64;
  }
  else {
    uint64_t v6 = 65;
  }
  unint64_t v7 = v6 - a3[9];
  if (*(unsigned char *)(v5 + 50))
  {
    unint64_t v8 = *(void *)(v5 + 24);
    if (v7 <= v8) {
      unint64_t v7 = v8;
    }
  }
  if (!result[16] || (unint64_t v9 = *((void *)result + 3), v10 = v9 - v7, v9 <= v7))
  {
LABEL_15:
    return mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  }
  int v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 != 1)
    {
      if (v11 != 2) {
        return result;
      }
      if (v9 != v7)
      {
        do
        {
          *v3++ = result[52];
          --v10;
        }
        while (v10);
      }
      goto LABEL_15;
    }
    unint64_t v12 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v10 >> 1;
      }
      do
      {
        *v3++ = result[52];
        --v13;
      }
      while (v13);
    }
    uint64_t result = mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    if (v10 != v12)
    {
      unint64_t v14 = v10 - (v10 >> 1);
      uint64_t v15 = &v3[v7];
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      uint64_t v16 = -(uint64_t)v14;
      do
        *v15++ = v4[52];
      while (!__CFADD__(v16++, 1));
    }
  }
  else
  {
    uint64_t result = mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, a2);
    if (v9 != v7)
    {
      unint64_t v18 = &v3[v7];
      do
      {
        *v18++ = v4[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

char *mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>(char *result, char *a2)
{
  uint64_t v3 = result + 72;
  uint64_t v2 = *((void *)result + 9);
  if (result[80])
  {
    uint64_t v4 = *(void *)result;
    if (!*(unsigned char *)(*(void *)result + 48))
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
    char v5 = *(unsigned char *)(v4 + 49);
  }
  else
  {
    char v5 = 45;
  }
  *a2++ = v5;
  uint64_t v4 = *(void *)result;
  uint64_t v6 = 1;
LABEL_7:
  if (*(unsigned char *)(v4 + 16))
  {
    if (*(unsigned char *)(v4 + 50))
    {
      unint64_t v7 = v6 - v2 + 64;
      if (v7 < *(void *)(v4 + 24))
      {
        do
        {
          *a2++ = 48;
          ++v7;
        }
        while (v7 < *(void *)(*(void *)result + 24));
      }
    }
  }
  unint64_t v8 = &result[*((void *)result + 9) + 8];
  if (v3 != v8) {
    return (char *)memmove(a2, v8, v3 - v8);
  }
  return result;
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,long long,long long>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150508A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,long long>::formatOptionsAtIndex<long long,long long,long long>(a1);
}

void sub_215050910(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<long long,long long,long long>();
}

void sub_215050978(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<long long,long long,long long>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150509D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatImplementation<long long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t **a4)
{
  char v8 = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    int v29 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    int v29 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    int v29 = v9 + 2;
    int v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = v9 + 3;
      do
      {
        unint64_t v21 = v20;
        int v29 = v20;
        uint64_t v19 = (v18 - 48) + 10 * v19;
        ++v20;
        int v23 = *v21;
        unint64_t v22 = (unsigned __int8 *)(v21 - 1);
        int v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      int v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,long long>::formatOptionsAtIndex<long long>(v19);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  if (v26) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long>>();
  }
  unint64_t v12 = v29;
  mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v30, **a4, (uint64_t)v25);
  if (v31 && !*(unsigned char *)(v30[0] + 48)) {
    uint64_t v13 = 64;
  }
  else {
    uint64_t v13 = 65;
  }
  unint64_t v14 = v13 - v30[9];
  if (*(unsigned char *)(v30[0] + 50) && v14 <= *(void *)(v30[0] + 24)) {
    unint64_t v14 = *(void *)(v30[0] + 24);
  }
  unint64_t v15 = v28;
  if (v28 <= v14) {
    unint64_t v15 = v14;
  }
  if (v27) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v14;
  }
  mediaplatform::FormatImplementation<long long>(v12, a2, v16 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v17 = (char *)a2;
  }
  else {
    unint64_t v17 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v25, &v17[i], v30);
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_215050CAC(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,long long>::formatOptionsAtIndex<long long>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<long long>();
}

void sub_215050D1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215050D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<long long>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215050DD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatImplementation<long long,int>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    unint64_t v34 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    unint64_t v34 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    unint64_t v34 = v9 + 2;
    int v23 = v9[2];
    if ((v23 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = v9 + 3;
      do
      {
        uint64_t v26 = v25;
        unint64_t v34 = v25;
        uint64_t v24 = (v23 - 48) + 10 * v24;
        ++v25;
        int v28 = *v26;
        char v27 = (unsigned __int8 *)(v26 - 1);
        int v23 = v28;
      }
      while ((v28 - 58) >= 0xFFFFFFF6);
      unint64_t v34 = (char *)(v27 + 2);
      if (*(v25 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,long long,int>::formatOptionsAtIndex<long long,int>(v24);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v30, (const char **)&v34);
  unint64_t v12 = v34;
  if (v31)
  {
    if (v31 != 1) {
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,int>>();
    }
    mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)v35, **(_DWORD **)a4, (uint64_t)v30);
    if (v36 && !*(unsigned char *)(v35[0] + 48)) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = 33;
    }
    unint64_t v19 = v13 - v35[5];
    if (*(unsigned char *)(v35[0] + 50) && v19 <= *(void *)(v35[0] + 24)) {
      unint64_t v19 = *(void *)(v35[0] + 24);
    }
    unint64_t v20 = v33;
    if (v33 <= v19) {
      unint64_t v20 = v19;
    }
    if (v32) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = v19;
    }
    mediaplatform::FormatImplementation<long long,int>(v12, a2, v21 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = (char *)a2;
    }
    else {
      unint64_t v22 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(v30, &v22[i], v35);
  }
  else
  {
    mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v35, **(void **)(a4 + 8), (uint64_t)v30);
    if (v38 && !*(unsigned char *)(v35[0] + 48)) {
      uint64_t v14 = 64;
    }
    else {
      uint64_t v14 = 65;
    }
    unint64_t v15 = v14 - v37;
    if (*(unsigned char *)(v35[0] + 50) && v15 <= *(void *)(v35[0] + 24)) {
      unint64_t v15 = *(void *)(v35[0] + 24);
    }
    unint64_t v16 = v33;
    if (v33 <= v15) {
      unint64_t v16 = v15;
    }
    if (v32) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v15;
    }
    mediaplatform::FormatImplementation<long long,int>(v12, a2, v17 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = (char *)a2;
    }
    else {
      int v18 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v30, &v18[i], v35);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_215051154(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,long long,int>::formatOptionsAtIndex<long long,int>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,int>::formatOptionsAtIndex<long long,int>(a1);
}

void sub_2150511C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,int>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215051220(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,int>::formatOptionsAtIndex<long long,int>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<long long,int>();
}

void sub_215051288(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<long long,int>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150512E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  uint64_t v3 = (mlcore *)mlcore::ComposerPropertyOrder(a1);
  if (v3 != a2) {
    return 0;
  }
  return mlcore::ComposerPropertyOrderSection(v3);
}

uint64_t mlcore::ComposerPropertyOrderSection(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ComposerPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyComposerOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemKVSTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::DatabaseModelProperty<long long>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  uint64_t v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    unint64_t v9 = *(char **)(v4 + 8);
    char v8 = (char *)(v4 + 8);
    unint64_t v7 = v9;
    if (v8[23] >= 0) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else {
    std::string __p = *(std::string *)(a1 + 80);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_2150515C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<long long>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C7EB8;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C7EB8;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComposerTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ComposerTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComposerTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Composer>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Composer>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Composer>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::entityType()
{
  return 5;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

double mlcore::TypedEntityClass<mlcore::Composer>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(v10, a2);
  double v8 = v10[0];
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache(*(void *)&v10[0] + 8, a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(void *)&v8 + 176, v11[0], v11)[3] = a2;
  double result = v10[0];
  *a4 = *(_OWORD *)v10;
  return result;
}

void sub_215051940(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x100uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C5CB2B0;
  double result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((void *)v4 + 4) = &unk_26C5C4EE8;
  *((void *)v4 + 30) = &unk_26C5C4F10;
  *((void *)v4 + 31) = a2;
  *((void *)v4 + 3) = &unk_26C5C8820;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E11target_typeEv()
{
  return &_ZTIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS0_RKNSt3__18functionIFbPNS_17ModelPropertyBaseEEEEEd_UlS6_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000215126017)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void _ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8E68;
}

void *_ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E7__cloneEv()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C5C8E68;
  return result;
}

void _ZNSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_ED0Ev()
{
}

uint64_t std::__shared_ptr_emplace<mlcore::Composer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Composer>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::EntityClass::~EntityClass(mlcore::EntityClass *this)
{
  *(void *)this = &unk_26C5C4420;
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    operator delete(v4);
  }
  size_t v5 = (void **)*((void *)this + 11);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      size_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7) {
    operator delete(v7);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void mlcore::Composer::~Composer(mlcore::Composer *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

void mlcore::DatabaseModelProperty<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  uint64_t v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    unint64_t v9 = *(char **)(v4 + 8);
    double v8 = (char *)(v4 + 8);
    unint64_t v7 = v9;
    if (v8[23] >= 0) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else {
    std::string __p = *(std::string *)(a1 + 80);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_215051EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<std::string>::~DatabaseModelProperty(void **a1)
{
  *a1 = &unk_26C5C7D20;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *a1 = &unk_26C5C7D20;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
}

uint64_t mlcore::ComposerPropertySortName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertySortName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertySortName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertySortName(void)::$_0 &&>>()
{
}

void sub_21505219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyGroupingKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyGroupingKey(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyGroupingKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyGroupingKey(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyGroupingKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyGroupingKey(void)::$_0 &&>>()
{
}

void sub_215052430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) != *(void *)(a1 + 64)
    && (uint64_t v6 = *(void *)(a1 + 8)) != 0
    && (int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v17);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v15, &v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v13, v10, *(void *)(a1 + 64) + 8, &v15);
    int v11 = v14;
    uint64_t v18 = v13;
    unint64_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&long long v17 = a3;
    BYTE8(v17) = 0;
    unint64_t v12 = operator new(0x10uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 2;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)(a3 + 2), &v18, &v20, v12);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_21505268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

double mlcore::DatabaseModelProperty<mediaplatform::Data>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<mediaplatform::Data>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

void *mlcore::DatabaseModelProperty<mediaplatform::Data>::databaseTables@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v4 = operator new(8uLL);
  *a2 = v4;
  *uint64_t v4 = v3;
  double result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void mlcore::ModelProperty<mediaplatform::Data>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(*(void *)(a3 + 8), *(_DWORD *)a3 + a4, (mediaplatform::Data *)v6);
  mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a2, (uint64_t)v6, a1);
  mediaplatform::Data::~Data((mediaplatform::Data *)v6);
}

void sub_2150527BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  uint64_t v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    uint64_t v9 = *(char **)(v4 + 8);
    double v8 = (char *)(v4 + 8);
    int v7 = v9;
    if (v8[23] >= 0) {
      int v10 = v8;
    }
    else {
      int v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else {
    std::string __p = *(std::string *)(a1 + 80);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_2150528F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::~DatabaseModelProperty(void **a1)
{
  *a1 = &unk_26C5C7C98;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *a1 = &unk_26C5C7C98;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
}

uint64_t mlcore::ComposerPropertyKeepLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyKeepLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyKeepLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocal(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocal(void)::$_0 &&>>()
{
}

void sub_215052C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<int>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  uint64_t v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    uint64_t v9 = *(char **)(v4 + 8);
    double v8 = (char *)(v4 + 8);
    int v7 = v9;
    if (v8[23] >= 0) {
      int v10 = v8;
    }
    else {
      int v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else {
    std::string __p = *(std::string *)(a1 + 80);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_215052DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<int>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C7E30;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C7E30;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

uint64_t mlcore::ComposerPropertyKeepLocalStatus(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyKeepLocalStatus(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalStatus(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalStatus(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatus(void)::$_0 &&>>()
{
}

void sub_215053160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyKeepLocalStatusReason(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyKeepLocalStatusReason(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalStatusReason(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalStatusReason(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
}

void sub_215053440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyKeepLocalConstraints(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyKeepLocalConstraints(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalConstraints(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalConstraints(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
}

void sub_215053720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyItemCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyItemCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyItemCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyItemCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyItemCount(void)::$_0 &&>>()
{
}

void sub_21505399C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL mlcore::TypedEntityClass<mlcore::Item>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t std::__shared_ptr_emplace<mlcore::Item>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Item>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Item>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Item>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::QueryProperty<long long>::_SQLJoinClauses(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::QueryProperty<long long>::databaseColumn()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "This property has no database column");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215053BF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::QueryProperty<long long>::description(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_215053C88(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::QueryProperty<long long>::~QueryProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C4F50;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C5C4F50;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

uint64_t std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CADA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CADA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ComposerPropertyAlbumCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ComposerPropertyAlbumCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ComposerPropertyAlbumCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyAlbumCount(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyAlbumCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyAlbumCount(void)::$_0 &&>>()
{
}

void sub_215054090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,BOOL,void>(void *a1, uint64_t a2, int a3, uint64_t a4, long long *a5, char *a6)
{
  unint64_t v12 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v12 + 8) = 0u;
  *(void *)unint64_t v12 = &unk_26C5CADA8;
  long long v16 = *a5;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  *a5 = 0u;
  char v14 = *a6;
  std::string v15 = v13;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v12 + 24), a2, a3, a4, (uint64_t *)&v16, v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a1 = v12 + 24;
  a1[1] = v12;
}

double mlcore::Composer::Composer(mlcore::Composer *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8820;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8820;
  return result;
}

void mlcore::Composer::name(mlcore::Composer *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::ComposerPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Entity::valueForProperty<std::string>(std::string *a1, uint64_t a2, mlcore::ModelPropertyBase *a3)
{
  uint64_t v5 = a2 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(a2 + 8), a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(a1, v5, (unint64_t)a3);
}

void sub_2150543FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::Composer::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::ComposerPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Entity::setValueForProperty<std::string>(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2150544CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

mlcore::AccountTable *mlcore::AccountTable::AccountTable(mlcore::AccountTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v33, "account");
  std::string::basic_string[abi:ne180100]<0>(v26, "dsid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v28, (uint64_t)v26, 1);
  std::string::basic_string[abi:ne180100]<0>(v19, "apple_id");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v21, (uint64_t)v19, (uint64_t)v17);
  std::string::basic_string[abi:ne180100]<0>(v10, "alt_dsid");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v12, (uint64_t)v10, (uint64_t)__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v33;
  }
  unint64_t v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v29;
  }
  int v46 = v30;
  unint64_t v44 = &unk_26C5C3878;
  uint64_t v47 = v31;
  int v48 = v32;
  uint64_t v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v40, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = v22;
  }
  int v41 = v23;
  uint64_t v39 = &unk_26C5C3818;
  char v42 = v24;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = v25;
  }
  unint64_t v34 = &unk_26C5C3AF0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v13;
  }
  int v36 = v14;
  unint64_t v34 = &unk_26C5C3818;
  char v37 = v15;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = v16;
  }
  *(void *)this = &unk_26C5BED18;
  char v2 = (std::string *)((char *)this + 8);
  int v3 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v49.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C32F0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v45;
  }
  int v62 = v46;
  uint64_t v60 = &unk_26C5C3878;
  uint64_t v63 = v47;
  int v64 = v48;
  v55 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v40;
  }
  int v57 = v41;
  v55 = &unk_26C5C3818;
  char v58 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v43;
  }
  uint64_t v50 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v35;
  }
  int v52 = v36;
  uint64_t v50 = &unk_26C5C3818;
  char v53 = v37;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v54, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v38;
  }
  char v70 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = __s;
  }
  int v72 = v57;
  char v70 = &unk_26C5C3818;
  char v73 = v58;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = v59;
  }
  std::string v65 = &unk_26C5C3AF0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v66, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v66 = v51;
  }
  int v67 = v52;
  std::string v65 = &unk_26C5C3818;
  char v68 = v53;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = v54;
  }
  int v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = v66;
  }
  int v77 = v67;
  int v75 = &unk_26C5C3818;
  char v78 = v68;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v69;
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 88) = v76;
  }
  *((_DWORD *)this + 28) = v77;
  *((void *)this + 10) = &unk_26C5C3818;
  *((unsigned char *)this + 116) = v78;
  uint64_t v4 = (std::string *)((char *)this + 120);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
    *((void *)this + 17) = *((void *)&v79.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v75);
  *((void *)this + 18) = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 152) = v71;
  }
  *((_DWORD *)this + 44) = v72;
  *((void *)this + 18) = &unk_26C5C3818;
  *((unsigned char *)this + 180) = v73;
  uint64_t v5 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v74.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v65);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v70);
  *((void *)this + 26) = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)((char *)this + 216);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *((void *)this + 29) = *((void *)&v61.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 60) = v62;
  *((void *)this + 26) = &unk_26C5C3878;
  *(void *)((char *)this + 244) = v63;
  *((_DWORD *)this + 63) = v64;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v50);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v55);
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v34);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v39);
  unint64_t v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_74;
    }
  }
  else if ((v3 & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete(v49.__r_.__value_.__l.__data_);
LABEL_74:
  *(void *)this = &unk_26C5C3E20;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 256, (uint64_t)&v28);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 304, (uint64_t)v21);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 368, (uint64_t)v12);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v21);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  int v28 = &unk_26C5C3AF0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C4930;
  return this;
}

void sub_215054FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v78);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v79);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x230]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x270]);
  STACK[0x2B0] = a11;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (*(char *)(v77 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v77);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a74);
  a75 = a12;
  if (a77 < 0) {
    operator delete(a76);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a25);
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a45);
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  a59 = (uint64_t)&unk_26C5C3AF0;
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  _Unwind_Resume(a1);
}

void sub_2150552BC()
{
}

void sub_2150552C4()
{
}

void sub_2150552CC()
{
}

void sub_2150552D4()
{
}

void sub_2150552DC()
{
}

void sub_2150552E4()
{
}

void sub_2150552EC()
{
}

void sub_2150552F4()
{
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_215055378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_2150553E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string>::columnCount()
{
  return 3;
}

void mlcore::AccountTable::~AccountTable(mlcore::AccountTable *this)
{
  mlcore::MediaTable<long long,std::string,std::string>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3E20;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 368);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 304);
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)a1 = &unk_26C5C32F0;
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,std::string,std::string>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C32F0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C32F0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C32F0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::AccountTable::dsidColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 287) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 33), *((void *)this + 34));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 264);
    *(void *)(a2 + 24) = *((void *)this + 35);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 72);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 75);
  *(void *)(a2 + 36) = *(void *)((char *)this + 292);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::AccountTable::appleIDColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 39), *((void *)this + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(void *)(a2 + 24) = *((void *)this + 41);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 84);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 340);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 43), *((void *)this + 44));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    *(void *)(a2 + 56) = *((void *)this + 45);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215055918(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AccountTable::altDSIDColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(void *)(a2 + 24) = *((void *)this + 49);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 100);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 404);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 51), *((void *)this + 52));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(void *)(a2 + 56) = *((void *)this + 53);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215055A28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::Item::~Item(mlcore::Item *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemExtraTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemExtraTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemExtraTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertySortTitle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySortTitle(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySortTitle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySortTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySortTitle(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySortTitle(void)::$_0 &&>>()
{
}

void sub_215055E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyComment(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyComment(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyComment(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComment(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComment(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComment(void)::$_0 &&>>()
{
}

void sub_2150560C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDescription(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDescription(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDescription(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDescription(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDescription(void)::$_0 &&>>()
{
}

void sub_215056358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::LyricsTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::LyricsTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::LyricsTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertyAlbumOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAlbumOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAlbumOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrderSection(void)::$_0 &&>>()
{
}

void sub_2150566B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyArtistOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyArtistOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyArtistOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyArtistOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrderSection(void)::$_0 &&>>()
{
}

void sub_215056990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasArtist(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasArtist(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasArtist(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasArtist(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasArtist(void)::$_0 &&>>()
{
}

void sub_215056BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyItemArtistOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyItemArtistOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyItemArtistOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrderSection(void)::$_0 &&>>()
{
}

void sub_215056E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySeriesNameOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySeriesNameOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySeriesNameOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeriesNameOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrderSection(void)::$_0 &&>>()
{
}

void sub_215057150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyComposerOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyComposerOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyComposerOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComposerOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrderSection(void)::$_0 &&>>()
{
}

void sub_215057430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyGenreOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGenreOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGenreOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenreOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrderSection(void)::$_0 &&>>()
{
}

void sub_215057710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyCloudInMyLibrary(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCloudInMyLibrary(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCloudInMyLibrary(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudInMyLibrary(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudInMyLibrary(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudInMyLibrary(void)::$_0 &&>>()
{
}

void sub_2150579F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemStoreTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemStoreTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemStoreTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::MediaColumn<double>::~MediaColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mlcore::MediaColumn<double>::~MediaColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseColumn<double>::~DatabaseColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumn<double>::~DatabaseColumn(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::DatabaseModelProperty<double>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  uint64_t v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    char v9 = *(char **)(v4 + 8);
    double v8 = (char *)(v4 + 8);
    int v7 = v9;
    if (v8[23] >= 0) {
      int v10 = v8;
    }
    else {
      int v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else {
    std::string __p = *(std::string *)(a1 + 80);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_215057DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<double>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(void *)this = &unk_26C5C7DA8;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C7DA8;
  *((void *)this + 9) = &unk_26C5C3AF0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

uint64_t mlcore::ItemPropertyDiscCount(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDiscCount(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDiscCount(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDiscCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscCount(void)::$_0 &&>>()
{
}

void sub_215058158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyMediaKind(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyMediaKind(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyMediaKind(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaKind(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMediaKind(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaKind(void)::$_0 &&>>()
{
}

void sub_215058438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyKindID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyKindID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyKindID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKindID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKindID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKindID(void)::$_0 &&>>()
{
}

void sub_215058718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsPodcast(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsPodcast(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsPodcast(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPodcast(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPodcast(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPodcast(void)::$_0 &&>>()
{
}

void sub_215058994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsITunesU(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsITunesU(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsITunesU(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsITunesU(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsITunesU(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsITunesU(void)::$_0 &&>>()
{
}

void sub_215058BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyBitRate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyBitRate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyBitRate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBitRate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBitRate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBitRate(void)::$_0 &&>>()
{
}

void sub_215058E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertySampleRate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySampleRate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySampleRate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySampleRate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySampleRate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySampleRate(void)::$_0 &&>>()
{
}

void sub_2150591C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsLocal(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsLocal(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsLocal(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsLocal(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsLocal(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsLocal(void)::$_0 &&>>()
{
}

void sub_215059434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyChosenByAutoFill(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyChosenByAutoFill(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyChosenByAutoFill(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyChosenByAutoFill(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyChosenByAutoFill(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyChosenByAutoFill(void)::$_0 &&>>()
{
}

void sub_2150596A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemStatsTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemStatsTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemStatsTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertySyncRedownloadParameters(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySyncRedownloadParameters(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySyncRedownloadParameters(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySyncRedownloadParameters(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncRedownloadParameters(void)::$_0 &&>>()
{
}

void sub_2150599FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDownloadSourceContainerID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDownloadSourceContainerID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDownloadSourceContainerID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadSourceContainerID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDownloadSourceContainerID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadSourceContainerID(void)::$_0 &&>>()
{
}

void sub_215059CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyPurchaseHistoryToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPurchaseHistoryToken(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryToken(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryToken(void)::$_0 &&>>()
{
}

void sub_215059F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsOTAPurchased(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsOTAPurchased(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsOTAPurchased(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsOTAPurchased(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsOTAPurchased(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsOTAPurchased(void)::$_0 &&>>()
{
}

void sub_21505A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsSubscriptionContent(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsSubscriptionContent(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsSubscriptionContent(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsSubscriptionContent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsSubscriptionContent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsSubscriptionContent(void)::$_0 &&>>()
{
}

void sub_21505A558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyNeedsRestore(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyNeedsRestore(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyNeedsRestore(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyNeedsRestore(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyNeedsRestore(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyNeedsRestore(void)::$_0 &&>>()
{
}

void sub_21505A838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyPlayCountRecent(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyPlayCountRecent(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyPlayCountRecent(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountRecent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPlayCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountRecent(void)::$_0 &&>>()
{
}

void sub_21505AB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasBeenPlayed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasBeenPlayed(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasBeenPlayed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasBeenPlayed(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasBeenPlayed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasBeenPlayed(void)::$_0 &&>>()
{
}

void sub_21505ADF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyBookmarkTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyBookmarkTime(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyBookmarkTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBookmarkTime(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBookmarkTime(void)::$_0 &&>>()
{
}

void sub_21505B0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchTitle(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySearchTitle(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySearchTitle(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchTitle(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchTitle(void)::$_0 &&>>()
{
}

void sub_21505B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance(void)::_sharedInstance;
}

void sub_21505B4E0(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ItemSearchTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemSearchTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemSearchTable **a1)
{
  char v2 = operator new(0x2A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CA7F8;
  double result = mlcore::ItemSearchTable::ItemSearchTable((mlcore::ItemSearchTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemSearchTable *)v2;
  return result;
}

void sub_21505B56C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemSearchTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemSearchTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemSearchTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertySearchAlbum(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySearchAlbum(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySearchAlbum(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchAlbum(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchAlbum(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchAlbum(void)::$_0 &&>>()
{
}

void sub_21505B850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchArtist(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySearchArtist(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySearchArtist(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchArtist(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchArtist(void)::$_0 &&>>()
{
}

void sub_21505BB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchItemArtist(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySearchItemArtist(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySearchItemArtist(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchItemArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchItemArtist(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchItemArtist(void)::$_0 &&>>()
{
}

void sub_21505BE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchComposer(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySearchComposer(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySearchComposer(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchComposer(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchComposer(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchComposer(void)::$_0 &&>>()
{
}

void sub_21505C0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDateSkipped(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDateSkipped(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDateSkipped(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateSkipped(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateSkipped(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateSkipped(void)::$_0 &&>>()
{
}

void sub_21505C3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHidden(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHidden(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHidden(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHidden(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHidden(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHidden(void)::$_0 &&>>()
{
}

void sub_21505C6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDownloadIdentifier(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDownloadIdentifier(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDownloadIdentifier(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadIdentifier(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDownloadIdentifier(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadIdentifier(void)::$_0 &&>>()
{
}

void sub_21505C968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySeasonNumber(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySeasonNumber(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySeasonNumber(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeasonNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeasonNumber(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeasonNumber(void)::$_0 &&>>()
{
}

void sub_21505CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemVideoTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemVideoTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemVideoTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ItemPropertySkipCountRecent(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertySkipCountRecent(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertySkipCountRecent(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountRecent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySkipCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountRecent(void)::$_0 &&>>()
{
}

void sub_21505CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyCategoryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyCategoryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyCategoryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCategoryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCategoryID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCategoryID(void)::$_0 &&>>()
{
}

void sub_21505D280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsCompilation(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsCompilation(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsCompilation(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsCompilation(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsCompilation(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsCompilation(void)::$_0 &&>>()
{
}

void sub_21505D560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyFeedURL(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyFeedURL(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyFeedURL(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFeedURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyFeedURL(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFeedURL(void)::$_0 &&>>()
{
}

void sub_21505D818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackIndex(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAudioTrackIndex(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAudioTrackIndex(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackIndex(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackIndex(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackIndex(void)::$_0 &&>>()
{
}

void sub_21505DAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasAlternateAudio(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasAlternateAudio(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasAlternateAudio(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAlternateAudio(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasAlternateAudio(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAlternateAudio(void)::$_0 &&>>()
{
}

void sub_21505DDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioLanguage(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAudioLanguage(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAudioLanguage(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioLanguage(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioLanguage(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioLanguage(void)::$_0 &&>>()
{
}

void sub_21505E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAudioTrackID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAudioTrackID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackID(void)::$_0 &&>>()
{
}

void sub_21505E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackLocale(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyAudioTrackLocale(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyAudioTrackLocale(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackLocale(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackLocale(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackLocale(void)::$_0 &&>>()
{
}

void sub_21505E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyGlobalID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyGlobalID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyGlobalID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGlobalID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGlobalID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGlobalID(void)::$_0 &&>>()
{
}

void sub_21505E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreItemID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreItemID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreItemID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreItemID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreItemID(void)::$_0 &&>>()
{
}

void sub_21505EBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStorefrontID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStorefrontID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStorefrontID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorefrontID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorefrontID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorefrontID(void)::$_0 &&>>()
{
}

void sub_21505EEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsUserDisabled(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsUserDisabled(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsUserDisabled(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsUserDisabled(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsUserDisabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsUserDisabled(void)::$_0 &&>>()
{
}

void sub_21505F188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreXID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreXID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreXID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreXID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreXID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreXID(void)::$_0 &&>>()
{
}

void sub_21505F440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreFlavor(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreFlavor(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreFlavor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreFlavor(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreFlavor(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreFlavor(void)::$_0 &&>>()
{
}

void sub_21505F6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreExtendedPlaybackAttribute(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::$_0 &&>>()
{
}

void sub_21505F990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsPlayable(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyIsPlayable(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyIsPlayable(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPlayable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPlayable(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPlayable(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_21505FD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasHiFiStreamingAsset(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasHiFiStreamingAsset(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasHiFiStreamingAsset(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasHiFiStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasHiFiStreamingAsset(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasHiFiStreamingAsset(void)::$_0 &&>>()
{
}

void sub_21505FF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasCloudLibraryID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasCloudLibraryID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasCloudLibraryID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasCloudLibraryID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudLibraryID(void)::$_0 &&>>()
{
}

void sub_215060174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyEpisodeID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEpisodeID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEpisodeID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeID(void)::$_0 &&>>()
{
}

void sub_2150603C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDateModified(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyDateModified(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyDateModified(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateModified(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateModified(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateModified(void)::$_0 &&>>()
{
}

void sub_21506067C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyEQPreset(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyEQPreset(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyEQPreset(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEQPreset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEQPreset(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEQPreset(void)::$_0 &&>>()
{
}

void sub_215060934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasAvailableArtwork(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemPropertyHasAvailableArtwork(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ItemPropertyHasAvailableArtwork(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAvailableArtwork(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasAvailableArtwork(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAvailableArtwork(void)::$_0 &&>>()
{
}

void sub_215060B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<int>,std::allocator<mlcore::ComparisonPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::ComparisonOperator,int const&,void>(void *a1, uint64_t a2, int a3, int a4)
{
  double v8 = (char *)operator new(0x48uLL);
  double result = 0.0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)double v8 = &unk_26C5CAB78;
  *((_DWORD *)v8 + 10) = 0;
  *((_DWORD *)v8 + 11) = a3;
  *((void *)v8 + 3) = &unk_26C5C7978;
  *((void *)v8 + 4) = a2;
  *((_DWORD *)v8 + 12) = a4;
  *(_OWORD *)(v8 + 56) = 0u;
  *a1 = v8 + 24;
  a1[1] = v8;
  return result;
}

uint64_t mlcore::ItemPropertySeriesName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  uint64_t v2 = mlcore::ItemArtistPropertySeriesName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyUserAlbumRating(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  uint64_t v2 = mlcore::AlbumPropertyUserRating(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyAlbumTitle(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  uint64_t v2 = mlcore::AlbumPropertyTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyAlbumSortTitle(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  uint64_t v2 = mlcore::AlbumPropertySortTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyAlbumSyncID(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  uint64_t v2 = mlcore::AlbumPropertySyncID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyCategory(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyCategoryID(this);
  uint64_t v2 = mlcore::CategoryPropertyCategory(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyArtistName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  uint64_t v2 = mlcore::ArtistPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyArtistSortName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  uint64_t v2 = mlcore::ArtistPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyArtistStoreID(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  uint64_t v2 = mlcore::ArtistPropertyStoreID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyItemArtistName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  uint64_t v2 = mlcore::ItemArtistPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyItemArtistSortName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  uint64_t v2 = mlcore::ItemArtistPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyComposerName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(this);
  uint64_t v2 = mlcore::ComposerPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyComposerSortName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(this);
  uint64_t v2 = mlcore::ComposerPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::ItemPropertyGenreName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemPropertyGenrePersistentID(this);
  uint64_t v2 = mlcore::GenrePropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::Item::title(mlcore::Item *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (char *)this + 8;
  unint64_t v4 = mlcore::ItemPropertyTitle(this);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(a2, (uint64_t)v3, v4);
}

void mlcore::Item::setTitle(mlcore *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v3 = mlcore::ItemPropertyTitle(a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty((uint64_t)a1 + 8, &__p, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215061288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::Item::fileSize(mlcore::Item *this)
{
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::ItemPropertyFileSize(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

uint64_t mlcore::Entity::valueForProperty<long long>(uint64_t a1, mlcore::ModelPropertyBase *a2)
{
  uint64_t v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(v3, (unint64_t)a2);
}

void sub_215061360(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mlcore::Item::setFileSize(mlcore::Item *this, uint64_t a2)
{
  unint64_t v5 = mlcore::ItemPropertyFileSize(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

double mlcore::Item::totalTime(mlcore::Item *this)
{
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::ItemPropertyTotalTime(this);
  return mlcore::Entity::valueForProperty<double>((uint64_t)this, v2);
}

double mlcore::Entity::valueForProperty<double>(uint64_t a1, mlcore::ModelPropertyBase *a2)
{
  uint64_t v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(v3, (unint64_t)a2);
}

void sub_215061478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double *mlcore::Item::setTotalTime(mlcore::Item *this, double a2)
{
  unint64_t v5 = mlcore::ItemPropertyTotalTime(this);
  double result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>((uint64_t)this + 96, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::isCloudUpdatable()
{
  return 1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::trackForeignOrderingProperty()
{
  return 0;
}

void *mlcore::TypedEntityClass<mlcore::Item>::databaseTablesToDeleteFrom@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  double result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *double result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

void *mlcore::TypedEntityClass<mlcore::Item>::databaseTablesToInsertInto@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  double result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *double result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

mlcore::MLDatabasePropertiesTable *mlcore::MLDatabasePropertiesTable::MLDatabasePropertiesTable(mlcore::MLDatabasePropertiesTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v20, "_MLDatabaseProperties");
  std::string::basic_string[abi:ne180100]<0>(v13, "key");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v15, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v8, (uint64_t)__p, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v31, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v31 = v20;
  }
  uint64_t v26 = &unk_26C5C3AF0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v27, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v27 = v16;
  }
  int v28 = v17;
  uint64_t v26 = &unk_26C5C3818;
  char v29 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v30, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v19;
  }
  unint64_t v21 = &unk_26C5C3AF0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = v9;
  }
  int v23 = v10;
  unint64_t v21 = &unk_26C5C3818;
  char v24 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v12;
  }
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  int v3 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v31.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C30F8;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  char v37 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = v27;
  }
  int v39 = v28;
  char v37 = &unk_26C5C3818;
  char v40 = v29;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v30;
  }
  int v32 = &unk_26C5C3AF0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v22;
  }
  int v34 = v23;
  int v32 = &unk_26C5C3818;
  char v35 = v24;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v25;
  }
  char v42 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = v33;
  }
  int v44 = v34;
  char v42 = &unk_26C5C3818;
  char v45 = v35;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v36;
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v42);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v42);
  *((void *)this + 18) = &unk_26C5C3AF0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 152) = v38;
  }
  *((_DWORD *)this + 44) = v39;
  *((void *)this + 18) = &unk_26C5C3818;
  *((unsigned char *)this + 180) = v40;
  uint64_t v4 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v41.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v32);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v37);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v21);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v26);
  if (v3 < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C3C28;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 208, (uint64_t)v15);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 272, (uint64_t)v8);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v15);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C8240;
  return this;
}

void sub_215061C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  *(void *)(v67 + 144) = v70;
  if (*(char *)(v67 + 175) < 0) {
    operator delete(*v69);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v68);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a67);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 - 208);
  if (*(char *)(v67 + 79) < 0) {
    operator delete(*v71);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v67);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a44);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a52);
  if (a65 < 0) {
    operator delete(__p);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0) {
    operator delete(a10);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a30);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(a1);
}

void sub_215061DFC()
{
}

void sub_215061E04()
{
}

void sub_215061E0C()
{
}

void sub_215061E14()
{
}

void mediaplatform::DatabaseTable<std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_215061E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_215061EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<std::string,std::string>::columnCount()
{
  return 2;
}

void mlcore::MLDatabasePropertiesTable::~MLDatabasePropertiesTable(void **this)
{
  *this = &unk_26C5C3C28;
  uint64_t v2 = (char *)(this + 26);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 34));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v2);
  *this = &unk_26C5C30F8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 18));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  char *v2;
  uint64_t vars8;

  *this = &unk_26C5C3C28;
  uint64_t v2 = (char *)(this + 26);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 34));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v2);
  *this = &unk_26C5C30F8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 18));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

void mediaplatform::DatabaseTable<std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C30F8;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C30F8;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C30F8;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3C28;
  uint64_t v2 = a1 + 208;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 272);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(void *)a1 = &unk_26C5C30F8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3C28;
  uint64_t v2 = a1 + 208;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 272);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(void *)a1 = &unk_26C5C30F8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MLDatabasePropertiesTable::keyColumn(mlcore::MLDatabasePropertiesTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 27), *((void *)this + 28));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 216);
    *(void *)(a2 + 24) = *((void *)this + 29);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 60);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 244);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 31), *((void *)this + 32));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 248);
    *(void *)(a2 + 56) = *((void *)this + 33);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215062438(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::MLDatabasePropertiesTable::valueColumn(mlcore::MLDatabasePropertiesTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 35), *((void *)this + 36));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    *(void *)(a2 + 24) = *((void *)this + 37);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 76);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 308);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 39), *((void *)this + 40));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(void *)(a2 + 56) = *((void *)this + 41);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215062548(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::sql(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
    uint64_t v5 = __p;
    uint64_t v4 = v27;
  }
  else
  {
    uint64_t v4 = (char *)operator new(0x70uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = &unk_26C5C9C98;
    uint64_t v5 = v4 + 24;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_DWORD *)v4 + 16) = 1065353216;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *((_DWORD *)v4 + 26) = 1065353216;
  }
  int v23 = (std::__shared_weak_count *)v4;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 16))(&__p);
  if ((v28 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v7 = v28;
  }
  else {
    uint64_t v7 = (uint64_t)v27;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)p_p, v7);
  std::string v22 = v5;
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *(unsigned int **)(a1 + 24);
  std::string v9 = *(unsigned int **)(a1 + 32);
  if (v8 != v9)
  {
    while (1)
    {
      uint64_t v10 = *v8;
      uint64_t v12 = *((void *)v8 + 1);
      char v11 = (std::__shared_weak_count *)*((void *)v8 + 2);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10 <= 3) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)(&off_26422ECA0)[v10], *(void *)&asc_21511D020[8 * v10]);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 16))(&__p, v12, a2);
      std::string v13 = (v28 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v14 = (v28 & 0x80u) == 0 ? v28 : (uint64_t)v27;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v13, v14);
      if ((char)v28 < 0) {
        break;
      }
      if (v11) {
        goto LABEL_25;
      }
LABEL_26:
      v8 += 6;
      if (v8 == v9) {
        goto LABEL_30;
      }
    }
    operator delete(__p);
    if (!v11) {
      goto LABEL_26;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_26;
  }
LABEL_30:
  if (*(void *)(a1 + 88) != *(void *)(a1 + 80))
  {
    *std::string v22 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ORDER BY ", 10);
    std::string::basic_string[abi:ne180100]<0>(v24, ", ");
    mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>((uint64_t)&__p, (uint64_t **)(a1 + 80), a2, (uint64_t)v24);
    if ((v28 & 0x80u) == 0) {
      std::string v15 = &__p;
    }
    else {
      std::string v15 = __p;
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v16 = v28;
    }
    else {
      uint64_t v16 = (uint64_t)v27;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v15, v16);
    if ((char)v28 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  if (*(void *)(a1 + 48))
  {
    *std::string v22 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" LIMIT ", 7);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 16))(&__p);
    int v17 = (v28 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v18 = (v28 & 0x80u) == 0 ? v28 : (uint64_t)v27;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v17, v18);
    if ((char)v28 < 0) {
      operator delete(__p);
    }
  }
  if (!*(void *)(a1 + 64)
    || ((*std::string v22 = 6,
         std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" OFFSET ", 8),
         (*(void (**)(void **__return_ptr))(**(void **)(a1 + 64) + 16))(&__p),
         (v28 & 0x80u) == 0)
      ? (std::string v19 = &__p)
      : (std::string v19 = __p),
        (v28 & 0x80u) == 0 ? (uint64_t v20 = v28) : (uint64_t v20 = (uint64_t)v27),
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v19, v20),
        ((char)v28 & 0x80000000) == 0))
  {
    if (!a2) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  operator delete(__p);
  if (a2) {
LABEL_59:
  }
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
LABEL_60:
  std::stringbuf::str();
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v29[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v29[1] = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v31);
}

void sub_215062C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

void mediaplatform::SQLCompoundSelectStatement::~SQLCompoundSelectStatement(mediaplatform::SQLCompoundSelectStatement *this)
{
  *(void *)this = &unk_26C5BF238;
  uint64_t v5 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = (void **)((char *)this + 24);
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_26C5BF238;
  uint64_t v5 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = (void **)((char *)this + 24);
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(mediaplatform::SQLSelectCoreStatement *this)
{
  *(void *)this = &unk_26C5BF140;
  *((unsigned char *)this + 8) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_26C5BF140;
  *((unsigned char *)this + 8) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

uint64_t mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(uint64_t a1, void **a2, void *a3)
{
  *(void *)a1 = &unk_26C5BF140;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((void *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = *a3;
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

uint64_t mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_26C5BF140;
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(*a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((void *)(a1 + 16), *(void **)(v4 + 16), *(void **)(v4 + 24), (uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 4);
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = *(void *)(*a2 + 48);
  *(void *)(a1 + 40) = *(void *)(*a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = (void *)*a2;
  }
  uint64_t v7 = v5[8];
  *(void *)(a1 + 56) = v5[7];
  *(void *)(a1 + 64) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = (void *)*a2;
  }
  uint64_t v9 = v5[9];
  uint64_t v8 = v5[10];
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t mediaplatform::SQLSelectCoreStatement::isDistinct(mediaplatform::SQLSelectCoreStatement *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t mediaplatform::SQLSelectCoreStatement::setIsDistinct(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t mediaplatform::SQLSelectCoreStatement::resultColumns(mediaplatform::SQLSelectCoreStatement *this)
{
  return (uint64_t)this + 16;
}

void mediaplatform::SQLSelectCoreStatement::setResultColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

uint64_t mediaplatform::SQLSelectCoreStatement::fromStatement@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectCoreStatement::setFromStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLSelectCoreStatement::whereExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 64);
  *a2 = *(void *)(this + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectCoreStatement::setWhereExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLSelectCoreStatement::groupingExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 80);
  *a2 = *(void *)(this + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectCoreStatement::setGroupingExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = v3;
  *(void *)(a1 + 80) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::SQLSelectStatement::SQLSelectStatement(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5BEE18;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>((void *)(a1 + 8), a2, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8));
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

{
  *(void *)a1 = &unk_26C5BEE18;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>((void *)(a1 + 8), a2, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8));
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>(void *a1, void **a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v8 = operator new(0x70uLL);
  uint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_26C5C9DB0;
  uint64_t v10 = v8 + 3;
  v11[0] = a3;
  v11[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement((uint64_t)(v8 + 3), a2, v11);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_2150632C4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLSelectStatement::isDistinct(mediaplatform::SQLSelectStatement *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 8);
}

uint64_t mediaplatform::SQLSelectStatement::setIsDistinct(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 8) = a2;
  return this;
}

uint64_t mediaplatform::SQLSelectStatement::resultColumns(mediaplatform::SQLSelectStatement *this)
{
  return *((void *)this + 1) + 16;
}

void mediaplatform::SQLSelectStatement::setResultColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(*(void *)(a1 + 8) + 16);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

uint64_t mediaplatform::SQLSelectStatement::fromStatement@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v3 = *(void *)(v2 + 48);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mediaplatform::SQLSelectStatement::whereExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v3 = *(void *)(v2 + 64);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mediaplatform::SQLSelectStatement::groupingExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v3 = *(void *)(v2 + 80);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setGroupingExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 80);
  *(void *)(v2 + 72) = v3;
  *(void *)(v2 + 80) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLSelectStatement::limitExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setLimitExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLSelectStatement::offsetExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setOffsetExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLSelectStatement::orderingTerms(mediaplatform::SQLSelectStatement *this)
{
  return (uint64_t)this + 56;
}

void mediaplatform::SQLSelectStatement::setOrderingTerms(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 56);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

uint64_t mediaplatform::SQLSelectStatement::coreStatement@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mediaplatform::SQLCompoundSelectStatement::SQLCompoundSelectStatement(uint64_t a1, void *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C5BF238;
  *(void *)(a1 + 8) = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = &v8[3 * v9];
    do
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v5;
      v8[1] = *(void *)(v5 + 8);
      uint64_t v10 = *(void *)(v5 + 16);
      v8[2] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v8 += 3;
      v5 += 24;
    }
    while (v5 != v6);
    *(void *)(a1 + 32) = v8;
  }
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

void sub_215063654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&a9);
  char v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::limitExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 56);
  *a2 = *(void *)(this + 48);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLCompoundSelectStatement::setLimitExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLCompoundSelectStatement::offsetExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 72);
  *a2 = *(void *)(this + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::SQLCompoundSelectStatement::setOffsetExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::SQLCompoundSelectStatement::orderingTerms(mediaplatform::SQLCompoundSelectStatement *this)
{
  return (uint64_t)this + 80;
}

void mediaplatform::SQLCompoundSelectStatement::setOrderingTerms(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 80);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

uint64_t mediaplatform::WorkQueue_Dispatch::maximumConcurrency(mediaplatform::WorkQueue_Dispatch *this)
{
  return 1;
}

uint64_t mediaplatform::WorkQueue_Dispatch::type(mediaplatform::WorkQueue_Dispatch *this)
{
  return *((unsigned int *)this + 22);
}

void mediaplatform::WorkQueue_Dispatch::assertIsActiveQueue(dispatch_queue_t *this)
{
}

void mediaplatform::WorkQueue_Dispatch::invokeAfter()
{
}

void sub_2150637EC(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x1020C40A5B76CDFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void mediaplatform::_AsyncDispatcher(mediaplatform *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, a2);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this);
    JUMPOUT(0x2166B26F0);
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void mediaplatform::WorkQueue_Dispatch::invokeAsync()
{
}

void sub_215063998(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x1020C40A5B76CDFLL);
  _Unwind_Resume(a1);
}

void mediaplatform::WorkQueue_Dispatch::resume(mediaplatform::WorkQueue_Dispatch *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  int v3 = *((_DWORD *)this + 18) - 1;
  *((_DWORD *)this + 18) = v3;
  if (!v3) {
    dispatch_resume(*((dispatch_object_t *)this + 10));
  }
  std::mutex::unlock(v2);
}

void mediaplatform::WorkQueue_Dispatch::pause(mediaplatform::WorkQueue_Dispatch *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  int v3 = *((_DWORD *)this + 18);
  if (!v3)
  {
    dispatch_suspend(*((dispatch_object_t *)this + 10));
    int v3 = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v3 + 1;
  std::mutex::unlock(v2);
}

void *mediaplatform::WorkQueue_Dispatch::label@<X0>(dispatch_queue_t *this@<X0>, void *a2@<X8>)
{
  label = (char *)dispatch_queue_get_label(this[10]);
  return std::string::basic_string[abi:ne180100]<0>(a2, label);
}

void mediaplatform::WorkQueue_Dispatch::~WorkQueue_Dispatch(mediaplatform::WorkQueue_Dispatch *this)
{
  *(void *)this = &unk_26C5BEE88;
  dispatch_release(*((dispatch_object_t *)this + 10));
  *((void *)this + 10) = 0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5BEE88;
  dispatch_release(*((dispatch_object_t *)this + 10));
  *((void *)this + 10) = 0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void mediaplatform::WorkQueue::sharedWorkQueue(char *a1@<X0>, int a2@<W1>, uint64_t **a3@<X8>)
{
  if (!a2)
  {
    uint64_t v5 = mediaplatform::WorkQueueManager::sharedInstance((mediaplatform::WorkQueueManager *)a1);
    std::mutex::lock((std::mutex *)v5);
    uint64_t v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 64), a1, (uint64_t)a1);
    std::string v15 = v14[7];
    uint64_t v16 = (std::__shared_weak_count *)v14[8];
    *a3 = v15;
    a3[1] = (uint64_t *)v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15) {
      goto LABEL_23;
    }
    int v17 = (char *)operator new(0x78uLL);
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    *(void *)int v17 = &unk_26C5BF718;
    uint64_t v18 = (uint64_t *)(v17 + 24);
    *((void *)v17 + 3) = &unk_26C5BEE88;
    *((void *)v17 + 4) = 850045863;
    *((void *)v17 + 13) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 84) = 0u;
    *((_DWORD *)v17 + 28) = 0;
    if (a1[23] >= 0) {
      std::string v19 = a1;
    }
    else {
      std::string v19 = *(const char **)a1;
    }
    *((void *)v17 + 13) = dispatch_queue_create(v19, 0);
    *a3 = v18;
    a3[1] = (uint64_t *)v17;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 64), a1, (uint64_t)a1);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
    std::string v13 = (std::__shared_weak_count *)v20[8];
    v20[7] = v18;
    v20[8] = (uint64_t *)v17;
    if (!v13) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v5 = mediaplatform::WorkQueueManager::sharedInstance((mediaplatform::WorkQueueManager *)a1);
  std::mutex::lock((std::mutex *)v5);
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 88), a1, (uint64_t)a1);
  unint64_t v7 = v6[7];
  uint64_t v8 = (std::__shared_weak_count *)v6[8];
  *a3 = v7;
  a3[1] = (uint64_t *)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    uint64_t v9 = (char *)operator new(0x78uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = &unk_26C5BF718;
    uint64_t v10 = (uint64_t *)(v9 + 24);
    *((void *)v9 + 3) = &unk_26C5BEE88;
    *((void *)v9 + 4) = 850045863;
    *((void *)v9 + 13) = 0;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 84) = 0u;
    *((_DWORD *)v9 + 28) = 1;
    if (a1[23] >= 0) {
      char v11 = a1;
    }
    else {
      char v11 = *(const char **)a1;
    }
    *((void *)v9 + 13) = dispatch_queue_create(v11, MEMORY[0x263EF83A8]);
    *a3 = v10;
    a3[1] = (uint64_t *)v9;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 88), a1, (uint64_t)a1);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    std::string v13 = (std::__shared_weak_count *)v12[8];
    v12[7] = v10;
    unsigned char v12[8] = (uint64_t *)v9;
    if (v13) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_23:
  std::mutex::unlock((std::mutex *)v5);
}

void sub_215063E04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::WorkQueueManager::sharedInstance(mediaplatform::WorkQueueManager *this)
{
  {
    operator new();
  }
  return mediaplatform::WorkQueueManager::sharedInstance(void)::__sharedInstance;
}

void sub_215063EF8(_Unwind_Exception *a1)
{
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 1);
  uint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v10, a2)) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    char v11 = operator new(0x48uLL);
    v16[0] = (uint64_t)v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    char v17 = 1;
    *char v11 = 0;
    v11[1] = 0;
    void v11[2] = v7;
    *uint64_t v8 = v11;
    std::string v13 = (uint64_t *)**a1;
    uint64_t v14 = v11;
    if (v13)
    {
      *a1 = v13;
      uint64_t v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100](v16);
  }
  return (uint64_t **)v11;
}

void sub_215064040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(v1 + 64);
      if (v2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (*(char *)(v1 + 55) < 0) {
        operator delete(*(void **)(v1 + 32));
      }
    }
    operator delete((void *)v1);
  }
}

BOOL std::less<std::string>::operator()[abi:ne180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void mediaplatform::WorkQueue::defaultConcurrentQueue(void *a1@<X8>)
{
  {
    operator new();
  }
  uint64_t v3 = *(void *)(mediaplatform::WorkQueue::defaultConcurrentQueue(void)::_concurrentQueue + 8);
  *a1 = *(void *)mediaplatform::WorkQueue::defaultConcurrentQueue(void)::_concurrentQueue;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_215064298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2166B26F0](v15, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::SourceTable *mlcore::SourceTable::SourceTable(mlcore::SourceTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v38, "source");
  std::string::basic_string[abi:ne180100]<0>(v31, "source_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v33, (uint64_t)v31, 1);
  std::string::basic_string[abi:ne180100]<0>(v24, "source_name");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v26, (uint64_t)v24, 0);
  std::string::basic_string[abi:ne180100]<0>(v17, "last_sync_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v19, (uint64_t)v17);
  std::string::basic_string[abi:ne180100]<0>(v10, "last_sync_revision");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v12, (uint64_t)v10);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v38;
  }
  std::string v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v34;
  }
  int v56 = v35;
  std::string v54 = &unk_26C5C3878;
  uint64_t v57 = v36;
  int v58 = v37;
  std::string v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v27;
  }
  int v51 = v28;
  std::string v49 = &unk_26C5C3818;
  char v52 = v29;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = v30;
  }
  int v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v20;
  }
  int v46 = v21;
  int v44 = &unk_26C5C3878;
  uint64_t v47 = v22;
  int v48 = v23;
  int v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v13;
  }
  int v41 = v14;
  int v39 = &unk_26C5C3878;
  uint64_t v42 = v15;
  int v43 = v16;
  *(void *)this = &unk_26C5BED18;
  int v2 = (std::string *)((char *)this + 8);
  int v9 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v59.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3440;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v75 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = __s;
  }
  int v77 = v56;
  int v75 = &unk_26C5C3878;
  uint64_t v78 = v57;
  int v79 = v58;
  uint64_t v70 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = v50;
  }
  int v72 = v51;
  uint64_t v70 = &unk_26C5C3818;
  char v73 = v52;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = v53;
  }
  std::string v65 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v66, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v66 = v45;
  }
  int v67 = v46;
  std::string v65 = &unk_26C5C3878;
  uint64_t v68 = v47;
  int v69 = v48;
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = __p;
  }
  int v62 = v41;
  uint64_t v60 = &unk_26C5C3878;
  uint64_t v63 = v42;
  int v64 = v43;
  v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v91, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = v71;
  }
  int v92 = v72;
  v90 = &unk_26C5C3818;
  char v93 = v73;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v94, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else {
    std::string v94 = v74;
  }
  v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v66;
  }
  int v87 = v67;
  v85 = &unk_26C5C3878;
  uint64_t v88 = v68;
  int v89 = v69;
  std::string v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v61;
  }
  int v82 = v62;
  std::string v80 = &unk_26C5C3878;
  uint64_t v83 = v63;
  int v84 = v64;
  v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v101, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v101 = v86;
  }
  int v102 = v87;
  v100 = &unk_26C5C3878;
  uint64_t v103 = v88;
  int v104 = v89;
  v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v96, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v96 = v81;
  }
  int v3 = v82;
  int v97 = v82;
  v95 = &unk_26C5C3878;
  uint64_t v98 = v83;
  int v99 = v84;
  v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v106, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
    int v3 = v97;
  }
  else
  {
    std::string v106 = v96;
  }
  int v107 = v3;
  v105 = &unk_26C5C3878;
  uint64_t v108 = v98;
  int v109 = v99;
  *((void *)this + 10) = &unk_26C5C3AF0;
  char v4 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
    int v3 = v107;
    char v4 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v106;
  }
  *((_DWORD *)this + 28) = v3;
  *((void *)this + 10) = &unk_26C5C3878;
  *(void *)((char *)this + 116) = v108;
  *((_DWORD *)this + 31) = v109;
  v105 = &unk_26C5C3AF0;
  if (v4 < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  size_t v5 = (std::string *)((char *)this + 136);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
    *((void *)this + 19) = *((void *)&v101.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v102;
  *((void *)this + 16) = &unk_26C5C3878;
  *(void *)((char *)this + 164) = v103;
  *((_DWORD *)this + 43) = v104;
  v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 184) = v91;
  }
  *((_DWORD *)this + 52) = v92;
  *((void *)this + 22) = &unk_26C5C3818;
  *((unsigned char *)this + 212) = v93;
  size_t v6 = (std::string *)((char *)this + 216);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
    *((void *)this + 29) = *((void *)&v94.__r_.__value_.__l + 2);
  }
  std::string v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v90);
  *((void *)this + 30) = &unk_26C5C3AF0;
  int v7 = (std::string *)((char *)this + 248);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *((void *)this + 33) = *((void *)&v76.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 68) = v77;
  *((void *)this + 30) = &unk_26C5C3878;
  *(void *)((char *)this + 276) = v78;
  *((_DWORD *)this + 71) = v79;
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  std::string v65 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v70);
  int v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  int v39 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v49);
  std::string v54 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C3F70;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 288, (uint64_t)&v33);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 336, (uint64_t)v26);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 400, (uint64_t)&v19);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 448, (uint64_t)&v12);
  uint64_t v12 = &unk_26C5C3AF0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v19 = &unk_26C5C3AF0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v26);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  std::string v33 = &unk_26C5C3AF0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C48F8;
  return this;
}

void sub_2150651A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v83);
  STACK[0x2B0] = a18;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  STACK[0x2E0] = a19;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x310]);
  STACK[0x350] = a20;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (*(char *)(v82 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v82);
  a78 = a21;
  if (a80 < 0) {
    operator delete(a79);
  }
  a81 = a22;
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a82);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x220]);
  STACK[0x260] = a23;
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a60);
  if (a59 < 0) {
    operator delete(a54);
  }
  a73 = (uint64_t)&unk_26C5C3AF0;
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  _Unwind_Resume(a1);
}

void sub_215065588()
{
}

void sub_215065590()
{
}

void sub_215065598()
{
}

void sub_2150655A0()
{
}

void sub_2150655A8()
{
}

void sub_2150655B0()
{
}

void sub_2150655B8()
{
}

void sub_2150655C0()
{
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  size_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_215065644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_2150656C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,long long,long long>::columnCount()
{
  return 4;
}

void mlcore::SourceTable::~SourceTable(mlcore::SourceTable *this)
{
  mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3F70;
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)a1 = &unk_26C5C3440;
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3440;
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3440;
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3440;
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::SourceTable::persistentIDColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 37), *((void *)this + 38));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 296);
    *(void *)(a2 + 24) = *((void *)this + 39);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 80);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 83);
  *(void *)(a2 + 36) = *(void *)((char *)this + 324);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::SourceTable::sourceNameColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 43), *((void *)this + 44));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    *(void *)(a2 + 24) = *((void *)this + 45);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 92);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 372);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(void *)(a2 + 56) = *((void *)this + 49);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215065E20(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SourceTable::lastSyncDateColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 51), *((void *)this + 52));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(void *)(a2 + 24) = *((void *)this + 53);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 108);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 111);
  *(void *)(a2 + 36) = *(void *)((char *)this + 436);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::SourceTable::lastSyncRevisionColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((void *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(void *)(a2 + 24) = *((void *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 123);
  *(void *)(a2 + 36) = *(void *)((char *)this + 484);
  *(void *)a2 = &unk_26C5C47E8;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
}

uint64_t std::__shared_ptr_emplace<mlcore::CloudKVSTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::CloudKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C5CA520;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C5190;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150662C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::CloudKVSEntity::~CloudKVSEntity(mlcore::CloudKVSEntity *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::CloudKVSEntityPropertyKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyKey(void)::once, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyKey(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyKey(void)::$_0 &&>>()
{
}

void sub_215066690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::once, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::$_0 &&>>()
{
}

void sub_21506694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::once, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::$_0 &&>>()
{
}

void sub_215066C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::CloudKVSEntity::key(mlcore::CloudKVSEntity *this@<X0>, std::string *a2@<X8>)
{
  char v4 = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyKey(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::CloudKVSEntity::setEntityKey(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::CloudKVSEntityPropertyKey(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::CloudKVSEntity::playCount(mlcore::CloudKVSEntity *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyPlayCount(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::CloudKVSEntity::setPlayCount(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  unint64_t v5 = mlcore::CloudKVSEntityPropertyPlayCount(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::hasBeenPlayed(mlcore::CloudKVSEntity *this)
{
  HasBeenPlayed = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyHasBeenPlayed(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, HasBeenPlayed);
}

void *mlcore::CloudKVSEntity::setHasBeenPlayed(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  unint64_t HasBeenPlayed = mlcore::CloudKVSEntityPropertyHasBeenPlayed(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, HasBeenPlayed, &HasBeenPlayed);
  result[3] = a2;
  return result;
}

double mlcore::CloudKVSEntity::bookmarkTime(mlcore::CloudKVSEntity *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyBookmarkTime(this);
  return mlcore::Entity::valueForProperty<double>((uint64_t)this, v2);
}

double *mlcore::CloudKVSEntity::setBookmarkTime(mlcore::CloudKVSEntity *this, double a2)
{
  unint64_t v5 = mlcore::CloudKVSEntityPropertyBookmarkTime(this);
  __n128 result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>((uint64_t)this + 96, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::bookmarkSyncTimestamp(mlcore::CloudKVSEntity *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::CloudKVSEntity::setBookmarkSyncTimestamp(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  unint64_t v5 = mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::bookmarkSyncRevision(mlcore::CloudKVSEntity *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::CloudKVSEntity::setBookmarkSyncRevision(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  unint64_t v5 = mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

mlcore::ContainerSeedTable *mlcore::ContainerSeedTable::ContainerSeedTable(mlcore::ContainerSeedTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v29, "container_seed");
  std::string::basic_string[abi:ne180100]<0>(v22, "container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v24, (uint64_t)v22, 1);
  std::string::basic_string[abi:ne180100]<0>(v15, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v17, (uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(v9, "seed_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v11, (uint64_t)v9, 0);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v44, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v44 = v29;
  }
  int v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v40, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = v25;
  }
  int v41 = v26;
  int v39 = &unk_26C5C3878;
  uint64_t v42 = v27;
  int v43 = v28;
  std::string v34 = &unk_26C5C3AF0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v18;
  }
  int v36 = v19;
  std::string v34 = &unk_26C5C3878;
  uint64_t v37 = v20;
  int v38 = v21;
  std::string v30 = &unk_26C5C3AF0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v31, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string v31 = v12;
  }
  int v32 = v13;
  std::string v30 = &unk_26C5C3858;
  uint64_t v33 = v14;
  *(void *)this = &unk_26C5BED18;
  char v2 = (std::string *)((char *)this + 8);
  int v8 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v44.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3718;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::string v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v55, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v55 = v40;
  }
  int v56 = v41;
  std::string v54 = &unk_26C5C3878;
  uint64_t v57 = v42;
  int v58 = v43;
  std::string v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v35;
  }
  int v51 = v36;
  std::string v49 = &unk_26C5C3878;
  uint64_t v52 = v37;
  int v53 = v38;
  std::string v45 = &unk_26C5C3AF0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v31;
  }
  int v47 = v32;
  std::string v45 = &unk_26C5C3858;
  uint64_t v48 = v33;
  uint64_t v63 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = __s;
  }
  int v65 = v51;
  uint64_t v63 = &unk_26C5C3878;
  uint64_t v66 = v52;
  int v67 = v53;
  std::string v59 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = __p;
  }
  int v3 = v47;
  int v61 = v47;
  std::string v59 = &unk_26C5C3858;
  uint64_t v4 = v48;
  uint64_t v62 = v48;
  uint64_t v68 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v69, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    int v3 = v61;
    uint64_t v4 = v62;
  }
  else
  {
    std::string v69 = v60;
  }
  int v70 = v3;
  uint64_t v68 = &unk_26C5C3858;
  uint64_t v71 = v4;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v68);
  uint64_t v68 = &unk_26C5C3AF0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)((char *)this + 136);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *((void *)this + 19) = *((void *)&v64.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v65;
  *((void *)this + 16) = &unk_26C5C3878;
  *(void *)((char *)this + 164) = v66;
  *((_DWORD *)this + 43) = v67;
  std::string v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  uint64_t v63 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  *((void *)this + 22) = &unk_26C5C3AF0;
  size_t v6 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v55.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v56;
  *((void *)this + 22) = &unk_26C5C3878;
  *(void *)((char *)this + 212) = v57;
  *((_DWORD *)this + 55) = v58;
  std::string v45 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v49 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::string v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::string v30 = &unk_26C5C3AF0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  std::string v34 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  int v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C4248;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 224, (uint64_t)&v24);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 272, (uint64_t)&v17);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 320, (uint64_t)&v11);
  char v11 = &unk_26C5C3AF0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  char v17 = &unk_26C5C3AF0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  char v24 = &unk_26C5C3AF0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C7798;
  return this;
}

void sub_215067954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v81);
  if (a80 < 0) {
    operator delete(__p);
  }
  STACK[0x210] = a12;
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  STACK[0x240] = a13;
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (*(char *)(v80 + 79) < 0) {
    operator delete(*a9);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v80);
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  _Unwind_Resume(a1);
}

void sub_215067C38()
{
}

void sub_215067C40()
{
}

void sub_215067C48()
{
}

void sub_215067C50()
{
}

void sub_215067C58()
{
}

void sub_215067C60()
{
}

void mediaplatform::DatabaseTable<long long,long long,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  unint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_215067CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_215067D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,int>::columnCount()
{
  return 3;
}

void mlcore::ContainerSeedTable::~ContainerSeedTable(mlcore::ContainerSeedTable *this)
{
  mlcore::MediaTable<long long,long long,int>::~MediaTable(this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,long long,int>::~MediaTable(mediaplatform::DatabaseTableBase *this)
{
  *(void *)this = &unk_26C5C4248;
  *((void *)this + 40) = &unk_26C5C3AF0;
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 34) = &unk_26C5C3AF0;
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 28) = &unk_26C5C3AF0;
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  *(void *)this = &unk_26C5C3718;
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mediaplatform::DatabaseTable<long long,long long,int>::~DatabaseTable(mediaplatform::DatabaseTableBase *this)
{
  *(void *)this = &unk_26C5C3718;
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3718;
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3718;
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mlcore::MediaTable<long long,long long,int>::~MediaTable(mediaplatform::DatabaseTableBase *a1)
{
  mlcore::MediaTable<long long,long long,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::ContainerSeedTable::persistentIDColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 29), *((void *)this + 30));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
    *(void *)(a2 + 24) = *((void *)this + 31);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 64);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 67);
  *(void *)(a2 + 36) = *(void *)((char *)this + 260);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerSeedTable::itemPersistentIDColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 35), *((void *)this + 36));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    *(void *)(a2 + 24) = *((void *)this + 37);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 76);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 79);
  *(void *)(a2 + 36) = *(void *)((char *)this + 308);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerSeedTable::seedOrderColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 351) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 41), *((void *)this + 42));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 328);
    *(void *)(a2 + 24) = *((void *)this + 43);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 88);
  *(void *)(a2 + 36) = *(void *)((char *)this + 356);
  *(void *)a2 = &unk_26C5C47C8;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  int v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
  {
    return mlcore::ItemPropertyTitleOrderSection(v3);
  }
  else
  {
    uint64_t v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
    if (v4 == a2)
    {
      return mlcore::ItemPropertyAlbumOrderSection(v4);
    }
    else
    {
      unint64_t v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
      if (v5 == a2)
      {
        return mlcore::ItemPropertyArtistOrderSection(v5);
      }
      else
      {
        size_t v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
        if (v6 == a2)
        {
          return mlcore::ItemPropertyComposerOrderSection(v6);
        }
        else
        {
          int v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
          if (v7 == a2)
          {
            return mlcore::ItemPropertyGenreOrderSection(v7);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::representativeItemPersistentIDProperty()
{
  return 0;
}

void *mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTablesToInsertInto@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  __n128 result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *__n128 result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

void *mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTablesToDeleteFrom@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  __n128 result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *__n128 result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::PodcastEpisode>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::entityType()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::PodcastEpisode>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_26C5CA6A8;
  mlcore::Item::Item((mlcore::Item *)(v8 + 3), a2);
  v8[3] = &unk_26C5C5348;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_21506885C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::PodcastEpisode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PodcastEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PodcastEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::PodcastEpisode>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::PodcastEpisode::~PodcastEpisode(mlcore::PodcastEpisode *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

void mlcore::PodcastEpisode::PodcastEpisode(mlcore::PodcastEpisode *this, uint64_t a2)
{
  mlcore::Item::Item(this, a2);
  *uint64_t v2 = &unk_26C5C5348;
}

{
  void *v2;

  mlcore::Item::Item(this, a2);
  *uint64_t v2 = &unk_26C5C5348;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  HasName = (mlcore *)mlcore::ArtistPropertyOrder(a1);
  if (HasName != a2)
  {
    HasName = (mlcore *)mlcore::ArtistPropertyHasName(HasName);
    if (HasName != a2) {
      return 0;
    }
  }
  return mlcore::ArtistPropertyOrderSection(HasName);
}

uint64_t mlcore::ArtistPropertyOrderSection(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyOrderSection(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyOrderSection(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrderSection(void)::$_0 &&>>()
{
}

void sub_215068D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Artist>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Artist>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Artist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::entityType()
{
  return 7;
}

double mlcore::TypedEntityClass<mlcore::Artist>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(v10, a2);
  double v8 = v10[0];
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache(*(void *)&v10[0] + 8, a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(void *)&v8 + 176, v11[0], v11)[3] = a2;
  double result = v10[0];
  *a4 = *(_OWORD *)v10;
  return result;
}

void sub_215068FDC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x100uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C5CB0F0;
  double result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((void *)v4 + 4) = &unk_26C5C4EE8;
  *((void *)v4 + 30) = &unk_26C5C4F10;
  *((void *)v4 + 31) = a2;
  *((void *)v4 + 3) = &unk_26C5C8538;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::Artist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Artist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Artist::~Artist(mlcore::Artist *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::ArtistPropertySortName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertySortName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertySortName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertySortName(void)::$_0 &&>>()
{
}

void sub_2150694A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtistPropertyNameOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyNameOrder(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyNameOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyNameOrder(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyNameOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyNameOrder(void)::$_0 &&>>()
{
}

void sub_215069760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtistPropertyGroupingKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtistPropertyGroupingKey(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtistPropertyGroupingKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyGroupingKey(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyGroupingKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyGroupingKey(void)::$_0 &&>>()
{
}

void sub_215069A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::Artist::Artist(mlcore::Artist *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8538;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8538;
  return result;
}

void mlcore::Artist::name(mlcore::Artist *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::ArtistPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artist::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::ArtistPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::CategoryPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CategoryPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CategoryPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::CategoryPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_215069FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance(void)::_sharedInstance;
}

void sub_21506A108(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::CategoryTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore13CategoryTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::CategoryTable **a1)
{
  char v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CA3D0;
  double result = mlcore::CategoryTable::CategoryTable((mlcore::CategoryTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::CategoryTable *)v2;
  return result;
}

void sub_21506A194(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::CategoryTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::CategoryTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::CategoryTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Category>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Category>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Category>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Category>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  double v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)double v8 = &unk_26C5CB278;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C87D0;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_21506A4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Category>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Category>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Category>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Category>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Category::~Category(mlcore::Category *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::CategoryPropertyCategory(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::CategoryPropertyCategory(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::CategoryPropertyCategory(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyCategory(void)::$_0 &&>>);
  }
  return mlcore::CategoryPropertyCategory(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyCategory(void)::$_0 &&>>()
{
}

void sub_21506A888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::Category::Category(mlcore::Category *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C87D0;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C87D0;
  return result;
}

void mlcore::Category::category(mlcore::Category *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::CategoryPropertyCategory(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Category::setCategory(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::CategoryPropertyCategory(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

double mediaplatform::FormatOptions::FormatOptions(mediaplatform::FormatOptions *this)
{
  *(void *)this = 2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  *(void *)&double result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

{
  double result;

  *(void *)this = 2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  *(void *)&double result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

void sub_21506AF48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatPointerImplementation(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3 = a2;
  v4[0] = &v3;
  v4[1] = a1;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string,unsigned long>((std::string *)"<{0}: {1:x}>", a3, 0, (uint64_t)v4);
}

void sub_21506B0FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,unsigned long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v9 = a1;
  std::string::size_type v10 = a3;
  while (v9->__r_.__value_.__s.__data_[0] != 123)
  {
    if (!v9->__r_.__value_.__s.__data_[0])
    {
      std::string::resize(a2, v10, 0);
      if (v10 != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, v10 - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v10;
    int v9 = (std::string *)((char *)v9 + 1);
  }
  int v11 = v9->__r_.__value_.__s.__data_[1];
  if (v11 == 123)
  {
    char v8 = 1;
    int v9 = (std::string *)((char *)v9 + 1);
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    int v51 = &v9->__r_.__value_.__s.__data_[2];
    int v39 = v9->__r_.__value_.__s.__data_[2];
    if ((v39 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v40 = 0;
      int v41 = &v9->__r_.__value_.__s.__data_[3];
      do
      {
        uint64_t v42 = v41;
        int v51 = v41;
        uint64_t v40 = (v39 - 48) + 10 * v40;
        ++v41;
        int v44 = *v42;
        int v43 = (unsigned __int8 *)(v42 - 1);
        int v39 = v44;
      }
      while ((v44 - 58) >= 0xFFFFFFF6);
      int v51 = (char *)(v43 + 2);
      if (*(v41 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(v40);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v51 = (char *)v9;
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v46, (const char **)&v51);
  std::string v12 = v51;
  if (v47)
  {
    if (v47 != 1) {
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,unsigned long>>();
    }
    unint64_t v13 = **(void **)a4;
    uint64_t v14 = &v46;
    uint64_t v52 = &v46;
    uint64_t v57 = 0;
    char v58 = 1;
    switch(HIDWORD(v46))
    {
      case 0:
        uint64_t v15 = 71;
        do
        {
          *((unsigned char *)&v52 + v15--) = (v13 % 0xA) | 0x30;
          BOOL v16 = v13 >= 0xA;
          v13 /= 0xAuLL;
        }
        while (v16);
        goto LABEL_40;
      case 1:
        uint64_t v15 = 71;
        do
        {
          *((unsigned char *)&v52 + v15--) = v13 & 7 | 0x30;
          BOOL v16 = v13 >= 8;
          v13 >>= 3;
        }
        while (v16);
        goto LABEL_40;
      case 2:
        int v21 = &mediaplatform::TypeFormatterUpperHexMapping;
        if (!BYTE3(v50)) {
          int v21 = &mediaplatform::TypeFormatterLowerHexMapping;
        }
        uint64_t v15 = 71;
        do
        {
          *((unsigned char *)&v52 + v15--) = v21[v13 & 0xF];
          BOOL v16 = v13 >= 0x10;
          v13 >>= 4;
        }
        while (v16);
        goto LABEL_40;
      case 3:
        uint64_t v15 = 71;
        do
        {
          *((unsigned char *)&v52 + v15--) = v13 & 1 | 0x30;
          BOOL v16 = v13 >= 2;
          v13 >>= 1;
        }
        while (v16);
LABEL_40:
        uint64_t v22 = v15 - 7;
        uint64_t v57 = v15 - 7;
        uint64_t v14 = v52;
        BOOL v23 = v58 == 0;
        if (!v58) {
          goto LABEL_44;
        }
        goto LABEL_43;
      default:
        BOOL v23 = 0;
        uint64_t v22 = 0;
LABEL_43:
        if (*((unsigned char *)v14 + 48)) {
LABEL_44:
        }
          uint64_t v24 = 65;
        else {
          uint64_t v24 = 64;
        }
        unint64_t v25 = v24 - v22;
        if (*((unsigned char *)v14 + 50) && v25 <= v14[3]) {
          unint64_t v25 = v14[3];
        }
        unint64_t v26 = *((void *)&v48 + 1);
        if (*((void *)&v48 + 1) <= v25) {
          unint64_t v26 = v25;
        }
        if ((_BYTE)v48) {
          unint64_t v25 = v26;
        }
        mediaplatform::FormatImplementation<std::string,unsigned long>(v12, a2, v25 + v10, a4);
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = (char *)a2;
        }
        else {
          uint64_t v27 = (char *)a2->__r_.__value_.__r.__words[0];
        }
        if (v23 || *((unsigned char *)v14 + 48)) {
          uint64_t v28 = 65;
        }
        else {
          uint64_t v28 = 64;
        }
        std::string v29 = &v27[v10];
        unint64_t v30 = v28 - v22;
        if (*((unsigned char *)v14 + 50) && v30 <= v14[3]) {
          unint64_t v30 = v14[3];
        }
        if (!(_BYTE)v48) {
          goto LABEL_69;
        }
        uint64_t v31 = *((void *)&v48 + 1);
        unint64_t v32 = *((void *)&v48 + 1) - v30;
        if (*((void *)&v48 + 1) <= v30) {
          goto LABEL_69;
        }
        if (v46)
        {
          if (v46 == 1)
          {
            unint64_t v33 = v32 >> 1;
            if (v32 >= 2)
            {
              if (v33 <= 1) {
                uint64_t v34 = 1;
              }
              else {
                uint64_t v34 = v32 >> 1;
              }
              do
              {
                *v29++ = BYTE4(v50);
                --v34;
              }
              while (v34);
            }
            mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, v29);
            if (v32 != v33)
            {
              unint64_t v35 = v32 - (v32 >> 1);
              int v36 = &v29[v30];
              if (v35 <= 1) {
                unint64_t v35 = 1;
              }
              uint64_t v37 = -(uint64_t)v35;
              do
              {
                *v36++ = BYTE4(v50);
                BOOL v16 = __CFADD__(v37++, 1);
              }
              while (!v16);
            }
          }
          else if (v46 == 2)
          {
            if (*((void *)&v48 + 1) != v30)
            {
              do
              {
                *v29++ = BYTE4(v50);
                --v32;
              }
              while (v32);
            }
LABEL_69:
            mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, v29);
          }
        }
        else
        {
          mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, &v27[v10]);
          if (v31 != v30)
          {
            int v38 = &v27[v30];
            do
            {
              v38[v10] = BYTE4(v50);
              ++v38;
              --v32;
            }
            while (v32);
          }
        }
        break;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a4 + 8);
    uint64_t v52 = (unint64_t *)v17;
    long long v53 = v46;
    long long v54 = v48;
    long long v55 = v49;
    uint64_t v56 = v50;
    if (*(char *)(v17 + 23) < 0) {
      unint64_t v18 = *(void *)(v17 + 8);
    }
    else {
      unint64_t v18 = *(unsigned __int8 *)(v17 + 23);
    }
    unint64_t v19 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) <= v18) {
      unint64_t v19 = v18;
    }
    if ((_BYTE)v48) {
      unint64_t v18 = v19;
    }
    mediaplatform::FormatImplementation<std::string,unsigned long>(v51, a2, v18 + v10, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = (char *)a2;
    }
    else {
      uint64_t v20 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v46, &v20[v10], (uint64_t)&v52);
  }
  if (v10 != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, v10 - a3, v8 & 1);
  }
}

void sub_21506B694(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(a1);
}

void sub_21506B714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,unsigned long>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21506B770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,unsigned long>();
}

void sub_21506B7D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,unsigned long>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21506B834(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::Artwork>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Artwork>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance(void)::_sharedInstance;
}

void sub_21506BA08(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ArtworkTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ArtworkTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ArtworkTable **a1)
{
  char v2 = operator new(0x2C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CA210;
  double result = mlcore::ArtworkTable::ArtworkTable((mlcore::ArtworkTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ArtworkTable *)v2;
  return result;
}

void sub_21506BA94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ArtworkTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ArtworkTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ArtworkTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Artwork>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Artwork>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  char v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_26C5CB208;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C8718;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_21506BD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Artwork>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Artwork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Artwork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Artwork>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Artwork::~Artwork(mlcore::Artwork *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::ArtworkPropertyToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkPropertyToken(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtworkPropertyToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyToken(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyToken(void)::$_0 &&>>()
{
}

void sub_21506C154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertyType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkPropertyType(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtworkPropertyType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyType(void)::$_0 &&>>()
{
}

void sub_21506C410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertySourceType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkPropertySourceType(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtworkPropertySourceType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertySourceType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertySourceType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertySourceType(void)::$_0 &&>>()
{
}

void sub_21506C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertyRelativePath(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkPropertyRelativePath(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::ArtworkPropertyRelativePath(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyRelativePath(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyRelativePath(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyRelativePath(void)::$_0 &&>>()
{
}

void sub_21506C9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::Artwork::artworkToken(mlcore::Artwork *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::ArtworkPropertyToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artwork::setArtworkToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::ArtworkPropertyToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Artwork::artworkType(mlcore::Artwork *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkPropertyType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::Artwork::setArtworkType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::ArtworkPropertyType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::Artwork::artworkSourceType(mlcore::Artwork *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkPropertySourceType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::Artwork::setArtworkSourceType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::ArtworkPropertySourceType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

void mlcore::Artwork::relativePath(mlcore::Artwork *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::ArtworkPropertyRelativePath(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artwork::setRelativePath(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::ArtworkPropertyRelativePath(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Artwork::sourceTypeFromTrackSource(int a1)
{
  if ((a1 - 1) >= 5) {
    return 0;
  }
  else {
    return (100 * (a1 - 1) + 200);
  }
}

void mediaplatform::DBCPSubpool::~DBCPSubpool(mediaplatform::DBCPSubpool *this)
{
  mediaplatform::DBCPSubpool::~DBCPSubpool(this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_26C5BEA08;
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*((void **)this + 28));
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*((void **)this + 25));
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 20);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 12);
  dispatch_release(*((dispatch_object_t *)this + 11));
  *((void *)this + 5) = &unk_26C5BF338;
  std::string::size_type v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_26C5BF208;
  char v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void mediaplatform::WorkQueueDispatchTarget::~WorkQueueDispatchTarget(mediaplatform::WorkQueueDispatchTarget *this)
{
  *(void *)this = &unk_26C5BF208;
  char v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26C5BF208;
  char v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::SerialDispatchTarget::~SerialDispatchTarget(mediaplatform::SerialDispatchTarget *this)
{
  *(void *)this = &unk_26C5BF208;
  char v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::DatabaseConnectionPool::~DatabaseConnectionPool(mediaplatform::DatabaseConnectionPool *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::~__value_func[abi:ne180100]((void *)this + 4);
  *(void *)this = &unk_26C5BF338;
  std::string::size_type v4 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t mediaplatform::DatabaseConnectionPool::maxConcurrentReadersCount(mediaplatform::DatabaseConnectionPool *this)
{
  return *(void *)(*((void *)this + 8) + 72);
}

uint64_t mediaplatform::DatabaseConnectionPool::maxConcurrentWritersCount(mediaplatform::DatabaseConnectionPool *this)
{
  return *(void *)(*((void *)this + 10) + 72);
}

uint64_t mediaplatform::DatabaseConnectionPool::delegateCallbacks(mediaplatform::DatabaseConnectionPool *this)
{
  return *((void *)this + 10) + 96;
}

void mediaplatform::DatabaseConnectionPool::setDelegateCallbacks(mediaplatform::DBCPSubpool **this, const mediaplatform::DatabaseConnectionCallbacks *a2)
{
  mediaplatform::DBCPSubpool::setDelegateCallbacks(this[10], a2);
  std::string::size_type v4 = this[8];
  mediaplatform::DBCPSubpool::setDelegateCallbacks(v4, a2);
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool20setDelegateCallbacksERKNS_27DatabaseConnectionCallbacksEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5BF4D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_26C5BF4D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void mediaplatform::DatabaseConnectionPool::readerConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, void *a2@<X8>)
{
}

uint64_t mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0::~$_0(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform22DatabaseConnectionPool19_checkoutConnectionEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool17checkinConnectionENSt3__110shared_ptrINS_18DatabaseConnectionEEEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5BF3D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_26C5BF3D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5BF3D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5BF3D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_26C5BF5E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::__clone(void *a1)
{
  __n128 result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_26C5BF5E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5BF5E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5BF5E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool18checkoutConnectionERKNSt3__18functionIFNS3_10shared_ptrINS_18DatabaseConnectionEEERKNS_8FilePathEbEEEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5BF428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C5BF428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void mediaplatform::DatabaseConnectionPool::writerConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, void *a2@<X8>)
{
}

void mediaplatform::DatabaseConnectionPool::closeAllConnections(mediaplatform::DBCPSubpool **this)
{
  mediaplatform::DBCPSubpool::closeAllConnections(this[8]);
  uint64_t v2 = this[10];
  mediaplatform::DBCPSubpool::closeAllConnections(v2);
}

void mediaplatform::DBCPSubpool::closeAllConnections(mediaplatform::DBCPSubpool *this)
{
  v4[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 24))(&v2);
  v4[0] = &unk_26C5BF480;
  v4[1] = this;
  v4[3] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_21506D804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool19closeAllConnectionsEvE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>((uint64_t *)&v7, *(void *)(a1 + 8) + 192, *(void *)(a1 + 8) + 216);
  uint64_t v1 = v7;
  if (v7 != v8)
  {
    do
    {
      uint64_t v2 = (mediaplatform::DatabaseConnection *)v1[4];
      uint64_t v3 = (std::__shared_weak_count *)v1[5];
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      mediaplatform::DatabaseConnection::close(v2);
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      uint64_t v4 = v1[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = (void **)v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void **)v1[2];
          BOOL v6 = *v5 == v1;
          uint64_t v1 = v5;
        }
        while (!v6);
      }
      uint64_t v1 = v5;
    }
    while (v5 != v8);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(v8[0]);
}

void sub_21506D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5BF480;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C5BF480;
  result[1] = v3;
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void mlcore::DeviceLibrary::~DeviceLibrary(mlcore::DeviceLibrary *this)
{
  mlcore::DeviceLibrary::~DeviceLibrary(this);
  JUMPOUT(0x2166B26F0);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(void *)this = &unk_26C5C4D08;
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)this = &unk_26C5C8768;
  BOOL v6 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((void *)this + 12) = &unk_26C5BF338;
  BOOL v6 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((void *)this + 8) = &unk_26C5BF338;
  BOOL v6 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((void *)this + 4) = &unk_26C5BF338;
  BOOL v6 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void mlcore::Library::~Library(mlcore::Library *this)
{
  *(void *)this = &unk_26C5C8768;
  uint64_t v2 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 12) = &unk_26C5BF338;
  uint64_t v2 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 8) = &unk_26C5BF338;
  uint64_t v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 4) = &unk_26C5BF338;
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalLibrary>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<mlcore::LocalLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::LocalLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::DeviceLibrary::localLibrary@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 160);
  *a2 = *(void *)(this + 152);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::DeviceLibrary::expectedEntityQuerySize(mlcore::DeviceLibrary *this, mlcore::EntityClass *a2)
{
  uint64_t v2 = (char *)this + 184;
  while (1)
  {
    uint64_t v2 = *(char **)v2;
    if (!v2) {
      break;
    }
    if (*((mlcore::EntityClass **)v2 + 2) == a2) {
      return *((void *)v2 + 3);
    }
  }
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  uint64_t v3 = (mlcore *)mlcore::ItemArtistPropertyOrder(a1);
  if (v3 != a2) {
    return 0;
  }
  return mlcore::ItemArtistPropertyOrderSection(v3);
}

void mlcore::TypedEntityClass<mlcore::TVShow>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::TVShow>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemArtistTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::TVShow>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::entityType()
{
  return 2;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::TVShow>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  char v8 = operator new(0x100uLL);
  v8[1] = 0;
  v8[2] = 0;
  *char v8 = &unk_26C5CB198;
  mlcore::ItemArtist::ItemArtist((mlcore::ItemArtist *)(v8 + 3), a2);
  v8[3] = &unk_26C5C8678;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_21506E014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVShow>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::TVShow>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::TVShow::~TVShow(mlcore::TVShow *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

BOOL mlcore::TypedEntityClass<mlcore::ItemArtist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::ItemArtist>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  char v8 = operator new(0x100uLL);
  v8[1] = 0;
  v8[2] = 0;
  *char v8 = &unk_26C5C9F70;
  mlcore::ItemArtist::ItemArtist((mlcore::ItemArtist *)(v8 + 3), a2);
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_21506E374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemArtist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ItemArtist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ItemArtist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mlcore::TVShowPropertySeriesOrderSection(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertySeriesNameOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void mlcore::TVShow::TVShow(mlcore::TVShow *this, uint64_t a2)
{
  mlcore::ItemArtist::ItemArtist(this, a2);
  *uint64_t v2 = &unk_26C5C8678;
}

{
  void *v2;

  mlcore::ItemArtist::ItemArtist(this, a2);
  *uint64_t v2 = &unk_26C5C8678;
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_21506E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 784);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 736);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_21506E748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::columnCount()
{
  return 21;
}

void mlcore::ItemPlaybackTable::~ItemPlaybackTable(mlcore::ItemPlaybackTable *this)
{
  mlcore::MediaTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C40F8;
  *(void *)(a1 + 2144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2175) < 0) {
    operator delete(*(void **)(a1 + 2152));
  }
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  *(void *)(a1 + 1952) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1983) < 0) {
    operator delete(*(void **)(a1 + 1960));
  }
  *(void *)(a1 + 1904) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1935) < 0) {
    operator delete(*(void **)(a1 + 1912));
  }
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  *(void *)(a1 + 1760) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1791) < 0) {
    operator delete(*(void **)(a1 + 1768));
  }
  *(void *)(a1 + 1712) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1743) < 0) {
    operator delete(*(void **)(a1 + 1720));
  }
  *(void *)(a1 + 1664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1695) < 0) {
    operator delete(*(void **)(a1 + 1672));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1600);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1536);
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1424);
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  *(void *)(a1 + 1280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*(void **)(a1 + 1288));
  }
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)a1 = &unk_26C5C35C8;
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 480) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  *(void *)(a1 + 432) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C35C8;
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C35C8;
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C35C8;
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  *(void *)(a1 + 912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  return mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  return mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 432) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

void mlcore::ItemPlaybackTable::persistentIDColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1167) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 143), *((void *)this + 144));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1144);
    *(void *)(a2 + 24) = *((void *)this + 145);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 292);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 295);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1172);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemPlaybackTable::audioFormatColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1215) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 149), *((void *)this + 150));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1192);
    *(void *)(a2 + 24) = *((void *)this + 151);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 304);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1220);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::bitrateColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1263) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 155), *((void *)this + 156));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1240);
    *(void *)(a2 + 24) = *((void *)this + 157);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 316);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1268);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::codecTypeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 161), *((void *)this + 162));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1288);
    *(void *)(a2 + 24) = *((void *)this + 163);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 328);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1316);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::codecSubtypeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 167), *((void *)this + 168));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1336);
    *(void *)(a2 + 24) = *((void *)this + 169);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 340);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1364);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::dataKindColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1407) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 173), *((void *)this + 174));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1384);
    *(void *)(a2 + 24) = *((void *)this + 175);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 352);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1412);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::dataURLColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1455) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 179), *((void *)this + 180));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1432);
    *(void *)(a2 + 24) = *((void *)this + 181);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 364);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1460);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 183), *((void *)this + 184));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(void *)(a2 + 56) = *((void *)this + 185);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21506FCD0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::EQPresetColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 193), *((void *)this + 194));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1544);
    *(void *)(a2 + 24) = *((void *)this + 195);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 392);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1572);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1599) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 197), *((void *)this + 198));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1576);
    *(void *)(a2 + 56) = *((void *)this + 199);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21506FDE8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::formatColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 201), *((void *)this + 202));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(void *)(a2 + 24) = *((void *)this + 203);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 408);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1636);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1663) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 205), *((void *)this + 206));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1640);
    *(void *)(a2 + 56) = *((void *)this + 207);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21506FF00(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::hasVideoColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1887) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 233), *((void *)this + 234));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1864);
    *(void *)(a2 + 24) = *((void *)this + 235);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 472);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1892);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemPlaybackTable::sampleRateColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((void *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(void *)(a2 + 24) = *((void *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 499);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1988);
  *(void *)a2 = &unk_26C5C47A8;
}

void mlcore::ItemPlaybackTable::progressionDirectionColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((void *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(void *)(a2 + 24) = *((void *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2180);
  *(void *)a2 = &unk_26C5C47C8;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::SourcePropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::SourcePropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::SourcePropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_215070448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance(void)::_sharedInstance;
}

void sub_215070570(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::SourceTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11SourceTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::SourceTable **a1)
{
  char v2 = operator new(0x208uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CA130;
  __n128 result = mlcore::SourceTable::SourceTable((mlcore::SourceTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::SourceTable *)v2;
  return result;
}

void sub_2150705FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::SourceTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::SourceTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::SourceTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Source>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Source>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Source>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Source>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  char v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_26C5CB160;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C8628;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_215070920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Source>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Source::~Source(mlcore::Source *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::SourcePropertyName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::SourcePropertyName(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::SourcePropertyName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyName(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyName(void)::$_0 &&>>()
{
}

void sub_215070CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::SourcePropertyLastSyncDate(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::SourcePropertyLastSyncDate(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::SourcePropertyLastSyncDate(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncDate(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyLastSyncDate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncDate(void)::$_0 &&>>()
{
}

void sub_215070FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::SourcePropertyLastSyncRevision(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::SourcePropertyLastSyncRevision(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::SourcePropertyLastSyncRevision(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncRevision(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyLastSyncRevision(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncRevision(void)::$_0 &&>>()
{
}

void sub_21507128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::Source::Source(mlcore::Source *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8628;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8628;
  return result;
}

double mlcore::Source::Source(uint64_t a1, unsigned int a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(void *)(a1 + 8) = &unk_26C5C4EE8;
  *(void *)(a1 + 216) = &unk_26C5C4F10;
  *(void *)(a1 + 224) = a2;
  *(void *)a1 = &unk_26C5C8628;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(void *)(a1 + 8) = &unk_26C5C4EE8;
  *(void *)(a1 + 216) = &unk_26C5C4F10;
  *(void *)(a1 + 224) = a2;
  *(void *)a1 = &unk_26C5C8628;
  return result;
}

void mlcore::Source::name(mlcore::Source *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::SourcePropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Source::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::SourcePropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Source::lastSyncDate(mlcore::Source *this)
{
  SyncDate = (mlcore::ModelPropertyBase *)mlcore::SourcePropertyLastSyncDate(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, SyncDate);
}

void *mlcore::Source::setLastSyncDate(mlcore::Source *this, uint64_t a2)
{
  unint64_t SyncDate = mlcore::SourcePropertyLastSyncDate(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, SyncDate, &SyncDate);
  result[3] = a2;
  return result;
}

uint64_t mlcore::Source::lastSyncRevision(mlcore::Source *this)
{
  SyncRevision = (mlcore::ModelPropertyBase *)mlcore::SourcePropertyLastSyncRevision(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, SyncRevision);
}

void *mlcore::Source::setLastSyncRevision(mlcore::Source *this, uint64_t a2)
{
  unint64_t SyncRevision = mlcore::SourcePropertyLastSyncRevision(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, SyncRevision, &SyncRevision);
  result[3] = a2;
  return result;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150717B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 384);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_215071854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::columnCount()
{
  return 7;
}

void mlcore::PersonTable::~PersonTable(mlcore::PersonTable *this)
{
  mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3EC8;
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3398;
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::PersonTable::imageTokenColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  std::string::size_type v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 831) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 101), *((void *)this + 102));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 808);
    *(void *)(a2 + 24) = *((void *)this + 103);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 208);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 836);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 863) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 105), *((void *)this + 106));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 840);
    *(void *)(a2 + 56) = *((void *)this + 107);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215071DEC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlcore::SQLRenderer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::SQLRenderer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore15PropertiesQuery8_performENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x2166B26F0);
}

void *mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C7688;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x2166B26F0);
}

void *mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C7688;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

{
  *a1 = &unk_26C5C7688;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &unk_26C5C7668;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C76C8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x2166B26F0);
}

void *mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  *a1 = &unk_26C5C76C8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

{
  uint64_t vars8;

  *a1 = &unk_26C5C76C8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

void mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(void *a1)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x2166B26F0);
}

__n128 std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_26C5C8FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__func()
{
}

uint64_t mlcore::PropertiesQuery::sortDescriptors(mlcore::PropertiesQuery *this)
{
  return (uint64_t)this + 56;
}

uint64_t mlcore::PropertiesQuery::propertiesToFetch(mlcore::PropertiesQuery *this)
{
  return (uint64_t)this + 80;
}

uint64_t mlcore::PropertiesQuery::setIsDistinct(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return this;
}

uint64_t mlcore::PropertiesQuery::isDistict(mlcore::PropertiesQuery *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t mlcore::PropertiesQueryResult::allResults(mlcore::PropertiesQueryResult *this)
{
  return (uint64_t)this + 160;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::PersonTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Person>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Person>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Person>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::entityType()
{
  return 10;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Person>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  char v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_26C5CB128;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C85D8;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_215072668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Person>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Person>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Person>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Person>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Person::~Person(mlcore::Person *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::PersonPropertyImageToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PersonPropertyImageToken(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PersonPropertyImageToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageToken(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyImageToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageToken(void)::$_0 &&>>()
{
}

void sub_215072A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::Person::cloudIdentifier(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyCloudIdentifier(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setCloudIdentifier(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PersonPropertyCloudIdentifier(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::handle(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyHandle(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setHandle(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PersonPropertyHandle(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::name(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PersonPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::imageURL(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyImageURL(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setImageURL(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PersonPropertyImageURL(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::imageToken(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyImageToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setImageToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PersonPropertyImageToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Person::hasLightweightProfile(mlcore::Person *this)
{
  HasLightweightProfile = (mlcore::ModelPropertyBase *)mlcore::PersonPropertyHasLightweightProfile(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, HasLightweightProfile);
}

void *mlcore::Person::setHasLightweightProfile(mlcore::Person *this, int a2)
{
  unint64_t HasLightweightProfile = mlcore::PersonPropertyHasLightweightProfile(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)this + 136, HasLightweightProfile, &HasLightweightProfile);
  *((_DWORD *)result + 6) = a2;
  return result;
}

void non-virtual thunk to'mlcore::MediaError::toString(mlcore::MediaError *this@<X0>, std::string *a2@<X8>)
{
}

void mlcore::MediaError::toString(mlcore::MediaError *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v5 = mlcore::__category(this);
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 48))(__p);
  uint64_t v7 = *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = *((_DWORD *)this + 2);
  mediaplatform::FormatString<char const*,int,std::string,std::string>(a2, (std::string *)"<{0}: ({1}) {2} \"{3}\">", (uint64_t)&v7, (uint64_t)&v6, (uint64_t)__p, (uint64_t)this + 40);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_215072EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatString<char const*,int,std::string,std::string>(std::string *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[0] = a6;
  v6[1] = a5;
  v6[2] = a4;
  v6[3] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(a2, a1, 0, (uint64_t)v6);
}

void sub_215072F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  char v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    int v39 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    int v39 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    int v39 = v9 + 2;
    int v28 = v9[2];
    if ((v28 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v29 = 0;
      unint64_t v30 = v9 + 3;
      do
      {
        uint64_t v31 = v30;
        int v39 = v30;
        uint64_t v29 = (v28 - 48) + 10 * v29;
        ++v30;
        int v33 = *v31;
        unint64_t v32 = (unsigned __int8 *)(v31 - 1);
        int v28 = v33;
      }
      while ((v33 - 58) >= 0xFFFFFFF6);
      int v39 = (char *)(v32 + 2);
      if (*(v30 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(v29);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v35, (const char **)&v39);
  std::string v12 = v39;
  switch(*((void *)&v35 + 1))
  {
    case 0:
      unint64_t v13 = **(const char ***)(a4 + 24);
      uint64_t v40 = (uint64_t)v13;
      if (v13) {
        unint64_t v13 = (const char *)strlen(v13);
      }
      *(void *)int v41 = v13;
      *(_OWORD *)&v41[8] = v35;
      *(_OWORD *)&v41[24] = v36;
      *(_OWORD *)&v41[40] = v37;
      uint64_t v42 = v38;
      uint64_t v14 = (const char *)*((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= (unint64_t)v13) {
        uint64_t v14 = v13;
      }
      if ((_BYTE)v36) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = v13;
      }
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v39, a2, &v15[i], a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v16 = a2;
      }
      else {
        BOOL v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(&v35, (unsigned char *)v16 + i, (uint64_t)&v40);
      goto LABEL_60;
    case 1:
      mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v40, **(_DWORD **)(a4 + 16), (uint64_t)&v35);
      if (v41[40] && !*(unsigned char *)(v40 + 48)) {
        uint64_t v20 = 32;
      }
      else {
        uint64_t v20 = 33;
      }
      unint64_t v24 = v20 - *(void *)&v41[32];
      if (*(unsigned char *)(v40 + 50) && v24 <= *(void *)(v40 + 24)) {
        unint64_t v24 = *(void *)(v40 + 24);
      }
      unint64_t v25 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v24) {
        unint64_t v25 = v24;
      }
      if ((_BYTE)v36) {
        unint64_t v26 = v25;
      }
      else {
        unint64_t v26 = v24;
      }
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v12, a2, v26 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = (char *)a2;
      }
      else {
        uint64_t v27 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v35, &v27[i], &v40);
      goto LABEL_60;
    case 2:
      uint64_t v17 = *(void *)(a4 + 8);
      uint64_t v40 = v17;
      *(_OWORD *)int v41 = v35;
      *(_OWORD *)&v41[16] = v36;
      *(_OWORD *)&v41[32] = v37;
      *(void *)&v41[48] = v38;
      if (*(char *)(v17 + 23) < 0) {
        unint64_t v18 = *(void *)(v17 + 8);
      }
      else {
        unint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      }
      unint64_t v21 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v18) {
        unint64_t v21 = v18;
      }
      if ((_BYTE)v36) {
        unint64_t v18 = v21;
      }
      goto LABEL_43;
    case 3:
      uint64_t v19 = *(void *)a4;
      uint64_t v40 = v19;
      *(_OWORD *)int v41 = v35;
      *(_OWORD *)&v41[16] = v36;
      *(_OWORD *)&v41[32] = v37;
      *(void *)&v41[48] = v38;
      if (*(char *)(v19 + 23) < 0) {
        unint64_t v18 = *(void *)(v19 + 8);
      }
      else {
        unint64_t v18 = *(unsigned __int8 *)(v19 + 23);
      }
      unint64_t v22 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v18) {
        unint64_t v22 = v18;
      }
      if ((_BYTE)v36) {
        unint64_t v18 = v22;
      }
LABEL_43:
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v39, a2, v18 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v23 = (char *)a2;
      }
      else {
        BOOL v23 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v35, &v23[i], (uint64_t)&v40);
LABEL_60:
      if (i != a3) {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      break;
    default:
      mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>>();
  }
}

void sub_215073388(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_215073408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(unsigned char *result, unsigned char *__dst, uint64_t a3)
{
  uint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  size_t v5 = v4;
  if (!result[16] || (int v6 = result, v7 = *((void *)result + 3), v8 = v7 - v4, v7 <= v4))
  {
LABEL_9:
    if (v5)
    {
      std::string::size_type v10 = *(const void **)a3;
      return memmove(v3, v10, v5);
    }
    return result;
  }
  int v9 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v9 != 1)
    {
      if (v9 != 2) {
        return result;
      }
      if (v7 != v4)
      {
        do
        {
          *v3++ = result[52];
          --v8;
        }
        while (v8);
        size_t v5 = *(void *)(a3 + 8);
      }
      goto LABEL_9;
    }
    unint64_t v12 = v8 >> 1;
    if (v8 >= 2)
    {
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8 >> 1;
      }
      do
      {
        *v3++ = result[52];
        --v13;
      }
      while (v13);
      size_t v5 = *(void *)(a3 + 8);
    }
    if (v5) {
      __n128 result = memmove(v3, *(const void **)a3, v5);
    }
    if (v8 != v12)
    {
      unint64_t v14 = v8 - (v8 >> 1);
      uint64_t v15 = &v3[v4];
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      uint64_t v16 = -(uint64_t)v14;
      do
        *v15++ = v6[52];
      while (!__CFADD__(v16++, 1));
    }
  }
  else
  {
    if (v4) {
      __n128 result = memmove(__dst, *(const void **)a3, *(void *)(a3 + 8));
    }
    if (v7 != v4)
    {
      int v11 = &v3[v4];
      do
      {
        *v11++ = v6[52];
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150735B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_215073620(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_215073688(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  if (a1 == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<char const*,int,std::string,std::string>();
}

void sub_2150736F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<char const*,int,std::string,std::string>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21507374C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *mlcore::MediaErrorCategory::name(mlcore::MediaErrorCategory *this)
{
  return "MediaLibrary";
}

void mlcore::MediaErrorCategory::~MediaErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2166B26F0);
}

void non-virtual thunk to'mlcore::MediaError::~MediaError(std::exception *this)
{
  char v2 = this - 3;
  this[-3].__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  this->__vftable = (std::exception_vtbl *)&unk_26C5C3C00;
  if (SHIBYTE(this[15].__vftable) < 0) {
    operator delete(this[13].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 5);
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::exception::~exception(v2);
  JUMPOUT(0x2166B26F0);
}

{
  std::exception *v2;
  uint64_t vars8;

  char v2 = this - 3;
  this[-3].__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  this->__vftable = (std::exception_vtbl *)&unk_26C5C3C00;
  if (SHIBYTE(this[15].__vftable) < 0) {
    operator delete(this[13].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 5);
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::exception::~exception(v2);
}

uint64_t mlcore::MediaError::what(mlcore::MediaError *this)
{
  uint64_t result = (uint64_t)this + 128;
  if (*((char *)this + 151) < 0) {
    return *(void *)result;
  }
  return result;
}

mlcore::MediaError *mlcore::MediaError::MediaError(mlcore::MediaError *this, const mediaplatform::PlatformErrorCondition *a2)
{
  uint64_t v4 = mlcore::__category(this);
  *((_DWORD *)this + 2) = 3;
  *(void *)this = &unk_26C5C3BD0;
  *((void *)this + 2) = v4;
  *((void *)this + 3) = &unk_26C5C3C00;
  *((_DWORD *)this + 8) = 3;
  std::error_condition::message(&v8, (const std::error_condition *)((char *)a2 + 8));
  mediaplatform::FormatString<std::string,std::string>((std::string *)((char *)this + 40), (std::string *)"Platform error. {0} {1}", (uint64_t)&v8, (uint64_t)a2 + 40);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  size_t v5 = mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mlcore::MediaError *)((char *)this + 64), a2);
  uint64_t v6 = mlcore::__category(v5);
  (*(void (**)(std::string *__return_ptr))(*(void *)v6 + 48))(&v8);
  mediaplatform::FormatString<std::string,std::string>((std::string *)((char *)this + 128), (std::string *)"{0} {1}", (uint64_t)&v8, (uint64_t)a2 + 40);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_215073B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v17);
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*v16);
  }
  std::exception::~exception((std::exception *)v15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlcore::Section>::__push_back_slow_path<mlcore::Section const&>(uint64_t a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 16;
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v7 = 0x555555555555555;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v19 = v6;
  if (v7)
  {
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  std::string::size_type v10 = (std::string *)&v9[48 * v2];
  v16[0] = v9;
  v16[1] = v10;
  uint64_t v17 = v10;
  unint64_t v18 = &v9[48 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::string::size_type v10 = v17;
  }
  else
  {
    long long v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  unint64_t v12 = &v9[48 * v2];
  long long v13 = *(long long *)((char *)a2 + 24);
  *((_DWORD *)v12 + 10) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(v12 + 24) = v13;
  uint64_t v17 = v10 + 2;
  std::vector<mlcore::Section>::__swap_out_circular_buffer((const std::string::value_type ***)a1, v16);
  uint64_t v14 = *(void *)(a1 + 8);
  std::__split_buffer<mlcore::Section>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_215073CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<mlcore::Section>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityCache,std::allocator<mlcore::EntityCache>,std::shared_ptr<mlcore::Transaction> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0xF0uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26C5C9FA8;
  uint64_t v8 = v6 + 3;
  v9[0] = a2;
  v9[1] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    mlcore::EntityCache::EntityCache((uint64_t)(v6 + 3), v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    mlcore::EntityCache::EntityCache((uint64_t)(v6 + 3), v9);
  }
  *a1 = v8;
  a1[1] = v7;
}

void mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  unint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore11EntityQuery8_performENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C8AA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000021511E747)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000215126736)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  end = this->__end_;
  uint64_t v6 = (char *)__from_s + (char *)end - (char *)__to;
  unint64_t v7 = end;
  while (v6 < (char *)__from_e)
  {
    long long v8 = *(_OWORD *)v6;
    v7->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    ++v7;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = 0;
    v6 += 24;
  }
  this->__end_ = v7;
  if (end != __to)
  {
    int v9 = end - 1;
    uint64_t v10 = 8 * (((char *)end - (char *)__to) >> 3);
    do
    {
      if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9->__r_.__value_.__l.__data_);
      }
      long long v11 = (long long *)((char *)&__from_s[-1] + v10);
      long long v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = __from_s->__r_.__value_.__r.__words[(unint64_t)v10 / 8 - 1];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      --v9;
      __from_s->__r_.__value_.__s.__data_[v10 - 1] = 0;
      *(unsigned char *)long long v11 = 0;
      v10 -= 24;
    }
    while (v10);
  }
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::EntityQuery::songsByAlbumQuery(mlcore *a1)
{
  v3[18] = *MEMORY[0x263EF8340];
  uint64_t v1 = mlcore::ItemPropertyMediaType(a1);
  v3[0] = 0x40800000008;
  mlcore::CreateInPredicate<int>((uint64_t)&v2, v1, (int *)v3, 2);
}

void sub_215074690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (char *)operator new(0x98uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_26C5C9FE0;
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  v8[0] = *a3;
  v8[1] = (uint64_t)v7;
  *(_OWORD *)a3 = 0u;
  mlcore::EntityQuery::EntityQuery((void *)v6 + 3, a2, v8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_2150747DC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::songsByAlbumForArtistQuery(mlcore *a1)
{
  uint64_t v2 = mlcore::ItemPropertyAlbumArtistPersistentID(a1);
  uint64_t v3 = *(void *)(*(void *)a1 + 224);
  long long v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5CABB0;
  *((void *)v4 + 4) = v2;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = &unk_26C5C79D0;
  *((void *)v4 + 6) = v3;
  *(_OWORD *)(v4 + 56) = 0u;
  v5[0] = v4 + 24;
  v5[1] = v4;
  mlcore::EntityQuery::songsByAlbumQuery((mlcore *)v5);
}

void sub_2150748C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsQuery(mlcore *a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  long long v5 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  if (a2)
  {
    uint64_t v6 = mlcore::AlbumPropertyOrder(a1);
    unint64_t v7 = (char *)operator new(0x48uLL);
    long long v8 = v7;
    *(_OWORD *)(v7 + 8) = 0u;
    *(void *)unint64_t v7 = &unk_26C5CABB0;
    int v9 = v7 + 24;
    *((void *)v7 + 5) = 0x100000000;
    *((void *)v7 + 3) = &unk_26C5C79D0;
    *((void *)v7 + 4) = v6;
    *((void *)v7 + 6) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    uint64_t v10 = v42;
    if ((unint64_t)v42 >= v43)
    {
      int64_t v11 = (v42 - v41) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v43 - (void)v41;
      if ((uint64_t)(v43 - (void)v41) >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      long long v49 = &v43;
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v14);
      *(void *)&long long v16 = v9;
      *((void *)&v16 + 1) = v8;
      uint64_t v17 = &v15[16 * v11];
      v46.n128_u64[0] = (unint64_t)v15;
      v46.n128_u64[1] = (unint64_t)v17;
      long long v48 = &v15[16 * v18];
      *(_OWORD *)uint64_t v17 = v16;
      uint64_t v47 = v17 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v41, &v46);
      long long v5 = v42;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v46);
    }
    else
    {
      *(void *)uint64_t v42 = v9;
      *((void *)v10 + 1) = v7;
      long long v5 = v10 + 16;
    }
    uint64_t v42 = v5;
  }
  if (*(void *)a1)
  {
    if ((unint64_t)v5 >= v43)
    {
      uint64_t v21 = (v5 - v41) >> 4;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v22 = (uint64_t)(v43 - (void)v41) >> 3;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (v43 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      long long v49 = &v43;
      unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v23);
      unint64_t v25 = &v24[16 * v21];
      v46.n128_u64[0] = (unint64_t)v24;
      v46.n128_u64[1] = (unint64_t)v25;
      long long v48 = &v24[16 * v26];
      long long v27 = *(_OWORD *)a1;
      *(_OWORD *)unint64_t v25 = *(_OWORD *)a1;
      if (*((void *)&v27 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = v25 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v41, &v46);
      uint64_t v20 = v42;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v46);
    }
    else
    {
      *(void *)long long v5 = *(void *)a1;
      uint64_t v19 = *((void *)a1 + 1);
      *((void *)v5 + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = v5 + 16;
    }
    uint64_t v42 = v20;
  }
  uint64_t v28 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  memset(v40, 0, sizeof(v40));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v40, v41, v42, (v42 - v41) >> 4);
  mlcore::CreateAndPredicate(v40, &v46);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v28, (uint64_t *)&v46);
  if (v46.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.n128_u64[1]);
  }
  long long v37 = (void **)v40;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v37);
  uint64_t v29 = *a3;
  uint64_t v31 = (mlcore *)mlcore::AlbumPropertyOrder(v30);
  v46.n128_u64[0] = (unint64_t)&unk_26C5C5398;
  v46.n128_u64[1] = (unint64_t)v31;
  LODWORD(v47) = 0;
  uint64_t v32 = mlcore::AlbumPropertyPersistentID(v31);
  long long v48 = (char *)&unk_26C5C5398;
  long long v49 = (unint64_t *)v32;
  int v50 = 0;
  uint64_t v38 = 0;
  int v39 = 0;
  long long v37 = 0;
  int v44 = &v37;
  char v45 = 0;
  int v33 = (void **)operator new(0x30uLL);
  uint64_t v34 = 0;
  long long v37 = v33;
  int v39 = v33 + 6;
  do
  {
    long long v35 = &v33[v34];
    unint64_t v36 = v46.n128_u64[v34 + 1];
    *long long v35 = &unk_26C5C5398;
    v35[1] = (void *)v36;
    *((_DWORD *)v35 + 4) = *(_DWORD *)((char *)&v46 + v34 * 8 + 16);
    v34 += 3;
  }
  while (v34 != 6);
  uint64_t v38 = v33 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v29, (char *)&v37);
  int v44 = &v37;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v46.n128_u64[0] = (unint64_t)&v41;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
}

void sub_215074C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  a9 = (void **)&a15;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForArtistQuery(mlcore *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6 = mlcore::ItemPropertyAlbumArtistPersistentID(a1);
  uint64_t v7 = *(void *)(*(void *)a1 + 224);
  long long v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)long long v8 = &unk_26C5CABB0;
  *((void *)v8 + 4) = v6;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = &unk_26C5C79D0;
  *((void *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  v12[0] = v8 + 24;
  v12[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v11[0] = v9;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mlcore::EntityQuery::albumsForArtistQueryWithPredicate((mlcore *)v12, (uint64_t)v11, a3);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_215074E2C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForArtistQueryWithPredicate(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlcore *)mlcore::AlbumPropertyPersistentID(a1);
  uint64_t v7 = mlcore::ItemPropertyAlbumPersistentID(v6);
  long long v8 = (std::__shared_weak_count *)operator new(0x38uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
  v8[1].__shared_owners_ = (uint64_t)v6;
  v8[1].__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
  uint64_t v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  uint64_t v10 = (atomic_ullong *)*((void *)a1 + 1);
  int v41 = *(void **)a1;
  uint64_t v42 = (mlcore *)v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v43 = v8 + 1;
  int v44 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v35 = 0;
  unint64_t v36 = 0;
  long long v37 = 0;
  long long v27 = (void **)&v35;
  LOBYTE(v28) = 0;
  long long v35 = (uint64_t *)operator new(0x20uLL);
  unint64_t v36 = v35;
  long long v37 = v35 + 4;
  unint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v37, &v41, &v45, v35);
  mlcore::CreateAndPredicate(&v35, &v40);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v38, v9, (long long *)&v40);
  if (v40.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.n128_u64[1]);
  }
  long long v27 = (void **)&v35;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v27);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    unint64_t v12 = *(std::__shared_weak_count **)((char *)&v41 + i);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  uint64_t v13 = v39;
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v33, v38, v39);
  uint64_t v14 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  uint64_t v15 = *(atomic_ullong **)(a2 + 8);
  int v41 = *(void **)a2;
  uint64_t v42 = (mlcore *)v15;
  if (v15) {
    atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
  }
  long long v16 = v34;
  unint64_t v43 = v33;
  int v44 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v27 = (void **)&v30;
  LOBYTE(v28) = 0;
  unint64_t v30 = (uint64_t *)operator new(0x20uLL);
  uint64_t v31 = v30;
  uint64_t v32 = v30 + 4;
  uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, &v41, &v45, v30);
  mlcore::CreateAndPredicate(&v30, &v40);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v14, (uint64_t *)&v40);
  if (v40.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.n128_u64[1]);
  }
  long long v27 = (void **)&v30;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v27);
  for (uint64_t j = 24; j != -8; j -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)&v41 + j);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  uint64_t v19 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle((mlcore *)v18);
  int v41 = &unk_26C5C5398;
  uint64_t v42 = HasTitle;
  LODWORD(v43) = 1;
  uint64_t v21 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  int v44 = (std::__shared_weak_count *)&unk_26C5C5398;
  char v45 = v21;
  int v46 = 0;
  uint64_t v22 = mlcore::AlbumPropertyPersistentID(v21);
  uint64_t v47 = &unk_26C5C5398;
  uint64_t v48 = v22;
  int v49 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v27 = 0;
  v40.n128_u64[0] = (unint64_t)&v27;
  v40.n128_u8[8] = 0;
  unint64_t v23 = (void **)operator new(0x48uLL);
  uint64_t v24 = 0;
  long long v27 = v23;
  uint64_t v29 = v23 + 9;
  do
  {
    unint64_t v25 = &v23[v24];
    uint64_t v26 = *(void **)((char *)&v41 + v24 * 8 + 8);
    char *v25 = &unk_26C5C5398;
    v25[1] = v26;
    *((_DWORD *)v25 + 4) = (&v43)[v24];
    v24 += 3;
  }
  while (v24 != 9);
  uint64_t v28 = v23 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v19, (char *)&v27);
  v40.n128_u64[0] = (unint64_t)&v27;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_21507520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v20 = *(std::__shared_weak_count **)(v16 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_26C5CB0B8;
  long long v7 = *a3;
  *a3 = 0u;
  *((void *)v6 + 3) = &unk_26C5C84C0;
  *((void *)v6 + 4) = a2;
  *(_OWORD *)(v6 + 40) = v7;
  if (*((void *)&v7 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0x30uLL);
  long long v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26C5CA788;
  long long v8 = v6 + 3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    v6[3] = &unk_26C5C5838;
    void v6[4] = a2;
    v6[5] = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    v6[3] = &unk_26C5C5838;
    void v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

uint64_t std::__shared_ptr_emplace<mlcore::ExistsPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::Query>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::EntityQuery::albumsForComposerQuery(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = mlcore::ItemPropertyComposerPersistentID(a1);
  uint64_t v7 = *(void *)(*(void *)a1 + 224);
  long long v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)long long v8 = &unk_26C5CABB0;
  *((void *)v8 + 4) = v6;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = &unk_26C5C79D0;
  *((void *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  uint64_t v9 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v8);
  uint64_t v10 = mlcore::ItemPropertyAlbumPersistentID(v9);
  int64_t v11 = (atomic_ullong *)operator new(0x38uLL);
  v11[1] = 0;
  void v11[2] = 0;
  *int64_t v11 = (atomic_ullong)&unk_26C5CAF68;
  v11[4] = (atomic_ullong)v9;
  unint64_t v11[5] = 0;
  v11[3] = (atomic_ullong)&unk_26C5C82D0;
  v11[6] = v10;
  uint64_t v12 = mlcore::AlbumPropertyOrder((mlcore *)v11);
  uint64_t v13 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(void *)uint64_t v13 = &unk_26C5CABB0;
  *((void *)v13 + 5) = 0x100000000;
  *((void *)v13 + 3) = &unk_26C5C79D0;
  *((void *)v13 + 4) = v12;
  *((void *)v13 + 6) = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  uint64_t v14 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  char v45 = v8 + 24;
  int v46 = (mlcore *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v47 = v11 + 3;
  uint64_t v48 = v11;
  atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  int v49 = (mlcore *)(v13 + 24);
  uint64_t v50 = v13;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  int v39 = 0;
  __n128 v40 = 0;
  int v41 = 0;
  uint64_t v31 = (void **)&v39;
  LOBYTE(v32) = 0;
  int v39 = (uint64_t *)operator new(0x30uLL);
  __n128 v40 = v39;
  int v41 = v39 + 6;
  __n128 v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v41, &v45, v51, v39);
  mlcore::CreateAndPredicate(&v39, &v44);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v42, v14, (long long *)&v44);
  if (v44.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.n128_u64[1]);
  }
  uint64_t v31 = (void **)&v39;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v31);
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    uint64_t v16 = *(std::__shared_weak_count **)((char *)&v45 + i);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  uint64_t v17 = v43;
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v37, v42, v43);
  uint64_t v18 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  uint64_t v19 = *(atomic_ullong **)(a2 + 8);
  char v45 = *(void **)a2;
  int v46 = (mlcore *)v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = v38;
  uint64_t v47 = v37;
  uint64_t v48 = (atomic_ullong *)v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = 0;
  long long v35 = 0;
  unint64_t v36 = 0;
  uint64_t v31 = (void **)&v34;
  LOBYTE(v32) = 0;
  uint64_t v34 = (uint64_t *)operator new(0x20uLL);
  long long v35 = v34;
  unint64_t v36 = v34 + 4;
  long long v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v36, &v45, &v49, v34);
  mlcore::CreateAndPredicate(&v34, &v44);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v18, (uint64_t *)&v44);
  if (v44.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.n128_u64[1]);
  }
  uint64_t v31 = (void **)&v34;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v31);
  for (uint64_t j = 24; j != -8; j -= 16)
  {
    uint64_t v22 = *(std::__shared_weak_count **)((char *)&v45 + j);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  unint64_t v23 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle((mlcore *)v22);
  char v45 = &unk_26C5C5398;
  int v46 = HasTitle;
  LODWORD(v47) = 1;
  unint64_t v25 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  uint64_t v48 = (atomic_ullong *)&unk_26C5C5398;
  int v49 = v25;
  LODWORD(v50) = 0;
  uint64_t v26 = mlcore::AlbumPropertyPersistentID(v25);
  v51[0] = &unk_26C5C5398;
  v51[1] = v26;
  int v52 = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v31 = 0;
  v44.n128_u64[0] = (unint64_t)&v31;
  v44.n128_u8[8] = 0;
  long long v27 = (void **)operator new(0x48uLL);
  uint64_t v28 = 0;
  uint64_t v31 = v27;
  int v33 = v27 + 9;
  do
  {
    uint64_t v29 = &v27[v28];
    unint64_t v30 = *(void **)((char *)&v45 + v28 * 8 + 8);
    *uint64_t v29 = &unk_26C5C5398;
    v29[1] = v30;
    *((_DWORD *)v29 + 4) = (&v47)[v28];
    v28 += 3;
  }
  while (v28 != 9);
  uint64_t v32 = v27 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v23, (char *)&v31);
  v44.n128_u64[0] = (unint64_t)&v31;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_215075A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v22 = *(std::__shared_weak_count **)(v18 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForGenreQuery(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = mlcore::ItemPropertyGenrePersistentID(a1);
  uint64_t v7 = *(void *)(*(void *)a1 + 224);
  long long v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)long long v8 = &unk_26C5CABB0;
  *((void *)v8 + 4) = v6;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = &unk_26C5C79D0;
  *((void *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  uint64_t v9 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v8);
  uint64_t v10 = mlcore::ItemPropertyAlbumPersistentID(v9);
  int64_t v11 = (atomic_ullong *)operator new(0x38uLL);
  v11[1] = 0;
  void v11[2] = 0;
  *int64_t v11 = (atomic_ullong)&unk_26C5CAF68;
  v11[4] = (atomic_ullong)v9;
  unint64_t v11[5] = 0;
  v11[3] = (atomic_ullong)&unk_26C5C82D0;
  v11[6] = v10;
  uint64_t v12 = mlcore::AlbumPropertyOrder((mlcore *)v11);
  uint64_t v13 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(void *)uint64_t v13 = &unk_26C5CABB0;
  *((void *)v13 + 5) = 0x100000000;
  *((void *)v13 + 3) = &unk_26C5C79D0;
  *((void *)v13 + 4) = v12;
  *((void *)v13 + 6) = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  uint64_t v14 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  char v45 = v8 + 24;
  int v46 = (mlcore *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v47 = v11 + 3;
  uint64_t v48 = v11;
  atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  int v49 = (mlcore *)(v13 + 24);
  uint64_t v50 = v13;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  int v39 = 0;
  __n128 v40 = 0;
  int v41 = 0;
  uint64_t v31 = (void **)&v39;
  LOBYTE(v32) = 0;
  int v39 = (uint64_t *)operator new(0x30uLL);
  __n128 v40 = v39;
  int v41 = v39 + 6;
  __n128 v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v41, &v45, v51, v39);
  mlcore::CreateAndPredicate(&v39, &v44);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v42, v14, (long long *)&v44);
  if (v44.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.n128_u64[1]);
  }
  uint64_t v31 = (void **)&v39;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v31);
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    uint64_t v16 = *(std::__shared_weak_count **)((char *)&v45 + i);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  uint64_t v17 = v43;
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v37, v42, v43);
  uint64_t v18 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  uint64_t v19 = *(atomic_ullong **)(a2 + 8);
  char v45 = *(void **)a2;
  int v46 = (mlcore *)v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = v38;
  uint64_t v47 = v37;
  uint64_t v48 = (atomic_ullong *)v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = 0;
  long long v35 = 0;
  unint64_t v36 = 0;
  uint64_t v31 = (void **)&v34;
  LOBYTE(v32) = 0;
  uint64_t v34 = (uint64_t *)operator new(0x20uLL);
  long long v35 = v34;
  unint64_t v36 = v34 + 4;
  long long v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v36, &v45, &v49, v34);
  mlcore::CreateAndPredicate(&v34, &v44);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v18, (uint64_t *)&v44);
  if (v44.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.n128_u64[1]);
  }
  uint64_t v31 = (void **)&v34;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v31);
  for (uint64_t j = 24; j != -8; j -= 16)
  {
    uint64_t v22 = *(std::__shared_weak_count **)((char *)&v45 + j);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  unint64_t v23 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle((mlcore *)v22);
  char v45 = &unk_26C5C5398;
  int v46 = HasTitle;
  LODWORD(v47) = 1;
  unint64_t v25 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  uint64_t v48 = (atomic_ullong *)&unk_26C5C5398;
  int v49 = v25;
  LODWORD(v50) = 0;
  uint64_t v26 = mlcore::AlbumPropertyPersistentID(v25);
  v51[0] = &unk_26C5C5398;
  v51[1] = v26;
  int v52 = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v31 = 0;
  v44.n128_u64[0] = (unint64_t)&v31;
  v44.n128_u8[8] = 0;
  long long v27 = (void **)operator new(0x48uLL);
  uint64_t v28 = 0;
  uint64_t v31 = v27;
  int v33 = v27 + 9;
  do
  {
    uint64_t v29 = &v27[v28];
    unint64_t v30 = *(void **)((char *)&v45 + v28 * 8 + 8);
    *uint64_t v29 = &unk_26C5C5398;
    v29[1] = v30;
    *((_DWORD *)v29 + 4) = (&v47)[v28];
    v28 += 3;
  }
  while (v28 != 9);
  uint64_t v32 = v27 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v23, (char *)&v31);
  v44.n128_u64[0] = (unint64_t)&v31;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_215076070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v22 = *(std::__shared_weak_count **)(v18 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::artistsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::ArtistPropertyOrder(a1);
  long long v5 = (char *)operator new(0x48uLL);
  uint64_t v6 = (std::__shared_weak_count *)v5;
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)long long v5 = &unk_26C5CABB0;
  *((void *)v5 + 5) = 0x100000000;
  *((void *)v5 + 3) = &unk_26C5C79D0;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  if (*(void *)a1)
  {
    uint64_t v7 = (atomic_ullong *)*((void *)a1 + 1);
    uint64_t v29 = *(void **)a1;
    unint64_t v30 = (mlcore *)v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = v5 + 24;
    uint64_t v32 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    LOBYTE(v21) = 0;
    unint64_t v23 = (uint64_t *)operator new(0x20uLL);
    uint64_t v24 = v23;
    unint64_t v25 = v23 + 4;
    uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v25, &v29, &v33, v23);
    mlcore::CreateAndPredicate(&v23, &v26);
    uint64_t v20 = (void **)&v23;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v9 = *(std::__shared_weak_count **)((char *)&v29 + i);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    v26.n128_u64[0] = (unint64_t)(v5 + 24);
    v26.n128_u64[1] = (unint64_t)v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  int64_t v11 = (std::__shared_weak_count *)v26.n128_u64[1];
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v10, v26.n128_i64[0], (std::__shared_weak_count *)v26.n128_u64[1]);
  uint64_t v12 = *a2;
  uint64_t v14 = (mlcore *)mlcore::ArtistPropertyOrder(v13);
  uint64_t v29 = &unk_26C5C5398;
  unint64_t v30 = v14;
  LODWORD(v31) = 0;
  uint64_t v15 = mlcore::ArtistPropertyPersistentID(v14);
  uint64_t v32 = &unk_26C5C5398;
  uint64_t v33 = v15;
  int v34 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  long long v27 = &v20;
  char v28 = 0;
  uint64_t v16 = (void **)operator new(0x30uLL);
  uint64_t v17 = 0;
  uint64_t v20 = v16;
  uint64_t v22 = v16 + 6;
  do
  {
    uint64_t v18 = &v16[v17];
    uint64_t v19 = *(void **)((char *)&v29 + v17 * 8 + 8);
    *uint64_t v18 = &unk_26C5C5398;
    v18[1] = v19;
    *((_DWORD *)v18 + 4) = (&v31)[v17];
    v17 += 3;
  }
  while (v17 != 6);
  uint64_t v21 = v16 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v12, (char *)&v20);
  long long v27 = &v20;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_215076458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v22 = 24;
  while (1)
  {
    unint64_t v23 = *(std::__shared_weak_count **)(&a20 + v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::EntityQuery::composersQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::ComposerPropertyOrder(a1);
  long long v5 = (char *)operator new(0x48uLL);
  uint64_t v6 = (std::__shared_weak_count *)v5;
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)long long v5 = &unk_26C5CABB0;
  *((void *)v5 + 5) = 0x100000000;
  *((void *)v5 + 3) = &unk_26C5C79D0;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  if (*(void *)a1)
  {
    uint64_t v7 = (atomic_ullong *)*((void *)a1 + 1);
    uint64_t v29 = *(void **)a1;
    unint64_t v30 = (mlcore *)v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = v5 + 24;
    uint64_t v32 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    LOBYTE(v21) = 0;
    unint64_t v23 = (uint64_t *)operator new(0x20uLL);
    uint64_t v24 = v23;
    unint64_t v25 = v23 + 4;
    uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v25, &v29, &v33, v23);
    mlcore::CreateAndPredicate(&v23, &v26);
    uint64_t v20 = (void **)&v23;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v9 = *(std::__shared_weak_count **)((char *)&v29 + i);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    v26.n128_u64[0] = (unint64_t)(v5 + 24);
    v26.n128_u64[1] = (unint64_t)v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  int64_t v11 = (std::__shared_weak_count *)v26.n128_u64[1];
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v10, v26.n128_i64[0], (std::__shared_weak_count *)v26.n128_u64[1]);
  uint64_t v12 = *a2;
  uint64_t v14 = (mlcore *)mlcore::ComposerPropertyOrder(v13);
  uint64_t v29 = &unk_26C5C5398;
  unint64_t v30 = v14;
  LODWORD(v31) = 0;
  uint64_t v15 = mlcore::ComposerPropertyPersistentID(v14);
  uint64_t v32 = &unk_26C5C5398;
  uint64_t v33 = v15;
  int v34 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  long long v27 = &v20;
  char v28 = 0;
  uint64_t v16 = (void **)operator new(0x30uLL);
  uint64_t v17 = 0;
  uint64_t v20 = v16;
  uint64_t v22 = v16 + 6;
  do
  {
    uint64_t v18 = &v16[v17];
    uint64_t v19 = *(void **)((char *)&v29 + v17 * 8 + 8);
    *uint64_t v18 = &unk_26C5C5398;
    v18[1] = v19;
    *((_DWORD *)v18 + 4) = (&v31)[v17];
    v17 += 3;
  }
  while (v17 != 6);
  uint64_t v21 = v16 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v12, (char *)&v20);
  long long v27 = &v20;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_215076794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v22 = 24;
  while (1)
  {
    unint64_t v23 = *(std::__shared_weak_count **)(&a20 + v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::EntityQuery::genresQuery(std::__shared_weak_count **a1@<X0>, char **a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*a1)
  {
    uint64_t v4 = mlcore::GenrePropertyOrder((mlcore *)a1);
    long long v5 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v5 + 8) = 0u;
    *(void *)long long v5 = &unk_26C5CABB0;
    *((void *)v5 + 5) = 0x100000000;
    *((void *)v5 + 3) = &unk_26C5C79D0;
    *((void *)v5 + 4) = v4;
    *(void *)&long long v6 = v5 + 24;
    *((void *)&v6 + 1) = v5;
    *((void *)v5 + 6) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    uint64_t v7 = a1[1];
    *(_OWORD *)a1 = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v8 = mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v8, (uint64_t)*a1, a1[1]);
  uint64_t v9 = *a2;
  uint64_t v20 = &unk_26C5C5398;
  uint64_t v21 = (mlcore *)mlcore::GenrePropertyOrder(v10);
  v22[0] = 0;
  unint64_t v23 = &unk_26C5C5398;
  uint64_t v24 = mlcore::GenrePropertyPersistentID(v21);
  int v25 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  uint64_t v18 = &v15;
  char v19 = 0;
  int64_t v11 = (char *)operator new(0x30uLL);
  uint64_t v12 = 0;
  uint64_t v15 = v11;
  uint64_t v17 = v11 + 48;
  do
  {
    uint64_t v13 = &v11[v12 * 4];
    uint64_t v14 = *(uint64_t *)((char *)&v20 + v12 * 4 + 8);
    *(void *)uint64_t v13 = &unk_26C5C5398;
    *((void *)v13 + 1) = v14;
    *((_DWORD *)v13 + 4) = v22[v12];
    v12 += 6;
  }
  while (v12 != 12);
  uint64_t v16 = v11 + 48;
  mlcore::PropertiesQuery::setSortDescriptors(v9, (char *)&v15);
  uint64_t v18 = &v15;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_215076A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v6 = *(std::__shared_weak_count **)(v4 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::musicVideosQuery(mlcore *a1)
{
  v3[6] = *MEMORY[0x263EF8340];
  uint64_t v1 = mlcore::ItemPropertyMediaType(a1);
  LODWORD(v3[0]) = 1032;
  mlcore::CreateInPredicate<int>((uint64_t)&v2, v1, (int *)v3, 1);
}

void sub_215076D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void **a22)
{
  a22 = (void **)&a11;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v25 = 24;
  while (1)
  {
    uint64_t v26 = *(std::__shared_weak_count **)(v23 - 88 + v25);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    v25 -= 16;
    if (v25 == -8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (a21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a21);
      }
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::EntityQuery::playlistsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  v66[1] = *MEMORY[0x263EF8340];
  uint64_t IsHidden = mlcore::PlaylistPropertyIsHidden(a1);
  long long v5 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)long long v5 = &unk_26C5CA718;
  *((_DWORD *)v5 + 10) = 1;
  *((void *)v5 + 3) = &unk_26C5C54E0;
  *((void *)v5 + 4) = IsHidden;
  *(void *)&long long v6 = v5 + 24;
  *((void *)&v6 + 1) = v5;
  long long v65 = v6;
  uint64_t v35 = 0;
  long long v36 = 0u;
  v39.n128_u64[0] = (unint64_t)&v35;
  v39.n128_u8[8] = 0;
  uint64_t v35 = operator new(0x10uLL);
  *(void *)&long long v36 = v35;
  *((void *)&v36 + 1) = v35 + 2;
  *(void *)&long long v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v36 + 8, &v65, v66, v35);
  if (*((void *)&v65 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v65 + 1));
  }
  if (*(void *)a1)
  {
    uint64_t v7 = v36;
    if ((unint64_t)v36 >= *((void *)&v36 + 1))
    {
      uint64_t v10 = (uint64_t)(v36 - (void)v35) >> 4;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = *((void *)&v36 + 1) - (void)v35;
      if ((uint64_t)(*((void *)&v36 + 1) - (void)v35) >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      uint64_t v42 = (mlcore *)((char *)&v36 + 8);
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
      uint64_t v15 = &v14[16 * v10];
      v39.n128_u64[0] = (unint64_t)v14;
      v39.n128_u64[1] = (unint64_t)v15;
      int v41 = &v14[16 * v16];
      long long v17 = *(_OWORD *)a1;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      if (*((void *)&v17 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      __n128 v40 = v15 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v35, &v39);
      uint64_t v9 = v36;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      *(void *)long long v36 = *(void *)a1;
      uint64_t v8 = *((void *)a1 + 1);
      *(void *)(v7 + 8) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = v7 + 16;
    }
    *(void *)&long long v36 = v9;
  }
  uint64_t v18 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  memset(v34, 0, sizeof(v34));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v34, v35, (void *)v36, (uint64_t)(v36 - (void)v35) >> 4);
  mlcore::CreateAndPredicate(v34, &v39);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a2, v18, (uint64_t *)&v39);
  if (v39.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39.n128_u64[1]);
  }
  *(void *)&long long v65 = v34;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  char v19 = *a2;
  IsFavoritedSongs = (mlcore *)mlcore::PlaylistPropertyIsFavoritedSongs(v20);
  v39.n128_u64[0] = (unint64_t)&unk_26C5C5398;
  v39.n128_u64[1] = (unint64_t)IsFavoritedSongs;
  LODWORD(v40) = 1;
  IsFolder = (mlcore *)mlcore::PlaylistPropertySmartIsFolder(IsFavoritedSongs);
  int v41 = (char *)&unk_26C5C5398;
  uint64_t v42 = IsFolder;
  int v43 = 1;
  IsSmart = (mlcore *)mlcore::PlaylistPropertyIsSmart(IsFolder);
  __n128 v44 = &unk_26C5C5398;
  char v45 = IsSmart;
  int v46 = 1;
  IsGenius = (mlcore *)mlcore::PlaylistPropertySmartIsGenius(IsSmart);
  uint64_t v47 = &unk_26C5C5398;
  uint64_t v48 = IsGenius;
  int v49 = 1;
  IsOwner = (mlcore *)mlcore::PlaylistPropertyIsOwner(IsGenius);
  uint64_t v50 = &unk_26C5C5398;
  uint64_t v51 = IsOwner;
  int v52 = 1;
  IsPersonalMix = (mlcore *)mlcore::PlaylistCategoryTypeIsPersonalMix(IsOwner);
  uint64_t v53 = &unk_26C5C5398;
  long long v54 = IsPersonalMix;
  int v55 = 1;
  IsSubscribed = (mlcore *)mlcore::PlaylistPropertyIsSubscribed(IsPersonalMix);
  uint64_t v56 = &unk_26C5C5398;
  uint64_t v57 = IsSubscribed;
  int v58 = 1;
  char v28 = (mlcore *)mlcore::PlaylistPropertyGroupingSortKey(IsSubscribed);
  uint64_t v59 = &unk_26C5C5398;
  std::string v60 = v28;
  int v61 = 0;
  uint64_t v29 = mlcore::PlaylistPropertyNameOrder(v28);
  uint64_t v62 = &unk_26C5C5398;
  uint64_t v63 = v29;
  int v64 = 0;
  v66[0] = 0;
  long long v65 = 0uLL;
  long long v37 = (void **)&v65;
  char v38 = 0;
  unint64_t v30 = (char *)operator new(0xD8uLL);
  uint64_t v31 = 0;
  *(void *)&long long v65 = v30;
  v66[0] = v30 + 216;
  do
  {
    uint64_t v32 = &v30[v31 * 8];
    unint64_t v33 = v39.n128_u64[v31 + 1];
    *(void *)uint64_t v32 = &unk_26C5C5398;
    *((void *)v32 + 1) = v33;
    *((_DWORD *)v32 + 4) = *(_DWORD *)((char *)&v39 + v31 * 8 + 16);
    v31 += 3;
  }
  while (v31 != 27);
  *((void *)&v65 + 1) = v30 + 216;
  mlcore::PropertiesQuery::setSortDescriptors(v19, (char *)&v65);
  long long v37 = (void **)&v65;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v37);
  v39.n128_u64[0] = (unint64_t)&v35;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_215077250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 80) = &a13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 80));
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::playlistsForFolderQuery(mlcore *a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t IsHidden = mlcore::PlaylistPropertyIsHidden(a1);
  uint64_t v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_26C5CA718;
  *((_DWORD *)v7 + 10) = 1;
  v7[3] = &unk_26C5C54E0;
  v7[4] = IsHidden;
  v8.n128_u64[0] = (unint64_t)(v7 + 3);
  v8.n128_u64[1] = (unint64_t)v7;
  __n128 v49 = v8;
  uint64_t v9 = mlcore::PlaylistPropertyParentPersistentID((mlcore *)v7);
  uint64_t v10 = *(void *)(*(void *)a1 + 224);
  unint64_t v11 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v11 + 8) = 0u;
  *(void *)unint64_t v11 = &unk_26C5CABB0;
  *((void *)v11 + 4) = v9;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = &unk_26C5C79D0;
  *((void *)v11 + 6) = v10;
  *(_OWORD *)(v11 + 56) = 0u;
  *(void *)&long long v12 = v11 + 24;
  *((void *)&v12 + 1) = v11;
  long long v50 = v12;
  char v45 = 0;
  long long v46 = 0u;
  int v41 = (void **)&v45;
  LOBYTE(v42) = 0;
  char v45 = operator new(0x20uLL);
  *(void *)&long long v46 = v45;
  *((void *)&v46 + 1) = v45 + 4;
  *(void *)&long long v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v46 + 8, &v49, &v51, v45);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    uint64_t v14 = (std::__shared_weak_count *)v49.n128_u64[i];
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  if (*(void *)a2)
  {
    uint64_t v15 = v46;
    if ((unint64_t)v46 >= *((void *)&v46 + 1))
    {
      uint64_t v18 = (uint64_t)(v46 - (void)v45) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = *((void *)&v46 + 1) - (void)v45;
      if ((uint64_t)(*((void *)&v46 + 1) - (void)v45) >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      uint64_t v51 = (mlcore *)((char *)&v46 + 8);
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
      uint64_t v23 = &v22[16 * v18];
      v49.n128_u64[0] = (unint64_t)v22;
      v49.n128_u64[1] = (unint64_t)v23;
      *((void *)&v50 + 1) = &v22[16 * v24];
      long long v25 = *a2;
      *(_OWORD *)uint64_t v23 = *a2;
      if (*((void *)&v25 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v50 = v23 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v45, &v49);
      uint64_t v17 = v46;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v49);
    }
    else
    {
      *(void *)long long v46 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 1);
      *(void *)(v15 + 8) = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v15 + 16;
    }
    *(void *)&long long v46 = v17;
  }
  uint64_t v26 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  memset(v44, 0, sizeof(v44));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v44, v45, (void *)v46, (uint64_t)(v46 - (void)v45) >> 4);
  mlcore::CreateAndPredicate(v44, &v49);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v26, (uint64_t *)&v49);
  if (v49.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49.n128_u64[1]);
  }
  int v41 = (void **)v44;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v41);
  long long v27 = *a3;
  IsFavoritedSongs = (mlcore *)mlcore::PlaylistPropertyIsFavoritedSongs(v28);
  v49.n128_u64[0] = (unint64_t)&unk_26C5C5398;
  v49.n128_u64[1] = (unint64_t)IsFavoritedSongs;
  LODWORD(v50) = 1;
  IsFolder = (mlcore *)mlcore::PlaylistPropertySmartIsFolder(IsFavoritedSongs);
  *((void *)&v50 + 1) = &unk_26C5C5398;
  uint64_t v51 = IsFolder;
  int v52 = 1;
  IsSmart = (mlcore *)mlcore::PlaylistPropertyIsSmart(IsFolder);
  uint64_t v53 = &unk_26C5C5398;
  long long v54 = IsSmart;
  int v55 = 1;
  IsGenius = (mlcore *)mlcore::PlaylistPropertySmartIsGenius(IsSmart);
  uint64_t v56 = &unk_26C5C5398;
  uint64_t v57 = IsGenius;
  int v58 = 1;
  IsOwner = (mlcore *)mlcore::PlaylistPropertyIsOwner(IsGenius);
  uint64_t v59 = &unk_26C5C5398;
  std::string v60 = IsOwner;
  int v61 = 1;
  IsPersonalMix = (mlcore *)mlcore::PlaylistCategoryTypeIsPersonalMix(IsOwner);
  uint64_t v62 = &unk_26C5C5398;
  uint64_t v63 = IsPersonalMix;
  int v64 = 1;
  IsSubscribed = (mlcore *)mlcore::PlaylistPropertyIsSubscribed(IsPersonalMix);
  long long v65 = &unk_26C5C5398;
  uint64_t v66 = IsSubscribed;
  int v67 = 1;
  uint64_t v36 = mlcore::PlaylistPropertyNameOrder(IsSubscribed);
  uint64_t v68 = &unk_26C5C5398;
  uint64_t v69 = v36;
  int v70 = 0;
  uint64_t v42 = 0;
  int v43 = 0;
  int v41 = 0;
  uint64_t v47 = &v41;
  char v48 = 0;
  long long v37 = (void **)operator new(0xC0uLL);
  uint64_t v38 = 0;
  int v41 = v37;
  int v43 = v37 + 24;
  do
  {
    __n128 v39 = &v37[v38];
    unint64_t v40 = v49.n128_u64[v38 + 1];
    uint64_t *v39 = &unk_26C5C5398;
    v39[1] = (void *)v40;
    *((_DWORD *)v39 + 4) = *(_DWORD *)((char *)&v49 + v38 * 8 + 16);
    v38 += 3;
  }
  while (v38 != 24);
  uint64_t v42 = v37 + 24;
  mlcore::PropertiesQuery::setSortDescriptors(v27, (char *)&v41);
  uint64_t v47 = &v41;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v49.n128_u64[0] = (unint64_t)&v45;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
}

void sub_2150777C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__n128 mlcore::EntityQuery::playlistItemsQuery@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)a1 + 224);
  long long v6 = (char *)operator new(0xD0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_26C5CAE18;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  uint64_t v7 = (mlcore *)mlcore::PlaylistItemEntityQuery::PlaylistItemEntityQuery((uint64_t)(v6 + 24), v5, (long long *)&v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = mlcore::PlaylistItemPropertyPosition(v7);
  uint64_t v17 = &unk_26C5C5398;
  uint64_t v18 = v8;
  int v19 = 0;
  memset(&v16, 0, sizeof(v16));
  char v15 = 0;
  uint64_t v9 = operator new(0x18uLL);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  v16.__r_.__value_.__l.__size_ = (std::string::size_type)(v9 + 3);
  v16.__r_.__value_.__r.__words[2] = (std::string::size_type)(v9 + 3);
  uint64_t v10 = v18;
  *uint64_t v9 = &unk_26C5C5398;
  v9[1] = v10;
  *((_DWORD *)v9 + 4) = v19;
  mlcore::PropertiesQuery::setSortDescriptors(v6 + 24, (char *)&v16);
  v11.n128_u64[0] = (unint64_t)(v6 + 24);
  v11.n128_u64[1] = (unint64_t)v6;
  __n128 v13 = v11;
  uint64_t v14 = &v16;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  __n128 result = v13;
  *a3 = v13;
  return result;
}

void sub_215077A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::EntityQuery::tvEpisodesQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  v31[15] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::ItemPropertyMediaType(a1);
  uint64_t v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CAB78;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = &unk_26C5C7978;
  *((_DWORD *)v5 + 12) = 512;
  *(_OWORD *)(v5 + 56) = 0u;
  uint64_t v6 = mlcore::ItemPropertyTitleOrder((mlcore *)v5);
  uint64_t v7 = (char *)operator new(0x48uLL);
  uint64_t v8 = (std::__shared_weak_count *)v7;
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CABB0;
  *((void *)v7 + 5) = 0x100000000;
  *((void *)v7 + 3) = &unk_26C5C79D0;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 6) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  if (*(void *)a1)
  {
    uint64_t v9 = (char *)*((void *)a1 + 1);
    uint64_t v26 = *(char **)a1;
    long long v27 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    }
    char v28 = v5 + 24;
    uint64_t v29 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    v30[0] = v7 + 24;
    v30[1] = v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = (void **)&v20;
    char v25 = 0;
    uint64_t v20 = (uint64_t *)operator new(0x30uLL);
    unint64_t v21 = v20;
    uint64_t v22 = v20 + 6;
    unint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v22, &v26, v31, v20);
    mlcore::CreateAndPredicate(&v20, &v23);
    __n128 v16 = v23;
    uint64_t v24 = (void **)&v20;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v24);
    for (uint64_t i = 5; i != -1; i -= 2)
    {
      __n128 v11 = (std::__shared_weak_count *)(&v26)[i];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  else
  {
    uint64_t v26 = v5 + 24;
    long long v27 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    char v28 = v7 + 24;
    uint64_t v29 = v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    uint64_t v24 = (void **)&v17;
    char v25 = 0;
    uint64_t v17 = (uint64_t *)operator new(0x20uLL);
    uint64_t v18 = v17;
    int v19 = v17 + 4;
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v19, &v26, v30, v17);
    mlcore::CreateAndPredicate(&v17, &v23);
    __n128 v16 = v23;
    uint64_t v24 = (void **)&v17;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v24);
    for (uint64_t j = 3; j != -1; j -= 2)
    {
      __n128 v13 = (std::__shared_weak_count *)(&v26)[j];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
  uint64_t v14 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v14, v16.n128_i64[0], (std::__shared_weak_count *)v16.n128_u64[1]);
  char v15 = *a2;
  {
    operator new();
  }
  mlcore::PropertiesQuery::setSortDescriptors(v15, (char *)mlcore::StandardTVEpisodeSortDescriptors(void)::sortDescriptors);
  if (v16.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.n128_u64[1]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
}

void sub_215077FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  MEMORY[0x2166B26F0](v13, 0x20C40960023A9);
  char v15 = *(std::__shared_weak_count **)(v12 + 8);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::tvShowsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::TVShowPropertySeriesOrder(a1);
  uint64_t v5 = (char *)operator new(0x48uLL);
  uint64_t v6 = (std::__shared_weak_count *)v5;
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CABB0;
  *((void *)v5 + 5) = 0x100000000;
  *((void *)v5 + 3) = &unk_26C5C79D0;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  if (*(void *)a1)
  {
    uint64_t v7 = (atomic_ullong *)*((void *)a1 + 1);
    uint64_t v29 = *(void **)a1;
    unint64_t v30 = (mlcore *)v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = v5 + 24;
    uint64_t v32 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    __n128 v23 = 0;
    uint64_t v24 = 0;
    char v25 = 0;
    LOBYTE(v21) = 0;
    __n128 v23 = (uint64_t *)operator new(0x20uLL);
    uint64_t v24 = v23;
    char v25 = v23 + 4;
    uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v25, &v29, &v33, v23);
    mlcore::CreateAndPredicate(&v23, &v26);
    uint64_t v20 = (void **)&v23;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v20);
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v9 = *(std::__shared_weak_count **)((char *)&v29 + i);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    v26.n128_u64[0] = (unint64_t)(v5 + 24);
    v26.n128_u64[1] = (unint64_t)v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer();
  __n128 v11 = (std::__shared_weak_count *)v26.n128_u64[1];
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v10, v26.n128_i64[0], (std::__shared_weak_count *)v26.n128_u64[1]);
  uint64_t v12 = *a2;
  uint64_t v14 = (mlcore *)mlcore::TVShowPropertySeriesOrder(v13);
  uint64_t v29 = &unk_26C5C5398;
  unint64_t v30 = v14;
  LODWORD(v31) = 0;
  uint64_t v15 = mlcore::ItemArtistPropertyPersistentID(v14);
  uint64_t v32 = &unk_26C5C5398;
  uint64_t v33 = v15;
  int v34 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  long long v27 = &v20;
  char v28 = 0;
  __n128 v16 = (void **)operator new(0x30uLL);
  uint64_t v17 = 0;
  uint64_t v20 = v16;
  uint64_t v22 = v16 + 6;
  do
  {
    uint64_t v18 = &v16[v17];
    int v19 = *(void **)((char *)&v29 + v17 * 8 + 8);
    *uint64_t v18 = &unk_26C5C5398;
    v18[1] = v19;
    *((_DWORD *)v18 + 4) = (&v31)[v17];
    v17 += 3;
  }
  while (v17 != 6);
  unint64_t v21 = v16 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v12, (char *)&v20);
  long long v27 = &v20;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_215078354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v22 = 24;
  while (1)
  {
    __n128 v23 = *(std::__shared_weak_count **)(&a20 + v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
}

void mlcore::EntityQuery::tvSeasonsQuery(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v4, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  uint64_t v5 = *a2;
  __n128 v16 = &unk_26C5C5398;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v6);
  v18[0] = 1;
  int v19 = &unk_26C5C5398;
  uint64_t v20 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  int v21 = 0;
  uint64_t v22 = &unk_26C5C5398;
  uint64_t v23 = mlcore::AlbumPropertyPersistentID(v20);
  int v24 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __n128 v11 = 0;
  uint64_t v14 = &v11;
  char v15 = 0;
  uint64_t v7 = (char *)operator new(0x48uLL);
  uint64_t v8 = 0;
  __n128 v11 = v7;
  uint64_t v13 = v7 + 72;
  do
  {
    uint64_t v9 = &v7[v8 * 4];
    uint64_t v10 = *(uint64_t *)((char *)&v16 + v8 * 4 + 8);
    *(void *)uint64_t v9 = &unk_26C5C5398;
    *((void *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v18[v8];
    v8 += 6;
  }
  while (v8 != 18);
  uint64_t v12 = v7 + 72;
  mlcore::PropertiesQuery::setSortDescriptors(v5, (char *)&v11);
  uint64_t v14 = &v11;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_215078570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::tvSeasonsForShowQuery(mlcore *a1@<X0>, std::__shared_weak_count **a2@<X1>, char **a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v6 = mlcore::ItemPropertyItemArtistPersistentID(a1);
  uint64_t v7 = *(void *)(*(void *)a1 + 224);
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)uint64_t v8 = &unk_26C5CABB0;
  *((void *)v8 + 4) = v6;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = &unk_26C5C79D0;
  *((void *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  uint64_t v9 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v8);
  uint64_t v10 = mlcore::ItemPropertyAlbumPersistentID(v9);
  __n128 v11 = (std::__shared_weak_count *)operator new(0x38uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF68;
  v11[1].__shared_owners_ = (uint64_t)v9;
  v11[1].__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C82D0;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  uint64_t v12 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  int v43 = v8 + 24;
  __n128 v44 = (mlcore *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  char v45 = v11 + 1;
  long long v46 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v37 = 0;
  uint64_t v38 = 0;
  __n128 v39 = 0;
  uint64_t v29 = (void **)&v37;
  LOBYTE(v30) = 0;
  long long v37 = (uint64_t *)operator new(0x20uLL);
  uint64_t v38 = v37;
  __n128 v39 = v37 + 4;
  uint64_t v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v39, &v43, &v47, v37);
  mlcore::CreateAndPredicate(&v37, &v42);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v40, v12, (long long *)&v42);
  if (v42.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42.n128_u64[1]);
  }
  uint64_t v29 = (void **)&v37;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v29);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v14 = *(std::__shared_weak_count **)((char *)&v43 + i);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  char v15 = v41;
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v35, v40, v41);
  uint64_t v16 = mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
  uint64_t v17 = v36;
  int v43 = v35;
  __n128 v44 = (mlcore *)v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (atomic_ullong *)a2[1];
  char v45 = *a2;
  long long v46 = (std::__shared_weak_count *)v18;
  if (v18) {
    atomic_fetch_add_explicit(v18 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  uint64_t v29 = (void **)&v32;
  LOBYTE(v30) = 0;
  uint64_t v32 = (uint64_t *)operator new(0x20uLL);
  uint64_t v33 = v32;
  int v34 = v32 + 4;
  uint64_t v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v34, &v43, &v47, v32);
  mlcore::CreateAndPredicate(&v32, &v42);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v16, (uint64_t *)&v42);
  if (v42.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42.n128_u64[1]);
  }
  uint64_t v29 = (void **)&v32;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v29);
  for (uint64_t j = 24; j != -8; j -= 16)
  {
    uint64_t v20 = *(std::__shared_weak_count **)((char *)&v43 + j);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  int v21 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle((mlcore *)v20);
  int v43 = &unk_26C5C5398;
  __n128 v44 = HasTitle;
  LODWORD(v45) = 1;
  uint64_t v23 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  long long v46 = (std::__shared_weak_count *)&unk_26C5C5398;
  uint64_t v47 = v23;
  int v48 = 0;
  uint64_t v24 = mlcore::AlbumPropertyPersistentID(v23);
  __n128 v49 = &unk_26C5C5398;
  uint64_t v50 = v24;
  int v51 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  v42.n128_u64[0] = (unint64_t)&v29;
  v42.n128_u8[8] = 0;
  uint64_t v25 = (void **)operator new(0x48uLL);
  uint64_t v26 = 0;
  uint64_t v29 = v25;
  uint64_t v31 = v25 + 9;
  do
  {
    long long v27 = &v25[v26];
    char v28 = *(void **)((char *)&v43 + v26 * 8 + 8);
    *long long v27 = &unk_26C5C5398;
    v27[1] = v28;
    *((_DWORD *)v27 + 4) = (&v45)[v26];
    v26 += 3;
  }
  while (v26 != 9);
  unint64_t v30 = v25 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v21, (char *)&v29);
  v42.n128_u64[0] = (unint64_t)&v29;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_2150789D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  int v21 = *(std::__shared_weak_count **)(v17 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::moviesQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  v31[12] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::ItemPropertyMediaType(a1);
  uint64_t v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_26C5CAB78;
  *((void *)v5 + 4) = v4;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = &unk_26C5C7978;
  *((_DWORD *)v5 + 12) = 2048;
  *(_OWORD *)(v5 + 56) = 0u;
  uint64_t v6 = mlcore::ItemPropertyTitleOrder((mlcore *)v5);
  uint64_t v7 = (char *)operator new(0x48uLL);
  uint64_t v8 = (std::__shared_weak_count *)v7;
  *(_OWORD *)(v7 + 8) = 0u;
  *(void *)uint64_t v7 = &unk_26C5CABB0;
  *((void *)v7 + 5) = 0x100000000;
  *((void *)v7 + 3) = &unk_26C5C79D0;
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 6) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  if (*(void *)a1)
  {
    uint64_t v9 = (char *)*((void *)a1 + 1);
    uint64_t v26 = *(char **)a1;
    long long v27 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    }
    char v28 = v5 + 24;
    uint64_t v29 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    v30[0] = v7 + 24;
    v30[1] = v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = (void **)&v20;
    char v25 = 0;
    uint64_t v20 = (uint64_t *)operator new(0x30uLL);
    int v21 = v20;
    uint64_t v22 = v20 + 6;
    int v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v22, &v26, v31, v20);
    mlcore::CreateAndPredicate(&v20, &v23);
    __n128 v16 = v23;
    uint64_t v24 = (void **)&v20;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v24);
    for (uint64_t i = 5; i != -1; i -= 2)
    {
      __n128 v11 = (std::__shared_weak_count *)(&v26)[i];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  else
  {
    uint64_t v26 = v5 + 24;
    long long v27 = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    char v28 = v7 + 24;
    uint64_t v29 = v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    uint64_t v24 = (void **)&v17;
    char v25 = 0;
    uint64_t v17 = (uint64_t *)operator new(0x20uLL);
    uint64_t v18 = v17;
    int v19 = v17 + 4;
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v19, &v26, v30, v17);
    mlcore::CreateAndPredicate(&v17, &v23);
    __n128 v16 = v23;
    uint64_t v24 = (void **)&v17;
    std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v24);
    for (uint64_t j = 3; j != -1; j -= 2)
    {
      uint64_t v13 = (std::__shared_weak_count *)(&v26)[j];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
  uint64_t v14 = mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v14, v16.n128_i64[0], (std::__shared_weak_count *)v16.n128_u64[1]);
  char v15 = *a2;
  {
    operator new();
  }
  mlcore::PropertiesQuery::setSortDescriptors(v15, (char *)mlcore::StandardMovieSortDescriptors(void)::sortDescriptors);
  if (v16.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.n128_u64[1]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
}

void sub_215078F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  MEMORY[0x2166B26F0](v13, 0x20C40960023A9);
  char v15 = *(std::__shared_weak_count **)(v12 + 8);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::podcastsQuery(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v4, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  uint64_t v5 = *a2;
  __n128 v16 = &unk_26C5C5398;
  uint64_t v17 = (mlcore *)mlcore::AlbumPropertyOrder(v6);
  v18[0] = 0;
  int v19 = &unk_26C5C5398;
  uint64_t v20 = mlcore::AlbumPropertyPersistentID(v17);
  int v21 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __n128 v11 = 0;
  uint64_t v14 = &v11;
  char v15 = 0;
  uint64_t v7 = (char *)operator new(0x30uLL);
  uint64_t v8 = 0;
  __n128 v11 = v7;
  uint64_t v13 = v7 + 48;
  do
  {
    uint64_t v9 = &v7[v8 * 4];
    uint64_t v10 = *(uint64_t *)((char *)&v16 + v8 * 4 + 8);
    *(void *)uint64_t v9 = &unk_26C5C5398;
    *((void *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v18[v8];
    v8 += 6;
  }
  while (v8 != 12);
  uint64_t v12 = v7 + 48;
  mlcore::PropertiesQuery::setSortDescriptors(v5, (char *)&v11);
  uint64_t v14 = &v11;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_2150791C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::podcastEpisodesQuery(mlcore *a1)
{
  v3[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = mlcore::ItemPropertyMediaType(a1);
  v3[0] = 0x10000000004;
  mlcore::CreateInPredicate<int>((uint64_t)&v2, v1, (int *)v3, 2);
}

void sub_2150794D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  MEMORY[0x2166B26F0](v18, 0x20C40960023A9);
  uint64_t v20 = *(std::__shared_weak_count **)(v17 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityQuery::identityPropertiesToFetch(mlcore::EntityQuery *this)
{
  return (uint64_t)this + 104;
}

void std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t mlcore::EntityQueryResult::idEntityAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(void *)this + 16))(this);
  uint64_t v5 = mlcore::EntityQueryResult::persistentIDAtIndex(this, a2);
  uint64_t v6 = **((void **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(void *)(*((void *)this + 23) + 8) - v6) >> 3) <= a2) {
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v4 + 48);
  return v7(v4, v5, v6 + 216 * a2);
}

void mlcore::EntityQueryResult::allEntities(mlcore::EntityQueryResult *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(void *)(*((void *)this + 23) + 8) != **((void **)this + 23))
  {
    unint64_t v4 = 0;
    do
    {
      mlcore::EntityQueryResult::entityAtIndex(this, v4);
      uint64_t v6 = (_OWORD *)a2[1];
      unint64_t v5 = a2[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v7 = ((uint64_t)v6 - *a2) >> 4;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - *a2;
        if (v9 >> 3 > v8) {
          unint64_t v8 = v9 >> 3;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        v16[4] = a2 + 2;
        __n128 v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v10);
        uint64_t v12 = &v11[16 * v7];
        v16[0] = v11;
        v16[1] = v12;
        v16[3] = &v11[16 * v13];
        *(_OWORD *)uint64_t v12 = v15;
        long long v15 = 0uLL;
        void v16[2] = v12 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(a2, v16);
        uint64_t v14 = a2[1];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v16);
        a2[1] = v14;
      }
      else
      {
        *uint64_t v6 = v15;
        a2[1] = v6 + 1;
      }
      ++v4;
    }
    while (v4 < 0x84BDA12F684BDA13
               * ((uint64_t)(*(void *)(*((void *)this + 23) + 8) - **((void **)this + 23)) >> 3));
  }
}

void sub_2150797EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *mlcore::EntityQueryResult::localizedSectionIndices(mlcore::EntityQueryResult *this)
{
  uint64_t v1 = (char *)this + 216;
  if (!*((void *)this + 27))
  {
    mlcore::DeviceLibraryView::library(*((mlcore::DeviceLibraryView **)this + 20), &v9);
    std::string::size_type size = (long long **)v9[6].__r_.__value_.__l.__size_;
    unint64_t v4 = (std::__shared_weak_count *)v9[6].__r_.__value_.__r.__words[2];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v11, 0, sizeof(v11));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, size[38], size[39], 0xAAAAAAAAAAAAAAABLL * (((char *)size[39] - (char *)size[38]) >> 3));
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v5 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v5 + 8) = 0u;
    *(void *)unint64_t v5 = &unk_26C5CB438;
    *((void *)v5 + 3) = 0;
    *((_OWORD *)v5 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5 + 1, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11.__r_.__value_.__l.__size_ - v11.__r_.__value_.__r.__words[0]) >> 3));
    *(void *)&long long v6 = v5 + 24;
    *((void *)&v6 + 1) = v5;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
    *(_OWORD *)((char *)this + 216) = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v9 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  return v1;
}

void sub_215079944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, char a12)
{
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  a10 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

mlcore::DeviceLibraryView *mlcore::EntityQueryResult::optionalLocalizedSectionIndicesRange(mlcore::DeviceLibraryView **this)
{
  if (!this[30])
  {
    mlcore::DeviceLibraryView::library(this[20], &v6);
    std::string::size_type size = (long long **)v6[6].__r_.__value_.__l.__size_;
    uint64_t v3 = (std::__shared_weak_count *)v6[6].__r_.__value_.__r.__words[2];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v8, 0, sizeof(v8));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, size[38], size[39], 0xAAAAAAAAAAAAAAABLL * (((char *)size[39] - (char *)size[38]) >> 3));
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8.__r_.__value_.__l.__size_ - v8.__r_.__value_.__r.__words[0]) >> 3);
    if (v4 >= 3)
    {
      this[29] = (mlcore::DeviceLibraryView *)1;
      this[30] = (mlcore::DeviceLibraryView *)(v4 - 2);
    }
    long long v6 = &v8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
  return this[29];
}

void sub_215079A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::EntityQueryResult::entityRevision(mlcore::EntityQueryResult *this)
{
  return *((void *)this + 31);
}

uint64_t mlcore::EntityQueryResult::EntityQueryResult(uint64_t a1, const mlcore::MediaError *a2)
{
  mlcore::MediaError::MediaError((mlcore::MediaError *)&v4, a2);
  *(void *)a1 = &unk_26C5C4898;
  mlcore::MediaError::MediaError((mlcore::MediaError *)(a1 + 8), (const mlcore::MediaError *)&v4);
  v4.__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  unint64_t v5 = &unk_26C5C3C00;
  if (v9 < 0) {
    operator delete(v8[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v8);
  if (v7 < 0) {
    operator delete(v6);
  }
  std::exception::~exception(&v4);
  *(void *)a1 = &unk_26C5C7470;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_215079B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mlcore::MediaError::~MediaError((std::exception *)va);
  _Unwind_Resume(a1);
}

mlcore::DBInfoTable *mlcore::DBInfoTable::DBInfoTable(mlcore::DBInfoTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v31, "db_info");
  std::string::basic_string[abi:ne180100]<0>(v27, "db_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v29, (uint64_t)v27, 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "primary_container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v25, (uint64_t)v23, 0);
  std::string::basic_string[abi:ne180100]<0>(v20, "media_folder_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v22, (uint64_t)v20, 0);
  std::string::basic_string[abi:ne180100]<0>(v16, "audio_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v18, (uint64_t)v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "subtitle_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v14, (uint64_t)v12, 0);
  std::string::basic_string[abi:ne180100]<0>(v9, "genius_cuid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v11, (uint64_t)v9, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "bib");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v8, (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "rib");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v31, (uint64_t)v29, (uint64_t)v25, (uint64_t)v22, (uint64_t)v18, (uint64_t)v14, (uint64_t)v11, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v8);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v11);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  v14[0] = &unk_26C5C3AF0;
  if (v15 < 0) {
    operator delete((void *)v14[1]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  v18[0] = &unk_26C5C3AF0;
  if (v19 < 0) {
    operator delete((void *)v18[1]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v22);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  v25[0] = &unk_26C5C3AF0;
  if (v26 < 0) {
    operator delete((void *)v25[1]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  v29[0] = &unk_26C5C3AF0;
  if (v30 < 0) {
    operator delete((void *)v29[1]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  *(void *)this = &unk_26C5C43B0;
  return this;
}

void sub_215079EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a34);
  if (a33 < 0) {
    operator delete(a28);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a50);
  if (a49 < 0) {
    operator delete(a44);
  }
  a64 = (uint64_t)&unk_26C5C3AF0;
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  a74 = (uint64_t)&unk_26C5C3AF0;
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a79);
  if (a78 < 0) {
    operator delete(a77);
  }
  *(void *)(v79 - 176) = &unk_26C5C3AF0;
  if (*(char *)(v79 - 145) < 0) {
    operator delete(*(void **)(v79 - 168));
  }
  if (*(char *)(v79 - 177) < 0) {
    operator delete(*(void **)(v79 - 200));
  }
  *(void *)(v79 - 104) = &unk_26C5C3AF0;
  if (*(char *)(v79 - 73) < 0) {
    operator delete(*(void **)(v79 - 96));
  }
  if (*(char *)(v79 - 105) < 0) {
    operator delete(*(void **)(v79 - 128));
  }
  if (*(char *)(v79 - 33) < 0) {
    operator delete(*(void **)(v79 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_21507A068()
{
}

void sub_21507A070()
{
}

void sub_21507A078()
{
}

void sub_21507A080()
{
}

void sub_21507A088()
{
}

void sub_21507A090()
{
}

void sub_21507A098()
{
}

void sub_21507A0A0()
{
}

uint64_t mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v73 = *(std::string *)a2;
  }
  uint64_t v68 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string __s = *(std::string *)(a3 + 8);
  }
  int v70 = *(_DWORD *)(a3 + 32);
  uint64_t v68 = &unk_26C5C3878;
  uint64_t v71 = *(void *)(a3 + 36);
  int v72 = *(_DWORD *)(a3 + 44);
  uint64_t v63 = &unk_26C5C3AF0;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string v64 = *(std::string *)(a4 + 8);
  }
  int v65 = *(_DWORD *)(a4 + 32);
  uint64_t v63 = &unk_26C5C3878;
  uint64_t v66 = *(void *)(a4 + 36);
  int v67 = *(_DWORD *)(a4 + 44);
  int v58 = &unk_26C5C3AF0;
  if (*(char *)(a5 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
  }
  else {
    std::string v59 = *(std::string *)(a5 + 8);
  }
  int v60 = *(_DWORD *)(a5 + 32);
  int v58 = &unk_26C5C3818;
  char v61 = *(unsigned char *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(a5 + 40), *(void *)(a5 + 48));
  }
  else {
    std::string v62 = *(std::string *)(a5 + 40);
  }
  long long v54 = &unk_26C5C3AF0;
  if (*(char *)(a6 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(a6 + 8), *(void *)(a6 + 16));
  }
  else {
    std::string v55 = *(std::string *)(a6 + 8);
  }
  int v56 = *(_DWORD *)(a6 + 32);
  long long v54 = &unk_26C5C3858;
  uint64_t v57 = *(void *)(a6 + 36);
  uint64_t v50 = &unk_26C5C3AF0;
  if (*(char *)(a7 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 8), *(void *)(a7 + 16));
  }
  else {
    std::string __p = *(std::string *)(a7 + 8);
  }
  int v52 = *(_DWORD *)(a7 + 32);
  uint64_t v50 = &unk_26C5C3858;
  uint64_t v53 = *(void *)(a7 + 36);
  char v45 = &unk_26C5C3AF0;
  if (*(char *)(a8 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a8 + 8), *(void *)(a8 + 16));
  }
  else {
    std::string v46 = *(std::string *)(a8 + 8);
  }
  int v47 = *(_DWORD *)(a8 + 32);
  char v45 = &unk_26C5C3818;
  char v48 = *(unsigned char *)(a8 + 36);
  if (*(char *)(a8 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a8 + 40), *(void *)(a8 + 48));
  }
  else {
    std::string v49 = *(std::string *)(a8 + 40);
  }
  uint64_t v17 = a9;
  uint64_t v38 = &unk_26C5C3AF0;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
    uint64_t v17 = a9;
  }
  else
  {
    std::string v39 = *(std::string *)(a9 + 8);
  }
  int v40 = *(_DWORD *)(v17 + 32);
  uint64_t v38 = &unk_26C5C37F8;
  char v41 = *(unsigned char *)(v17 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v42, *(const void **)(v17 + 64), *(void *)(v17 + 48), 1);
  uint64_t v18 = a10;
  uint64_t v31 = &unk_26C5C3AF0;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
    uint64_t v18 = a10;
  }
  else
  {
    std::string v32 = *(std::string *)(a10 + 8);
  }
  int v33 = *(_DWORD *)(v18 + 32);
  uint64_t v31 = &unk_26C5C37F8;
  char v34 = *(unsigned char *)(v18 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v35, *(const void **)(v18 + 64), *(void *)(v18 + 48), 1);
  *(void *)a1 = &unk_26C5BED18;
  char v19 = (std::string *)(a1 + 8);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v73.__r_.__value_.__l + 2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C5C36A8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  v111 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = __s;
  }
  int v113 = v70;
  v111 = &unk_26C5C3878;
  uint64_t v114 = v71;
  int v115 = v72;
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v64;
  }
  int v108 = v65;
  std::string v106 = &unk_26C5C3878;
  uint64_t v109 = v66;
  int v110 = v67;
  std::string v101 = &unk_26C5C3AF0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v102, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v102 = v59;
  }
  int v103 = v60;
  std::string v101 = &unk_26C5C3818;
  char v104 = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v105, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v105 = v62;
  }
  int v97 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v98, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v98 = v55;
  }
  int v99 = v56;
  int v97 = &unk_26C5C3858;
  uint64_t v100 = v57;
  char v93 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v94, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v94 = __p;
  }
  int v95 = v52;
  char v93 = &unk_26C5C3858;
  uint64_t v96 = v53;
  uint64_t v88 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v89, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v89 = v46;
  }
  int v90 = v47;
  uint64_t v88 = &unk_26C5C3818;
  char v91 = v48;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v92, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v92 = v49;
  }
  uint64_t v81 = &unk_26C5C3AF0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v82, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    std::string v82 = v39;
  }
  int v83 = v40;
  uint64_t v81 = &unk_26C5C37F8;
  char v84 = v41;
  mediaplatform::Data::Data((mediaplatform::Data *)&v85, __src, __n, 1);
  std::string v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = v32;
  }
  int v76 = v33;
  std::string v74 = &unk_26C5C37F8;
  char v77 = v34;
  mediaplatform::Data::Data((mediaplatform::Data *)&v78, v37, v36, 1);
  v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v107;
  }
  int v150 = v108;
  v148 = &unk_26C5C3878;
  uint64_t v151 = v109;
  int v152 = v110;
  v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v102;
  }
  int v145 = v103;
  v143 = &unk_26C5C3818;
  char v146 = v104;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v105;
  }
  v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v140, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else {
    std::string v140 = v98;
  }
  int v141 = v99;
  v139 = &unk_26C5C3858;
  uint64_t v142 = v100;
  v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v136, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    std::string v136 = v94;
  }
  int v137 = v95;
  v135 = &unk_26C5C3858;
  uint64_t v138 = v96;
  v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v89;
  }
  int v132 = v90;
  v130 = &unk_26C5C3818;
  char v133 = v91;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v134, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  }
  else {
    std::string v134 = v92;
  }
  v123 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v124, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else {
    std::string v124 = v82;
  }
  int v125 = v83;
  v123 = &unk_26C5C37F8;
  char v126 = v84;
  mediaplatform::Data::Data((mediaplatform::Data *)&v127, v87, v86, 1);
  v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v75;
  }
  int v118 = v76;
  v116 = &unk_26C5C37F8;
  char v119 = v77;
  mediaplatform::Data::Data((mediaplatform::Data *)&v120, v80, v79, 1);
  v180 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v181, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v181 = v144;
  }
  int v182 = v145;
  v180 = &unk_26C5C3818;
  char v183 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v184, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else {
    std::string v184 = v147;
  }
  v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v177, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  }
  else {
    std::string v177 = v140;
  }
  int v178 = v141;
  v176 = &unk_26C5C3858;
  uint64_t v179 = v142;
  v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v173, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  }
  else {
    std::string v173 = v136;
  }
  int v174 = v137;
  v172 = &unk_26C5C3858;
  uint64_t v175 = v138;
  v167 = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v168, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else {
    std::string v168 = v131;
  }
  int v169 = v132;
  v167 = &unk_26C5C3818;
  char v170 = v133;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v171, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v171 = v134;
  }
  v160 = &unk_26C5C3AF0;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v161, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v161 = v124;
  }
  int v162 = v125;
  v160 = &unk_26C5C37F8;
  char v163 = v126;
  mediaplatform::Data::Data((mediaplatform::Data *)&v164, v129, v128, 1);
  v153 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v117;
  }
  int v155 = v118;
  v153 = &unk_26C5C37F8;
  char v156 = v119;
  mediaplatform::Data::Data((mediaplatform::Data *)&v157, v122, v121, 1);
  v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v209, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  }
  else {
    std::string v209 = v177;
  }
  int v210 = v178;
  v208 = &unk_26C5C3858;
  uint64_t v211 = v179;
  v204 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v205, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v205 = v173;
  }
  int v206 = v174;
  v204 = &unk_26C5C3858;
  uint64_t v207 = v175;
  v199 = &unk_26C5C3AF0;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v200, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  }
  else {
    std::string v200 = v168;
  }
  int v201 = v169;
  v199 = &unk_26C5C3818;
  char v202 = v170;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v203, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else {
    std::string v203 = v171;
  }
  v192 = &unk_26C5C3AF0;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v193, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v193 = v161;
  }
  int v194 = v162;
  v192 = &unk_26C5C37F8;
  char v195 = v163;
  mediaplatform::Data::Data((mediaplatform::Data *)&v196, v166, v165, 1);
  v185 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v154;
  }
  int v187 = v155;
  v185 = &unk_26C5C37F8;
  char v188 = v156;
  mediaplatform::Data::Data((mediaplatform::Data *)&v189, v159, v158, 1);
  v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v232, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  }
  else {
    std::string v232 = v205;
  }
  int v233 = v206;
  v231 = &unk_26C5C3858;
  uint64_t v234 = v207;
  v226 = &unk_26C5C3AF0;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v227, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else {
    std::string v227 = v200;
  }
  int v228 = v201;
  v226 = &unk_26C5C3818;
  char v229 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v230, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  }
  else {
    std::string v230 = v203;
  }
  v219 = &unk_26C5C3AF0;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v220, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else {
    std::string v220 = v193;
  }
  int v221 = v194;
  v219 = &unk_26C5C37F8;
  char v222 = v195;
  mediaplatform::Data::Data((mediaplatform::Data *)&v223, v198, v197, 1);
  v212 = &unk_26C5C3AF0;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v213, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  else {
    std::string v213 = v186;
  }
  int v214 = v187;
  v212 = &unk_26C5C37F8;
  char v215 = v188;
  mediaplatform::Data::Data((mediaplatform::Data *)&v216, v191, v190, 1);
  v249 = &unk_26C5C3AF0;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v250, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  }
  else {
    std::string v250 = v227;
  }
  int v251 = v228;
  v249 = &unk_26C5C3818;
  char v252 = v229;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v253, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v253 = v230;
  }
  v242 = &unk_26C5C3AF0;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v243, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v243 = v220;
  }
  int v244 = v221;
  v242 = &unk_26C5C37F8;
  char v245 = v222;
  mediaplatform::Data::Data((mediaplatform::Data *)&v246, v225, v224, 1);
  v235 = &unk_26C5C3AF0;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v236, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  }
  else {
    std::string v236 = v213;
  }
  int v237 = v214;
  v235 = &unk_26C5C37F8;
  char v238 = v215;
  mediaplatform::Data::Data((mediaplatform::Data *)&v239, v218, v217, 1);
  v261 = &unk_26C5C3AF0;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v262, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  }
  else {
    std::string v262 = v243;
  }
  int v263 = v244;
  v261 = &unk_26C5C37F8;
  char v264 = v245;
  mediaplatform::Data::Data((mediaplatform::Data *)v265, v248, v247, 1);
  v254 = &unk_26C5C3AF0;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v255, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  }
  else {
    std::string v255 = v236;
  }
  int v256 = v237;
  v254 = &unk_26C5C37F8;
  char v257 = v238;
  mediaplatform::Data::Data((mediaplatform::Data *)&v258, v241, v240, 1);
  v266 = &unk_26C5C3AF0;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v267, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  }
  else {
    std::string v267 = v255;
  }
  int v268 = v256;
  v266 = &unk_26C5C37F8;
  char v269 = v257;
  mediaplatform::Data::Data((mediaplatform::Data *)v270, v260, v259, 1);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 88) = v267;
  }
  *(_DWORD *)(a1 + 112) = v268;
  *(void *)(a1 + 80) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 116) = v269;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 120), (const void *)v270[3], v270[1], 1);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v266);
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 168) = v262;
  }
  *(_DWORD *)(a1 + 192) = v263;
  *(void *)(a1 + 160) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 196) = v264;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 200), (const void *)v265[3], v265[1], 1);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v254);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v261);
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 248), v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 248) = v250;
  }
  *(_DWORD *)(a1 + 272) = v251;
  *(void *)(a1 + 240) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 276) = v252;
  uint64_t v20 = (std::string *)(a1 + 280);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v253.__r_.__value_.__l.__data_;
    *(void *)(a1 + 296) = *((void *)&v253.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v235);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v242);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  char v21 = (std::string *)(a1 + 312);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v21, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
    *(void *)(a1 + 328) = *((void *)&v232.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 336) = v233;
  *(void *)(a1 + 304) = &unk_26C5C3858;
  *(void *)(a1 + 340) = v234;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v212);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v219);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  v231 = &unk_26C5C3AF0;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  uint64_t v22 = (std::string *)(a1 + 360);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&v209.__r_.__value_.__l.__data_;
    *(void *)(a1 + 376) = *((void *)&v209.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 384) = v210;
  *(void *)(a1 + 352) = &unk_26C5C3858;
  *(void *)(a1 + 388) = v211;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v185);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  v204 = &unk_26C5C3AF0;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }
  v208 = &unk_26C5C3AF0;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 408), v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 408) = v181;
  }
  *(_DWORD *)(a1 + 432) = v182;
  *(void *)(a1 + 400) = &unk_26C5C3818;
  *(unsigned char *)(a1 + 436) = v183;
  __n128 v23 = (std::string *)(a1 + 440);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v23, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v184.__r_.__value_.__l.__data_;
    *(void *)(a1 + 456) = *((void *)&v184.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v153);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v167);
  v172 = &unk_26C5C3AF0;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  v176 = &unk_26C5C3AF0;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v180);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  char v24 = (std::string *)(a1 + 472);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    *(void *)(a1 + 488) = *((void *)&v149.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 496) = v150;
  *(void *)(a1 + 464) = &unk_26C5C3878;
  *(void *)(a1 + 500) = v151;
  *(_DWORD *)(a1 + 508) = v152;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v116);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v123);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v130);
  v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  v139 = &unk_26C5C3AF0;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v143);
  v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 512) = &unk_26C5C3AF0;
  char v25 = (std::string *)(a1 + 520);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
    *(void *)(a1 + 536) = *((void *)&v112.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 544) = v113;
  *(void *)(a1 + 512) = &unk_26C5C3878;
  *(void *)(a1 + 548) = v114;
  *(_DWORD *)(a1 + 556) = v115;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v74);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v81);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v88);
  char v93 = &unk_26C5C3AF0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  int v97 = &unk_26C5C3AF0;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v101);
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  v111 = &unk_26C5C3AF0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v31);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v38);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v45);
  uint64_t v50 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v58);
  uint64_t v63 = &unk_26C5C3AF0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  uint64_t v68 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C41D8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 560, a3);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 608, a4);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 656, a5);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 720, a6);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 768, a7);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 816, a8);
  *(void *)(a1 + 880) = &unk_26C5C3AF0;
  uint64_t v26 = a9;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 888), *(const std::string::value_type **)(a9 + 8), *(void *)(a9 + 16));
    uint64_t v26 = a9;
  }
  else
  {
    long long v27 = *(_OWORD *)(a9 + 8);
    *(void *)(a1 + 904) = *(void *)(a9 + 24);
    *(_OWORD *)(a1 + 888) = v27;
  }
  *(_DWORD *)(a1 + 912) = *(_DWORD *)(v26 + 32);
  *(void *)(a1 + 880) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 916) = *(unsigned char *)(v26 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 920), *(const void **)(v26 + 64), *(void *)(v26 + 48), 1);
  *(void *)(a1 + 880) = &unk_26C5C4768;
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  uint64_t v28 = a10;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 968), *(const std::string::value_type **)(a10 + 8), *(void *)(a10 + 16));
    uint64_t v28 = a10;
  }
  else
  {
    long long v29 = *(_OWORD *)(a10 + 8);
    *(void *)(a1 + 984) = *(void *)(a10 + 24);
    *(_OWORD *)(a1 + 968) = v29;
  }
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(v28 + 32);
  *(void *)(a1 + 960) = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 996) = *(unsigned char *)(v28 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 1000), *(const void **)(v28 + 64), *(void *)(v28 + 48), 1);
  *(void *)(a1 + 960) = &unk_26C5C4768;
  return a1;
}

void sub_21507C5A4(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v4);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v3);
  *(void *)(v1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 799) < 0) {
    operator delete(*(void **)(v1 + 776));
  }
  *(void *)(v1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 751) < 0) {
    operator delete(*(void **)(v1 + 728));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(void *)(v1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 639) < 0) {
    operator delete(*(void **)(v1 + 616));
  }
  *(void *)(v1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(v1 + 591) < 0) {
    operator delete(*(void **)(v1 + 568));
  }
  mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~DatabaseTable(v1);
  _Unwind_Resume(a1);
}

void sub_21507CD04()
{
  *(void *)(v1 - 176) = v0;
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  JUMPOUT(0x21507CA78);
}

void sub_21507CD20()
{
  STACK[0xB40] = v0;
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  JUMPOUT(0x21507CA80);
}

void sub_21507CD3C()
{
  *(void *)(v1 - 256) = v0;
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  JUMPOUT(0x21507CA88);
}

void sub_21507CD58()
{
  STACK[0xA60] = v0;
  if (SLOBYTE(STACK[0xA7F]) < 0) {
    operator delete((void *)STACK[0xA68]);
  }
  JUMPOUT(0x21507CA90);
}

void sub_21507CD74()
{
  STACK[0xAB0] = v0;
  if (SLOBYTE(STACK[0xACF]) < 0) {
    operator delete((void *)STACK[0xAB8]);
  }
  JUMPOUT(0x21507CA98);
}

void sub_21507CD90()
{
  STACK[0x950] = v0;
  if (SLOBYTE(STACK[0x96F]) < 0) {
    operator delete((void *)STACK[0x958]);
  }
  JUMPOUT(0x21507CAA8);
}

void sub_21507CDAC()
{
  STACK[0x9A0] = v0;
  if (SLOBYTE(STACK[0x9BF]) < 0) {
    operator delete((void *)STACK[0x9A8]);
  }
  JUMPOUT(0x21507CAB0);
}

void sub_21507CDC8()
{
  STACK[0x810] = v0;
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  JUMPOUT(0x21507CAD8);
}

void sub_21507CDE4()
{
  STACK[0x860] = v0;
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  JUMPOUT(0x21507CAE0);
}

void sub_21507CE00()
{
  STACK[0x690] = v0;
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  JUMPOUT(0x21507CB20);
}

void sub_21507CE1C()
{
  STACK[0x6E0] = v0;
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  JUMPOUT(0x21507CB28);
}

void sub_21507CE38()
{
  STACK[0x4E0] = v0;
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  JUMPOUT(0x21507CB70);
}

void sub_21507CE54()
{
  STACK[0x530] = v0;
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  JUMPOUT(0x21507CB78);
}

void sub_21507CE70()
{
  STACK[0x300] = v0;
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  JUMPOUT(0x21507CBD8);
}

void sub_21507CE8C()
{
  STACK[0x350] = v0;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  JUMPOUT(0x21507CBE0);
}

void sub_21507CEA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21507CC74);
}

void sub_21507CEC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21507CC7CLL);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  unint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_21507CF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 160);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 80);
}

void sub_21507D004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::columnCount()
{
  return 8;
}

void mlcore::DBInfoTable::~DBInfoTable(void **this)
{
  *this = &unk_26C5C41D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl((uint64_t)(this + 70));
  *this = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *this = &unk_26C5C41D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl((uint64_t)(this + 70));
  *this = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 432) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C41D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(a1 + 560);
  *(void *)a1 = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C41D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(a1 + 560);
  *(void *)a1 = &unk_26C5C36A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mlcore::DBInfoTable::persistentIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 71), *((void *)this + 72));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(void *)(a2 + 24) = *((void *)this + 73);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 148);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 151);
  *(void *)(a2 + 36) = *(void *)((char *)this + 596);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::DBInfoTable::primaryContainerPersistentIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 163);
  *(void *)(a2 + 36) = *(void *)((char *)this + 644);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::DBInfoTable::mediaFolderURLColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 687) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 83), *((void *)this + 84));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 664);
    *(void *)(a2 + 24) = *((void *)this + 85);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 172);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 692);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 719) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 87), *((void *)this + 88));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 696);
    *(void *)(a2 + 56) = *((void *)this + 89);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21507DAF8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::DBInfoTable::audioLanguageColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 91), *((void *)this + 92));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 728);
    *(void *)(a2 + 24) = *((void *)this + 93);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 188);
  *(void *)(a2 + 36) = *(void *)((char *)this + 756);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::DBInfoTable::subtitleLanguageColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 799) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 97), *((void *)this + 98));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 776);
    *(void *)(a2 + 24) = *((void *)this + 99);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 200);
  *(void *)(a2 + 36) = *(void *)((char *)this + 804);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::DBInfoTable::geniusCUIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 847) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 103), *((void *)this + 104));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 824);
    *(void *)(a2 + 24) = *((void *)this + 105);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 212);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 852);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 879) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 107), *((void *)this + 108));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 856);
    *(void *)(a2 + 56) = *((void *)this + 109);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21507DD50(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::DBInfoTable::BIBColumn@<X0>(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 911) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 111), *((void *)this + 112));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 888);
    *(void *)(a2 + 24) = *((void *)this + 113);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 228);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 916);
  __n128 result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 118), *((void *)this + 116), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_21507DE4C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::DBInfoTable::RIBColumn@<X0>(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 991) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 121), *((void *)this + 122));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 968);
    *(void *)(a2 + 24) = *((void *)this + 123);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 248);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 996);
  __n128 result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 128), *((void *)this + 126), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_21507DF48(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  unint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_21507DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4448);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4400);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4352);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 4240);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4192);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4144);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4096);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4048);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4000);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3952);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3904);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3856);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 3792);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3744);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3696);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3648);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3600);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3552);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3504);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3456);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3408);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3360);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3312);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3264);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3216);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3168);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3120);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 3040);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2992);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2752);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2688);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2640);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2544);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2448);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2400);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2080);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2032);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1984);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1936);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1872);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1808);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1760);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1664);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1616);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1568);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1520);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1424);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1376);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1312);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1248);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1136);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 976);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 544);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_21507E464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::columnCount()
{
  return 87;
}

void mlcore::ContainerTable::~ContainerTable(mlcore::ContainerTable *this)
{
  *(void *)this = &unk_26C5C4168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 4544);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C4168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 4544);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4127);
  *(void *)(a1 + 4416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4447) < 0) {
    operator delete(*(void **)(a1 + 4424));
  }
  *(void *)(a1 + 4368) = &unk_26C5C3AF0;
  if (v2[272] < 0) {
    operator delete(*(void **)(a1 + 4376));
  }
  *(void *)(a1 + 4320) = &unk_26C5C3AF0;
  if (v2[224] < 0) {
    operator delete(*(void **)(a1 + 4328));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4192);
  *(void *)(a1 + 4144) = &unk_26C5C3AF0;
  if (v2[48] < 0) {
    operator delete(*(void **)(a1 + 4152));
  }
  *(void *)(a1 + 4096) = &unk_26C5C3AF0;
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4104));
  }
  *(void *)(a1 + 4048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4079) < 0) {
    operator delete(*(void **)(a1 + 4056));
  }
  *(void *)(a1 + 4000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4031) < 0) {
    operator delete(*(void **)(a1 + 4008));
  }
  *(void *)(a1 + 3952) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3983) < 0) {
    operator delete(*(void **)(a1 + 3960));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3888);
  *(void *)(a1 + 3840) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3871) < 0) {
    operator delete(*(void **)(a1 + 3848));
  }
  *(void *)(a1 + 3792) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3823) < 0) {
    operator delete(*(void **)(a1 + 3800));
  }
  *(void *)(a1 + 3744) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3775) < 0) {
    operator delete(*(void **)(a1 + 3752));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3680);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3616);
  *(void *)(a1 + 3568) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3599) < 0) {
    operator delete(*(void **)(a1 + 3576));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3504);
  *(void *)(a1 + 3456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3487) < 0) {
    operator delete(*(void **)(a1 + 3464));
  }
  *(void *)(a1 + 3408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3439) < 0) {
    operator delete(*(void **)(a1 + 3416));
  }
  *(void *)(a1 + 3360) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3391) < 0) {
    operator delete(*(void **)(a1 + 3368));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3296);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3168);
  *(void *)(a1 + 3120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3151) < 0) {
    operator delete(*(void **)(a1 + 3128));
  }
  *(void *)(a1 + 3072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3103) < 0) {
    operator delete(*(void **)(a1 + 3080));
  }
  *(void *)(a1 + 3024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3055) < 0) {
    operator delete(*(void **)(a1 + 3032));
  }
  *(void *)(a1 + 2976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3007) < 0) {
    operator delete(*(void **)(a1 + 2984));
  }
  *(void *)(a1 + 2928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2959) < 0) {
    operator delete(*(void **)(a1 + 2936));
  }
  *(void *)(a1 + 2880) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2911) < 0) {
    operator delete(*(void **)(a1 + 2888));
  }
  *(void *)(a1 + 2832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2863) < 0) {
    operator delete(*(void **)(a1 + 2840));
  }
  *(void *)(a1 + 2784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2815) < 0) {
    operator delete(*(void **)(a1 + 2792));
  }
  *(void *)(a1 + 2736) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2767) < 0) {
    operator delete(*(void **)(a1 + 2744));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  *(void *)(a1 + 2512) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2543) < 0) {
    operator delete(*(void **)(a1 + 2520));
  }
  *(void *)(a1 + 2464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2495) < 0) {
    operator delete(*(void **)(a1 + 2472));
  }
  *(void *)(a1 + 2416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2447) < 0) {
    operator delete(*(void **)(a1 + 2424));
  }
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2240);
  *(void *)(a1 + 2192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2223) < 0) {
    operator delete(*(void **)(a1 + 2200));
  }
  *(void *)(a1 + 2144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2175) < 0) {
    operator delete(*(void **)(a1 + 2152));
  }
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  *(void *)(a1 + 1952) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1983) < 0) {
    operator delete(*(void **)(a1 + 1960));
  }
  *(void *)(a1 + 1904) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1935) < 0) {
    operator delete(*(void **)(a1 + 1912));
  }
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  *(void *)(a1 + 1744) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1775) < 0) {
    operator delete(*(void **)(a1 + 1752));
  }
  *(void *)(a1 + 1696) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1727) < 0) {
    operator delete(*(void **)(a1 + 1704));
  }
  *(void *)(a1 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1679) < 0) {
    operator delete(*(void **)(a1 + 1656));
  }
  *(void *)(a1 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1631) < 0) {
    operator delete(*(void **)(a1 + 1608));
  }
  *(void *)(a1 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1583) < 0) {
    operator delete(*(void **)(a1 + 1560));
  }
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1424);
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  *(void *)(a1 + 1280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*(void **)(a1 + 1288));
  }
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  *(void *)(a1 + 944) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  *(void *)(a1 + 896) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*(void **)(a1 + 904));
  }
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 688);
  *(void *)(a1 + 640) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  *(void *)(a1 + 592) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4383);
  *(void *)a1 = &unk_26C5C3638;
  *(void *)(a1 + 4496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4527) < 0) {
    operator delete(*(void **)(a1 + 4504));
  }
  *(void *)(a1 + 4448) = &unk_26C5C3AF0;
  if (v2[96] < 0) {
    operator delete(*(void **)(a1 + 4456));
  }
  *(void *)(a1 + 4400) = &unk_26C5C3AF0;
  if (v2[48] < 0) {
    operator delete(*(void **)(a1 + 4408));
  }
  *(void *)(a1 + 4352) = &unk_26C5C3AF0;
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4360));
  }
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4143);
  *(void *)(a1 + 4224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4255) < 0) {
    operator delete(*(void **)(a1 + 4232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4160);
  *(void *)(a1 + 4112) = &unk_26C5C3AF0;
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4120));
  }
  *(void *)(a1 + 4064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4095) < 0) {
    operator delete(*(void **)(a1 + 4072));
  }
  *(void *)(a1 + 4016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4047) < 0) {
    operator delete(*(void **)(a1 + 4024));
  }
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3920) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3951) < 0) {
    operator delete(*(void **)(a1 + 3928));
  }
  *(void *)(a1 + 3872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3903) < 0) {
    operator delete(*(void **)(a1 + 3880));
  }
  *(void *)(a1 + 3824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3855) < 0) {
    operator delete(*(void **)(a1 + 3832));
  }
  *(void *)(a1 + 3776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3807) < 0) {
    operator delete(*(void **)(a1 + 3784));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3616) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3647) < 0) {
    operator delete(*(void **)(a1 + 3624));
  }
  *(void *)(a1 + 3568) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3599) < 0) {
    operator delete(*(void **)(a1 + 3576));
  }
  *(void *)(a1 + 3520) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3551) < 0) {
    operator delete(*(void **)(a1 + 3528));
  }
  *(void *)(a1 + 3472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3503) < 0) {
    operator delete(*(void **)(a1 + 3480));
  }
  *(void *)(a1 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3455) < 0) {
    operator delete(*(void **)(a1 + 3432));
  }
  return mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3407) < 0) {
    operator delete(*(void **)(a1 + 3384));
  }
  *(void *)(a1 + 3328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3359) < 0) {
    operator delete(*(void **)(a1 + 3336));
  }
  *(void *)(a1 + 3280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3311) < 0) {
    operator delete(*(void **)(a1 + 3288));
  }
  *(void *)(a1 + 3232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3263) < 0) {
    operator delete(*(void **)(a1 + 3240));
  }
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3167) < 0) {
    operator delete(*(void **)(a1 + 3144));
  }
  *(void *)(a1 + 3088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3119) < 0) {
    operator delete(*(void **)(a1 + 3096));
  }
  *(void *)(a1 + 3040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3071) < 0) {
    operator delete(*(void **)(a1 + 3048));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2847) < 0) {
    operator delete(*(void **)(a1 + 2824));
  }
  *(void *)(a1 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2799) < 0) {
    operator delete(*(void **)(a1 + 2776));
  }
  *(void *)(a1 + 2720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2751) < 0) {
    operator delete(*(void **)(a1 + 2728));
  }
  *(void *)(a1 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2703) < 0) {
    operator delete(*(void **)(a1 + 2680));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2512) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2543) < 0) {
    operator delete(*(void **)(a1 + 2520));
  }
  *(void *)(a1 + 2464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2495) < 0) {
    operator delete(*(void **)(a1 + 2472));
  }
  *(void *)(a1 + 2416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2447) < 0) {
    operator delete(*(void **)(a1 + 2424));
  }
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  *(void *)(a1 + 2320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2351) < 0) {
    operator delete(*(void **)(a1 + 2328));
  }
  return mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2303) < 0) {
    operator delete(*(void **)(a1 + 2280));
  }
  *(void *)(a1 + 2224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2255) < 0) {
    operator delete(*(void **)(a1 + 2232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1952) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1983) < 0) {
    operator delete(*(void **)(a1 + 1960));
  }
  *(void *)(a1 + 1904) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1935) < 0) {
    operator delete(*(void **)(a1 + 1912));
  }
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1632) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1663) < 0) {
    operator delete(*(void **)(a1 + 1640));
  }
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1392) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1423) < 0) {
    operator delete(*(void **)(a1 + 1400));
  }
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::MediaTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~MediaTable(void *a1)
{
  *a1 = &unk_26C5C4168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(a1 + 568));
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *a1 = &unk_26C5C4168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(a1 + 568));
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4303);
  *(void *)(a1 + 4368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4399) < 0) {
    operator delete(*(void **)(a1 + 4376));
  }
  *(void *)(a1 + 4320) = &unk_26C5C3AF0;
  if (v2[48] < 0) {
    operator delete(*(void **)(a1 + 4328));
  }
  *(void *)(a1 + 4272) = &unk_26C5C3AF0;
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4280));
  }
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4303);
  *(void *)(a1 + 4320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4351) < 0) {
    operator delete(*(void **)(a1 + 4328));
  }
  *(void *)(a1 + 4272) = &unk_26C5C3AF0;
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4280));
  }
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 4272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4303) < 0) {
    operator delete(*(void **)(a1 + 4280));
  }
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4160);
  *(void *)(a1 + 4112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4143) < 0) {
    operator delete(*(void **)(a1 + 4120));
  }
  *(void *)(a1 + 4064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4095) < 0) {
    operator delete(*(void **)(a1 + 4072));
  }
  *(void *)(a1 + 4016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4047) < 0) {
    operator delete(*(void **)(a1 + 4024));
  }
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 4112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4143) < 0) {
    operator delete(*(void **)(a1 + 4120));
  }
  *(void *)(a1 + 4064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4095) < 0) {
    operator delete(*(void **)(a1 + 4072));
  }
  *(void *)(a1 + 4016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4047) < 0) {
    operator delete(*(void **)(a1 + 4024));
  }
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 4064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4095) < 0) {
    operator delete(*(void **)(a1 + 4072));
  }
  *(void *)(a1 + 4016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4047) < 0) {
    operator delete(*(void **)(a1 + 4024));
  }
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 4016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 4047) < 0) {
    operator delete(*(void **)(a1 + 4024));
  }
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3999) < 0) {
    operator delete(*(void **)(a1 + 3976));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3903) < 0) {
    operator delete(*(void **)(a1 + 3880));
  }
  *(void *)(a1 + 3824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3855) < 0) {
    operator delete(*(void **)(a1 + 3832));
  }
  *(void *)(a1 + 3776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3807) < 0) {
    operator delete(*(void **)(a1 + 3784));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3855) < 0) {
    operator delete(*(void **)(a1 + 3832));
  }
  *(void *)(a1 + 3776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3807) < 0) {
    operator delete(*(void **)(a1 + 3784));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3807) < 0) {
    operator delete(*(void **)(a1 + 3784));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3664) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3695) < 0) {
    operator delete(*(void **)(a1 + 3672));
  }
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3568) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3599) < 0) {
    operator delete(*(void **)(a1 + 3576));
  }
  *(void *)(a1 + 3520) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3551) < 0) {
    operator delete(*(void **)(a1 + 3528));
  }
  *(void *)(a1 + 3472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3503) < 0) {
    operator delete(*(void **)(a1 + 3480));
  }
  *(void *)(a1 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3455) < 0) {
    operator delete(*(void **)(a1 + 3432));
  }
  return mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3520) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3551) < 0) {
    operator delete(*(void **)(a1 + 3528));
  }
  *(void *)(a1 + 3472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3503) < 0) {
    operator delete(*(void **)(a1 + 3480));
  }
  *(void *)(a1 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3455) < 0) {
    operator delete(*(void **)(a1 + 3432));
  }
  return mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3503) < 0) {
    operator delete(*(void **)(a1 + 3480));
  }
  *(void *)(a1 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3455) < 0) {
    operator delete(*(void **)(a1 + 3432));
  }
  return mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3455) < 0) {
    operator delete(*(void **)(a1 + 3432));
  }
  return mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3359) < 0) {
    operator delete(*(void **)(a1 + 3336));
  }
  *(void *)(a1 + 3280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3311) < 0) {
    operator delete(*(void **)(a1 + 3288));
  }
  *(void *)(a1 + 3232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3263) < 0) {
    operator delete(*(void **)(a1 + 3240));
  }
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3311) < 0) {
    operator delete(*(void **)(a1 + 3288));
  }
  *(void *)(a1 + 3232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3263) < 0) {
    operator delete(*(void **)(a1 + 3240));
  }
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3263) < 0) {
    operator delete(*(void **)(a1 + 3240));
  }
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3119) < 0) {
    operator delete(*(void **)(a1 + 3096));
  }
  *(void *)(a1 + 3040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3071) < 0) {
    operator delete(*(void **)(a1 + 3048));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3071) < 0) {
    operator delete(*(void **)(a1 + 3048));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2799) < 0) {
    operator delete(*(void **)(a1 + 2776));
  }
  *(void *)(a1 + 2720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2751) < 0) {
    operator delete(*(void **)(a1 + 2728));
  }
  *(void *)(a1 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2703) < 0) {
    operator delete(*(void **)(a1 + 2680));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2751) < 0) {
    operator delete(*(void **)(a1 + 2728));
  }
  *(void *)(a1 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2703) < 0) {
    operator delete(*(void **)(a1 + 2680));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2703) < 0) {
    operator delete(*(void **)(a1 + 2680));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<37ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  return mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<39ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2495) < 0) {
    operator delete(*(void **)(a1 + 2472));
  }
  *(void *)(a1 + 2416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2447) < 0) {
    operator delete(*(void **)(a1 + 2424));
  }
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  *(void *)(a1 + 2320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2351) < 0) {
    operator delete(*(void **)(a1 + 2328));
  }
  return mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2447) < 0) {
    operator delete(*(void **)(a1 + 2424));
  }
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  *(void *)(a1 + 2320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2351) < 0) {
    operator delete(*(void **)(a1 + 2328));
  }
  return mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  *(void *)(a1 + 2320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2351) < 0) {
    operator delete(*(void **)(a1 + 2328));
  }
  return mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<42ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2351) < 0) {
    operator delete(*(void **)(a1 + 2328));
  }
  return mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<44ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2255) < 0) {
    operator delete(*(void **)(a1 + 2232));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<45ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<46ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<48ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2000) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2031) < 0) {
    operator delete(*(void **)(a1 + 2008));
  }
  return mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<50ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1904) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1935) < 0) {
    operator delete(*(void **)(a1 + 1912));
  }
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<51ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<52ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  return mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<56ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<57ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<58ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<59ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<61ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<62ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<63ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<64ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<65ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<66ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<68ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<69ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<70ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<71ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<72ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<73ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<75ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<76ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<77ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<78ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<79ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<81ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<82ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<83ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::ContainerTable::datePlayedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 593), *((void *)this + 594));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4744);
    *(void *)(a2 + 24) = *((void *)this + 595);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1192);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1195);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4772);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerTable::containedMediaTypeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5071;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 631), *((void *)this + 632));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5048);
    *(void *)(a2 + 24) = *((void *)this + 633);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1268);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::workoutTemplateIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5119;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 637), *((void *)this + 638));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5096);
    *(void *)(a2 + 24) = *((void *)this + 639);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1280);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::isIgnorableiTunesPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5215;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 649), *((void *)this + 650));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5192);
    *(void *)(a2 + 24) = *((void *)this + 651);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1304);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::playCountUserColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5327;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 663), *((void *)this + 664));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5304);
    *(void *)(a2 + 24) = *((void *)this + 665);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1332);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::playCountRecentColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5375;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 669), *((void *)this + 670));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5352);
    *(void *)(a2 + 24) = *((void *)this + 671);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1344);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartPlaylistEvaluationOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5471;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 681), *((void *)this + 682));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5448);
    *(void *)(a2 + 24) = *((void *)this + 683);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1368);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartIsDynamicColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5567;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 693), *((void *)this + 694));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5544);
    *(void *)(a2 + 24) = *((void *)this + 695);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1392);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartIsFilteredColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5615;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 699), *((void *)this + 700));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5592);
    *(void *)(a2 + 24) = *((void *)this + 701);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1404);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartEnabledOnlyColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5711;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 711), *((void *)this + 712));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5688);
    *(void *)(a2 + 24) = *((void *)this + 713);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1428);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartIsLimitedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5759;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 717), *((void *)this + 718));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5736);
    *(void *)(a2 + 24) = *((void *)this + 719);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1440);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartLimitKindColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5807;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 723), *((void *)this + 724));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5784);
    *(void *)(a2 + 24) = *((void *)this + 725);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1452);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartLimitOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5855;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 729), *((void *)this + 730));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5832);
    *(void *)(a2 + 24) = *((void *)this + 731);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1464);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::smartLimitValueColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5903) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 735), *((void *)this + 736));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5880);
    *(void *)(a2 + 24) = *((void *)this + 737);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1476);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1479);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5908);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerTable::smartReverseLimitOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 5951;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 741), *((void *)this + 742));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5928);
    *(void *)(a2 + 24) = *((void *)this + 743);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1488);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::playOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6079;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 757), *((void *)this + 758));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6056);
    *(void *)(a2 + 24) = *((void *)this + 759);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1520);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::isReversedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6127;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 763), *((void *)this + 764));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6104);
    *(void *)(a2 + 24) = *((void *)this + 765);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1532);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::albumFieldOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6175;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 769), *((void *)this + 770));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6152);
    *(void *)(a2 + 24) = *((void *)this + 771);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1544);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::repeatModeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6223;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 775), *((void *)this + 776));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6200);
    *(void *)(a2 + 24) = *((void *)this + 777);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1556);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::shuffleItemsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6271;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 781), *((void *)this + 782));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6248);
    *(void *)(a2 + 24) = *((void *)this + 783);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1568);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::hasBeenShuffledColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6319;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 787), *((void *)this + 788));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6296);
    *(void *)(a2 + 24) = *((void *)this + 789);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1580);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::filePathColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6367;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6367) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 793), *((void *)this + 794));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6344);
    *(void *)(a2 + 24) = *((void *)this + 795);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1592);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 797), *((void *)this + 798));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6376);
    *(void *)(a2 + 56) = *((void *)this + 799);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215084168(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isSaveableColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6431;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 801), *((void *)this + 802));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6408);
    *(void *)(a2 + 24) = *((void *)this + 803);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1608);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::isSrcRemoteColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6479;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 807), *((void *)this + 808));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6456);
    *(void *)(a2 + 24) = *((void *)this + 809);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1620);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::isIgnoredSyncingColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6527;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 813), *((void *)this + 814));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6504);
    *(void *)(a2 + 24) = *((void *)this + 815);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1632);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::containerTypeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6575;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 819), *((void *)this + 820));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6552);
    *(void *)(a2 + 24) = *((void *)this + 821);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1644);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::isContainerTypeActiveTargetColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6623;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 825), *((void *)this + 826));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6600);
    *(void *)(a2 + 24) = *((void *)this + 827);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1656);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::origDateModifiedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 831), *((void *)this + 832));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6648);
    *(void *)(a2 + 24) = *((void *)this + 833);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1668);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1671);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6676);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerTable::hasCloudPlayOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 6767;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 843), *((void *)this + 844));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6744);
    *(void *)(a2 + 24) = *((void *)this + 845);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1692);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::cloudAuthorStoreURLColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7247;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7247) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 903), *((void *)this + 904));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7224);
    *(void *)(a2 + 24) = *((void *)this + 905);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1812);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 907), *((void *)this + 908));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7256);
    *(void *)(a2 + 56) = *((void *)this + 909);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215084768(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudMinimumRefreshIntervalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 911), *((void *)this + 912));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7288);
    *(void *)(a2 + 24) = *((void *)this + 913);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1828);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1831);
  *(void *)(a2 + 36) = *(void *)((char *)this + 7316);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerTable::cloudLastUpdateTimeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 917), *((void *)this + 918));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7336);
    *(void *)(a2 + 24) = *((void *)this + 919);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1840);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1843);
  *(void *)(a2 + 36) = *(void *)((char *)this + 7364);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ContainerTable::cloudSubscriberCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7407;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 923), *((void *)this + 924));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7384);
    *(void *)(a2 + 24) = *((void *)this + 925);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1852);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::cloudSubscriberPlayCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7455;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 929), *((void *)this + 930));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7432);
    *(void *)(a2 + 24) = *((void *)this + 931);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1864);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::cloudSubscriberLikeCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7503;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 935), *((void *)this + 936));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7480);
    *(void *)(a2 + 24) = *((void *)this + 937);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1876);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::externalVendorIdentifierColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7743;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7743) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 965), *((void *)this + 966));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7720);
    *(void *)(a2 + 24) = *((void *)this + 967);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1936);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 969), *((void *)this + 970));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7752);
    *(void *)(a2 + 56) = *((void *)this + 971);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215084C08(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::externalVendorContainerTagColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 7871;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7871) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 981), *((void *)this + 982));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7848);
    *(void *)(a2 + 24) = *((void *)this + 983);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1968);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 985), *((void *)this + 986));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7880);
    *(void *)(a2 + 56) = *((void *)this + 987);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215084D38(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsSharingDisabledColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 8031;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1001), *((void *)this + 1002));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8008);
    *(void *)(a2 + 24) = *((void *)this + 1003);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2008);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ContainerTable::groupingSortKeyColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 8463;
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8463) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1055), *((void *)this + 1056));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8440);
    *(void *)(a2 + 24) = *((void *)this + 1057);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2116);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  long long v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1059), *((void *)this + 1060));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8472);
    *(void *)(a2 + 56) = *((void *)this + 1061);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_215084F18(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>>,mlcore::ModelPropertyBase *>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  operator delete(__p);
}

uint64_t mlcore::GetForeignProperty<double>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string v8 = operator new(0x28uLL);
  *std::string v8 = &unk_26C5C9180;
  v8[1] = a2;
  uint64_t v8[2] = a1;
  v8[3] = v6;
  v8[4] = v7;
  v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_215085088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<mediaplatform::Data>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string v8 = operator new(0x28uLL);
  *std::string v8 = &unk_26C5C90D0;
  v8[1] = a2;
  uint64_t v8[2] = a1;
  v8[3] = v6;
  v8[4] = v7;
  v12[3] = v8;
  uint64_t ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v11, (uint64_t)v12);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100](v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ForeignProperty;
}

void sub_2150851BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<mlcore::ModelPropertyBase * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelPropertyBase::name(mlcore::ModelPropertyBase *this)
{
  return (uint64_t)this + 16;
}

std::string *mlcore::ModelPropertyBase::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

uint64_t mlcore::ModelPropertyBase::aliasName(mlcore::ModelPropertyBase *this)
{
  return (uint64_t)this + 40;
}

std::string *mlcore::ModelPropertyBase::setAliasName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

uint64_t mlcore::ModelPropertyBase::entityClass(mlcore::ModelPropertyBase *this)
{
  return *((void *)this + 1);
}

uint64_t mlcore::ModelPropertyBase::setEntityClass(uint64_t this, mlcore::EntityClass *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t mlcore::ModelPropertyBase::compareCongruentPropertyValuesFromCaches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v8 != (*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3)) {
    __assert_rtn("compareCongruentPropertyValuesFromCaches", "ModelProperty.cpp", 41, "this->propertyType() == otherProperty->propertyType()");
  }
  switch((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1))
  {
    case 0u:
      char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      goto LABEL_18;
    case 1u:
      char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      goto LABEL_18;
    case 2u:
      char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      goto LABEL_18;
    case 3u:
      char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      goto LABEL_18;
    case 4u:
      char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      uint64_t v12 = a3;
      uint64_t v13 = a4;
LABEL_18:
      uint64_t result = v9(v10, v11, v12, v13);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t mlcore::ModelProperty<std::string>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v18, a2, a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v17, a3, a1);
  int v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  uint64_t v6 = (void *)v17.__r_.__value_.__r.__words[0];
  int v7 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  int v8 = (void *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v18;
  }
  else {
    uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v17.__r_.__value_.__l.__size_;
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v17;
  }
  else {
    uint64_t v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v11 >= size) {
    size_t v13 = size;
  }
  else {
    size_t v13 = v11;
  }
  unsigned int v14 = memcmp(v10, v12, v13);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v8);
LABEL_18:
  unsigned int v15 = v11 < size;
  if (size < v11) {
    unsigned int v15 = -1;
  }
  if (v14) {
    return v14;
  }
  else {
    return v15;
  }
}

void sub_2150855C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v14, a2, a1);
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v11, a3, a1);
  int v5 = v15;
  int v6 = v12;
  if (v15 >= v12) {
    size_t v7 = v12;
  }
  else {
    size_t v7 = v15;
  }
  unsigned int v8 = memcmp(__s1, __s2, v7);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (v5 - v6);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)&v11);
  mediaplatform::Data::~Data((mediaplatform::Data *)v14);
  return v9;
}

void sub_215085664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

mediaplatform::Data *mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty(mediaplatform::Data *a1, uint64_t a2, unint64_t a3)
{
  int v5 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)(a2 + 8), a3);
  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(void *)a3 + 40))(&v10, a3);
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA60, MEMORY[0x263F8C068]);
  }
  int v6 = (const void *)v5[6];
  size_t v7 = v5[4];
  return mediaplatform::Data::Data(a1, v6, v7, 1);
}

void sub_215085768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t mlcore::ModelProperty<std::string>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v19, a2, a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v18, a4, a3);
  int v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  size_t v7 = (void *)v18.__r_.__value_.__r.__words[0];
  int v8 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  uint64_t v9 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v19;
  }
  else {
    uint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = v18.__r_.__value_.__l.__size_;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v13 = &v18;
  }
  else {
    size_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v12 >= size) {
    size_t v14 = size;
  }
  else {
    size_t v14 = v12;
  }
  unsigned int v15 = memcmp(v11, v13, v14);
  if (v6 < 0)
  {
    operator delete(v7);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v9);
LABEL_18:
  unsigned int v16 = v12 < size;
  if (size < v12) {
    unsigned int v16 = -1;
  }
  if (v15) {
    return v15;
  }
  else {
    return v16;
  }
}

void sub_215085880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v15, a2, a1);
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v12, a4, a3);
  int v6 = v16;
  int v7 = v13;
  if (v16 >= v13) {
    size_t v8 = v13;
  }
  else {
    size_t v8 = v16;
  }
  unsigned int v9 = memcmp(__s1, __s2, v8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = (v6 - v7);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)&v12);
  mediaplatform::Data::~Data((mediaplatform::Data *)v15);
  return v10;
}

void sub_215085920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::propertyType()
{
  return 4;
}

void *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore22GetForeignPropertyBaseEPNS_17ModelPropertyBaseES1_NSt3__110shared_ptrINS_9PredicateEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9338;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = &unk_26C5C9338;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9338;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C5C9338;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void mlcore::ItemKVSTable::~ItemKVSTable(mlcore::ItemKVSTable *this)
{
  *(void *)this = &unk_26C5C3DB0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 240);
  *((void *)this + 24) = &unk_26C5C3AF0;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  *(void *)this = &unk_26C5C3280;
  *((void *)this + 18) = &unk_26C5C3AF0;
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3DB0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 240);
  *((void *)this + 24) = &unk_26C5C3AF0;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  *(void *)this = &unk_26C5C3280;
  *((void *)this + 18) = &unk_26C5C3AF0;
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mlcore::ItemKVSTable::persistentIDColumn(mlcore::ItemKVSTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::ItemKVSTable::keyColumn(mlcore::ItemKVSTable *this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistItem>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::entityType()
{
  return 9;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

double mlcore::TypedEntityClass<mlcore::PlaylistItem>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(v10, a2);
  double v8 = v10[0];
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache(*(void *)&v10[0] + 8, a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(void *)&v8 + 176, v11[0], v11)[3] = a2;
  double result = v10[0];
  *a4 = *(_OWORD *)v10;
  return result;
}

void sub_215085F64(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x100uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C5CA398;
  double result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((void *)v4 + 4) = &unk_26C5C4EE8;
  *((void *)v4 + 30) = &unk_26C5C4F10;
  *((void *)v4 + 31) = a2;
  *((void *)v4 + 3) = &unk_26C5C4C10;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::PlaylistItem::~PlaylistItem(mlcore::PlaylistItem *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::PlaylistItemPropertyContainerPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistItemPropertyContainerPersistentID(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistItemPropertyContainerPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyContainerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyContainerPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyContainerPersistentID(void)::$_0 &&>>()
{
}

void sub_215086454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistItemPropertyTitle(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::PlaylistItemPropertyArtistName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyArtistName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

uint64_t mlcore::PlaylistItemPropertyItemArtistName(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyItemArtistName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

double mlcore::PlaylistItem::PlaylistItem(mlcore::PlaylistItem *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C4C10;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C4C10;
  return result;
}

mlcore::PlaylistItem *mlcore::PlaylistItem::PlaylistItem(mlcore::PlaylistItem *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  double v8 = (char *)this + 176;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = 0;
  *(void *)this = &unk_26C5C4C10;
  unint64_t v12 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  unsigned int v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((void *)v9 + 3) = a2;
  unint64_t v12 = mlcore::PlaylistItemPropertyItemPersistentID(v9);
  uint64_t v10 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((void *)v10 + 3) = a3;
  unint64_t v12 = mlcore::PlaylistItemPropertyPosition(v10);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12)[3] = a4;
  return this;
}

{
  char *v8;
  mlcore *v9;
  mlcore *v10;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  double v8 = (char *)this + 176;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = 0;
  *(void *)this = &unk_26C5C4C10;
  unint64_t v12 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  unsigned int v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((void *)v9 + 3) = a2;
  unint64_t v12 = mlcore::PlaylistItemPropertyItemPersistentID(v9);
  uint64_t v10 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((void *)v10 + 3) = a3;
  unint64_t v12 = mlcore::PlaylistItemPropertyPosition(v10);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12)[3] = a4;
  return this;
}

void sub_215086838(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

void sub_2150869A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItem::playlistPersistentID(mlcore::PlaylistItem *this)
{
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::PlaylistItemPropertyContainerPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::PlaylistItem::setPlaylistPersistentID(mlcore::PlaylistItem *this, uint64_t a2)
{
  unint64_t v5 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::PlaylistItem::itemPersistentID(mlcore::PlaylistItem *this)
{
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::PlaylistItem::setItemPersistentID(mlcore::PlaylistItem *this, uint64_t a2)
{
  unint64_t v5 = mlcore::PlaylistItemPropertyItemPersistentID(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::PlaylistItem::position(mlcore::PlaylistItem *this)
{
  uint64_t v2 = (mlcore::ModelPropertyBase *)mlcore::PlaylistItemPropertyPosition(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::PlaylistItem::setPosition(mlcore::PlaylistItem *this, uint64_t a2)
{
  unint64_t v5 = mlcore::PlaylistItemPropertyPosition(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::PlaylistItem::UUID(mlcore::PlaylistItem *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::PlaylistItemPropertyUUID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::PlaylistItem::setUUID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PlaylistItemPropertyUUID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::PlaylistItem::positionUUID(mlcore::PlaylistItem *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::PlaylistItemPropertyPositionUUID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::PlaylistItem::setPositionUUID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::PlaylistItemPropertyPositionUUID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

const void **mediaplatform::PropertyList::descriptionAttributes@<X0>(CFTypeRef *this@<X0>, std::string **a2@<X8>)
{
  *(void *)&long long v16 = *MEMORY[0x263EF8340];
  CFStringRef v3 = CFCopyDescription(this[1]);
  CFStringRef v11 = v3;
  if (v3)
  {
    CFStringRef v4 = v3;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    CFIndex Length = CFStringGetLength(v3);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      CFIndex v7 = MaximumSizeForEncoding + 1;
      double v8 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(v4, (char *)v8, v7, 0x8000100u))
      {
        MEMORY[0x2166B2280](&v12, v8);
        free(v8);
        *(_OWORD *)std::string __p = v12;
        uint64_t v15 = v13;
        goto LABEL_8;
      }
      free(v8);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "(invalid)");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "(null)");
  }
LABEL_8:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(void *)&long long v12 = a2;
  BYTE8(v12) = 0;
  unsigned int v9 = (std::string *)operator new(0x18uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, &v16, v9);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
}

void sub_215086DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

const void **mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void mediaplatform::PropertyList::~PropertyList(const void **this)
{
  *this = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *this = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(this + 1);
}

const void **mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

mediaplatform::PropertyList *mediaplatform::PropertyList::PropertyList(mediaplatform::PropertyList *this, const mediaplatform::FilePath *a2)
{
  *(void *)this = &unk_26C5BEA78;
  *((void *)this + 1) = 0;
  CFStringRef v3 = (const void **)((char *)this + 8);
  if (*((void *)a2 + 2) != *((void *)a2 + 1)) {
    mediaplatform::Data::Data((mediaplatform::Data *)v5, a2);
  }
  v5[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(v3, v5[0]);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v5);
  return this;
}

void sub_215086FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)va);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v2);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::_initializeDictionary(const void **this, const mediaplatform::Data *a2)
{
  CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *((const UInt8 **)a2 + 3), *((void *)a2 + 1));
  CFStringRef v11 = 0;
  CFDataRef v12 = v3;
  mediaplatform::CFPropertyListFromData(v3, 1uLL, &v11, (const void ***)cf);
  CFTypeRef v4 = cf[0];
  if (!cf[0])
  {
    uint64_t v10 = 0;
    mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(cf);
    mediaplatform::FormatString<mediaplatform::CFRetainedPointer<__CFError *>>(&v9);
    int v7 = 3;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)cf, &v7, (long long *)&v9);
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)cf);
  }
  CFRetain(cf[0]);
  uint64_t v10 = v4;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(cf);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(this + 1, v10);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v10);
  mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer(&v11);
  return mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)&v12);
}

void sub_21508712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a11);
  if (*(char *)(v11 - 41) < 0) {
    operator delete(*(void **)(v11 - 64));
  }
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)(v11 - 40));
  mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer((const void **)(v11 - 32));
  mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v4 = *a1;
  *a1 = cf;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

const void **mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void mediaplatform::FormatString<mediaplatform::CFRetainedPointer<__CFError *>>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>((std::string *)"Failed to parse plist data: {1}", a1, 0);
}

void sub_215087258(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void **mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>(std::string *a1, std::string *a2, std::string::size_type a3)
{
  char v6 = 0;
  int v7 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    std::string v46 = v7;
    if (*v7 == 123) {
      break;
    }
    if (!*v7)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v6 & 1);
      }
      return;
    }
LABEL_7:
    ++v7;
  }
  int v9 = v7[1];
  if (v9 == 123)
  {
    std::string v46 = v7 + 1;
    char v6 = 1;
    ++v7;
    goto LABEL_7;
  }
  if (v9 == 42)
  {
    std::string v46 = v7 + 2;
    int v34 = v7[2];
    if ((v34 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v35 = 0;
      size_t v36 = v7 + 3;
      do
      {
        long long v37 = v36;
        std::string v46 = v36;
        uint64_t v35 = (v34 - 48) + 10 * v35;
        ++v36;
        int v39 = *v37;
        uint64_t v38 = (unsigned __int8 *)(v37 - 1);
        int v34 = v39;
      }
      while ((v39 - 58) >= 0xFFFFFFF6);
      std::string v46 = (char *)(v38 + 2);
      if (*(v36 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>(v35);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v41, (const char **)&v46);
  if (v42) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>>();
  }
  uint64_t v10 = v46;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  size_t v11 = v49;
  if ((v49 & 0x80u) != 0) {
    size_t v11 = v48;
  }
  size_t v12 = v44;
  if (v44 <= v11) {
    size_t v12 = v11;
  }
  if (v43) {
    size_t v11 = v12;
  }
  mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>(v10, a2, v11 + i);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  size_t v14 = (char *)v13 + i;
  size_t v15 = v49;
  unsigned __int8 v16 = v49;
  size_t v17 = v48;
  if ((v49 & 0x80u) == 0) {
    size_t v18 = v49;
  }
  else {
    size_t v18 = v48;
  }
  if (v43 && (size_t v19 = v44, v20 = v44 - v18, v44 > v18))
  {
    if (v41)
    {
      if (v41 == 1)
      {
        unint64_t v26 = v20 >> 1;
        if (v20 >= 2)
        {
          if (v26 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = v20 >> 1;
          }
          do
          {
            *v14++ = v45;
            --v27;
          }
          while (v27);
          size_t v15 = v49;
          size_t v17 = v48;
          unsigned __int8 v16 = v49;
        }
        if ((v16 & 0x80u) == 0) {
          size_t v28 = v15;
        }
        else {
          size_t v28 = v17;
        }
        if (v28)
        {
          if ((v16 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v14, p_p, v28);
        }
        if (v20 != v26)
        {
          unint64_t v30 = v20 - (v20 >> 1);
          uint64_t v31 = &v14[v18];
          if (v30 <= 1) {
            unint64_t v30 = 1;
          }
          uint64_t v32 = -(uint64_t)v30;
          do
            *v31++ = v45;
          while (!__CFADD__(v32++, 1));
        }
      }
      else if (v41 == 2)
      {
        if (v44 != v18)
        {
          do
          {
            *v14++ = v45;
            --v20;
          }
          while (v20);
          size_t v15 = v49;
          size_t v17 = v48;
          unsigned __int8 v16 = v49;
        }
        size_t v21 = (v16 & 0x80u) == 0 ? v15 : v17;
        if (v21)
        {
          if ((v16 & 0x80u) == 0) {
            uint64_t v22 = &__p;
          }
          else {
            uint64_t v22 = __p;
          }
          __n128 v23 = v14;
          goto LABEL_47;
        }
      }
    }
    else
    {
      if (v18)
      {
        if ((v49 & 0x80u) == 0) {
          char v24 = &__p;
        }
        else {
          char v24 = __p;
        }
        memmove((char *)v13 + i, v24, v18);
      }
      if (v19 != v18)
      {
        size_t v25 = (size_t)v13 + v18;
        do
        {
          *(unsigned char *)(v25 + i) = v45;
          ++v25;
          --v20;
        }
        while (v20);
      }
    }
  }
  else if (v18)
  {
    if ((v49 & 0x80u) == 0) {
      uint64_t v22 = &__p;
    }
    else {
      uint64_t v22 = __p;
    }
    __n128 v23 = (char *)v13 + i;
    size_t v21 = v18;
LABEL_47:
    memmove(v23, v22, v21);
  }
  if ((char)v49 < 0) {
    operator delete(__p);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v6 & 1);
  }
}

void sub_2150876AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>();
}

void sub_21508772C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_215087788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150877E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mediaplatform::PropertyList *mediaplatform::PropertyList::PropertyList(mediaplatform::PropertyList *this, const mediaplatform::Data *a2)
{
  *(void *)this = &unk_26C5BEA78;
  *((void *)this + 1) = 0;
  mediaplatform::PropertyList::_initializeDictionary((const void **)this, a2);
  return this;
}

void sub_215087848(_Unwind_Exception *a1)
{
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v1);
  _Unwind_Resume(a1);
}

mediaplatform::PropertyList *mediaplatform::PropertyList::PropertyList(mediaplatform::PropertyList *this, CFDictionaryRef *a2)
{
  *(void *)this = &unk_26C5BEA78;
  *((void *)this + 1) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2[1]);
  return this;
}

{
  *(void *)this = &unk_26C5BEA78;
  *((void *)this + 1) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2[1]);
  return this;
}

uint64_t mediaplatform::PropertyList::PropertyList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5BEA78;
  *(void *)(a1 + 8) = 0;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=((const void **)(a1 + 8), *(CFTypeRef *)(a2 + 8));
  CFTypeRef v4 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void sub_215087988(_Unwind_Exception *a1)
{
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::PropertyList::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFDictionaryRef *)(a2 + 8));
    CFTypeRef v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 8) = MutableCopy;
  }
  return a1;
}

{
  const void *v4;

  if (a1 != a2)
  {
    mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=((const void **)(a1 + 8), *(CFTypeRef *)(a2 + 8));
    CFTypeRef v4 = *(const void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  return a1;
}

BOOL mediaplatform::PropertyList::operator==(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 8), *(CFTypeRef *)(a2 + 8)) != 0;
}

BOOL mediaplatform::PropertyList::operator!=(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 8), *(CFTypeRef *)(a2 + 8)) == 0;
}

const __CFDictionary *mediaplatform::PropertyList::valuesCount(mediaplatform::PropertyList *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 1);
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetCount(result);
  }
  return result;
}

BOOL mediaplatform::PropertyList::keyExists(uint64_t a1, const char *a2)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFTypeRef cf = v3;
  if (!v3)
  {
    CFStringRef v3 = &stru_26C5CB978;
    CFRetain(&stru_26C5CB978);
    CFTypeRef cf = &stru_26C5CB978;
  }
  Value = CFDictionaryGetValue(v2, v3);
  unint64_t v5 = Value;
  if (Value) {
    CFRetain(Value);
  }
  double v8 = v5;
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer(&cf);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(&v8);
  return v5 != 0;
}

void sub_215087B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **mediaplatform::PropertyList::propertyListData@<X0>(CFPropertyListRef *this@<X0>, CFPropertyListFormat format@<X1>, uint64_t a3@<X8>)
{
  CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x263EFFB08], this[1], format, 0, 0);
  if (Data)
  {
    CFDataRef v5 = Data;
    CFRetain(Data);
    theCFDataRef Data = v5;
    BytePtr = CFDataGetBytePtr(v5);
    size_t Length = CFDataGetLength(theData);
    mediaplatform::Data::Data((mediaplatform::Data *)a3, BytePtr, Length, 1);
  }
  else
  {
    theCFDataRef Data = 0;
    *(void *)a3 = &unk_26C5BF2D8;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)&theData);
}

void sub_215087C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)va);
  _Unwind_Resume(a1);
}

void *mediaplatform::PropertyList::PropertyList(void *a1, CFDictionaryRef *a2)
{
  *a1 = &unk_26C5BEA78;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *a2);
  return a1;
}

{
  *a1 = &unk_26C5BEA78;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *a2);
  return a1;
}

CFTypeRef mediaplatform::PropertyList::_cfValueForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2;
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  CFStringRef v6 = CFStringCreateWithCString(0, (const char *)a2, 0x8000100u);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v6)
  {
    CFStringRef v6 = &stru_26C5CB978;
    CFRetain(&stru_26C5CB978);
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&stru_26C5CB978;
  }
  Value = CFDictionaryGetValue(v5, v6);
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&cf.__r_.__value_.__l.__data_);
  if (!Value)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    mediaplatform::FormatString<std::string>(&cf, (std::string *)"no such key '{0}'", v3);
    std::runtime_error::runtime_error(exception, &cf);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA50, MEMORY[0x263F8C050]);
  }
  CFTypeRef result = CFRetain(Value);
  *a3 = Value;
  return result;
}

void sub_215087E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *mediaplatform::DatabaseValue::DatabaseValue(void *this, void *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t mediaplatform::DatabaseValue::value<int>(sqlite3_value **a1)
{
  return sqlite3_value_int(*a1);
}

sqlite3_int64 mediaplatform::DatabaseValue::value<long long>(sqlite3_value **a1)
{
  return sqlite3_value_int64(*a1);
}

double mediaplatform::DatabaseValue::value<double>(sqlite3_value **a1)
{
  return sqlite3_value_double(*a1);
}

void *mediaplatform::DatabaseValue::value<std::string>@<X0>(sqlite3_value **a1@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (unsigned __int8 *)sqlite3_value_text(*a1);
  size_t v5 = sqlite3_value_bytes(*a1);
  return std::string::basic_string[abi:ne180100](a2, v4, v5);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    CFStringRef v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    CFStringRef v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *mediaplatform::DatabaseValue::value<std::wstring>@<X0>(sqlite3_value **a1@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (void *)sqlite3_value_text16(*a1);
  unint64_t v5 = (uint64_t)sqlite3_value_bytes16(*a1) >> 2;
  return std::wstring::basic_string[abi:ne180100](a2, v4, v5);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

mediaplatform::Data *mediaplatform::DatabaseValue::value<mediaplatform::Data>@<X0>(sqlite3_value **a1@<X0>, mediaplatform::Data *a2@<X8>)
{
  CFTypeRef v4 = sqlite3_value_blob(*a1);
  size_t v5 = sqlite3_value_bytes(*a1);
  return mediaplatform::Data::Data(a2, v4, v5, 1);
}

uint64_t mediaplatform::DatabaseValue::type(sqlite3_value **this)
{
  unsigned int v1 = sqlite3_value_type(*this) - 1;
  if (v1 > 4) {
    return 0;
  }
  else {
    return dword_21511EED0[v1];
  }
}

void mlcore::DatabaseProperty::_SQLExpressionForIdentity(mlcore::DatabaseProperty *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(mlcore::DatabaseProperty *))(*(void *)this + 48))(this);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  (*(void (**)(void *__return_ptr))(*(void *)v5 + 24))(v20);
  CFStringRef v6 = (long long *)v20[0];
  uint64_t v7 = (*(uint64_t (**)(mlcore::DatabaseProperty *))(*(void *)this + 48))(this);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(&v21, v6, (long long *)(v8 + 8));
  uint64_t v10 = (mlcore::ModelPropertyBase *)mlcore::DatabasePropertyPropertyKey(v9);
  mlcore::Entity::valueForProperty<std::string>(&v19, (uint64_t)this, v10);
  size_t v11 = (std::__shared_weak_count *)operator new(0x50uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9790;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  size_t v12 = v11 + 1;
  mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue((uint64_t)&v11[1], (long long *)&v19, (long long *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (char *)operator new(0x48uLL);
  size_t v14 = v13;
  *(_OWORD *)(v13 + 8) = 0u;
  *(void *)uint64_t v13 = &unk_26C5C9BF0;
  size_t v15 = v13 + 24;
  long long v16 = v21;
  long long v21 = 0u;
  *((void *)v13 + 3) = &unk_26C5BEF00;
  *((_DWORD *)v13 + 8) = 13;
  *(_OWORD *)(v13 + 40) = v16;
  size_t v17 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    *((void *)v13 + 7) = v12;
    *((void *)v13 + 8) = v11;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    size_t v11 = v17;
  }
  else
  {
    *((void *)v13 + 7) = v12;
    *((void *)v13 + 8) = v11;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v14;
  *a2 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  __p[0] = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2150883C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DatabasePropertyPropertyKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::DatabasePropertyPropertyKey(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::DatabasePropertyPropertyKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyKey(void)::$_0 &&>>);
  }
  return mlcore::DatabasePropertyPropertyKey(void)::property;
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = &unk_26C5C38C0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  CFStringRef v6 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_215088550(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "'");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  for (; size; --size)
  {
    std::string::push_back(&v11, p_p->__r_.__value_.__s.__data_[0]);
    if (p_p->__r_.__value_.__s.__data_[0] == 39) {
      std::string::push_back(&v11, 39);
    }
    p_p = (std::string *)((char *)p_p + 1);
  }
  std::string::push_back(&v11, 39);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v11;
  }
  else {
    uint64_t v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = v11.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_35;
    }
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" /* ", 4);
    int v6 = *(char *)(a1 + 55);
    if (v6 >= 0) {
      uint64_t v7 = a1 + 32;
    }
    else {
      uint64_t v7 = *(void *)(a1 + 32);
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 40);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" */", 3);
    goto LABEL_35;
  }
  if (*(unsigned char *)(a1 + 55)) {
    goto LABEL_28;
  }
LABEL_35:
  std::stringbuf::str();
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v14);
}

void sub_2150887E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void mediaplatform::SQLLiteralValue<std::string>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C38C0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C38C0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyKey(void)::$_0 &&>>()
{
}

void sub_215088B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance(void)::_sharedInstance;
}

void sub_215088C50(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::DatabaseProperty>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::DatabaseProperty>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C5CA948;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C5F58;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_215089008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::DatabaseProperty>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::DatabaseProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::DatabaseProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

mlcore::MLDatabasePropertiesTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore25MLDatabasePropertiesTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::MLDatabasePropertiesTable **a1)
{
  char v2 = operator new(0x168uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CAEC0;
  __n128 result = mlcore::MLDatabasePropertiesTable::MLDatabasePropertiesTable((mlcore::MLDatabasePropertiesTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::MLDatabasePropertiesTable *)v2;
  return result;
}

void sub_21508917C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::DatabaseProperty::~DatabaseProperty(mlcore::DatabaseProperty *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::DatabasePropertyPropertyValue(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::DatabasePropertyPropertyValue(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::DatabasePropertyPropertyValue(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyValue(void)::$_0 &&>>);
  }
  return mlcore::DatabasePropertyPropertyValue(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyValue(void)::$_0 &&>>()
{
}

void sub_2150894E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseProperty::DatabaseProperty(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(void *)(a1 + 8) = &unk_26C5C4EE8;
  *(void *)(a1 + 216) = &unk_26C5C4F10;
  *(void *)(a1 + 224) = 0;
  *(void *)a1 = &unk_26C5C5F58;
  std::string::size_type v4 = mlcore::DatabasePropertyPropertyKey((mlcore *)a1);
  mlcore::Entity::setValueForProperty<std::string>(a1, a2, v4);
  return a1;
}

void sub_215089648(_Unwind_Exception *a1)
{
  *char v1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

double mlcore::DatabaseProperty::DatabaseProperty(mlcore::DatabaseProperty *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C5F58;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C5F58;
  return result;
}

void mlcore::DatabaseProperty::key(mlcore::DatabaseProperty *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::DatabasePropertyPropertyKey(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::DatabaseProperty::value(mlcore::DatabaseProperty *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::DatabasePropertyPropertyValue(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::DatabaseProperty::setValue(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::DatabasePropertyPropertyValue(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::Playlist>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Playlist>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::Playlist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

double mlcore::TypedEntityClass<mlcore::Playlist>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(v10, a2);
  double v8 = v10[0];
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache(*(void *)&v10[0] + 8, a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(void *)&v8 + 176, v11[0], v11)[3] = a2;
  double result = v10[0];
  *a4 = *(_OWORD *)v10;
  return result;
}

void sub_215089AA0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(void *a1, uint64_t a2)
{
  std::string::size_type v4 = (char *)operator new(0x110uLL);
  double result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)std::string::size_type v4 = &unk_26C5CB2E8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((void *)v4 + 4) = &unk_26C5C4EE8;
  *((void *)v4 + 30) = &unk_26C5C4F10;
  *((void *)v4 + 31) = a2;
  *((void *)v4 + 3) = &unk_26C5C8870;
  *((_OWORD *)v4 + 16) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::Playlist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Playlist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Playlist::~Playlist(mlcore::Playlist *this)
{
  mlcore::Playlist::~Playlist(this);
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_26C5C8870;
  char v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::PlaylistPropertyDatePlayed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyDatePlayed(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyDatePlayed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDatePlayed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayed(void)::$_0 &&>>()
{
}

void sub_215089F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayCountUser(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyPlayCountUser(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyPlayCountUser(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountUser(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayCountUser(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountUser(void)::$_0 &&>>()
{
}

void sub_21508A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayCountRecent(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyPlayCountRecent(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyPlayCountRecent(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountRecent(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountRecent(void)::$_0 &&>>()
{
}

void sub_21508A558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyContainedMediaType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyContainedMediaType(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyContainedMediaType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyContainedMediaType(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyContainedMediaType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyContainedMediaType(void)::$_0 &&>>()
{
}

void sub_21508A838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsSourceRemote(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsSourceRemote(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsSourceRemote(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSourceRemote(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSourceRemote(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSourceRemote(void)::$_0 &&>>()
{
}

void sub_21508AB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::PlaylistPropertySmartEvaluationOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartEvaluationOrder(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartEvaluationOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartEvaluationOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartEvaluationOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartEvaluationOrder(void)::$_0 &&>>()
{
}

void sub_21508AE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsDynamic(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsDynamic(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsDynamic(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsDynamic(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsDynamic(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsDynamic(void)::$_0 &&>>()
{
}

void sub_21508B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsFiltered(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsFiltered(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsFiltered(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFiltered(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsFiltered(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFiltered(void)::$_0 &&>>()
{
}

void sub_21508B454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsEnabledOnly(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsEnabledOnly(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsEnabledOnly(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsEnabledOnly(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsEnabledOnly(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsEnabledOnly(void)::$_0 &&>>()
{
}

void sub_21508B734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsLimited(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartIsLimited(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartIsLimited(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsLimited(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsLimited(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsLimited(void)::$_0 &&>>()
{
}

void sub_21508BA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitKind(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartLimitKind(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitKind(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitKind(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitKind(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitKind(void)::$_0 &&>>()
{
}

void sub_21508BCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartLimitOrder(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitOrder(void)::$_0 &&>>()
{
}

void sub_21508BFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartReverseLimitOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartReverseLimitOrder(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartReverseLimitOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartReverseLimitOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartReverseLimitOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartReverseLimitOrder(void)::$_0 &&>>()
{
}

void sub_21508C2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitValue(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertySmartLimitValue(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitValue(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitValue(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitValue(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitValue(void)::$_0 &&>>()
{
}

void sub_21508C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayOrder(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyPlayOrder(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyPlayOrder(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayOrder(void)::$_0 &&>>()
{
}

void sub_21508C874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsReversed(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsReversed(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsReversed(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsReversed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsReversed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsReversed(void)::$_0 &&>>()
{
}

void sub_21508CB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsKeepLocalEnabled(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::$_0 &&>>()
{
}

void sub_21508CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudMinimumRefreshInterval(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::$_0 &&>>()
{
}

void sub_21508D04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudLastUpdateTime(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudLastUpdateTime(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudLastUpdateTime(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudLastUpdateTime(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudLastUpdateTime(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudLastUpdateTime(void)::$_0 &&>>()
{
}

void sub_21508D32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyExternalVendorIdentifier(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyExternalVendorIdentifier(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorIdentifier(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorIdentifier(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorIdentifier(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorIdentifier(void)::$_0 &&>>()
{
}

void sub_21508D5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyExternalVendorContainerTag(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyExternalVendorContainerTag(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorContainerTag(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorContainerTag(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorContainerTag(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorContainerTag(void)::$_0 &&>>()
{
}

void sub_21508D878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudIsSharingDisabled(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::$_0 &&>>()
{
}

void sub_21508DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyGroupingSortKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyGroupingSortKey(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyGroupingSortKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyGroupingSortKey(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyGroupingSortKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyGroupingSortKey(void)::$_0 &&>>()
{
}

void sub_21508DDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::once, memory_order_acquire) != -1)
  {
    std::string::size_type v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_21508E15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::Playlist::Playlist(mlcore::Playlist *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8870;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C8870;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  return result;
}

void mlcore::Playlist::filterPredicate(mlcore::Playlist *this@<X0>, void *a2@<X8>)
{
  v31[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 29);
  if (!v4)
  {
    std::string::size_type v5 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartCriteria(this);
    if (!mlcore::PropertyCache::hasValueForProperty((mlcore::Playlist *)((char *)this + 8), v5))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "faulting not implemented yet");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v29, (uint64_t)this + 8, (unint64_t)v5);
    mlcore::PredicateFromSearchData((mlcore *)v29, &v25);
    mediaplatform::Data::~Data((mediaplatform::Data *)v29);
    IsEnabledOnly = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartIsEnabledOnly(v6);
    BOOL hasValueForProperty = mlcore::PropertyCache::hasValueForProperty((mlcore::Playlist *)((char *)this + 8), IsEnabledOnly);
    if (hasValueForProperty
      && (int v9 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartIsEnabledOnly((mlcore *)hasValueForProperty),
          uint64_t v10 = (mlcore *)mlcore::Entity::valueForProperty<int>((uint64_t)this, v9),
          v10))
    {
      std::string v11 = v26;
      v29[0] = v25;
      v29[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t IsUserDisabled = mlcore::ItemPropertyIsUserDisabled(v10);
      char v13 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v13 + 8) = 0u;
      *(void *)char v13 = &unk_26C5CAB78;
      *((void *)v13 + 4) = IsUserDisabled;
      *((void *)v13 + 5) = 0;
      *((void *)v13 + 3) = &unk_26C5C7978;
      *((_DWORD *)v13 + 12) = 0;
      *(_OWORD *)(v13 + 56) = 0u;
      *(void *)&long long v14 = v13 + 24;
      *((void *)&v14 + 1) = v13;
      long long v30 = v14;
      uint64_t v22 = 0;
      long long v23 = 0u;
      uint64_t v27 = (void **)&v22;
      char v28 = 0;
      uint64_t v22 = (uint64_t *)operator new(0x20uLL);
      *(void *)&long long v23 = v22;
      *((void *)&v23 + 1) = v22 + 4;
      *(void *)&long long v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v23 + 8, v29, v31, v22);
      mlcore::CreateAndPredicate(&v22, &v24);
      size_t v15 = (std::__shared_weak_count *)*((void *)this + 30);
      *(__n128 *)((char *)this + 232) = v24;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      uint64_t v27 = (void **)&v22;
      std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v27);
      for (uint64_t i = 3; i != -1; i -= 2)
      {
        size_t v17 = (std::__shared_weak_count *)v29[i];
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
    else
    {
      uint64_t v18 = v25;
      std::string v11 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v19 = (std::__shared_weak_count *)*((void *)this + 30);
      *((void *)this + 29) = v18;
      *((void *)this + 30) = v11;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v4 = *((void *)this + 29);
  }
  uint64_t v20 = *((void *)this + 30);
  *a2 = v4;
  a2[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_21508E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, char a19)
{
  a17 = (void **)&a10;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  uint64_t v21 = 24;
  while (1)
  {
    uint64_t v22 = *(std::__shared_weak_count **)(&a19 + v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    v21 -= 16;
    if (v21 == -8)
    {
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::Playlist::adjustedSmartLimitValue(mlcore::Playlist *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartLimitKind(this);
  uint64_t v3 = (mlcore *)mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
  int v4 = (int)v3;
  std::string::size_type v5 = (mlcore::ModelPropertyBase *)mlcore::PlaylistPropertySmartLimitValue(v3);
  uint64_t result = mlcore::Entity::valueForProperty<long long>((uint64_t)this, v5);
  switch(v4)
  {
    case 0:
      uint64_t v7 = 60000;
      goto LABEL_5;
    case 1:
      result <<= 20;
      break;
    case 3:
      uint64_t v7 = 3600000;
LABEL_5:
      result *= v7;
      break;
    case 4:
      result <<= 30;
      break;
    default:
      return result;
  }
  return result;
}

void mlcore::Playlist::playlistFilename(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v12 = a2;
  if (!a2) {
    __assert_rtn("playlistFilename", "Playlist.cpp", 212, "persistentID != 0");
  }
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v4 = "iTunes/Playlist_{0}.plist";
  if (a1 == 3) {
    int v4 = "iTunes/Genius_Playlist_{0}.plist";
  }
  if (a1 == 2) {
    std::string::size_type v5 = "iTunes/OnTheGoPlaylist_{0}.plist";
  }
  else {
    std::string::size_type v5 = v4;
  }
  MEMORY[0x2166B2280](&__p, v5);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if (!HIBYTE(v11)) {
      return;
    }
    p_p = (std::string *)&__p;
LABEL_12:
    mediaplatform::FormatString<long long>(&v8, p_p, &v12);
    int v7 = SHIBYTE(v11);
    *a3 = v8;
    if ((v7 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  if (v10)
  {
    p_p = (std::string *)__p;
    goto LABEL_12;
  }
LABEL_13:
  operator delete(__p);
}

void sub_21508E7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AnyInPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  int v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v23, (uint64_t)&v6[1], v6);
  long long v31 = v23;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  __n128 v24 = 0;
  *(void *)&long long __p = &v24;
  BYTE8(__p) = 0;
  __n128 v24 = (char *)operator new(0x10uLL);
  uint64_t v25 = v24;
  unint64_t v26 = v24 + 16;
  uint64_t v25 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v26, &v31, v32, v24);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  std::string v8 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16); v8 != i; ++v8)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v22 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v31);
    long long v11 = v31;
    long long v31 = 0uLL;
    uint64_t v12 = v25;
    if (v25 >= v26)
    {
      long long v21 = v11;
      uint64_t v13 = (v25 - v24) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v26 - v24;
      if ((v26 - v24) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      long long v30 = &v26;
      size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
      uint64_t v18 = &v17[16 * v13];
      *(void *)&long long __p = v17;
      *((void *)&__p + 1) = v18;
      long long v29 = &v17[16 * v19];
      *(_OWORD *)uint64_t v18 = v21;
      char v28 = v18 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v24, &__p);
      uint64_t v20 = v25;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      uint64_t v25 = v20;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v25 = v11;
      uint64_t v25 = v12 + 16;
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupInt64");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v31, &__p, (void **)&v24);
  *a3 = v31;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_21508EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(void *a1, long long *a2, void **a3)
{
  int v6 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)int v6 = &unk_26C5C9D78;
  long long v7 = *a2;
  long long v10 = 0u;
  *(_OWORD *)long long __p = v7;
  uint64_t v12 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *(long long *)((char *)a2 + 8) = 0u;
  std::string v8 = &unk_26C5BED78;
  uint64_t v9 = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&v9, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v6 + 24), (long long *)__p, (uint64_t)&v8);
  std::string v8 = &unk_26C5BED78;
  uint64_t v13 = (void **)&v9;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_21508EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::DatabaseParameter<int>::description()
{
  return mediaplatform::SQLStringValue<int>();
}

void mediaplatform::DatabaseParameter<int>::~DatabaseParameter()
{
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::AnyInPredicateBase::_allProperties(mlcore::AnyInPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  int v4 = (uint64_t *)*((void *)this + 2);
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v5);
    ++v3;
  }
}

void sub_21508EDDC(_Unwind_Exception *a1)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<long long>::matches(void *a1, void *a2)
{
  char v2 = (unint64_t *)a1[1];
  for (uint64_t i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    uint64_t v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    long long v7 = (void *)(a1[5] + 16);
    while (1)
    {
      long long v7 = (void *)*v7;
      if (!v7) {
        break;
      }
      if (v6 == v7[2]) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t mlcore::AnyInPredicate<long long>::description(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  char v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v12 & 0x80u) == 0) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  std::string v8 = (void *)(a1[5] + 16);
  for (char i = 1; ; char i = 0)
  {
    std::string v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v15);
}

void sub_21508F0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::AnyInPredicate<long long>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5138;
  char v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::AnyInPredicate<long long>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5138;
  char v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void mlcore::AnyInPredicate<std::string>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v23, (uint64_t)&v6[1], v6);
  long long v31 = v23;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  __n128 v24 = 0;
  *(void *)&long long __p = &v24;
  BYTE8(__p) = 0;
  __n128 v24 = (char *)operator new(0x10uLL);
  uint64_t v25 = v24;
  unint64_t v26 = v24 + 16;
  uint64_t v25 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v26, &v31, v32, v24);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  std::string v8 = *(uint64_t **)(a1 + 8);
  for (char i = *(uint64_t **)(a1 + 16); v8 != i; ++v8)
  {
    uint64_t v9 = *v8;
    long long v10 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v22 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v31);
    long long v11 = v31;
    long long v31 = 0uLL;
    unsigned __int8 v12 = v25;
    if (v25 >= v26)
    {
      long long v21 = v11;
      uint64_t v13 = (v25 - v24) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v26 - v24;
      if ((v26 - v24) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      long long v30 = &v26;
      size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
      uint64_t v18 = &v17[16 * v13];
      *(void *)&long long __p = v17;
      *((void *)&__p + 1) = v18;
      long long v29 = &v17[16 * v19];
      *(_OWORD *)uint64_t v18 = v21;
      char v28 = v18 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v24, &__p);
      uint64_t v20 = v25;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      uint64_t v25 = v20;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v25 = v11;
      uint64_t v25 = v12 + 16;
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupString");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v31, &__p, (void **)&v24);
  *a3 = v31;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_21508F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

BOOL mlcore::AnyInPredicate<std::string>::matches(void *a1, void *a2)
{
  char v2 = (unint64_t *)a1[1];
  long long v23 = (unint64_t *)a1[2];
  if (v2 != v23)
  {
    while (1)
    {
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, *a2 + 8, *v2);
      uint64_t v3 = a1[5] + 16;
      int v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      long long v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      while (1)
      {
        uint64_t v3 = *(void *)v3;
        BOOL v8 = v3 != 0;
        if (!v3) {
          break;
        }
        if (*(char *)(v3 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v3 + 16), *(void *)(v3 + 24));
        }
        else {
          std::string v26 = *(std::string *)(v3 + 16);
        }
        std::string::size_type v9 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        int v10 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v9 = v26.__r_.__value_.__l.__size_;
        }
        if (size == v9)
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v11 = &v26;
          }
          else {
            long long v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          if (v4 < 0)
          {
            BOOL v20 = memcmp((const void *)v5, v11, *((size_t *)&v5 + 1)) == 0;
          }
          else
          {
            if (!v4)
            {
              BOOL v20 = 1;
              if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_29;
              }
              goto LABEL_32;
            }
            p_p = &__p;
            uint64_t v13 = v7;
            do
            {
              int v15 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              int v14 = v15;
              int v17 = v11->__r_.__value_.__s.__data_[0];
              long long v11 = (std::string *)((char *)v11 + 1);
              int v16 = v17;
              BOOL v19 = v13-- != 0;
              BOOL v20 = v14 == v16;
            }
            while (v14 == v16 && v19);
          }
          if ((v10 & 0x80000000) == 0) {
            goto LABEL_29;
          }
LABEL_32:
          operator delete(v26.__r_.__value_.__l.__data_);
          if (v20) {
            break;
          }
        }
        else
        {
          BOOL v20 = 0;
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_32;
          }
LABEL_29:
          if (v20) {
            break;
          }
        }
      }
      if (v4 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v2;
      if (v3) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v2 == v23;
      }
      if (v21) {
        return v8;
      }
    }
  }
  return 0;
}

void sub_21508F6E8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AnyInPredicate<std::string>::description(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  int v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v5 + 40))(&__p, v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" in [", 5);
  BOOL v8 = *(uint64_t **)(a1[5] + 16);
  if (v8)
  {
    char v9 = 1;
    do
    {
      if (*((char *)v8 + 39) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v8[2], v8[3]);
      }
      else {
        std::string __p = *(std::string *)(v8 + 2);
      }
      if ((v9 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &__p;
      }
      else {
        int v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v9 = 0;
      BOOL v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v16);
}

void sub_21508F9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::AnyInPredicate<std::string>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5030;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::AnyInPredicate<std::string>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5030;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void mlcore::AnyInPredicate<double>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v23, (uint64_t)&v6[1], v6);
  long long v31 = v23;
  uint64_t v25 = 0;
  std::string v26 = 0;
  __n128 v24 = 0;
  *(void *)&long long __p = &v24;
  BYTE8(__p) = 0;
  __n128 v24 = (char *)operator new(0x10uLL);
  uint64_t v25 = v24;
  std::string v26 = v24 + 16;
  uint64_t v25 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v26, &v31, v32, v24);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  BOOL v8 = *(uint64_t **)(a1 + 8);
  for (char i = *(uint64_t **)(a1 + 16); v8 != i; ++v8)
  {
    uint64_t v9 = *v8;
    int v10 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v22 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v31);
    long long v11 = v31;
    long long v31 = 0uLL;
    unsigned __int8 v12 = v25;
    if (v25 >= v26)
    {
      long long v21 = v11;
      uint64_t v13 = (v25 - v24) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v26 - v24;
      if ((v26 - v24) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      long long v30 = &v26;
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
      uint64_t v18 = &v17[16 * v13];
      *(void *)&long long __p = v17;
      *((void *)&__p + 1) = v18;
      long long v29 = &v17[16 * v19];
      *(_OWORD *)uint64_t v18 = v21;
      char v28 = v18 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v24, &__p);
      BOOL v20 = v25;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      uint64_t v25 = v20;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v25 = v11;
      uint64_t v25 = v12 + 16;
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupDouble");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v31, &__p, (void **)&v24);
  *a3 = v31;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_21508FDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<double>::matches(void *a1, void *a2)
{
  int v2 = (unint64_t *)a1[1];
  for (char i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    double v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    uint64_t v7 = a1[5] + 16;
    while (1)
    {
      uint64_t v7 = *(void *)v7;
      if (!v7) {
        break;
      }
      if (v6 == *(double *)(v7 + 16)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t mlcore::AnyInPredicate<double>::description(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  int v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0) {
        double v6 = __p;
      }
      else {
        double v6 = (void **)__p[0];
      }
      if ((v12 & 0x80u) == 0) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  BOOL v8 = (void *)(a1[5] + 16);
  for (char i = 1; ; char i = 0)
  {
    BOOL v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v15);
}

void sub_215090124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::AnyInPredicate<double>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5088;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::AnyInPredicate<double>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C5088;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void mlcore::AnyInPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  double v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v23, (uint64_t)&v6[1], v6);
  long long v31 = v23;
  uint64_t v25 = 0;
  std::string v26 = 0;
  __n128 v24 = 0;
  *(void *)&long long __p = &v24;
  BYTE8(__p) = 0;
  __n128 v24 = (char *)operator new(0x10uLL);
  uint64_t v25 = v24;
  std::string v26 = v24 + 16;
  uint64_t v25 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v26, &v31, v32, v24);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  BOOL v8 = *(uint64_t **)(a1 + 8);
  for (char i = *(uint64_t **)(a1 + 16); v8 != i; ++v8)
  {
    uint64_t v9 = *v8;
    int v10 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v22 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v31);
    long long v11 = v31;
    long long v31 = 0uLL;
    unsigned __int8 v12 = v25;
    if (v25 >= v26)
    {
      long long v21 = v11;
      uint64_t v13 = (v25 - v24) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v26 - v24;
      if ((v26 - v24) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      long long v30 = &v26;
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
      uint64_t v18 = &v17[16 * v13];
      *(void *)&long long __p = v17;
      *((void *)&__p + 1) = v18;
      long long v29 = &v17[16 * v19];
      *(_OWORD *)uint64_t v18 = v21;
      char v28 = v18 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v24, &__p);
      BOOL v20 = v25;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      uint64_t v25 = v20;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v25 = v11;
      uint64_t v25 = v12 + 16;
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupInt");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v31, &__p, (void **)&v24);
  *a3 = v31;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_215090510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<int>::matches(void *a1, void *a2)
{
  int v2 = (unint64_t *)a1[1];
  for (char i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    int v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    uint64_t v7 = a1[5] + 16;
    while (1)
    {
      uint64_t v7 = *(void *)v7;
      if (!v7) {
        break;
      }
      if (v6 == *(_DWORD *)(v7 + 16)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t mlcore::AnyInPredicate<int>::description(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  int v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      if ((v12 & 0x80u) == 0) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  BOOL v8 = (void *)(a1[5] + 16);
  for (char i = 1; ; char i = 0)
  {
    BOOL v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v15);
}

void sub_215090878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::AnyInPredicate<int>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C50E0;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::AnyInPredicate<int>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C50E0;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void mlcore::AnyInPredicate<mediaplatform::Data>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  int v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v23, (uint64_t)&v6[1], v6);
  long long v31 = v23;
  uint64_t v25 = 0;
  std::string v26 = 0;
  __n128 v24 = 0;
  *(void *)&long long __p = &v24;
  BYTE8(__p) = 0;
  __n128 v24 = (char *)operator new(0x10uLL);
  uint64_t v25 = v24;
  std::string v26 = v24 + 16;
  uint64_t v25 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v26, &v31, v32, v24);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  BOOL v8 = *(uint64_t **)(a1 + 8);
  for (char i = *(uint64_t **)(a1 + 16); v8 != i; ++v8)
  {
    uint64_t v9 = *v8;
    int v10 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v22 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v31);
    long long v11 = v31;
    long long v31 = 0uLL;
    unsigned __int8 v12 = v25;
    if (v25 >= v26)
    {
      long long v21 = v11;
      uint64_t v13 = (v25 - v24) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v26 - v24;
      if ((v26 - v24) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      long long v30 = &v26;
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v16);
      uint64_t v18 = &v17[16 * v13];
      *(void *)&long long __p = v17;
      *((void *)&__p + 1) = v18;
      long long v29 = &v17[16 * v19];
      *(_OWORD *)uint64_t v18 = v21;
      char v28 = v18 + 16;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v24, &__p);
      BOOL v20 = v25;
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      uint64_t v25 = v20;
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v25 = v11;
      uint64_t v25 = v12 + 16;
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupData");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v31, &__p, (void **)&v24);
  *a3 = v31;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_215090C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  a25 = &a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::matches(void *a1, void *a2)
{
  int v2 = (unint64_t *)a1[1];
  for (char i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v12, *a2 + 8, *v2);
    uint64_t v6 = a1[5] + 16;
    while (1)
    {
      uint64_t v6 = *(void *)v6;
      if (!v6) {
        break;
      }
      mediaplatform::Data::Data((mediaplatform::Data *)&v9, *(const void **)(v6 + 40), *(void *)(v6 + 24), 1);
      if (__n == v13)
      {
        int v7 = memcmp(__s1, __s2, __n);
        mediaplatform::Data::~Data((mediaplatform::Data *)&v9);
        if (!v7)
        {
          mediaplatform::Data::~Data((mediaplatform::Data *)v12);
          return 1;
        }
      }
      else
      {
        mediaplatform::Data::~Data((mediaplatform::Data *)&v9);
      }
    }
    mediaplatform::Data::~Data((mediaplatform::Data *)v12);
  }
  return 0;
}

void sub_215090DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::description(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  int v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 40))(__p, v5);
      if ((v15 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        uint64_t v7 = v15;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v6, v7);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" in [", 5);
  BOOL v8 = *(uint64_t ***)(a1[5] + 16);
  if (v8)
  {
    char v9 = 1;
    do
    {
      mediaplatform::Data::Data((mediaplatform::Data *)__p, v8[5], (size_t)v8[3], 1);
      if ((v9 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      }
      mediaplatform::Base16Representation((mediaplatform *)__p, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v13;
      }
      else {
        int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v13.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, size);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      mediaplatform::Data::~Data((mediaplatform::Data *)__p);
      char v9 = 0;
      BOOL v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v18);
}

void sub_215091090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void mlcore::AnyInPredicate<mediaplatform::Data>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C4FD8;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::AnyInPredicate<mediaplatform::Data>::~AnyInPredicate(void *a1)
{
  *a1 = &unk_26C5C4FD8;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26C5C7708;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void mlcore::AnyInPredicate<long long>::AnyInPredicate(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<long long>::AnyInPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<long long>::AnyInPredicate();
}

void sub_215091258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<long long>::AnyInPredicate(void *a1, uint64_t **a2)
{
  char v4 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v5 = v3 - *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>((char *)&v7, v4, v3, v5);
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  uint64_t v6 = v7;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if (v6) {
    operator delete(v6);
  }
  *a1 = &unk_26C5C5138;
  mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>();
}

void sub_215091338(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  char v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2150913C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>()
{
  uint64_t v0 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v0);
  {
      operator new();
  }
  ++*(_DWORD *)mlcore::SharedObject<std::unordered_set<long long>,int>::_nextToken(void)::token;
  operator new();
}

void sub_215091928(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11)
{
}

void sub_21509196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_215091980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_215091998()
{
  uint64_t v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x2166B26F0](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x2150919B8);
}

uint64_t mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex(void)::mutex;
}

void sub_215091A58(_Unwind_Exception *a1)
{
}

uint64_t mlcore::SharedObject<std::unordered_set<long long>,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<long long>,int>::_objects(void)::objects;
}

void sub_215091AF0(_Unwind_Exception *a1)
{
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long>*)#1}::operator()(int *a1, uint64_t a2)
{
  char v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v4);
  unint64_t v5 = (void *)mlcore::SharedObject<std::unordered_set<long long>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_215091BDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(void *a1, int a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::find<int>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    uint64_t v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *uint64_t v8 = v11;
    *uint64_t v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](1, v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::find<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIxNS1_4hashIxEENS1_8equal_toIxEENS1_9allocatorIxEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint8x8_t v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v3);
  unint64_t v4 = (void *)mlcore::SharedObject<std::unordered_set<long long>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_215091ECC(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void sub_215091F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *mlcore::AnyInPredicateBase::AnyInPredicateBase(void *a1, uint64_t a2)
{
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

uint64_t mlcore::AnyInPredicate<long long>::values(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<long long>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint8x8_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>((char *)&v11, v6, v5, v7);
  *(void *)a1 = &unk_26C5C7708;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((void *)(a1 + 8), v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = &unk_26C5C5138;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_2150920D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::AnyInPredicate<long long>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt64");
}

void mlcore::AnyInPredicate<std::string>::AnyInPredicate(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::AnyInPredicate<std::string>::AnyInPredicate();
}

{
  void *__p;

  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::AnyInPredicate<std::string>::AnyInPredicate();
}

void sub_215092168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<std::string>::AnyInPredicate(void *a1, uint64_t **a2)
{
  unint64_t v4 = *a2;
  uint8x8_t v3 = a2[1];
  unint64_t v5 = v3 - *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>((char *)&v7, v4, v3, v5);
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  uint8x8_t v6 = v7;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if (v6) {
    operator delete(v6);
  }
  *a1 = &unk_26C5C5030;
  mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>();
}

void sub_215092248(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  unint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint8x8_t v6 = result;
    uint64_t result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2150922D0(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>()
{
  uint64_t v0 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v0);
  {
      operator new();
  }
  ++*(_DWORD *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_nextToken(void)::token;
  operator new();
}

void sub_215092808(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11)
{
}

void sub_21509284C()
{
}

void sub_21509285C()
{
  MEMORY[0x2166B26F0](v0, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x215092890);
}

void sub_21509287C()
{
}

uint64_t mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex(void)::mutex;
}

void sub_215092930(_Unwind_Exception *a1)
{
}

uint64_t mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects(void)::objects;
}

void sub_2150929C8(_Unwind_Exception *a1)
{
}

void mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string>*)#1}::operator()(int *a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v4);
  unint64_t v5 = (void *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_215092A58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_IS8_EEEEiE6createIJRKSE_EEESF_DpOT_EUlPSE_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint8x8_t v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v3);
  unint64_t v4 = (void *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_215092B24(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_215092C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<std::string>::values(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<std::string>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>((char *)&v11, v6, v5, v7);
  *(void *)a1 = &unk_26C5C7708;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((void *)(a1 + 8), v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = &unk_26C5C5030;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_215092D44(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::AnyInPredicate<std::string>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupString");
}

void mlcore::AnyInPredicate<double>::AnyInPredicate(uint64_t a1, uint64_t a2, double **a3)
{
  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<double>::AnyInPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<double>::AnyInPredicate();
}

void sub_215092DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>(uint64_t a1, double *a2, double *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_215092E40(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<double>::AnyInPredicate(void *a1, uint64_t **a2)
{
  unint64_t v4 = *a2;
  uint8x8_t v3 = a2[1];
  unint64_t v5 = v3 - *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>((char *)&v7, v4, v3, v5);
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  uint64_t v6 = v7;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if (v6) {
    operator delete(v6);
  }
  *a1 = &unk_26C5C5088;
  mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>();
}

void sub_215092F20(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  unint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_215092FA8(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>()
{
  uint64_t v0 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v0);
  {
      operator new();
  }
  ++*(_DWORD *)mlcore::SharedObject<std::unordered_set<double>,int>::_nextToken(void)::token;
  operator new();
}

void sub_215093510(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11)
{
}

void sub_215093554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_215093568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_215093580()
{
  uint64_t v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x2166B26F0](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x2150935A0);
}

uint64_t mlcore::SharedObject<std::unordered_set<double>,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<double>,int>::_mutex(void)::mutex;
}

void sub_215093640(_Unwind_Exception *a1)
{
}

uint64_t mlcore::SharedObject<std::unordered_set<double>,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<double>,int>::_objects(void)::objects;
}

void sub_2150936D8(_Unwind_Exception *a1)
{
}

void mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double>*)#1}::operator()(int *a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v4);
  unint64_t v5 = (void *)mlcore::SharedObject<std::unordered_set<double>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_215093768(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIdNS1_4hashIdEENS1_8equal_toIdEENS1_9allocatorIdEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint8x8_t v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v3);
  unint64_t v4 = (void *)mlcore::SharedObject<std::unordered_set<double>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_215093834(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(uint64_t a1, double a2, double a3)
{
  if (a2 == 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = a2;
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      double v3 = v6;
      if (*(void *)&v6 >= v7) {
        *(void *)&double v3 = *(void *)&v6 % v7;
      }
    }
    else
    {
      *(void *)&double v3 = (v7 - 1) & *(void *)&v6;
    }
    uint64_t v9 = *(double ***)(*(void *)a1 + 8 * *(void *)&v3);
    if (v9)
    {
      for (char i = *v9; i; char i = *(double **)i)
      {
        unint64_t v11 = *((void *)i + 1);
        if (v11 == *(void *)&v6)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != *(void *)&v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (double *)operator new(0x18uLL);
  double *v12 = 0.0;
  v12[1] = v6;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*(void *)&v6 >= v7) {
        *(void *)&double v3 = *(void *)&v6 % v7;
      }
      else {
        double v3 = v6;
      }
    }
    else
    {
      *(void *)&double v3 = (v7 - 1) & *(void *)&v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(double ***)(*(void *)a1 + 8 * *(void *)&v3);
  if (v20)
  {
    *(void *)uint64_t v12 = *v20;
LABEL_41:
    *BOOL v20 = v12;
    goto LABEL_42;
  }
  double *v12 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * *(void *)&v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v21 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    BOOL v20 = (double **)(*(void *)a1 + 8 * v21);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_215093A90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215093AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<double>::values(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<double>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>((char *)&v11, v6, v5, v7);
  *(void *)a1 = &unk_26C5C7708;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint8x8_t v8 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((void *)(a1 + 8), v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = &unk_26C5C5088;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_215093BFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::AnyInPredicate<double>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupDouble");
}

void mlcore::AnyInPredicate<int>::AnyInPredicate(uint64_t a1, uint64_t a2, int **a3)
{
  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<int>::AnyInPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::AnyInPredicate<int>::AnyInPredicate();
}

void sub_215093C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<int>::AnyInPredicate(void *a1, uint64_t **a2)
{
  unint64_t v4 = *a2;
  double v3 = a2[1];
  unint64_t v5 = v3 - *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>((char *)&v7, v4, v3, v5);
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  double v6 = v7;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if (v6) {
    operator delete(v6);
  }
  *a1 = &unk_26C5C50E0;
  mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>();
}

void sub_215093D5C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  unint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    uint64_t result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_215093DE4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>()
{
  uint64_t v0 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v0);
  {
      operator new();
  }
  ++*(_DWORD *)mlcore::SharedObject<std::unordered_set<int>,int>::_nextToken(void)::token;
  operator new();
}

void sub_21509434C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11)
{
}

void sub_215094390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_2150943A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_2150943BC()
{
  uint64_t v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x2166B26F0](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x2150943DCLL);
}

uint64_t mlcore::SharedObject<std::unordered_set<int>,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<int>,int>::_mutex(void)::mutex;
}

void sub_21509447C(_Unwind_Exception *a1)
{
}

uint64_t mlcore::SharedObject<std::unordered_set<int>,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<int>,int>::_objects(void)::objects;
}

void sub_215094514(_Unwind_Exception *a1)
{
}

void mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int>*)#1}::operator()(int *a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v4);
  unint64_t v5 = (void *)mlcore::SharedObject<std::unordered_set<int>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_2150945A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIiNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorIiEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  double v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v3);
  unint64_t v4 = (void *)mlcore::SharedObject<std::unordered_set<int>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_215094670(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void sub_21509471C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<int>::values(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<int>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>((char *)&v11, v6, v5, v7);
  *(void *)a1 = &unk_26C5C7708;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((void *)(a1 + 8), v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = &unk_26C5C50E0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_215094820(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::AnyInPredicate<int>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt");
}

void mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate();
}

{
  void *__p;

  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate();
}

void sub_2150948B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__emplace_unique_key_args<mediaplatform::Data,mediaplatform::Data const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_21509492C(_Unwind_Exception *a1)
{
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(void *a1, uint64_t **a2)
{
  unint64_t v4 = *a2;
  double v3 = a2[1];
  unint64_t v5 = v3 - *a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>((char *)&v7, v4, v3, v5);
  *a1 = &unk_26C5C7708;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  uint64_t v6 = v7;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if (v6) {
    operator delete(v6);
  }
  *a1 = &unk_26C5C4FD8;
  mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>();
}

void sub_215094A0C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  unint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__deallocate_node(*(void (****)(void))(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__deallocate_node(void (***a1)(void))
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *v1;
      (*v1[2])();
      operator delete(v1);
      uint64_t v1 = (void (***)(void))v2;
    }
    while (v2);
  }
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_215094B34(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>()
{
  uint64_t v0 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v0);
  {
      operator new();
  }
  ++*(_DWORD *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_nextToken(void)::token;
  operator new();
}

void sub_21509509C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11)
{
}

void sub_2150950E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_2150950F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9)
{
}

void sub_21509510C()
{
  uint64_t v1 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v0);
  MEMORY[0x2166B26F0](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x21509512CLL);
}

uint64_t mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex(void)::mutex;
}

void sub_2150951CC(_Unwind_Exception *a1)
{
}

uint64_t mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects(void)::objects;
}

void sub_215095264(_Unwind_Exception *a1)
{
}

void mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data>*)#1}::operator()(int *a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v4);
  unint64_t v5 = (uint64_t *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_2150952F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v4 = a2;
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v2 <= a2) {
        unint64_t v6 = a2 % v2;
      }
    }
    else
    {
      unint64_t v6 = (v2 - 1) & a2;
    }
    uint64_t v7 = *a1;
    uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v6);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        unint64_t v10 = v2 - 1;
        do
        {
          unint64_t v11 = v9[1];
          if (v11 == v4)
          {
            if (*((_DWORD *)v9 + 4) == a2)
            {
              if (v5.u32[0] > 1uLL)
              {
                if (v2 <= v4) {
                  v4 %= v2;
                }
              }
              else
              {
                v4 &= v10;
              }
              uint64_t v12 = *(uint64_t **)(v7 + 8 * v4);
              do
              {
                uint64_t v13 = v12;
                uint64_t v12 = (uint64_t *)*v12;
              }
              while (v12 != v9);
              if (v13 == a1 + 2) {
                goto LABEL_36;
              }
              unint64_t v14 = v13[1];
              if (v5.u32[0] > 1uLL)
              {
                if (v14 >= v2) {
                  v14 %= v2;
                }
              }
              else
              {
                v14 &= v10;
              }
              if (v14 != v4)
              {
LABEL_36:
                if (!*v9) {
                  goto LABEL_37;
                }
                unint64_t v15 = *(void *)(*v9 + 8);
                if (v5.u32[0] > 1uLL)
                {
                  if (v15 >= v2) {
                    v15 %= v2;
                  }
                }
                else
                {
                  v15 &= v10;
                }
                if (v15 != v4) {
LABEL_37:
                }
                  *(void *)(v7 + 8 * v4) = 0;
              }
              uint64_t v16 = *v9;
              if (*v9)
              {
                unint64_t v17 = *(void *)(v16 + 8);
                if (v5.u32[0] > 1uLL)
                {
                  if (v17 >= v2) {
                    v17 %= v2;
                  }
                }
                else
                {
                  v17 &= v10;
                }
                if (v17 != v4)
                {
                  *(void *)(*a1 + 8 * v17) = v13;
                  uint64_t v16 = *v9;
                }
              }
              *uint64_t v13 = v16;
              *uint64_t v9 = 0;
              --a1[3];
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](1, v9);
              return;
            }
          }
          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v11 >= v2) {
                v11 %= v2;
              }
            }
            else
            {
              v11 &= v10;
            }
            if (v11 != v6) {
              return;
            }
          }
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIN13mediaplatform4DataENS1_4hashIS4_EENS1_8equal_toIS4_EENS1_9allocatorIS4_EEEEiE6createIJRKSB_EEESC_DpOT_EUlPSB_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  double v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v3);
  unint64_t v4 = (uint64_t *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_215095570(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__emplace_unique_key_args<mediaplatform::Data,mediaplatform::Data const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = std::hash<mediaplatform::Data>::operator()(*(void *)(a2 + 8), *(void **)(a2 + 24));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        size_t v14 = *(void *)(a2 + 8);
        unint64_t v15 = *(const void **)(a2 + 24);
        do
        {
          unint64_t v16 = (unint64_t)v13[1];
          if (v16 == v8)
          {
            if ((uint64_t *)v14 == v13[3] && !memcmp(v13[5], v15, v14)) {
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v16 >= v9) {
                v16 %= v9;
              }
            }
            else
            {
              v16 &= v9 - 1;
            }
            if (v16 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v17 = (void *)(a1 + 16);
  size_t v18 = operator new(0x38uLL);
  v28[0] = v18;
  v28[1] = a1 + 16;
  char v29 = 0;
  *size_t v18 = 0;
  v18[1] = v8;
  mediaplatform::Data::Data((mediaplatform::Data *)(v18 + 2), *(const void **)(a3 + 24), *(void *)(a3 + 8), 1);
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  std::string v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *size_t v18 = *v26;
LABEL_40:
    *std::string v26 = v18;
    goto LABEL_41;
  }
  *size_t v18 = *v17;
  void *v17 = v18;
  *(void *)(v25 + 8 * v3) = v17;
  if (*v18)
  {
    unint64_t v27 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    std::string v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<mediaplatform::Data,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<mediaplatform::Data,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
}

void sub_215095828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<mediaplatform::Data,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<mediaplatform::Data,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::hash<mediaplatform::Data>::operator()(size_t __len, void *a2)
{
  std::string::basic_string[abi:ne180100](__p, a2, __len);
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void std::unique_ptr<std::__hash_node<mediaplatform::Data,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<mediaplatform::Data,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void (****)(void))a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v1[2])();
    }
    operator delete(v1);
  }
}

void sub_21509596C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::values(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  char v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>((char *)&v11, v6, v5, v7);
  *(void *)a1 = &unk_26C5C7708;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v8 = v11;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((void *)(a1 + 8), v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = &unk_26C5C4FD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_215095A70(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *mlcore::AnyInPredicate<mediaplatform::Data>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupData");
}

uint64_t mediaplatform::Describable::description(mediaplatform::Describable *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  LOBYTE(__p) = 60;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  (*(void (**)(void **__return_ptr, mediaplatform::Describable *))(*(void *)this + 24))(&__p, this);
  if ((v12 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v3 = v12;
  }
  else {
    uint64_t v3 = v11;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v3);
  LOBYTE(v17) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
  *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, mediaplatform::Describable *))(*(void *)this + 32))(&__p, this);
  unint64_t v4 = (uint64_t *)__p;
  char v5 = (uint64_t *)v11;
  if (__p != (void *)v11)
  {
    do
    {
      char v16 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
      int v6 = *((char *)v4 + 23);
      if (v6 >= 0) {
        uint64_t v7 = (uint64_t)v4;
      }
      else {
        uint64_t v7 = *v4;
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        uint64_t v8 = v4[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v7, v8);
      v4 += 3;
    }
    while (v4 != v5);
  }
  char v16 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
  std::stringbuf::str();
  unint64_t v17 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v15);
}

void sub_215095D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mediaplatform::Describable::descriptionAttributes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mediaplatform::Describable::toString(mediaplatform::Describable *this, const mediaplatform::FormatOptions *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

void mediaplatform::Describable::~Describable(mediaplatform::Describable *this)
{
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  HasTitle = (mlcore *)mlcore::AlbumPropertyOrder(a1);
  if (HasTitle != a2)
  {
    HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(HasTitle);
    if (HasTitle != a2) {
      return 0;
    }
  }
  return mlcore::AlbumPropertyOrderSection(HasTitle);
}

void mlcore::TypedEntityClass<mlcore::Podcast>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Podcast>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::AlbumTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::AlbumTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::AlbumTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::Podcast>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::entityType()
{
  return 4;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Podcast>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_26C5CB240;
  mlcore::Album::Album((mlcore::Album *)(v8 + 3), a2);
  v8[3] = &unk_26C5C8780;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150960B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Podcast>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Podcast>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Podcast>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Podcast>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Podcast::~Podcast(mlcore::Podcast *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

void mlcore::Podcast::Podcast(mlcore::Podcast *this, uint64_t a2)
{
  mlcore::Album::Album(this, a2);
  *unint64_t v2 = &unk_26C5C8780;
}

{
  void *v2;

  mlcore::Album::Album(this, a2);
  *unint64_t v2 = &unk_26C5C8780;
}

uint64_t MemHandleGetPtr(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

_DWORD *MemNewHandleClear(size_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  if (v2)
  {
    uint64_t v3 = malloc_type_calloc(a1, 1uLL, 0x82ECC85uLL);
    *(void *)unint64_t v2 = v3;
    if (v3)
    {
      v2[2] = a1;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

_DWORD *MemNewHandle(size_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  if (v2)
  {
    uint64_t v3 = malloc_type_malloc(a1, 0xC32ADC66uLL);
    *(void *)unint64_t v2 = v3;
    if (v3)
    {
      v2[2] = a1;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t MemResizeHandle(void ***a1, int a2)
{
  if (!a1) {
    return 4294967246;
  }
  unint64_t v4 = *a1;
  if (*a1)
  {
    unint64_t v5 = *((unsigned int *)v4 + 2);
    int v6 = v5 + a2;
    if (a2 < 0 && v6 < 0)
    {
      return 4294967246;
    }
    else
    {
      if (v5 < v6) {
        *unint64_t v4 = malloc_type_realloc(*v4, v6, 0xEB0A7651uLL);
      }
      *((_DWORD *)v4 + 2) = v6;
      if (a2 >= 1) {
        bzero((char *)**a1 + (int)v5, a2);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v8 = (void **)MemNewHandleClear(a2);
    *a1 = v8;
    if (v8) {
      return 0;
    }
    else {
      return 4294967188;
    }
  }
}

uint64_t MemGetHandleSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t MemSetHandleSize(uint64_t a1, size_t size)
{
  int v2 = size;
  if (*(unsigned int *)(a1 + 8) < size) {
    *(void *)a1 = malloc_type_realloc(*(void **)a1, size, 0xEB0A7651uLL);
  }
  *(_DWORD *)(a1 + 8) = v2;
  return 0;
}

void MemDisposeHandle(void **a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (v2) {
      free(v2);
    }
    free(a1);
  }
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::AndPredicate::matches(uint64_t a1, uint64_t *a2)
{
  int v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t v5 = *v2;
    int v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    unsigned __int8 v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    v2 += 2;
    if (v2 == v3) {
      char v9 = 0;
    }
    else {
      char v9 = v8;
    }
  }
  while ((v9 & 1) != 0);
  return v8;
}

void sub_215096704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AndPredicate::description(mlcore::AndPredicate *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  LOBYTE(__p[0]) = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and ", 5);
      }
      (*(void (**)(void **__return_ptr))(**(void **)v2 + 40))(__p);
      if ((v9 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if ((v9 & 0x80u) == 0) {
        uint64_t v6 = v9;
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      v2 += 16;
    }
    while (v2 != v3);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_215096924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t mlcore::OrPredicate::matches(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (v2 == v3) {
    return 0;
  }
  do
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    v2 += 2;
    if (v2 == v3) {
      char v9 = 1;
    }
    else {
      char v9 = v8;
    }
  }
  while ((v9 & 1) == 0);
  return v8;
}

void sub_215096AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::OrPredicate::description(mlcore::OrPredicate *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  LOBYTE(__p[0]) = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2 != v3)
  {
    char v4 = 1;
    do
    {
      if ((v4 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" or ", 4);
      }
      (*(void (**)(void **__return_ptr))(**(void **)v2 + 40))(__p);
      if ((v9 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if ((v9 & 0x80u) == 0) {
        uint64_t v6 = v9;
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      char v4 = 0;
      v2 += 16;
    }
    while (v2 != v3);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_215096CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *mlcore::CompoundPredicate::CompoundPredicate(void *a1, void **a2)
{
  *a1 = &unk_26C5C73B8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(a1 + 1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

uint64_t mlcore::CompoundPredicate::subpredicates(mlcore::CompoundPredicate *this)
{
  return (uint64_t)this + 8;
}

void std::__shared_ptr_emplace<mlcore::AndPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::AndPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::OrPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::OrPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::columnCount()
{
  return 6;
}

void mlcore::CloudKVSTable::~CloudKVSTable(void **this)
{
  *this = &unk_26C5C3CD0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<double>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)(this + 48));
  *this = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *this = &unk_26C5C3CD0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<double>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)(this + 48));
  *this = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<double>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  *(void *)(a1 + 112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  *(void *)(a1 + 64) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<std::string,long long,long long,double,long long,long long>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3CD0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<double>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 384);
  *(void *)a1 = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3CD0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<double>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 384);
  *(void *)a1 = &unk_26C5C31A0;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::CloudKVSTable::keyColoumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(void *)(a2 + 24) = *((void *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 420);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(void *)(a2 + 56) = *((void *)this + 55);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_21509758C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::CloudKVSTable::bookmarkSyncTimestampColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 623) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 75), *((void *)this + 76));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 600);
    *(void *)(a2 + 24) = *((void *)this + 77);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 156);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 159);
  *(void *)(a2 + 36) = *(void *)((char *)this + 628);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::CloudKVSTable::bookmarkSyncRevisionColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 81), *((void *)this + 82));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(void *)(a2 + 24) = *((void *)this + 83);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 168);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 171);
  *(void *)(a2 + 36) = *(void *)((char *)this + 676);
  *(void *)a2 = &unk_26C5C47E8;
}

void mediaplatform::DatabaseTableBase::targetColumnExpression(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

std::string *mediaplatform::DatabaseTableBase::columnNames@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

unint64_t mediaplatform::DatabaseTableBase::columnCount(mediaplatform::DatabaseTableBase *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
}

void mediaplatform::DatabaseTableBase::~DatabaseTableBase(void **this)
{
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  void **v2;

  *this = &unk_26C5BED18;
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

std::string *mediaplatform::DatabaseTableBase::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void mlcore::Entity::_SQLExpressionForIdentity(mlcore::Entity *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(mlcore::Entity *))(*(void *)this + 48))(this);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  (*(void (**)(long long **__return_ptr))(*(void *)v5 + 24))(v9);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(&v10, v9[0]);
  int v8 = 13;
  uint64_t v6 = *((void *)this + 28);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,long long,void>(&v7, &v6);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v11, &v10, &v8, &v7);
  *a2 = v11;
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  *(void *)&long long v7 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
}

void sub_215097900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, std::__shared_weak_count *a12, uint64_t a13, char a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  char v16 = *(std::__shared_weak_count **)(v14 - 40);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  a11 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,long long,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x40uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *uint64_t v4 = &unk_26C5C9870;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = *a2;
  v4[3] = &unk_26C5C3960;
  v4[4] = v5;
  uint64_t v6 = (std::string *)(v4 + 5);
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[7] = v8;
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_215097A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLLiteralValue<long long>::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  mediaplatform::SQLStringValue<long long>();
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_20;
    }
LABEL_13:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" /* ", 4);
    int v4 = *(char *)(a1 + 39);
    if (v4 >= 0) {
      uint64_t v5 = a1 + 16;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" */", 3);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 39)) {
    goto LABEL_13;
  }
LABEL_20:
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_215097C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringValue<long long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v3);
}

void sub_215097D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLLiteralValue<long long>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3960;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLLiteralValue<long long>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3960;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::Entity::descriptionAttributes(mlcore::Entity *this@<X0>, std::string **a2@<X8>)
{
  *(void *)&long long v5 = *MEMORY[0x263EF8340];
  std::to_string(&v4, *((void *)this + 28));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)&v4, &v5, v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_215097F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double mlcore::Entity::Entity(mlcore::Entity *this, uint64_t a2)
{
  *(void *)this = &unk_26C5C8588;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  return result;
}

void *mlcore::Entity::Entity(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)(a1 + 1), a3);
  a1[1] = &unk_26C5C4EE8;
  a1[27] = &unk_26C5C4F10;
  a1[28] = a2;
  return a1;
}

void mlcore::Entity::~Entity(mlcore::Entity *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

void *mlcore::Entity::createWithType@<X0>(mlcore::Entity *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  switch((int)this)
  {
    case 0:
      long long v5 = operator new(0x100uLL);
      v5[1] = 0;
      void v5[2] = 0;
      *long long v5 = &unk_26C5CAFD8;
      uint64_t v6 = v5 + 3;
      mlcore::Item::Item((mlcore::Item *)(v5 + 3), a2);
      goto LABEL_9;
    case 1:
      std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(&v12, a2);
      goto LABEL_12;
    case 2:
      long long v5 = operator new(0x100uLL);
      v5[1] = 0;
      void v5[2] = 0;
      *long long v5 = &unk_26C5C9F70;
      uint64_t v6 = v5 + 3;
      mlcore::ItemArtist::ItemArtist((mlcore::ItemArtist *)(v5 + 3), a2);
      goto LABEL_9;
    case 3:
      long long v5 = operator new(0x100uLL);
      v5[1] = 0;
      void v5[2] = 0;
      *long long v5 = &unk_26C5CB048;
      uint64_t v6 = v5 + 3;
      mlcore::Genre::Genre((mlcore::Genre *)(v5 + 3), a2);
      goto LABEL_9;
    case 4:
      long long v5 = operator new(0x100uLL);
      v5[1] = 0;
      void v5[2] = 0;
      *long long v5 = &unk_26C5CB010;
      uint64_t v6 = v5 + 3;
      mlcore::Album::Album((mlcore::Album *)(v5 + 3), a2);
      goto LABEL_9;
    case 5:
      std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(&v12, a2);
      goto LABEL_12;
    case 7:
      std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(&v12, a2);
      goto LABEL_12;
    case 8:
      long long v5 = operator new(0x100uLL);
      v5[1] = 0;
      void v5[2] = 0;
      *long long v5 = &unk_26C5CA830;
      uint64_t v6 = v5 + 3;
      mlcore::LibraryProperty::LibraryProperty((mlcore::LibraryProperty *)(v5 + 3), a2);
LABEL_9:
      *(void *)&long long v7 = v6;
      *((void *)&v7 + 1) = v5;
      *(_OWORD *)a3 = v7;
      break;
    case 9:
      std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(&v12, a2);
LABEL_12:
      uint64_t v8 = (void *)v12;
      *(_OWORD *)a3 = v12;
      uint64_t v6 = v8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown entity type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v9 = (*(uint64_t (**)(void *))(*v6 + 48))(v6);
  *(void *)&long long v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 112))(v9);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v6 + 22), v12, &v12);
  result[3] = a2;
  return result;
}

void sub_2150983DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::LibraryProperty>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::LibraryProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::LibraryProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::Album>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Album>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Album>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::Genre>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::Entity::persistentID(mlcore::Entity *this)
{
  return *((void *)this + 28);
}

BOOL mlcore::Entity::hasValueForProperty(mlcore::Entity *this, mlcore::ModelPropertyBase *a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::Entity *)((char *)this + 8), a2);
}

void mlcore::LocalizedSearchQuery::_perform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 8);
  v5[0] = *(std::exception **)a2;
  v5[1] = (std::exception *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  mlcore::LocalizedSearchQuery::_performWeightedSearch(a1, v5);
}

void sub_2150986AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSearchQuery::_performWeightedSearch(uint64_t a1, std::exception **a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v2 = *a2;
  long long v12 = (mlcore::DeviceLibraryView *)(*a2)[2].__vftable;
  uint64_t v3 = (*a2)[3].__vftable;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v3->~exception_0, 1uLL, memory_order_relaxed);
    char v2 = *a2;
  }
  uint64_t v4 = v2[6].~exception_0;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6[3].__vftable;
    v14[0] = v6[2];
    v14[1].__vftable = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->~exception_0, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    mlcore::EntityRevisionController::latestRevisionNumber((mlcore::EntityRevisionController *)v14);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  mlcore::DeviceLibraryView::library(v12, v14);
  uint64_t v9 = v14[0].__vftable[6].~exception_0;
  whCFAbsoluteTime at = (std::__shared_weak_count *)v14[0].__vftable[6].what;
  if (what) {
    atomic_fetch_add_explicit(&what->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v9 + 399) < 0) {
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)v9 + 47), *((void *)v9 + 48));
  }
  else {
    std::string v13 = *(std::string *)((char *)v9 + 376);
  }
  if (what) {
    std::__shared_weak_count::__release_shared[abi:ne180100](what);
  }
  if (v14[1].__vftable) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14[1].__vftable);
  }
  char v11 = operator new(0x60uLL);
  v11[1] = 0;
  uint64_t v11[2] = 0;
  *char v11 = &unk_26C5C96E8;
  mediaplatform::SearchMatcher::SearchMatcher(v11 + 3);
}

void sub_21509B4FC()
{
  std::mutex::unlock(v0);
  JUMPOUT(0x21509C020);
}

void sub_21509B510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  __cxa_free_exception(v42);
  __cxa_end_catch();
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&v51);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Unwind_Resume(a1);
}

void sub_21509B560()
{
}

void sub_21509B568()
{
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&STACK[0x3C0]);
  if (v3 < 0) {
    operator delete(*(void **)(v4 - 248));
  }
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&STACK[0x410]);
  if (v1 < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (v0 < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if (v2 < 0) {
    operator delete((void *)STACK[0x258]);
  }
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&v7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  JUMPOUT(0x21509BFC8);
}

void sub_21509B570()
{
}

void sub_21509B578()
{
}

void sub_21509B580()
{
}

void sub_21509B588()
{
  STACK[0x320] = (unint64_t)&STACK[0x410];
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  uint64_t v1 = 24;
  while (1)
  {
    int v2 = *(std::__shared_weak_count **)(v0 - 256 + v1);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    v1 -= 16;
    if (v1 == -8) {
      JUMPOUT(0x21509C02CLL);
    }
  }
}

void sub_21509B598()
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x21509B990);
}

void sub_21509B5AC()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  int v2 = *(std::__shared_weak_count **)(v1 - 248);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x21509BFF4);
}

void sub_21509B5C8()
{
}

void sub_21509B5F0()
{
}

void sub_21509B5FC()
{
}

void sub_21509B608()
{
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&STACK[0x3C0]);
  if (v3 < 0) {
    operator delete(*(void **)(v4 - 248));
  }
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&STACK[0x410]);
  if (v1 < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (v0 < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if ((v2 & 0x80000000) == 0) {
    JUMPOUT(0x21509C018);
  }
  JUMPOUT(0x21509B9A8);
}

void sub_21509B65C()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v1 - 256);
  JUMPOUT(0x21509BF84);
}

void sub_21509B670()
{
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v0 - 256);
  JUMPOUT(0x21509BF84);
}

void sub_21509B678()
{
  mlcore::MediaError::~MediaError((std::exception *)(v1 - 256));
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  mlcore::MediaError::~MediaError((std::exception *)&STACK[0x320]);
  JUMPOUT(0x21509BF84);
}

void sub_21509B69C()
{
}

void sub_21509B6A4()
{
  if (*(char *)(v0 - 233) < 0) {
    operator delete(*(void **)(v0 - 256));
  }
  JUMPOUT(0x21509BF84);
}

void sub_21509B6BC()
{
}

void sub_21509B794(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext*)#1}::operator()((int *)(v3 - 256), v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x21509C00CLL);
}

void sub_21509B7B8()
{
  __cxa_end_catch();
  std::mutex::unlock(v0);
  JUMPOUT(0x21509C020);
}

void sub_21509B7C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21509C00CLL);
}

void sub_21509B7D4()
{
  MEMORY[0x2166B26F0](v1, 0x10A0C4090A7D76FLL);
  std::mutex::unlock(v0);
  JUMPOUT(0x21509C020);
}

void sub_21509B7F4()
{
  std::mutex::unlock(v0);
  JUMPOUT(0x21509C020);
}

void sub_21509B7FC()
{
  if (!v0) {
    JUMPOUT(0x21509C02CLL);
  }
  JUMPOUT(0x21509C028);
}

void sub_21509B804()
{
  STACK[0x2C0] = v1;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (*(char *)(v2 - 233) < 0) {
    operator delete(*(void **)(v2 - 256));
  }
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v3);
  JUMPOUT(0x21509C02CLL);
}

void sub_21509B85C()
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  if (!*(void *)(v1 - 248)) {
    JUMPOUT(0x21509C02CLL);
  }
  JUMPOUT(0x21509C028);
}

void sub_21509B8D8()
{
}

void sub_21509B8E0()
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    JUMPOUT(0x21509B938);
  }
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x21509C02CLL);
}

void sub_21509B954()
{
}

void sub_21509B95C()
{
}

void sub_21509B968()
{
  mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0::~$_0(v1 - 256);
  if (v0) {
    JUMPOUT(0x21509B97CLL);
  }
  JUMPOUT(0x21509BFF4);
}

void sub_21509B99C()
{
  if (SLOBYTE(STACK[0x26F]) < 0) {
    JUMPOUT(0x21509B9A8);
  }
  std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](&v2);
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  JUMPOUT(0x21509BFC8);
}

void sub_21509B9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48)
{
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v48 - 256);
  JUMPOUT(0x21509BF84);
}

void sub_21509B9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  mlcore::MediaError::~MediaError((std::exception *)&STACK[0x320]);
  JUMPOUT(0x21509BF84);
}

void sub_21509B9FC()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 248);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  if (!STACK[0x328]) {
    JUMPOUT(0x21509BF90);
  }
  JUMPOUT(0x21509BF8CLL);
}

void sub_21509BA20()
{
}

void sub_21509BA28()
{
}

void sub_21509BA30()
{
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  if (!v0) {
    JUMPOUT(0x21509C02CLL);
  }
  JUMPOUT(0x21509C028);
}

void sub_21509BA50()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x21509BFE4);
}

void sub_21509BA64()
{
}

void sub_21509BA88()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  if (!v1) {
    JUMPOUT(0x21509BEF8);
  }
  JUMPOUT(0x21509BEF0);
}

void sub_21509BAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    JUMPOUT(0x21509BE2CLL);
  }
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v64 - 256);
  JUMPOUT(0x21509BF84);
}

void sub_21509BE3C()
{
}

void sub_21509BE58()
{
}

void sub_21509BE64()
{
  if (*(char *)(v0 - 233) < 0) {
    operator delete(*(void **)(v0 - 256));
  }
  JUMPOUT(0x21509BEB8);
}

void sub_21509BE84()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (!v0) {
    JUMPOUT(0x21509BEDCLL);
  }
  JUMPOUT(0x21509BED4);
}

void sub_21509BEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (v39) {
    operator delete(v39);
  }
  if (STACK[0x410]) {
    operator delete((void *)STACK[0x410]);
  }
  if (!a39) {
    JUMPOUT(0x21509BF84);
  }
  JUMPOUT(0x21509BF80);
}

void sub_21509C044()
{
  if (STACK[0x328]) {
    JUMPOUT(0x21509C050);
  }
  JUMPOUT(0x21509C054);
}

void *std::__function::__value_func<void ()(long long,std::string,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,char const(&)[7],void>(void *a1)
{
  uint64_t v2 = operator new(0x88uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_26C5C9E58;
  std::string::basic_string[abi:ne180100]<0>(&v9, "weight");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v2 + 3), &v9, (long long *)v7, (long long *)v5, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete((void *)v9);
  }
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_21509C264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  char v45 = *(uint64_t **)a2;
  std::string v46 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(&v45);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    size_t v44 = a3;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    long long v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (char i = *v12; i; char i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          uint64_t v15 = (void *)i[2];
          uint64_t v16 = (std::__shared_weak_count *)i[3];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = *(std::__shared_weak_count **)(a2 + 8);
          char v45 = *(uint64_t **)a2;
          std::string v46 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v18 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v15, &v45);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v18) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
    a3 = v44;
  }
  float v19 = (void *)(a1 + 16);
  float v20 = (uint64_t *)operator new(0x30uLL);
  char v45 = v20;
  std::string v46 = (std::__shared_weak_count *)(a1 + 16);
  *float v20 = 0;
  v20[1] = v8;
  BOOL v21 = *a3;
  v20[2] = **a3;
  uint64_t v22 = v21[1];
  void v20[3] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  v20[4] = 0;
  v20[5] = 0;
  char v47 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v9 || (float)(v24 * (float)v9) < v23)
  {
    BOOL v25 = 1;
    if (v9 >= 3) {
      BOOL v25 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_45;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v29 = operator new(8 * *(void *)&prime);
          long long v30 = *(void **)a1;
          *(void *)a1 = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          uint64_t v32 = (void *)*v19;
          if (*v19)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v33) = v19;
            uint64_t v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v39))
                  {
                    *(void *)(*(void *)a1 + 8 * v39) = v32;
                    goto LABEL_70;
                  }
                  void *v32 = *v38;
                  void *v38 = **(void **)(*(void *)a1 + 8 * v39);
                  **(void **)(*(void *)a1 + 8 * v39) = v38;
                  uint64_t v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_70:
                uint64_t v32 = v38;
                uint64_t v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_74;
        }
        char v43 = *(void **)a1;
        *(void *)a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_74:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v40 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  char i = v45;
  if (v40)
  {
    *char v45 = *v40;
LABEL_87:
    *int v40 = (uint64_t)i;
    goto LABEL_88;
  }
  *char v45 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v19;
  if (*i)
  {
    unint64_t v41 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9) {
        v41 %= v9;
      }
    }
    else
    {
      v41 &= v9 - 1;
    }
    int v40 = (uint64_t *)(*(void *)a1 + 8 * v41);
    goto LABEL_87;
  }
LABEL_88:
  char v45 = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v45);
  return i;
}

void sub_21509C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::find<std::shared_ptr<mlcore::LocalizedSearchScope>>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](*(uint64_t **)a2, *(std::__shared_weak_count **)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (char i = *v10; i; char i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if (std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](i[2], (std::__shared_weak_count *)i[3], (void *)a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = (v4 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v11);
    unint64_t v14 = &v12[16 * v8];
    long long v15 = *a2;
    *(_OWORD *)unint64_t v14 = *a2;
    if (*((void *)&v15 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = &v12[16 * v13];
    uint8x8_t v7 = v14 + 16;
    uint64_t v17 = *a1;
    BOOL v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(void *)BOOL v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v17);
      BOOL v18 = *a1;
      float v20 = a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
      while (v20 != v18)
      {
        BOOL v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v20 -= 16;
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)unint64_t v4 = *(void *)a2;
    *((void *)v4 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v7 = v4 + 16;
  }
  a1[1] = v7;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, void **a3)
{
  unint64_t v7 = std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](*(uint64_t **)a2, *(std::__shared_weak_count **)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void **)(*a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100]((void *)v13[2], (std::__shared_weak_count *)v13[3], (void *)a2))
            {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  long long v15 = a1 + 2;
  uint64_t v16 = operator new(0x28uLL);
  uint64_t v13 = v16;
  *uint64_t v16 = 0;
  v16[1] = v8;
  uint64_t v17 = (*a3)[1];
  void v16[2] = **a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v16[4] = 0;
  float v18 = (float)(unint64_t)(a1[3] + 1);
  float v19 = *((float *)a1 + 8);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v24 = operator new(8 * *(void *)&prime);
          BOOL v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void *)*v15;
          if (*v15)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v28) = v15;
            unint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*a1 + 8 * v34))
                  {
                    *(void *)(*a1 + 8 * v34) = v27;
                    goto LABEL_57;
                  }
                  *unint64_t v27 = *v33;
                  *unint64_t v33 = **(void **)(*a1 + 8 * v34);
                  **(void **)(*a1 + 8 * v34) = v33;
                  unint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_57:
                unint64_t v27 = v33;
                unint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        unint64_t v39 = (void *)*a1;
        *a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v35 = *a1;
  uint8x8_t v36 = *(void **)(*a1 + 8 * v3);
  if (v36)
  {
    *uint64_t v13 = *v36;
LABEL_74:
    *uint8x8_t v36 = v13;
    goto LABEL_75;
  }
  *uint64_t v13 = *v15;
  *long long v15 = v13;
  *(void *)(v35 + 8 * v3) = v15;
  if (*v13)
  {
    unint64_t v37 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    uint8x8_t v36 = (void *)(*a1 + 8 * v37);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return v13;
}

void sub_21509CDF8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  char v45 = *(uint64_t **)a2;
  std::string v46 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(&v45);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    size_t v44 = a3;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (char i = *v12; i; char i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          long long v15 = (void *)i[2];
          uint64_t v16 = (std::__shared_weak_count *)i[3];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = *(std::__shared_weak_count **)(a2 + 8);
          char v45 = *(uint64_t **)a2;
          std::string v46 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v18 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v15, &v45);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v18) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
    a3 = v44;
  }
  float v19 = (void *)(a1 + 16);
  BOOL v20 = (uint64_t *)operator new(0x30uLL);
  char v45 = v20;
  std::string v46 = (std::__shared_weak_count *)(a1 + 16);
  *BOOL v20 = 0;
  v20[1] = v8;
  unint64_t v21 = *a3;
  v20[2] = **a3;
  uint64_t v22 = v21[1];
  void v20[3] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  v20[4] = 0;
  v20[5] = 0;
  char v47 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v9 || (float)(v24 * (float)v9) < v23)
  {
    BOOL v25 = 1;
    if (v9 >= 3) {
      BOOL v25 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_45;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v29 = operator new(8 * *(void *)&prime);
          unint64_t v30 = *(void **)a1;
          *(void *)a1 = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          uint64_t v32 = (void *)*v19;
          if (*v19)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v33) = v19;
            uint64_t v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v39))
                  {
                    *(void *)(*(void *)a1 + 8 * v39) = v32;
                    goto LABEL_70;
                  }
                  void *v32 = *v38;
                  void *v38 = **(void **)(*(void *)a1 + 8 * v39);
                  **(void **)(*(void *)a1 + 8 * v39) = v38;
                  uint64_t v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_70:
                uint64_t v32 = v38;
                uint64_t v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_74;
        }
        char v43 = *(void **)a1;
        *(void *)a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_74:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v40 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  char i = v45;
  if (v40)
  {
    *char v45 = *v40;
LABEL_87:
    *int v40 = (uint64_t)i;
    goto LABEL_88;
  }
  *char v45 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v19;
  if (*i)
  {
    unint64_t v41 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9) {
        v41 %= v9;
      }
    }
    else
    {
      v41 &= v9 - 1;
    }
    int v40 = (uint64_t *)(*(void *)a1 + 8 * v41);
    goto LABEL_87;
  }
LABEL_88:
  char v45 = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v45);
  return i;
}

void sub_21509D2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>(char **a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  unint64_t v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 4)
  {
    uint64_t v16 = a1 + 1;
    double result = a1[1];
    unint64_t v17 = (result - v9) >> 4;
    if (v17 >= a4)
    {
      unint64_t v21 = v9;
      while (v6 != a3)
      {
        *(_DWORD *)unint64_t v21 = *(_DWORD *)v6;
        *((void *)v21 + 1) = *((void *)v6 + 1);
        v21 += 16;
        ++v6;
      }
      int64_t v15 = v21 - v9;
      double result = v9;
    }
    else
    {
      BOOL v18 = &a2[v17];
      if (result != v9)
      {
        do
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)v6;
          *((void *)v9 + 1) = *((void *)v6++ + 1);
          v9 += 16;
        }
        while (v6 != v18);
      }
      float v19 = result;
      while (v18 != a3)
      {
        long long v20 = *v18++;
        *(_OWORD *)float v19 = v20;
        v19 += 16;
      }
      int64_t v15 = v19 - result;
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    double result = (char *)operator new(16 * v11);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    uint64_t v13 = result;
    if (v6 != a3)
    {
      uint64_t v13 = result;
      do
      {
        long long v14 = *v6++;
        *(_OWORD *)uint64_t v13 = v14;
        v13 += 16;
      }
      while (v6 != a3);
    }
    int64_t v15 = v13 - result;
    uint64_t v16 = a1 + 1;
  }
  *uint64_t v16 = &result[v15];
  return result;
}

void *std::__function::__value_func<void ()(long long,unsigned long,int,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::__emplace_unique_key_args<mlcore::LocalizedSearchScope *,std::piecewise_construct_t const&,std::tuple<mlcore::LocalizedSearchScope *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (char i = *v11; i; char i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  char i = operator new(0x28uLL);
  *char i = 0;
  i[1] = v8;
  uint64_t v14 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *char i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *char i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21509D728(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__function::__alloc_func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult(uint64_t a1, const mlcore::MediaError *a2)
{
  mlcore::MediaError::MediaError((mlcore::MediaError *)&v4, a2);
  *(void *)a1 = &unk_26C5C4898;
  mlcore::MediaError::MediaError((mlcore::MediaError *)(a1 + 8), (const mlcore::MediaError *)&v4);
  v4.__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  unint64_t v5 = &unk_26C5C3C00;
  if (v9 < 0) {
    operator delete(v8[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v8);
  if (v7 < 0) {
    operator delete(v6);
  }
  std::exception::~exception(&v4);
  *(void *)a1 = &unk_26C5C82B0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  return a1;
}

void sub_21509D908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mlcore::MediaError::~MediaError((std::exception *)va);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSearchQueryResult::~LocalizedSearchQueryResult(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C5C82B0;
  uint64_t v2 = this + 20;
  unint64_t v3 = this + 25;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x2166B26F0);
}

{
  std::exception *v2;
  std::exception *v3;
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26C5C82B0;
  uint64_t v2 = this + 20;
  unint64_t v3 = this + 25;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000021511FE58)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void **std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](*(void ***)(a1 + 24));
}

void std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CADE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CADE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult(uint64_t a1, uint64_t a2, void **a3)
{
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  mlcore::MediaError::MediaError((uint64_t)&v34, 0, (uint64_t)v32);
  *(void *)a1 = &unk_26C5C4898;
  unint64_t v6 = (unint64_t)&v34;
  mlcore::MediaError::MediaError((mlcore::MediaError *)(a1 + 8), (const mlcore::MediaError *)&v34);
  v34.__vftable = (std::exception_vtbl *)&unk_26C5C3BD0;
  unint64_t v35 = &unk_26C5C3C00;
  if (v39 < 0) {
    operator delete(v38[8].__vftable);
  }
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v38);
  if (v37 < 0) {
    operator delete(v36);
  }
  uint64_t v31 = a3;
  std::exception::~exception(&v34);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  *(void *)a1 = &unk_26C5C82B0;
  *(_OWORD *)(a1 + 160) = 0u;
  char v7 = (uint64_t *)(a1 + 160);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 160, *(void *)(a2 + 8));
  unint64_t v8 = *(void **)(a2 + 16);
  if (v8)
  {
    char v9 = (void *)(a1 + 176);
    do
    {
      unint64_t v10 = v8[2];
      unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
      unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = *(void *)(a1 + 168);
      if (v14)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v6 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
          if (v13 >= v14) {
            unint64_t v6 = v13 % v14;
          }
        }
        else
        {
          unint64_t v6 = v13 & (v14 - 1);
        }
        float v16 = *(void **)(*v7 + 8 * v6);
        if (v16)
        {
          for (char i = (void *)*v16; i; char i = (void *)*i)
          {
            unint64_t v18 = i[1];
            if (v18 == v13)
            {
              if (i[2] == v10) {
                goto LABEL_49;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v18 >= v14) {
                  v18 %= v14;
                }
              }
              else
              {
                v18 &= v14 - 1;
              }
              if (v18 != v6) {
                break;
              }
            }
          }
        }
      }
      unint64_t v19 = operator new(0x28uLL);
      *unint64_t v19 = 0;
      v19[1] = v13;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v8 + 1);
      uint64_t v20 = v8[4];
      v19[4] = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      float v21 = (float)(unint64_t)(*(void *)(a1 + 184) + 1);
      float v22 = *(float *)(a1 + 192);
      if (!v14 || (float)(v22 * (float)v14) < v21)
      {
        BOOL v23 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v23 = 1;
        }
        unint64_t v24 = v23 | (2 * v14);
        unint64_t v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v24;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 160, v26);
        unint64_t v14 = *(void *)(a1 + 168);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14) {
            unint64_t v6 = v13 % v14;
          }
          else {
            unint64_t v6 = v13;
          }
        }
        else
        {
          unint64_t v6 = (v14 - 1) & v13;
        }
      }
      uint64_t v27 = *v7;
      unint64_t v28 = *(void **)(*v7 + 8 * v6);
      if (v28)
      {
        *unint64_t v19 = *v28;
      }
      else
      {
        *unint64_t v19 = *v9;
        *char v9 = v19;
        *(void *)(v27 + 8 * v6) = v9;
        if (!*v19) {
          goto LABEL_48;
        }
        unint64_t v29 = *(void *)(*v19 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v29 >= v14) {
            v29 %= v14;
          }
        }
        else
        {
          v29 &= v14 - 1;
        }
        unint64_t v28 = (void *)(*v7 + 8 * v29);
      }
      *unint64_t v28 = v19;
LABEL_48:
      ++*(void *)(a1 + 184);
LABEL_49:
      unint64_t v8 = (void *)*v8;
    }
    while (v8);
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((void *)(a1 + 200), *v31, v31[1], ((char *)v31[1] - (char *)*v31) >> 4);
  return a1;
}

void sub_21509DFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v17);
  mlcore::QueryResult::~QueryResult(v16);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21509E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (double result = a4; a2 != a3; a2 += 2)
  {
    uint64_t v5 = a2[1];
    *double result = *a2;
    result[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    result += 2;
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(long long,unsigned long,int,BOOL &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore20LocalizedSearchQuery22_performWeightedSearchENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, unsigned char *a5)
{
  uint64_t v47 = *a2;
  uint64_t v6 = *a3;
  int v46 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 88));
  *a5 = v8 & 1;
  long long v9 = *(_OWORD *)(**(void **)(a1 + 16) + 16 * v6);
  long long v64 = v9;
  if (*((void *)&v9 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(uint64_t **)(a1 + 24);
  uint64_t v48 = &v64;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v10, (uint64_t)&v64, (void **)&v48);
  uint64_t v13 = *(void *)(v7 + 56);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = v11[4];
    uint64_t v16 = *(void *)v64;
    do
    {
      if ((v15 >> v14))
      {
        long long v17 = *(_OWORD *)(v13 + 16 * v14);
        long long v63 = v17;
        if (*((void *)&v17 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (*(void *)(v17 + 56) != *(void *)(v17 + 48))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          uint64_t v48 = &v63;
          unint64_t v19 = (void **)std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v18, (uint64_t)&v63, (uint64_t **)&v48)[4];
          float v21 = v19[1];
          unint64_t v20 = (unint64_t)v19[2];
          if ((unint64_t)v21 >= v20)
          {
            uint64_t v23 = ((char *)v21 - (unsigned char *)*v19) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = v20 - (void)*v19;
            uint64_t v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
              uint64_t v25 = v23 + 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v26);
            }
            else {
              uint64_t v27 = 0;
            }
            unint64_t v28 = (void *)(v26 + 8 * v23);
            *unint64_t v28 = v16;
            float v22 = v28 + 1;
            unint64_t v30 = (char *)*v19;
            unint64_t v29 = (char *)v19[1];
            if (v29 != *v19)
            {
              do
              {
                uint64_t v31 = *((void *)v29 - 1);
                v29 -= 8;
                *--unint64_t v28 = v31;
              }
              while (v29 != v30);
              unint64_t v29 = (char *)*v19;
            }
            *unint64_t v19 = v28;
            v19[1] = v22;
            v19[2] = (void *)(v26 + 8 * v27);
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *float v21 = v16;
            float v22 = v21 + 1;
          }
          v19[1] = v22;
        }
        uint64_t v32 = *(void *)(a1 + 40);
        uint64_t v48 = &v63;
        char v33 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v32, (uint64_t)&v63, (uint64_t **)&v48);
        unint64_t v34 = *(void *)(v7 + 80);
        if (!v34) {
          unint64_t v34 = -1;
        }
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v33[4] + 8) - *(void *)v33[4]) >> 3) < v34)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          int v51 = 1065353216;
          int v54 = 1065353216;
          long long v55 = 0u;
          long long v56 = 0u;
          memset(v58, 0, sizeof(v58));
          int v57 = 1065353216;
          int v59 = 1065353216;
          memset(v60, 0, sizeof(v60));
          int v61 = 1065353216;
          uint64_t v48 = (long long *)&unk_26C5C4EE8;
          std::string v62 = &unk_26C5C4F10;
          v65[0] = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 112))(v16);
          unint64_t v35 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v60, (unint64_t)v65[0], v65);
          *((void *)v35 + 3) = v47;
          v65[0] = (uint64_t *)mlcore::LocalizedSearchPropertyWeight(v35);
          *((_DWORD *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)v58, (unint64_t)v65[0], v65)+ 6) = v46;
          uint64_t v36 = *(void *)(a1 + 40);
          v65[0] = (uint64_t *)&v63;
          char v37 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v36, (uint64_t)&v63, v65);
          uint64_t v38 = v37[4];
          char v39 = *(void **)(v38 + 8);
          if ((unint64_t)v39 >= *(void *)(v38 + 16))
          {
            uint64_t v40 = std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>((uint64_t *)v37[4], (uint64_t)&v48);
          }
          else
          {
            mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(*(void *)(v38 + 8), (uint64_t)&v48);
            void *v39 = &unk_26C5C4EE8;
            v39[26] = &unk_26C5C4F10;
            uint64_t v40 = (uint64_t)(v39 + 27);
            *(void *)(v38 + 8) = v39 + 27;
          }
          *(void *)(v38 + 8) = v40;
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v48);
        }
        if (*((void *)&v63 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
        }
        uint64_t v13 = *(void *)(v7 + 56);
        uint64_t v12 = *(void *)(v7 + 64);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 4);
  }
  unint64_t v41 = *(void *)(v7 + 80);
  if (v41) {
    BOOL v42 = *a5 == 0;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    *a5 = 1;
    char v43 = (void *)(*(void *)(a1 + 40) + 16);
    while (1)
    {
      char v43 = (void *)*v43;
      if (!v43) {
        break;
      }
      if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v43[4] + 8) - *(void *)v43[4]) >> 3) < v41)
      {
        unsigned __int8 v44 = atomic_load((unsigned __int8 *)(v7 + 88));
        *a5 = v44 & 1;
        break;
      }
    }
  }
  if (*((void *)&v64 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
  }
}

void sub_21509E618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 120);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LocalizedSearchPropertyWeight(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::LocalizedSearchPropertyWeight(void)::once, memory_order_acquire) != -1)
  {
    std::exception v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::LocalizedSearchPropertyWeight(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LocalizedSearchPropertyWeight(void)::$_0 &&>>);
  }
  return mlcore::LocalizedSearchPropertyWeight(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LocalizedSearchPropertyWeight(void)::$_0 &&>>()
{
}

void sub_21509E7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C92E0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x30uLL);
  *(void *)char v2 = &unk_26C5C92E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::~__func()
{
}

void std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C98A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C98A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mlcore::PropertiesQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__alloc_func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

BOOL std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(void *a1, void *a2)
{
  char v2 = (void *)*a2;
  if (*a1 != *(void *)*a2) {
    return 0;
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    char v2 = (void *)*a2;
  }
  uint64_t v8 = v2[1];
  uint64_t v7 = (std::__shared_weak_count *)v2[2];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 == v8)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = 0;
    if (v5 && v8)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v5 + 40))(&__s1);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 40))(__p, v8);
      unsigned __int8 v9 = v27;
      if ((v27 & 0x80u) == 0) {
        size_t v10 = v27;
      }
      else {
        size_t v10 = __n;
      }
      unint64_t v11 = v24;
      int v12 = (char)v24;
      if ((v24 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v10 == v11)
      {
        if ((v24 & 0x80u) == 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        if ((char)v27 < 0)
        {
          BOOL v3 = memcmp(__s1, v13, __n) == 0;
        }
        else if (v27)
        {
          uint64_t v14 = v27 - 1;
          p_s1 = &__s1;
          do
          {
            int v17 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            int v16 = v17;
            int v19 = *(unsigned __int8 *)v13;
            uint64_t v13 = (void **)((char *)v13 + 1);
            int v18 = v19;
            BOOL v21 = v14-- != 0;
            BOOL v3 = v16 == v18;
          }
          while (v16 == v18 && v21);
        }
        else
        {
          BOOL v3 = 1;
        }
      }
      else
      {
        BOOL v3 = 0;
      }
      if (v12 < 0)
      {
        operator delete(__p[0]);
        unsigned __int8 v9 = v27;
      }
      if ((v9 & 0x80) != 0) {
        operator delete(__s1);
      }
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_21509ED1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if (!v18)
    {
LABEL_3:
      if (!v17) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (!v17) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  goto LABEL_5;
}

unint64_t std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(uint64_t **a1)
{
  char v2 = *a1;
  uint64_t v3 = (*a1)[1];
  std::exception v4 = (std::__shared_weak_count *)v2[2];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v3 + 40))(__p);
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v6 = **a1;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v5 ^ v6;
}

void sub_21509EE18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](uint64_t *a1, std::__shared_weak_count *a2)
{
  v5[0] = a1;
  v5[1] = (uint64_t *)a2;
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v3 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v5);
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v3;
}

void sub_21509EF2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](void *a1, std::__shared_weak_count *a2, void *a3)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::exception v4 = (std::__shared_weak_count *)a3[1];
  v7[0] = *a3;
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v5 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(a1, v7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v5;
}

void sub_21509EFC4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::__on_zero_shared(uint64_t a1)
{
  char v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex()
{
  {
    operator new();
  }
  return mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex(void)::mutex;
}

void sub_21509F164(_Unwind_Exception *a1)
{
}

uint64_t std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  BOOL v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        size_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (char i = (void *)*v10; i; char i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = operator new(0x48uLL);
      v24[0] = v13;
      v24[1] = a1 + 16;
      char v25 = 0;
      *uint64_t v13 = 0;
      v13[1] = v7;
      v13[2] = v5[2];
      *((_DWORD *)v13 + 6) = *((_DWORD *)v5 + 6);
      std::unordered_set<unsigned long>::unordered_set((uint64_t)(v13 + 4), (uint64_t)(v5 + 4));
      char v25 = 1;
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v20 = *(void *)a1;
      BOOL v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        *uint64_t v13 = *v21;
      }
      else
      {
        *uint64_t v13 = *v6;
        *uint64_t v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }
        else
        {
          v22 &= v8 - 1;
        }
        BOOL v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *BOOL v21 = v13;
LABEL_40:
      v24[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
LABEL_41:
      BOOL v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_21509F3D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects()
{
  {
    operator new();
  }
  return mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects(void)::objects;
}

void sub_21509F484(_Unwind_Exception *a1)
{
}

void mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext*)#1}::operator()(int *a1, uint64_t a2)
{
  std::exception v4 = (std::mutex *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex();
  std::mutex::lock(v4);
  BOOL v5 = (void *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    uint64_t v6 = std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(a2);
    MEMORY[0x2166B26F0](v6, 0x10A0C4090A7D76FLL);
  }
  std::mutex::unlock(v4);
}

void sub_21509F514(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINS_20LocalizedSearchQuery19SearchWeightContextEiE6createIJRNSt3__113unordered_mapIxN13mediaplatform13SearchMatcher12ReasonResultENS5_4hashIxEENS5_8equal_toIxEENS5_9allocatorINS5_4pairIKxS9_EEEEEEmEEES3_DpOT_EUlPS2_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = (std::mutex *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex();
  std::mutex::lock(v3);
  std::exception v4 = (void *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(v2);
    MEMORY[0x2166B26F0](v5, 0x10A0C4090A7D76FLL);
  }
  std::mutex::unlock(v3);
}

void sub_21509F5E0(void *a1)
{
  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::unordered_set<unsigned long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (char i = *(void **)(a2 + 16); i; char i = (void *)*i)
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_21509F6F0(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (char i = (void *)*v9; i; char i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = a2;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_21509F8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(long long,std::string,BOOL &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

double mediaplatform::ColumnResultsFunctor::operator()<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v4 + 1;
  uint64_t v5 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 24), v4);
  if (v5) {
    uint64_t v6 = (char *)v5;
  }
  else {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, v6);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore20LocalizedSearchQuery22_performWeightedSearchENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  uint64_t v35 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  mediaplatform::SearchMatcher::reasons(**(std::string ***)(a1 + 8), (uint64_t)__p, (uint64_t)&v36);
  int v6 = v36;
  if (!v36) {
    goto LABEL_51;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 16);
  uint64_t v8 = *v7;
  unint64_t v9 = *(void *)(*v7 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v9) {
        unint64_t v3 = v5 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v5;
    }
    unint64_t v11 = *(void ***)(*(void *)v8 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v5)
          {
            if (*((void *)v12 + 2) == v5) {
              goto LABEL_41;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = (char *)operator new(0x48uLL);
  v39[0] = v12;
  v39[1] = v8 + 16;
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = v5;
  *((void *)v12 + 2) = v5;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_DWORD *)v12 + 16) = 1065353216;
  char v40 = 1;
  float v14 = (float)(unint64_t)(*(void *)(v8 + 24) + 1);
  float v15 = *(float *)(v8 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v8, v19);
    unint64_t v9 = *(void *)(v8 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v5 >= v9) {
        unint64_t v3 = v5 % v9;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v5;
    }
  }
  uint64_t v20 = *(void **)(*(void *)v8 + 8 * v3);
  if (v20)
  {
    *(void *)unint64_t v12 = *v20;
  }
  else
  {
    *(void *)unint64_t v12 = *(void *)(v8 + 16);
    *(void *)(v8 + 16) = v12;
    *(void *)(*(void *)v8 + 8 * v3) = v8 + 16;
    if (!*(void *)v12) {
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v21 >= v9) {
        v21 %= v9;
      }
    }
    else
    {
      v21 &= v9 - 1;
    }
    uint64_t v20 = (void *)(*(void *)v8 + 8 * v21);
  }
  *uint64_t v20 = v12;
LABEL_40:
  v39[0] = 0;
  ++*(void *)(v8 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
  int v6 = v36;
LABEL_41:
  *((_DWORD *)v12 + 6) = v6;
  if (v12 + 24 != (char *)&v36)
  {
    unint64_t v22 = v12 + 32;
    *((_DWORD *)v12 + 16) = v38;
    uint64_t v23 = (void *)v37[2];
    uint64_t v24 = *((void *)v12 + 5);
    if (!v24) {
      goto LABEL_50;
    }
    for (uint64_t i = 0; i != v24; *(void *)(*v22 + 8 * i++) = 0)
      ;
    unint64_t v26 = (void *)*((void *)v12 + 6);
    *((void *)v12 + 6) = 0;
    *((void *)v12 + 7) = 0;
    if (v26)
    {
      while (v23)
      {
        unint64_t v27 = v23[2];
        v26[2] = v27;
        unint64_t v28 = (void *)*v26;
        v26[1] = v27;
        inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v22, v27, v26 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v22, v26, inserted);
        uint64_t v23 = (void *)*v23;
        unint64_t v26 = v28;
        if (!v28) {
          goto LABEL_50;
        }
      }
      do
      {
        char v33 = (void *)*v26;
        operator delete(v26);
        unint64_t v26 = v33;
      }
      while (v33);
    }
    else
    {
LABEL_50:
      while (v23)
      {
        unint64_t v30 = operator new(0x18uLL);
        *unint64_t v30 = 0;
        unint64_t v31 = v23[2];
        void v30[2] = v31;
        v30[1] = v31;
        uint64_t v32 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v22, v31, v30 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v22, v30, v32);
        uint64_t v23 = (void *)*v23;
      }
    }
  }
LABEL_51:
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v37);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21509FDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C5C9288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C96E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C96E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::LocalizedSearchQuery::~LocalizedSearchQuery(void **this)
{
  *this = &unk_26C5C7B98;
  unint64_t v3 = this + 7;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_26C5C84C0;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = &unk_26C5C7B98;
  unint64_t v3 = this + 7;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  *this = &unk_26C5C84C0;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *mlcore::LocalizedSearchScope::LocalizedSearchScope(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  *a1 = a2;
  a1[1] = v6;
  a1[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 3, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_2150A0130(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LocalizedSearchScope::LocalizedSearchScope(uint64_t a1, void **a2)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((void *)(a1 + 48), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_2150A019C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LocalizedSearchScope::entityClass(mlcore::LocalizedSearchScope *this)
{
  return *(void *)this;
}

uint64_t mlcore::LocalizedSearchScope::predicate@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::LocalizedSearchScope::properties(mlcore::LocalizedSearchScope *this)
{
  return (uint64_t)this + 24;
}

BOOL mlcore::LocalizedSearchScope::isAggregateScope(mlcore::LocalizedSearchScope *this)
{
  return *((void *)this + 7) != *((void *)this + 6);
}

uint64_t mlcore::LocalizedSearchScope::scopes(mlcore::LocalizedSearchScope *this)
{
  return (uint64_t)this + 48;
}

BOOL mlcore::LocalizedSearchScope::operator==(void *a1, void *a2)
{
  unint64_t v3 = (char *)a2[6];
  uint64_t v2 = (char *)a2[7];
  int v4 = (void *)a1[6];
  if (v2 - v3 != a1[7] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(void *)v3 != *v4) {
      return 0;
    }
    v3 += 16;
    v4 += 2;
  }
  if (*a2 != *a1) {
    return 0;
  }
  uint64_t v7 = a2[1];
  uint64_t v8 = (std::__shared_weak_count *)a2[2];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a1[1];
  uint8x8_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v5 = v7 == v9
    && (unint64_t v11 = (const void *)a2[3], v12 = a2[4] - (void)v11, v13 = (const void *)a1[3], v12 == a1[4] - (void)v13)
    && memcmp(v11, v13, v12) == 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

uint64_t mlcore::LocalizedSearchQuery::LocalizedSearchQuery(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26C5C7B98;
  unint64_t v3 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_2150A03A4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  long long v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LocalizedSearchQuery::scopes(mlcore::LocalizedSearchQuery *this)
{
  return (uint64_t)this + 56;
}

void mlcore::LocalizedSearchQuery::setScopes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = a1 + 7;
  if (a1 + 7 != (uint64_t *)a2)
  {
    BOOL v5 = *a2;
    long long v4 = (char *)a2[1];
    uint64_t v6 = v4 - (char *)*a2;
    unint64_t v7 = v6 >> 4;
    uint64_t v9 = a1 + 9;
    uint64_t v8 = a1[9];
    uint8x8_t v10 = (void *)a1[7];
    if (v6 >> 4 > (unint64_t)((v8 - (uint64_t)v10) >> 4))
    {
      if (v10)
      {
        std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100](a1 + 7);
        operator delete((void *)*v2);
        uint64_t v8 = 0;
        *uint64_t v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 < 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v8 >> 3;
      if (v8 >> 3 <= v7) {
        uint64_t v11 = v6 >> 4;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](v2, v12);
      unint64_t v13 = (void *)a1[8];
      uint64_t v14 = (uint64_t)v9;
      float v15 = v5;
      goto LABEL_14;
    }
    unint64_t v16 = (a1[8] - (uint64_t)v10) >> 4;
    if (v16 < v7)
    {
      unint64_t v17 = &v5[2 * v16];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(*a2, v17, v10);
      unint64_t v13 = (void *)a1[8];
      uint64_t v14 = (uint64_t)v9;
      float v15 = v17;
LABEL_14:
      a1[8] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(v14, v15, v4, v13);
      return;
    }
    unint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(*a2, a2[1], v10);
    for (uint64_t i = (void *)a1[8]; i != v18; i -= 2)
    {
      uint64_t v20 = (std::__shared_weak_count *)*(i - 1);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    a1[8] = (uint64_t)v18;
  }
}

uint64_t mlcore::LocalizedSearchQuery::setPerScopeResultLimit(uint64_t this, uint64_t a2)
{
  *(void *)(this + 80) = a2;
  return this;
}

uint64_t mlcore::LocalizedSearchQuery::cancel(uint64_t this)
{
  return this;
}

uint64_t mlcore::LocalizedSearchQuery::SearchWeightContext::SearchWeightContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(a1, a2);
  *(void *)(result + 40) = a3;
  return result;
}

{
  uint64_t result;

  uint64_t result = std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(a1, a2);
  *(void *)(result + 40) = a3;
  return result;
}

void mlcore::LocalizedSearchQueryResult::resultForSearchScope(void *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  BOOL v5 = (void *)a1[25];
  long long v4 = (void *)a1[26];
  if (v5 != v4)
  {
    while ((void *)*v5 != *a2)
    {
      v5 += 2;
      if (v5 == v4)
      {
        BOOL v5 = (void *)a1[26];
        break;
      }
    }
  }
  if (v5 == v4) {
    __assert_rtn("resultForSearchScope", "LocalizedSearchQuery.cpp", 440, "validSearchScopeIter != _searchScopes.end()");
  }
  int8x8_t v6 = (int8x8_t)a1[21];
  if (!*(void *)&v6) {
    goto LABEL_22;
  }
  unint64_t v7 = *a2;
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ ((unint64_t)*a2 >> 32));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((unint64_t)*a2 >> 32) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v6);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = v10;
    if (v10 >= *(void *)&v6) {
      unint64_t v12 = v10 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v12 = v10 & (*(void *)&v6 - 1);
  }
  unint64_t v13 = *(void **)(a1[20] + 8 * v12);
  if (!v13 || (uint64_t v14 = (void *)*v13) == 0)
  {
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v10) {
      break;
    }
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v6) {
        v15 %= *(void *)&v6;
      }
    }
    else
    {
      v15 &= *(void *)&v6 - 1;
    }
    if (v15 != v12) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_22;
    }
  }
  if ((void *)v14[2] != v7) {
    goto LABEL_21;
  }
  *a3 = 0;
  a3[1] = 0;
  uint64_t v17 = v14[3];
  uint64_t v16 = v14[4];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    unint64_t v7 = *a2;
  }
  *a3 = v17;
  a3[1] = v16;
  size_t v19 = (uint64_t *)v7[6];
  unint64_t v18 = (uint64_t *)v7[7];
  if (v18 == v19)
  {
    uint64_t v25 = *(void *)(v17 + 256);
    uint64_t v24 = *(std::__shared_weak_count **)(v17 + 264);
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v7 = *a2;
    }
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v26, (const void *)v7[3], v7[4], (uint64_t)(v7[4] - v7[3]) >> 3);
    (*(void (**)(uint64_t, void **, void))(*(void *)v25 + 16))(v25, &v26, **a2);
    if (v26)
    {
      unint64_t v27 = v26;
      operator delete(v26);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  else
  {
    do
    {
      uint64_t v21 = *v19;
      uint64_t v20 = (std::__shared_weak_count *)v19[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v17 + 256);
      unint64_t v22 = *(std::__shared_weak_count **)(v17 + 264);
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long __p = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&__p, *(const void **)(v21 + 24), *(void *)(v21 + 32), (uint64_t)(*(void *)(v21 + 32) - *(void *)(v21 + 24)) >> 3);
      (*(void (**)(uint64_t, void **, void))(*(void *)v23 + 16))(v23, &__p, *(void *)v21);
      if (__p)
      {
        unint64_t v30 = __p;
        operator delete(__p);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      v19 += 2;
    }
    while (v19 != v18);
  }
}

void sub_2150A0854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseStatement::descriptionAttributes(mediaplatform::DatabaseStatement *this@<X0>, std::string **a2@<X8>)
{
  *(void *)&long long v5 = *MEMORY[0x263EF8340];
  mediaplatform::FormatString<std::string>(&__p, (std::string *)"sql='{0}'", (uint64_t)this + 32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = (std::string *)operator new(0x18uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)&__p, &v5, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2150A0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseStatement::~DatabaseStatement(mediaplatform::DatabaseStatement *this)
{
  mediaplatform::DatabaseStatement::~DatabaseStatement(this);
  JUMPOUT(0x2166B26F0);
}

{
  sqlite3_stmt *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26C5BECD8;
  uint64_t v2 = (sqlite3_stmt *)*((void *)this + 3);
  if (v2)
  {
    sqlite3_finalize(v2);
    *((void *)this + 3) = 0;
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t mediaplatform::DatabaseParameterList::description(mediaplatform::DatabaseParameterList *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  unint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 != v3)
  {
    char v4 = 1;
    while (1)
    {
      uint64_t v6 = *v2;
      long long v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 40))(&__p, v6);
        unint64_t v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
        uint64_t v8 = (v12 & 0x80u) == 0 ? v12 : v11;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 40))(&__p, v6);
        unint64_t v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
        uint64_t v8 = (v12 & 0x80u) == 0 ? v12 : v11;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v8);
      if ((char)v12 < 0) {
        break;
      }
      if (v5) {
        goto LABEL_20;
      }
LABEL_21:
      char v4 = 0;
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_25;
      }
    }
    operator delete(__p);
    if (!v5) {
      goto LABEL_21;
    }
LABEL_20:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_21;
  }
LABEL_25:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v15);
}

void sub_2150A0D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mediaplatform::DatabaseParameterList::~DatabaseParameterList(mediaplatform::DatabaseParameterList *this)
{
  *(void *)this = &unk_26C5BEFF0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2166B26F0);
}

{
  void **v1;

  *(void *)this = &unk_26C5BEFF0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void mediaplatform::FormatString<int,char const*,std::string>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a4;
  v4[1] = a3;
  uint64_t v4[2] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<int,char const*,std::string>((std::string *)"SQLite Error {0}: {1} | {2}", a1, 0, (uint64_t)v4);
}

void sub_2150A0EBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<int,char const*,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    char v37 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    char v37 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    char v37 = v9 + 2;
    int v26 = v9[2];
    if ((v26 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = v9 + 3;
      do
      {
        unint64_t v29 = v28;
        char v37 = v28;
        uint64_t v27 = (v26 - 48) + 10 * v27;
        ++v28;
        int v31 = *v29;
        unint64_t v30 = (unsigned __int8 *)(v29 - 1);
        int v26 = v31;
      }
      while ((v31 - 58) >= 0xFFFFFFF6);
      char v37 = (char *)(v30 + 2);
      if (*(v28 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,int,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(v27);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v33, (const char **)&v37);
  unsigned __int8 v12 = v37;
  if (*((void *)&v33 + 1))
  {
    if (*((void *)&v33 + 1) == 1)
    {
      uint64_t v15 = **(const char ***)(a4 + 8);
      uint64_t v38 = (uint64_t)v15;
      if (v15) {
        uint64_t v15 = (const char *)strlen(v15);
      }
      *(void *)char v39 = v15;
      *(_OWORD *)&v39[8] = v33;
      *(_OWORD *)&v39[24] = v34;
      *(_OWORD *)&v39[40] = v35;
      uint64_t v40 = v36;
      uint64_t v16 = (const char *)*((void *)&v34 + 1);
      if (*((void *)&v34 + 1) <= (unint64_t)v15) {
        uint64_t v16 = v15;
      }
      if ((_BYTE)v34) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = v15;
      }
      mediaplatform::FormatImplementation<int,char const*,std::string>(v37, a2, &v17[i], a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(&v33, (unsigned char *)v18 + i, (uint64_t)&v38);
    }
    else
    {
      if (*((void *)&v33 + 1) != 2) {
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*,std::string>>();
      }
      uint64_t v13 = *(void *)a4;
      uint64_t v38 = v13;
      *(_OWORD *)char v39 = v33;
      *(_OWORD *)&v39[16] = v34;
      *(_OWORD *)&v39[32] = v35;
      *(void *)&v39[48] = v36;
      if (*(char *)(v13 + 23) < 0) {
        unint64_t v14 = *(void *)(v13 + 8);
      }
      else {
        unint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      }
      unint64_t v20 = *((void *)&v34 + 1);
      if (*((void *)&v34 + 1) <= v14) {
        unint64_t v20 = v14;
      }
      if ((_BYTE)v34) {
        unint64_t v14 = v20;
      }
      mediaplatform::FormatImplementation<int,char const*,std::string>(v37, a2, v14 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = (char *)a2;
      }
      else {
        uint64_t v21 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v33, &v21[i], (uint64_t)&v38);
    }
  }
  else
  {
    mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v38, **(_DWORD **)(a4 + 16), (uint64_t)&v33);
    if (v39[40] && !*(unsigned char *)(v38 + 48)) {
      uint64_t v19 = 32;
    }
    else {
      uint64_t v19 = 33;
    }
    unint64_t v22 = v19 - *(void *)&v39[32];
    if (*(unsigned char *)(v38 + 50) && v22 <= *(void *)(v38 + 24)) {
      unint64_t v22 = *(void *)(v38 + 24);
    }
    unint64_t v23 = *((void *)&v34 + 1);
    if (*((void *)&v34 + 1) <= v22) {
      unint64_t v23 = v22;
    }
    if ((_BYTE)v34) {
      unint64_t v24 = v23;
    }
    else {
      unint64_t v24 = v22;
    }
    mediaplatform::FormatImplementation<int,char const*,std::string>(v12, a2, v24 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = (char *)a2;
    }
    else {
      uint64_t v25 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v33, &v25[i], &v38);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150A12B4(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,int,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(a1);
}

void sub_2150A1324(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*,std::string>>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150A1380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,std::string>::formatOptionsAtIndex<int,char const*,std::string>(a1);
}

void sub_2150A13E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<int,char const*,std::string>();
}

void sub_2150A1450(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<int,char const*,std::string>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150A14AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mediaplatform::DatabaseStatement::DatabaseStatement(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C5BECD8;
  a1[3] = *(void *)(a2 + 24);
  char v4 = (std::string *)(a1 + 4);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a2 + 24) = 0;
  return a1;
}

void sub_2150A1544(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseStatement::step(sqlite3_stmt **this)
{
  int v2 = sqlite3_step(this[3]);
  uint64_t result = mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
  *((_DWORD *)this + 14) = v2;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::reset(sqlite3_stmt **this)
{
  int v2 = sqlite3_reset(this[3]);
  uint64_t result = mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
  *((_DWORD *)this + 14) = -1;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::clearBindings(sqlite3_stmt **this)
{
  int v2 = sqlite3_clear_bindings(this[3]);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
}

uint64_t mediaplatform::DatabaseStatement::finalize(sqlite3_stmt **this)
{
  uint64_t result = sqlite3_finalize(this[3]);
  if (result)
  {
    if (result > 0x1A) {
      int v3 = 36;
    }
    else {
      int v3 = *(_DWORD *)&asc_21512018C[4 * (result - 1)];
    }
    int v8 = v3;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v7, &v8, (long long *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v7);
  }
  this[3] = 0;
  return result;
}

void sub_2150A16DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
}

BOOL mediaplatform::DatabaseStatement::isReadonly(sqlite3_stmt **this)
{
  return sqlite3_stmt_readonly(this[3]) != 0;
}

BOOL mediaplatform::DatabaseStatement::isBusy(sqlite3_stmt **this)
{
  return sqlite3_stmt_busy(this[3]) != 0;
}

BOOL mediaplatform::DatabaseStatement::hasColumnValueData(mediaplatform::DatabaseStatement *this)
{
  int v1 = *((_DWORD *)this + 14);
  if (v1 == -1) {
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  return v1 == 100;
}

void mediaplatform::DatabaseStatement::sql(mediaplatform::DatabaseStatement *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<int>(uint64_t a1, int a2, int a3)
{
  int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned int>(uint64_t a1, int a2, int a3)
{
  int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<std::wstring>(uint64_t a1, void *a2, int a3)
{
  int v3 = a2;
  long long v5 = *(sqlite3_stmt **)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    int v3 = (void *)*a2;
    uint64_t v6 = a2[1];
  }
  else
  {
    LODWORD(v6) = *((unsigned __int8 *)a2 + 23);
  }
  int v7 = sqlite3_bind_text16(v5, a3 + 1, v3, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v7);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Data>(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(const void **)(a2 + 24), *(_DWORD *)(a2 + 8), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<double>(uint64_t a1, int a2, double a3)
{
  int v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a2 + 1, a3);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<float>(uint64_t a1, int a2, float a3)
{
  int v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a2 + 1, a3);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<BOOL>(uint64_t a1, int a2, int a3)
{
  int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<long long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned long long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<decltype(nullptr)>(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<int>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 4)) {
    int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_DWORD *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned int>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 4)) {
    int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_DWORD *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

void mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<std::string>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    mediaplatform::DatabaseStatement::bindParameter<std::string>(a1, (char *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v5 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v5);
  }
}

void sub_2150A1CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<std::wstring>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0) {
      std::wstring::__init_copy_ctor_external(&__p, *(const std::wstring::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::wstring __p = *(std::wstring *)a2;
    }
    mediaplatform::DatabaseStatement::bindParameter<std::wstring>(a1, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v5 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v5);
  }
}

void sub_2150A1D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  int v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::wstring::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::wstring::size_type v6 = __sz | 1;
    }
    int v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    int v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

void mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<mediaplatform::Data>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 40))
  {
    mediaplatform::Data::Data((mediaplatform::Data *)v7, *(const void **)(a2 + 24), *(void *)(a2 + 8), 1);
    int v5 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 24), a3 + 1, v9, n, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v5);
    mediaplatform::Data::~Data((mediaplatform::Data *)v7);
  }
  else
  {
    int v6 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v6);
  }
}

void sub_2150A1ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<double>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    int v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(double *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<float>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 4)) {
    int v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(float *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<BOOL>>(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2[1]) {
    int v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned long>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(void *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<long long>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(void *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned long long>>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    int v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(void *)a2);
  }
  else {
    int v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  }
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::DatabaseParameterList>(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(uint64_t **)(a2 + 8);
  int v4 = *(uint64_t **)(a2 + 16);
  if (v3 != v4)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *v3;
      v3 += 2;
      int v7 = a3 + 1;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5);
      a3 = v7;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t mediaplatform::DatabaseParameterList::parameters(mediaplatform::DatabaseParameterList *this)
{
  return (uint64_t)this + 8;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<int>(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
}

void *mediaplatform::DatabaseStatement::columnValue<std::string>@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v4) {
    uint64_t v5 = (char *)v4;
  }
  else {
    uint64_t v5 = "";
  }
  return std::string::basic_string[abi:ne180100]<0>(a3, v5);
}

void *mediaplatform::DatabaseStatement::columnValue<std::wstring>@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v4 = (__int32 *)sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 24), a2);
  return std::wstring::basic_string[abi:ne180100]<0>(a3, v4);
}

void *std::wstring::basic_string[abi:ne180100]<0>(void *a1, __int32 *a2)
{
  size_t v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 5)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5) {
      uint64_t v7 = v4 | 1;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

mediaplatform::Data *mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>@<X0>(uint64_t a1@<X0>, int a2@<W1>, mediaplatform::Data *a3@<X8>)
{
  uint64_t v6 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 24), a2);
  size_t v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 24), a2);
  return mediaplatform::Data::Data(a3, v6, v7, 1);
}

double mediaplatform::DatabaseStatement::columnValue<double>(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
}

float mediaplatform::DatabaseStatement::columnValue<float>(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
}

BOOL mediaplatform::DatabaseStatement::columnValue<BOOL>(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2) != 0;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<unsigned long>(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<long long>(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

uint64_t mediaplatform::DatabaseResultList::DatabaseResultList(uint64_t result, void *a2, int a3)
{
  *(_DWORD *)uint64_t result = a3;
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)uint64_t result = a3;
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<int>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    char v8 = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
    *(_DWORD *)a3 = result;
    char v8 = 1;
  }
  a3[4] = v8;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnValueType(sqlite3_stmt **this, int a2)
{
  unsigned int v2 = sqlite3_column_type(this[3], a2) - 1;
  if (v2 > 3) {
    return 5;
  }
  else {
    return dword_21511C6C0[v2];
  }
}

void *mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<std::string>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = (void *)sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << (char)result) & 0x16) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    char v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 24), a2);
    if (v8) {
      unint64_t v9 = (char *)v8;
    }
    else {
      unint64_t v9 = "";
    }
    uint64_t result = std::string::basic_string[abi:ne180100]<0>(&v10, v9);
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v11;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

void *mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<std::wstring>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = (void *)sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << (char)result) & 0x16) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    char v8 = (__int32 *)sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 24), a2);
    uint64_t result = std::wstring::basic_string[abi:ne180100]<0>(&v9, v8);
    *(_OWORD *)a3 = v9;
    *(void *)(a3 + 16) = v10;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<mediaplatform::Data>>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  else
  {
    mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(a1, a2, (mediaplatform::Data *)v8);
    *(void *)a3 = &unk_26C5BF2D8;
    *(void *)(a3 + 24) = v10;
    *(_OWORD *)(a3 + 8) = v9;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    *(unsigned char *)(a3 + 32) = v11;
    *(unsigned char *)(a3 + 40) = 1;
    mediaplatform::Data::~Data((mediaplatform::Data *)v8);
  }
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<double>>(uint64_t a1@<X0>, int a2@<W1>, double *a3@<X8>)
{
  unsigned int v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    *a3 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
    char v8 = 1;
  }
  *((unsigned char *)a3 + 8) = v8;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<float>>(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  unsigned int v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    char v9 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    float v8 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
    *a3 = v8;
    char v9 = 1;
  }
  *((unsigned char *)a3 + 4) = v9;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<BOOL>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    BOOL v8 = 0;
    char v9 = 0;
  }
  else
  {
    uint64_t result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
    BOOL v8 = result != 0;
    char v9 = 1;
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<unsigned long>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    char v8 = 0;
    *a3 = 0;
  }
  else
  {
    sqlite3_int64 result = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
    *(void *)a3 = result;
    char v8 = 1;
  }
  a3[8] = v8;
  return result;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<long long>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    char v8 = 0;
    *a3 = 0;
  }
  else
  {
    sqlite3_int64 result = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
    *(void *)a3 = result;
    char v8 = 1;
  }
  a3[8] = v8;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnCount(sqlite3_stmt **this)
{
  return sqlite3_column_count(this[3]);
}

void *mediaplatform::DatabaseStatement::columnName@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  size_t v4 = (char *)sqlite3_column_name(this[3], a2);
  return std::string::basic_string[abi:ne180100]<0>(a3, v4);
}

uint64_t mediaplatform::DatabaseResultList::columnValueType(mediaplatform::DatabaseResultList *this, int a2)
{
  unsigned int v2 = sqlite3_column_type(*(sqlite3_stmt **)(*((void *)this + 1) + 24), a2) - 1;
  if (v2 > 3) {
    return 5;
  }
  else {
    return dword_21511C6C0[v2];
  }
}

void *mediaplatform::DatabaseResultList::columnName@<X0>(mediaplatform::DatabaseResultList *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  size_t v4 = (char *)sqlite3_column_name(*(sqlite3_stmt **)(*((void *)this + 1) + 24), a2);
  return std::string::basic_string[abi:ne180100]<0>(a3, v4);
}

uint64_t mediaplatform::DatabaseResultList::columnCount(mediaplatform::DatabaseResultList *this)
{
  return sqlite3_column_count(*(sqlite3_stmt **)(*((void *)this + 1) + 24));
}

void *mediaplatform::DatabaseBindParameter::DatabaseBindParameter(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *sqlite3_int64 result = &unk_26C5BEFA0;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *sqlite3_int64 result = &unk_26C5BEFA0;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mediaplatform::DatabaseBindParameter::parameter(mediaplatform::DatabaseBindParameter *this)
{
  return (uint64_t)this + 8;
}

void mediaplatform::MakeLowercase(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v4 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (v4 >= 0) {
      size_t v5 = a2;
    }
    else {
      size_t v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    do
    {
      v5->__r_.__value_.__s.__data_[0] = __tolower(v5->__r_.__value_.__s.__data_[0]);
      size_t v5 = (std::string *)((char *)v5 + 1);
      std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v6 & 0x80u) == 0) {
        size_t v7 = a2;
      }
      else {
        size_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v6 & 0x80u) != 0) {
        std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
      }
    }
    while (v5 != (std::string *)((char *)v7 + v6));
  }
}

void sub_2150A2B60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::UTF16ToUTF8String()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_2150A2C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(std::string *__b, uint64_t a2, std::string *a3, std::string *a4)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 184) = 0;
  if (!*(void *)(a2 + 48)) {
    goto LABEL_64;
  }
  size_t v7 = a3;
  std::string::basic_string[abi:ne180100](__b, ((char *)a4 - (char *)a3) >> 1, 0);
  if (a4 == v7)
  {
    long long v23 = *(_OWORD *)(a2 + 136);
    long long v71 = *(_OWORD *)(a2 + 120);
    long long v72 = v23;
    long long v24 = *(_OWORD *)(a2 + 168);
    long long v73 = *(_OWORD *)(a2 + 152);
    long long v74 = v24;
    long long v25 = *(_OWORD *)(a2 + 72);
    long long v67 = *(_OWORD *)(a2 + 56);
    long long v68 = v25;
    long long v26 = *(_OWORD *)(a2 + 104);
    long long v69 = *(_OWORD *)(a2 + 88);
    long long v70 = v26;
  }
  else
  {
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(__b, v8, 0);
    long long v9 = *(_OWORD *)(a2 + 136);
    long long v71 = *(_OWORD *)(a2 + 120);
    long long v72 = v9;
    long long v10 = *(_OWORD *)(a2 + 168);
    long long v73 = *(_OWORD *)(a2 + 152);
    long long v74 = v10;
    long long v11 = *(_OWORD *)(a2 + 72);
    long long v67 = *(_OWORD *)(a2 + 56);
    long long v68 = v11;
    __n128 v12 = *(__n128 *)(a2 + 88);
    long long v13 = *(_OWORD *)(a2 + 104);
    std::string::size_type size = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v15 = __b;
    }
    else {
      uint64_t v15 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __b->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = (char *)v15 + size;
    long long v69 = *(_OWORD *)(a2 + 88);
    long long v70 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, std::string *, std::string *, std::string **, std::string *, char *, uint64_t *, __n128))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), &v67, v7, a4, &v63, v15, v16, &v62, v12);
      BOOL v18 = v63 == v7;
      *(void *)(a2 + 184) += ((char *)v63 - (char *)v7) >> 2;
      if (v18) {
        goto LABEL_62;
      }
      if (v17 != 1) {
        break;
      }
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = __b;
      }
      else {
        uint64_t v19 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v62 - (void)v19;
      std::string::resize(__b, 2 * (v62 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        unint64_t v22 = __b;
      }
      else {
        unint64_t v22 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = (std::string *)((char *)v22 + v20);
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = __b->__r_.__value_.__l.__size_;
      }
      uint64_t v16 = (char *)v22 + v21;
      size_t v7 = v63;
      if (v63 >= a4) {
        goto LABEL_62;
      }
    }
    if (!v17)
    {
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = __b;
      }
      else {
        uint64_t v32 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      std::string::resize(__b, v62 - (void)v32, 0);
      goto LABEL_37;
    }
    if (v17 != 3) {
      goto LABEL_62;
    }
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = __b;
    }
    else {
      uint64_t v27 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    std::string::resize(__b, (char *)v15 - (char *)v27, 0);
    LODWORD(v28) = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v28 & 0x80000000) != 0)
    {
      if (v7 == a4) {
        goto LABEL_37;
      }
      std::string::size_type v29 = __b->__r_.__value_.__l.__size_;
      unint64_t v50 = __b->__r_.__value_.__r.__words[2];
      std::string::size_type v30 = (v50 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      int v31 = (std::string *)__b->__r_.__value_.__r.__words[0];
      unint64_t v28 = HIBYTE(v50);
    }
    else
    {
      if (v7 == a4) {
        goto LABEL_37;
      }
      std::string::size_type v29 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      std::string::size_type v30 = 22;
      int v31 = __b;
    }
    unint64_t v51 = (char *)a4 - (char *)v7;
    if (v31 > v7 || (std::string *)((char *)&v31->__r_.__value_.__l.__data_ + v29 + 1) <= v7)
    {
      if (v30 - v29 < v51)
      {
        std::string::__grow_by(__b, v30, v29 - v30 + v51, v29, v29, 0, 0);
        __b->__r_.__value_.__l.__size_ = v29;
        LOBYTE(v28) = *((unsigned char *)&__b->__r_.__value_.__s + 23);
      }
      long long v53 = __b;
      if ((v28 & 0x80) != 0) {
        long long v53 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      int v54 = (char *)v53 + v29;
      do
      {
        std::string::value_type v55 = v7->__r_.__value_.__s.__data_[0];
        size_t v7 = (std::string *)((char *)v7 + 1);
        *v54++ = v55;
      }
      while (v7 != a4);
      *int v54 = 0;
      std::string::size_type v56 = v51 + v29;
      if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0) {
        __b->__r_.__value_.__l.__size_ = v56;
      }
      else {
        *((unsigned char *)&__b->__r_.__value_.__s + 23) = v56 & 0x7F;
      }
    }
    else
    {
      if (v51 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v51 > 0x16)
      {
        uint64_t v57 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17) {
          uint64_t v57 = v51 | 7;
        }
        uint64_t v58 = v57 + 1;
        p_p = (std::string::value_type *)operator new(v57 + 1);
        std::string::size_type v65 = (char *)a4 - (char *)v7;
        int64_t v66 = v58 | 0x8000000000000000;
        std::wstring __p = p_p;
      }
      else
      {
        HIBYTE(v66) = (_BYTE)a4 - (_BYTE)v7;
        p_p = (std::string::value_type *)&__p;
      }
      do
      {
        std::string::value_type v59 = v7->__r_.__value_.__s.__data_[0];
        size_t v7 = (std::string *)((char *)v7 + 1);
        *p_p++ = v59;
      }
      while (v7 != a4);
      std::string::value_type *p_p = 0;
      if (v66 >= 0) {
        int v60 = (const std::string::value_type *)&__p;
      }
      else {
        int v60 = (const std::string::value_type *)__p;
      }
      if (v66 >= 0) {
        std::string::size_type v61 = HIBYTE(v66);
      }
      else {
        std::string::size_type v61 = v65;
      }
      std::string::append(__b, v60, v61);
      if (SHIBYTE(v66) < 0) {
        operator delete(__p);
      }
    }
  }
LABEL_37:
  std::string::size_type v33 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  std::string::size_type v34 = __b->__r_.__value_.__l.__size_;
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v35 = 22;
  }
  else {
    std::string::size_type v35 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(__b, v35, 0);
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v36 = v33;
  }
  else {
    std::string::size_type v36 = v34;
  }
  int v37 = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
  BOOL v38 = v37 < 0;
  if (v37 >= 0) {
    char v39 = __b;
  }
  else {
    char v39 = (std::string *)__b->__r_.__value_.__r.__words[0];
  }
  uint64_t v40 = (char *)v39 + v36;
  if (v38) {
    std::string::size_type v41 = __b->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v41 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  }
  for (std::string::size_type i = &v40[v41]; ; std::string::size_type i = (char *)v47 + v46)
  {
    int v43 = (*(uint64_t (**)(void, long long *, char *, char *, void **))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), &v67, v40, i, &__p);
    if (v43 != 1) {
      break;
    }
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v44 = __b;
    }
    else {
      unsigned __int8 v44 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    char v45 = (char *)((unsigned char *)__p - (unsigned char *)v44);
    std::string::resize(__b, 2 * ((unsigned char *)__p - (unsigned char *)v44), 0);
    std::string::size_type v46 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v46 & 0x80u) == 0) {
      uint64_t v47 = __b;
    }
    else {
      uint64_t v47 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    uint64_t v40 = &v45[(void)v47];
    if ((v46 & 0x80u) != 0) {
      std::string::size_type v46 = __b->__r_.__value_.__l.__size_;
    }
  }
  if (!v43)
  {
    uint64_t v40 = (char *)__p;
    goto LABEL_70;
  }
  if (v43 == 3)
  {
LABEL_70:
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v49 = __b;
    }
    else {
      long long v49 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    std::string::resize(__b, v40 - (char *)v49, 0);
    return;
  }
LABEL_62:
  if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b->__r_.__value_.__l.__data_);
  }
LABEL_64:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)&__b->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __b->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      return;
    }
LABEL_103:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v48 = *(void *)(a2 + 8);
  if (!v48) {
    goto LABEL_103;
  }
  std::string::__init_copy_ctor_external(__b, *(const std::string::value_type **)a2, v48);
}

void sub_2150A314C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26422EA50, MEMORY[0x263F8C050]);
}

void sub_2150A31EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  sqlite3_int64 result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

uint64_t mediaplatform::StringsEqualCaseInsensitive(char *a1, char *a2)
{
  int v2 = a1[23];
  uint64_t v3 = *((void *)a1 + 1);
  if (v2 >= 0) {
    uint64_t v3 = a1[23];
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (v2 >= 0) {
    size_t v7 = a1;
  }
  else {
    size_t v7 = *(char **)a1;
  }
  if (v5 >= 0) {
    std::string::size_type v8 = a2;
  }
  else {
    std::string::size_type v8 = *(char **)a2;
  }
  while (1)
  {
    __darwin_ct_rune_t v9 = __tolower(*v7);
    BOOL v10 = v9 == __tolower(*v8);
    uint64_t result = v10;
    if (!v10) {
      break;
    }
    ++v7;
    ++v8;
    uint64_t v12 = a1[23];
    if ((v12 & 0x80u) == 0) {
      long long v13 = a1;
    }
    else {
      long long v13 = *(char **)a1;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)a1 + 1);
    }
    if (v7 == &v13[v12]) {
      return 1;
    }
  }
  return result;
}

void mediaplatform::RegexReplace(std::sub_match<const char *> **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (*((char *)a1 + 23) < 0)
  {
    size_t v7 = *a1;
    std::string::size_type v6 = a1[1];
  }
  else
  {
    std::string::size_type v6 = (std::sub_match<const char *> *)*((unsigned __int8 *)a1 + 23);
    size_t v7 = (std::sub_match<const char *> *)a1;
  }
  std::string::size_type v8 = (char *)v6 + (void)v7;
  *(void *)long long v73 = v7;
  *(void *)&v73[8] = (char *)v6 + (void)v7;
  *(void *)&v73[16] = a2;
  *(_DWORD *)&v73[24] = 0;
  *(void *)&long long v75 = 0;
  *(void *)&v74[48] = 0;
  BYTE8(v75) = 0;
  long long v76 = 0uLL;
  LOBYTE(v77) = 0;
  BYTE8(v77) = 0;
  uint64_t v78 = 0;
  memset(v74, 0, 41);
  memset(v68, 0, 17);
  *(void *)&v68[24] = 0;
  *(void *)&v68[32] = 0;
  LOBYTE(v69) = 0;
  BYTE8(v69) = 0;
  *(void *)&long long v70 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v7, (std::sub_match<const char *> *)((char *)v6 + (void)v7), (std::vector<std::csub_match> *)__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)v74, (uint64_t)v7, v8, (uint64_t *)__p, 0);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  char v45 = (char *)a1;
  *(_OWORD *)std::wstring __p = *(_OWORD *)v73;
  *(_OWORD *)&__p[12] = *(_OWORD *)&v73[12];
  *(void *)&__p[40] = 0;
  *(void *)long long v68 = 0;
  *(void *)&__p[32] = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&__p[32], *(long long **)v74, *(long long **)&v74[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v74[8] - *(void *)v74) >> 3));
  long long v69 = v75;
  long long v70 = v76;
  long long v71 = v77;
  uint64_t v72 = v78;
  *(_OWORD *)&v68[8] = *(_OWORD *)&v74[24];
  *(_OWORD *)&v68[24] = *(_OWORD *)&v74[40];
  while (*(void *)&__p[40] != *(void *)&__p[32])
  {
    memset(v80, 0, 24);
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(v80, *(long long **)&__p[32], *(long long **)&__p[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3));
    long long v81 = v69;
    long long v82 = v70;
    long long v83 = v71;
    uint64_t v84 = v72;
    *(_OWORD *)&v80[24] = *(_OWORD *)&v68[8];
    *(_OWORD *)&v80[40] = *(_OWORD *)&v68[24];
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    long long v9 = *(_OWORD *)v80;
    std::string::size_type v56 = 0;
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v56, *(long long **)v80, *(long long **)&v80[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v80[8] - *(void *)v80) >> 3));
    long long v61 = v69;
    long long v62 = v70;
    long long v63 = v71;
    uint64_t v64 = v72;
    long long v59 = *(_OWORD *)&v68[8];
    long long v60 = *(_OWORD *)&v68[24];
    uint64_t v10 = *(void *)(a3 + 24);
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(v65);
    if (v56)
    {
      uint64_t v57 = v56;
      operator delete(v56);
    }
    if (*((void *)&v9 + 1) == (void)v9) {
      long long v11 = (char **)&v80[24];
    }
    else {
      long long v11 = (char **)v9;
    }
    uint64_t v12 = *v11;
    uint64_t v13 = *(unsigned __int8 *)(a4 + 23);
    if ((v13 & 0x80u) == 0) {
      unint64_t v14 = a4;
    }
    else {
      unint64_t v14 = *(void *)a4;
    }
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a4 + 8);
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v14 + v13, (char *)v7, v12, v12 - (char *)v7);
    if ((v66 & 0x80u) == 0) {
      uint64_t v15 = v65;
    }
    else {
      uint64_t v15 = (void **)v65[0];
    }
    if ((v66 & 0x80u) == 0) {
      std::string::size_type v16 = v66;
    }
    else {
      std::string::size_type v16 = (std::string::size_type)v65[1];
    }
    if (v16)
    {
      std::string::size_type v17 = *(unsigned __int8 *)(a4 + 23);
      unint64_t v18 = *(void *)a4;
      if ((v17 & 0x80u) == 0) {
        std::string::size_type v19 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v19 = *(void *)(a4 + 8);
      }
      if ((v17 & 0x80u) == 0) {
        unint64_t v20 = a4;
      }
      else {
        unint64_t v20 = *(void *)a4;
      }
      if (v20 > (unint64_t)v15 || v20 + v19 + 1 <= (unint64_t)v15)
      {
        if ((v17 & 0x80) != 0)
        {
          std::string::size_type v24 = (*(void *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          std::string::size_type v17 = *(void *)(a4 + 8);
          if (v24 - v17 >= v16) {
            goto LABEL_47;
          }
LABEL_45:
          std::string::__grow_by((std::string *)a4, v24, v17 + v16 - v24, v17, v19, 0, v16);
          *(void *)(a4 + 8) = v17 + v16;
          unint64_t v18 = *(void *)a4;
        }
        else
        {
          unint64_t v18 = a4;
          std::string::size_type v24 = 22;
          if (22 - v17 < v16) {
            goto LABEL_45;
          }
LABEL_47:
          if (v17 == v19) {
            std::string::size_type v17 = v19;
          }
          else {
            memmove((void *)(v18 + v19 + v16), (const void *)(v18 + v19), v17 - v19);
          }
        }
        std::string::size_type v25 = v17 + v16;
        if (*(char *)(a4 + 23) < 0) {
          *(void *)(a4 + 8) = v25;
        }
        else {
          *(unsigned char *)(a4 + 23) = v25 & 0x7F;
        }
        *(unsigned char *)(v18 + v25) = 0;
        long long v26 = (unsigned char *)(v18 + v19);
        do
        {
          char v27 = *(unsigned char *)v15;
          uint64_t v15 = (void **)((char *)v15 + 1);
          *v26++ = v27;
          --v16;
        }
        while (v16);
        goto LABEL_55;
      }
      uint64_t v21 = 0;
      memset(&v79, 0, sizeof(v79));
      do
        std::string::push_back(&v79, *((unsigned char *)v15 + v21++));
      while (v16 != v21);
      std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v79;
      }
      else {
        long long v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v79.__r_.__value_.__l.__size_;
      }
      std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v16, v19, (char *)v23, (char *)v23 + size);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
    }
LABEL_55:
    unint64_t v28 = *(void **)v80;
    std::string::size_type v29 = (std::sub_match<const char *> **)&v80[32];
    if (*(void *)&v80[8] != *(void *)v80) {
      std::string::size_type v29 = (std::sub_match<const char *> **)(*(void *)v80 + 8);
    }
    size_t v7 = *v29;
    if (((char)v66 & 0x80000000) == 0)
    {
      if (!*(void *)v80) {
        goto LABEL_60;
      }
LABEL_59:
      operator delete(v28);
      goto LABEL_60;
    }
    operator delete(v65[0]);
    if (v28) {
      goto LABEL_59;
    }
LABEL_60:
    std::string::size_type v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    int v31 = *(std::sub_match<const char *> ***)&__p[32];
    std::string::size_type v30 = *(std::sub_match<const char *> ***)&__p[40];
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v47, *(long long **)&__p[32], *(long long **)&__p[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3));
    long long v52 = v69;
    long long v53 = v70;
    long long v54 = v71;
    uint64_t v55 = v72;
    long long v50 = *(_OWORD *)&v68[8];
    long long v51 = *(_OWORD *)&v68[24];
    int v32 = *(_DWORD *)&__p[24];
    int v33 = *(_DWORD *)&__p[24] | 0x800;
    *(_DWORD *)&__p[24] |= 0x800u;
    if (v30 == v31) {
      std::string::size_type v34 = (std::sub_match<const char *> **)&v68[8];
    }
    else {
      std::string::size_type v34 = v31;
    }
    std::string::size_type v35 = v31 + 1;
    if (v30 == v31) {
      std::string::size_type v35 = (std::sub_match<const char *> **)&v68[16];
    }
    std::string::size_type v36 = *v35;
    int v37 = *(char **)&__p[8];
    if (*v34 != *v35) {
      goto LABEL_66;
    }
    if (*(std::sub_match<const char *> **)&__p[8] == v36)
    {
      if (v31) {
LABEL_70:
      }
        operator delete(v31);
LABEL_71:
      BYTE8(v71) = 0;
      *(_OWORD *)&__p[32] = 0u;
      memset(v68, 0, 25);
      *(void *)&v68[32] = 0;
      *(void *)&long long v69 = 0;
      BYTE8(v69) = 0;
      long long v70 = 0uLL;
      LOBYTE(v71) = 0;
      uint64_t v72 = 0;
      goto LABEL_72;
    }
    *(void *)&v80[48] = 0;
    *(void *)&long long v81 = 0;
    BYTE8(v81) = 0;
    long long v82 = 0uLL;
    LOBYTE(v83) = 0;
    BYTE8(v83) = 0;
    uint64_t v84 = 0;
    memset(v80, 0, 41);
    char v39 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v36, *(std::sub_match<const char *> **)&__p[8], (std::vector<std::csub_match> *)v80, v32 | 0x860u);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v36, v37, (uint64_t *)v80, 1);
    if (*(void *)v80) {
      operator delete(*(void **)v80);
    }
    if ((v39 & 1) == 0)
    {
      std::string::size_type v36 = (std::sub_match<const char *> *)((char *)v36 + 1);
      int v33 = *(_DWORD *)&__p[24];
      int v37 = *(char **)&__p[8];
LABEL_66:
      *(_DWORD *)&__p[24] = v33 | 0x80;
      *(void *)&v80[48] = 0;
      *(void *)&long long v81 = 0;
      BYTE8(v81) = 0;
      long long v82 = 0uLL;
      LOBYTE(v83) = 0;
      BYTE8(v83) = 0;
      uint64_t v84 = 0;
      memset(v80, 0, 41);
      char v38 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v36, (std::sub_match<const char *> *)v37, (std::vector<std::csub_match> *)v80, v33 | 0x80u);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v36, v37, (uint64_t *)v80, (v33 & 0x800) != 0);
      if (*(void *)v80) {
        operator delete(*(void **)v80);
      }
      if ((v38 & 1) == 0)
      {
        int v31 = *(std::sub_match<const char *> ***)&__p[32];
        if (*(void *)&__p[32]) {
          goto LABEL_70;
        }
        goto LABEL_71;
      }
    }
LABEL_72:
    if (v47)
    {
      std::string::size_type v48 = v47;
      operator delete(v47);
    }
  }
  if (*(void *)&__p[32]) {
    operator delete(*(void **)&__p[32]);
  }
  uint64_t v40 = *(unsigned __int8 *)(a4 + 23);
  if ((v40 & 0x80u) == 0) {
    unint64_t v41 = a4;
  }
  else {
    unint64_t v41 = *(void *)a4;
  }
  if ((v40 & 0x80u) != 0) {
    uint64_t v40 = *(void *)(a4 + 8);
  }
  uint64_t v42 = v41 + v40;
  int v43 = v45;
  if (v45[23] < 0)
  {
    int v43 = *(char **)v45;
    uint64_t v44 = *((void *)v45 + 1);
  }
  else
  {
    uint64_t v44 = v45[23];
  }
  std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v42, (char *)v7, &v43[v44], &v43[v44] - (char *)v7);
  if (*(void *)v74) {
    operator delete(*(void **)v74);
  }
}

void sub_2150A3A20()
{
}

void sub_2150A3ACC()
{
}

void *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    *uint64_t v4 = result;
    v4[1] = result;
    uint64_t v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      long long v8 = *a2;
      result[2] = *((void *)a2 + 2);
      *(_OWORD *)uint64_t result = v8;
      result += 3;
      a2 = (long long *)((char *)a2 + 24);
    }
    v4[1] = result;
  }
  return result;
}

void sub_2150A3BB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v7 = a3;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__n_add) {
      return;
    }
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    if (!__n_add) {
      return;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    uint64_t v10 = this;
  }
  std::string::size_type v11 = a2 - (void)v10;
  if (v10 > (std::string *)a3 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= a3)
  {
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      std::string::size_type v13 = 0;
      std::string::size_type v14 = 0;
      unsigned int v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      unsigned int v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v16.__r_.__value_.__l.__size_;
      std::string::size_type v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v15 = &v16;
    }
    else {
      uint64_t v15 = (std::string *)v14;
    }
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v13 = v12;
    }
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, (char *)v15, (char *)v15 + v13);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2150A3D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  std::string::size_type v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    std::string::size_type v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begiint n = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begiint n = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    std::string::size_type v14 = v11;
  }
  else {
    std::string::size_type v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::string::size_type v13 = *a1;
  unsigned int v12 = a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      unsigned int v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    std::string v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      std::string::size_type v29 = &v12[24 * v15];
      uint64_t v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(void *)unsigned int v12 = 0;
        *((void *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      unsigned int v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v11) {
        uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v19);
      unint64_t v22 = &v20[24 * v14];
      unsigned int v12 = &v20[24 * v11];
      long long v23 = v22;
      uint64_t v24 = 24 * v11 - 24 * v14;
      do
      {
        *(void *)long long v23 = 0;
        *((void *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      std::string::size_type v25 = &v20[24 * v21];
      char v27 = *a1;
      long long v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          long long v28 = *(_OWORD *)(v26 - 24);
          *((void *)v22 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        long long v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        unsigned int v12 = a1[1];
      }
    }
  }
  int v31 = *a1;
  if (v12 != *a1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v35 = *a4;
    uint64_t v34 = a4[1];
    do
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      int v37 = (void *)(v35 + v32);
      if (v36 <= v33) {
        char v38 = a4 + 3;
      }
      else {
        char v38 = v37;
      }
      *(void *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33) {
        char v39 = a4 + 3;
      }
      else {
        char v39 = (uint64_t *)(*a4 + v32);
      }
      *(void *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      uint64_t v35 = *a4;
      uint64_t v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33) {
        uint64_t v40 = a4 + 3;
      }
      else {
        uint64_t v40 = (uint64_t *)(*a4 + v32);
      }
      char v41 = *((unsigned char *)v40 + 16);
      int v31 = *a1;
      uint64_t v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  int v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v43;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v8 = a3;
  int v9 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    v185[0] = 0;
    v185[1] = 0;
    *(void *)&long long v186 = 0;
    uint64_t v67 = *(void *)(a1 + 40);
    if (v67)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)char v188 = 0;
      memset(&v188[8], 0, 48);
      *(_OWORD *)std::wstring __p = 0u;
      memset(v190, 0, 21);
      v185[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v185, (uint64_t)v188);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (*(void *)&v188[32]) {
        operator delete(*(void **)&v188[32]);
      }
      long long v68 = v185[1];
      *((_DWORD *)v185[1] - 24) = 0;
      *(v68 - 11) = v9;
      *(v68 - 10) = v9;
      *(v68 - 9) = v8;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v68 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v185[1] - 40), *(unsigned int *)(a1 + 32));
      long long v69 = v185[1];
      *((void *)v185[1] - 2) = v67;
      v180 = v8;
      signed int v70 = v8 - v9;
      *(v69 - 2) = a5;
      *((unsigned char *)v69 - 4) = a6;
      unsigned int v71 = 1;
      while (2)
      {
        if ((v71 & 0xFFF) != 0 || (int)(v71 >> 12) < v70)
        {
          long long v73 = v69 - 4;
          uint64_t v72 = *((void *)v69 - 2);
          long long v74 = v69 - 24;
          if (v72) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v72 + 16))(v72, v69 - 24);
          }
          switch(*(_DWORD *)v74)
          {
            case 0xFFFFFC18:
              long long v75 = (const char *)*((void *)v69 - 10);
              if ((a5 & 0x20) != 0 && v75 == v9 || (a5 & 0x1000) != 0 && v75 != v180) {
                goto LABEL_114;
              }
              uint64_t v161 = *a4;
              *(void *)uint64_t v161 = v9;
              *(void *)(v161 + 8) = v75;
              *(unsigned char *)(v161 + 16) = 1;
              uint64_t v162 = *((void *)v69 - 8);
              uint64_t v163 = *((void *)v69 - 7) - v162;
              if (v163)
              {
                unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * (v163 >> 3);
                size_t v165 = (unsigned char *)(v162 + 16);
                unsigned int v166 = 1;
                do
                {
                  uint64_t v167 = v161 + 24 * v166;
                  *(_OWORD *)uint64_t v167 = *((_OWORD *)v165 - 1);
                  char v168 = *v165;
                  v165 += 24;
                  *(unsigned char *)(v167 + 16) = v168;
                  BOOL v17 = v164 > v166++;
                }
                while (v17);
              }
              uint64_t v67 = 1;
              goto LABEL_232;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_121;
            case 0xFFFFFC1F:
LABEL_114:
              long long v76 = (char *)v185[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v185[1] - 12);
              v185[1] = v76;
              goto LABEL_121;
            case 0xFFFFFC20:
              long long v77 = *((_OWORD *)v69 - 5);
              *(_OWORD *)char v188 = *v74;
              *(_OWORD *)&v188[16] = v77;
              memset(&v188[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v188[32], *((long long **)v69 - 8), *((long long **)v69 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v69 - 7) - *((void *)v69 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v190[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v69 - 5), *((long long **)v69 - 4), (uint64_t)(*((void *)v69 - 4) - *((void *)v69 - 5)) >> 4);
              uint64_t v78 = *v73;
              *(void *)((char *)&v190[1] + 5) = *(void *)((char *)v69 - 11);
              v190[1] = v78;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v73 + 24))(*v73, 1, v69 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v190[1] + 24))(v190[1], 0, v188);
              std::string v79 = (char *)v185[1];
              if (v185[1] >= (void *)v186)
              {
                v185[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v185, (uint64_t)v188);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v80 = *(_OWORD *)&v188[16];
                *(_OWORD *)v185[1] = *(_OWORD *)v188;
                *((_OWORD *)v79 + 1) = v80;
                *((void *)v79 + 4) = 0;
                *((void *)v79 + 5) = 0;
                *((void *)v79 + 6) = 0;
                *((void *)v79 + 7) = 0;
                *((_OWORD *)v79 + 2) = *(_OWORD *)&v188[32];
                *((void *)v79 + 6) = *(void *)&v188[48];
                memset(&v188[32], 0, 24);
                *((void *)v79 + 8) = 0;
                *((void *)v79 + 9) = 0;
                *(_OWORD *)(v79 + 56) = *(_OWORD *)__p;
                *((void *)v79 + 9) = v190[0];
                __p[0] = 0;
                __p[1] = 0;
                v190[0] = 0;
                uint64_t v81 = v190[1];
                *(void *)(v79 + 85) = *(void *)((char *)&v190[1] + 5);
                *((void *)v79 + 10) = v81;
                v185[1] = v79 + 96;
              }
              if (*(void *)&v188[32])
              {
                *(void *)&v188[40] = *(void *)&v188[32];
                operator delete(*(void **)&v188[32]);
              }
LABEL_121:
              long long v69 = v185[1];
              ++v71;
              if (v185[0] == v185[1]) {
                goto LABEL_122;
              }
              continue;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
        }
        break;
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    goto LABEL_232;
  }
  std::string v184 = (const char *)(a3 - a2);
  if (*(_DWORD *)(a1 + 28))
  {
    v185[0] = 0;
    v185[1] = 0;
    *(void *)&long long v186 = 0;
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)char v188 = 0;
      memset(&v188[8], 0, 48);
      *(_OWORD *)std::wstring __p = 0u;
      memset(v190, 0, 21);
      v185[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v185, (uint64_t)v188);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (*(void *)&v188[32]) {
        operator delete(*(void **)&v188[32]);
      }
      v172 = a4;
      unsigned int v12 = v185[1];
      *((_DWORD *)v185[1] - 24) = 0;
      *(v12 - 11) = v9;
      *(v12 - 10) = v9;
      *(v12 - 9) = v8;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v185[1] - 40), *(unsigned int *)(a1 + 32));
      v176 = 0;
      int v178 = 0;
      uint64_t v170 = 0;
      uint64_t v171 = 0;
      int v174 = 0;
      uint64_t v175 = 0;
      std::string::size_type v13 = 0;
      char v14 = 0;
      unsigned int v15 = 0;
      std::string v16 = v185[1];
      *((void *)v185[1] - 2) = v11;
      *(v16 - 2) = a5;
      *((unsigned char *)v16 - 4) = a6;
      do
      {
        BOOL v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v184;
        if (!v17) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        }
        unint64_t v19 = v16 - 4;
        uint64_t v18 = *((void *)v16 - 2);
        int v20 = v16 - 24;
        if (v18) {
          (*(void (**)(uint64_t, _DWORD *))(*(void *)v18 + 16))(v18, v16 - 24);
        }
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            uint64_t v21 = (const char *)*((void *)v16 - 10);
            if ((a5 & 0x20) != 0 && v21 == a2 || (a5 & 0x1000) != 0 && v21 != v8) {
              goto LABEL_21;
            }
            if ((v14 & ((uint64_t)v13 >= (uint64_t)&v21[-*((void *)v16 - 11)])) != 0)
            {
              long long v28 = v178;
              std::string::size_type v29 = v174;
            }
            else
            {
              int v31 = (long long *)*((void *)v16 - 8);
              uint64_t v30 = (long long *)*((void *)v16 - 7);
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v31) >> 3);
              unint64_t v33 = v178;
              int v169 = &v21[-*((void *)v16 - 11)];
              if (0xAAAAAAAAAAAAAAABLL * ((v171 - (uint64_t)v175) >> 3) >= v32)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v178 - v175) >> 3) >= v32)
                {
                  if (v31 == v30)
                  {
                    char v45 = v175;
                    std::string::size_type v46 = v175;
                  }
                  else
                  {
                    char v45 = v175;
                    std::string::size_type v46 = v175;
                    do
                    {
                      *(_OWORD *)std::string::size_type v46 = *v31;
                      v46[16] = *((unsigned char *)v31 + 16);
                      v46 += 24;
                      int v31 = (long long *)((char *)v31 + 24);
                    }
                    while (v31 != v30);
                  }
                  int64_t v44 = v46 - v45;
                  unint64_t v33 = v45;
                }
                else
                {
                  uint64_t v40 = (long long *)((char *)v31 + 8 * ((v178 - v175) >> 3));
                  if (v178 != v175)
                  {
                    char v41 = v175;
                    do
                    {
                      *(_OWORD *)char v41 = *v31;
                      v41[16] = *((unsigned char *)v31 + 16);
                      int v31 = (long long *)((char *)v31 + 24);
                      v41 += 24;
                    }
                    while (v31 != v40);
                  }
                  uint64_t v42 = v178;
                  while (v40 != v30)
                  {
                    long long v43 = *v40;
                    *((void *)v42 + 2) = *((void *)v40 + 2);
                    *(_OWORD *)uint64_t v42 = v43;
                    v42 += 24;
                    uint64_t v40 = (long long *)((char *)v40 + 24);
                  }
                  int64_t v44 = v42 - v178;
                }
              }
              else
              {
                if (v175)
                {
                  operator delete(v175);
                  uint64_t v171 = 0;
                }
                if (v32 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_245;
                }
                unint64_t v34 = 0x5555555555555556 * (v171 >> 3);
                if (v34 <= v32) {
                  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v31) >> 3);
                }
                unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v171 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v34;
                if (v35 > 0xAAAAAAAAAAAAAAALL) {
LABEL_245:
                }
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v35);
                unint64_t v33 = v36;
                char v38 = v36;
                while (v31 != v30)
                {
                  long long v39 = *v31;
                  *((void *)v38 + 2) = *((void *)v31 + 2);
                  *(_OWORD *)char v38 = v39;
                  v38 += 24;
                  int v31 = (long long *)((char *)v31 + 24);
                }
                uint64_t v171 = (uint64_t)&v36[24 * v37];
                int64_t v44 = v38 - v36;
                uint64_t v175 = v36;
              }
              std::string::size_type v48 = (char *)*((void *)v16 - 5);
              uint64_t v47 = (char *)*((void *)v16 - 4);
              unint64_t v49 = (v47 - v48) >> 4;
              if (v49 <= (v170 - (uint64_t)v176) >> 4)
              {
                unint64_t v56 = (v174 - v176) >> 4;
                if (v56 >= v49)
                {
                  if (v48 == v47)
                  {
                    long long v62 = v176;
                    long long v61 = v176;
                    std::string::size_type v13 = v169;
                  }
                  else
                  {
                    long long v61 = v176;
                    std::string::size_type v13 = v169;
                    do
                    {
                      *(void *)long long v61 = *(void *)v48;
                      *((void *)v61 + 1) = *((void *)v48 + 1);
                      v61 += 16;
                      v48 += 16;
                    }
                    while (v48 != v47);
                    long long v62 = v176;
                  }
                  long long v63 = (char *)(v61 - v62);
                  long long v52 = v62;
                }
                else
                {
                  uint64_t v57 = &v48[16 * v56];
                  if (v174 != v176)
                  {
                    uint64_t v58 = v176;
                    do
                    {
                      *(void *)uint64_t v58 = *(void *)v48;
                      *((void *)v58 + 1) = *((void *)v48 + 1);
                      v48 += 16;
                      v58 += 16;
                    }
                    while (v48 != v57);
                  }
                  std::string::size_type v13 = v169;
                  if (v57 == v47)
                  {
                    long long v52 = v174;
                    long long v59 = v174;
                  }
                  else
                  {
                    long long v52 = v174;
                    long long v59 = v174;
                    do
                    {
                      long long v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)long long v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v47);
                  }
                  long long v63 = (char *)(v59 - v52);
                }
              }
              else
              {
                if (v176)
                {
                  operator delete(v176);
                  uint64_t v170 = 0;
                }
                if (v47 - v48 < 0) {
                  goto LABEL_244;
                }
                uint64_t v50 = v170 >> 3;
                if (v170 >> 3 <= v49) {
                  uint64_t v50 = (v47 - v48) >> 4;
                }
                unint64_t v51 = (unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60) {
LABEL_244:
                }
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                long long v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v51);
                long long v54 = v52;
                if (v48 == v47)
                {
                  std::string::size_type v13 = v169;
                }
                else
                {
                  std::string::size_type v13 = v169;
                  do
                  {
                    long long v55 = *(_OWORD *)v48;
                    v48 += 16;
                    *(_OWORD *)long long v54 = v55;
                    v54 += 16;
                  }
                  while (v48 != v47);
                }
                uint64_t v170 = (uint64_t)&v52[16 * v53];
                long long v63 = (char *)(v54 - v52);
                v176 = v52;
              }
              long long v28 = &v33[v44];
              std::string::size_type v29 = &v63[(void)v52];
            }
            int v178 = v28;
            uint64_t v64 = v185[1];
            int v174 = v29;
            if (v13 == v184)
            {
              std::string::size_type v65 = v185[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v64);
              }
              v185[1] = v65;
              char v14 = 1;
              std::string::size_type v13 = v184;
            }
            else
            {
              unsigned __int8 v66 = (char *)v185[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v185[1] - 12);
              v185[1] = v66;
              char v14 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            unint64_t v22 = (char *)v185[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v185[1] - 12);
            v185[1] = v22;
            break;
          case 0xFFFFFC20:
            long long v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)char v188 = *v20;
            *(_OWORD *)&v188[16] = v23;
            memset(&v188[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v188[32], *((long long **)v16 - 8), *((long long **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v16 - 7) - *((void *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v190[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v16 - 5), *((long long **)v16 - 4), (uint64_t)(*((void *)v16 - 4) - *((void *)v16 - 5)) >> 4);
            uint64_t v24 = *v19;
            *(void *)((char *)&v190[1] + 5) = *(void *)((char *)v16 - 11);
            v190[1] = v24;
            (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(void, void, unsigned char *))(*(void *)v190[1] + 24))(v190[1], 0, v188);
            std::string::size_type v25 = (char *)v185[1];
            if (v185[1] >= (void *)v186)
            {
              v185[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v185, (uint64_t)v188);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v26 = *(_OWORD *)&v188[16];
              *(_OWORD *)v185[1] = *(_OWORD *)v188;
              *((_OWORD *)v25 + 1) = v26;
              *((void *)v25 + 4) = 0;
              *((void *)v25 + 5) = 0;
              *((void *)v25 + 6) = 0;
              *((void *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v188[32];
              *((void *)v25 + 6) = *(void *)&v188[48];
              memset(&v188[32], 0, 24);
              *((void *)v25 + 8) = 0;
              *((void *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((void *)v25 + 9) = v190[0];
              __p[0] = 0;
              __p[1] = 0;
              v190[0] = 0;
              uint64_t v27 = v190[1];
              *(void *)(v25 + 85) = *(void *)((char *)&v190[1] + 5);
              *((void *)v25 + 10) = v27;
              v185[1] = v25 + 96;
            }
            if (*(void *)&v188[32])
            {
              *(void *)&v188[40] = *(void *)&v188[32];
              operator delete(*(void **)&v188[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        std::string v16 = v185[1];
      }
      while (v185[0] != v185[1]);
      if (v14)
      {
        uint64_t v82 = *v172;
        *(void *)uint64_t v82 = a2;
        *(void *)(v82 + 8) = &v13[(void)a2];
        *(unsigned char *)(v82 + 16) = 1;
        long long v83 = v175;
        if (v178 != v175)
        {
          uint64_t v84 = v175 + 16;
          unsigned int v85 = 1;
          do
          {
            uint64_t v86 = v82 + 24 * v85;
            *(_OWORD *)uint64_t v86 = *((_OWORD *)v84 - 1);
            char v87 = *v84;
            v84 += 24;
            *(unsigned char *)(v86 + 16) = v87;
            BOOL v17 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v175) >> 3) > v85++;
          }
          while (v17);
        }
        uint64_t v67 = 1;
      }
      else
      {
        uint64_t v67 = 0;
        long long v83 = v175;
      }
      if (v176) {
        operator delete(v176);
      }
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
LABEL_122:
      uint64_t v67 = 0;
    }
LABEL_232:
    *(void *)char v188 = v185;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v188);
    return v67;
  }
  long long v186 = 0u;
  int64x2_t v187 = 0u;
  *(_OWORD *)v185 = 0u;
  uint64_t v67 = *(void *)(a1 + 40);
  if (v67)
  {
    *(_DWORD *)char v188 = 0;
    memset(&v188[8], 0, 48);
    *(_OWORD *)std::wstring __p = 0uLL;
    memset(v190, 0, 21);
    std::deque<std::__state<char>>::push_back(v185, (uint64_t)v188);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v188[32]) {
      operator delete(*(void **)&v188[32]);
    }
    std::string v173 = a4;
    uint64_t v88 = v185[1];
    unint64_t v89 = v187.i64[1] + v187.i64[0] - 1;
    unint64_t v90 = v89 / 0x2A;
    uint64_t v91 = *((void *)v185[1] + v89 / 0x2A);
    unint64_t v92 = 3 * (v89 % 0x2A);
    uint64_t v93 = v91 + 32 * v92;
    *(_DWORD *)uint64_t v93 = 0;
    *(void *)(v93 + 8) = v9;
    *(void *)(v88[v90] + 32 * v92 + 16) = v9;
    *(void *)(v88[v90] + 32 * v92 + 24) = v8;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v88[v90] + 32 * v92 + 56), *(unsigned int *)(a1 + 32));
    char v179 = 0;
    unsigned int v94 = 0;
    std::string v177 = 0;
    uint64_t v95 = v187.i64[1];
    uint64_t v96 = v185[1];
    unint64_t v97 = v187.i64[1] + v187.i64[0] - 1;
    unint64_t v98 = v97 / 0x2A;
    unint64_t v99 = 3 * (v97 % 0x2A);
    *(void *)(*((void *)v185[1] + v98) + 32 * v99 + 80) = v67;
    uint64_t v100 = v96[v98] + 32 * v99;
    *(_DWORD *)(v100 + 88) = a5;
    *(unsigned char *)(v100 + 92) = a6;
    while (2)
    {
      if ((++v94 & 0xFFF) == 0 && (int)(v94 >> 12) >= (int)v184) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v102 = v95 + v187.i64[0] - 1;
      uint64_t v103 = *((void *)v185[1] + v102 / 0x2A);
      unint64_t v104 = v102 % 0x2A;
      uint64_t v105 = v103 + 96 * (v102 % 0x2A);
      std::string v107 = (void *)(v105 + 80);
      uint64_t v106 = *(void *)(v105 + 80);
      if (v106) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v106 + 16))(v106, v103 + 96 * v104);
      }
      switch(*(_DWORD *)v105)
      {
        case 0xFFFFFC18:
          int v108 = *(const char **)(v103 + 96 * v104 + 16);
          BOOL v109 = (a5 & 0x1000) == 0 || v108 == v8;
          char v110 = v109;
          BOOL v111 = v108 != v9 || (a5 & 0x20) == 0;
          if (!v111 || (v110 & 1) == 0) {
            goto LABEL_223;
          }
          uint64_t v112 = (uint64_t)&v108[-*(void *)(v103 + 96 * v104 + 8)];
          int v113 = v177;
          if ((v179 & ((uint64_t)v177 >= v112)) == 0) {
            int v113 = (const char *)v112;
          }
          if (v113 != v184)
          {
            std::string v177 = v113;
            std::deque<std::__state<char>>::pop_back(v185);
            char v179 = 1;
            goto LABEL_224;
          }
          uint64_t v114 = (void **)v185[1];
          int v115 = (unsigned char *)v186;
          if ((void *)v186 == v185[1])
          {
            int v115 = v185[1];
          }
          else
          {
            v116 = v8;
            std::string v117 = (char *)v185[1] + 8 * (v187.i64[0] / 0x2AuLL);
            int v118 = (void *)(*v117 + 96 * (v187.i64[0] % 0x2AuLL));
            unint64_t v119 = *((void *)v185[1] + (v187.i64[1] + v187.i64[0]) / 0x2AuLL)
                 + 96 * ((v187.i64[1] + v187.i64[0]) % 0x2AuLL);
            if (v118 != (void *)v119)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v118);
                v118 += 12;
                if ((void *)((char *)v118 - *v117) == (void *)4032)
                {
                  uint64_t v120 = (void *)v117[1];
                  ++v117;
                  int v118 = v120;
                }
              }
              while (v118 != (void *)v119);
              uint64_t v114 = (void **)v185[1];
              int v115 = (unsigned char *)v186;
            }
            long long v8 = v116;
          }
          v187.i64[1] = 0;
          unint64_t v150 = v115 - (unsigned char *)v114;
          if (v150 >= 0x11)
          {
            do
            {
              operator delete(*v114);
              uint64_t v114 = (void **)((char *)v185[1] + 8);
              v185[1] = v114;
              unint64_t v150 = v186 - (void)v114;
            }
            while ((void)v186 - (void)v114 > 0x10uLL);
          }
          if (v150 >> 3 == 1)
          {
            uint64_t v151 = 21;
          }
          else
          {
            if (v150 >> 3 != 2) {
              goto LABEL_211;
            }
            uint64_t v151 = 42;
          }
          v187.i64[0] = v151;
LABEL_211:
          char v179 = 1;
          std::string v177 = v184;
LABEL_224:
          uint64_t v95 = v187.i64[1];
          if (v187.i64[1]) {
            continue;
          }
          if (v179)
          {
            uint64_t v159 = *v173;
            *(void *)uint64_t v159 = v9;
            *(void *)(v159 + 8) = &v177[(void)v9];
            uint64_t v67 = 1;
            *(unsigned char *)(v159 + 16) = 1;
          }
          else
          {
            uint64_t v67 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_224;
        case 0xFFFFFC1D:
          unint64_t v121 = v187.i64[0];
          v122 = (char *)v185[1];
          v123 = (char *)v186;
          if (!v187.i64[0])
          {
            unint64_t v124 = (uint64_t)(v186 - (unint64_t)v185[1]) >> 3;
            uint64_t v125 = 42 * v124 - 1;
            if ((void *)v186 == v185[1]) {
              uint64_t v125 = 0;
            }
            if ((unint64_t)(v125 - v187.i64[1]) < 0x2A)
            {
              if (v124 >= (uint64_t)(*((void *)&v186 + 1) - (unint64_t)v185[0]) >> 3)
              {
                if (*((void **)&v186 + 1) == v185[0]) {
                  unint64_t v128 = 1;
                }
                else {
                  unint64_t v128 = (uint64_t)(*((void *)&v186 + 1) - (unint64_t)v185[0]) >> 2;
                }
                *(void *)&v188[32] = (char *)&v186 + 8;
                *(void *)char v188 = std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v128);
                *(void *)&v188[8] = *(void *)v188;
                *(void *)&v188[16] = *(void *)v188;
                *(void *)&v188[24] = *(void *)v188 + 8 * v129;
                std::string v181 = v8;
                __x.first = (const char *)operator new(0xFC0uLL);
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v188, &__x);
                v130 = (uint64_t *)v185[1];
                for (std::string::size_type i = *(char **)&v188[16]; v130 != (uint64_t *)v186; *(void *)&v188[16] += 8)
                {
                  if (i == *(char **)&v188[24])
                  {
                    int v132 = *(char **)&v188[8];
                    char v133 = *(void **)v188;
                    if (*(void *)&v188[8] <= *(void *)v188)
                    {
                      if (i == *(char **)v188) {
                        unint64_t v140 = 1;
                      }
                      else {
                        unint64_t v140 = (uint64_t)&i[-*(void *)v188] >> 2;
                      }
                      int v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v140);
                      uint64_t v143 = i - v132;
                      BOOL v109 = i == v132;
                      std::string::size_type i = &v141[8 * (v140 >> 2)];
                      if (!v109)
                      {
                        std::string::size_type i = &v141[8 * (v140 >> 2) + (v143 & 0xFFFFFFFFFFFFFFF8)];
                        uint64_t v144 = 8 * (v143 >> 3);
                        int v145 = &v141[8 * (v140 >> 2)];
                        do
                        {
                          uint64_t v146 = *(void *)v132;
                          v132 += 8;
                          *(void *)int v145 = v146;
                          v145 += 8;
                          v144 -= 8;
                        }
                        while (v144);
                      }
                      *(void *)char v188 = v141;
                      *(void *)&v188[8] = &v141[8 * (v140 >> 2)];
                      *(void *)&v188[16] = i;
                      *(void *)&v188[24] = &v141[8 * v142];
                      if (v133) {
                        operator delete(v133);
                      }
                    }
                    else
                    {
                      uint64_t v134 = (uint64_t)(*(void *)&v188[8] - *(void *)v188) >> 3;
                      if (v134 >= -1) {
                        uint64_t v135 = v134 + 1;
                      }
                      else {
                        uint64_t v135 = v134 + 2;
                      }
                      uint64_t v136 = *(void *)&v188[8] - 8 * (v135 >> 1);
                      size_t v137 = (size_t)&i[-*(void *)&v188[8]];
                      if (i != *(char **)&v188[8])
                      {
                        uint64_t v138 = (void *)(*(void *)&v188[8] - 8 * (v135 >> 1));
                        memmove(v138, *(const void **)&v188[8], v137);
                        uint64_t v136 = (uint64_t)v138;
                        std::string::size_type i = v132;
                      }
                      v139 = &i[-8 * (v135 >> 1)];
                      std::string::size_type i = (char *)(v136 + v137);
                      *(void *)&v188[8] = v139;
                      *(void *)&v188[16] = v136 + v137;
                    }
                  }
                  uint64_t v147 = *v130++;
                  *(void *)std::string::size_type i = v147;
                  std::string::size_type i = (char *)(*(void *)&v188[16] + 8);
                }
                v148 = v185[0];
                *(_OWORD *)v185 = *(_OWORD *)v188;
                *(void *)&long long v186 = i;
                *((void *)&v186 + 1) = *(void *)&v188[24];
                uint64_t v149 = 21;
                if (&i[-*(void *)&v188[8]] != (char *)8) {
                  uint64_t v149 = v187.i64[0] + 42;
                }
                v187.i64[0] = v149;
                long long v8 = v181;
                if (v148) {
                  operator delete(v148);
                }
                int v9 = a2;
              }
              else
              {
                if (v185[1] == v185[0])
                {
                  *(void *)char v188 = operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v185, v188);
                  *(void *)char v188 = *(void *)(v186 - 8);
                  *(void *)&long long v186 = v186 - 8;
                }
                else
                {
                  *(void *)char v188 = operator new(0xFC0uLL);
                }
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v185, v188);
                uint64_t v152 = 21;
                if ((void)v186 - (unint64_t)v185[1] != 8) {
                  uint64_t v152 = v187.i64[0] + 42;
                }
                v187.i64[0] = v152;
              }
            }
            else
            {
              v187.i64[0] = 42;
              *(void *)char v188 = *(void *)(v186 - 8);
              *(void *)&long long v186 = v186 - 8;
              std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v185, v188);
            }
            unint64_t v121 = v187.i64[0];
            v122 = (char *)v185[1];
            v123 = (char *)v186;
          }
          v153 = &v122[8 * (v121 / 0x2A)];
          unint64_t v154 = *(void *)v153 + 96 * (v121 % 0x2A);
          if (v123 == v122) {
            uint64_t v155 = 0;
          }
          else {
            uint64_t v155 = v154;
          }
          if (v155 == *(void *)v153) {
            uint64_t v155 = *((void *)v153 - 1) + 4032;
          }
          long long v156 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)(v155 - 96) = *(_OWORD *)v105;
          *(_OWORD *)(v155 - 80) = v156;
          uint64_t v157 = v103 + 96 * v104;
          *(void *)(v155 - 56) = 0;
          *(void *)(v155 - 48) = 0;
          *(void *)(v155 - 64) = 0;
          *(_OWORD *)(v155 - 64) = *(_OWORD *)(v157 + 32);
          *(void *)(v155 - 48) = *(void *)(v157 + 48);
          *(void *)(v157 + 32) = 0;
          *(void *)(v157 + 40) = 0;
          *(void *)(v157 + 48) = 0;
          *(void *)(v155 - 40) = 0;
          *(void *)(v155 - 32) = 0;
          *(void *)(v155 - 24) = 0;
          *(_OWORD *)(v155 - 40) = *(_OWORD *)(v157 + 56);
          *(void *)(v155 - 24) = *(void *)(v157 + 72);
          *(void *)(v157 + 56) = 0;
          *(void *)(v157 + 64) = 0;
          *(void *)(v157 + 72) = 0;
          uint64_t v158 = *v107;
          *(void *)(v155 - 11) = *(void *)(v105 + 85);
          *(void *)(v155 - 16) = v158;
          int64x2_t v187 = vaddq_s64(v187, (int64x2_t)xmmword_21511C680);
          goto LABEL_223;
        case 0xFFFFFC1F:
LABEL_223:
          std::deque<std::__state<char>>::pop_back(v185);
          goto LABEL_224;
        case 0xFFFFFC20:
          long long v126 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)char v188 = *(_OWORD *)v105;
          *(_OWORD *)&v188[16] = v126;
          memset(&v188[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v188[32], *(long long **)(v103 + 96 * v104 + 32), *(long long **)(v103 + 96 * v104 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v103 + 96 * v104 + 40) - *(void *)(v103 + 96 * v104 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v190[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v103 + 96 * v104 + 56), *(long long **)(v103 + 96 * v104 + 64), (uint64_t)(*(void *)(v103 + 96 * v104 + 64) - *(void *)(v103 + 96 * v104 + 56)) >> 4);
          uint64_t v127 = *v107;
          *(void *)((char *)&v190[1] + 5) = *(void *)(v105 + 85);
          v190[1] = v127;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v107 + 24))(*v107, 1, v103 + 96 * v104);
          (*(void (**)(void, void, unsigned char *))(*(void *)v190[1] + 24))(v190[1], 0, v188);
          std::deque<std::__state<char>>::push_back(v185, (uint64_t)v188);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v188[32])
          {
            *(void *)&v188[40] = *(void *)&v188[32];
            operator delete(*(void **)&v188[32]);
          }
          goto LABEL_224;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v185);
  return v67;
}

void sub_2150A5538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begiint n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      unint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    unsigned int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unsigned int v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  begiint n = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      std::string::size_type v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      uint64_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *uint64_t v18 = v20;
        uint64_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      unint64_t v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        unint64_t v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  begiint n = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    uint64_t v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    uint64_t v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exceptioint n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2166B2230](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2150A5D34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2150A5E04(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2150A5E78(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exceptioint n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2166B2230](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2150A5ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        char v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        uint64_t v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        std::string::size_type v29 = (char *)*((void *)&v85 + 1);
        long long v28 = (char *)v85;
        int v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v37);
              uint64_t v40 = v38;
              std::string::size_type v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                long long v43 = v29;
                int64_t v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)long long v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              int v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              long long v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unint64_t v34 = &v30[8 * (v33 >> 1)];
              std::string::size_type v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        uint64_t v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      long long v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      long long v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          signed int v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            long long v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          uint64_t v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v77);
        long long v52 = &v51[8 * (v77 >> 2)];
        long long v54 = &v51[8 * v78];
        std::string v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          uint64_t v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)uint64_t v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        long long v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            std::pair<const char *, const char *> v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            std::pair<const char *, const char *> v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          uint64_t v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v50);
        long long v52 = &v51[8 * (v50 >> 2)];
        long long v54 = &v51[8 * v53];
        long long v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          uint64_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)uint64_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_2150A63DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          unint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        std::vector<std::csub_match>::size_type v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)std::vector<std::csub_match>::size_type v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      std::pair<const char *, const char *> v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v16);
      std::vector<std::csub_match>::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void mediaplatform::Base16Representation(mediaplatform *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v5 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *((void *)this + 3);
  while (v5 < *((void *)this + 1))
  {
    std::string::push_back(a2, a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v6 + v5) >> 4]);
    std::string::push_back(a2, a0123456789abcd[*(unsigned char *)(v6 + v5++) & 0xF]);
  }
}

void sub_2150A6A00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::Account>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Account>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance(void)::_sharedInstance;
}

void sub_2150A6BDC(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::AccountTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12AccountTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::AccountTable **a1)
{
  unint64_t v2 = operator new(0x1C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *unint64_t v2 = &unk_26C5CA1A0;
  __n128 result = mlcore::AccountTable::AccountTable((mlcore::AccountTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::AccountTable *)v2;
  return result;
}

void sub_2150A6C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::AccountTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::AccountTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::AccountTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::Account>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Account>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  BOOL v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)BOOL v8 = &unk_26C5CB1D0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C86C8;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150A6F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Account>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Account>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Account>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Account>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Account::~Account(mlcore::Account *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::AccountPropertyDSID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AccountPropertyDSID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AccountPropertyDSID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyDSID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyDSID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyDSID(void)::$_0 &&>>()
{
}

void sub_2150A7350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AccountPropertyAppleID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AccountPropertyAppleID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AccountPropertyAppleID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAppleID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyAppleID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAppleID(void)::$_0 &&>>()
{
}

void sub_2150A7608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AccountPropertyAltDSID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::AccountPropertyAltDSID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::AccountPropertyAltDSID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAltDSID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyAltDSID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAltDSID(void)::$_0 &&>>()
{
}

void sub_2150A789C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::Account::dsid(mlcore::Account *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::AccountPropertyDSID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::Account::setDSID(mlcore::Account *this, uint64_t a2)
{
  unint64_t v5 = mlcore::AccountPropertyDSID(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::Account::appleID(mlcore::Account *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::AccountPropertyAppleID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Account::setAppleID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::AccountPropertyAppleID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Account::altDSID(mlcore::Account *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::AccountPropertyAltDSID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Account::setAltDSID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::AccountPropertyAltDSID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::entityType()
{
  return 12;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  BOOL v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)BOOL v8 = &unk_26C5CACC8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C7C10;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150A7DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CACC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CACC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::PlaylistItemReaction::~PlaylistItemReaction(mlcore::PlaylistItemReaction *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

double mlcore::PlaylistItemReaction::PlaylistItemReaction(mlcore::PlaylistItemReaction *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C7C10;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C7C10;
  return result;
}

uint64_t ChapterData_Create(void *a1)
{
  char v2 = malloc_type_calloc(0x58uLL, 1uLL, 0x1745688DuLL);
  if (v2)
  {
    uint64_t v3 = v2;
    *(void *)char v2 = 0x163687064;
    uint64_t v4 = JRAtomContainerCreate((uint64_t **)v2 + 3);
    if (v4)
    {
      uint64_t v5 = v4;
    }
    else
    {
      v3[5] = 0;
      uint64_t v5 = ChapterData_NewChapterInternal((uint64_t)v3, 0, 0, 0);
      if (!v5)
      {
LABEL_7:
        *a1 = v3;
        return v5;
      }
    }
    ChapterData_Dispose(v3);
    uint64_t v3 = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t ChapterData_NewChapterInternal(uint64_t a1, unsigned int a2, int a3, unsigned int *a4)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  if (a2 <= 1) {
    signed int v7 = 1;
  }
  else {
    signed int v7 = a2;
  }
  if (a3)
  {
    BOOL v8 = (unsigned int **)(a1 + 32);
    if (!*(void *)(a1 + 32))
    {
      uint64_t result = JRAtomContainerCreate((uint64_t **)(a1 + 32));
      if (result) {
        return result;
      }
    }
  }
  else
  {
    BOOL v8 = (unsigned int **)(a1 + 24);
  }
  uint64_t v10 = *v8;
  int v11 = JRCountChildrenOfType(v10, 0, 1667785072);
  if (v11 >= 1)
  {
    __int16 v12 = v11;
    signed int v18 = 0;
    if (JRFindChildByIndex(v10, 0, 1667785072, v11, &v18))
    {
      signed int v13 = v18;
      if (v18 >= v7)
      {
        while (1)
        {
          signed int v19 = 0;
          int v14 = v12;
          unsigned int v15 = JRFindChildByIndex(v10, 0, 1667785072, v12, &v19);
          if (v15) {
            signed int v13 = v19;
          }
          if (v13 < v7)
          {
            __int16 v16 = v12 + 1;
            if (a3) {
              return JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, a4);
            }
            goto LABEL_25;
          }
          if (v13 == v7) {
            break;
          }
          --v12;
          if (v14 <= 1) {
            goto LABEL_20;
          }
        }
        if (!a4) {
          return 0;
        }
        unsigned int v17 = v15;
        uint64_t result = 0;
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    return 4294967246;
  }
LABEL_20:
  __int16 v16 = 0;
  if (a3) {
    return JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, a4);
  }
LABEL_25:
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 78) = 0;
  uint64_t result = JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, (_DWORD *)(a1 + 72));
  if (!result)
  {
    *(_DWORD *)(a1 + 68) = v7;
    *(unsigned char *)(a1 + 64) = 1;
    *(_WORD *)(a1 + 76) = v16;
    *(unsigned char *)(a1 + 78) = 0;
    *(_DWORD *)(a1 + 80) = -1;
    ++*(_DWORD *)(a1 + 20);
    *(unsigned char *)(a1 + 16) = 1;
    if (a4)
    {
      uint64_t result = 0;
      unsigned int v17 = *(_DWORD *)(a1 + 72);
LABEL_30:
      *a4 = v17;
      return result;
    }
    return 0;
  }
  return result;
}

void ChapterData_Dispose(_DWORD *a1)
{
  if (*a1 == 1667788900)
  {
    JRAtomContainerRelease(*((_DWORD **)a1 + 3));
    JRAtomContainerRelease(*((_DWORD **)a1 + 4));
    char v2 = (void *)*((void *)a1 + 5);
    if (v2) {
      free(v2);
    }
    uint64_t v3 = (void *)*((void *)a1 + 6);
    if (v3) {
      free(v3);
    }
    uint64_t v4 = (void *)*((void *)a1 + 7);
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

uint64_t ChapterData_NewChapter(uint64_t a1, unsigned int a2)
{
  return ChapterData_NewChapterInternal(a1, a2, 0, 0);
}

uint64_t ChapterData_CreateWithFlattenedData(unsigned int a1, const void *a2, int8x8_t **a3)
{
  int v14 = 0;
  uint64_t v6 = ChapterData_Create(&v14);
  signed int v7 = v14;
  if (v6)
  {
    uint64_t v8 = v6;
    if (v14)
    {
LABEL_3:
      ChapterData_Dispose(v7);
      signed int v7 = 0;
    }
  }
  else
  {
    if (!v14)
    {
      uint64_t v8 = 4294967188;
      goto LABEL_12;
    }
    uint64_t v9 = JRDataToAtomContainer(a1, a2);
    if (!v9)
    {
      uint64_t v8 = 4294967246;
      goto LABEL_3;
    }
    uint64_t v10 = (unsigned int *)v9;
    JRAtomContainerRelease(*(_DWORD **)&v7[3]);
    v7[3] = (int8x8_t)v10;
    v7[2].i32[1] = JRCountChildrenOfType(v10, 0, 1667785072);
    LODWORD(__n) = 0;
    AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)&v7[3], 0, 1751475314, 1, &__n);
    if (AtomDataPtr)
    {
      unsigned int v12 = __n;
      if (__n >= 9)
      {
        unsigned int v12 = 8;
        LODWORD(__n) = 8;
      }
      memcpy(&v7[1], AtomDataPtr, v12);
      v7[1] = vrev32_s8(v7[1]);
    }
    uint64_t v8 = 0;
  }
LABEL_12:
  *a3 = v7;
  return v8;
}

uint64_t ChapterData_ExportFlattenedData(uint64_t a1, CFDataRef *a2)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = bswap32(*(_DWORD *)(a1 + 12));
    v7[0] = bswap32(*(_DWORD *)(a1 + 8));
    v7[1] = v4;
    JRAddOrInsertAtom(*(unsigned int **)(a1 + 24), 0, 0x68656472u, 8, v7);
    *(unsigned char *)(a1 + 16) = 0;
  }
  CFDataRef v5 = JRAtomContainerToCFData(*(unsigned int **)(a1 + 24));
  *a2 = v5;
  if (v5) {
    return 0;
  }
  else {
    return 4294967246;
  }
}

_DWORD *ChapterData_Retain(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900) {
      ++result[1];
    }
  }
  return result;
}

void ChapterData_Release(_DWORD *a1)
{
  if (a1 && *a1 == 1667788900)
  {
    int v1 = a1[1] - 1;
    a1[1] = v1;
    if (!v1) {
      ChapterData_Dispose(a1);
    }
  }
}

int8x8_t *ChapterData_CreateCopy(int8x8_t *result)
{
  theCFDataRef Data = 0;
  uint64_t v6 = 0;
  if (result)
  {
    if (result->i32[0] == 1667788900)
    {
      int v1 = ChapterData_ExportFlattenedData((uint64_t)result, &theData);
      CFDataRef v2 = theData;
      if (!v1)
      {
        unsigned int Length = CFDataGetLength(theData);
        BytePtr = CFDataGetBytePtr(v2);
        ChapterData_CreateWithFlattenedData(Length, BytePtr, &v6);
      }
      if (v2) {
        CFRelease(v2);
      }
      return v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ChapterData_SetProperty(uint64_t a1, unsigned int a2, int a3, char a4, int a5, uint64_t *a6)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  unsigned int v7 = a2 <= 1 ? 1 : a2;
  if (v7 == -1) {
    return 4294967246;
  }
  unsigned int ChapterAtom = ChapterData_GetChapterAtom(a1, v7, a4);
  int v32 = ChapterAtom;
  if (!ChapterAtom) {
    return 4294967246;
  }
  unsigned int v12 = ChapterAtom;
  if (a3 > 1886154594)
  {
    if (a3 != 1886154595)
    {
      if (a3 != 1970433056 && a3 != 1970433140) {
        goto LABEL_27;
      }
      int v17 = *(_DWORD *)(a1 + 12);
      if ((v17 & 4) == 0)
      {
        *(_DWORD *)(a1 + 12) = v17 | 4;
        *(unsigned char *)(a1 + 16) = 1;
      }
      unsigned int v15 = (void *)(a1 + 56);
      int v14 = *(void **)(a1 + 56);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v26 = *(_DWORD *)(a1 + 12);
    if ((v26 & 2) == 0)
    {
      *(_DWORD *)(a1 + 12) = v26 | 2;
      *(unsigned char *)(a1 + 16) = 1;
    }
    uint64_t v27 = *(void **)(a1 + 48);
    if (v27) {
      free(v27);
    }
    *(void *)(a1 + 48) = 0;
    __memmove_chk();
    if (v30 == 1953653099)
    {
      long long v28 = (char *)&v31 + 4;
      unsigned int v29 = bswap32(HIDWORD(v31));
    }
    else
    {
      if (v30 != 1768777060)
      {
LABEL_45:
        *(unsigned char *)(a1 + 78) = 0;
        signed int v18 = *(unsigned int **)(a1 + 24);
        uint64_t v22 = &v30;
        int v19 = v12;
        unsigned int v20 = 1886154595;
        int v21 = a5;
        goto LABEL_28;
      }
      LODWORD(v30) = 1684368745;
      long long v28 = (char *)&v30 + 4;
      unsigned int v29 = HIDWORD(v30);
    }
    *(_DWORD *)long long v28 = bswap32(v29);
    goto LABEL_45;
  }
  if (a3 == 1851878757)
  {
    int v23 = *(_DWORD *)(a1 + 12);
    if ((v23 & 1) == 0)
    {
      *(_DWORD *)(a1 + 12) = v23 | 1;
      *(unsigned char *)(a1 + 16) = 1;
    }
    unsigned int v15 = (void *)(a1 + 40);
    int v14 = *(void **)(a1 + 40);
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (a3 != 1885561704)
  {
    if (a3 != 1885626740)
    {
LABEL_27:
      *(unsigned char *)(a1 + 78) = 0;
      signed int v18 = *(unsigned int **)(a1 + 24);
      int v19 = v12;
      unsigned int v20 = a3;
      int v21 = a5;
      uint64_t v22 = a6;
LABEL_28:
      JRAddOrInsertAtom(v18, v19, v20, v21, v22);
      uint64_t result = 0;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    int v13 = *(_DWORD *)(a1 + 12);
    if ((v13 & 2) == 0)
    {
      *(_DWORD *)(a1 + 12) = v13 | 2;
      *(unsigned char *)(a1 + 16) = 1;
    }
    unsigned int v15 = (void *)(a1 + 48);
    int v14 = *(void **)(a1 + 48);
    if (!v14)
    {
LABEL_26:
      *unsigned int v15 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v14);
    goto LABEL_26;
  }
  uint64_t result = ChapterData_NewChapterInternal(a1, v7, 1, (unsigned int *)&v32);
  if (!result)
  {
    unsigned int v24 = JRFindChildByIndex(*(unsigned int **)(a1 + 32), v32, 1885561704, 1, 0);
    LODWORD(v30) = v24;
    unint64_t v25 = *(unsigned int **)(a1 + 32);
    if (v24) {
      JRSetAtomData(v25, v24, a5, a6);
    }
    else {
      JRInsertChild(v25, v32, 0x70636368u, 0, 1, a5, a6, &v30);
    }
    return 0;
  }
  return result;
}

unsigned int *ChapterData_GetChapterAtom(uint64_t a1, unsigned int a2, char a3)
{
  __int16 v13 = 1;
  if (*(_DWORD *)a1 != 1667788900) {
    return 0;
  }
  int v12 = 0;
  if (a2 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a2;
  }
  if ((a3 & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 64) || *(_DWORD *)(a1 + 68) != v4)
    {
      CFDataRef v5 = JRFindChildByID(*(unsigned int **)(a1 + 24), 0, 1667785072, v4, &v13);
      uint64_t v6 = v5;
      if (v5)
      {
        *(_DWORD *)(a1 + 68) = v4;
        *(_DWORD *)(a1 + 72) = v5;
        *(_WORD *)(a1 + 76) = v13;
        *(unsigned char *)(a1 + 64) = 1;
        *(unsigned char *)(a1 + 78) = 0;
      }
      return v6;
    }
    return (unsigned int *)*(unsigned int *)(a1 + 72);
  }
  if (*(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 78) && v4 >= *(_DWORD *)(a1 + 68) && v4 < *(_DWORD *)(a1 + 80)) {
    return (unsigned int *)*(unsigned int *)(a1 + 72);
  }
  uint64_t v6 = 0;
  int v8 = -1;
  for (__int16 i = 1; ; ++i)
  {
    uint64_t v10 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, i, &v12);
    if (!v10)
    {
      int v11 = 0;
      if (!v6) {
        return v6;
      }
      goto LABEL_24;
    }
    if (v12 > v4) {
      break;
    }
    int v8 = v12;
    uint64_t v6 = v10;
  }
  int v11 = (int)v10;
  if (!v6) {
    return v6;
  }
LABEL_24:
  *(_DWORD *)(a1 + 68) = v8;
  *(_DWORD *)(a1 + 72) = v6;
  *(_WORD *)(a1 + 76) = i - 1;
  *(unsigned char *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 78) = 1;
  if (v10)
  {
    *(_DWORD *)(a1 + 80) = v12;
    *(_DWORD *)(a1 + 84) = v11;
  }
  else
  {
    *(void *)(a1 + 80) = 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t ChapterData_CopyProperty(uint64_t a1, unsigned int a2, int a3, char a4, unsigned int a5, _WORD *a6)
{
  if (!a1 || *(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  if (a2 <= 1) {
    a2 = 1;
  }
  if (a2 == -1) {
    return 4294967246;
  }
  if (a3 != 1970433140)
  {
    if (a3 == 1851878757)
    {
      return ChapterData_FindNameForTime(a1, a2, a4, a5, a6);
    }
    int ChapterAtom = ChapterData_GetChapterAtom(a1, a2, a4);
    if (ChapterAtom)
    {
      int v12 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), ChapterAtom, a3, 1, 0);
      if (v12) {
        return JRCopyAtomDataToPtr(*(unsigned int **)(a1 + 24), v12, 1, a5, a6, 0);
      }
    }
    return 4294967246;
  }
  return ChapterData_FindURLTitleForTime(a1, a2, a4, a5, a6);
}

uint64_t ChapterData_FindNameForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, _WORD *a5)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900 || (*(unsigned char *)(a1 + 12) & 1) == 0) {
    return 4294967246;
  }
  if (a2 <= 1) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = a2;
  }
  int v11 = (uint64_t *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 40);
  if (!v10)
  {
    uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1851878757, (void *)(a1 + 40));
    if (result) {
      return result;
    }
    uint64_t v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime) {
    return 4294967246;
  }
  LODWORD(__n) = 0;
  int v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13) {
    return 4294967246;
  }
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1851878757, 1, &__n);
  if (!AtomDataPtr) {
    return 4294967246;
  }
  unsigned int v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    unsigned int v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  if (v15 >= 2)
  {
    uint64_t v16 = v15 >> 1;
    do
    {
      *a5 = bswap32((unsigned __int16)*a5) >> 16;
      ++a5;
      --v16;
    }
    while (v16);
  }
  return 0;
}

uint64_t ChapterData_FindURLTitleForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, _WORD *a5)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900 || (*(unsigned char *)(a1 + 12) & 4) == 0) {
    return 4294967246;
  }
  if (a2 <= 1) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = a2;
  }
  int v11 = (uint64_t *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  if (!v10)
  {
    uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433140, (void *)(a1 + 56));
    if (result) {
      return result;
    }
    uint64_t v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime) {
    return 4294967246;
  }
  LODWORD(__n) = 0;
  int v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13) {
    return 4294967246;
  }
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1970433140, 1, &__n);
  if (!AtomDataPtr) {
    return 4294967246;
  }
  unsigned int v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    unsigned int v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  if (v15 >= 2)
  {
    uint64_t v16 = v15 >> 1;
    do
    {
      *a5 = bswap32((unsigned __int16)*a5) >> 16;
      ++a5;
      --v16;
    }
    while (v16);
  }
  return 0;
}

uint64_t ChapterDataCacheTable_BuildTable(unsigned int *a1, int a2, void *a3)
{
  int v6 = JRCountChildrenOfType(a1, 0, 1667785072);
  unsigned int v7 = malloc_type_calloc(8 * (v6 - 1) + 16, 1uLL, 0x1745688DuLL);
  int v8 = v7;
  if (v7)
  {
    int v15 = 0;
    *unsigned int v7 = v6;
    for (__int16 i = 1; ; ++i)
    {
      int v16 = 0;
      int v10 = JRFindChildByIndex(a1, 0, 1667785072, i, &v16);
      if (!v10) {
        break;
      }
      int v11 = v16;
      if (JRFindAndGetAtomDataPtr(a1, v10, a2, 1, &v15))
      {
        uint64_t v12 = v8[1];
        if (v12 >= *v8) {
          goto LABEL_11;
        }
        int v13 = &v8[2 * v12];
        *((_WORD *)v13 + 4) = i;
        v13[3] = v11;
        v8[1] = v12 + 1;
      }
    }
    if (v8[1])
    {
      uint64_t result = 0;
      goto LABEL_12;
    }
LABEL_11:
    free(v8);
    int v8 = 0;
    uint64_t result = 4294967246;
  }
  else
  {
    uint64_t result = 4294967188;
  }
LABEL_12:
  *a3 = v8;
  return result;
}

uint64_t ChapterDataCacheTable_FindEntryForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  if (a2 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a2;
  }
  if (a3 < 0) {
    v4 += 150;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = (int *)(a1 + 12);
    while (1)
    {
      int v8 = *v7;
      v7 += 2;
      if (v8 > v4) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_12;
      }
    }
    LODWORD(v5) = v6;
    if (!v6) {
      return 0;
    }
  }
LABEL_12:
  uint64_t v9 = (v5 - 1);
  if ((a3 & 0x40000000) != 0 && v4 != *(_DWORD *)(a1 + 8 * v9 + 12)) {
    return 0;
  }
  uint64_t result = a1 + 8 * v9 + 8;
  if (a4) {
    *a4 = v9;
  }
  return result;
}

_DWORD *ChapterData_GetFlags(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900) {
      return (_DWORD *)result[3];
    }
    else {
      return 0;
    }
  }
  return result;
}

_DWORD *ChapterData_GetNumChapters(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900) {
      return (_DWORD *)result[5];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ChapterData_GetIndChapterTime(uint64_t a1, int a2)
{
  if (!a2) {
    __assert_rtn("ChapterData_GetIndChapterTime", "ITChapterUtilities.c", 995, "inIndex >= kChapterIndex_First");
  }
  uint64_t result = 0xFFFFFFFFLL;
  unsigned int v4 = -1;
  if (a1 && *(_DWORD *)a1 == 1667788900)
  {
    JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, (__int16)a2, &v4);
    if (v4 == 1) {
      return 0;
    }
    else {
      return v4;
    }
  }
  return result;
}

uint64_t ChapterData_GetNameCookieForTime(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  int v3 = a2 <= 1 ? 1 : a2;
  if ((*(unsigned char *)(a1 + 12) & 1) == 0) {
    return 4294967246;
  }
  unsigned int v7 = (uint64_t *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
LABEL_11:
    uint64_t v8 = *(unsigned int *)(v6 + 4);
    if (!v8) {
      goto LABEL_19;
    }
    uint64_t v9 = 0;
    int v10 = (int *)(v6 + 12);
    while (1)
    {
      int v11 = *v10;
      v10 += 2;
      if (v11 > v3) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_19;
      }
    }
    LODWORD(v8) = v9;
    if (v9)
    {
LABEL_19:
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
    return 4294967246;
  }
  uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1851878757, v7);
  if (!result)
  {
    uint64_t v6 = *v7;
    goto LABEL_11;
  }
  return result;
}

uint64_t ChapterData_GetURLCookieForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900) {
    return 4294967246;
  }
  unsigned int v4 = a2 <= 1 ? 1 : a2;
  if ((*(unsigned char *)(a1 + 12) & 4) == 0) {
    return 4294967246;
  }
  uint64_t v8 = (uint64_t *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7)
  {
LABEL_8:
    int v10 = 0;
    if (ChapterDataCacheTable_FindEntryForTime(v7, v4, a3, &v10))
    {
      uint64_t result = 0;
      *a4 = v10 + 1;
      return result;
    }
    return 4294967246;
  }
  uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433056, v8);
  if (!result)
  {
    uint64_t v7 = *v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t ChapterData_FindURLForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, void *a5)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900 || (*(unsigned char *)(a1 + 12) & 4) == 0) {
    return 4294967246;
  }
  if (a2 <= 1) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = a2;
  }
  int v11 = (uint64_t *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  if (!v10)
  {
    uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433056, (void *)(a1 + 56));
    if (result) {
      return result;
    }
    uint64_t v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime) {
    return 4294967246;
  }
  LODWORD(__n) = 0;
  int v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13) {
    return 4294967246;
  }
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1970433056, 1, &__n);
  if (!AtomDataPtr) {
    return 4294967246;
  }
  unsigned int v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    unsigned int v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  return 0;
}

uint64_t ChapterData_GetPictureCookieForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1667788900 || (*(unsigned char *)(a1 + 12) & 2) == 0) {
    return 4294967246;
  }
  if (a2 <= 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = a2;
  }
  uint64_t v8 = (uint64_t *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
LABEL_8:
    int v10 = 0;
    if (ChapterDataCacheTable_FindEntryForTime(v7, v6, a3, &v10))
    {
      uint64_t result = 0;
      *a4 = v10 + 1;
      return result;
    }
    return 4294967246;
  }
  uint64_t result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1886154595, v8);
  if (!result)
  {
    uint64_t v7 = *v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t mediaplatform::DatabaseErrorCodeFromSQLiteErrorCode(mediaplatform *this)
{
  if ((this - 1) > 0x19) {
    return 36;
  }
  else {
    return *(unsigned int *)&asc_21512018C[4 * (this - 1)];
  }
}

BOOL mediaplatform::DatabaseErrorImpliesRetryableAction(mediaplatform *this, const mediaplatform::PlatformErrorCondition *a2)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFE) == 12;
}

void mlcore::ExistsPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  int v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v4 + 72))(&v11);
  unsigned int v6 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)unsigned int v6 = &unk_26C5C9C28;
  uint64_t v7 = v6 + 24;
  long long v8 = v11;
  long long v11 = 0u;
  *((void *)v6 + 3) = &unk_26C5BEF78;
  *((_OWORD *)v6 + 2) = v8;
  if (*((void *)&v8 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    *uint64_t v7 = &unk_26C5BEF28;
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  else
  {
    *uint64_t v7 = &unk_26C5BEF28;
  }
  *(void *)&long long v9 = v6 + 24;
  *((void *)&v9 + 1) = v6;
  *a3 = v9;
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_2150A9688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double mlcore::ExistsPredicate::_allProperties@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  return result;
}

uint64_t mlcore::ExistsPredicate::matches()
{
  return 0;
}

void mlcore::ExistsPredicate::description(mlcore::ExistsPredicate *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 1) + 8) + 40))(v9);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)(v4 + 16);
  unsigned int v6 = *(std::__shared_weak_count **)(v4 + 24);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 40))(__p);
  mediaplatform::FormatString<std::string,std::string>(a2, (std::string *)"exists in {0} ({1})", (uint64_t)v9, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_2150A9850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ExistsPredicate::~ExistsPredicate(mlcore::ExistsPredicate *this)
{
  *(void *)this = &unk_26C5C5838;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_26C5C5838;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *mlcore::ExistsPredicate::ExistsPredicate(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *double result = &unk_26C5C5838;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *double result = &unk_26C5C5838;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::ExistsPredicate::query@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t NewSearchCriteriaList(int a1, void *a2)
{
  if (!a2) {
    return 4294967246;
  }
  uint64_t v4 = (char *)malloc_type_calloc(0x58uLL, 1uLL, 0x731431D2uLL);
  if (v4)
  {
    uint64_t result = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    *((void *)v4 + 9) = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *((_DWORD *)v4 + 17) = 512;
    *((_DWORD *)v4 + 3) = a1;
    *(void *)uint64_t v4 = 0x1534C7374;
  }
  else
  {
    uint64_t result = 4294967188;
  }
  *a2 = v4;
  return result;
}

uint64_t GetSearchCriteriaListOptions(_DWORD *a1, _DWORD *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2 && *a1 == 1397519220)
  {
    uint64_t result = 0;
    *a2 = a1[3];
  }
  return result;
}

void DisposeSearchCriteriaList(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1397519220)
    {
      int v2 = a1[1];
      if (v2)
      {
        int v3 = v2 - 1;
        a1[1] = v3;
        if (!v3)
        {
          uint64_t v4 = (void *)*((void *)a1 + 10);
          if (v4)
          {
            unsigned int v5 = a1[4];
            if (v5)
            {
              unsigned int v6 = 0;
              uint64_t v7 = v4 + 2;
              do
              {
                if (*((unsigned char *)v7 - 8))
                {
                  DisposeSearchCriteriaList(*v7);
                  unsigned int v5 = a1[4];
                }
                ++v6;
                v7 += 3;
              }
              while (v6 < v5);
              uint64_t v4 = (void *)*((void *)a1 + 10);
            }
            free(v4);
          }
          DeleteStringCache((uint64_t)(a1 + 6));
          free(a1);
        }
      }
    }
  }
}

uint64_t AppendSearchCriterion(_DWORD *a1, unsigned int a2, int a3, void *__s1, int a5)
{
  if (!a1) {
    return 4294967246;
  }
  if (*a1 != 1397519220) {
    return 4294967246;
  }
  HIDWORD(v8) = a5;
  LODWORD(v8) = a3;
  *(void *)((char *)&v8 + 4) = a2 | 0x1000000000000;
  uint64_t v7 = 0;
  uint64_t result = AddStringToStringCache(a1 + 6, __s1, a5, (a5 + 3) & 0xFFFFFFFC, &v7);
  uint64_t v9 = v7;
  if (!result) {
    return InsertElement((uint64_t)a1, &v8);
  }
  return result;
}

uint64_t InsertElement(uint64_t a1, long long *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 != *(_DWORD *)(a1 + 20))
  {
    unsigned int v6 = *(char **)(a1 + 80);
LABEL_7:
    uint64_t result = 0;
    uint64_t v9 = &v6[24 * v4];
    long long v10 = *a2;
    *((void *)v9 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++*(_DWORD *)(a1 + 16);
    return result;
  }
  unsigned int v5 = (char *)malloc_type_calloc(24 * (v4 + 3), 1uLL, 0xF3EC4C50uLL);
  if (v5)
  {
    unsigned int v6 = v5;
    uint64_t v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      memmove(v5, v7, 24 * *(unsigned int *)(a1 + 16));
      free(*(void **)(a1 + 80));
    }
    *(void *)(a1 + 80) = v6;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) += 3;
    goto LABEL_7;
  }
  return 4294967188;
}

uint64_t AppendUStringSearchCriterion(_DWORD *a1, char a2, int a3, unsigned __int16 *a4)
{
  if ((a2 & 0xF) != 0 && a4) {
    return AppendSearchCriterion(a1, a2, a3, a4 + 1, 2 * *a4);
  }
  else {
    return 4294967246;
  }
}

uint64_t AppendValueRangeSearchCriterion(_DWORD *a1, __int16 a2, int a3, void *a4)
{
  if ((a2 & 0xFF1) == 0 || a4 == 0) {
    return 4294967246;
  }
  else {
    return AppendSearchCriterion(a1, a2, a3, a4, 68);
  }
}

uint64_t AppendNumericSearchCriterion(_DWORD *a1, __int16 a2, int a3, unint64_t a4)
{
  if ((a2 & 0xFF1) == 0) {
    return 4294967246;
  }
  v9[4] = v4;
  v9[5] = v5;
  __s1[1] = 0;
  memset(&v9[1], 0, 20);
  __s1[0] = a4;
  __s1[2] = 1;
  long long v8 = a4;
  v9[0] = 1;
  return AppendSearchCriterion(a1, a2, a3, __s1, 68);
}

double InitValueRangeCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 52) = 0u;
    *(void *)a3 = a1;
    *(void *)(a3 + 16) = 1;
    *(void *)(a3 + 24) = a2;
    *(void *)(a3 + 40) = 1;
  }
  return result;
}

uint64_t AppendNestedSearchCriteriaList(_DWORD *a1, int a2, _DWORD *a3)
{
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 4294967246;
      if (a3)
      {
        if (*a1 == 1397519220 && *a3 == 1397519220)
        {
          LODWORD(v6) = 0;
          DWORD1(v6) = a2;
          *((void *)&v6 + 1) = 0x800000001;
          uint64_t v7 = a3;
          uint64_t result = InsertElement((uint64_t)a1, &v6);
          if (!result) {
            ++a3[1];
          }
        }
      }
    }
  }
  return result;
}

_DWORD *CountSearchCriteria(_DWORD *result)
{
  if (result)
  {
    if (*result == 1397519220) {
      return (_DWORD *)result[4];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GetSearchCriterionInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 4294967246;
  if (!a1 || !a3) {
    return v3;
  }
  if (*(_DWORD *)a1 != 1397519220) {
    return 4294967246;
  }
  if (*(_DWORD *)(a1 + 16) <= a2) {
    return 4294967246;
  }
  if (!*(_DWORD *)(a1 + 8)) {
    return 4294967246;
  }
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    return 4294967246;
  }
  uint64_t v5 = v4 + 24 * a2;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)a3 = 0u;
  int v6 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  *(_DWORD *)(a3 + 4) = v6;
  *(unsigned char *)(a3 + 9) = *(unsigned char *)(v5 + 10);
  if (*(unsigned char *)(v5 + 8))
  {
    uint64_t v3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
    *(void *)(a3 + 16) = *(void *)(v4 + 24 * a2 + 16);
    return v3;
  }
  uint64_t v3 = *(unsigned int *)(v5 + 12);
  if (!v3)
  {
    *(void *)(a3 + 16) = v4 + 24 * a2 + 16;
    return v3;
  }
  return GetStringCachePtr(a1 + 24, *(void *)(v4 + 24 * a2 + 16), (void *)(a3 + 16), 0);
}

uint64_t GetExportedSearchCriteriaListSize(uint64_t a1)
{
  if (!a1 || *(_DWORD *)a1 != 1397519220) {
    return 0;
  }
  int v1 = *(_DWORD *)(a1 + 16);
  if (!v1) {
    return 136;
  }
  int v2 = (void *)(*(void *)(a1 + 80) + 16);
  LODWORD(v3) = 136;
  do
  {
    if (*((unsigned char *)v2 - 8)) {
      int ExportedSearchCriteriaListSize = GetExportedSearchCriteriaListSize(*v2);
    }
    else {
      int ExportedSearchCriteriaListSize = *((_DWORD *)v2 - 1);
    }
    uint64_t v3 = v3 + ExportedSearchCriteriaListSize + (ExportedSearchCriteriaListSize & 1u) + 56;
    v2 += 3;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t LockSearchCriteriaList(uint64_t a1)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1397519220) {
    return 4294967246;
  }
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 16);
    if (v3)
    {
      unsigned int v4 = 0;
      uint64_t v5 = (void *)(v2 + 16);
      do
      {
        if (*((unsigned char *)v5 - 8))
        {
          LockSearchCriteriaList(*v5);
          unsigned int v3 = *(_DWORD *)(a1 + 16);
        }
        ++v4;
        v5 += 3;
      }
      while (v4 < v3);
    }
  }
  return 0;
}

uint64_t UnlockSearchCriteriaList(uint64_t a1)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1397519220) {
    return 4294967246;
  }
  int v2 = *(_DWORD *)(a1 + 8);
  if (!v2) {
    return 4294967246;
  }
  *(_DWORD *)(a1 + 8) = v2 - 1;
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v4)
    {
      unsigned int v5 = 0;
      int v6 = (void *)(v3 + 16);
      do
      {
        if (*((unsigned char *)v6 - 8))
        {
          UnlockSearchCriteriaList(*v6);
          unsigned int v4 = *(_DWORD *)(a1 + 16);
        }
        ++v5;
        v6 += 3;
      }
      while (v5 < v4);
    }
  }
  return 0;
}

uint64_t GetSearchCriterionInfoNumericValue(uint64_t a1, void *a2)
{
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      if (!*(unsigned char *)(a1 + 8))
      {
        unsigned int v4 = *(void **)(a1 + 16);
        if (v4)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            uint64_t result = 0;
            *a2 = *v4;
          }
        }
      }
    }
  }
  return result;
}

uint64_t GetSearchCriterionInfoBooleanValue(uint64_t a1, BOOL *a2)
{
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      if (!*(unsigned char *)(a1 + 8))
      {
        unsigned int v4 = *(void **)(a1 + 16);
        if (v4)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            uint64_t result = 0;
            *a2 = *v4 != 0;
          }
        }
      }
    }
  }
  return result;
}

__n128 GetSearchCriterionInfoValueRange(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      if (!*(unsigned char *)(a1 + 8))
      {
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            *(_OWORD *)a2 = *(_OWORD *)v2;
            __n128 result = *(__n128 *)(v2 + 16);
            long long v4 = *(_OWORD *)(v2 + 32);
            long long v5 = *(_OWORD *)(v2 + 48);
            *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
            *(_OWORD *)(a2 + 32) = v4;
            *(_OWORD *)(a2 + 48) = v5;
            *(__n128 *)(a2 + 16) = result;
          }
        }
      }
    }
  }
  return result;
}

void *ResolveValueRangeCriteriaValue(void *result)
{
  if (result)
  {
    int v1 = result;
    __n128 result = (void *)*result;
    uint64_t v2 = v1[1];
    if (v2) {
      return (void *)((char *)result + v1[2] * v2);
    }
  }
  return result;
}

void *GetValueRangeCriteriaStartValue(void *result)
{
  if (result)
  {
    int v1 = result;
    __n128 result = (void *)*result;
    uint64_t v2 = v1[1];
    if (v2) {
      return (void *)((char *)result + v1[2] * v2);
    }
  }
  return result;
}

uint64_t GetValueRangeCriteriaEndValue(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    __n128 result = *(void *)(result + 24);
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2) {
      result += *(void *)(v1 + 40) * v2;
    }
  }
  return result;
}

uint64_t ImportSearchCriteriaList(const void *a1, unsigned int a2, _DWORD **a3)
{
  if (!a3) {
    return 4294967246;
  }
  *a3 = 0;
  if (!a1 || a2 < 0x88) {
    return 4294967246;
  }
  size_t v5 = a2;
  int v6 = (unsigned int *)malloc_type_malloc(a2, 0x4186F335uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    memmove(v6, a1, v5);
    unsigned int v8 = *v7;
    *uint64_t v7 = bswap32(*v7);
    unsigned int v9 = bswap32(*((unsigned __int16 *)v7 + 2)) >> 16;
    *((_WORD *)v7 + 2) = v9;
    *((_WORD *)v7 + 3) = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
    _DWORD v7[2] = bswap32(v7[2]);
    if (v8 != 1953713235 || v9 > 1)
    {
      uint64_t appended = 4294967246;
    }
    else
    {
      int v13 = *((unsigned __int8 *)v7 + 15);
      int v14 = *((unsigned __int8 *)v7 + 14);
      unsigned int v15 = (char *)malloc_type_calloc(0x58uLL, 1uLL, 0x731431D2uLL);
      if (!v15)
      {
        uint64_t appended = 4294967188;
LABEL_38:
        *a3 = 0;
        goto LABEL_39;
      }
      int v16 = v13 != 0;
      if (v14) {
        v16 |= 2u;
      }
      *(_OWORD *)(v15 + 56) = 0u;
      *((void *)v15 + 9) = 0;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *((_DWORD *)v15 + 17) = 512;
      *((_DWORD *)v15 + 3) = v16;
      *(void *)unsigned int v15 = 0x1534C7374;
      *a3 = v15;
      if (v7[2])
      {
        unint64_t v17 = 0;
        uint64_t v18 = (uint64_t)(v7 + 34);
        size_t v19 = (size_t)v7 + v5;
        uint64_t v20 = 10;
        while (1)
        {
          int8x8_t v21 = vrev32_s8(*(int8x8_t *)v18);
          *(int8x8_t *)uint64_t v18 = v21;
          uint64_t v22 = bswap32(*(_DWORD *)(v18 + 52));
          *(_DWORD *)(v18 + 52) = v22;
          if (*(unsigned char *)(v18 + 8))
          {
            unint64_t v25 = 0;
            uint64_t appended = ImportSearchCriteriaList(v18 + 56, v22, &v25);
            if (!appended)
            {
              uint64_t appended = AppendNestedSearchCriteriaList(*a3, *(_DWORD *)(v18 + 4), v25);
              DisposeSearchCriteriaList(v25);
            }
          }
          else
          {
            uint64_t appended = ITSearchCriteriaEndianSwapProc(v21.i32[0], (int8x16_t *)(v18 + 56), v22);
            uint64_t v23 = (uint64_t)*a3;
            if (appended) {
              goto LABEL_37;
            }
            uint64_t appended = AppendSearchCriterion((_DWORD *)v23, *(_DWORD *)(v18 + 4), *(_DWORD *)v18, (void *)(v18 + 56), *(_DWORD *)(v18 + 52));
          }
          if (appended) {
            break;
          }
          if (*(unsigned char *)(v18 + 9))
          {
            uint64_t v23 = (uint64_t)*a3;
            if (!*a3 || *(_DWORD *)v23 != 1397519220 || v17 >= *(unsigned int *)(v23 + 16))
            {
              uint64_t appended = 4294967246;
              goto LABEL_37;
            }
            *(unsigned char *)(*(void *)(v23 + 80) + v20) = 0;
          }
          uint64_t v24 = *(unsigned int *)(v18 + 52) + v18 + (*(_DWORD *)(v18 + 52) & 1);
          uint64_t v18 = v24 + 56;
          if (((v24 + 56) & 2) != 0)
          {
            memmove((void *)(v24 + 54), (const void *)(v24 + 56), v19 - v18);
            v18 -= 2;
          }
          ++v17;
          v20 += 24;
          if (v17 >= v7[2]) {
            goto LABEL_33;
          }
        }
        uint64_t v23 = (uint64_t)*a3;
LABEL_37:
        DisposeSearchCriteriaList((_DWORD *)v23);
        goto LABEL_38;
      }
LABEL_33:
      uint64_t appended = 0;
    }
LABEL_39:
    free(v7);
    return appended;
  }
  return 4294967188;
}

uint64_t ITSearchCriteriaEndianSwapProc(int a1, int8x16_t *a2, unsigned int a3)
{
  long long v4 = a2;
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 8:
    case 9:
    case 14:
    case 17:
    case 18:
    case 39:
    case 54:
    case 55:
    case 56:
    case 62:
    case 71:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 89:
    case 104:
    case 144:
    case 145:
    case 148:
    case 149:
      if (!a2) {
        return 4294967246;
      }
      if (a3 >= 2)
      {
        uint64_t v7 = a3 >> 1;
        do
        {
          v4->i16[0] = bswap32(v4->u16[0]) >> 16;
          long long v4 = (int8x16_t *)((char *)v4 + 2);
          --v7;
        }
        while (v7);
      }
      return 0;
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 53:
    case 57:
    case 58:
    case 59:
    case 60:
    case 63:
    case 67:
    case 68:
    case 69:
    case 73:
    case 77:
    case 90:
    case 91:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 117:
    case 118:
    case 125:
    case 133:
    case 134:
    case 136:
    case 140:
    case 141:
    case 142:
    case 154:
    case 156:
    case 183:
      goto LABEL_2;
    default:
      fwrite("ITSearchCriteriaEndianSwapProc(): Unknown match field\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
      if (a3 == 68)
      {
LABEL_2:
        uint64_t result = 4294967246;
        if (v4 && a3 == 68)
        {
          uint64_t result = 0;
          int8x16_t v6 = vrev64q_s8(v4[1]);
          *long long v4 = vrev64q_s8(*v4);
          v4[1] = v6;
          uint64_t v4[2] = vrev64q_s8(v4[2]);
        }
      }
      else if (v4)
      {
        if (a3 < 2)
        {
          return 0;
        }
        else
        {
          uint64_t v8 = a3 >> 1;
          uint64_t result = 0;
          do
          {
            v4->i16[0] = bswap32(v4->u16[0]) >> 16;
            long long v4 = (int8x16_t *)((char *)v4 + 2);
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        return 4294967246;
      }
      return result;
  }
}

uint64_t ExportSearchCriteriaList(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  if (!a1) {
    return 4294967246;
  }
  if (*(_DWORD *)a1 != 1397519220) {
    return 4294967246;
  }
  unsigned int ExportedSearchCriteriaListSize = GetExportedSearchCriteriaListSize(a1);
  if (a4) {
    *a4 = ExportedSearchCriteriaListSize;
  }
  if (!a2) {
    return 0;
  }
  if (ExportedSearchCriteriaListSize > a3) {
    return 4294967246;
  }
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v11 = *(_DWORD *)(a1 + 12);
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v11) {
    *(unsigned char *)(a2 + 15) = 1;
  }
  if ((v11 & 2) != 0) {
    *(unsigned char *)(a2 + 14) = 1;
  }
  *(void *)a2 = 0x100010074734C53;
  *(_DWORD *)(a2 + 8) = bswap32(v10);
  if (!v10) {
    return 0;
  }
  unsigned int v12 = 0;
  int v13 = (unsigned char *)(a2 + 136);
  int v14 = (uint64_t *)(*(void *)(a1 + 80) + 16);
  do
  {
    unsigned int v20 = 0;
    *(_OWORD *)int v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    *((_OWORD *)v13 + 2) = 0u;
    *((void *)v13 + 6) = 0;
    *(void *)int v13 = *(v14 - 2);
    int v15 = *((unsigned __int8 *)v14 - 8);
    v13[8] = v15;
    v13[9] = *((unsigned char *)v14 - 6) == 0;
    if (v15)
    {
      uint64_t v16 = *v14;
      uint64_t v17 = GetExportedSearchCriteriaListSize(*v14);
      unsigned int v20 = v17;
      uint64_t result = ExportSearchCriteriaList(v16, v13 + 56, v17, &v20);
      if (result) {
        return result;
      }
    }
    else
    {
      unsigned int v20 = *((_DWORD *)v14 - 1);
      uint64_t result = GetStringCacheString(a1 + 24, *v14, v13 + 56, 0, v20);
      if (result) {
        return result;
      }
      uint64_t result = ITSearchCriteriaEndianSwapProc(*(_DWORD *)v13, (int8x16_t *)(v13 + 56), v20);
      if (result) {
        return result;
      }
    }
    unsigned int v18 = v20;
    size_t v19 = &v13[v20 + 56];
    if (v20) {
      *v19++ = 0;
    }
    uint64_t result = 0;
    *(int8x8_t *)int v13 = vrev32_s8(*(int8x8_t *)v13);
    *((_DWORD *)v13 + 13) = bswap32(v18);
    ++v12;
    v14 += 3;
    int v13 = v19;
  }
  while (v12 < *(_DWORD *)(a1 + 16));
  return result;
}

mlcore::GeniusSimilaritiesTable *mlcore::GeniusSimilaritiesTable::GeniusSimilaritiesTable(mlcore::GeniusSimilaritiesTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "genius_similarities");
  std::string::basic_string[abi:ne180100]<0>(v6, "genius_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v8, (uint64_t)v6, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v10, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  v8[0] = &unk_26C5C3AF0;
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *(void *)this = &unk_26C5C8100;
  return this;
}

void sub_2150AABE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v31 - 88) = &unk_26C5C3AF0;
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v31 - 17) < 0) {
    operator delete(*(void **)(v31 - 40));
  }
  _Unwind_Resume(a1);
}

void mlcore::GeniusSimilaritiesTable::~GeniusSimilaritiesTable(mlcore::GeniusSimilaritiesTable *this)
{
  *(void *)this = &unk_26C5C3D78;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 256);
  *((void *)this + 26) = &unk_26C5C3AF0;
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  *(void *)this = &unk_26C5C3248;
  *((void *)this + 20) = &unk_26C5C3AF0;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3D78;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 256);
  *((void *)this + 26) = &unk_26C5C3AF0;
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  *(void *)this = &unk_26C5C3248;
  *((void *)this + 20) = &unk_26C5C3AF0;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mlcore::GeniusSimilaritiesTable::persistentIDColumn(mlcore::GeniusSimilaritiesTable *this@<X0>, uint64_t a2@<X8>)
{
}

mediaplatform::Data *mlcore::GeniusSimilaritiesTable::dataColumn@<X0>(mlcore::GeniusSimilaritiesTable *this@<X0>, uint64_t a2@<X8>)
{
  return mlcore::MediaTable<long long,mediaplatform::Data>::mediaColumnAtIndex<1ul>(a2, (uint64_t)this);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  size_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150AAF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2096);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2048);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2000);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1952);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1904);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1840);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1776);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1648);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1600);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1552);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1504);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1456);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1408);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1360);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1312);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1264);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1216);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1168);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1120);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1072);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1024);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 960);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 912);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 624);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 576);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 528);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_2150AB120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::columnCount()
{
  return 39;
}

void mlcore::ItemVideoTable::~ItemVideoTable(mlcore::ItemVideoTable *this)
{
  *(void *)this = &unk_26C5C40C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 2144);
  *(void *)this = &unk_26C5C3590;
  *((void *)this + 262) = &unk_26C5C3AF0;
  if (*((char *)this + 2127) < 0) {
    operator delete(*((void **)this + 263));
  }
  *((void *)this + 256) = &unk_26C5C3AF0;
  if (*((char *)this + 2079) < 0) {
    operator delete(*((void **)this + 257));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C40C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 2144);
  *(void *)this = &unk_26C5C3590;
  *((void *)this + 262) = &unk_26C5C3AF0;
  if (*((char *)this + 2127) < 0) {
    operator delete(*((void **)this + 263));
  }
  *((void *)this + 256) = &unk_26C5C3AF0;
  if (*((char *)this + 2079) < 0) {
    operator delete(*((void **)this + 257));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  *(void *)(a1 + 1776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1807) < 0) {
    operator delete(*(void **)(a1 + 1784));
  }
  *(void *)(a1 + 1728) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1759) < 0) {
    operator delete(*(void **)(a1 + 1736));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1664);
  *(void *)(a1 + 1616) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1647) < 0) {
    operator delete(*(void **)(a1 + 1624));
  }
  *(void *)(a1 + 1568) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1599) < 0) {
    operator delete(*(void **)(a1 + 1576));
  }
  *(void *)(a1 + 1520) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1551) < 0) {
    operator delete(*(void **)(a1 + 1528));
  }
  *(void *)(a1 + 1472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1503) < 0) {
    operator delete(*(void **)(a1 + 1480));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1280);
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1120);
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  *(void *)(a1 + 880) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  *(void *)(a1 + 736) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*(void **)(a1 + 744));
  }
  *(void *)(a1 + 688) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 719) < 0) {
    operator delete(*(void **)(a1 + 696));
  }
  *(void *)(a1 + 640) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  *(void *)(a1 + 592) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 432);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 368);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1920) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1951) < 0) {
    operator delete(*(void **)(a1 + 1928));
  }
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1520) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1551) < 0) {
    operator delete(*(void **)(a1 + 1528));
  }
  *(void *)(a1 + 1472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1503) < 0) {
    operator delete(*(void **)(a1 + 1480));
  }
  *(void *)(a1 + 1424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1455) < 0) {
    operator delete(*(void **)(a1 + 1432));
  }
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1280) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*(void **)(a1 + 1288));
  }
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  *(void *)(a1 + 944) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3590;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3590;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3590;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C40C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(a1 + 2144);
  *(void *)a1 = &unk_26C5C3590;
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C40C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(a1 + 2144);
  *(void *)a1 = &unk_26C5C3590;
  *(void *)(a1 + 2096) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2127) < 0) {
    operator delete(*(void **)(a1 + 2104));
  }
  *(void *)(a1 + 2048) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2079) < 0) {
    operator delete(*(void **)(a1 + 2056));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1999) < 0) {
    operator delete(*(void **)(a1 + 1976));
  }
  return mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1472) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1503) < 0) {
    operator delete(*(void **)(a1 + 1480));
  }
  *(void *)(a1 + 1424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1455) < 0) {
    operator delete(*(void **)(a1 + 1432));
  }
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1455) < 0) {
    operator delete(*(void **)(a1 + 1432));
  }
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  *(void *)(a1 + 944) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 944) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 784) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  return mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mlcore::ItemVideoTable::persistentIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((void *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(void *)(a2 + 24) = *((void *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 547);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2180);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemVideoTable::videoQualityColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2223) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 275), *((void *)this + 276));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2200);
    *(void *)(a2 + 24) = *((void *)this + 277);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 556);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2228);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::isRentalColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2271) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 281), *((void *)this + 282));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2248);
    *(void *)(a2 + 24) = *((void *)this + 283);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 568);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2276);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hasChapterDataColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 287), *((void *)this + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2296);
    *(void *)(a2 + 24) = *((void *)this + 289);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 580);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2324);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::seasonNumberColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 293), *((void *)this + 294));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2344);
    *(void *)(a2 + 24) = *((void *)this + 295);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 592);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2372);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::episodeIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 299), *((void *)this + 300));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2392);
    *(void *)(a2 + 24) = *((void *)this + 301);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 604);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2420);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 303), *((void *)this + 304));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2424);
    *(void *)(a2 + 56) = *((void *)this + 305);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150AD9B0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::networkNameColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 307), *((void *)this + 308));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2456);
    *(void *)(a2 + 24) = *((void *)this + 309);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 620);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2484);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 311), *((void *)this + 312));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(void *)(a2 + 56) = *((void *)this + 313);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150ADAC8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::extendedContentRatingColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 315), *((void *)this + 316));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2520);
    *(void *)(a2 + 24) = *((void *)this + 317);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 636);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 2548);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2575) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 319), *((void *)this + 320));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2552);
    *(void *)(a2 + 56) = *((void *)this + 321);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150ADBE0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hasAlternateAudioColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 331), *((void *)this + 332));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2648);
    *(void *)(a2 + 24) = *((void *)this + 333);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 668);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2676);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hasSubtitlesColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 337), *((void *)this + 338));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2696);
    *(void *)(a2 + 24) = *((void *)this + 339);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 680);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2724);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::audioLanguageColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 343), *((void *)this + 344));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2744);
    *(void *)(a2 + 24) = *((void *)this + 345);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 692);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2772);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::audioTrackIndexColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2815) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 349), *((void *)this + 350));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2792);
    *(void *)(a2 + 24) = *((void *)this + 351);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 704);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2820);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::audioTrackIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2863) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 355), *((void *)this + 356));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2840);
    *(void *)(a2 + 24) = *((void *)this + 357);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 716);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 719);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2868);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemVideoTable::subtitleLanguageColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2911) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 361), *((void *)this + 362));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2888);
    *(void *)(a2 + 24) = *((void *)this + 363);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 728);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2916);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::subtitleTrackIndexColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2959) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 367), *((void *)this + 368));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2936);
    *(void *)(a2 + 24) = *((void *)this + 369);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 740);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2964);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::rentalDurationColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3007) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 373), *((void *)this + 374));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2984);
    *(void *)(a2 + 24) = *((void *)this + 375);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 752);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3012);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::rentalPlaybackDurationColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3055) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 379), *((void *)this + 380));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3032);
    *(void *)(a2 + 24) = *((void *)this + 381);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 764);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3060);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::rentalPlaybackDateStartedColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3103) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 385), *((void *)this + 386));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3080);
    *(void *)(a2 + 24) = *((void *)this + 387);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 776);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3108);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::rentalDateStartedColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3151) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 391), *((void *)this + 392));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3128);
    *(void *)(a2 + 24) = *((void *)this + 393);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 788);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3156);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::isDemoColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3199) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 397), *((void *)this + 398));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3176);
    *(void *)(a2 + 24) = *((void *)this + 399);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 800);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3204);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hasHLSColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 403), *((void *)this + 404));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3224);
    *(void *)(a2 + 24) = *((void *)this + 405);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 812);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3252);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::audioTrackLocaleColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3295) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 409), *((void *)this + 410));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3272);
    *(void *)(a2 + 24) = *((void *)this + 411);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 824);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3300);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3327) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 413), *((void *)this + 414));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3304);
    *(void *)(a2 + 56) = *((void *)this + 415);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150AE520(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::ItemVideoTable::hlsOfflinePlaybackKeysColumn@<X0>(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 443), *((void *)this + 444));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3544);
    *(void *)(a2 + 24) = *((void *)this + 445);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 892);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3572);
  uint64_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 450), *((void *)this + 448), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_2150AE61C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::isPremium(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3647) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 453), *((void *)this + 454));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3624);
    *(void *)(a2 + 24) = *((void *)this + 455);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 912);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3652);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::colorCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3695) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 459), *((void *)this + 460));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3672);
    *(void *)(a2 + 24) = *((void *)this + 461);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 924);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3700);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hlsColorCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3743) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 465), *((void *)this + 466));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3720);
    *(void *)(a2 + 24) = *((void *)this + 467);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 936);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3748);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hlsVideoQuality(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3791) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 471), *((void *)this + 472));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3768);
    *(void *)(a2 + 24) = *((void *)this + 473);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 948);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3796);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemVideoTable::hlsPlaylistURL(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 477), *((void *)this + 478));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3816);
    *(void *)(a2 + 24) = *((void *)this + 479);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 960);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 3844);
  size_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3871) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 481), *((void *)this + 482));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3848);
    *(void *)(a2 + 56) = *((void *)this + 483);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150AE9B4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::audioCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3903) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 485), *((void *)this + 486));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3880);
    *(void *)(a2 + 24) = *((void *)this + 487);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 976);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3908);
  *(void *)a2 = &unk_26C5C47C8;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(void *a1, void **a2)
{
  char v4 = operator new(0x58uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *char v4 = &unk_26C5C9D78;
  std::string::basic_string[abi:ne180100]<0>(__p, "IFNULL");
  size_t v5 = &unk_26C5BED78;
  memset(v6, 0, sizeof(v6));
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v4 + 3), (long long *)__p, (uint64_t)&v5);
  size_t v5 = &unk_26C5BED78;
  char v9 = v6;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_2150AEB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(void *a1, int a2)
{
  char v4 = operator new(0x40uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *char v4 = &unk_26C5C9870;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  void v4[3] = &unk_26C5C3960;
  v4[4] = a2;
  size_t v5 = (std::string *)(v4 + 5);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[7] = v7;
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_2150AEC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(void *a1)
{
  uint64_t v2 = operator new(0x50uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_26C5C9790;
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue((uint64_t)(v2 + 3), (long long *)v5, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_2150AED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(void *a1, int a2)
{
  char v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)char v4 = &unk_26C5C97C8;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)v4 + 3) = &unk_26C5C38E8;
  *((double *)v4 + 4) = (double)a2;
  size_t v5 = (std::string *)(v4 + 40);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)v4 + 7) = v7;
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_2150AEE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(void *a1, uint64_t a2)
{
  char v4 = (std::string *)operator new(0x60uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C9758;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5C3898;
  mediaplatform::Data::Data((mediaplatform::Data *)&v4[1].__r_.__value_.__r.__words[1], *(const void **)(a2 + 24), *(void *)(a2 + 8), 1);
  size_t v5 = v4 + 3;
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[3].__r_.__value_.__r.__words[2] = v7;
  }
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_2150AEFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  mediaplatform::Data::~Data(v16);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLLiteralValue<mediaplatform::Data>::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  mediaplatform::Data::Data((mediaplatform::Data *)v8, *(const void **)(a1 + 32), *(void *)(a1 + 16), 1);
  mediaplatform::SQLStringValue<mediaplatform::Data>((uint64_t)__p, (mediaplatform *)v8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v3 = v10;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v2, v3);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)v8);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(void *)(a1 + 56)) {
      goto LABEL_20;
    }
LABEL_13:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" /* ", 4);
    int v4 = *(char *)(a1 + 71);
    if (v4 >= 0) {
      uint64_t v5 = a1 + 48;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 48);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 56);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" */", 3);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 71)) {
    goto LABEL_13;
  }
LABEL_20:
  std::stringbuf::str();
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v13);
}

void sub_2150AF20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)&a10);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringValue<mediaplatform::Data>(uint64_t a1, mediaplatform *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"x'", 2);
  mediaplatform::Base16Representation(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"'", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v9);
}

void sub_2150AF3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLLiteralValue<mediaplatform::Data>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3898;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 8));
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLLiteralValue<mediaplatform::Data>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3898;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 8));
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::SQLLiteralValue<double>::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  mediaplatform::SQLStringValue<double>();
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_20;
    }
LABEL_13:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" /* ", 4);
    int v4 = *(char *)(a1 + 39);
    if (v4 >= 0) {
      uint64_t v5 = a1 + 16;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" */", 3);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 39)) {
    goto LABEL_13;
  }
LABEL_20:
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150AF748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringValue<double>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v3);
}

void sub_2150AF8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLLiteralValue<double>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C38E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLLiteralValue<double>::~SQLLiteralValue(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C38E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C97C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C97C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::DatabaseParameter<long long>::description()
{
  return mediaplatform::SQLStringValue<long long>();
}

void mediaplatform::DatabaseParameter<long long>::~DatabaseParameter()
{
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL mlcore::ComparisonPredicate<long long>::matches(uint64_t a1, void *a2)
{
  uint64_t v3 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      return v3 == *(void *)(a1 + 24);
    case 1:
      BOOL v5 = v3 == *(void *)(a1 + 24);
      return !v5;
    case 2:
      return v3 > *(void *)(a1 + 24);
    case 3:
      return v3 < *(void *)(a1 + 24);
    case 4:
      return v3 >= *(void *)(a1 + 24);
    case 5:
      return v3 <= *(void *)(a1 + 24);
    case 7:
      BOOL v5 = (*(void *)(a1 + 24) & v3) == 0;
      return !v5;
    case 8:
      BOOL v5 = (*(void *)(a1 + 24) | v3) == 0;
      return !v5;
    default:
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_2150AFBC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<long long>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = v2 + 16;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_26422ECC0)[v9]);
  if ((v15 & 0x80u) == 0) {
    unsigned __int8 v10 = __p;
  }
  else {
    unsigned __int8 v10 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  char v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v18);
}

void sub_2150AFE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<long long>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C79D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseParameter<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "'");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  for (; size; --size)
  {
    std::string::push_back(a2, p_p->__r_.__value_.__s.__data_[0]);
    if (p_p->__r_.__value_.__s.__data_[0] == 39) {
      std::string::push_back(a2, 39);
    }
    p_p = (std::string *)((char *)p_p + 1);
  }
  std::string::push_back(a2, 39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2150AFFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseParameter<std::string>::~DatabaseParameter(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C39D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C99C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C99C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ComparisonPredicate<std::string>::matches(uint64_t a1, void *a2)
{
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, *a2 + 8, *(void *)(a1 + 8));
  uint64_t v3 = mlcore::_string_matches((unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 20), (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_2150B0130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::_string_matches(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = a1[23];
      if ((v3 & 0x80u) == 0) {
        uint64_t v4 = a1[23];
      }
      else {
        uint64_t v4 = *((void *)a1 + 1);
      }
      uint64_t v5 = a3[23];
      int v6 = (char)v5;
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *((void *)a3 + 1);
      }
      if (v4 != v5) {
        return 0;
      }
      if (v6 >= 0) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = *(unsigned __int8 **)a3;
      }
      if ((v3 & 0x80) != 0) {
        return memcmp(*(const void **)a1, v7, *((void *)a1 + 1)) == 0;
      }
      if (!a1[23]) {
        return 1;
      }
      uint64_t v8 = v3 - 1;
      do
      {
        int v10 = *a1++;
        int v9 = v10;
        int v12 = *v7++;
        int v11 = v12;
        BOOL v14 = v8-- != 0;
        BOOL v25 = v9 == v11;
        BOOL v15 = v9 == v11;
      }
      while (v25 && v14);
      return v15;
    case 1:
      uint64_t v16 = a1[23];
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = a1[23];
      }
      else {
        uint64_t v17 = *((void *)a1 + 1);
      }
      uint64_t v18 = a3[23];
      int v19 = (char)v18;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *((void *)a3 + 1);
      }
      if (v17 != v18) {
        return 1;
      }
      if (v19 >= 0) {
        unsigned int v20 = a3;
      }
      else {
        unsigned int v20 = *(unsigned __int8 **)a3;
      }
      if ((v16 & 0x80) != 0)
      {
        BOOL v71 = memcmp(*(const void **)a1, v20, *((void *)a1 + 1)) == 0;
        return !v71;
      }
      if (!a1[23]) {
        return 0;
      }
      uint64_t v21 = v16 - 1;
      do
      {
        int v23 = *a1++;
        int v22 = v23;
        int v24 = *v20++;
        BOOL v25 = v22 == v24;
        BOOL v15 = v22 != v24;
        BOOL v25 = !v25 || v21-- == 0;
      }
      while (!v25);
      return v15;
    case 2:
      int v26 = (char)a1[23];
      int v27 = (char)a3[23];
      if (v27 >= 0) {
        size_t v28 = a3[23];
      }
      else {
        size_t v28 = *((void *)a3 + 1);
      }
      if (v27 >= 0) {
        unsigned int v29 = a3;
      }
      else {
        unsigned int v29 = *(unsigned __int8 **)a3;
      }
      if (v26 >= 0) {
        size_t v30 = a1[23];
      }
      else {
        size_t v30 = *((void *)a1 + 1);
      }
      if (v26 >= 0) {
        uint64_t v31 = a1;
      }
      else {
        uint64_t v31 = *(const void **)a1;
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      a1 = v29;
      goto LABEL_69;
    case 3:
      int v33 = (char)a3[23];
      int v34 = (char)a1[23];
      if (v34 >= 0) {
        size_t v28 = a1[23];
      }
      else {
        size_t v28 = *((void *)a1 + 1);
      }
      if (v34 < 0) {
        a1 = *(unsigned __int8 **)a1;
      }
      if (v33 >= 0) {
        size_t v30 = a3[23];
      }
      else {
        size_t v30 = *((void *)a3 + 1);
      }
      if (v33 >= 0) {
        uint64_t v31 = a3;
      }
      else {
        uint64_t v31 = *(const void **)a3;
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
LABEL_69:
      int v35 = memcmp(a1, v31, v32);
      LODWORD(v15) = v28 < v30;
      BOOL v36 = v35 == 0;
      BOOL v37 = v35 < 0;
      goto LABEL_101;
    case 4:
      int v38 = (char)a3[23];
      int v39 = (char)a1[23];
      if (v39 >= 0) {
        size_t v40 = a1[23];
      }
      else {
        size_t v40 = *((void *)a1 + 1);
      }
      if (v39 < 0) {
        a1 = *(unsigned __int8 **)a1;
      }
      if (v38 >= 0) {
        size_t v41 = a3[23];
      }
      else {
        size_t v41 = *((void *)a3 + 1);
      }
      if (v38 >= 0) {
        uint64_t v42 = a3;
      }
      else {
        uint64_t v42 = *(const void **)a3;
      }
      if (v41 >= v40) {
        size_t v43 = v40;
      }
      else {
        size_t v43 = v41;
      }
      goto LABEL_100;
    case 5:
      int v44 = (char)a1[23];
      int v45 = (char)a3[23];
      if (v45 >= 0) {
        size_t v40 = a3[23];
      }
      else {
        size_t v40 = *((void *)a3 + 1);
      }
      if (v45 >= 0) {
        uint64_t v46 = a3;
      }
      else {
        uint64_t v46 = *(unsigned __int8 **)a3;
      }
      if (v44 >= 0) {
        size_t v41 = a1[23];
      }
      else {
        size_t v41 = *((void *)a1 + 1);
      }
      if (v44 >= 0) {
        uint64_t v42 = a1;
      }
      else {
        uint64_t v42 = *(const void **)a1;
      }
      if (v41 >= v40) {
        size_t v43 = v40;
      }
      else {
        size_t v43 = v41;
      }
      a1 = v46;
LABEL_100:
      int v47 = memcmp(a1, v42, v43);
      LODWORD(v15) = v40 >= v41;
      BOOL v36 = v47 == 0;
      BOOL v37 = v47 >= 0;
LABEL_101:
      if (v36) {
        return v15;
      }
      else {
        return v37;
      }
    case 9:
      int64_t v48 = a3[23];
      if ((v48 & 0x80u) == 0) {
        long long v49 = (char *)a3;
      }
      else {
        long long v49 = *(char **)a3;
      }
      int v50 = (char)a1[23];
      if (v50 >= 0) {
        unint64_t v51 = (char *)a1;
      }
      else {
        unint64_t v51 = *(char **)a1;
      }
      if (v50 >= 0) {
        int64_t v52 = a1[23];
      }
      else {
        int64_t v52 = *((void *)a1 + 1);
      }
      if (!v52) {
        return 1;
      }
      if ((v48 & 0x80u) != 0) {
        int64_t v48 = *((void *)a3 + 1);
      }
      uint64_t v53 = &v49[v48];
      if (v48 < v52) {
        goto LABEL_117;
      }
      int v77 = *v51;
      uint64_t v78 = v49;
      do
      {
        int64_t v79 = v48 - v52;
        if (v79 == -1) {
          break;
        }
        uint64_t v80 = (char *)memchr(v78, v77, v79 + 1);
        if (!v80) {
          break;
        }
        long long v54 = v80;
        if (!memcmp(v80, v51, v52)) {
          return v54 != v53 && v54 == v49;
        }
        uint64_t v78 = v54 + 1;
        int64_t v48 = v53 - (v54 + 1);
      }
      while (v48 >= v52);
LABEL_117:
      long long v54 = v53;
      return v54 != v53 && v54 == v49;
    case 10:
      uint64_t v56 = a3[23];
      if ((v56 & 0x80u) == 0) {
        uint64_t v57 = a3;
      }
      else {
        uint64_t v57 = *(unsigned __int8 **)a3;
      }
      if ((v56 & 0x80u) != 0) {
        uint64_t v56 = *((void *)a3 + 1);
      }
      uint64_t v58 = a1[23];
      uint64_t v59 = *(unsigned __int8 **)a1;
      if ((v58 & 0x80u) != 0) {
        uint64_t v58 = *((void *)a1 + 1);
      }
      else {
        uint64_t v59 = a1;
      }
      long long v60 = &v57[v56];
      if (v56) {
        BOOL v61 = v58 == 0;
      }
      else {
        BOOL v61 = 1;
      }
      if (v61)
      {
        unint64_t v73 = &v57[v56];
        goto LABEL_135;
      }
      uint64_t v72 = v57;
      unint64_t v73 = &v57[v56];
      do
      {
        if (*v72 == *v59)
        {
          uint64_t v74 = 1;
          while (v58 != v74)
          {
            if (&v72[v74] == v60) {
              goto LABEL_135;
            }
            int v75 = v72[v74];
            int v76 = v59[v74++];
            if (v75 != v76) {
              goto LABEL_164;
            }
          }
          unint64_t v73 = v72;
        }
LABEL_164:
        ++v72;
      }
      while (v72 != v60);
LABEL_135:
      uint64_t v62 = v73 - v57;
      if (v73 == v60 && v58 != 0) {
        uint64_t v62 = -1;
      }
      return v62 == v56 - v58;
    case 11:
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented yet");
      goto LABEL_192;
    case 12:
      int64_t v64 = a3[23];
      if ((v64 & 0x80u) == 0) {
        uint64_t v65 = (char *)a3;
      }
      else {
        uint64_t v65 = *(char **)a3;
      }
      int v66 = (char)a1[23];
      if (v66 >= 0) {
        uint64_t v67 = (char *)a1;
      }
      else {
        uint64_t v67 = *(char **)a1;
      }
      if (v66 >= 0) {
        int64_t v68 = a1[23];
      }
      else {
        int64_t v68 = *((void *)a1 + 1);
      }
      if (!v68) {
        return 1;
      }
      if ((v64 & 0x80u) != 0) {
        int64_t v64 = *((void *)a3 + 1);
      }
      uint64_t v69 = &v65[v64];
      if (v64 < v68) {
        goto LABEL_157;
      }
      int v81 = *v67;
      uint64_t v82 = v65;
      break;
    default:
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
LABEL_192:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  do
  {
    int64_t v83 = v64 - v68;
    if (v83 == -1) {
      break;
    }
    uint64_t v84 = (char *)memchr(v82, v81, v83 + 1);
    if (!v84) {
      break;
    }
    signed int v70 = v84;
    if (!memcmp(v84, v67, v68)) {
      goto LABEL_158;
    }
    uint64_t v82 = v70 + 1;
    int64_t v64 = v69 - (v70 + 1);
  }
  while (v64 >= v68);
LABEL_157:
  signed int v70 = v69;
LABEL_158:
  BOOL v71 = v70 == v69 || v70 - v65 == -1;
  return !v71;
}

void sub_2150B063C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<std::string>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = v2 + 16;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__p, 1);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_26422ECC0)[v9]);
  if ((v21 & 0x80u) == 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v11 = v21;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
  char v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  char v25 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v13 = a1 + 24;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v16, v17);
  char v25 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v22[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v22[1] = MEMORY[0x263F8C318] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v24);
}

void sub_2150B08EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<std::string>::~ComparisonPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C78C8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x2166B26F0);
}

void mlcore::ComparisonPredicate<double>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 32))
  {
    int v6 = operator new(0x28uLL);
    v6[1] = 0;
    v6[2] = 0;
    *int v6 = &unk_26C5C99F8;
    v6[3] = &unk_26C5C3A18;
    void v6[4] = *(void *)(a1 + 24);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v6 + 3;
    *(void *)(a1 + 40) = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v35 = *a2;
  BOOL v36 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, *(void *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v28) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v32, &v28);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        unsigned int v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        int v10 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        unsigned int v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v12 = *(std::__shared_weak_count **)((char *)&v39 + i);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
        break;
      case 1u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        unsigned int v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        unsigned int v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          uint64_t v18 = *(std::__shared_weak_count **)((char *)&v39 + j);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
        }
        break;
      case 2u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        unsigned int v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        int v19 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        unsigned int v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          unsigned __int8 v21 = *(std::__shared_weak_count **)((char *)&v39 + k);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        break;
      case 3u:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v32);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        unsigned int v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        int v22 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        unsigned int v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          uint64_t v24 = *(std::__shared_weak_count **)((char *)&v39 + m);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        break;
      case 4u:
        long long v42 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v39 = &unk_26C5BF2D8;
        *((void *)&v39 + 1) = 0;
        long long v40 = 0uLL;
        LOBYTE(v41) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v28, (uint64_t)&v39);
        long long v43 = v28;
        size_t v30 = 0;
        uint64_t v31 = 0;
        unsigned int v29 = 0;
        *(void *)&long long v38 = &v29;
        BYTE8(v38) = 0;
        unsigned int v29 = (long long *)operator new(0x20uLL);
        size_t v30 = v29;
        uint64_t v31 = v29 + 2;
        size_t v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v31, &v42, &v44, v29);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v32, (void **)&v29);
        char v25 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v32;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        *(void *)&long long v38 = &v29;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          int v27 = *(std::__shared_weak_count **)((char *)&v42 + n);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v39);
        break;
      default:
        long long v39 = v37;
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v32, 0);
        long long v40 = v32;
        *(void *)&long long v43 = 0;
        long long v42 = 0uLL;
        unsigned int v29 = &v42;
        LOBYTE(v30) = 0;
        *(void *)&long long v42 = operator new(0x20uLL);
        *((void *)&v42 + 1) = v42;
        *(void *)&long long v43 = v42 + 32;
        *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v43, &v39, &v41, (void *)v42);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v38, (void **)&v42);
        uint64_t v13 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        long long v37 = v38;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        unsigned int v29 = &v42;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          int v15 = *(std::__shared_weak_count **)((char *)&v39 + ii);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        break;
    }
  }
  LODWORD(v42) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v39, v37, *((std::__shared_weak_count **)&v37 + 1), (int *)&v42, &v33);
  *a3 = v39;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
}

void sub_2150B1044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  int v15 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  int v19 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  va_arg(va2, void);
  uint64_t v22 = va_arg(va2, void);
  va_copy((va_list)v20, va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  uint64_t v6 = 24;
  while (1)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v4 - 88 + v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v6 -= 16;
    if (v6 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)va2);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mediaplatform::DatabaseParameter<double>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(double *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

uint64_t mediaplatform::DatabaseParameter<double>::description()
{
  return mediaplatform::SQLStringValue<double>();
}

void mediaplatform::DatabaseParameter<double>::~DatabaseParameter()
{
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C99F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C99F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL mlcore::ComparisonPredicate<double>::matches(uint64_t a1, void *a2)
{
  double v3 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      BOOL result = v3 == *(double *)(a1 + 24);
      break;
    case 1:
      BOOL result = v3 != *(double *)(a1 + 24);
      break;
    case 2:
      BOOL result = v3 > *(double *)(a1 + 24);
      break;
    case 3:
      BOOL result = v3 < *(double *)(a1 + 24);
      break;
    case 4:
      BOOL result = v3 >= *(double *)(a1 + 24);
      break;
    case 5:
      BOOL result = v3 <= *(double *)(a1 + 24);
      break;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_2150B1454(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<double>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = v2 + 16;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_26422ECC0)[v9]);
  if ((v15 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  char v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v18);
}

void sub_2150B169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<double>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7920;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void *mlcore::ComparisonPredicate<double>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7920;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL mlcore::ComparisonPredicate<int>::matches(uint64_t a1, void *a2)
{
  int v3 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      return v3 == *(_DWORD *)(a1 + 24);
    case 1:
      BOOL v5 = v3 == *(_DWORD *)(a1 + 24);
      return !v5;
    case 2:
      return v3 > *(_DWORD *)(a1 + 24);
    case 3:
      return v3 < *(_DWORD *)(a1 + 24);
    case 4:
      return v3 >= *(_DWORD *)(a1 + 24);
    case 5:
      return v3 <= *(_DWORD *)(a1 + 24);
    case 7:
      BOOL v5 = (*(_DWORD *)(a1 + 24) & v3) == 0;
      return !v5;
    case 8:
      BOOL v5 = (*(_DWORD *)(a1 + 24) | v3) == 0;
      return !v5;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_2150B18B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<int>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = v2 + 16;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_26422ECC0)[v9]);
  if ((v15 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  char v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v18);
}

void sub_2150B1B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<int>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7978;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

void mlcore::ComparisonPredicate<mediaplatform::Data>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 64))
  {
    int v6 = operator new(0x48uLL);
    v6[1] = 0;
    v6[2] = 0;
    *int v6 = &unk_26C5C9988;
    v6[3] = &unk_26C5C3988;
    mediaplatform::Data::Data((mediaplatform::Data *)(v6 + 4), *(const void **)(a1 + 48), *(void *)(a1 + 32), 1);
    *(void *)&long long v7 = v6 + 3;
    *((void *)&v7 + 1) = v6;
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v36 = *a2;
  long long v37 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v9 + 96))(&v38);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v34, *(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72));
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)))
    {
      case 0u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v29) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v33, &v29);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        size_t v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v11 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        size_t v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v13 = *(std::__shared_weak_count **)((char *)&v40 + i);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
        break;
      case 1u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        size_t v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        char v17 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        size_t v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          char v19 = *(std::__shared_weak_count **)((char *)&v40 + j);
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        break;
      case 2u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        size_t v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        unsigned int v20 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        size_t v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t k = 24; k != -8; k -= 16)
        {
          uint64_t v22 = *(std::__shared_weak_count **)((char *)&v40 + k);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
        break;
      case 3u:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v33);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        size_t v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        char v23 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        size_t v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (uint64_t m = 24; m != -8; m -= 16)
        {
          char v25 = *(std::__shared_weak_count **)((char *)&v40 + m);
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
        }
        break;
      case 4u:
        long long v43 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v40 = &unk_26C5BF2D8;
        *((void *)&v40 + 1) = 0;
        long long v41 = 0uLL;
        LOBYTE(v42) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v29, (uint64_t)&v40);
        long long v44 = v29;
        uint64_t v31 = 0;
        long long v32 = 0;
        size_t v30 = 0;
        *(void *)&long long v39 = &v30;
        BYTE8(v39) = 0;
        size_t v30 = (long long *)operator new(0x20uLL);
        uint64_t v31 = v30;
        long long v32 = v30 + 2;
        uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, &v43, &v45, v30);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v33, (void **)&v30);
        int v26 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v33;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        *(void *)&long long v39 = &v30;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
        for (uint64_t n = 24; n != -8; n -= 16)
        {
          long long v28 = *(std::__shared_weak_count **)((char *)&v43 + n);
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
        }
        mediaplatform::Data::~Data((mediaplatform::Data *)&v40);
        break;
      default:
        long long v40 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v33, 0);
        long long v41 = v33;
        *(void *)&long long v44 = 0;
        long long v43 = 0uLL;
        size_t v30 = &v43;
        LOBYTE(v31) = 0;
        *(void *)&long long v43 = operator new(0x20uLL);
        *((void *)&v43 + 1) = v43;
        *(void *)&long long v44 = v43 + 32;
        *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v44, &v40, &v42, (void *)v43);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v39, (void **)&v43);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        long long v38 = v39;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        size_t v30 = &v43;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        for (iuint64_t i = 24; ii != -8; ii -= 16)
        {
          uint64_t v16 = *(std::__shared_weak_count **)((char *)&v40 + ii);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        break;
    }
  }
  LODWORD(v43) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v40, v38, *((std::__shared_weak_count **)&v38 + 1), (int *)&v43, &v34);
  *a3 = v40;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
}

void sub_2150B2264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  unsigned __int8 v15 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  char v19 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  va_arg(va2, void);
  uint64_t v22 = va_arg(va2, void);
  va_copy((va_list)v20, va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  uint64_t v6 = 24;
  while (1)
  {
    long long v7 = *(std::__shared_weak_count **)(v4 - 88 + v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v6 -= 16;
    if (v6 == -8)
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)va2);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      _Unwind_Resume(a1);
    }
  }
}

void mediaplatform::DatabaseParameter<mediaplatform::Data>::bind(uint64_t a1, uint64_t a2, int a3)
{
  mediaplatform::Data::Data((mediaplatform::Data *)v6, *(const void **)(a1 + 32), *(void *)(a1 + 16), 1);
  int v5 = sqlite3_bind_blob(*(sqlite3_stmt **)(a2 + 24), a3 + 1, v8, n, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v5);
  mediaplatform::Data::~Data((mediaplatform::Data *)v6);
}

void sub_2150B24FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseParameter<mediaplatform::Data>::description(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  mediaplatform::Data::Data((mediaplatform::Data *)v3, *(const void **)(a1 + 32), *(void *)(a1 + 16), 1);
  mediaplatform::SQLStringValue<mediaplatform::Data>(a2, (mediaplatform *)v3);
  mediaplatform::Data::~Data((mediaplatform::Data *)v3);
}

void sub_2150B2560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseParameter<mediaplatform::Data>::~DatabaseParameter(void *a1)
{
  *a1 = &unk_26C5C3988;
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 1));
  JUMPOUT(0x2166B26F0);
}

void *mediaplatform::DatabaseParameter<mediaplatform::Data>::~DatabaseParameter(void *a1)
{
  *a1 = &unk_26C5C3988;
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 1));
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::matches(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v9, *a2 + 8, *(void *)(a1 + 8));
  std::string::basic_string[abi:ne180100](__dst, *(void **)(v2 + 48), *(void *)(v2 + 32));
  LODWORD(v2) = *(_DWORD *)(v2 + 20);
  std::string::basic_string[abi:ne180100](__p, __src, __len);
  uint64_t v3 = mlcore::_string_matches((unsigned __int8 *)__dst, v2, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(__dst[0]);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)v9);
  return v3;
}

void sub_2150B2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)&a22);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = v2 + 16;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v7, v8);
  LOBYTE(v17[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v17, 1);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, (&off_26422ECC0)[v9]);
  if ((v18 & 0x80u) == 0) {
    uint64_t v10 = v17;
  }
  else {
    uint64_t v10 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v11 = v18;
  }
  else {
    uint64_t v11 = (uint64_t)v17[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v10, v11);
  __p.__r_.__value_.__s.__data_[0] = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"x'", 2);
  mediaplatform::Base16Representation((mediaplatform *)(a1 + 24), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"'", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v19[1] = MEMORY[0x263F8C318] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v21);
}

void sub_2150B2A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<mediaplatform::Data>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7870;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 3));
  JUMPOUT(0x2166B26F0);
}

void *mlcore::ComparisonPredicate<mediaplatform::Data>::~ComparisonPredicate(void *a1)
{
  *a1 = &unk_26C5C7870;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)(a1 + 3));
  return a1;
}

uint64_t mlcore::ComparisonPropertyPredicate::matches()
{
  return 0;
}

void *mlcore::ComparisonPropertyPredicate::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void mlcore::ComparisonPropertyPredicate::~ComparisonPropertyPredicate(mlcore::ComparisonPropertyPredicate *this)
{
}

uint64_t mlcore::ComparisonPredicateBase::ComparisonPredicateBase(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)BOOL result = &unk_26C5C80A8;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t mlcore::ComparisonPredicate<long long>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<long long>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<long long>::setValue(uint64_t result, void *a2)
{
  *(void *)(result + 24) = *a2;
  uint64_t v2 = *(void *)(result + 32);
  if (v2) {
    *(void *)(v2 + 8) = *a2;
  }
  return result;
}

uint64_t mlcore::ComparisonPredicate<std::string>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<std::string>::value(uint64_t a1)
{
  return a1 + 24;
}

std::string *mlcore::ComparisonPredicate<std::string>::setValue(std::string *a1, const std::string *a2)
{
  BOOL result = std::string::operator=(a1 + 1, a2);
  std::string::pointer data = a1[2].__r_.__value_.__l.__data_;
  if (data)
  {
    return std::string::operator=((std::string *)(data + 8), a2);
  }
  return result;
}

double mlcore::ComparisonPredicate<double>::ComparisonPredicate(uint64_t a1, uint64_t a2, int a3, double *a4, int a5)
{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_26C5C7920;
  *(void *)(a1 + 8) = a2;
  double result = *a4;
  *(double *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_26C5C7920;
  *(void *)(a1 + 8) = a2;
  double result = *a4;
  *(double *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

uint64_t mlcore::ComparisonPredicate<double>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<double>::value(uint64_t a1)
{
  return a1 + 24;
}

double mlcore::ComparisonPredicate<double>::setValue(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 24) = *a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    double result = *a2;
    *(double *)(v3 + 8) = *a2;
  }
  return result;
}

uint64_t mlcore::ComparisonPredicate<int>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<int>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<int>::setValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 24) = *a2;
  uint64_t v2 = *(void *)(result + 32);
  if (v2) {
    *(_DWORD *)(v2 + 8) = *a2;
  }
  return result;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::ComparisonPredicate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_26C5C7870;
  *(void *)(a1 + 8) = a2;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 24), *(const void **)(a4 + 24), *(void *)(a4 + 8), 1);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_26C5C7870;
  *(void *)(a1 + 8) = a2;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 24), *(const void **)(a4 + 24), *(void *)(a4 + 8), 1);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::setValue(uint64_t a1, uint64_t a2)
{
  uint64_t result = mediaplatform::Data::operator=(a1 + 24, a2);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    return mediaplatform::Data::operator=(v5 + 8, a2);
  }
  return result;
}

uint64_t mlcore::ComparisonPropertyPredicate::ComparisonPropertyPredicate(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a3;
  *(void *)uint64_t result = &unk_26C5C82D0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = a4;
  return result;
}

{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a3;
  *(void *)uint64_t result = &unk_26C5C82D0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = a4;
  return result;
}

void mediaplatform::SQLBeginTransactionStatement::~SQLBeginTransactionStatement(mediaplatform::SQLBeginTransactionStatement *this)
{
}

void mediaplatform::SQLRollbackTransactionStatement::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "ROLLBACK TRANSACTION");
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(void *)(a1 + 16)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 31))
  {
    return;
  }
  mediaplatform::FormatString<std::string>(&__p, (std::string *)"TO SAVEPOINT {0}", a1 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2150B2F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLRollbackTransactionStatement::~SQLRollbackTransactionStatement(void **this)
{
  *this = &unk_26C5BF2B0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x2166B26F0);
}

{
  *this = &unk_26C5BF2B0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void mediaplatform::SQLCommitTransactionStatement::~SQLCommitTransactionStatement(mediaplatform::SQLCommitTransactionStatement *this)
{
}

uint64_t mediaplatform::SQLBeginTransactionStatement::SQLBeginTransactionStatement(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26C5BF260;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_26C5BF260;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t mediaplatform::SQLBeginTransactionStatement::transactionBehavior(mediaplatform::SQLBeginTransactionStatement *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t mediaplatform::SQLBeginTransactionStatement::setTransactionBehavior(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void *mediaplatform::SQLRollbackTransactionStatement::SQLRollbackTransactionStatement(void *a1, long long *a2)
{
  *a1 = &unk_26C5BF2B0;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t mediaplatform::SQLRollbackTransactionStatement::savepointName(mediaplatform::SQLRollbackTransactionStatement *this)
{
  return (uint64_t)this + 8;
}

std::string *mediaplatform::SQLRollbackTransactionStatement::setSavepointName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

mlcore::LocalizedSortingDetails *mlcore::LocalizedSortingDetails::LocalizedSortingDetails(mlcore::LocalizedSortingDetails *this, const mediaplatform::FilePath *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 1))
  {
    mediaplatform::PropertyList::PropertyList((mediaplatform::PropertyList *)&v29, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "InsignificantSortPrefixes");
    mediaplatform::PropertyList::arrayValueForKey<std::string>((uint64_t)&v27, (uint64_t)&v29, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = v27;
    for (i = v28; v3 != i; uint64_t v3 = (long long *)((char *)v3 + 24))
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      mediaplatform::StringToUCharString((uint64_t)&__p, v24);
      unint64_t v7 = *((void *)this + 1);
      unint64_t v6 = *((void *)this + 2);
      if (v7 >= v6)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)this) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)this) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        unint64_t v14 = v12 + 24 * v9;
        unint64_t v15 = v12 + 24 * v13;
        long long v16 = *(_OWORD *)v24;
        *(void *)(v14 + 16) = v25;
        *(_OWORD *)unint64_t v14 = v16;
        v24[1] = 0;
        uint64_t v25 = 0;
        v24[0] = 0;
        unint64_t v17 = v14 + 24;
        unsigned __int8 v18 = *(char **)this;
        char v19 = (char *)*((void *)this + 1);
        if (v19 == *(char **)this)
        {
          *(void *)this = v14;
          *((void *)this + 1) = v17;
          *((void *)this + 2) = v15;
        }
        else
        {
          do
          {
            long long v20 = *(_OWORD *)(v19 - 24);
            *(void *)(v14 - 8) = *((void *)v19 - 1);
            *(_OWORD *)(v14 - 24) = v20;
            v14 -= 24;
            *((void *)v19 - 2) = 0;
            *((void *)v19 - 1) = 0;
            *((void *)v19 - 3) = 0;
            v19 -= 24;
          }
          while (v19 != v18);
          char v19 = *(char **)this;
          uint64_t v21 = (void **)*((void *)this + 1);
          *(void *)this = v14;
          *((void *)this + 1) = v17;
          *((void *)this + 2) = v15;
          while (v21 != (void **)v19)
          {
            if (*((char *)v21 - 1) < 0) {
              operator delete(*(v21 - 3));
            }
            v21 -= 3;
          }
        }
        if (v19) {
          operator delete(v19);
        }
        int v22 = SHIBYTE(v25);
        *((void *)this + 1) = v17;
        if (v22 < 0) {
          operator delete(v24[0]);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)v24;
        *(void *)(v7 + 16) = v25;
        *(_OWORD *)unint64_t v7 = v8;
        *((void *)this + 1) = v7 + 24;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    long long v29 = &unk_26C5BEA78;
    mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v30);
  }
  return this;
}

void sub_2150B33D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,const void *a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a25 = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&a26);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::arrayValueForKey<std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mediaplatform::PropertyList::_cfValueForKey(a2, a3, &__v);
  std::__split_buffer<std::string>::pointer first = __v.__first_;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (first)
  {
    if (CFGetTypeID(first) == TypeID) {
      CFRetain(first);
    }
    else {
      std::__split_buffer<std::string>::pointer first = 0;
    }
  }
  CFArrayRef theArray = (CFArrayRef)first;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&__v.__first_);
  if (!first)
  {
    exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not an array");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  CFIndex Count = CFArrayGetCount((CFArrayRef)first);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      CFStringRef v9 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        CFStringRef v27 = v9;
        CFRetain(v9);
      }
      else
      {
        CFStringRef v27 = 0;
      }
      CFStringRef v24 = v9;
      mediaplatform::PlistValueGetter<std::string,void>::value(__p, v9);
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if (v10 >= v11)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a1) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a1) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unsigned __int8 v18 = (std::string *)(v16 + 24 * v13);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
        long long v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v26;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        std::string::size_type v26 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
        uint64_t v20 = *(void *)(a1 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v21 = SHIBYTE(v26);
        *(void *)(a1 + 8) = v20;
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v26;
        *(_OWORD *)unint64_t v10 = v12;
        __p[1] = 0;
        std::string::size_type v26 = 0;
        __p[0] = 0;
        *(void *)(a1 + 8) = v10 + 24;
      }
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v24);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v27);
    }
  }
  return mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer((const void **)&theArray);
}

void sub_2150B36F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, const void *a19, __int16 a20,char a21,char a22)
{
}

const void **mediaplatform::PlistValueGetter<std::string,void>::value(void *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    CFStringRef v11 = 0;
    exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not a string");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
  }
  CFRetain(a2);
  CFStringRef v11 = a2;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  CFIndex Length = CFStringGetLength(a2);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding < 0) {
    goto LABEL_7;
  }
  CFIndex v7 = MaximumSizeForEncoding + 1;
  long long v8 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
  if (!CFStringGetCString(a2, (char *)v8, v7, 0x8000100u))
  {
    free(v8);
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(a1, "(invalid)");
    return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
  }
  MEMORY[0x2166B2280](&v12, v8);
  free(v8);
  *(_OWORD *)a1 = v12;
  a1[2] = v13;
  return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
}

void sub_2150B38C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

const void **mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::wstring::__init_copy_ctor_external(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v6 = a3 | 3;
    }
    CFIndex v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v6 + 1);
    v5[1] = a3;
    void v5[2] = v8 | 0x8000000000000000;
    *long long v5 = v7;
    long long v5 = v7;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, 2 * a3 + 2);
}

mlcore::GeniusConfigTable *mlcore::GeniusConfigTable::GeniusConfigTable(mlcore::GeniusConfigTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "genius_config");
  std::string::basic_string[abi:ne180100]<0>(v18, "id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v20, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v14, "version");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v16, (uint64_t)v14, 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "default_num_results");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v12, (uint64_t)v10, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "min_num_results");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v8, (uint64_t)v6, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v22, (uint64_t)v20, (uint64_t)v16, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  v8[0] = &unk_26C5C3AF0;
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  v12[0] = &unk_26C5C3AF0;
  if (v13 < 0) {
    operator delete((void *)v12[1]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  v16[0] = &unk_26C5C3AF0;
  if (v17 < 0) {
    operator delete((void *)v16[1]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  v20[0] = &unk_26C5C3AF0;
  if (v21 < 0) {
    operator delete((void *)v20[1]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  *(void *)this = &unk_26C5C7498;
  return this;
}

void sub_2150B3C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  a31 = &unk_26C5C3AF0;
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a46 = &unk_26C5C3AF0;
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  *(void *)(v52 - 160) = &unk_26C5C3AF0;
  if (*(char *)(v52 - 129) < 0) {
    operator delete(*(void **)(v52 - 152));
  }
  if (*(char *)(v52 - 161) < 0) {
    operator delete(*(void **)(v52 - 184));
  }
  *(void *)(v52 - 88) = &unk_26C5C3AF0;
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (*(char *)(v52 - 17) < 0) {
    operator delete(*(void **)(v52 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_2150B3DD8()
{
}

void sub_2150B3DE0()
{
}

uint64_t mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v44 = *(std::string *)a2;
  }
  long long v39 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string v40 = *(std::string *)(a3 + 8);
  }
  int v41 = *(_DWORD *)(a3 + 32);
  long long v39 = &unk_26C5C3878;
  uint64_t v42 = *(void *)(a3 + 36);
  int v43 = *(_DWORD *)(a3 + 44);
  uint64_t v35 = &unk_26C5C3AF0;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string v36 = *(std::string *)(a4 + 8);
  }
  int v37 = *(_DWORD *)(a4 + 32);
  uint64_t v35 = &unk_26C5C3858;
  uint64_t v38 = *(void *)(a4 + 36);
  uint64_t v31 = &unk_26C5C3AF0;
  if (*(char *)(a5 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
  }
  else {
    std::string v32 = *(std::string *)(a5 + 8);
  }
  int v33 = *(_DWORD *)(a5 + 32);
  uint64_t v31 = &unk_26C5C3858;
  uint64_t v19 = a5;
  uint64_t v34 = *(void *)(a5 + 36);
  CFStringRef v27 = &unk_26C5C3AF0;
  if (*(char *)(a6 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a6 + 8), *(void *)(a6 + 16));
  }
  else {
    std::string __p = *(std::string *)(a6 + 8);
  }
  int v29 = *(_DWORD *)(a6 + 32);
  CFStringRef v27 = &unk_26C5C3858;
  uint64_t v30 = *(void *)(a6 + 36);
  uint64_t v20 = &unk_26C5C3AF0;
  if (*(char *)(a7 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a7 + 8), *(void *)(a7 + 16));
  }
  else {
    std::string v21 = *(std::string *)(a7 + 8);
  }
  int v22 = *(_DWORD *)(a7 + 32);
  uint64_t v20 = &unk_26C5C37F8;
  char v23 = *(unsigned char *)(a7 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v24, *(const void **)(a7 + 64), *(void *)(a7 + 48), 1);
  *(void *)a1 = &unk_26C5BED18;
  char v13 = (std::string *)(a1 + 8);
  int v14 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v44.__r_.__value_.__l + 2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C5C3558;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  int64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v40;
  }
  int v66 = v41;
  int64_t v64 = &unk_26C5C3878;
  uint64_t v67 = v42;
  int v68 = v43;
  long long v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v36;
  }
  int v62 = v37;
  long long v60 = &unk_26C5C3858;
  uint64_t v63 = v38;
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v32;
  }
  int v58 = v33;
  uint64_t v56 = &unk_26C5C3858;
  uint64_t v59 = v34;
  uint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = __p;
  }
  int v54 = v29;
  uint64_t v52 = &unk_26C5C3858;
  uint64_t v55 = v30;
  uint64_t v45 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v21;
  }
  int v47 = v22;
  uint64_t v45 = &unk_26C5C37F8;
  char v48 = v23;
  mediaplatform::Data::Data((mediaplatform::Data *)&v49, __src, __n, 1);
  uint64_t v84 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v85, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v85 = __s;
  }
  int v86 = v62;
  uint64_t v84 = &unk_26C5C3858;
  uint64_t v87 = v63;
  uint64_t v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v57;
  }
  int v82 = v58;
  uint64_t v80 = &unk_26C5C3858;
  uint64_t v83 = v59;
  int v76 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v77, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v77 = v53;
  }
  int v78 = v54;
  int v76 = &unk_26C5C3858;
  uint64_t v79 = v55;
  uint64_t v69 = &unk_26C5C3AF0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v70, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = v46;
  }
  int v71 = v47;
  uint64_t v69 = &unk_26C5C37F8;
  char v72 = v48;
  mediaplatform::Data::Data((mediaplatform::Data *)&v73, v51, v50, 1);
  unint64_t v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v81;
  }
  int v101 = v82;
  unint64_t v99 = &unk_26C5C3858;
  uint64_t v102 = v83;
  uint64_t v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v96, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else {
    std::string v96 = v77;
  }
  int v97 = v78;
  uint64_t v95 = &unk_26C5C3858;
  uint64_t v98 = v79;
  uint64_t v88 = &unk_26C5C3AF0;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v89, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else {
    std::string v89 = v70;
  }
  int v90 = v71;
  uint64_t v88 = &unk_26C5C37F8;
  char v91 = v72;
  mediaplatform::Data::Data((mediaplatform::Data *)&v92, v75, v74, 1);
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v109, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v109 = v96;
  }
  int v110 = v97;
  int v108 = &unk_26C5C3858;
  uint64_t v111 = v98;
  uint64_t v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v104, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v104 = v89;
  }
  int v105 = v90;
  uint64_t v103 = &unk_26C5C37F8;
  char v106 = v91;
  mediaplatform::Data::Data((mediaplatform::Data *)&v107, v94, v93, 1);
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::DatabaseColumnTuple(a1 + 80, (uint64_t)&v108, (uint64_t)&v103);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v103);
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  char v15 = (std::string *)(a1 + 216);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
    *(void *)(a1 + 232) = *((void *)&v100.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 240) = v101;
  *(void *)(a1 + 208) = &unk_26C5C3858;
  *(void *)(a1 + 244) = v102;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v88);
  uint64_t v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  unint64_t v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  unint64_t v16 = (std::string *)(a1 + 264);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
    *(void *)(a1 + 280) = *((void *)&v85.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 288) = v86;
  *(void *)(a1 + 256) = &unk_26C5C3858;
  *(void *)(a1 + 292) = v87;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v69);
  int v76 = &unk_26C5C3AF0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  uint64_t v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  uint64_t v84 = &unk_26C5C3AF0;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  char v17 = (std::string *)(a1 + 312);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    *(void *)(a1 + 328) = *((void *)&v65.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 336) = v66;
  *(void *)(a1 + 304) = &unk_26C5C3878;
  *(void *)(a1 + 340) = v67;
  *(_DWORD *)(a1 + 348) = v68;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v45);
  uint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  long long v60 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  int64_t v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v20);
  CFStringRef v27 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = &unk_26C5C3AF0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v35 = &unk_26C5C3AF0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  long long v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C5C4088;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 352, a3);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 400, a4);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 448, v19);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 496, a6);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(a1 + 544, a7);
  return a1;
}

void sub_2150B4CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(v76);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a75);
  STACK[0x220] = a21;
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  STACK[0x250] = a22;
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  STACK[0x280] = a23;
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  STACK[0x2B0] = a24;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (*(char *)(v75 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v75);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a29);
  a39 = a25;
  if (a45 < 0) {
    operator delete(a40);
  }
  a48 = a26;
  if (a54 < 0) {
    operator delete(a49);
  }
  a57 = a27;
  if (a63 < 0) {
    operator delete(a58);
  }
  a66 = a28;
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

void sub_2150B505C()
{
  STACK[0x3C0] = v0;
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  JUMPOUT(0x2150B4EE0);
}

void sub_2150B5078()
{
  STACK[0x2E0] = v0;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  JUMPOUT(0x2150B4F10);
}

void sub_2150B5094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2150B4F60);
}

void sub_2150B50B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2150B4FE4);
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150B5148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 160);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 80);
}

void sub_2150B51D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::columnCount()
{
  return 5;
}

void mlcore::GeniusConfigTable::~GeniusConfigTable(mlcore::GeniusConfigTable *this)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C4088;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 544);
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3558;
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t std::__tuple_leaf<4ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)a1 = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), *(const void **)(a2 + 64), *(void *)(a2 + 48), 1);
  *(void *)a1 = &unk_26C5C4768;
  return a1;
}

void sub_2150B55C4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v9 = &unk_26C5C3AF0;
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string v10 = *(std::string *)(a3 + 8);
  }
  int v11 = *(_DWORD *)(a3 + 32);
  char v9 = &unk_26C5C37F8;
  char v12 = *(unsigned char *)(a3 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)&v13, *(const void **)(a3 + 64), *(void *)(a3 + 48), 1);
  *(void *)a1 = &unk_26C5C3AF0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 32) = v11;
  *(void *)a1 = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 36) = v12;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), __src, __n, 1);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v9);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 104) = *(void *)(a2 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 80) = &unk_26C5C3858;
  *(void *)(a1 + 116) = *(void *)(a2 + 36);
  return a1;
}

void sub_2150B5924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mlcore::GeniusConfigTable::IDColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 360), *(void *)(a2 + 368));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 360);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 376);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 396);
  *(void *)(a1 + 36) = *(void *)(a2 + 388);
  *(void *)a1 = &unk_26C5C47E8;
}

void mlcore::GeniusConfigTable::versionColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<1ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 408), *(void *)(a2 + 416));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 408);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 424);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 432);
  *(void *)(a1 + 36) = *(void *)(a2 + 436);
  *(void *)a1 = &unk_26C5C47C8;
}

void mlcore::GeniusConfigTable::defaultNumResultsColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<2ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 456), *(void *)(a2 + 464));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 456);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 472);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 480);
  *(void *)(a1 + 36) = *(void *)(a2 + 484);
  *(void *)a1 = &unk_26C5C47C8;
}

void mlcore::GeniusConfigTable::minNumResultsColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<3ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 504), *(void *)(a2 + 512));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 504);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 520);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 528);
  *(void *)(a1 + 36) = *(void *)(a2 + 532);
  *(void *)a1 = &unk_26C5C47C8;
}

mediaplatform::Data *mlcore::GeniusConfigTable::dataColumn@<X0>(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  return mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<4ul>(a2, (uint64_t)this);
}

mediaplatform::Data *mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<4ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a2 + 575) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 552), *(void *)(a2 + 560));
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 24) = *(void *)(a2 + 568);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 576);
  *(void *)a1 = &unk_26C5C37F8;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 580);
  uint64_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), *(const void **)(a2 + 608), *(void *)(a2 + 592), 1);
  *(void *)a1 = &unk_26C5C4768;
  return result;
}

void sub_2150B5D64(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *mediaplatform::SQLOnJoinConstraint::SQLOnJoinConstraint(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = &unk_26C5BEF50;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = &unk_26C5BEF50;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint(void *a1, void **a2)
{
  *a1 = &unk_26C5BF168;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>((uint64_t)(a1 + 1), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

{
  *a1 = &unk_26C5BF168;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>((uint64_t)(a1 + 1), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

uint64_t std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>(uint64_t result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    long long v7 = (void *)result;
    uint64_t v8 = operator new(16 * a4);
    *long long v7 = v8;
    v7[1] = v8;
    _DWORD v7[2] = &v8[2 * a4];
    char v12 = v8;
    uint64_t v13 = v8;
    v10[0] = v7 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    if (a2 != a3)
    {
      do
      {
        uint64_t v9 = a2[1];
        *uint64_t v8 = *a2;
        v8[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        v8 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      uint64_t v13 = v8;
    }
    char v11 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v7[1] = v8;
  }
  return result;
}

void sub_2150B6114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *mediaplatform::SQLFromStatement::addJoinClause(void *result, long long *a2)
{
  uint64_t v2 = result;
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = result[6];
  uint64_t v6 = (_OWORD *)result[5];
  if ((unint64_t)v6 >= v5)
  {
    long long v16 = v3;
    uint64_t v8 = result[4];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v17[4] = v2 + 6;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v12);
    int v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    *(_OWORD *)int v14 = v16;
    void v17[2] = v14 + 16;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(v2 + 4, v17);
    long long v7 = (_OWORD *)v2[5];
    uint64_t result = (void *)std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *uint64_t v6 = v3;
    long long v7 = v6 + 1;
    result[5] = v7;
  }
  v2[5] = v7;
  return result;
}

void sub_2150B627C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::columnCount()
{
  return 16;
}

void mlcore::ItemArtistTable::~ItemArtistTable(mlcore::ItemArtistTable *this)
{
  mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3E90;
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  *(void *)(a1 + 1776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1807) < 0) {
    operator delete(*(void **)(a1 + 1784));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1696);
  *(void *)(a1 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1679) < 0) {
    operator delete(*(void **)(a1 + 1656));
  }
  *(void *)(a1 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1631) < 0) {
    operator delete(*(void **)(a1 + 1608));
  }
  *(void *)(a1 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1583) < 0) {
    operator delete(*(void **)(a1 + 1560));
  }
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  *(void *)(a1 + 1360) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1391) < 0) {
    operator delete(*(void **)(a1 + 1368));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1280);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1216);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1152);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1088);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1024);
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)a1 = &unk_26C5C3360;
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 864);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3360;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 864);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3360;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 864);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3360;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 864);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 656);
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 656);
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 464) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 416) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 368) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::ItemArtistTable::sortNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1119) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 137), *((void *)this + 138));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1096);
    *(void *)(a2 + 24) = *((void *)this + 139);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 280);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1124);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 141), *((void *)this + 142));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1128);
    *(void *)(a2 + 56) = *((void *)this + 143);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150B71A0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::sortSeriesNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 153), *((void *)this + 154));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1224);
    *(void *)(a2 + 24) = *((void *)this + 155);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 312);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1252);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1279) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 157), *((void *)this + 158));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1256);
    *(void *)(a2 + 56) = *((void *)this + 159);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150B72B8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::ItemArtistTable::groupingKeyColumn@<X0>(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 161), *((void *)this + 162));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1288);
    *(void *)(a2 + 24) = *((void *)this + 163);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 328);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1316);
  uint64_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 168), *((void *)this + 166), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_2150B73B4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::cloudStatusColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1391) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 171), *((void *)this + 172));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1368);
    *(void *)(a2 + 24) = *((void *)this + 173);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 348);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1396);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemArtistTable::keepLocalColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1535) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 189), *((void *)this + 190));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1512);
    *(void *)(a2 + 24) = *((void *)this + 191);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 384);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1540);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemArtistTable::keepLocalStatusColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1583) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 195), *((void *)this + 196));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1560);
    *(void *)(a2 + 24) = *((void *)this + 197);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 396);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1588);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemArtistTable::keepLocalStatusReasonColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 201), *((void *)this + 202));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(void *)(a2 + 24) = *((void *)this + 203);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 408);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1636);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemArtistTable::keepLocalConstraintsColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1679) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 207), *((void *)this + 208));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1656);
    *(void *)(a2 + 24) = *((void *)this + 209);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 420);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1684);
  *(void *)a2 = &unk_26C5C47C8;
}

mediaplatform::Data *mlcore::ItemArtistTable::appDataColumn@<X0>(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1727) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 213), *((void *)this + 214));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1704);
    *(void *)(a2 + 24) = *((void *)this + 215);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 432);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1732);
  uint64_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 220), *((void *)this + 218), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_2150B77D0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::syncIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1807) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 223), *((void *)this + 224));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1784);
    *(void *)(a2 + 24) = *((void *)this + 225);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 452);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 455);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1812);
  *(void *)a2 = &unk_26C5C47E8;
}

std::vector<std::string> *mlcore::LanguageResources::LanguageResources(std::vector<std::string> *this, const mediaplatform::ContentBundle *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  mediaplatform::FilePath::FilePath(&__p, &v22);
  mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo((mlcore::LocalizedSectionsInfo *)this, (const mediaplatform::FilePath *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BF338;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  mediaplatform::FilePath::FilePath(&__p, &v22);
  mlcore::LocalizedSortingDetails::LocalizedSortingDetails((mlcore::LocalizedSortingDetails *)&this[3], (const mediaplatform::FilePath *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BF338;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  this[4].__begin_ = 0;
  this[4].__end_ = 0;
  this[4].__end_cap_.__value_ = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  mediaplatform::FilePath::FilePath(&v22, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = (long long *)*((void *)a2 + 12);
  if (v4 != *((long long **)a2 + 13))
  {
    unint64_t v5 = (char *)a2 + 64;
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v6 = *v4;
      __str.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v20, size + 6);
    if (SHIBYTE(v20.__end_cap_.__value_) >= 0) {
      begiint n = (std::string *)&v20;
    }
    else {
      begiint n = v20.__begin_;
    }
    if (size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(begin, p_str, size);
    }
    strcpy((char *)begin + size, ".lproj");
    mediaplatform::FilePath::operator+((uint64_t)v5, (std::string *)&v20, (uint64_t)&__p);
    mediaplatform::File::File((mediaplatform::File *)&v21, (const mediaplatform::FilePath *)&__p);
  }
  if (v22.__r_.__value_.__r.__words[2] == v22.__r_.__value_.__l.__size_)
  {
    LODWORD(v20.__begin_) = 2;
    std::string::basic_string[abi:ne180100]<0>(&__str, "Could not find preferred localization bundle");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)&__p, (int *)&v20, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exceptioint n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Sections.plist");
  mediaplatform::FilePath::operator+((uint64_t)&v22, &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo((mlcore::LocalizedSectionsInfo *)&__p, (const mediaplatform::FilePath *)&__str);
  if (this->__begin_)
  {
    std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, (uint64_t)this->__begin_);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
  *(std::string *)this = __p;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::string>::__vdeallocate(this + 1);
  *(_OWORD *)&this[1].__begin_ = v15;
  this[1].__end_cap_.__value_ = v16;
  long long v16 = 0;
  long long v15 = 0uLL;
  p_begiint n = (void **)&this[2].__begin_;
  if (SHIBYTE(this[2].__end_cap_.__value_) < 0) {
    operator delete(*p_begin);
  }
  *(_OWORD *)p_begiint n = v17;
  this[2].__end_cap_.__value_ = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  v20.__begin_ = (std::vector<std::string>::pointer)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__begin_ = &__p;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  std::string::basic_string[abi:ne180100]<0>(&v20, "SortingDetails.plist");
  uint64_t v13 = (uint64_t *)&this[3];
  mediaplatform::FilePath::operator+((uint64_t)&v22, (std::string *)&v20, (uint64_t)&__p);
  if (SHIBYTE(v20.__end_cap_.__value_) < 0) {
    operator delete(v20.__begin_);
  }
  mlcore::LocalizedSortingDetails::LocalizedSortingDetails((mlcore::LocalizedSortingDetails *)&v20, (const mediaplatform::FilePath *)&__p);
  if (*v13)
  {
    std::vector<std::string>::__clear[abi:ne180100](v13);
    operator delete((void *)*v13);
    *uint64_t v13 = 0;
    this[3].__end_ = 0;
    this[3].__end_cap_.__value_ = 0;
  }
  this[3] = v20;
  memset(&v20, 0, sizeof(v20));
  std::string v21 = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BF338;
  v20.__begin_ = (std::vector<std::string>::pointer)&__p.__r_.__value_.__r.__words[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BF338;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BF338;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return this;
}

void sub_2150B7EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::exception_vtbl *a11, void **a12, std::exception a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a13);
  *(void *)(v38 - 128) = &unk_26C5BF338;
  a13.__vftable = (std::exception_vtbl *)(v38 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*((char *)a12 + 119) < 0) {
    operator delete(*a10);
  }
  a13.__vftable = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(a12);
  _Unwind_Resume(a1);
}

uint64_t mlcore::LanguageResources::sortingDetails(mlcore::LanguageResources *this)
{
  return (uint64_t)this + 72;
}

uint64_t mlcore::LanguageResources::canonicalLanguageIdentifier(mlcore::LanguageResources *this)
{
  return (uint64_t)this + 96;
}

uint64_t mlcore::LanguageResources::unknownSectionIndex(mlcore::LanguageResources *this)
{
  return -1;
}

void *mediaplatform::NameForCollateType(void *a1, int a2)
{
  if ((a2 - 1) >= 3)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown collate type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v2 = (&off_26422ED80)[a2 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void sub_2150B81FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLOrderingTerm::SQLOrderingTerm(uint64_t result, void *a2, int a3, int a4)
{
  *(void *)uint64_t result = &unk_26C5BEBF8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  uint64_t v4 = a2[1];
  *(void *)(result + 16) = *a2;
  *(void *)(result + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v4;

  *(void *)uint64_t result = &unk_26C5BEBF8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  uint64_t v4 = a2[1];
  *(void *)(result + 16) = *a2;
  *(void *)(result + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::columnCount()
{
  return 26;
}

void mlcore::AlbumTable::~AlbumTable(mlcore::AlbumTable *this)
{
  *(void *)this = &unk_26C5C3F38;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1456);
  *(void *)this = &unk_26C5C3408;
  *((void *)this + 176) = &unk_26C5C3AF0;
  if (*((char *)this + 1439) < 0) {
    operator delete(*((void **)this + 177));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3F38;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1456);
  *(void *)this = &unk_26C5C3408;
  *((void *)this + 176) = &unk_26C5C3AF0;
  if (*((char *)this + 1439) < 0) {
    operator delete(*((void **)this + 177));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1264);
  *(void *)(a1 + 1216) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1247) < 0) {
    operator delete(*(void **)(a1 + 1224));
  }
  *(void *)(a1 + 1168) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*(void **)(a1 + 1176));
  }
  *(void *)(a1 + 1120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1151) < 0) {
    operator delete(*(void **)(a1 + 1128));
  }
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 896);
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  *(void *)(a1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 272);
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1200);
  *(void *)(a1 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 880) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  *(void *)(a1 + 480) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  *(void *)(a1 + 112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3408;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3408;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3408;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3F38;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1456);
  *(void *)a1 = &unk_26C5C3408;
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3F38;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1456);
  *(void *)a1 = &unk_26C5C3408;
  *(void *)(a1 + 1408) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*(void **)(a1 + 1416));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 928) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 832) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  *(void *)(a1 + 480) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 480) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  *(void *)(a1 + 112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  *(void *)(a1 + 112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::AlbumTable::sortTitleColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1599) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 197), *((void *)this + 198));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1576);
    *(void *)(a2 + 24) = *((void *)this + 199);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 400);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1604);
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 201), *((void *)this + 202));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(void *)(a2 + 56) = *((void *)this + 203);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150B9E28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::AlbumTable::groupingKeyColumn@<X0>(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1759) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 217), *((void *)this + 218));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1736);
    *(void *)(a2 + 24) = *((void *)this + 219);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 440);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 1764);
  uint64_t result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 224), *((void *)this + 222), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_2150B9F24(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::cloudStatusColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 227), *((void *)this + 228));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1816);
    *(void *)(a2 + 24) = *((void *)this + 229);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 460);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1844);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::AlbumTable::userRatingColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1887) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 233), *((void *)this + 234));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1864);
    *(void *)(a2 + 24) = *((void *)this + 235);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 472);
  *(void *)(a2 + 36) = *(void *)((char *)this + 1892);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::AlbumTable::userRatingIsDerivedColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 317), *((void *)this + 318));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2536);
    *(void *)(a2 + 24) = *((void *)this + 319);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 640);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 643);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2564);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::AlbumTable::storeIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 335), *((void *)this + 336));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2680);
    *(void *)(a2 + 24) = *((void *)this + 337);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 676);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 679);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2708);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::MediaTable<long long,int,int,std::string,std::string,int>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3FE0;
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(void *)(a1 + 496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,int,int,std::string,std::string,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C34B0;
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::columnCount()
{
  return 6;
}

void mlcore::BestArtworkTokenTable::~BestArtworkTokenTable(mlcore::BestArtworkTokenTable *this)
{
  mlcore::MediaTable<long long,int,int,std::string,std::string,int>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::BestArtworkTokenTable::entityPersistentIDColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 51), *((void *)this + 52));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(void *)(a2 + 24) = *((void *)this + 53);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 108);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 111);
  *(void *)(a2 + 36) = *(void *)((char *)this + 436);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::SortDescriptor::description(mlcore::SortDescriptor *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 40))(&v12);
  uint64_t v4 = std::string::insert(&v12, 0, "{ ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  long long v6 = std::string::append(&v13, ", ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (*((_DWORD *)this + 4)) {
    uint64_t v8 = "desc";
  }
  else {
    uint64_t v8 = "asc";
  }
  uint64_t v9 = std::string::append(&v14, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v15, " }");
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_2150BA828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SortDescriptor::~SortDescriptor(mlcore::SortDescriptor *this)
{
}

uint64_t mlcore::MultiSortDescriptor::description(mlcore::MultiSortDescriptor *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"{ ", 2);
  uint64_t v2 = (char *)this + 24;
  while (1)
  {
    uint64_t v2 = *(char **)v2;
    if (!v2) {
      break;
    }
    (*(void (**)(void **__return_ptr))(**((void **)v2 + 3) + 40))(__p);
    if ((v10 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v4 = v10;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  }
  int v5 = *((_DWORD *)this + 12);
  if (v5) {
    long long v6 = "desc";
  }
  else {
    long long v6 = "asc";
  }
  if (v5) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" }", 2);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v13);
}

void sub_2150BAAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::MultiSortDescriptor::~MultiSortDescriptor(mlcore::MultiSortDescriptor *this)
{
  *(void *)this = &unk_26C5C7AE8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C7AE8;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)this + 8);
}

uint64_t mlcore::SortDescriptor::property(mlcore::SortDescriptor *this)
{
  return *((void *)this + 1);
}

uint64_t mlcore::SortDescriptor::ordering(mlcore::SortDescriptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t mlcore::comparisonUsingSortDescriptors@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_26C5C9498;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

void *std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore30comparisonUsingSortDescriptorsERKNSt3__16vectorINS_14SortDescriptorENS0_9allocatorIS2_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3[1] == *v3) {
    __assert_rtn("_compareEntitiesWithSortDescriptors", "SortDescriptor.cpp", 36, "sortDescriptors.size()");
  }
  uint64_t v6 = *v3 + 24;
  do
  {
    unsigned int v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 16) + 48))(*(void *)(v6 - 16), a2, a3);
    if (*(_DWORD *)(v6 - 8) == 1) {
      unsigned int v8 = -v7;
    }
    else {
      unsigned int v8 = v7;
    }
    if (v8) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == v3[1];
    }
    v6 += 24;
  }
  while (!v9);
  return v8 >> 31;
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5C9498;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C5C9498;
  result[1] = v3;
  return result;
}

void std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::~__func()
{
}

double mlcore::MultiSortDescriptor::MultiSortDescriptor(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C5C7AE8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_26C5C7AE8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

uint64_t mlcore::MultiSortDescriptor::ordering(mlcore::MultiSortDescriptor *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t mlcore::MultiSortDescriptor::propertyForEntityClass(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[2];
  if (!*(void *)&v2) {
    goto LABEL_17;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unsigned int v8 = *(void **)(*(void *)&this[1] + 8 * v7);
  if (!v8 || (BOOL v9 = (void *)*v8) == 0) {
LABEL_17:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v5 == v10) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v7) {
      goto LABEL_17;
    }
LABEL_16:
    BOOL v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_17;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_16;
  }
  return v9[3];
}

void mlcore::MultiSortDescriptor::setPropertyForEntityClass(mlcore::MultiSortDescriptor *this, mlcore::ModelPropertyBase *a2, unint64_t a3)
{
  if (*((void *)this + 4))
  {
    int v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 3) + 24) + 80))(*(void *)(*((void *)this + 3) + 24));
    if (v7 != (*(unsigned int (**)(mlcore::ModelPropertyBase *))(*(void *)a2 + 80))(a2)) {
      __assert_rtn("setPropertyForEntityClass", "SortDescriptor.cpp", 83, "_propertyForEntityClass.begin()->second->propertyType() == property->propertyType()");
    }
  }
  unsigned int v8 = (uint64_t *)((char *)this + 8);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v9 >> 47) ^ v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  unint64_t v12 = *((void *)this + 2);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12) {
        unint64_t v3 = v11 % v12;
      }
    }
    else
    {
      unint64_t v3 = v11 & (v12 - 1);
    }
    std::string v14 = *(void ***)(*v8 + 8 * v3);
    if (v14)
    {
      std::string v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a3) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v3) {
              break;
            }
          }
          std::string v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::string v15 = operator new(0x20uLL);
  *std::string v15 = 0;
  v15[1] = v11;
  v15[2] = a3;
  v15[3] = 0;
  float v17 = (float)(unint64_t)(*((void *)this + 4) + 1);
  float v18 = *((float *)this + 10);
  if (!v12 || (float)(v18 * (float)v12) < v17)
  {
    BOOL v19 = 1;
    if (v12 >= 3) {
      BOOL v19 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v12);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)this + 8, v22);
    unint64_t v12 = *((void *)this + 2);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v3 = v11 % v12;
      }
      else {
        unint64_t v3 = v11;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v11;
    }
  }
  uint64_t v23 = *v8;
  uint64_t v24 = *(void **)(*v8 + 8 * v3);
  if (v24)
  {
    *std::string v15 = *v24;
LABEL_40:
    *uint64_t v24 = v15;
    goto LABEL_41;
  }
  *std::string v15 = *((void *)this + 3);
  *((void *)this + 3) = v15;
  *(void *)(v23 + 8 * v3) = (char *)this + 24;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v25 >= v12) {
        v25 %= v12;
      }
    }
    else
    {
      v25 &= v12 - 1;
    }
    uint64_t v24 = (void *)(*v8 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*((void *)this + 4);
LABEL_42:
  v15[3] = a2;
}

void sub_2150BB1A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::MultiSortDescriptor::propertyForEntityClass@<X0>(mlcore::MultiSortDescriptor *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map(a2, (uint64_t)this + 8);
}

uint64_t std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  unint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint8x8_t v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = v5[2];
      unint64_t v9 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v9 >> 47) ^ v9);
      unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v7)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
          if (v11 >= v7) {
            unint64_t v2 = v11 % v7;
          }
        }
        else
        {
          unint64_t v2 = v11 & (v7 - 1);
        }
        uint8x8_t v13 = *(void **)(*(void *)a1 + 8 * v2);
        if (v13)
        {
          for (CFIndex i = (void *)*v13; i; CFIndex i = (void *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v11)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v7) {
                  v15 %= v7;
                }
              }
              else
              {
                v15 &= v7 - 1;
              }
              if (v15 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = operator new(0x20uLL);
      *unint64_t v16 = 0;
      v16[1] = v11;
      *((_OWORD *)v16 + 1) = *((_OWORD *)v5 + 1);
      float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        BOOL v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * v7);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v22);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v11 >= v7) {
            unint64_t v2 = v11 % v7;
          }
          else {
            unint64_t v2 = v11;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v11;
        }
      }
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * v2);
      if (v24)
      {
        *unint64_t v16 = *v24;
      }
      else
      {
        *unint64_t v16 = *v6;
        *uint8x8_t v6 = v16;
        *(void *)(v23 + 8 * v2) = v6;
        if (!*v16) {
          goto LABEL_40;
        }
        unint64_t v25 = *(void *)(*v16 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7) {
            v25 %= v7;
          }
        }
        else
        {
          v25 &= v7 - 1;
        }
        uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
      }
      *uint64_t v24 = v16;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      unint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2150BB430(_Unwind_Exception *a1)
{
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::comparisonUsingMultiSortDescriptors@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_26C5C94F0;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

void *std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore35comparisonUsingMultiSortDescriptorsERKNSt3__16vectorINS_19MultiSortDescriptorENS0_9allocatorIS2_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::operator()(uint64_t a1, mlcore::PropertyCache *a2, mlcore::PropertyCache *a3)
{
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  if (v3[1] == *v3) {
    __assert_rtn("_compareEntitiesWithMultiSortDescriptors", "SortDescriptor.cpp", 93, "sortDescriptors.size()");
  }
  while (2)
  {
    std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v15, v4 + 8);
    unint64_t v7 = v16;
    if (!v16)
    {
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
      int v11 = -1;
      goto LABEL_27;
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      unint64_t v10 = (mlcore::ModelPropertyBase *)v7[3];
      if (v8)
      {
        if (!v9) {
          goto LABEL_12;
        }
      }
      else
      {
        if (mlcore::PropertyCache::hasValueForProperty(a2, (mlcore::ModelPropertyBase *)v7[3])) {
          uint64_t v8 = (uint64_t)v10;
        }
        else {
          uint64_t v8 = 0;
        }
        if (!v9)
        {
LABEL_12:
          if (mlcore::PropertyCache::hasValueForProperty(a3, v10)) {
            uint64_t v9 = (uint64_t)v10;
          }
          else {
            uint64_t v9 = 0;
          }
          if (!v8) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
      if (!v8) {
        goto LABEL_17;
      }
LABEL_16:
      if (v9)
      {
        std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
LABEL_26:
        int v11 = mlcore::ModelPropertyBase::compareCongruentPropertyValuesFromCaches(v8, (uint64_t)a2, v9, (uint64_t)a3);
        goto LABEL_27;
      }
LABEL_17:
      unint64_t v7 = (uint64_t **)*v7;
    }
    while (v7);
    std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
    if (v9) {
      int v11 = 1;
    }
    else {
      int v11 = -1;
    }
    if (v8 && v9) {
      goto LABEL_26;
    }
LABEL_27:
    if (*(_DWORD *)(v4 + 48) == 1) {
      unsigned int v12 = -v11;
    }
    else {
      unsigned int v12 = v11;
    }
    v4 += 56;
    if (v12) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v4 == v3[1];
    }
    if (!v13) {
      continue;
    }
    return v12 >> 31;
  }
}

void sub_2150BB61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5C94F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26C5C94F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::~__func()
{
}

uint64_t AppendCStringMax(char *a1, char *__s, unsigned int a3)
{
  if (!__s) {
    return 0;
  }
  uint64_t v3 = a1;
  if (!a1) {
    return strlen(__s);
  }
  uint64_t result = a3 - 1;
  if (a3 <= 1) {
    return strlen(__s);
  }
  uint64_t v5 = 0;
  while (__s[v5])
  {
    if (result == ++v5) {
      return result;
    }
  }
  do
  {
    char v6 = *v3;
    if (!*v3)
    {
      unint64_t v7 = &__s[v5];
      uint64_t result = v5;
      goto LABEL_15;
    }
    ++v3;
    __s[v5++] = v6;
  }
  while (result != v5);
  unint64_t v7 = &__s[v5];
LABEL_15:
  *unint64_t v7 = 0;
  return result;
}

uint64_t CopyCStringMax(unsigned char *a1, unsigned char *a2, int a3)
{
  LOBYTE(v3) = *a1;
  if (*a1) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 0;
    unint64_t v7 = a1 + 1;
    do
    {
      a2[result] = v3;
      int v3 = v7[result];
      int v8 = result++;
      if (v3) {
        BOOL v9 = a3 - 1 == v8;
      }
      else {
        BOOL v9 = 1;
      }
    }
    while (!v9);
    a2 += result;
  }
  *a2 = 0;
  return result;
}

uint64_t CreateStringCache(uint64_t a1, int a2)
{
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 44) = 512;
  return 0;
}

uint64_t DeleteStringCache(uint64_t a1)
{
  if (!a1) {
    return 4294967246;
  }
  uint64_t v2 = *(void ***)(a1 + 8);
  if (v2) {
    MemDisposeHandle(v2);
  }
  int v3 = *(void ***)(a1 + 16);
  if (v3) {
    MemDisposeHandle(v3);
  }
  BOOL v4 = *(void ***)(a1 + 24);
  if (v4) {
    MemDisposeHandle(v4);
  }
  uint64_t result = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t AddStringToStringCache(int *a1, void *__s1, int a3, int a4, void *a5)
{
  if (a5) {
    *a5 = 3203383023;
  }
  if (a1)
  {
    if (!a4) {
      return 0;
    }
    int v7 = *a1;
    int v61 = a4;
    if (*a1)
    {
      int v8 = (void *)*((void *)a1 + 1);
      if (v8)
      {
        BOOL v9 = (uint64_t *)*((void *)a1 + 3);
        if (v9)
        {
          uint64_t v10 = a1[8];
          if (v10)
          {
            uint64_t v11 = 0;
            uint64_t v12 = *v9;
            uint64_t v13 = **((void **)a1 + 2);
            size_t v14 = a4;
            unint64_t v15 = (int *)(*v8 + 4);
            while (1)
            {
              uint64_t v16 = *(v15 - 1);
              if ((v16 & 0x80000000) == 0 && *v15 >= 1 && *v15 == a4)
              {
                float v18 = __s1;
                int v19 = memcmp(__s1, (const void *)(v12 + v16), v14);
                __s1 = v18;
                a4 = v61;
                if (!v19) {
                  break;
                }
              }
              ++v11;
              v15 += 2;
              if (v10 == v11) {
                goto LABEL_18;
              }
            }
            ++*(_DWORD *)(v13 + 4 * v11);
            if (a5)
            {
              uint64_t v45 = 0;
              *a5 = v11 + 1;
              return v45;
            }
            return 0;
          }
        }
      }
    }
LABEL_18:
    std::string v57 = __s1;
    unint64_t v20 = (uint64_t *)(a1 + 6);
    unint64_t v21 = (void **)(a1 + 2);
    size_t v22 = (void ***)(a1 + 4);
    while (1)
    {
      unsigned int v23 = a1[13];
      if (v23)
      {
        uint64_t v24 = *v20;
        if (*v20) {
          LODWORD(v24) = *(_DWORD *)(v24 + 8) - a1[10];
        }
        if (v24 / v23 <= 5)
        {
          unsigned int v25 = a1[11];
          if (v24 > v25)
          {
            std::string::size_type v26 = (void **)MemNewHandle(v24 - v23 + v25);
            if (v26)
            {
              if (*v21)
              {
                CFStringRef v27 = v26;
                long long v60 = v22;
                unsigned int v28 = a1[8];
                if (v28)
                {
                  int v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = (char *)*v26;
                  std::string v32 = (_DWORD *)(**v21 + 4);
                  do
                  {
                    uint64_t v33 = *(v32 - 1);
                    if ((v33 & 0x80000000) != 0)
                    {
                      if (v33 == -2147483647)
                      {
                        *(v32 - 1) = 0x80000000;
                        _DWORD *v32 = a1[9];
                        a1[9] = v30 + 1;
                      }
                    }
                    else
                    {
                      size_t v34 = *v32;
                      if ((int)v34 >= 1)
                      {
                        memcpy(v31, (const void *)(**((void **)a1 + 3) + v33), v34);
                        *(v32 - 1) = v29;
                        uint64_t v35 = (int)*v32;
                        v29 += v35;
                        v31 += v35;
                        unsigned int v28 = a1[8];
                      }
                    }
                    ++v30;
                    v32 += 2;
                  }
                  while (v30 < v28);
                }
                MemDisposeHandle(*((void ***)a1 + 3));
                *((void *)a1 + 3) = v27;
                a1[13] = 0;
                a1[10] = a1[11];
                size_t v22 = v60;
              }
            }
          }
        }
      }
      uint64_t v36 = a1[9];
      if (v36)
      {
        if (*v21) {
          break;
        }
      }
      uint64_t v37 = MemResizeHandle((void ***)a1 + 1, 400);
      if (v37) {
        return v37;
      }
      if (v7)
      {
        uint64_t v38 = MemResizeHandle(v22, 200);
        if (v38)
        {
          uint64_t v45 = v38;
          MemResizeHandle((void ***)a1 + 1, -400);
          return v45;
        }
      }
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a1[8];
      uint64_t v42 = **((void **)a1 + 1) + 8 * v41;
      int v43 = v41 + 1;
      uint64_t v44 = v42;
      do
      {
        *(_DWORD *)(v42 + v39) = 0x80000000;
        if (v40) {
          *(_DWORD *)(v40 + 4) = v43;
        }
        uint64_t v40 = v44;
        v44 += 8;
        v39 += 8;
        ++v43;
      }
      while (v39 != 400);
      a1[8] = v41 + 50;
      a1[9] = v41 + 1;
    }
    uint64_t v46 = v36 - 1;
    int v47 = (int *)(**v21 + 8 * (v36 - 1));
    a1[9] = v47[1];
    uint64_t v48 = *((void *)a1 + 3);
    if (v48)
    {
      int v49 = a1[10];
      int v50 = *(_DWORD *)(v48 + 8) - v49;
    }
    else
    {
      int v50 = 0;
      int v49 = a1[10];
    }
    int v51 = v61;
    if (v49 < v61)
    {
      int v52 = a1[11];
      if (v52 <= v61) {
        int v53 = v61;
      }
      else {
        int v53 = a1[11];
      }
      if (!(v52 >> 13)) {
        a1[11] = 2 * v52;
      }
      uint64_t v54 = MemResizeHandle((void ***)a1 + 3, v53);
      int v47 = (int *)(**v21 + 8 * (v36 - 1));
      if (v54)
      {
        uint64_t v45 = v54;
        int v55 = a1[9];
        *int v47 = 0x80000000;
        v47[1] = v55;
        a1[9] = v36;
        return v45;
      }
      int v49 = a1[10] + v53;
      a1[10] = v49;
      uint64_t v48 = *((void *)a1 + 3);
      int v51 = v61;
      uint64_t v46 = v36 - 1;
    }
    if (v48)
    {
      memcpy((void *)(*(void *)v48 + v50), v57, a3);
      int v51 = v61;
      int v49 = a1[10];
    }
    a1[10] = v49 - v51;
    *int v47 = v50;
    v47[1] = v51;
    if (a5) {
      *a5 = v36;
    }
    if (v7)
    {
      uint64_t v45 = 0;
      ++*((_DWORD *)**v22 + v46);
      return v45;
    }
    return 0;
  }
  return 4294967246;
}

uint64_t DeleteStringCacheIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294967246;
  }
  if (a2 == 3203383023) {
    return 0;
  }
  if ((int)a2 >= 1 && *(_DWORD *)(a1 + 32) >= (int)a2)
  {
    if ((*(_DWORD *)a1 & 1) == 0)
    {
      uint64_t v3 = (a2 - 1);
LABEL_10:
      uint64_t v2 = 0;
      char v6 = (_DWORD *)(**(void **)(a1 + 8) + 8 * v3);
      *(_DWORD *)(a1 + 52) += v6[1];
      *char v6 = -2147483647;
      return v2;
    }
    uint64_t v4 = **(void **)(a1 + 16);
    uint64_t v3 = (a2 - 1);
    int v5 = *(_DWORD *)(v4 + 4 * v3) - 1;
    *(_DWORD *)(v4 + 4 * v3) = v5;
    if (!v5) {
      goto LABEL_10;
    }
    return 0;
  }
  return 4294967246;
}

uint64_t GetStringCachePtr(uint64_t a1, int a2, void *a3, int *a4)
{
  if (a4) {
    *a4 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (!a1) {
    return 4294967246;
  }
  if (a2 == -1091584273) {
    return 0;
  }
  if (a2 < 1) {
    return 4294967246;
  }
  if (*(_DWORD *)(a1 + 32) < a2) {
    return 4294967246;
  }
  uint64_t v5 = **(void **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 8 * (a2 - 1));
  if ((v6 & 0x80000000) != 0) {
    return 4294967246;
  }
  int v7 = *(_DWORD *)(v5 + 8 * (a2 - 1) + 4);
  if (v7 < 1) {
    return 4294967246;
  }
  if (a3) {
    *a3 = **(void **)(a1 + 24) + v6;
  }
  if (!a4) {
    return 0;
  }
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t GetStringCacheString(uint64_t a1, int a2, void *__dst, int *a4, int a5)
{
  if (a4) {
    *a4 = 0;
  }
  if (!a1) {
    return 4294967246;
  }
  if (a2 == -1091584273) {
    return 0;
  }
  if (a2 < 1 || *(_DWORD *)(a1 + 32) < a2) {
    return 4294967246;
  }
  uint64_t v7 = **(void **)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 8 * (a2 - 1));
  if ((v8 & 0x80000000) != 0 || (int v9 = *(_DWORD *)(v7 + 8 * (a2 - 1) + 4), v9 < 1))
  {
    int v10 = 0;
    uint64_t result = 4294967246;
  }
  else
  {
    if (v9 >= a5) {
      int v10 = a5;
    }
    else {
      int v10 = v9;
    }
    if (__dst) {
      memcpy(__dst, (const void *)(**(void **)(a1 + 24) + v8), v10);
    }
    uint64_t result = 0;
  }
  if (a4) {
    *a4 = v10;
  }
  return result;
}

unint64_t SubStringUnicode(char *a1, int a2, unsigned __int16 *a3, int a4, char a5)
{
  if (!a4) {
    return 0;
  }
  int v10 = *a3;
  if (a5) {
    int v10 = ToLowerCase(*a3);
  }
  if (!a2) {
    return 0;
  }
  int v11 = a2;
  uint64_t v12 = a1;
  uint64_t v13 = a1;
  while (1)
  {
    unsigned int v15 = *(unsigned __int16 *)v13;
    v13 += 2;
    uint64_t v14 = v15;
    if (a5) {
      LODWORD(v14) = ToLowerCase(v14);
    }
    if (v14 == v10)
    {
      uint64_t v16 = 1;
      while (v11 != v16 && a4 != v16)
      {
        int v17 = *(unsigned __int16 *)&v12[2 * v16];
        if (a5)
        {
          int v17 = ToLowerCase(*(unsigned __int16 *)&v12[2 * v16]);
          int v18 = ToLowerCase(a3[v16]);
        }
        else
        {
          int v18 = a3[v16];
        }
        ++v16;
        if (v17 != v18) {
          goto LABEL_18;
        }
      }
      if (a4 == v16) {
        return (unint64_t)(v13 - a1) >> 1;
      }
    }
LABEL_18:
    uint64_t v12 = v13;
    if (!--v11) {
      return 0;
    }
  }
}

uint64_t ToLowerCase(uint64_t result)
{
  if (result <= 0xDE)
  {
    if ((ToLowerCase_sInited & 1) == 0)
    {
      uint64_t v1 = 0;
      int64x2_t v2 = (int64x2_t)xmmword_21511C690;
      int64x2_t v3 = (int64x2_t)xmmword_21511C6A0;
      int16x4_t v4 = (int16x4_t)0x3000200010000;
      int32x4_t v5 = (int32x4_t)xmmword_21511C6B0;
      uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(0xDFuLL);
      uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(0xBFuLL);
      int64x2_t v8 = vdupq_n_s64(0xD7uLL);
      int64x2_t v9 = vdupq_n_s64(4uLL);
      v10.i64[0] = 0x4000000040;
      v10.i64[1] = 0x4000000040;
      v11.i64[0] = 0x1A0000001ALL;
      v11.i64[1] = 0x1A0000001ALL;
      v12.i64[0] = 0x400000004;
      v12.i64[1] = 0x400000004;
      int16x4_t v13 = (int16x4_t)0x3000200010000;
      do
      {
        int8x16_t v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v6, (uint64x2_t)v3), (int32x4_t)vcgtq_u64(v6, (uint64x2_t)v2));
        uint32x4_t v15 = (uint32x4_t)vaddq_s32(v5, v10);
        int8x16_t v16 = (int8x16_t)vcgtq_u32(v11, v15);
        int8x8_t v17 = (int8x8_t)vmovn_s32((int32x4_t)vbicq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v3, v7), (int32x4_t)vcgtq_u64((uint64x2_t)v2, v7)), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v3, v8), (int32x4_t)vceqq_s64(v2, v8))));
        *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vcgeq_u32(v15, v11)));
        *(int8x8_t *)v16.i8 = vorr_s8(vand_s8(*(int8x8_t *)v15.i8, v17), (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(v14, v16)));
        *(int8x8_t *)v15.i8 = vbic_s8(*(int8x8_t *)v15.i8, v17);
        int8x8_t v18 = vbsl_s8((int8x8_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v15.i8, 0xFuLL)), (int8x8_t)v4, (int8x8_t)vadd_s16(v13, (int16x4_t)0x20002000200020));
        int8x8_t v19 = vorr_s8(*(int8x8_t *)v16.i8, *(int8x8_t *)v15.i8);
        if (v19.i8[0]) {
          ToLowerCase_table[v1] = v18.i16[0];
        }
        if (v19.i8[2]) {
          ToLowerCase_table[v1 + 1] = v18.i16[1];
        }
        if (v19.i8[4]) {
          ToLowerCase_table[v1 + 2] = v18.i16[2];
        }
        if (v19.i8[6]) {
          ToLowerCase_table[v1 + 3] = v18.i16[3];
        }
        int64x2_t v2 = vaddq_s64(v2, v9);
        int64x2_t v3 = vaddq_s64(v3, v9);
        int32x4_t v5 = vaddq_s32(v5, v12);
        int16x4_t v4 = vadd_s16(v4, (int16x4_t)0x4000400040004);
        int16x4_t v13 = vadd_s16(v13, (int16x4_t)0x4000400040004);
        v1 += 4;
      }
      while (v1 != 224);
      ToLowerCase_sInited = 1;
    }
    return (unsigned __int16)ToLowerCase_table[result];
  }
  return result;
}

BOOL IsSubStringUnicode(char *a1, int a2, unsigned __int16 *a3, int a4, char a5)
{
  return SubStringUnicode(a1, a2, a3, a4, a5) != 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::ContainerItemPersonPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ContainerItemPersonPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    int16x4_t v4 = &v2;
    int64x2_t v3 = &v4;
    std::__call_once(&mlcore::ContainerItemPersonPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_2150BC2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::entityType()
{
  return 11;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  int64x2_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)int64x2_t v8 = &unk_26C5CABE8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C7A28;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int64x2_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150BC68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CABE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CABE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::ContainerItemPerson::~ContainerItemPerson(mlcore::ContainerItemPerson *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::ContainerItemPersonPropertyContainerItemPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::once, memory_order_acquire) != -1)
  {
    int16x4_t v4 = &v2;
    int64x2_t v3 = &v4;
    std::__call_once(&mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::$_0 &&>>()
{
}

void sub_2150BCA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ContainerItemPerson::containerItemPersistentID(mlcore::ContainerItemPerson *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ContainerItemPersonPropertyContainerItemPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::ContainerItemPerson::setContainerItemPersistentID(mlcore::ContainerItemPerson *this, uint64_t a2)
{
  unint64_t v5 = mlcore::ContainerItemPersonPropertyContainerItemPersistentID(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::ContainerItemPerson::personPersistentID(mlcore::ContainerItemPerson *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ContainerItemPersonPropertyPersonPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::ContainerItemPerson::setPersonItemPersistentID(mlcore::ContainerItemPerson *this, uint64_t a2)
{
  unint64_t v5 = mlcore::ContainerItemPersonPropertyPersonPersistentID(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::ItemArtist::~ItemArtist(mlcore::ItemArtist *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::ItemArtistPropertySortName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertySortName(void)::once, memory_order_acquire) != -1)
  {
    int16x4_t v4 = &v2;
    int64x2_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertySortName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortName(void)::$_0 &&>>()
{
}

void sub_2150BCEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertySortSeriesName(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertySortSeriesName(void)::once, memory_order_acquire) != -1)
  {
    int16x4_t v4 = &v2;
    int64x2_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertySortSeriesName(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortSeriesName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySortSeriesName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortSeriesName(void)::$_0 &&>>()
{
}

void sub_2150BD188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertyGroupingKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ItemArtistPropertyGroupingKey(void)::once, memory_order_acquire) != -1)
  {
    int16x4_t v4 = &v2;
    int64x2_t v3 = &v4;
    std::__call_once(&mlcore::ItemArtistPropertyGroupingKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyGroupingKey(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyGroupingKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyGroupingKey(void)::$_0 &&>>()
{
}

void sub_2150BD41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertyOrderSection(mlcore *this)
{
  uint64_t v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  uint64_t v2 = mlcore::ItemPropertyArtistOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

double mlcore::ItemArtist::ItemArtist(mlcore::ItemArtist *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C3B80;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C3B80;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  int64x2_t v3 = (mlcore *)mlcore::ItemArtistPropertyOrder(a1);
  if (v3 != a2) {
    return 0;
  }
  return mlcore::ItemArtistPropertyOrderSection(v3);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::entityType()
{
  return 2;
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mediaplatform::UnicodeSortKey::~UnicodeSortKey(mediaplatform::UnicodeSortKey *this)
{
  *(void *)this = &unk_26C5BEBD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2166B26F0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_26C5BEBD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_26C5BEBD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void mediaplatform::UnicodeCollator::~UnicodeCollator(mediaplatform::UnicodeCollator *this)
{
  mediaplatform::UnicodeCollator::~UnicodeCollator(this);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5BEC20;
  if (*((void *)this + 1))
  {
    ucol_close();
    *((void *)this + 1) = 0;
  }
}

void mediaplatform::UnicodeTransliterator::~UnicodeTransliterator(mediaplatform::UnicodeTransliterator *this)
{
  mediaplatform::UnicodeTransliterator::~UnicodeTransliterator(this);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5BF0C8;
  if (*((void *)this + 4)) {
    utrans_close();
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *mediaplatform::LocaleIdentifierWithOption@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v6 = 0u;
  if (*(char *)(a1 + 23) >= 0) {
    int64x2_t v3 = (const char *)a1;
  }
  else {
    int64x2_t v3 = *(const char **)a1;
  }
  strlcpy(__dst, v3, 0x101uLL);
  uloc_setKeywordValue();
  return std::string::basic_string[abi:ne180100]<0>(a2, __dst);
}

mediaplatform::UnicodeSortKey *mediaplatform::UnicodeSortKey::UnicodeSortKey(mediaplatform::UnicodeSortKey *this, const unsigned __int8 *a2, unsigned int a3)
{
  std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(&v5, a2, a3);
  mediaplatform::UnicodeSortKey::UnicodeSortKey(this, (uint64_t *)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return this;
}

{
  mediaplatform::Data *v5;
  std::__shared_weak_count *v6;

  std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(&v5, a2, a3);
  mediaplatform::UnicodeSortKey::UnicodeSortKey(this, (uint64_t *)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return this;
}

mediaplatform::Data *std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(mediaplatform::Data **a1, const void *a2, unsigned int a3)
{
  long long v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_26C5C9EC8;
  double result = mediaplatform::Data::Data((mediaplatform::Data *)(v6 + 3), a2, a3, 1);
  *a1 = result;
  a1[1] = (mediaplatform::Data *)v6;
  return result;
}

void sub_2150BDA54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *mediaplatform::UnicodeSortKey::UnicodeSortKey(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C5BEBD8;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    unint64_t v5 = (std::__shared_weak_count *)a1[2];
    a1[1] = v3;
    a1[2] = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::Data>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mediaplatform::UnicodeSortKey::data@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mediaplatform::UnicodeSortKey::compare(mediaplatform::UnicodeSortKey *this, const mediaplatform::UnicodeSortKey *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = *((void *)this + 1);
  size_t v6 = *(void *)(v4 + 8);
  long long v7 = *(const void **)(v4 + 24);
  size_t v8 = *(void *)(v5 + 8);
  if (v6 >= v8) {
    size_t v9 = *(void *)(v5 + 8);
  }
  else {
    size_t v9 = v6;
  }
  if (v6 < v8) {
    int v10 = 1;
  }
  else {
    int v10 = -1;
  }
  LODWORD(result) = memcmp(*(const void **)(v5 + 24), v7, v9);
  if (v8 == v6) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = v10;
  }
  if (result) {
    return result;
  }
  else {
    return v12;
  }
}

mediaplatform::UnicodeCollator *mediaplatform::UnicodeCollator::UnicodeCollator(mediaplatform::UnicodeCollator *this)
{
  *(void *)this = &unk_26C5BEC20;
  uint64_t v2 = ucol_open();
  *((void *)this + 1) = v2;
  if (!v2)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "failed to create default collator");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::UnicodeCollator::setDefaultAttributes(this);
  return this;
}

void sub_2150BDD48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::UnicodeCollator::setDefaultAttributes(mediaplatform::UnicodeCollator *this)
{
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  return mediaplatform::UnicodeCollator::setAttribute();
}

uint64_t mediaplatform::UnicodeCollator::setAttribute()
{
  return ucol_setAttribute();
}

void sub_2150BDEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mediaplatform::FormatString<UColAttribute,UColAttributeValue,UErrorCode>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a4;
  v4[1] = a3;
  uint64_t v4[2] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>((std::string *)"failed to set collator attribute. attr=%d, value=%d, icuStatus=%d", a1, 0, v4);
}

void sub_2150BDF2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  size_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    int v55 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    int v55 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    int v55 = v9 + 2;
    int v40 = v9[2];
    if ((v40 - 48) > 9)
    {
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = v9 + 3;
      do
      {
        int v43 = v42;
        int v55 = v42;
        uint64_t v41 = (v40 - 48) + 10 * v41;
        ++v42;
        int v45 = *v43;
        uint64_t v44 = (unsigned __int8 *)(v43 - 1);
        int v40 = v45;
      }
      while ((v45 - 58) >= 0xFFFFFFF6);
      int v55 = (char *)(v44 + 2);
      if (*(v42 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(v41);
      }
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v48, (const char **)&v55);
  unsigned int v12 = v55;
  if (v49)
  {
    if (v49 != 1)
    {
      if (v49 != 2) {
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>>();
      }
      mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)&v60, *a4, (uint64_t)&v48);
      unint64_t v13 = v63;
      if ((v63 & 0x80u) != 0) {
        unint64_t v13 = v61;
      }
      size_t v14 = v51;
      if (v51 <= v13) {
        size_t v14 = v13;
      }
      if (v50) {
        unint64_t v13 = v14;
      }
      mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v13 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v15 = (char *)a2;
      }
      else {
        long long v15 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      goto LABEL_67;
    }
    uint64_t v57 = 0;
    long long v56 = 0uLL;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v60);
    int v16 = v60;
    if (v50) {
      *(void *)&v64[*((void *)v60 - 3)] = v51;
    }
    if (v52) {
      *(void *)&v62[*(v16 - 3)] = v53;
    }
    long long v17 = (const std::ios_base *)((char *)&v60 + *(v16 - 3));
    std::ios_base::fmtflags v18 = v54;
    if (v17[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v17);
      long long v19 = std::locale::use_facet(v58, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
      std::locale::~locale(v58);
    }
    v17[1].__fmtflags_ = v18;
    std::ostream::operator<<();
    std::stringbuf::str();
    long long v56 = *(_OWORD *)&v58[0].__locale_;
    uint64_t v57 = v59;
    long long v60 = (void *)*MEMORY[0x263F8C2C8];
    *(void **)((char *)&v60 + *((void *)v60 - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v61 = MEMORY[0x263F8C318] + 16;
    if (v66 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166B2650](&v67);
    int v47 = SHIBYTE(v57);
    if (v57 >= 0) {
      size_t v20 = HIBYTE(v57);
    }
    else {
      size_t v20 = *((void *)&v56 + 1);
    }
    size_t v21 = v51;
    if (v51 <= v20) {
      size_t v21 = v20;
    }
    if (v50) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v22 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v23 = a2;
    }
    else {
      unsigned int v23 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = (char *)v23 + i;
    if (v50 && (v25 = v51, unint64_t v26 = v51 - v20, v51 > v20))
    {
      if (v48)
      {
        if (v48 == 1)
        {
          unint64_t v33 = v26 >> 1;
          if (v26 >= 2)
          {
            if (v33 <= 1) {
              uint64_t v34 = 1;
            }
            else {
              uint64_t v34 = v26 >> 1;
            }
            do
            {
              *v24++ = v54;
              --v34;
            }
            while (v34);
          }
          if (v20)
          {
            if (v47 >= 0) {
              uint64_t v35 = &v56;
            }
            else {
              uint64_t v35 = (long long *)v56;
            }
            memmove(v24, v35, v20);
          }
          if (v26 != v33)
          {
            unint64_t v36 = v26 - (v26 >> 1);
            uint64_t v37 = &v24[v20];
            if (v36 <= 1) {
              unint64_t v36 = 1;
            }
            uint64_t v38 = -(uint64_t)v36;
            do
              *v37++ = v54;
            while (!__CFADD__(v38++, 1));
          }
        }
        else if (v48 == 2)
        {
          if (v51 != v20)
          {
            do
            {
              *v24++ = v54;
              --v26;
            }
            while (v26);
          }
          goto LABEL_51;
        }
      }
      else
      {
        if (v20)
        {
          if (v47 >= 0) {
            uint64_t v31 = &v56;
          }
          else {
            uint64_t v31 = (long long *)v56;
          }
          memmove((char *)v23 + i, v31, v20);
        }
        if (v25 != v20)
        {
          size_t v32 = (size_t)v23 + v20;
          do
          {
            *(unsigned char *)(v32 + i) = v54;
            ++v32;
            --v26;
          }
          while (v26);
        }
      }
    }
    else
    {
LABEL_51:
      if (v20)
      {
        if (v47 >= 0) {
          CFStringRef v27 = &v56;
        }
        else {
          CFStringRef v27 = (long long *)v56;
        }
        memmove(v24, v27, v20);
      }
    }
    if (SHIBYTE(v57) < 0)
    {
      unsigned int v28 = (void *)v56;
      goto LABEL_69;
    }
  }
  else
  {
    mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter((uint64_t)&v60, a4[2], (uint64_t)&v48);
    unint64_t v29 = v63;
    if ((v63 & 0x80u) != 0) {
      unint64_t v29 = v61;
    }
    size_t v30 = v51;
    if (v51 <= v29) {
      size_t v30 = v29;
    }
    if (v50) {
      unint64_t v29 = v30;
    }
    mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v29 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = (char *)a2;
    }
    else {
      long long v15 = (char *)a2->__r_.__value_.__r.__words[0];
    }
LABEL_67:
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(&v48, &v15[i], (const void **)&v60);
    if ((char)v63 < 0)
    {
      unsigned int v28 = v60;
LABEL_69:
      operator delete(v28);
    }
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150BE5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

void mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  if (!a1)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(a1);
}

void sub_2150BE680(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v5 = v12[0];
  if (*(unsigned char *)(a3 + 16)) {
    *(void *)((char *)&v12[3] + *(void *)(v12[0] - 24)) = *(void *)(a3 + 24);
  }
  if (*(unsigned char *)(a3 + 32)) {
    *(void *)((char *)&v12[2] + *(void *)(v5 - 24)) = *(void *)(a3 + 40);
  }
  size_t v6 = (const std::ios_base *)((char *)v12 + *(void *)(v5 - 24));
  std::ios_base::fmtflags v7 = *(char *)(a3 + 52);
  if (v6[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v6);
    char v8 = std::locale::use_facet((const std::locale *)&v10, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale((std::locale *)&v10);
  }
  v6[1].__fmtflags_ = v7;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = v10;
  *(void *)(a1 + 16) = v11;
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166B2650](&v14);
  return a1;
}

void sub_2150BE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a12);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

unsigned char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(unsigned char *result, char *__dst, const void **a3)
{
  size_t v4 = *((unsigned __int8 *)a3 + 23);
  char v5 = v4;
  size_t v6 = (size_t)a3[1];
  if ((v4 & 0x80u) == 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (!result[16] || (v8 = result, unint64_t v9 = *((void *)result + 3), v10 = v9 - v7, v9 <= v7))
  {
    if (!v7) {
      return result;
    }
    if ((v4 & 0x80u) == 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = *a3;
    }
    char v13 = __dst;
    size_t v14 = v7;
    goto LABEL_24;
  }
  int v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 == 1)
    {
      unint64_t v17 = v10 >> 1;
      if (v10 >= 2)
      {
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10 >> 1;
        }
        do
        {
          *__dst++ = result[52];
          --v18;
        }
        while (v18);
        size_t v4 = *((unsigned __int8 *)a3 + 23);
        size_t v6 = (size_t)a3[1];
        char v5 = *((unsigned char *)a3 + 23);
      }
      if (v5 < 0) {
        size_t v4 = v6;
      }
      if (v4)
      {
        if (v5 >= 0) {
          long long v19 = a3;
        }
        else {
          long long v19 = *a3;
        }
        uint64_t result = memmove(__dst, v19, v4);
      }
      if (v10 != v17)
      {
        unint64_t v20 = v10 - (v10 >> 1);
        size_t v21 = &__dst[v7];
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        uint64_t v22 = -(uint64_t)v20;
        do
          *v21++ = v8[52];
        while (!__CFADD__(v22++, 1));
      }
    }
    else if (v11 == 2)
    {
      if (v9 != v7)
      {
        do
        {
          *__dst++ = result[52];
          --v10;
        }
        while (v10);
        size_t v4 = *((unsigned __int8 *)a3 + 23);
        size_t v6 = (size_t)a3[1];
        char v5 = *((unsigned char *)a3 + 23);
      }
      if (v5 < 0) {
        size_t v4 = v6;
      }
      if (v4)
      {
        if (v5 >= 0) {
          uint64_t v12 = a3;
        }
        else {
          uint64_t v12 = *a3;
        }
        char v13 = __dst;
        size_t v14 = v4;
LABEL_24:
        return memmove(v13, v12, v14);
      }
    }
  }
  else
  {
    if (v7)
    {
      if ((v4 & 0x80u) == 0) {
        long long v15 = a3;
      }
      else {
        long long v15 = *a3;
      }
      uint64_t result = memmove(__dst, v15, v7);
    }
    if (v9 != v7)
    {
      int v16 = &__dst[v7];
      do
      {
        *v16++ = v8[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BEB1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v5 = v12[0];
  if (*(unsigned char *)(a3 + 16)) {
    *(void *)((char *)&v12[3] + *(void *)(v12[0] - 24)) = *(void *)(a3 + 24);
  }
  if (*(unsigned char *)(a3 + 32)) {
    *(void *)((char *)&v12[2] + *(void *)(v5 - 24)) = *(void *)(a3 + 40);
  }
  size_t v6 = (const std::ios_base *)((char *)v12 + *(void *)(v5 - 24));
  std::ios_base::fmtflags v7 = *(char *)(a3 + 52);
  if (v6[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v6);
    char v8 = std::locale::use_facet((const std::locale *)&v10, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale((std::locale *)&v10);
  }
  v6[1].__fmtflags_ = v7;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = v10;
  *(void *)(a1 + 16) = v11;
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166B2650](&v14);
  return a1;
}

void sub_2150BED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a12);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  if (a1 == 1)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(a1);
}

void sub_2150BEE08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  if (a1 == 2)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>();
}

void sub_2150BEE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BEECC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mediaplatform::UnicodeCollator *mediaplatform::UnicodeCollator::UnicodeCollator(mediaplatform::UnicodeCollator *a1)
{
  *(void *)a1 = &unk_26C5BEC20;
  int v6 = 0;
  uint64_t v2 = ucol_open();
  *((void *)a1 + 1) = v2;
  if (!v2)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::UnicodeCollator::setDefaultAttributes(a1);
  return a1;
}

void sub_2150BEFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t mediaplatform::UnicodeCollator::getAttribute()
{
  return ucol_getAttribute();
}

void sub_2150BF090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void mediaplatform::FormatString<UColAttribute,UErrorCode>(std::string *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UColAttribute,UErrorCode>((std::string *)"failed to get collator attribute. attr=%d, icuStatus=%d", a1, 0, v3);
}

void sub_2150BF114(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    unint64_t v29 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    unint64_t v29 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    unint64_t v29 = v9 + 2;
    int v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = v9 + 3;
      do
      {
        size_t v21 = v20;
        unint64_t v29 = v20;
        uint64_t v19 = (v18 - 48) + 10 * v19;
        ++v20;
        int v23 = *v21;
        uint64_t v22 = (unsigned __int8 *)(v21 - 1);
        int v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      unint64_t v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(v19);
      }
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  uint64_t v12 = v29;
  if (v26)
  {
    if (v26 != 1) {
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>>();
    }
    mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)&__p, *a4, (uint64_t)v25);
    unint64_t v13 = v32;
    if ((v32 & 0x80u) != 0) {
      unint64_t v13 = v31;
    }
    unint64_t v14 = v28;
    if (v28 <= v13) {
      unint64_t v14 = v13;
    }
    if (v27) {
      unint64_t v13 = v14;
    }
    mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(v12, a2, v13 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = (char *)a2;
    }
    else {
      int v15 = (char *)a2->__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter((uint64_t)&__p, a4[1], (uint64_t)v25);
    unint64_t v16 = v32;
    if ((v32 & 0x80u) != 0) {
      unint64_t v16 = v31;
    }
    unint64_t v17 = v28;
    if (v28 <= v16) {
      unint64_t v17 = v16;
    }
    if (v27) {
      unint64_t v16 = v17;
    }
    mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(v12, a2, v16 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = (char *)a2;
    }
    else {
      int v15 = (char *)a2->__r_.__value_.__r.__words[0];
    }
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(v25, &v15[i], (const void **)&__p);
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150BF40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(uint64_t a1)
{
  if (!a1)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(a1);
}

void sub_2150BF490(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BF4EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(uint64_t a1)
{
  if (a1 == 1)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<UColAttribute,UErrorCode>();
}

void sub_2150BF554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<UColAttribute,UErrorCode>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BF5B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::UnicodeCollator::setStrength(uint64_t a1)
{
  return MEMORY[0x270F996D8](*(void *)(a1 + 8));
}

uint64_t mediaplatform::UnicodeCollator::strength(mediaplatform::UnicodeCollator *this)
{
  return MEMORY[0x270F996B0](*((void *)this + 1));
}

__n128 mediaplatform::UnicodeCollator::versionData@<Q0>(__n128 *a1@<X8>)
{
  int __src = 0;
  ucol_getVersion();
  uint64_t v3 = operator new(0x40uLL);
  v3[1] = 0;
  uint64_t v3[2] = 0;
  *uint64_t v3 = &unk_26C5C9EC8;
  result.n128_u64[0] = (unint64_t)mediaplatform::Data::Data((mediaplatform::Data *)(v3 + 3), &__src, 4uLL, 1);
  result.n128_u64[1] = (unint64_t)v3;
  *a1 = result;
  return result;
}

void sub_2150BF654(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mediaplatform::UnicodeCollator::createSortKey(mediaplatform::UnicodeSortKey **a1@<X8>)
{
  int SortKey = ucol_getSortKey();
  uint64_t v3 = malloc_type_malloc(SortKey, 0x8BDBB4BCuLL);
  unsigned int v4 = ucol_getSortKey();
  if (!v4)
  {
    free(v3);
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "failed to generate sort key");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unsigned int v5 = v4;
  int v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_26C5C9720;
  *a1 = mediaplatform::UnicodeSortKey::UnicodeSortKey((mediaplatform::UnicodeSortKey *)(v6 + 3), (const unsigned __int8 *)v3, v5);
  a1[1] = (mediaplatform::UnicodeSortKey *)v6;
  free(v3);
}

void sub_2150BF7AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::UnicodeCollator::createGroupingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0)
  {
    MEMORY[0x270FA5388](a1);
    unsigned int v5 = (char *)&v10 - ((v6 + 20) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v2 = *v7;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unsigned int v5 = (char *)&v10 - v4;
  }
  uint64_t v13 = 0;
  int v11 = 0;
  uiter_setString(&iter, v2, v3);
  int SortKeyPart = ucol_nextSortKeyPart();
  if (v11 < 1)
  {
    memchr(v5, 1, SortKeyPart);
    operator new();
  }
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  mediaplatform::FormatString<UErrorCode>(&v10, (uint64_t)&v11);
  std::runtime_error::runtime_error(exception, &v10);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BFA60(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 169) < 0)
  {
    operator delete(*(void **)(v3 - 192));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void mediaplatform::FormatString<UErrorCode>(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UErrorCode>((std::string *)"failed to get next sort key part. icuStatus=%d", a1, 0, &v2);
}

void sub_2150BFB3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000215121467)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::FormatImplementation<UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    char v27 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    char v27 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    char v27 = v9 + 2;
    int v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = v9 + 3;
      do
      {
        uint64_t v19 = v18;
        char v27 = v18;
        uint64_t v17 = (v16 - 48) + 10 * v17;
        ++v18;
        int v21 = *v19;
        unint64_t v20 = (unsigned __int8 *)(v19 - 1);
        int v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      char v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,UErrorCode>::formatOptionsAtIndex<UErrorCode>(v17);
      }
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v23, (const char **)&v27);
  if (v24) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UErrorCode>>();
  }
  uint64_t v12 = v27;
  mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)__p, *a4, (uint64_t)v23);
  unint64_t v13 = v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  unint64_t v14 = v26;
  if (v26 <= v13) {
    unint64_t v14 = v13;
  }
  if (v25) {
    unint64_t v13 = v14;
  }
  mediaplatform::FormatImplementation<UErrorCode>(v12, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = (char *)a2;
  }
  else {
    int v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(v23, &v15[i], (const void **)__p);
  if ((char)v29 < 0) {
    operator delete(__p[0]);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150BFE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,UErrorCode>::formatOptionsAtIndex<UErrorCode>(uint64_t a1)
{
  if (!a1)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<UErrorCode>();
}

void sub_2150BFEEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UErrorCode>>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BFF48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<UErrorCode>()
{
  exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150BFFA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mediaplatform::UnicodeTransliterator::UnicodeTransliterator(void *a1, long long *a2)
{
  *a1 = &unk_26C5BF0C8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[4] = 0;
  return a1;
}

void mediaplatform::UnicodeTransliterator::transliterate(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)(a1 + 32))
  {
    mediaplatform::StringToUCharString(a1 + 8, &v22);
    UErrorCode v21 = U_ZERO_ERROR;
    *(void *)(a1 + 32) = utrans_openU();
    if (v21)
    {
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v12 = std::string::append(&v18, "'. err=");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      unint64_t v14 = u_errorName(v21);
      int v15 = std::string::append(&v19, v14);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v20);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (v23 < 0) {
      operator delete((void *)v22);
    }
  }
  UErrorCode v21 = U_ZERO_ERROR;
  int v6 = a2[23];
  if ((v6 & 0x80u) != 0) {
    int v6 = *((_DWORD *)a2 + 2);
  }
  std::ios_base::fmtflags v7 = malloc_type_malloc((10 * v6) | 1, 0xC4C371EEuLL);
  char v8 = v7;
  if (a2[23] < 0)
  {
    std::string v10 = *(char **)a2;
    uint64_t v9 = *((void *)a2 + 1);
  }
  else
  {
    uint64_t v9 = a2[23];
    std::string v10 = a2;
  }
  int v17 = v9;
  memcpy(v7, v10, 2 * v9);
  utrans_transUChars();
  std::wstring::basic_string[abi:ne180100](a3, v8, v17);
  free(v8);
}

void sub_2150C0300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      if (*(char *)(v32 - 57) < 0) {
        operator delete(*(void **)(v32 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void *mediaplatform::UCharStringToString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)pErrorCode = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    long long v4 = (const UChar *)a1;
  }
  else {
    long long v4 = *(const UChar **)a1;
  }
  if (v3 >= 0) {
    int32_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    int32_t v5 = *(_DWORD *)(a1 + 8);
  }
  u_strToUTF8(dest, 256, (int32_t *)&pErrorCode[1], v4, v5, pErrorCode);
  if (pErrorCode[0] != U_STRING_NOT_TERMINATED_WARNING)
  {
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR) {
      operator new[]();
    }
    if (pErrorCode[0])
    {
      exceptioint n = __cxa_allocate_exception(0x40uLL);
      int v11 = 37;
      std::to_string(&v9, pErrorCode[0]);
      char v8 = std::string::insert(&v9, 0, "u_strToUTF8: ");
      std::string v10 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v11, (long long *)&v10);
    }
  }
  return std::string::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
}

void sub_2150C0690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x2166B26D0](v21, 0x1000C8077774924);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *mediaplatform::WStringToUCharString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)pErrorCode = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    long long v4 = (const __int32 *)a1;
  }
  else {
    long long v4 = *(const __int32 **)a1;
  }
  if (v3 >= 0) {
    int32_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    int32_t v5 = *(_DWORD *)(a1 + 8);
  }
  u_strFromWCS(dest, 256, (int32_t *)&pErrorCode[1], v4, v5, pErrorCode);
  if (pErrorCode[0] != U_STRING_NOT_TERMINATED_WARNING)
  {
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
    {
      UErrorCode v11 = U_ZERO_ERROR;
      operator new[]();
    }
    if (pErrorCode[0])
    {
      exceptioint n = __cxa_allocate_exception(0x40uLL);
      UErrorCode v11 = U_STANDARD_ERROR_LIMIT|U_INTERNAL_PROGRAM_ERROR;
      std::to_string(&v9, pErrorCode[0]);
      char v8 = std::string::insert(&v9, 0, "u_strFromWCS: ");
      std::string v10 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, (int *)&v11, (long long *)&v10);
    }
  }
  return std::wstring::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
}

void sub_2150C09DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x2166B26D0](v21, 0x1000C80BDFB0063);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *mediaplatform::UCharStringToWString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)pErrorCode = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    long long v4 = (const UChar *)a1;
  }
  else {
    long long v4 = *(const UChar **)a1;
  }
  if (v3 >= 0) {
    int32_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    int32_t v5 = *(_DWORD *)(a1 + 8);
  }
  u_strToWCS(dest, 256, (int32_t *)&pErrorCode[1], v4, v5, pErrorCode);
  if (pErrorCode[0] != U_STRING_NOT_TERMINATED_WARNING)
  {
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
    {
      UErrorCode v11 = U_ZERO_ERROR;
      operator new[]();
    }
    if (pErrorCode[0])
    {
      exceptioint n = __cxa_allocate_exception(0x40uLL);
      UErrorCode v11 = U_STANDARD_ERROR_LIMIT|U_INTERNAL_PROGRAM_ERROR;
      std::to_string(&v9, pErrorCode[0]);
      char v8 = std::string::insert(&v9, 0, "u_strToWCS: ");
      std::string v10 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, (int *)&v11, (long long *)&v10);
    }
  }
  return std::wstring::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
}

void sub_2150C0D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x2166B26D0](v21, 0x1000C8052888210);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void mediaplatform::StringToWCharString()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_2150C0E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

void mediaplatform::WCharStringToString()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_2150C0F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL mediaplatform::UStringStartsWith(uint64_t *a1, uint64_t *a2, int a3)
{
  unint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = a2[1];
  }
  if (v4 <= v3)
  {
    if (v4)
    {
      BOOL v5 = 0;
      for (i = 0; i != v4; BOOL v5 = i >= v4)
      {
        if (*((char *)a1 + 23) >= 0) {
          std::string v10 = a1;
        }
        else {
          std::string v10 = (uint64_t *)*a1;
        }
        __int16 v11 = *((_WORD *)v10 + i);
        if (a3)
        {
          __int16 v11 = MEMORY[0x2166B2FF0](*((unsigned __int16 *)v10 + i));
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v12 = a2;
          }
          else {
            uint64_t v12 = (uint64_t *)*a2;
          }
          __int16 v13 = MEMORY[0x2166B2FF0](*((unsigned __int16 *)v12 + i));
        }
        else
        {
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v14 = a2;
          }
          else {
            uint64_t v14 = (uint64_t *)*a2;
          }
          __int16 v13 = *((_WORD *)v14 + i);
        }
        if (v13 != v11) {
          break;
        }
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

BOOL mediaplatform::UCharIsAlphaNumeric(mediaplatform *this)
{
  return u_isalnum((UChar32)this) != 0;
}

BOOL mediaplatform::UCharIsPunctuation(mediaplatform *this)
{
  return u_ispunct((UChar32)this) != 0;
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  BOOL v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150C1124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 336);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_2150C11B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::columnCount()
{
  return 6;
}

void mlcore::LyricsTable::~LyricsTable(void **this)
{
  *this = &unk_26C5C4018;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 48));
  *this = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *this = &unk_26C5C4018;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 48));
  *this = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,int,int,std::string,int,int>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C4018;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 384);
  *(void *)a1 = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C4018;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 384);
  *(void *)a1 = &unk_26C5C34E8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void mlcore::LyricsTable::persistentIDColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(void *)(a2 + 24) = *((void *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 107);
  *(void *)(a2 + 36) = *(void *)((char *)this + 420);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::LyricsTable::checksumColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 55), *((void *)this + 56));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    *(void *)(a2 + 24) = *((void *)this + 57);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 116);
  *(void *)(a2 + 36) = *(void *)((char *)this + 468);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::LyricsTable::pendingChecksumColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 61), *((void *)this + 62));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 488);
    *(void *)(a2 + 24) = *((void *)this + 63);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 128);
  *(void *)(a2 + 36) = *(void *)((char *)this + 516);
  *(void *)a2 = &unk_26C5C47C8;
}

uint64_t non-virtual thunk to'mlcore::PropertyCache::description@<X0>(mlcore::PropertyCache *this@<X0>, std::string *a2@<X8>)
{
  return mlcore::PropertyCache::description((mlcore::PropertyCache *)((char *)this - 208), a2);
}

uint64_t mlcore::PropertyCache::description@<X0>(mlcore::PropertyCache *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v65);
  unint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    BOOL v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v6 = v4[2];
      v68.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v68, 1);
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v8 = v6 + 16;
      uint64_t v7 = v9;
      int v10 = *(char *)(v8 + 23);
      if (v10 >= 0) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = v7;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" = ", 3);
      __int16 v13 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      uint64_t v14 = std::locale::use_facet((const std::locale *)&v68, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)&v68);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  int v15 = (void *)*((void *)this + 18);
  if (v15)
  {
    long long v16 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v17 = v15[2];
      v68.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v68, 1);
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v19 = v17 + 16;
      uint64_t v18 = v20;
      int v21 = *(char *)(v19 + 23);
      if (v21 >= 0) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v18;
      }
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        uint64_t v23 = *(void *)(v19 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" = ", 3);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
      char v25 = std::locale::use_facet((const std::locale *)&v68, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)&v68);
      std::ostream::put();
      std::ostream::flush();
      int v15 = (void *)*v15;
    }
    while (v15);
  }
  unint64_t v26 = (void *)*((void *)this + 13);
  if (v26)
  {
    char v27 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v28 = v26[2];
      v68.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v68, 1);
      uint64_t v31 = *(void *)(v28 + 16);
      uint64_t v30 = v28 + 16;
      uint64_t v29 = v31;
      int v32 = *(char *)(v30 + 23);
      if (v32 >= 0) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = v29;
      }
      if (v32 >= 0) {
        uint64_t v34 = *(unsigned __int8 *)(v30 + 23);
      }
      else {
        uint64_t v34 = *(void *)(v30 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" = ", 3);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
      unint64_t v36 = std::locale::use_facet((const std::locale *)&v68, v27);
      ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
      std::locale::~locale((std::locale *)&v68);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v26 = (void *)*v26;
    }
    while (v26);
  }
  uint64_t v37 = (uint64_t *)*((void *)this + 8);
  if (v37)
  {
    uint64_t v38 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::string::size_type v39 = v37[2];
      v68.__r_.__value_.__r.__words[0] = v39;
      if (*((char *)v37 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v68.__r_.__value_.__r.__words[1], (const std::string::value_type *)v37[3], v37[4]);
        std::string::size_type v39 = v68.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_OWORD *)&v68.__r_.__value_.__r.__words[1] = *(_OWORD *)(v37 + 3);
        uint64_t v69 = v37[5];
      }
      v70.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v70, 1);
      uint64_t v42 = *(void *)(v39 + 16);
      uint64_t v41 = v39 + 16;
      uint64_t v40 = v42;
      int v43 = *(char *)(v41 + 23);
      if (v43 >= 0) {
        uint64_t v44 = v41;
      }
      else {
        uint64_t v44 = v40;
      }
      if (v43 >= 0) {
        uint64_t v45 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v45 = *(void *)(v41 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" = ", 3);
      if (v69 >= 0) {
        p_std::string::size_type size = (uint64_t)&v68.__r_.__value_.__l.__size_;
      }
      else {
        p_std::string::size_type size = v68.__r_.__value_.__l.__size_;
      }
      if (v69 >= 0) {
        uint64_t v47 = HIBYTE(v69);
      }
      else {
        uint64_t v47 = v68.__r_.__value_.__r.__words[2];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, p_size, v47);
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(v65[0] - 24)));
      int v48 = std::locale::use_facet((const std::locale *)&v70, v38);
      ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
      std::locale::~locale((std::locale *)&v70);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v69) < 0) {
        operator delete((void *)v68.__r_.__value_.__l.__size_);
      }
      uint64_t v37 = (uint64_t *)*v37;
    }
    while (v37);
  }
  uint64_t v49 = (uint64_t **)*((void *)this + 3);
  if (v49)
  {
    char v50 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v49[2];
      mediaplatform::Data::Data((mediaplatform::Data *)&v68.__r_.__value_.__r.__words[1], v49[6], (size_t)v49[4], 1);
      std::string::size_type v51 = v68.__r_.__value_.__r.__words[0];
      v70.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v70, 1);
      uint64_t v54 = *(void *)(v51 + 16);
      uint64_t v53 = v51 + 16;
      uint64_t v52 = v54;
      int v55 = *(char *)(v53 + 23);
      if (v55 >= 0) {
        uint64_t v56 = v53;
      }
      else {
        uint64_t v56 = v52;
      }
      if (v55 >= 0) {
        uint64_t v57 = *(unsigned __int8 *)(v53 + 23);
      }
      else {
        uint64_t v57 = *(void *)(v53 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" = ", 3);
      (*(void (**)(std::string *__return_ptr, std::string::size_type *))(v68.__r_.__value_.__l.__size_ + 40))(&v70, &v68.__r_.__value_.__l.__size_);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v58 = &v70;
      }
      else {
        int v58 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v70.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v58, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(v65[0] - 24)));
      long long v60 = std::locale::use_facet(&v71, v50);
      ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
      std::locale::~locale(&v71);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      mediaplatform::Data::~Data((mediaplatform::Data *)&v68.__r_.__value_.__r.__words[1]);
      uint64_t v49 = (uint64_t **)*v49;
    }
    while (v49);
  }
  std::stringbuf::str();
  uint64_t v61 = std::string::insert(&v70, 0, "{\n");
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v63 = std::string::append(&v68, "}\n");
  *a2 = *v63;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  v65[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v65 + *(void *)(v65[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v65[1] = MEMORY[0x263F8C318] + 16;
  if (v66 < 0) {
    operator delete((void *)v65[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v67);
}

void sub_2150C2290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v2 - 176));
  }
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'mlcore::PropertyCache::~PropertyCache(mlcore::PropertyCache *this)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this - 26);
  JUMPOUT(0x2166B26F0);
}

{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this - 26);
}

void mlcore::PropertyCache::~PropertyCache(mlcore::PropertyCache *this)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(this);
  JUMPOUT(0x2166B26F0);
}

void *mlcore::PropertyCache::PropertyCache(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *uint64_t result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

{
  void *result;

  uint64_t result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *uint64_t result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

void *mlcore::PropertyCache::PropertyCache(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *uint64_t result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

{
  void *result;

  uint64_t result = (void *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *uint64_t result = &unk_26C5C4EE8;
  result[26] = &unk_26C5C4F10;
  return result;
}

uint64_t mlcore::PropertyCache::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    unint64_t v4 = *(uint64_t ***)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)(a1 + 8) + 8 * i) = 0;
      uint64_t v7 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      if (v7) {
        BOOL v8 = v4 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        uint64_t v9 = v7;
      }
      else
      {
        do
        {
          _DWORD v7[2] = v4[2];
          mediaplatform::Data::operator=((uint64_t)(v7 + 3), (uint64_t)(v4 + 3));
          uint64_t v9 = (void *)*v7;
          std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 8, v7);
          unint64_t v4 = (uint64_t **)*v4;
          if (v9) {
            BOOL v10 = v4 == 0;
          }
          else {
            BOOL v10 = 1;
          }
          uint64_t v7 = v9;
        }
        while (!v10);
      }
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(v9);
    }
    for (; v4; unint64_t v4 = (uint64_t **)*v4)
    {
      uint64_t v11 = operator new(0x40uLL);
      v59[0] = (uint64_t)v11;
      v59[1] = a1 + 24;
      char v60 = 0;
      *uint64_t v11 = 0;
      v11[1] = 0;
      uint64_t v11[2] = v4[2];
      mediaplatform::Data::Data((mediaplatform::Data *)(v11 + 3), v4[6], (size_t)v4[4], 1);
      char v60 = 1;
      unint64_t v12 = v11[2];
      unint64_t v13 = HIDWORD(v12);
      unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
      v11[1] = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 8, v11);
      v59[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v59);
    }
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    int v15 = *(const std::string **)(a2 + 64);
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      for (uint64_t j = 0; j != v16; ++j)
        *(void *)(*(void *)(a1 + 48) + 8 * j) = 0;
      uint64_t v18 = *(std::string **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      if (v18) {
        BOOL v19 = v15 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        p_std::string::pointer data = (void **)&v18->__r_.__value_.__l.__data_;
      }
      else
      {
        do
        {
          v18->__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          std::string::operator=(v18 + 1, v15 + 1);
          p_std::string::pointer data = (void **)v18->__r_.__value_.__r.__words[0];
          std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 48, v18);
          int v15 = (const std::string *)v15->__r_.__value_.__r.__words[0];
          if (p_data) {
            BOOL v21 = v15 == 0;
          }
          else {
            BOOL v21 = 1;
          }
          uint64_t v18 = (std::string *)p_data;
        }
        while (!v21);
      }
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(p_data);
    }
    for (; v15; int v15 = (const std::string *)v15->__r_.__value_.__r.__words[0])
    {
      uint64_t v22 = (std::string *)operator new(0x30uLL);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      std::string::size_type v23 = v15->__r_.__value_.__r.__words[2];
      v22->__r_.__value_.__r.__words[2] = v23;
      uint64_t v24 = v22 + 1;
      if (SHIBYTE(v15[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v24, v15[1].__r_.__value_.__l.__data_, v15[1].__r_.__value_.__l.__size_);
        std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
      }
      else
      {
        long long v25 = *(_OWORD *)&v15[1].__r_.__value_.__l.__data_;
        v22[1].__r_.__value_.__r.__words[2] = v15[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      }
      std::string::size_type v26 = HIDWORD(v23);
      unint64_t v27 = 0x9DDFEA08EB382D69 * (((8 * v23) + 8) ^ HIDWORD(v23));
      v22->__r_.__value_.__l.__size_ = 0x9DDFEA08EB382D69
                                     * ((0x9DDFEA08EB382D69 * (v26 ^ (v27 >> 47) ^ v27)) ^ ((0x9DDFEA08EB382D69
                                                                                             * (v26 ^ (v27 >> 47) ^ v27)) >> 47));
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 48, v22);
    }
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    uint64_t v28 = *(void **)(a2 + 104);
    uint64_t v29 = *(void *)(a1 + 96);
    if (!v29) {
      goto LABEL_47;
    }
    for (uint64_t k = 0; k != v29; *(void *)(*(void *)(a1 + 88) + 8 * k++) = 0)
      ;
    uint64_t v31 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    if (v31)
    {
      while (v28)
      {
        void v31[2] = v28[2];
        v31[3] = v28[3];
        int v32 = (void *)*v31;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 88, v31);
        uint64_t v28 = (void *)*v28;
        uint64_t v31 = v32;
        if (!v32) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v56 = (void *)*v31;
        operator delete(v31);
        uint64_t v31 = v56;
      }
      while (v56);
    }
    else
    {
LABEL_47:
      while (v28)
      {
        uint64_t v33 = operator new(0x20uLL);
        *(void *)uint64_t v33 = 0;
        v33[1] = *((_OWORD *)v28 + 1);
        unint64_t v34 = *((void *)v33 + 2);
        unint64_t v35 = HIDWORD(v34);
        unint64_t v36 = 0x9DDFEA08EB382D69 * (((8 * v34) + 8) ^ HIDWORD(v34));
        *((void *)v33 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v35 ^ (v36 >> 47) ^ v36)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 88, v33);
        uint64_t v28 = (void *)*v28;
      }
    }
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    uint64_t v37 = *(uint64_t **)(a2 + 144);
    uint64_t v38 = *(void *)(a1 + 136);
    if (!v38) {
      goto LABEL_56;
    }
    for (uint64_t m = 0; m != v38; *(void *)(*(void *)(a1 + 128) + 8 * m++) = 0)
      ;
    uint64_t v40 = *(uint64_t **)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (v40)
    {
      while (v37)
      {
        v40[2] = v37[2];
        *((_DWORD *)v40 + 6) = *((_DWORD *)v37 + 6);
        uint64_t v41 = (uint64_t *)*v40;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 128, v40);
        uint64_t v37 = (uint64_t *)*v37;
        uint64_t v40 = v41;
        if (!v41) {
          goto LABEL_56;
        }
      }
      do
      {
        uint64_t v57 = (uint64_t *)*v40;
        operator delete(v40);
        uint64_t v40 = v57;
      }
      while (v57);
    }
    else
    {
LABEL_56:
      while (v37)
      {
        uint64_t v42 = operator new(0x20uLL);
        *(void *)uint64_t v42 = 0;
        v42[1] = *((_OWORD *)v37 + 1);
        unint64_t v43 = *((void *)v42 + 2);
        unint64_t v44 = HIDWORD(v43);
        unint64_t v45 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
        *((void *)v42 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v44 ^ (v45 >> 47) ^ v45)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v44 ^ (v45 >> 47) ^ v45)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 128, v42);
        uint64_t v37 = (uint64_t *)*v37;
      }
    }
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    uint64_t v46 = *(void **)(a2 + 184);
    uint64_t v47 = *(void *)(a1 + 176);
    if (!v47) {
      goto LABEL_65;
    }
    for (uint64_t n = 0; n != v47; *(void *)(*(void *)(a1 + 168) + 8 * n++) = 0)
      ;
    uint64_t v49 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    if (v49)
    {
      while (v46)
      {
        v49[2] = v46[2];
        v49[3] = v46[3];
        char v50 = (void *)*v49;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 168, v49);
        uint64_t v46 = (void *)*v46;
        uint64_t v49 = v50;
        if (!v50) {
          goto LABEL_65;
        }
      }
      do
      {
        int v58 = (void *)*v49;
        operator delete(v49);
        uint64_t v49 = v58;
      }
      while (v58);
    }
    else
    {
LABEL_65:
      while (v46)
      {
        std::string::size_type v51 = operator new(0x20uLL);
        *(void *)std::string::size_type v51 = 0;
        v51[1] = *((_OWORD *)v46 + 1);
        unint64_t v52 = *((void *)v51 + 2);
        unint64_t v53 = HIDWORD(v52);
        unint64_t v54 = 0x9DDFEA08EB382D69 * (((8 * v52) + 8) ^ HIDWORD(v52));
        *((void *)v51 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v53 ^ (v54 >> 47) ^ v54)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v53 ^ (v54 >> 47) ^ v54)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 168, v51);
        uint64_t v46 = (void *)*v46;
      }
    }
  }
  return a1;
}

void sub_2150C2B7C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2150C2B98()
{
}

void sub_2150C2C48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2150C2C68(_Unwind_Exception *a1)
{
}

void sub_2150C2C78()
{
}

void sub_2150C2C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2150C2CA0()
{
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      int8x8_t prime = (int8x8_t)v13;
    }
    else {
      int8x8_t prime = (int8x8_t)v12;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v8) {
      goto LABEL_43;
    }
    unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      unint64_t v21 = std::__next_prime(v21);
    }
    else
    {
      uint64_t v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2) {
        unint64_t v21 = v23;
      }
    }
    if (*(void *)&prime <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v15 = operator new(8 * *(void *)&prime);
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (*(void *)&prime != v17);
      uint64_t v18 = *(void **)(a1 + 16);
      if (v18)
      {
        unint64_t v19 = v18[1];
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(void *)&prime) {
            v19 %= *(void *)&prime;
          }
        }
        else
        {
          v19 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v19) = a1 + 16;
        for (uint64_t i = (void *)*v18; *v18; uint64_t i = (void *)*v18)
        {
          unint64_t v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(void *)&prime) {
              v25 %= *(void *)&prime;
            }
          }
          else
          {
            v25 &= *(void *)&prime - 1;
          }
          if (v25 == v19)
          {
            uint64_t v18 = i;
          }
          else
          {
            std::string::size_type v26 = i;
            if (*(void *)(*(void *)a1 + 8 * v25))
            {
              do
              {
                unint64_t v27 = v26;
                std::string::size_type v26 = (void *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *uint64_t v18 = v26;
              *unint64_t v27 = **(void **)(*(void *)a1 + 8 * v25);
              **(void **)(*(void *)a1 + 8 * v25) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v25) = v18;
              uint64_t v18 = i;
              unint64_t v19 = v25;
            }
          }
        }
      }
      unint64_t v8 = (unint64_t)prime;
    }
    else
    {
      std::string::size_type v39 = *(void **)a1;
      *(void *)a1 = 0;
      if (v39) {
        operator delete(v39);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v29 = v7;
    if (v8 <= v7) {
      unint64_t v29 = v7 % v8;
    }
  }
  else
  {
    unint64_t v29 = (v8 - 1) & v7;
  }
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v29);
  if (v30)
  {
    int v31 = 0;
    do
    {
      int v32 = v30;
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        break;
      }
      unint64_t v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v34 = v30[1];
        if (v33 >= v8) {
          unint64_t v34 = v33 % v8;
        }
      }
      else
      {
        unint64_t v34 = v33 & (v8 - 1);
      }
      if (v34 != v29) {
        break;
      }
      BOOL v35 = v33 == v7 && v30[2] == a2[2];
      int v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    int v32 = 0;
  }
  unint64_t v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8) {
      v37 %= v8;
    }
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v37) = a1 + 16;
    if (!*a2) {
      goto LABEL_79;
    }
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  void *v32 = a2;
  if (*a2)
  {
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

BOOL mlcore::PropertyCache::hasValueForProperty(mlcore::PropertyCache *this, mlcore::ModelPropertyBase *a2)
{
  switch((*(unsigned int (**)(mlcore::ModelPropertyBase *))(*(void *)a2 + 80))(a2))
  {
    case 0u:
      unint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)this + 16, (unint64_t)a2);
      goto LABEL_8;
    case 1u:
      unint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)this + 21, (unint64_t)a2);
      goto LABEL_8;
    case 2u:
      unint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)this + 11, (unint64_t)a2);
      goto LABEL_8;
    case 3u:
      unint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)this + 6, (unint64_t)a2);
      goto LABEL_8;
    case 4u:
      unint64_t v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((void *)this + 1, (unint64_t)a2);
LABEL_8:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void mlcore::PropertyCache::allProperties(mlcore::PropertyCache *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v3[2];
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v9 = (uint64_t **)v5 - v4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v4) >> 2 > v10) {
          unint64_t v10 = (uint64_t)(v6 - (void)v4) >> 2;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = (void *)(v11 + 8 * v9);
        *unint64_t v13 = v7;
        unint64_t v8 = v13 + 1;
        while (v5 != v4)
        {
          uint64_t v14 = *--v5;
          *--unint64_t v13 = v14;
        }
        unint64_t v6 = v11 + 8 * v12;
        if (v4) {
          operator delete(v4);
        }
        unint64_t v4 = (uint64_t **)v13;
      }
      else
      {
        *unint64_t v5 = v7;
        unint64_t v8 = v5 + 1;
      }
      unint64_t v3 = (void *)*v3;
      unint64_t v5 = v8;
    }
    while (v3);
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v8 = 0;
    unint64_t v6 = 0;
  }
  int v15 = (void *)*((void *)this + 18);
  if (v15)
  {
    do
    {
      uint64_t v16 = v15[2];
      if ((unint64_t)v8 >= v6)
      {
        uint64_t v18 = (uint64_t **)v8 - v4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v4) >> 2 > v19) {
          unint64_t v19 = (uint64_t)(v6 - (void)v4) >> 2;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        uint8x8_t v22 = (void *)(v20 + 8 * v18);
        *uint8x8_t v22 = v16;
        uint64_t v17 = v22 + 1;
        while (v8 != v4)
        {
          uint64_t v23 = *--v8;
          *--uint8x8_t v22 = v23;
        }
        unint64_t v6 = v20 + 8 * v21;
        if (v4) {
          operator delete(v4);
        }
        unint64_t v4 = (uint64_t **)v22;
      }
      else
      {
        *unint64_t v8 = v16;
        uint64_t v17 = v8 + 1;
      }
      int v15 = (void *)*v15;
      unint64_t v8 = v17;
    }
    while (v15);
  }
  else
  {
    uint64_t v17 = v8;
  }
  uint64_t v24 = (void *)*((void *)this + 13);
  if (v24)
  {
    do
    {
      uint64_t v25 = v24[2];
      if ((unint64_t)v17 >= v6)
      {
        uint64_t v27 = (uint64_t **)v17 - v4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v4) >> 2 > v28) {
          unint64_t v28 = (uint64_t)(v6 - (void)v4) >> 2;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        int v31 = (void *)(v29 + 8 * v27);
        *int v31 = v25;
        std::string::size_type v26 = v31 + 1;
        while (v17 != v4)
        {
          uint64_t v32 = *--v17;
          *--int v31 = v32;
        }
        unint64_t v6 = v29 + 8 * v30;
        if (v4) {
          operator delete(v4);
        }
        unint64_t v4 = (uint64_t **)v31;
      }
      else
      {
        void *v17 = v25;
        std::string::size_type v26 = v17 + 1;
      }
      uint64_t v24 = (void *)*v24;
      uint64_t v17 = v26;
    }
    while (v24);
  }
  else
  {
    std::string::size_type v26 = v17;
  }
  for (uint64_t i = (uint64_t *)*((void *)this + 8); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v34 = i[2];
    if (*((char *)i + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[3], i[4]);
    }
    else {
      std::string __p = *(std::string *)((unsigned char *)i + 1);
    }
    if ((unint64_t)v26 >= v6)
    {
      uint64_t v35 = (uint64_t **)v26 - v4;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v6 - (void)v4) >> 2 > v36) {
        unint64_t v36 = (uint64_t)(v6 - (void)v4) >> 2;
      }
      if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v37);
      }
      else {
        uint64_t v38 = 0;
      }
      std::string::size_type v39 = (void *)(v37 + 8 * v35);
      void *v39 = v34;
      uint64_t v40 = v39 + 1;
      while (v26 != v4)
      {
        uint64_t v41 = *--v26;
        *--std::string::size_type v39 = v41;
      }
      unint64_t v6 = v37 + 8 * v38;
      if (v4) {
        operator delete(v4);
      }
      unint64_t v4 = (uint64_t **)v39;
      std::string::size_type v26 = v40;
    }
    else
    {
      *v26++ = v34;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v42 = (uint64_t **)*((void *)this + 3);
  if (v42)
  {
    do
    {
      std::string::size_type v51 = v42[2];
      mediaplatform::Data::Data((mediaplatform::Data *)&__p, v42[6], (size_t)v42[4], 1);
      if ((unint64_t)v26 >= v6)
      {
        uint64_t v44 = (uint64_t **)v26 - v4;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v4) >> 2 > v45) {
          unint64_t v45 = (uint64_t)(v6 - (void)v4) >> 2;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46) {
          unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v46);
        }
        else {
          uint64_t v47 = 0;
        }
        int v48 = (uint64_t **)(v46 + 8 * v44);
        const std::locale::facet *v48 = v51;
        uint64_t v43 = (uint64_t)(v48 + 1);
        while (v26 != v4)
        {
          uint64_t v49 = (uint64_t *)*--v26;
          *--int v48 = v49;
        }
        unint64_t v6 = v46 + 8 * v47;
        if (v4) {
          operator delete(v4);
        }
        unint64_t v4 = v48;
      }
      else
      {
        *std::string::size_type v26 = v51;
        uint64_t v43 = (uint64_t)(v26 + 1);
      }
      mediaplatform::Data::~Data((mediaplatform::Data *)&__p);
      uint64_t v42 = (uint64_t **)*v42;
      std::string::size_type v26 = (void *)v43;
    }
    while (v42);
  }
  else
  {
    uint64_t v43 = (uint64_t)v26;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a2, v4, v43, (v43 - (uint64_t)v4) >> 3);
  if (v4) {
    operator delete(v4);
  }
}

void sub_2150C3688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  mediaplatform::Data::~Data(v17);
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  unint64_t v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
  {
    return mlcore::ItemPropertyTitleOrderSection(v3);
  }
  else
  {
    unint64_t v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
    if (v4 == a2)
    {
      return mlcore::ItemPropertyAlbumOrderSection(v4);
    }
    else
    {
      unint64_t v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
      if (v5 == a2)
      {
        return mlcore::ItemPropertyArtistOrderSection(v5);
      }
      else
      {
        unint64_t v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
        if (v6 == a2)
        {
          return mlcore::ItemPropertyComposerOrderSection(v6);
        }
        else
        {
          uint64_t v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
          if (v7 == a2)
          {
            return mlcore::ItemPropertyGenreOrderSection(v7);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::representativeItemPersistentIDProperty()
{
  return 0;
}

void *mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTablesToInsertInto@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  BOOL result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *BOOL result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

void *mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTablesToDeleteFrom@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  BOOL result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *BOOL result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::TVEpisode>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::entityType()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::TVEpisode>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_26C5CB390;
  mlcore::Item::Item((mlcore::Item *)(v8 + 3), a2);
  void v8[3] = &unk_26C5C8948;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150C3AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVEpisode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::TVEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::TVEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::TVEpisode>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::TVEpisode::~TVEpisode(mlcore::TVEpisode *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

void mlcore::TVEpisode::TVEpisode(mlcore::TVEpisode *this, uint64_t a2)
{
  mlcore::Item::Item(this, a2);
  *uint64_t v2 = &unk_26C5C8948;
}

{
  void *v2;

  mlcore::Item::Item(this, a2);
  *uint64_t v2 = &unk_26C5C8948;
}

uint64_t mediaplatform::DatabaseIndexedColumn::sql(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string __p = *(std::string *)(a1 + 16);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 52))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" COLLATE ", 9);
    mediaplatform::NameForCollateType(&__p, *(_DWORD *)(a1 + 52));
    uint64_t v4 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  mediaplatform::NameForOrderingType(&__p, *(_DWORD *)(a1 + 48));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150C3F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mediaplatform::DatabaseIndexedColumn::~DatabaseIndexedColumn(mediaplatform::DatabaseIndexedColumn *this)
{
  *(void *)this = &unk_26C5BEFC8;
  *((void *)this + 1) = &unk_26C5C3AF0;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5BEFC8;
  *((void *)this + 1) = &unk_26C5C3AF0;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_26C5BEFC8;
  *(void *)(a1 + 8) = &unk_26C5C3AF0;
  uint64_t v8 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 8);
    v8->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  return a1;
}

uint64_t mediaplatform::DatabaseIndexedColumn::column(mediaplatform::DatabaseIndexedColumn *this)
{
  return (uint64_t)this + 8;
}

std::string *mediaplatform::DatabaseIndexedColumn::setColumn(mediaplatform::DatabaseIndexedColumn *this, const mediaplatform::DatabaseColumnBase *a2)
{
  __n128 result = std::string::operator=((std::string *)((char *)this + 16), (const std::string *)((char *)a2 + 8));
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
  return result;
}

uint64_t mediaplatform::DatabaseIndexedColumn::orderingType(mediaplatform::DatabaseIndexedColumn *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t mediaplatform::DatabaseIndexedColumn::setOrderingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t mediaplatform::DatabaseIndexedColumn::collateType(mediaplatform::DatabaseIndexedColumn *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t mediaplatform::DatabaseIndexedColumn::setCollateType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

std::string *mediaplatform::DatabaseIndex::DatabaseIndex(std::string *this, long long *a2, uint64_t a3, char **a4, std::string::size_type *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C5BED18;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v10;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *(long long **)(a3 + 32), *(long long **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = *a4;
  char v11 = a4[1];
  if (v11 != v12)
  {
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](&this[3].__r_.__value_.__l.__size_, (v11 - v12) >> 4);
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((uint64_t)&this[4], v12, v11, (void *)this[3].__r_.__value_.__r.__words[2]);
  }
  this[4].__r_.__value_.__l.__size_ = *a5;
  std::string::size_type v13 = a5[1];
  this[4].__r_.__value_.__r.__words[2] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  LOWORD(this[5].__r_.__value_.__l.__data_) = 1;
  return this;
}

void sub_2150C42F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *mediaplatform::DatabaseIndex::DatabaseIndex(std::string *this, long long *a2, uint64_t a3, uint64_t *a4, std::string::size_type *a5)
{
  std::string::size_type v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  std::string::size_type v7 = (std::__shared_weak_count *)a5[1];
  v25[0] = *a5;
  v25[1] = (std::string::size_type)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, a3, (char **)&v26, v25);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint8x8_t v22 = (void **)&v26;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint8x8_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 != v9)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>((uint64_t *)&v21, v8);
      long long v10 = v21;
      if (*((void *)&v21 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v11 = v23;
      if ((unint64_t)v23 >= v24)
      {
        long long v20 = v10;
        int64_t v13 = (v23 - (char *)v22) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = (uint64_t)(v24 - (void)v22) >> 3;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        uint64_t v30 = &v24;
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v15);
        uint64_t v17 = &v16[16 * v13];
        std::string::size_type v26 = (void ***)v16;
        uint64_t v27 = v17;
        unint64_t v29 = &v16[16 * v18];
        *(_OWORD *)uint64_t v17 = v20;
        unint64_t v28 = v17 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v22, &v26);
        uint64_t v12 = (uint64_t *)v23;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        *(_OWORD *)uint64_t v23 = v10;
        uint64_t v12 = (uint64_t *)(v11 + 16);
      }
      uint64_t v23 = (char *)v12;
      if (*((void *)&v21 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      }
      v8 += 40;
    }
    while (v8 != v9);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v22) {
    std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t *)v22, (uint64_t *)v23, (v23 - (char *)v22) >> 4);
  }
  std::string::size_type v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  return this;
}

{
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  char *v11;
  uint64_t *v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  long long v20;
  long long v21;
  void **v22;
  char *v23;
  unint64_t v24;
  std::string::size_type v25[2];
  void ***v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  unint64_t *v30;

  std::string::size_type v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  std::string::size_type v7 = (std::__shared_weak_count *)a5[1];
  v25[0] = *a5;
  v25[1] = (std::string::size_type)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, a3, (char **)&v26, v25);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint8x8_t v22 = (void **)&v26;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint8x8_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 != v9)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>((uint64_t *)&v21, v8);
      long long v10 = v21;
      if (*((void *)&v21 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v11 = v23;
      if ((unint64_t)v23 >= v24)
      {
        long long v20 = v10;
        int64_t v13 = (v23 - (char *)v22) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = (uint64_t)(v24 - (void)v22) >> 3;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        uint64_t v30 = &v24;
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v15);
        uint64_t v17 = &v16[16 * v13];
        std::string::size_type v26 = (void ***)v16;
        uint64_t v27 = v17;
        unint64_t v29 = &v16[16 * v18];
        *(_OWORD *)uint64_t v17 = v20;
        unint64_t v28 = v17 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v22, &v26);
        uint64_t v12 = (uint64_t *)v23;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        *(_OWORD *)uint64_t v23 = v10;
        uint64_t v12 = (uint64_t *)(v11 + 16);
      }
      uint64_t v23 = (char *)v12;
      if (*((void *)&v21 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      }
      v8 += 40;
    }
    while (v8 != v9);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v22) {
    std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t *)v22, (uint64_t *)v23, (v23 - (char *)v22) >> 4);
  }
  std::string::size_type v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  return this;
}

void sub_2150C4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13)
{
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v13);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 2;
  uint64_t v8 = a1[2];
  long long v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    unint64_t v15 = a2;
    goto LABEL_13;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v10) >> 4;
  if (v16 < a4)
  {
    uint64_t v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, v17, v10);
    int64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    unint64_t v15 = v17;
LABEL_13:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(v14, v15, a3, v13);
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *,std::shared_ptr<mediaplatform::SQLExpression const> *>(a2, a3, v10);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    long long v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *uint64_t v4 = &unk_26C5C9D40;
  uint64_t result = mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn((uint64_t)(v4 + 3), a2, 0, 0);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_2150C470C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseIndex::~DatabaseIndex(mediaplatform::DatabaseIndex *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this + 3);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::DatabaseIndex::setColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 80);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void sub_2150C49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13)
{
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v13);
  _Unwind_Resume(a1);
}

std::string *mediaplatform::DatabaseIndex::DatabaseIndex(std::string *a1, long long *a2, long long *a3, uint64_t *a4, std::string::size_type *a5)
{
  mediaplatform::DatabaseTableBase::DatabaseTableBase(v34, a3);
  uint64_t v27 = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::string::size_type v9 = *a5;
  long long v10 = (std::__shared_weak_count *)a5[1];
  v33[0] = v9;
  v33[1] = (std::string::size_type)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(a1, a2, (uint64_t)v34, &v27, v33);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v30 = (void **)&v27;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v30);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(v34);
  uint64_t v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else {
        std::string v26 = *(std::string *)v11;
      }
      uint64_t v27 = (char *)&unk_26C5C3AF0;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        int64_t v13 = (void *)v26.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        int v29 = 0;
        operator delete(v13);
      }
      else
      {
        std::string __p = v26;
        int v29 = 0;
      }
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>((uint64_t *)&v25, (uint64_t)&v27);
      long long v14 = v25;
      if (*((void *)&v25 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        long long v24 = v14;
        int64_t v17 = (v31 - (char *)v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (uint64_t)(v32 - (void)v30) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v34[4] = &v32;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        long long v21 = &v20[16 * v17];
        v34[0] = v20;
        v34[1] = v21;
        v34[3] = &v20[16 * v22];
        *(_OWORD *)long long v21 = v24;
        v34[2] = v21 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v30, v34);
        unint64_t v16 = (uint64_t *)v31;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v34);
      }
      else
      {
        *(_OWORD *)int v31 = v14;
        unint64_t v16 = (uint64_t *)(v15 + 16);
      }
      int v31 = (char *)v16;
      if (*((void *)&v25 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
      }
      uint64_t v27 = (char *)&unk_26C5C3AF0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  if (&a1[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v30) {
    std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>((uint64_t *)&a1[3].__r_.__value_.__l.__size_, (uint64_t *)v30, (uint64_t *)v31, (v31 - (char *)v30) >> 4);
  }
  v34[0] = &v30;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  return a1;
}

{
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  long long v14;
  char *v15;
  uint64_t *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  long long v24;
  long long v25;
  std::string v26;
  char *v27;
  std::string __p;
  int v29;
  void **v30;
  char *v31;
  unint64_t v32;
  std::string::size_type v33[2];
  void *v34[8];

  mediaplatform::DatabaseTableBase::DatabaseTableBase(v34, a3);
  uint64_t v27 = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::string::size_type v9 = *a5;
  long long v10 = (std::__shared_weak_count *)a5[1];
  v33[0] = v9;
  v33[1] = (std::string::size_type)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(a1, a2, (uint64_t)v34, &v27, v33);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v30 = (void **)&v27;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v30);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(v34);
  uint64_t v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else {
        std::string v26 = *(std::string *)v11;
      }
      uint64_t v27 = (char *)&unk_26C5C3AF0;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        int64_t v13 = (void *)v26.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        int v29 = 0;
        operator delete(v13);
      }
      else
      {
        std::string __p = v26;
        int v29 = 0;
      }
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>((uint64_t *)&v25, (uint64_t)&v27);
      long long v14 = v25;
      if (*((void *)&v25 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        long long v24 = v14;
        int64_t v17 = (v31 - (char *)v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (uint64_t)(v32 - (void)v30) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v34[4] = &v32;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        long long v21 = &v20[16 * v17];
        v34[0] = v20;
        v34[1] = v21;
        v34[3] = &v20[16 * v22];
        *(_OWORD *)long long v21 = v24;
        v34[2] = v21 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v30, v34);
        unint64_t v16 = (uint64_t *)v31;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v34);
      }
      else
      {
        *(_OWORD *)int v31 = v14;
        unint64_t v16 = (uint64_t *)(v15 + 16);
      }
      int v31 = (char *)v16;
      if (*((void *)&v25 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
      }
      uint64_t v27 = (char *)&unk_26C5C3AF0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  if (&a1[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v30) {
    std::vector<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*,std::shared_ptr<mediaplatform::DatabaseIndexedColumn const>*>((uint64_t *)&a1[3].__r_.__value_.__l.__size_, (uint64_t *)v30, (uint64_t *)v31, (v31 - (char *)v30) >> 4);
  }
  v34[0] = &v30;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  return a1;
}

void sub_2150C4CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, mediaplatform::DatabaseIndex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  a19 = &a27;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  mediaplatform::DatabaseIndex::~DatabaseIndex(a10);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *uint64_t v4 = &unk_26C5C9D40;
  uint64_t result = mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn((uint64_t)(v4 + 3), a2, 0, 0);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_2150C4E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2150C509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, mediaplatform::DatabaseIndex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  a19 = &a27;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  mediaplatform::DatabaseIndex::~DatabaseIndex(a10);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseIndex::table(mediaplatform::DatabaseIndex *this)
{
  return (uint64_t)this + 24;
}

void mediaplatform::DatabaseIndex::setTable(mediaplatform::DatabaseIndex *this, const mediaplatform::DatabaseTableBase *a2)
{
  uint64_t v4 = (mediaplatform::DatabaseIndex *)((char *)this + 24);
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 8));
  if (v4 != a2)
  {
    uint64_t v5 = (std::string *)*((void *)a2 + 4);
    uint64_t v6 = (long long *)*((void *)a2 + 5);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 56), v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
  }
}

uint64_t mediaplatform::DatabaseIndex::columns(mediaplatform::DatabaseIndex *this)
{
  return (uint64_t)this + 80;
}

uint64_t mediaplatform::DatabaseIndex::conditionalExpression@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 112);
  *a2 = *(void *)(this + 104);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mediaplatform::DatabaseIndex::setConditionalExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v3;
  *(void *)(a1 + 112) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t mediaplatform::DatabaseIndex::shouldCreateIfNonexistent(mediaplatform::DatabaseIndex *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t mediaplatform::DatabaseIndex::setShouldCreateIfNonexistent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 120) = a2;
  return this;
}

uint64_t mediaplatform::DatabaseIndex::isUnique(mediaplatform::DatabaseIndex *this)
{
  return *((unsigned __int8 *)this + 121);
}

uint64_t mediaplatform::DatabaseIndex::setUnique(uint64_t this, char a2)
{
  *(unsigned char *)(this + 121) = a2;
  return this;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::entityType()
{
  return 11;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C5CA670;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C52F8;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  std::string::size_type v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150C5554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::PlaylistAuthor::~PlaylistAuthor(mlcore::PlaylistAuthor *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

double mlcore::PlaylistAuthor::PlaylistAuthor(mlcore::PlaylistAuthor *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C52F8;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C52F8;
  return result;
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150C58C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::columnCount()
{
  return 38;
}

void mlcore::ItemTable::~ItemTable(mlcore::ItemTable *this)
{
  *(void *)this = &unk_26C5C4130;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1904);
  *(void *)this = &unk_26C5C3600;
  *((void *)this + 232) = &unk_26C5C3AF0;
  if (*((char *)this + 1887) < 0) {
    operator delete(*((void **)this + 233));
  }
  *((void *)this + 226) = &unk_26C5C3AF0;
  if (*((char *)this + 1839) < 0) {
    operator delete(*((void **)this + 227));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C4130;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1904);
  *(void *)this = &unk_26C5C3600;
  *((void *)this + 232) = &unk_26C5C3AF0;
  if (*((char *)this + 1887) < 0) {
    operator delete(*((void **)this + 233));
  }
  *((void *)this + 226) = &unk_26C5C3AF0;
  if (*((char *)this + 1839) < 0) {
    operator delete(*((void **)this + 227));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 1776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1807) < 0) {
    operator delete(*(void **)(a1 + 1784));
  }
  *(void *)(a1 + 1728) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1759) < 0) {
    operator delete(*(void **)(a1 + 1736));
  }
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  *(void *)(a1 + 1632) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1663) < 0) {
    operator delete(*(void **)(a1 + 1640));
  }
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  *(void *)(a1 + 1392) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1423) < 0) {
    operator delete(*(void **)(a1 + 1400));
  }
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  *(void *)(a1 + 1200) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1231) < 0) {
    operator delete(*(void **)(a1 + 1208));
  }
  *(void *)(a1 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  *(void *)(a1 + 912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  *(void *)(a1 + 480) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  *(void *)(a1 + 432) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  *(void *)(a1 + 384) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1680) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1711) < 0) {
    operator delete(*(void **)(a1 + 1688));
  }
  *(void *)(a1 + 1632) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1663) < 0) {
    operator delete(*(void **)(a1 + 1640));
  }
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1440) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  *(void *)(a1 + 1392) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1423) < 0) {
    operator delete(*(void **)(a1 + 1400));
  }
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1200) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1231) < 0) {
    operator delete(*(void **)(a1 + 1208));
  }
  *(void *)(a1 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  *(void *)(a1 + 912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 720) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3600;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3600;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3600;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C4130;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1904);
  *(void *)a1 = &unk_26C5C3600;
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C4130;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1904);
  *(void *)a1 = &unk_26C5C3600;
  *(void *)(a1 + 1856) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1887) < 0) {
    operator delete(*(void **)(a1 + 1864));
  }
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1728) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1759) < 0) {
    operator delete(*(void **)(a1 + 1736));
  }
  return mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1632) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1663) < 0) {
    operator delete(*(void **)(a1 + 1640));
  }
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1584) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1615) < 0) {
    operator delete(*(void **)(a1 + 1592));
  }
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1536) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1567) < 0) {
    operator delete(*(void **)(a1 + 1544));
  }
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1488) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1519) < 0) {
    operator delete(*(void **)(a1 + 1496));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1392) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1423) < 0) {
    operator delete(*(void **)(a1 + 1400));
  }
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1248) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1152) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1104) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1135) < 0) {
    operator delete(*(void **)(a1 + 1112));
  }
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 672) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 624) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 576) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 528) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

void mlcore::ItemTable::itemArtistOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2223) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 275), *((void *)this + 276));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2200);
    *(void *)(a2 + 24) = *((void *)this + 277);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 556);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2228);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::seriesNameOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 287), *((void *)this + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2296);
    *(void *)(a2 + 24) = *((void *)this + 289);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 580);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2324);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::albumOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 305), *((void *)this + 306));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2440);
    *(void *)(a2 + 24) = *((void *)this + 307);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 616);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2468);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::albumArtistOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2607) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 323), *((void *)this + 324));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2584);
    *(void *)(a2 + 24) = *((void *)this + 325);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 652);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2612);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::composerOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 341), *((void *)this + 342));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2728);
    *(void *)(a2 + 24) = *((void *)this + 343);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 688);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2756);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::genreOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 359), *((void *)this + 360));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2872);
    *(void *)(a2 + 24) = *((void *)this + 361);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 724);
  *(void *)(a2 + 36) = *(void *)((char *)this + 2900);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::isCompilationColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3471) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 431), *((void *)this + 432));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3448);
    *(void *)(a2 + 24) = *((void *)this + 433);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 868);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3476);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemTable::downloadSourceContainerIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 461), *((void *)this + 462));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3688);
    *(void *)(a2 + 24) = *((void *)this + 463);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 928);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 931);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3716);
  *(void *)a2 = &unk_26C5C47E8;
}

uint64_t mlcore::Transaction::libraryView@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void mlcore::Transaction::unrestrictedLibraryView(mlcore::Transaction *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    mlcore::DeviceLibraryView::library(*((mlcore::DeviceLibraryView **)this + 2), &v9);
    uint64_t v5 = operator new(0x80uLL);
    v5[1] = 0;
    void v5[2] = 0;
    *uint64_t v5 = &unk_26C5CA9F0;
    long long v11 = v9;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    mlcore::DeviceLibraryView::DeviceLibraryView((uint64_t)(v5 + 3), (uint64_t *)&v11, 0);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(void *)&long long v10 = v5 + 3;
    *((void *)&v10 + 1) = v5;
    std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v10, v5 + 14, (uint64_t)(v5 + 3));
    std::string::size_type v7 = (std::__shared_weak_count *)*((void *)this + 5);
    *((_OWORD *)this + 2) = v10;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v4 = *((void *)this + 4);
  }
  uint64_t v8 = *((void *)this + 5);
  *a2 = v4;
  a2[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2150C802C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlcore::DeviceLibraryView>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::DeviceLibraryView>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::Transaction::databaseConnection@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 48);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::Transaction::databaseConnectionCheckout@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 56);
  *a2 = *(void *)(this + 48);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::Transaction::shouldCommit(mlcore::Transaction *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t mlcore::Transaction::setShouldCommit(uint64_t this, char a2)
{
  *(unsigned char *)(this + 64) = a2;
  return this;
}

uint64_t mlcore::Transaction::isReadOnly(mlcore::Transaction *this)
{
  return *((unsigned __int8 *)this + 65);
}

void mlcore::SearchPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v32[1] = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseParameter<std::string>,std::allocator<mediaplatform::DatabaseParameter<std::string>>,std::string&,void>(&v24, a1 + 16);
  uint64_t v6 = v25;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v22, v24, v25);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v16, *(_DWORD *)(a1 + 40));
  long long v28 = v16;
  long long v16 = 0uLL;
  std::string::size_type v7 = v23;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  long long v9 = *(std::__shared_weak_count **)(a2 + 8);
  long long v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 96))(&v15);
  long long v31 = v15;
  long long v15 = 0uLL;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  int64_t v17 = 0;
  __p[0] = &v17;
  LOBYTE(__p[1]) = 0;
  int64_t v17 = operator new(0x30uLL);
  unint64_t v18 = (char *)v17;
  unint64_t v19 = v17 + 6;
  unint64_t v18 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v19, &v28, v32, v17);
  long long v20 = &unk_26C5BED78;
  memset(v21, 0, sizeof(v21));
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v21, v17, v18, (v18 - (char *)v17) >> 4);
  long long v10 = operator new(0x58uLL);
  v10[1] = 0;
  v10[2] = 0;
  *long long v10 = &unk_26C5C9D78;
  std::string::basic_string[abi:ne180100]<0>(__p, "LocalizedStringSearch");
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v10 + 3), (long long *)__p, (uint64_t)&v20);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v11 = v10 + 3;
  *((void *)&v11 + 1) = v10;
  *a3 = v11;
  long long v20 = &unk_26C5BED78;
  __p[0] = v21;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v17;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    int64_t v13 = *(std::__shared_weak_count **)((char *)&v28 + i);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_2150C8384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a27 = &a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  uint64_t v39 = 40;
  while (1)
  {
    uint64_t v40 = *(std::__shared_weak_count **)(v36 - 128 + v39);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    v39 -= 16;
    if (v39 == -8)
    {
      if (a12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a12);
      }
      if (a10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a10);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t mlcore::SearchPredicate::_allProperties@<X0>(mlcore::SearchPredicate *this@<X0>, uint64_t a2@<X8>)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *((void *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

uint64_t mlcore::SearchPredicate::matches()
{
  return 0;
}

uint64_t mlcore::SearchPredicate::description(mlcore::SearchPredicate *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LocalizedStringSearch(", 22);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", '", 3);
  int v2 = *((char *)this + 39);
  if (v2 >= 0) {
    uint64_t v3 = (char *)this + 16;
  }
  else {
    uint64_t v3 = (char *)*((void *)this + 2);
  }
  if (v2 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 39);
  }
  else {
    uint64_t v4 = *((void *)this + 3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"', ", 3);
  (*(void (**)(void **__return_ptr))(**((void **)this + 1) + 40))(__p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150C8704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void mlcore::SearchPredicate::~SearchPredicate(void **this)
{
  *this = &unk_26C5C5E78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x2166B26F0);
}

{
  *this = &unk_26C5C5E78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t mlcore::SearchPredicate::SearchPredicate(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  *(void *)a1 = &unk_26C5C5E78;
  *(void *)(a1 + 8) = a2;
  uint64_t v6 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

double mediaplatform::SQLRenderingContext::SQLRenderingContext(mediaplatform::SQLRenderingContext *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  return result;
}

uint64_t mediaplatform::SQLRenderingContext::renderingPhase(mediaplatform::SQLRenderingContext *this)
{
  return *(unsigned int *)this;
}

_DWORD *mediaplatform::SQLRenderingContext::setRenderingPhase(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

BOOL mediaplatform::SQLRenderingContext::hasDefinedAliasName(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 8), a2) != 0;
}

void mediaplatform::SQLRenderingContext::defineAliasName(uint64_t a1, unsigned __int8 *a2)
{
}

BOOL mediaplatform::SQLRenderingContext::hasDefinedTableName(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 48), a2) != 0;
}

void mediaplatform::SQLRenderingContext::defineTableName(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t mediaplatform::SQLRenderingContext::tableNames@<X0>(mediaplatform::SQLRenderingContext *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_set<std::string>::unordered_set(a2, (uint64_t)this + 48);
}

uint64_t mlcore::EntityPropertiesQuery::setPersistentIDPropertyValue(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 120);
  *(void *)(v2 + 24) = a2;
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3) {
    *(void *)(v3 + 8) = a2;
  }
  return this;
}

const void **mediaplatform::CFPropertyListFromData@<X0>(CFDataRef data@<X0>, CFOptionFlags options@<X1>, const void **a3@<X2>, const void ***a4@<X8>)
{
  CFErrorRef error = 0;
  double result = (const void **)CFPropertyListCreateWithData(0, data, options, 0, &error);
  *a4 = result;
  CFErrorRef v7 = error;
  if (error)
  {
    CFErrorRef v9 = error;
    CFRetain(error);
    uint64_t v8 = *a3;
    *a3 = v7;
    if (v8) {
      CFRelease(v8);
    }
    return mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer((const void **)&v9);
  }
  return result;
}

void sub_2150C8A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer(&a9);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(v9);
  _Unwind_Resume(a1);
}

mlcore::EntityRevisionTable *mlcore::EntityRevisionTable::EntityRevisionTable(mlcore::EntityRevisionTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "entity_revision");
  std::string::basic_string[abi:ne180100]<0>(v37, "revision");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v39, (uint64_t)v37, 1);
  std::string::basic_string[abi:ne180100]<0>(v30, "entity_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v24, "deleted");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v26, (uint64_t)v24, 0);
  std::string::basic_string[abi:ne180100]<0>(v18, "class");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v20, (uint64_t)v18, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "revision_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v14, (uint64_t)v12, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = __s;
  }
  uint64_t v61 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = v40;
  }
  int v63 = v41;
  uint64_t v61 = &unk_26C5C3858;
  uint64_t v64 = v42;
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v33;
  }
  int v58 = v34;
  uint64_t v56 = &unk_26C5C3878;
  uint64_t v59 = v35;
  int v60 = v36;
  unint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = v27;
  }
  int v54 = v28;
  unint64_t v52 = &unk_26C5C3858;
  uint64_t v55 = v29;
  int v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v21;
  }
  int v50 = v22;
  int v48 = &unk_26C5C3858;
  uint64_t v51 = v23;
  uint64_t v44 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = __p;
  }
  int v46 = v16;
  uint64_t v44 = &unk_26C5C3858;
  uint64_t v47 = v17;
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  int v3 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v65.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C31D8;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v83 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = v62;
  }
  int v85 = v63;
  uint64_t v83 = &unk_26C5C3858;
  uint64_t v86 = v64;
  int v78 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v57;
  }
  int v80 = v58;
  int v78 = &unk_26C5C3878;
  uint64_t v81 = v59;
  int v82 = v60;
  size_t v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = v53;
  }
  int v76 = v54;
  size_t v74 = &unk_26C5C3858;
  uint64_t v77 = v55;
  std::string v70 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = v49;
  }
  int v72 = v50;
  std::string v70 = &unk_26C5C3858;
  uint64_t v73 = v51;
  char v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v45;
  }
  int v68 = v46;
  char v66 = &unk_26C5C3858;
  uint64_t v69 = v47;
  unint64_t v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v79;
  }
  int v101 = v80;
  unint64_t v99 = &unk_26C5C3878;
  uint64_t v102 = v81;
  int v103 = v82;
  uint64_t v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v96, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v96 = v75;
  }
  int v97 = v76;
  uint64_t v95 = &unk_26C5C3858;
  uint64_t v98 = v77;
  char v91 = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v92, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v92 = v71;
  }
  int v93 = v72;
  char v91 = &unk_26C5C3858;
  uint64_t v94 = v73;
  uint64_t v87 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v88, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v88 = v67;
  }
  int v89 = v68;
  uint64_t v87 = &unk_26C5C3858;
  uint64_t v90 = v69;
  uint64_t v112 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v113, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v113 = v96;
  }
  int v114 = v97;
  uint64_t v112 = &unk_26C5C3858;
  uint64_t v115 = v98;
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v109, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  }
  else {
    std::string v109 = v92;
  }
  int v110 = v93;
  int v108 = &unk_26C5C3858;
  uint64_t v111 = v94;
  std::string v104 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v105, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  }
  else {
    std::string v105 = v88;
  }
  int v106 = v89;
  std::string v104 = &unk_26C5C3858;
  uint64_t v107 = v90;
  uint64_t v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v121, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v121 = v109;
  }
  int v122 = v110;
  uint64_t v120 = &unk_26C5C3858;
  uint64_t v123 = v111;
  v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v105;
  }
  int v4 = v106;
  int v118 = v106;
  v116 = &unk_26C5C3858;
  uint64_t v5 = v107;
  uint64_t v119 = v107;
  unint64_t v124 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
    int v4 = v118;
    uint64_t v5 = v119;
  }
  else
  {
    std::string v125 = v117;
  }
  int v126 = v4;
  unint64_t v124 = &unk_26C5C3858;
  uint64_t v127 = v5;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v124);
  unint64_t v124 = &unk_26C5C3AF0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)((char *)this + 136);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    *((void *)this + 19) = *((void *)&v121.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v122;
  *((void *)this + 16) = &unk_26C5C3858;
  *(void *)((char *)this + 164) = v123;
  v116 = &unk_26C5C3AF0;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  uint64_t v120 = &unk_26C5C3AF0;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  *((void *)this + 22) = &unk_26C5C3AF0;
  CFErrorRef v7 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v113.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v114;
  *((void *)this + 22) = &unk_26C5C3858;
  *(void *)((char *)this + 212) = v115;
  std::string v104 = &unk_26C5C3AF0;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  uint64_t v112 = &unk_26C5C3AF0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  *((void *)this + 28) = &unk_26C5C3AF0;
  uint64_t v8 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
    *((void *)this + 31) = *((void *)&v100.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 64) = v101;
  *((void *)this + 28) = &unk_26C5C3878;
  *(void *)((char *)this + 260) = v102;
  *((_DWORD *)this + 67) = v103;
  uint64_t v87 = &unk_26C5C3AF0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  char v91 = &unk_26C5C3AF0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  uint64_t v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  unint64_t v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  *((void *)this + 34) = &unk_26C5C3AF0;
  CFErrorRef v9 = (std::string *)((char *)this + 280);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
    *((void *)this + 37) = *((void *)&v84.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v85;
  *((void *)this + 34) = &unk_26C5C3858;
  *(void *)((char *)this + 308) = v86;
  char v66 = &unk_26C5C3AF0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  std::string v70 = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  size_t v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  int v78 = &unk_26C5C3AF0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  uint64_t v83 = &unk_26C5C3AF0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  uint64_t v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  int v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  unint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = &unk_26C5C3AF0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  uint64_t v61 = &unk_26C5C3AF0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_119;
    }
  }
  else if ((v3 & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v65.__r_.__value_.__l.__data_);
LABEL_119:
  *(void *)this = &unk_26C5C3D08;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 320, (uint64_t)&v39);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 368, (uint64_t)&v32);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 416, (uint64_t)&v26);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 464, (uint64_t)&v20);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 512, (uint64_t)&v14);
  long long v14 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  long long v20 = &unk_26C5C3AF0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string v26 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  unint64_t v32 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  uint64_t v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C7A78;
  std::string::basic_string[abi:ne180100]<0>(&__str, "UNIQUE (entity_pid, revision_type)");
  std::string::operator=((std::string *)((char *)this + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2150C9CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,unint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,void *a63)
{
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v79);
  STACK[0x350] = a20;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  STACK[0x380] = a21;
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  STACK[0x3B0] = a22;
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  STACK[0x3E0] = a23;
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  STACK[0x410] = a24;
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  if (*(char *)(v78 + 79) < 0) {
    operator delete(*a12);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v78);
  STACK[0x240] = a25;
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  STACK[0x270] = a26;
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  STACK[0x2A0] = a27;
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  STACK[0x2D0] = a28;
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  STACK[0x300] = a29;
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void sub_2150CA214()
{
}

void sub_2150CA21C()
{
}

void sub_2150CA224()
{
}

void sub_2150CA22C()
{
}

void sub_2150CA234()
{
}

void sub_2150CA23C()
{
}

void sub_2150CA244()
{
}

void sub_2150CA24C()
{
}

void sub_2150CA254()
{
}

void sub_2150CA25C()
{
}

void mlcore::MediaTable<int,long long,int,int,int>::~MediaTable(mediaplatform::DatabaseTableBase *this)
{
  *(void *)this = &unk_26C5C3D08;
  *((void *)this + 64) = &unk_26C5C3AF0;
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  *((void *)this + 58) = &unk_26C5C3AF0;
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  *((void *)this + 52) = &unk_26C5C3AF0;
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 46) = &unk_26C5C3AF0;
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  *((void *)this + 40) = &unk_26C5C3AF0;
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  mediaplatform::DatabaseTable<int,long long,int,int,int>::~DatabaseTable(this);
}

void mediaplatform::DatabaseTable<int,long long,int,int,int>::~DatabaseTable(mediaplatform::DatabaseTableBase *this)
{
  *(void *)this = &unk_26C5C31D8;
  *((void *)this + 34) = &unk_26C5C3AF0;
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 28) = &unk_26C5C3AF0;
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  *((void *)this + 22) = &unk_26C5C3AF0;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_26C5C3AF0;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mediaplatform::DatabaseTable<int,long long,int,int,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150CA570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<int,long long,int,int,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_2150CA5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<int,long long,int,int,int>::columnCount()
{
  return 5;
}

void mediaplatform::DatabaseTable<int,long long,int,int,int>::~DatabaseTable(mediaplatform::DatabaseTableBase *a1)
{
  mediaplatform::DatabaseTable<int,long long,int,int,int>::~DatabaseTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::MediaTable<int,long long,int,int,int>::~MediaTable(mediaplatform::DatabaseTableBase *a1)
{
  mlcore::MediaTable<int,long long,int,int,int>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::EntityRevisionTable::~EntityRevisionTable(mlcore::EntityRevisionTable *this)
{
  mlcore::MediaTable<int,long long,int,int,int>::~MediaTable(this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::EntityRevisionTable::revisionColumn(mlcore::EntityRevisionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 351) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 41), *((void *)this + 42));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 328);
    *(void *)(a2 + 24) = *((void *)this + 43);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 88);
  *(void *)(a2 + 36) = *(void *)((char *)this + 356);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::EntityRevisionTable::persistentIDColumn(mlcore::EntityRevisionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(void *)(a2 + 24) = *((void *)this + 49);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 100);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 103);
  *(void *)(a2 + 36) = *(void *)((char *)this + 404);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::EntityRevisionTable::deletedColumn(mlcore::EntityRevisionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(void *)(a2 + 24) = *((void *)this + 55);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 112);
  *(void *)(a2 + 36) = *(void *)((char *)this + 452);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::EntityRevisionTable::classColumn(mlcore::EntityRevisionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 495) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 59), *((void *)this + 60));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 472);
    *(void *)(a2 + 24) = *((void *)this + 61);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 124);
  *(void *)(a2 + 36) = *(void *)((char *)this + 500);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::EntityRevisionTable::revisionType(mlcore::EntityRevisionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  int v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 65), *((void *)this + 66));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 520);
    *(void *)(a2 + 24) = *((void *)this + 67);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 136);
  *(void *)(a2 + 36) = *(void *)((char *)this + 548);
  *(void *)a2 = &unk_26C5C47C8;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  HasTitle = (mlcore *)mlcore::AlbumPropertyOrder(a1);
  if (HasTitle != a2)
  {
    HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(HasTitle);
    if (HasTitle != a2) {
      return 0;
    }
  }
  return mlcore::AlbumPropertyOrderSection(HasTitle);
}

void mlcore::TypedEntityClass<mlcore::TVSeason>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::TVSeason>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::TVSeason>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::entityType()
{
  return 4;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::TVSeason>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_26C5CB320;
  mlcore::Album::Album((mlcore::Album *)(v8 + 3), a2);
  void v8[3] = &unk_26C5C88C0;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  CFErrorRef v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150CAC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVSeason>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::TVSeason>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::TVSeason>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::TVSeason>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::TVSeason::~TVSeason(mlcore::TVSeason *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

BOOL mlcore::TypedEntityClass<mlcore::Album>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

__n128 mlcore::TypedEntityClass<mlcore::Album>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_26C5CB010;
  mlcore::Album::Album((mlcore::Album *)(v8 + 3), a2);
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  CFErrorRef v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150CAF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Album>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::TVSeason::TVSeason(mlcore::TVSeason *this, uint64_t a2)
{
  mlcore::Album::Album(this, a2);
  *uint64_t v2 = &unk_26C5C88C0;
}

{
  void *v2;

  mlcore::Album::Album(this, a2);
  *uint64_t v2 = &unk_26C5C88C0;
}

void mlcore::Section::localizedTitle(mlcore::Section *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t mlcore::Section::range(mlcore::Section *this)
{
  return (uint64_t)this + 24;
}

uint64_t mlcore::Section::sectionIndex(mlcore::Section *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    int v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ArtworkToken>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::ArtworkToken>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::ArtworkToken>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::ArtworkTokenTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ArtworkTokenTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::ArtworkTokenTable>::sharedInstance(void)::_sharedInstance;
}

void sub_2150CB300(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ArtworkTokenTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore17ArtworkTokenTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ArtworkTokenTable **a1)
{
  uint64_t v2 = operator new(0x268uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_26C5CA980;
  __n128 result = mlcore::ArtworkTokenTable::ArtworkTokenTable((mlcore::ArtworkTokenTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ArtworkTokenTable *)v2;
  return result;
}

void sub_2150CB38C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ArtworkTokenTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ArtworkTokenTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ArtworkTokenTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::ArtworkToken>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::ArtworkToken>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C5CA248;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C49F8;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  CFErrorRef v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150CB67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ArtworkToken>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::ArtworkToken>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::ArtworkToken>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::ArtworkToken>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::ArtworkToken>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::ArtworkToken::~ArtworkToken(mlcore::ArtworkToken *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::ArtworkTokenPropertyToken(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkTokenPropertyToken(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ArtworkTokenPropertyToken(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyToken(void)::$_0 &&>>);
  }
  return mlcore::ArtworkTokenPropertyToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyToken(void)::$_0 &&>>()
{
}

void sub_2150CBA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkTokenPropertySourceType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkTokenPropertySourceType(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ArtworkTokenPropertySourceType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertySourceType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkTokenPropertySourceType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertySourceType(void)::$_0 &&>>()
{
}

void sub_2150CBD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkTokenPropertyType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkTokenPropertyType(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ArtworkTokenPropertyType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkTokenPropertyType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyType(void)::$_0 &&>>()
{
}

void sub_2150CBFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkTokenPropertyEntityPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkTokenPropertyEntityPersistentID(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ArtworkTokenPropertyEntityPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyEntityPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ArtworkTokenPropertyEntityPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyEntityPersistentID(void)::$_0 &&>>()
{
}

void sub_2150CC2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkTokenPropertyEntityType(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::ArtworkTokenPropertyEntityType(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&mlcore::ArtworkTokenPropertyEntityType(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyEntityType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkTokenPropertyEntityType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkTokenPropertyEntityType(void)::$_0 &&>>()
{
}

void sub_2150CC5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ArtworkToken::artworkToken(mlcore::ArtworkToken *this@<X0>, std::string *a2@<X8>)
{
  int v4 = (mlcore::ModelPropertyBase *)mlcore::ArtworkTokenPropertyToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::ArtworkToken::setArtworkToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::ArtworkTokenPropertyToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::ArtworkToken::artworkSourceType(mlcore::ArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkTokenPropertySourceType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::ArtworkToken::setArtworkSourceType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::ArtworkTokenPropertySourceType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::ArtworkToken::artworkType(mlcore::ArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkTokenPropertyType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::ArtworkToken::setArtworkType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::ArtworkTokenPropertyType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::ArtworkToken::entityPersistentID(mlcore::ArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkTokenPropertyEntityPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::ArtworkToken::setEntityPersistentID(mlcore::ArtworkToken *this, uint64_t a2)
{
  unint64_t v5 = mlcore::ArtworkTokenPropertyEntityPersistentID(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::ArtworkToken::entityType(mlcore::ArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::ArtworkTokenPropertyEntityType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::ArtworkToken::setEntityType(mlcore::ArtworkToken *this, int a2)
{
  unint64_t v5 = mlcore::ArtworkTokenPropertyEntityType(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)this + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::ContentRating::ContentRating(uint64_t a1, std::string *a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  int v3 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  char v31 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  uint64_t v30 = (std::string *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, "|");
  mediaplatform::ComponentsSeparatedByString(a2, (char *)__p, &v38);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if (v38.__end_ != v38.__begin_)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38.__end_ - (char *)v38.__begin_) >> 3);
    uint64_t v21 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    int v22 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v6 = v35;
    int v28 = *(void **)(MEMORY[0x263F8C2B8] + 24);
    uint64_t v29 = *(void **)(MEMORY[0x263F8C2B8] + 16);
    uint64_t v26 = *(void *)(MEMORY[0x263F8C2B8] + 40);
    uint64_t v27 = *(void *)(MEMORY[0x263F8C2B8] + 32);
    long long v20 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v24 = *(void **)(MEMORY[0x263F8C2B8] + 48);
    char v25 = *(void **)(MEMORY[0x263F8C2B8] + 8);
    unsigned int v7 = 1;
    uint64_t v8 = &v34;
    unint64_t v23 = v5;
    do
    {
      CFErrorRef v9 = v3;
      switch(v7)
      {
        case 1u:
          goto LABEL_7;
        case 2u:
          CFErrorRef v9 = v31;
LABEL_7:
          std::string::operator=(v9, &v38.__begin_[v4]);
          break;
        case 3u:
          begiuint64_t n = v38.__begin_;
          uint64_t v11 = MEMORY[0x263F8C328] + 104;
          v37[0] = MEMORY[0x263F8C328] + 104;
          uint64_t v12 = v8;
          char v13 = v6;
          uint64_t v14 = MEMORY[0x263F8C328] + 64;
          uint64_t v34 = MEMORY[0x263F8C328] + 64;
          __p[0] = v29;
          *(void **)((char *)__p + *((void *)v29 - 3)) = v28;
          __p[1] = 0;
          long long v15 = v12;
          int v16 = (std::ios_base *)((char *)__p + *((void *)__p[0] - 3));
          std::ios_base::init(v16, v13);
          uint64_t v17 = (void *)(MEMORY[0x263F8C328] + 24);
          v16[1].__vftable = 0;
          v16[1].__fmtflags_ = -1;
          uint64_t v34 = v27;
          *(uint64_t *)((char *)v15 + *(void *)(v27 - 24)) = v26;
          __p[0] = v25;
          *(void **)((char *)__p + *((void *)v25 - 3)) = v24;
          v37[0] = v11;
          __p[0] = v17;
          uint64_t v34 = v14;
          std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v13, &begin[v4], 24);
          uint64_t v8 = v15;
          uint64_t v6 = v13;
          int v3 = v30;
          MEMORY[0x2166B23F0](__p, a1 + 72);
          unint64_t v5 = v23;
          __p[0] = v20;
          *(void **)((char *)__p + *((void *)v20 - 3)) = v22;
          uint64_t v34 = v21;
          v35[0] = MEMORY[0x263F8C318] + 16;
          if (v36 < 0) {
            operator delete((void *)v35[8]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2166B2650](v37);
          break;
        case 4u:
          std::string::operator=((std::string *)a1, &v38.__begin_[v4]);
          break;
        default:
          break;
      }
      uint64_t v4 = v7;
    }
    while (v5 > v7++);
  }
  __p[0] = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_2150CCE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a24 + 71) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(a24 + 47) < 0) {
    operator delete(*a23);
  }
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166B2650](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  unsigned int v7 = (std::string *)(v6 + 64);
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  *(void *)(a1 + 88) = 0;
  char v8 = *(unsigned char *)(a1 + 87);
  if (v8 < 0)
  {
    CFErrorRef v9 = *(std::string **)(a1 + 64);
    unint64_t v10 = *(void *)(a1 + 72);
  }
  else
  {
    CFErrorRef v9 = v7;
    unint64_t v10 = *(unsigned __int8 *)(a1 + 87);
  }
  int v11 = *(_DWORD *)(a1 + 96);
  if ((v11 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v9 + v10;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = (char *)v9 + v10;
  }
  if ((v11 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v9 + v10;
    std::string::size_type v12 = v8 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v7, v12, 0);
    uint64_t v13 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = (char *)v9 + v13;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v10 >> 31)
      {
        uint64_t v14 = ((v10 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v15 = 0x7FFFFFFF * ((v14 + ((v10 - 0x80000000 - v14) >> 1)) >> 30);
        CFErrorRef v9 = (std::string *)((char *)v9 + v15 + 0x7FFFFFFF);
        unint64_t v10 = v10 - v15 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v9;
      }
      if (v10) {
        *(void *)(a1 + 48) = (char *)v9 + v10;
      }
    }
  }
  return a1;
}

void sub_2150CD170(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

mlcore::ContentRating *mlcore::ContentRating::ContentRating(mlcore::ContentRating *this, const mediaplatform::PropertyList *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v4 = (char *)this + 24;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "riaa");
  mediaplatform::PropertyList::_cfValueForKey((uint64_t)a2, (uint64_t)__p, cf);
  CFTypeRef v5 = cf[0];
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  unint64_t valuePtr = (unint64_t)v5;
  mediaplatform::PlistValueGetter<mediaplatform::PropertyList,void>::value(&v19, v5);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&valuePtr);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(cf);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(cf, "name");
  mediaplatform::PropertyList::valueForKey<std::string>(__p, (uint64_t)&v19, (uint64_t)cf);
  if (*((char *)this + 47) < 0) {
    operator delete(*(void **)v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
  *((void *)v4 + 2) = v18;
  HIBYTE(v18) = 0;
  LOBYTE(__p[0]) = 0;
  if (v16 < 0) {
    operator delete((void *)cf[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  mediaplatform::PropertyList::_cfValueForKey((uint64_t)&v19, (uint64_t)__p, &v22);
  CFStringRef v6 = v22;
  if (v22) {
    CFRetain(v22);
  }
  CFStringRef v21 = v6;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (v6 && CFGetTypeID(v6) == TypeID)
  {
    CFRetain(v6);
    cf[0] = v6;
    unint64_t valuePtr = 0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberLongLongType, &valuePtr);
    unint64_t IntValue = valuePtr;
  }
  else
  {
    cf[0] = 0;
    CFStringRef v9 = v21;
    CFTypeID v10 = CFBooleanGetTypeID();
    if (v9 && CFGetTypeID(v9) == v10)
    {
      CFRetain(v9);
      unint64_t valuePtr = (unint64_t)v9;
      unint64_t IntValue = CFBooleanGetValue((CFBooleanRef)v9) != 0;
    }
    else
    {
      unint64_t valuePtr = 0;
      CFStringRef v11 = v21;
      CFTypeID v12 = CFStringGetTypeID();
      if (!v11 || CFGetTypeID(v11) != v12)
      {
        CFStringRef v23 = 0;
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "not an integer");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
      }
      CFRetain(v11);
      CFStringRef v23 = v11;
      unint64_t IntValue = CFStringGetIntValue(v11);
      mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v23);
    }
    mediaplatform::CFRetainedPointer<__CFBoolean const*>::~CFRetainedPointer((const void **)&valuePtr);
  }
  mediaplatform::CFRetainedPointer<__CFNumber const*>::~CFRetainedPointer(cf);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v21);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v22);
  *((void *)this + 9) = IntValue;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  char v19 = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v20);
  return this;
}

void sub_2150CD458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,const void *a24)
{
  mediaplatform::CFRetainedPointer<__CFBoolean const*>::~CFRetainedPointer((const void **)(v26 - 40));
  mediaplatform::CFRetainedPointer<__CFNumber const*>::~CFRetainedPointer((const void **)&a11);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)(v26 - 64));
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)(v26 - 56));
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *(void *)(v24 + 72) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2150CD3B8);
  }
  a23 = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&a24);
  if (*(char *)(v24 + 71) < 0) {
    operator delete(*(void **)(v24 + 48));
  }
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::valueForKey<std::string>(void *a1, uint64_t a2, uint64_t a3)
{
  mediaplatform::PropertyList::_cfValueForKey(a2, a3, &cf);
  CFStringRef v4 = (const __CFString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringRef v6 = v4;
  mediaplatform::PlistValueGetter<std::string,void>::value(a1, v4);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v6);
  return mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(&cf);
}

void sub_2150CD67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)va);
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFBoolean const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **mediaplatform::CFRetainedPointer<__CFNumber const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **mediaplatform::PlistValueGetter<mediaplatform::PropertyList,void>::value(void *a1, CFTypeRef cf)
{
  if (!cf)
  {
    unsigned int v7 = 0;
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not a plist/dictionary");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
  }
  CFRetain(cf);
  unsigned int v7 = cf;
  CFRetain(cf);
  CFStringRef v6 = cf;
  *a1 = &unk_26C5BEA78;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, (CFDictionaryRef)cf);
  mediaplatform::CFRetainedPointer<__CFDictionary const*>::~CFRetainedPointer(&v6);
  return mediaplatform::CFRetainedPointer<__CFDictionary const*>::~CFRetainedPointer(&v7);
}

void sub_2150CD7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  mediaplatform::CFRetainedPointer<__CFDictionary const*>::~CFRetainedPointer(&a10);
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFDictionary const*>::~CFRetainedPointer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t mlcore::ContentRating::ratingLabel(mlcore::ContentRating *this)
{
  return (uint64_t)this + 24;
}

uint64_t mlcore::ContentRating::ratingSystemName(mlcore::ContentRating *this)
{
  return (uint64_t)this + 48;
}

uint64_t mlcore::ContentRating::ratingRank(mlcore::ContentRating *this)
{
  return *((void *)this + 9);
}

double mlcore::SecondsSinceReferenceDate(mlcore *this)
{
  return (double)(std::chrono::system_clock::now().__d_.__rep_ / 1000) / 1000.0 + -978307200.0;
}

void std::__shared_ptr_emplace<mediaplatform::SQLExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL mlcore::InPredicate<long long>::matches(uint64_t a1, void *a2)
{
  uint64_t v3 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  CFStringRef v4 = (void *)(a1 + 32);
  do
    CFStringRef v4 = (void *)*v4;
  while (v4 && v3 != v4[2]);
  return v4 != 0;
}

uint64_t mlcore::InPredicate<long long>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(__p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in [", 5);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    uint64_t v4 = a1 + 16;
  }
  CFTypeRef v5 = (void *)(v4 + 16);
  for (char i = 1; ; char i = 0)
  {
    CFTypeRef v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150CDBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::InPredicate<long long>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C46C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  JUMPOUT(0x2166B26F0);
}

BOOL mlcore::InPredicate<std::string>::matches(uint64_t a1, void *a2)
{
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v22, *a2 + 8, *(void *)(a1 + 8));
  uint64_t v3 = (uint64_t *)(a1 + 32);
  int v4 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  long long v5 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1;
  while (1)
  {
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      break;
    }
    if (*((char *)v3 + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v3[2], v3[3]);
    }
    else {
      std::string __p = *(std::string *)(v3 + 2);
    }
    std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
    }
    if (size == v8)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v4 < 0)
      {
        BOOL v19 = memcmp((const void *)v5, p_p, *((size_t *)&v5 + 1)) == 0;
      }
      else
      {
        if (!v4)
        {
          BOOL v19 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_28;
          }
          goto LABEL_31;
        }
        char v11 = &v22;
        uint64_t v12 = v7;
        do
        {
          int v14 = v11->__r_.__value_.__s.__data_[0];
          char v11 = (std::string *)((char *)v11 + 1);
          int v13 = v14;
          int v16 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v15 = v16;
          BOOL v18 = v12-- != 0;
          BOOL v19 = v13 == v15;
        }
        while (v13 == v15 && v18);
      }
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_28;
      }
LABEL_31:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v19) {
        break;
      }
    }
    else
    {
      BOOL v19 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_31;
      }
LABEL_28:
      if (v19) {
        break;
      }
    }
  }
  if (v4 < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v3 != 0;
}

void sub_2150CDDA8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::InPredicate<std::string>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 8) + 40))(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" in [", 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    uint64_t v4 = a1 + 16;
  }
  long long v5 = *(uint64_t **)(v4 + 16);
  if (v5)
  {
    char v6 = 1;
    do
    {
      if (*((char *)v5 + 39) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[2], v5[3]);
      }
      else {
        std::string __p = *(std::string *)(v5 + 2);
      }
      if ((v6 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &__p;
      }
      else {
        uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v6 = 0;
      long long v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v13);
}

void sub_2150CE050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::InPredicate<std::string>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C45B8;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 2));
  JUMPOUT(0x2166B26F0);
}

void mlcore::InPredicate<double>::_SQLExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    char v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v29, (uint64_t)&v6[1], v6);
    *(_OWORD *)std::string __p = v29;
    uint64_t v7 = *(void *)(a1 + 8);
    std::string::size_type v8 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v27 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v28);
    long long v35 = v28;
    long long v28 = 0uLL;
    char v31 = 0;
    unint64_t v32 = 0;
    uint64_t v30 = 0;
    *(void *)&long long v33 = &v30;
    BYTE8(v33) = 0;
    uint64_t v30 = (char *)operator new(0x20uLL);
    char v31 = v30;
    unint64_t v32 = v30 + 32;
    char v31 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)&v32, __p, v36, v30);
    for (uint64_t i = 3; i != -1; i -= 2)
    {
      CFTypeID v10 = (std::__shared_weak_count *)__p[i];
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "HashtableLookupDouble");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, (long long *)__p, (void **)&v30);
    *a3 = v33;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    uint64_t v30 = 0;
    char v31 = 0;
    unint64_t v32 = 0;
    for (uint64_t j = *(void **)(a1 + 32); j; uint64_t j = (void *)*j)
    {
      uint64_t v12 = j[2];
      uint64_t v13 = (std::__shared_weak_count *)operator new(0x28uLL);
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C99F8;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A18;
      v13[1].__shared_owners_ = v12;
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, (uint64_t)&v13[1], v13);
      long long v14 = v33;
      long long v33 = 0uLL;
      int v15 = v31;
      if (v31 >= v32)
      {
        long long v25 = v14;
        int64_t v17 = (v31 - v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (v32 - v30) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if ((unint64_t)(v32 - v30) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v36[0] = &v32;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        CFStringRef v21 = &v20[16 * v17];
        __p[0] = v20;
        __p[1] = v21;
        *((void *)&v35 + 1) = &v20[16 * v22];
        *(_OWORD *)CFStringRef v21 = v25;
        *(void *)&long long v35 = v21 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v30, __p);
        int v16 = v31;
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_OWORD *)char v31 = v14;
        int v16 = v15 + 16;
      }
      char v31 = v16;
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v26 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v23 + 96))(__p);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v33, v30, v31);
    LODWORD(v28) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v29, (uint64_t)__p[0], (std::__shared_weak_count *)__p[1], (int *)&v28, (uint64_t *)&v33);
    *a3 = v29;
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    __p[0] = &v30;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_2150CE4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,std::__shared_weak_count *a23,void *__p,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  a22 = &a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

BOOL mlcore::InPredicate<double>::matches(uint64_t a1, void *a2)
{
  double v3 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  uint64_t v4 = (double *)(a1 + 32);
  do
    uint64_t v4 = *(double **)v4;
  while (v4 && v3 != v4[2]);
  return v4 != 0;
}

uint64_t mlcore::InPredicate<double>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(__p);
  if ((v9 & 0x80u) == 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in [", 5);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    uint64_t v4 = a1 + 16;
  }
  long long v5 = (void *)(v4 + 16);
  for (char i = 1; ; char i = 0)
  {
    long long v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150CE874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::InPredicate<double>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4610;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  JUMPOUT(0x2166B26F0);
}

void *mlcore::InPredicate<double>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4610;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

BOOL mlcore::InPredicate<int>::matches(uint64_t a1, void *a2)
{
  int v3 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(void *)(a1 + 8));
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
    uint64_t v4 = (uint64_t *)*v4;
  while (v4 && v3 != *((_DWORD *)v4 + 4));
  return v4 != 0;
}

uint64_t mlcore::InPredicate<int>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(__p);
  if ((v9 & 0x80u) == 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in [", 5);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    uint64_t v4 = a1 + 16;
  }
  long long v5 = (void *)(v4 + 16);
  for (char i = 1; ; char i = 0)
  {
    long long v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if ((i & 1) == 0) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
    }
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v12);
}

void sub_2150CEBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void mlcore::InPredicate<int>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4668;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  JUMPOUT(0x2166B26F0);
}

void mlcore::InPredicate<mediaplatform::Data>::_SQLExpression(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X8>)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    char v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9A30;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3A60;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, (uint64_t)&v6[1], v6);
    long long v34 = v33;
    uint64_t v7 = *(void *)(a1 + 8);
    std::string::size_type v8 = (std::__shared_weak_count *)a2[1];
    void v30[2] = *a2;
    char v31 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v7 + 96))(&v32);
    long long v35 = v32;
    long long v32 = 0uLL;
    size_t __n = 0;
    v28[0] = 0;
    uint64_t v26 = 0;
    *(void *)&long long v29 = &v26;
    BYTE8(v29) = 0;
    uint64_t v26 = operator new(0x20uLL);
    size_t __n = (size_t)v26;
    v28[0] = v26 + 4;
    size_t __n = (size_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::SQLExpression const>>,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const> const*,std::shared_ptr<mediaplatform::SQLExpression const>*>((uint64_t)v28, &v34, v36, v26);
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      CFTypeID v10 = *(std::__shared_weak_count **)((char *)&v34 + i);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "HashtableLookupData");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v29, &v34, &v26);
    *a3 = v29;
    if (SBYTE7(v35) < 0) {
      operator delete((void *)v34);
    }
    *(void *)&long long v34 = &v26;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    long long v29 = 0uLL;
    v30[0] = 0;
    for (uint64_t j = *(uint64_t ***)(a1 + 32); j; uint64_t j = (uint64_t **)*j)
    {
      mediaplatform::Data::Data((mediaplatform::Data *)&v26, j[5], (size_t)j[3], 1);
      uint64_t v12 = (std::__shared_weak_count *)operator new(0x48uLL);
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9988;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C3988;
      mediaplatform::Data::Data((mediaplatform::Data *)&v12[1].__shared_owners_, (const void *)v28[1], __n, 1);
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v33, (uint64_t)&v12[1], v12);
      long long v13 = v33;
      long long v33 = 0uLL;
      uint64_t v14 = *((void *)&v29 + 1);
      if (*((void *)&v29 + 1) >= v30[0])
      {
        long long v24 = v13;
        uint64_t v16 = (uint64_t)(*((void *)&v29 + 1) - v29) >> 4;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (uint64_t)(v30[0] - v29) >> 3;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if (v30[0] - (void)v29 >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        v36[0] = v30;
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v18);
        long long v20 = &v19[16 * v16];
        *(void *)&long long v34 = v19;
        *((void *)&v34 + 1) = v20;
        *((void *)&v35 + 1) = &v19[16 * v21];
        *(_OWORD *)long long v20 = v24;
        *(void *)&long long v35 = v20 + 16;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__swap_out_circular_buffer(&v29, &v34);
        uint64_t v15 = *((void *)&v29 + 1);
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        **((_OWORD **)&v29 + 1) = v13;
        uint64_t v15 = v14 + 16;
      }
      *((void *)&v29 + 1) = v15;
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      mediaplatform::Data::~Data((mediaplatform::Data *)&v26);
    }
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = (std::__shared_weak_count *)a2[1];
    long long v25 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v22 + 96))(&v34);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v26, (char *)v29, *((char **)&v29 + 1));
    LODWORD(v32) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v33, v34, *((std::__shared_weak_count **)&v34 + 1), (int *)&v32, (uint64_t *)&v26);
    *a3 = v33;
    if (__n) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
    }
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    *(void *)&long long v34 = &v29;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
}

void sub_2150CF088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 120);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  a14 = (void **)&a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL mlcore::InPredicate<mediaplatform::Data>::matches(uint64_t a1, void *a2)
{
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v9, *a2 + 8, *(void *)(a1 + 8));
  uint64_t v3 = (uint64_t **)(a1 + 32);
  while (1)
  {
    uint64_t v3 = (uint64_t **)*v3;
    if (!v3) {
      break;
    }
    mediaplatform::Data::Data((mediaplatform::Data *)&v6, v3[5], (size_t)v3[3], 1);
    if (__n == v10)
    {
      int v4 = memcmp(__s1, __s2, __n);
      mediaplatform::Data::~Data((mediaplatform::Data *)&v6);
      if (!v4) {
        break;
      }
    }
    else
    {
      mediaplatform::Data::~Data((mediaplatform::Data *)&v6);
    }
  }
  mediaplatform::Data::~Data((mediaplatform::Data *)v9);
  return v3 != 0;
}

void sub_2150CF28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mediaplatform::Data::~Data((mediaplatform::Data *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<mediaplatform::Data>::description(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(__p);
  if ((v11 & 0x80u) == 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v3 = v11;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in [", 5);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  int v4 = *(uint64_t ***)(a1 + 32);
  if (v4)
  {
    char v5 = 1;
    do
    {
      mediaplatform::Data::Data((mediaplatform::Data *)__p, v4[5], (size_t)v4[3], 1);
      if ((v5 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
      }
      mediaplatform::Base16Representation((mediaplatform *)__p, &v9);
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v9;
      }
      else {
        uint64_t v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
      }
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v9.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v6, size);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      mediaplatform::Data::~Data((mediaplatform::Data *)__p);
      char v5 = 0;
      int v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v14);
}

void sub_2150CF4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void mlcore::InPredicate<mediaplatform::Data>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4560;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)(a1 + 2));
  JUMPOUT(0x2166B26F0);
}

void *mlcore::InPredicate<mediaplatform::Data>::~InPredicate(void *a1)
{
  *a1 = &unk_26C5C4560;
  int v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

void sub_2150CF670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *mlcore::InPredicateBase::InPredicateBase(void *this, mlcore::ModelPropertyBase *a2)
{
  *this = &unk_26C5C5CC8;
  this[1] = a2;
  return this;
}

uint64_t mlcore::InPredicate<long long>::InPredicate(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &unk_26C5C46C0;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(void *)__n128 result = &unk_26C5C46C0;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::InPredicate<long long>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::InPredicate<long long>::value(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(void *)(a1 + 64);
  }
  else {
    return a1 + 16;
  }
}

void *mlcore::InPredicate<long long>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt64");
}

void sub_2150CF7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<std::string>::InPredicate(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &unk_26C5C45B8;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(void *)__n128 result = &unk_26C5C45B8;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::InPredicate<std::string>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::InPredicate<std::string>::value(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(void *)(a1 + 64);
  }
  else {
    return a1 + 16;
  }
}

void *mlcore::InPredicate<std::string>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupString");
}

void mlcore::InPredicate<double>::InPredicate(uint64_t a1, uint64_t a2, double **a3)
{
  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<double>::InPredicate();
}

{
  unsigned char v3[40];

  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v3, *a3, a3[1]);
  mlcore::InPredicate<double>::InPredicate();
}

void sub_2150CF910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<double>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5C4610;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  int v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*(void *)(a3 + 24) >= 0x1F5uLL) {
    mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>();
  }
  if (v4 != (void *)a3)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
    for (uint64_t i = *(double **)(a3 + 16); i; uint64_t i = *(double **)i)
    {
      uint64_t v6 = operator new(0x18uLL);
      uint64_t v7 = v6;
      *(void *)uint64_t v6 = 0;
      double v8 = i[2];
      *((double *)v6 + 2) = v8;
      if (v8 == 0.0) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = *(void *)&v8;
      }
      *((void *)v6 + 1) = v9;
      inserted = std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__node_insert_multi_prepare((uint64_t)v4, v9, (double *)v6 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v4, v7, inserted);
    }
  }
  return a1;
}

void sub_2150CFA2C(_Unwind_Exception *a1)
{
  int v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

double *std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, double *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v13 = operator new(8 * *(void *)&prime);
      uint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      uint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            uint64_t v16 = (uint64_t **)i;
          }
          else
          {
            long long v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                long long v25 = v24;
                long long v24 = (uint64_t *)*v24;
              }
              while (v24 && *((double *)i + 2) == *((double *)v24 + 2));
              *uint64_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              uint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      long long v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  long long v28 = *(double **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    __n128 result = v28;
    long long v28 = *(double **)v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = *((void *)v28 + 1);
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = *((void *)v28 + 1);
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void sub_2150CFE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<double>::InPredicate(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &unk_26C5C4610;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(void *)__n128 result = &unk_26C5C4610;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::InPredicate<double>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::InPredicate<double>::value(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(void *)(a1 + 64);
  }
  else {
    return a1 + 16;
  }
}

void *mlcore::InPredicate<double>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupDouble");
}

void sub_2150CFF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<int>::InPredicate(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &unk_26C5C4668;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(void *)__n128 result = &unk_26C5C4668;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::InPredicate<int>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::InPredicate<int>::value(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(void *)(a1 + 64);
  }
  else {
    return a1 + 16;
  }
}

void *mlcore::InPredicate<int>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt");
}

void mlcore::InPredicate<mediaplatform::Data>::InPredicate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::InPredicate<mediaplatform::Data>::InPredicate();
}

{
  void *__p;

  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)&__p, *a3, a3[1]);
  mlcore::InPredicate<mediaplatform::Data>::InPredicate();
}

void sub_2150D0084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<mediaplatform::Data>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C5C4560;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*(void *)(a3 + 24) >= 0x1F5uLL) {
    mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>();
  }
  if (v4 != a3)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
    for (uint64_t i = *(uint64_t ***)(a3 + 16); i; uint64_t i = (uint64_t **)*i)
    {
      unint64_t v6 = (char *)operator new(0x38uLL);
      v8[0] = v6;
      v8[1] = a1 + 32;
      char v9 = 0;
      *(void *)unint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      mediaplatform::Data::Data((mediaplatform::Data *)(v6 + 16), i[5], (size_t)i[3], 1);
      char v9 = 1;
      *((void *)v6 + 1) = std::hash<mediaplatform::Data>::operator()(*((void *)v6 + 3), *((void **)v6 + 5));
      std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__node_insert_multi(v4, (uint64_t *)v6);
      v8[0] = 0;
      std::unique_ptr<std::__hash_node<mediaplatform::Data,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<mediaplatform::Data,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
    }
  }
  return a1;
}

void sub_2150D01C4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__node_insert_multi(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = std::hash<mediaplatform::Data>::operator()(a2[3], (void *)a2[5]);
  v2[1] = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_101;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_61;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_61;
    }
    if (prime)
    {
LABEL_101:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = operator new(8 * *(void *)&prime);
      char v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      unint64_t v44 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        uint64_t v43 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          uint64_t v23 = *(void *)&prime - 1;
          do
          {
            unint64_t v24 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= v23;
            }
            if (v24 == v16)
            {
              uint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v24))
            {
              long long v25 = *(void **)v22;
              if (*(void *)v22)
              {
                size_t v26 = *(void *)(v22 + 24);
                unint64_t v27 = (void *)v22;
                while (1)
                {
                  long long v28 = v25;
                  if (v25[3] != v26 || memcmp(*(const void **)(v22 + 40), (const void *)v25[5], v26)) {
                    break;
                  }
                  long long v25 = (void *)*v28;
                  unint64_t v27 = v28;
                  if (!*v28) {
                    goto LABEL_47;
                  }
                }
                long long v25 = v28;
                long long v28 = v27;
LABEL_47:
                uint64_t v23 = *(void *)&prime - 1;
              }
              else
              {
                long long v28 = (void *)v22;
              }
              *uint64_t v15 = (uint64_t)v25;
              *long long v28 = **(void **)(*(void *)a1 + 8 * v24);
              **(void **)(*(void *)a1 + 8 * v24) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v24) = v15;
              uint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v24;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v43;
        unint64_t v4 = v44;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        unint64_t v4 = v44;
      }
    }
    else
    {
      int v29 = *(void **)a1;
      *(void *)a1 = 0;
      if (v29) {
        operator delete(v29);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_61:
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v30.i16[0] = vaddlv_u8(v30);
  unint64_t v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    unint64_t v32 = v4;
    if (v5 <= v4) {
      unint64_t v32 = v4 % v5;
    }
  }
  else
  {
    unint64_t v32 = (v5 - 1) & v4;
  }
  BOOL v33 = *(uint64_t ***)(*(void *)a1 + 8 * v32);
  if (v33)
  {
    int v34 = *v33;
    if (*v33)
    {
      int v35 = 0;
      do
      {
        char v36 = (uint64_t **)v34;
        unint64_t v37 = v34[1];
        if (v31 > 1)
        {
          unint64_t v38 = v37;
          if (v37 >= v5) {
            unint64_t v38 = v37 % v5;
          }
        }
        else
        {
          unint64_t v38 = v37 & (v5 - 1);
        }
        if (v38 != v32) {
          break;
        }
        BOOL v40 = v37 == v4 && (v39 = v2[3], (uint64_t *)v39 == v36[3]) && memcmp(v36[5], (const void *)v2[5], v39) == 0;
        if (v35 & !v40) {
          break;
        }
        v35 |= v40;
        int v34 = *v36;
        BOOL v33 = v36;
      }
      while (*v36);
    }
  }
  unint64_t v41 = v2[1];
  if (v31 > 1)
  {
    if (v41 >= v5) {
      v41 %= v5;
    }
  }
  else
  {
    v41 &= v5 - 1;
  }
  if (!v33)
  {
    *uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v41) = a1 + 16;
    if (!*v2) {
      goto LABEL_97;
    }
    unint64_t v42 = *(void *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v42 >= v5) {
        v42 %= v5;
      }
    }
    else
    {
      v42 &= v5 - 1;
    }
LABEL_96:
    *(void *)(*(void *)a1 + 8 * v42) = v2;
    goto LABEL_97;
  }
  *uint64_t v2 = (uint64_t)*v33;
  *BOOL v33 = v2;
  if (*v2)
  {
    unint64_t v42 = *(void *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v42 >= v5) {
        v42 %= v5;
      }
    }
    else
    {
      v42 &= v5 - 1;
    }
    if (v42 != v41) {
      goto LABEL_96;
    }
  }
LABEL_97:
  ++*(void *)(a1 + 24);
}

void sub_2150D0710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<mediaplatform::Data>::InPredicate(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &unk_26C5C4560;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;

  *(void *)__n128 result = &unk_26C5C4560;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(_DWORD *)(result + 56) = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)(result + 64) = *(void *)(a3 + 8);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t mlcore::InPredicate<mediaplatform::Data>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::InPredicate<mediaplatform::Data>::value(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(void *)(a1 + 64);
  }
  else {
    return a1 + 16;
  }
}

void *mlcore::InPredicate<mediaplatform::Data>::_lookupFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupData");
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer(void)::__once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer(void)::__once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer(void)::__sharedPointer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::LibraryProperty>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::LibraryPropertyPropertyPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::LibraryPropertyPropertyPersistentID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::LibraryPropertyPropertyPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::LibraryPropertyPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyPersistentID(void)::$_0 &&>>()
{
}

void sub_2150D0B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::LibraryPropertyTable>::sharedInstance()
{
  {
    operator new();
  }
  return mediaplatform::Singleton<mlcore::LibraryPropertyTable>::sharedInstance(void)::_sharedInstance;
}

void sub_2150D0C5C(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::LibraryPropertyTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore20LibraryPropertyTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::LibraryPropertyTable **a1)
{
  char v2 = operator new(0x228uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = &unk_26C5CAC90;
  __n128 result = mlcore::LibraryPropertyTable::LibraryPropertyTable((mlcore::LibraryPropertyTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::LibraryPropertyTable *)v2;
  return result;
}

void sub_2150D0CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::LibraryPropertyTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::LibraryPropertyTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::LibraryPropertyTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mlcore::TypedEntityClass<mlcore::LibraryProperty>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::LibraryProperty>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::LibraryPropertyTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::LibraryProperty>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::entityType()
{
  return 8;
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::LibraryProperty>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  BOOL v8 = operator new(0x100uLL);
  v8[1] = 0;
  void v8[2] = 0;
  *BOOL v8 = &unk_26C5CA830;
  mlcore::LibraryProperty::LibraryProperty((mlcore::LibraryProperty *)(v8 + 3), a2);
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150D0F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::LibraryProperty>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::LibraryProperty>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::LibraryProperty::~LibraryProperty(mlcore::LibraryProperty *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::LibraryPropertyPropertySourceID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::LibraryPropertyPropertySourceID(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::LibraryPropertyPropertySourceID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertySourceID(void)::$_0 &&>>);
  }
  return mlcore::LibraryPropertyPropertySourceID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertySourceID(void)::$_0 &&>>()
{
}

void sub_2150D12D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LibraryPropertyPropertyKey(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::LibraryPropertyPropertyKey(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::LibraryPropertyPropertyKey(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyKey(void)::$_0 &&>>);
  }
  return mlcore::LibraryPropertyPropertyKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyKey(void)::$_0 &&>>()
{
}

void sub_2150D158C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::LibraryPropertyPropertyValue(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::LibraryPropertyPropertyValue(void)::once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::LibraryPropertyPropertyValue(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyValue(void)::$_0 &&>>);
  }
  return mlcore::LibraryPropertyPropertyValue(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LibraryPropertyPropertyValue(void)::$_0 &&>>()
{
}

void sub_2150D1820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double mlcore::LibraryProperty::LibraryProperty(mlcore::LibraryProperty *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C5D90;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 1) = &unk_26C5C4EE8;
  *((void *)this + 27) = &unk_26C5C4F10;
  *((void *)this + 28) = a2;
  *(void *)this = &unk_26C5C5D90;
  return result;
}

uint64_t mlcore::LibraryProperty::LibraryProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v8 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(void *)(a1 + 8) = &unk_26C5C4EE8;
  *(void *)(a1 + 216) = &unk_26C5C4F10;
  *(void *)(a1 + 224) = 0;
  *(void *)a1 = &unk_26C5C5D90;
  unint64_t v14 = mlcore::LibraryPropertyPropertySourceID((mlcore *)a1);
  unint64_t v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v8, v14, &v14);
  *((void *)v9 + 3) = a2;
  std::string::size_type v10 = mlcore::LibraryPropertyPropertyKey(v9);
  mlcore::Entity::setValueForProperty<std::string>(a1, a3, v10);
  std::string::size_type v12 = mlcore::LibraryPropertyPropertyValue(v11);
  mlcore::Entity::setValueForProperty<std::string>(a1, a4, v12);
  return a1;
}

{
  uint64_t v8;
  mlcore *v9;
  std::string::size_type v10;
  mlcore *v11;
  std::string::size_type v12;
  unint64_t v14;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v8 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(void *)(a1 + 8) = &unk_26C5C4EE8;
  *(void *)(a1 + 216) = &unk_26C5C4F10;
  *(void *)(a1 + 224) = 0;
  *(void *)a1 = &unk_26C5C5D90;
  unint64_t v14 = mlcore::LibraryPropertyPropertySourceID((mlcore *)a1);
  unint64_t v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v8, v14, &v14);
  *((void *)v9 + 3) = a2;
  std::string::size_type v10 = mlcore::LibraryPropertyPropertyKey(v9);
  mlcore::Entity::setValueForProperty<std::string>(a1, a3, v10);
  std::string::size_type v12 = mlcore::LibraryPropertyPropertyValue(v11);
  mlcore::Entity::setValueForProperty<std::string>(a1, a4, v12);
  return a1;
}

void sub_2150D1B04(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

void sub_2150D1C5C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::LibraryProperty::sourceID(mlcore::LibraryProperty *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::LibraryPropertyPropertySourceID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::LibraryProperty::setSourceID(mlcore::LibraryProperty *this, uint64_t a2)
{
  unint64_t v5 = mlcore::LibraryPropertyPropertySourceID(this);
  double result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::LibraryProperty::key(mlcore::LibraryProperty *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = (mlcore::ModelPropertyBase *)mlcore::LibraryPropertyPropertyKey(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::LibraryProperty::setKey(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::LibraryPropertyPropertyKey(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::LibraryProperty::value(mlcore::LibraryProperty *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::LibraryPropertyPropertyValue(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::LibraryProperty::setValue(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::LibraryPropertyPropertyValue(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mediaplatform::DatabaseConnection::~DatabaseConnection(mediaplatform::DatabaseConnection *this)
{
  mediaplatform::DatabaseConnection::close(this);
  if (*((void *)this + 37))
  {
    std::vector<std::weak_ptr<mediaplatform::DatabaseStatement>>::__clear[abi:ne180100]((uint64_t *)this + 37);
    operator delete(*((void **)this + 37));
  }
  std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear((void *)this + 34);
  std::__hash_table<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>>>::__deallocate_node(*((void **)this + 31));
  char v2 = (void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((void *)this + 20))
  {
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100]((uint64_t *)this + 20);
    operator delete(*((void **)this + 20));
  }
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 14);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 10);
  std::__function::__value_func<void ()(mediaplatform::DatabaseConnection &)>::~__value_func[abi:ne180100]((void *)this + 6);
  *((void *)this + 1) = &unk_26C5BF338;
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t mediaplatform::DatabaseConnection::close(mediaplatform::DatabaseConnection *this)
{
  if (*((void *)this + 32))
  {
    std::__hash_table<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>>>::__deallocate_node(*((void **)this + 31));
    *((void *)this + 31) = 0;
    uint64_t v2 = *((void *)this + 30);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*((void *)this + 29) + 8 * i) = 0;
    }
    *((void *)this + 32) = 0;
  }
  std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear((void *)this + 34);
  *((void *)this + 28) = 0;
  uint64_t v4 = *((void *)this + 37);
  for (uint64_t j = *((void *)this + 38); v4 != j; v4 += 16)
  {
    float v6 = *(std::__shared_weak_count **)(v4 + 8);
    if (v6)
    {
      float v7 = *(sqlite3_stmt ***)v4;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = std::__shared_weak_count::lock(v6);
      if (v8)
      {
        unint64_t v9 = v8;
        if (v7) {
          mediaplatform::DatabaseStatement::finalize(v7);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::vector<std::weak_ptr<mediaplatform::DatabaseStatement>>::__clear[abi:ne180100]((uint64_t *)this + 37);
  if (*(void *)this)
  {
    if (sqlite3_close(*(sqlite3 **)this))
    {
      mediaplatform::DatabaseConnection::_currentSQLiteError((sqlite3 **)this, (uint64_t)v13);
      exceptiouint64_t n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v13);
    }
    *(void *)this = 0;
    *((unsigned char *)this + 144) = 0;
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  }
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    unint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v11();
  }
  return result;
}

void sub_2150D20D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void std::__hash_table<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<mediaplatform::DatabaseStatement>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

double mediaplatform::DatabaseConnection::_currentSQLiteError@<D0>(sqlite3 **this@<X0>, uint64_t a2@<X8>)
{
  LODWORD(v9[0]) = 36;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition(a2, (int *)v9, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*this)
  {
    unsigned int v4 = sqlite3_errcode(*this);
    unsigned int v15 = v4;
    if (v4)
    {
      if (v4 > 0x1A) {
        int v6 = 36;
      }
      else {
        int v6 = *(_DWORD *)&asc_21512018C[4 * v4 - 4];
      }
      int v14 = v6;
      std::string::basic_string[abi:ne180100]<0>(v9, "");
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)&__p, &v14, (long long *)v9);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(_DWORD *)(a2 + 32) = v12;
      float v7 = (void **)(a2 + 40);
      std::string::operator=((std::string *)(a2 + 40), &v13);
      mediaplatform::PlatformErrorCondition::~PlatformErrorCondition((std::exception *)&__p);
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      uint64_t v8 = sqlite3_errmsg(*this);
      v9[0] = &v8;
      v9[1] = &v15;
      memset(&__p, 0, sizeof(__p));
      mediaplatform::FormatImplementation<int,char const*>((std::string *)"SQLite Error {0}: {1}", &__p, 0, (uint64_t)v9);
      if (*(char *)(a2 + 63) < 0) {
        operator delete(*v7);
      }
      double result = *(double *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)float v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(a2 + 56) = *((void *)&__p.__r_.__value_.__l + 2);
    }
  }
  else
  {
    MEMORY[0x2166B2280](a2 + 40, "Database connection lost or invalid.");
  }
  return result;
}

void sub_2150D235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v22);
  _Unwind_Resume(a1);
}

void sub_2150D23B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2150D23B0);
}

void mediaplatform::FormatImplementation<int,char const*>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    BOOL v33 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    BOOL v33 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    BOOL v33 = v9 + 2;
    int v22 = v9[2];
    if ((v22 - 48) > 9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = v9 + 3;
      do
      {
        long long v25 = v24;
        BOOL v33 = v24;
        uint64_t v23 = (v22 - 48) + 10 * v23;
        ++v24;
        int v27 = *v25;
        size_t v26 = (unsigned __int8 *)(v25 - 1);
        int v22 = v27;
      }
      while ((v27 - 58) >= 0xFFFFFFF6);
      BOOL v33 = (char *)(v26 + 2);
      if (*(v24 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,int,char const*>::formatOptionsAtIndex<int,char const*>(v23);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v29, (const char **)&v33);
  int v12 = v33;
  if (*((void *)&v29 + 1))
  {
    if (*((void *)&v29 + 1) != 1) {
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*>>();
    }
    std::string v13 = **(const char ***)a4;
    v34[0] = (uint64_t)v13;
    if (v13) {
      std::string v13 = (const char *)strlen(v13);
    }
    v34[1] = (uint64_t)v13;
    long long v35 = v29;
    long long v36 = v30;
    long long v37 = v31;
    uint64_t v38 = v32;
    int v14 = (const char *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1) <= (unint64_t)v13) {
      int v14 = v13;
    }
    if ((_BYTE)v30) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v13;
    }
    mediaplatform::FormatImplementation<int,char const*>(v33, a2, &v15[i], a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = a2;
    }
    else {
      unint64_t v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(&v29, (unsigned char *)v16 + i, (uint64_t)v34);
  }
  else
  {
    mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)v34, **(_DWORD **)(a4 + 8), (uint64_t)&v29);
    if ((_BYTE)v37 && !*(unsigned char *)(v34[0] + 48)) {
      uint64_t v17 = 32;
    }
    else {
      uint64_t v17 = 33;
    }
    unint64_t v18 = v17 - *((void *)&v36 + 1);
    if (*(unsigned char *)(v34[0] + 50) && v18 <= *(void *)(v34[0] + 24)) {
      unint64_t v18 = *(void *)(v34[0] + 24);
    }
    unint64_t v19 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1) <= v18) {
      unint64_t v19 = v18;
    }
    if ((_BYTE)v30) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v18;
    }
    mediaplatform::FormatImplementation<int,char const*>(v12, a2, v20 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = (char *)a2;
    }
    else {
      uint64_t v21 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v29, &v21[i], v34);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150D271C(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,int,char const*>::formatOptionsAtIndex<int,char const*>(uint64_t a1)
{
  if (!a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,char const*>::formatOptionsAtIndex<int,char const*>(a1);
}

void sub_2150D278C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*>>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150D27E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,char const*>::formatOptionsAtIndex<int,char const*>(uint64_t a1)
{
  if (a1 == 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<int,char const*>();
}

void sub_2150D2850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<int,char const*>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150D28AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseConnection::createInMemoryDatabase(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x158uLL);
  v3[1] = 0;
  uint64_t v3[2] = 0;
  *uint64_t v3 = &unk_26C5BF6A8;
  std::string::basic_string[abi:ne180100]<0>(&__p, ":memory:");
  mediaplatform::DatabaseConnection::DatabaseConnection((uint64_t)(v3 + 3), &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v3 + 3;
  a1[1] = v3;
}

void sub_2150D2958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

BOOL mediaplatform::DatabaseConnection::isOpen(mediaplatform::DatabaseConnection *this)
{
  return *((unsigned char *)this + 144) && *(void *)this != 0;
}

uint64_t mediaplatform::DatabaseConnection::isReadOnly(mediaplatform::DatabaseConnection *this)
{
  return *((unsigned __int8 *)this + 145);
}

std::string *mediaplatform::DatabaseConnection::databasePath@<X0>(long long **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5BF338;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 8), this[2], this[3], 0xAAAAAAAAAAAAAAABLL * (((char *)this[3] - (char *)this[2]) >> 3));
}

uint64_t mediaplatform::DatabaseConnection::journalingMode(mediaplatform::DatabaseConnection *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t mediaplatform::DatabaseConnection::setJournalingMode(mediaplatform::DatabaseConnection *a1, int a2)
{
  *((_DWORD *)a1 + 10) = a2;
  return mediaplatform::DatabaseConnection::close(a1);
}

uint64_t mediaplatform::DatabaseConnection::shouldCachePreparedStatements(mediaplatform::DatabaseConnection *this)
{
  return *((unsigned __int8 *)this + 146);
}

uint64_t mediaplatform::DatabaseConnection::setShouldCachePreparedStatements(uint64_t this, char a2)
{
  *(unsigned char *)(this + 146) = a2;
  return this;
}

uint64_t mediaplatform::DatabaseConnection::delegateCallbacks(mediaplatform::DatabaseConnection *this)
{
  return (uint64_t)this + 48;
}

uint64_t mediaplatform::DatabaseConnection::currentUserVersion(mediaplatform::DatabaseConnection *this)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26C5BF6E0;
  std::string::basic_string[abi:ne180100]<0>(__p, "user_version");
  *((void *)v2 + 3) = &unk_26C5BEDF0;
  uint64_t v3 = (std::string *)(v2 + 32);
  if (SHIBYTE(v12) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v4 = SHIBYTE(v12);
    *((void *)v2 + 8) = 0;
    *((void *)v2 + 9) = 0;
    *((void *)v2 + 7) = 0;
    v2[84] = 0;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)v2 + 6) = v12;
    *((void *)v2 + 8) = 0;
    *((void *)v2 + 9) = 0;
    *((void *)v2 + 7) = 0;
    v2[84] = 0;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  mediaplatform::DatabaseConnection::executeQueryStatement<int>((uint64_t *)__p, this, (uint64_t)(v2 + 24));
  unint64_t v5 = __p[0];
  int v6 = sqlite3_step(*((sqlite3_stmt **)__p[0] + 3));
  mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)v5, v6);
  *((_DWORD *)v5 + 14) = v6;
  if (v6 != 100)
  {
    if (v6 != -1)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "no column data exists for statement");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  uint64_t v8 = sqlite3_column_int(*((sqlite3_stmt **)v5 + 3), 0);
  int v9 = sqlite3_reset(*((sqlite3_stmt **)v5 + 3));
  mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)v5, v9);
  *((_DWORD *)v5 + 14) = -1;
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  return v8;
}

void sub_2150D2C80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  __cxa_end_catch();
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_2150D2CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseConnection::_handleStatementPrepareError(uint64_t a1, const mediaplatform::PlatformErrorCondition *a2)
{
  exceptiouint64_t n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, a2);
}

void sub_2150D2D80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::_removeEntry(void *a1, void *a2)
{
  int v4 = (uint64_t *)a2[7];
  a1[2] -= v4[3];
  uint64_t v5 = *v4;
  *(void *)(v5 + 8) = v4[1];
  *(void *)v4[1] = v5;
  --a1[10];
  operator delete(v4);
  int8x8_t v6 = (int8x8_t)a1[4];
  unint64_t v7 = a2[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v6) {
      v7 %= *(void *)&v6;
    }
  }
  else
  {
    v7 &= *(void *)&v6 - 1;
  }
  uint64_t v9 = a1[3];
  char v10 = *(void **)(v9 + 8 * v7);
  do
  {
    int v11 = v10;
    char v10 = (void *)*v10;
  }
  while (v10 != a2);
  if (v11 == a1 + 5) {
    goto LABEL_18;
  }
  unint64_t v12 = v11[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
  }
  else
  {
    v12 &= *(void *)&v6 - 1;
  }
  if (v12 != v7)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(*a2 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v7) {
LABEL_19:
    }
      *(void *)(v9 + 8 * v7) = 0;
  }
  uint64_t v14 = *a2;
  if (*a2)
  {
    unint64_t v15 = *(void *)(v14 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v6) {
        v15 %= *(void *)&v6;
      }
    }
    else
    {
      v15 &= *(void *)&v6 - 1;
    }
    if (v15 != v7)
    {
      *(void *)(a1[3] + 8 * v15) = v11;
      uint64_t v14 = *a2;
    }
  }
  *int v11 = v14;
  *a2 = 0;
  --a1[6];
  v16[0] = a2;
  v16[1] = a1 + 5;
  char v17 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
}

uint64_t std::pair<std::string const,mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Entry>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::SQLPragmaStatement<int>::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  if (v4) {
    mediaplatform::FormatString<std::string,std::string>(&__p, (std::string *)"PRAGMA {0}.{1}", a1 + 32, a1 + 8);
  }
  else {
    mediaplatform::FormatString<std::string>(&__p, (std::string *)"PRAGMA {0}", a1 + 8);
  }
  *a2 = __p;
  if (*(unsigned char *)(a1 + 60))
  {
    mediaplatform::FormatString<int>(&__p, (std::string *)" = {0}", (int *)(a1 + 56));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2150D30E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLPragmaStatement<int>::~SQLPragmaStatement(uint64_t a1)
{
  *(void *)a1 = &unk_26C5BEDF0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::SQLPragmaStatement<int>::~SQLPragmaStatement(uint64_t a1)
{
  *(void *)a1 = &unk_26C5BEDF0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLPragmaStatement<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLPragmaStatement<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLPragmaStatement<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

sqlite3_int64 mediaplatform::DatabaseConnection::lastInsertionRowID(sqlite3 **this)
{
  return sqlite3_last_insert_rowid(*this);
}

BOOL mediaplatform::DatabaseConnection::isInTransaction(mediaplatform::DatabaseConnection *this)
{
  return *((_DWORD *)this + 37) != 0;
}

void std::__shared_ptr_emplace<mediaplatform::SQLBeginTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBeginTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLRollbackTransactionStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLRollbackTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLRollbackTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCommitTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCommitTransactionStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5BF788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void mediaplatform::DatabaseConnection::popToRootTransaction(mediaplatform::DatabaseConnection *this, int a2)
{
  if (*((_DWORD *)this + 37))
  {
    mediaplatform::DatabaseConnection::_internalEndTransaction(this, a2);
    *((_DWORD *)this + 37) = 0;
    *((unsigned char *)this + 152) = 0;
  }
}

void mediaplatform::DatabaseConnection::performTransaction(mediaplatform::DatabaseConnection *a1, uint64_t a2, int a3)
{
  mediaplatform::DatabaseConnection::pushTransaction((uint64_t)a1, a3);
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  mediaplatform::DatabaseConnection::popTransaction(a1, v6);
}

void *mediaplatform::_DatabaseConnectionFunctionSQLiteCallback(mediaplatform *this, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  int v5 = (int)a2;
  uint64_t v28 = *MEMORY[0x263EF8340];
  double result = sqlite3_user_data(this);
  if (result)
  {
    uint64_t v21 = this;
    std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)(result + 4));
    std::string __p = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    if (v5 >= 1)
    {
      uint8x8_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = *(void *)(a3 + 8 * v9);
        if (v8 >= v24)
        {
          unint64_t v13 = (char *)__p;
          uint64_t v14 = (v8 - (unsigned char *)__p) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v24 - (unsigned char *)__p;
          if ((v24 - (unsigned char *)__p) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v18 = (char *)operator new(8 * v17);
          }
          else
          {
            unint64_t v18 = 0;
          }
          unint64_t v19 = &v18[8 * v14];
          *(void *)unint64_t v19 = v11;
          unint64_t v12 = v19 + 8;
          if (v8 != v13)
          {
            do
            {
              uint64_t v20 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v19 - 1) = v20;
              v19 -= 8;
            }
            while (v8 != v13);
            uint8x8_t v8 = (char *)__p;
          }
          std::string __p = v19;
          uint64_t v23 = v12;
          unint64_t v24 = &v18[8 * v17];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(void *)uint8x8_t v8 = v11;
          unint64_t v12 = v8 + 8;
        }
        uint64_t v23 = v12;
        ++v9;
        uint8x8_t v8 = (char *)v12;
      }
      while (v9 != v10);
    }
    long long v25 = v21;
    if (!v27) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, mediaplatform **, void **))(*(void *)v27 + 48))(v27, &v25, &__p);
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
    return std::__function::__value_func<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::~__value_func[abi:ne180100](v26);
  }
  return result;
}

void sub_2150D36BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void *mediaplatform::DatabaseConnection::registeredDatabaseIndices@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (char *)this[23];
  uint64_t v3 = (char *)this[24];
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    this = operator new(v3 - v2);
    *a2 = this;
    a2[1] = this;
    a2[2] = &this[2 * (v4 >> 4)];
    do
    {
      *this = *(void *)v2;
      uint64_t v6 = *((void *)v2 + 1);
      this[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      this += 2;
      v2 += 16;
    }
    while (v2 != v3);
    a2[1] = this;
  }
  return this;
}

void sub_2150D37A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mediaplatform::DatabaseConnection::explainQuery(mediaplatform::DatabaseConnection *a1@<X0>, void *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  std::operator+<char>();
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(a1);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)a1, (unsigned __int8 *)&v17, &v31);
  uint64_t v5 = v31;
  uint64_t v4 = v32;
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v39[0] = &unk_26C5BF588;
  v39[1] = a2;
  v39[3] = v39;
  char v30 = 0;
  while (1)
  {
    int v6 = sqlite3_step(*(sqlite3_stmt **)(v5 + 24));
    mediaplatform::DatabaseStatement::_checkSQLiteResult(v5, v6);
    *(_DWORD *)(v5 + 56) = v6;
    if (v6 != 100) {
      break;
    }
    memset(&v29, 0, sizeof(v29));
    uint64_t v31 = v5;
    LODWORD(v27) = sqlite3_column_int(*(sqlite3_stmt **)(v5 + 24), 0);
    HIDWORD(v27) = sqlite3_column_int(*(sqlite3_stmt **)(v5 + 24), 1);
    LODWORD(v32) = 3;
    int v28 = sqlite3_column_int(*(sqlite3_stmt **)(v5 + 24), 2);
    mediaplatform::ColumnResultsFunctor::operator()<std::string>(&v31, (uint64_t)&v29);
    uint64_t v23 = v27;
    int v7 = v28;
    int v24 = v28;
    int v8 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
    uint64_t v16 = v4;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      int v7 = v24;
    }
    else
    {
      std::string v25 = v29;
    }
    size_t v26 = &v30;
    uint64_t v19 = v23;
    int v20 = v7;
    int v9 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v21, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else {
      std::string v21 = v25;
    }
    int v22 = &v30;
    std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::__value_func[abi:ne180100]((uint64_t)v40, (uint64_t)v39);
    uint64_t v31 = v19;
    LODWORD(v32) = v20;
    int v15 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v21;
    }
    int v34 = &v30;
    std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v40);
    int v10 = v31;
    int v11 = HIDWORD(v31);
    int v12 = (int)v32;
    int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v35 = __p;
    }
    int v37 = v11;
    int v38 = v10;
    int v36 = v12;
    if (!v42) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, int *, int *, int *, std::string *, char *))(*(void *)v42 + 48))(v42, &v38, &v37, &v36, &v35, &v30);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::~__value_func[abi:ne180100](v41);
    if (v13 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::~__value_func[abi:ne180100](v40);
    if (v15 < 0)
    {
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_24:
        if (v8 < 0) {
          goto LABEL_29;
        }
        goto LABEL_25;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v8 < 0) {
LABEL_29:
    }
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_25:
    uint64_t v4 = v16;
    if (v30) {
      goto LABEL_32;
    }
  }
  if (v6 == -1) {
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  char v30 = 1;
LABEL_32:
  int v14 = sqlite3_reset(*(sqlite3_stmt **)(v5 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v5, v14);
  *(_DWORD *)(v5 + 56) = -1;
  std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::~__value_func[abi:ne180100](v39);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
}

void sub_2150D3C24()
{
  __cxa_free_exception(v0);
  __cxa_end_catch();
  JUMPOUT(0x2150D3D2CLL);
}

void sub_2150D3C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2150D3D08()
{
}

void sub_2150D3D10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2150D3D2CLL);
}

void *std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(int,int,int,std::string,BOOL &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform18DatabaseConnection12explainQueryERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int v6 = *a2;
  int v7 = *a3;
  int v8 = *a4;
  *(_OWORD *)int v11 = *(_OWORD *)a5;
  uint64_t v12 = *(void *)(a5 + 16);
  __p.__r_.__value_.__r.__words[0] = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  int v16 = v6;
  int v14 = v8;
  int v15 = v7;
  v17[0] = v11;
  v17[1] = &v14;
  void v17[2] = &v15;
  v17[3] = &v16;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  mediaplatform::FormatImplementation<int,int,int,std::string>((std::string *)"{0}|{1}|{2}|{3}\n", &__p, 0, (uint64_t)v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(*(std::string **)(a1 + 8), (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_2150D3F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<int,int,int,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    uint64_t v39 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    uint64_t v39 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v39 = v9 + 2;
    int v28 = v9[2];
    if ((v28 - 48) > 9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v29 = 0;
      char v30 = v9 + 3;
      do
      {
        uint64_t v31 = v30;
        uint64_t v39 = v30;
        uint64_t v29 = (v28 - 48) + 10 * v29;
        ++v30;
        int v33 = *v31;
        uint64_t v32 = (unsigned __int8 *)(v31 - 1);
        int v28 = v33;
      }
      while ((v33 - 58) >= 0xFFFFFFF6);
      uint64_t v39 = (char *)(v32 + 2);
      if (*(v30 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,int,int,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(v29);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v35, (const char **)&v39);
  uint64_t v12 = v39;
  switch(*((void *)&v35 + 1))
  {
    case 0:
      mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v40, **(_DWORD **)(a4 + 24), (uint64_t)&v35);
      if (BYTE8(v43) && !*(unsigned char *)(v40 + 48)) {
        uint64_t v13 = 32;
      }
      else {
        uint64_t v13 = 33;
      }
      unint64_t v23 = v13 - v43;
      if (*(unsigned char *)(v40 + 50) && v23 <= *(void *)(v40 + 24)) {
        unint64_t v23 = *(void *)(v40 + 24);
      }
      unint64_t v24 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v23) {
        unint64_t v24 = v23;
      }
      if ((_BYTE)v36) {
        unint64_t v22 = v24;
      }
      else {
        unint64_t v22 = v23;
      }
      goto LABEL_61;
    case 1:
      mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v40, **(_DWORD **)(a4 + 16), (uint64_t)&v35);
      if (BYTE8(v43) && !*(unsigned char *)(v40 + 48)) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = 33;
      }
      unint64_t v25 = v17 - v43;
      if (*(unsigned char *)(v40 + 50) && v25 <= *(void *)(v40 + 24)) {
        unint64_t v25 = *(void *)(v40 + 24);
      }
      unint64_t v26 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v25) {
        unint64_t v26 = v25;
      }
      if ((_BYTE)v36) {
        unint64_t v22 = v26;
      }
      else {
        unint64_t v22 = v25;
      }
      goto LABEL_61;
    case 2:
      mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v40, **(_DWORD **)(a4 + 8), (uint64_t)&v35);
      if (BYTE8(v43) && !*(unsigned char *)(v40 + 48)) {
        uint64_t v14 = 32;
      }
      else {
        uint64_t v14 = 33;
      }
      unint64_t v20 = v14 - v43;
      if (*(unsigned char *)(v40 + 50) && v20 <= *(void *)(v40 + 24)) {
        unint64_t v20 = *(void *)(v40 + 24);
      }
      unint64_t v21 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v20) {
        unint64_t v21 = v20;
      }
      if ((_BYTE)v36) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v20;
      }
LABEL_61:
      mediaplatform::FormatImplementation<int,int,int,std::string>(v12, a2, v22 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = (char *)a2;
      }
      else {
        uint64_t v27 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v35, &v27[i], &v40);
      break;
    case 3:
      uint64_t v15 = *(void *)a4;
      uint64_t v40 = v15;
      long long v41 = v35;
      long long v42 = v36;
      long long v43 = v37;
      uint64_t v44 = v38;
      if (*(char *)(v15 + 23) < 0) {
        unint64_t v16 = *(void *)(v15 + 8);
      }
      else {
        unint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      }
      unint64_t v18 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) <= v16) {
        unint64_t v18 = v16;
      }
      if ((_BYTE)v36) {
        unint64_t v16 = v18;
      }
      mediaplatform::FormatImplementation<int,int,int,std::string>(v39, a2, v16 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = (char *)a2;
      }
      else {
        uint64_t v19 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v35, &v19[i], (uint64_t)&v40);
      break;
    default:
      mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,int,int,std::string>>();
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150D443C(_Unwind_Exception *exception_object)
{
}

void mediaplatform::FormatterParameters<0ul,int,int,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(uint64_t a1)
{
  if (!a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul,int,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(a1);
}

void sub_2150D44BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,int,int,std::string>>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150D4518(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,int,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(uint64_t a1)
{
  if (a1 == 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<2ul,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(a1);
}

void sub_2150D4580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,int,std::string>::formatOptionsAtIndex<int,int,int,std::string>(uint64_t a1)
{
  if (a1 == 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<int,int,int,std::string>(a1);
}

void sub_2150D45E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<int,int,int,std::string>(uint64_t a1)
{
  if (a1 == 3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<int,int,int,std::string>();
}

void sub_2150D4650(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<int,int,int,std::string>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150D46AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5BF588;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26C5BF588;
  result[1] = v3;
  return result;
}

void std::__function::__func<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0,std::allocator<mediaplatform::DatabaseConnection::explainQuery(std::string const&)::$_0>,void ()(int,int,int,std::string,BOOL &)>::~__func()
{
}

uint64_t mediaplatform::DatabaseConnection::_handleBusyLock(mediaplatform::DatabaseConnection *this, unsigned int a2)
{
  if (a2 >= 0xA && *((_DWORD *)this + 10) == 1) {
    return 1;
  }
  __ns.__rep_ = 1000000000;
  std::this_thread::sleep_for (&__ns);
  return 0;
}

uint64_t mediaplatform::DatabaseConnection::_executeStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = sqlite3_step(*(sqlite3_stmt **)(*a2 + 24));
  uint64_t result = mediaplatform::DatabaseStatement::_checkSQLiteResult(v2, v3);
  *(_DWORD *)(v2 + 56) = v3;
  return result;
}

void mediaplatform::DatabaseConnection::_handleStatementExecutionError(uint64_t a1, const mediaplatform::PlatformErrorCondition *a2)
{
  if (*((_DWORD *)a2 + 2) == 20)
  {
    *(_DWORD *)(a1 + 148) = 0;
    *(unsigned char *)(a1 + 152) = 0;
  }
  exceptiouint64_t n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, a2);
}

void sub_2150D497C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseConnection::_internalCreateModule(mediaplatform::DatabaseConnection *this, sqlite3 *db, const char *zName, sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  return sqlite3_create_module_v2(db, zName, p, pClientData, xDestroy);
}

void *mlcore::PersistentStringFromMediaType@<X0>(mlcore *this@<X0>, void *a2@<X8>)
{
  if ((int)this > 255)
  {
    if ((int)this > 2047)
    {
      switch(this)
      {
        case 0x800:
          uint64_t v2 = "MediaTypeMovie";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
        case 0x2000:
          uint64_t v2 = "MediaTypeHomeVideo";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
        case 0x1000:
          uint64_t v2 = "MediaTypeVideoITunesU";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
    else
    {
      switch(this)
      {
        case 0x100:
          uint64_t v2 = "MediaTypeVideoPodcast";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
        case 0x200:
          uint64_t v2 = "MediaTypeTVShow";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
        case 0x400:
          uint64_t v2 = "MediaTypeMusicVideo";
          return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
LABEL_20:
    uint64_t v2 = "(unknown)";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  switch((int)this)
  {
    case 1:
      uint64_t v2 = "MediaTypeMusicQuiz";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 2:
      uint64_t v2 = "MediaTypeAudioBook";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_20;
    case 4:
      uint64_t v2 = "MediaTypePodcast";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 8:
      uint64_t v2 = "MediaTypeSong";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    default:
      if (this == 16)
      {
        uint64_t v2 = "MediaTypeVoiceMemo";
      }
      else
      {
        if (this != 32) {
          goto LABEL_20;
        }
        uint64_t v2 = "MediaTypeITunesUAudio";
      }
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void mlcore::StringFromMediaType(mlcore *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    if (this == 0xFFFFFF)
    {
      std::string::basic_string[abi:ne180100]<0>(&__v, "MediaTypeAny");
      mlcore::_stringForEnumWithStringDesc((uint64_t)a2, 0xFFFFFFLL, (uint64_t)&__v);
      goto LABEL_5;
    }
    memset(&v127, 0, sizeof(v127));
    if ((~this & 0xFF00) != 0)
    {
      if (((unsigned __int16)this & 0x100) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "VideoPodcast");
        std::vector<std::string>::pointer end = v127.__end_;
        if (v127.__end_ >= v127.__end_cap_.__value_)
        {
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v12) {
            unint64_t v12 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v12;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
          if (v13) {
            unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = (std::string *)(v13 + 24 * v11);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
          long long v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          std::string::size_type v126 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
          uint64_t v17 = v127.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v127.__end_ = v17;
          if (SHIBYTE(v126) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)__p;
          v127.__end_->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
          v127.__end_ = end + 1;
        }
      }
      if (((unsigned __int16)this & 0x1000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "VideoITunesU");
        std::vector<std::string>::pointer v18 = v127.__end_;
        if (v127.__end_ >= v127.__end_cap_.__value_)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v21) {
            unint64_t v21 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v21;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (std::string *)(v22 + 24 * v20);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v22;
          __v.__begin_ = v24;
          __v.__end_cap_.__value_ = (std::string *)(v22 + 24 * v23);
          long long v25 = *(_OWORD *)__p;
          v24->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          __p[1] = 0;
          std::string::size_type v126 = 0;
          __p[0] = 0;
          __v.__end_ = v24 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
          unint64_t v26 = v127.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v127.__end_ = v26;
          if (SHIBYTE(v126) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v19 = *(_OWORD *)__p;
          v127.__end_->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          v127.__end_ = v18 + 1;
        }
      }
      if (((unsigned __int16)this & 0x200) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "TVShow");
        std::vector<std::string>::pointer v27 = v127.__end_;
        if (v127.__end_ >= v127.__end_cap_.__value_)
        {
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v30) {
            unint64_t v30 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v31 = v30;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          int v33 = (std::string *)(v31 + 24 * v29);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v31;
          __v.__begin_ = v33;
          __v.__end_cap_.__value_ = (std::string *)(v31 + 24 * v32);
          long long v34 = *(_OWORD *)__p;
          v33->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          __p[1] = 0;
          std::string::size_type v126 = 0;
          __p[0] = 0;
          __v.__end_ = v33 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
          long long v35 = v127.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v127.__end_ = v35;
          if (SHIBYTE(v126) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v28 = *(_OWORD *)__p;
          v127.__end_->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          v127.__end_ = v27 + 1;
        }
      }
      if (((unsigned __int16)this & 0x400) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MusicVideo");
        std::vector<std::string>::pointer v36 = v127.__end_;
        if (v127.__end_ >= v127.__end_cap_.__value_)
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v39) {
            unint64_t v39 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v39;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
          if (v40) {
            unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v40);
          }
          else {
            uint64_t v41 = 0;
          }
          long long v42 = (std::string *)(v40 + 24 * v38);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v40;
          __v.__begin_ = v42;
          __v.__end_cap_.__value_ = (std::string *)(v40 + 24 * v41);
          long long v43 = *(_OWORD *)__p;
          v42->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
          __p[1] = 0;
          std::string::size_type v126 = 0;
          __p[0] = 0;
          __v.__end_ = v42 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
          uint64_t v44 = v127.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v127.__end_ = v44;
          if (SHIBYTE(v126) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v37 = *(_OWORD *)__p;
          v127.__end_->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
          v127.__end_ = v36 + 1;
        }
      }
      if (((unsigned __int16)this & 0x800) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Movie");
        std::vector<std::string>::pointer v45 = v127.__end_;
        if (v127.__end_ >= v127.__end_cap_.__value_)
        {
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v48) {
            unint64_t v48 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v49 = v48;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
          if (v49) {
            unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v49);
          }
          else {
            uint64_t v50 = 0;
          }
          uint64_t v51 = (std::string *)(v49 + 24 * v47);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v49;
          __v.__begin_ = v51;
          __v.__end_cap_.__value_ = (std::string *)(v49 + 24 * v50);
          long long v52 = *(_OWORD *)__p;
          v51->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
          __p[1] = 0;
          std::string::size_type v126 = 0;
          __p[0] = 0;
          __v.__end_ = v51 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
          std::string v53 = v127.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v127.__end_ = v53;
          if (SHIBYTE(v126) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v46 = *(_OWORD *)__p;
          v127.__end_->__r_.__value_.__r.__words[2] = v126;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          v127.__end_ = v45 + 1;
        }
      }
      if (((unsigned __int16)this & 0x2000) == 0)
      {
LABEL_100:
        if ((_BYTE)this == 0xFF)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "AnyAudio");
          std::vector<std::string>::pointer v59 = v127.__end_;
          if (v127.__end_ >= v127.__end_cap_.__value_)
          {
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
            unint64_t v61 = v60 + 1;
            if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v61) {
              unint64_t v61 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v62 = v61;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
            if (v62)
            {
LABEL_109:
              unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v62);
              goto LABEL_191;
            }
LABEL_190:
            uint64_t v63 = 0;
LABEL_191:
            uint64_t v111 = (std::string *)(v62 + 24 * v60);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v62;
            __v.__begin_ = v111;
            __v.__end_cap_.__value_ = (std::string *)(v62 + 24 * v63);
            long long v112 = *(_OWORD *)__p;
            v111->__r_.__value_.__r.__words[2] = v126;
            *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v112;
            __p[1] = 0;
            std::string::size_type v126 = 0;
            __p[0] = 0;
            __v.__end_ = v111 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
            std::string v113 = v127.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v127.__end_ = v113;
            if (SHIBYTE(v126) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_193;
          }
        }
        else
        {
          if (this)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "MusicQuiz");
            std::vector<std::string>::pointer v64 = v127.__end_;
            if (v127.__end_ >= v127.__end_cap_.__value_)
            {
              unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
              unint64_t v67 = v66 + 1;
              if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v67) {
                unint64_t v67 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v68 = v67;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
              if (v68) {
                unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v68);
              }
              else {
                uint64_t v69 = 0;
              }
              std::string v70 = (std::string *)(v68 + 24 * v66);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v68;
              __v.__begin_ = v70;
              __v.__end_cap_.__value_ = (std::string *)(v68 + 24 * v69);
              long long v71 = *(_OWORD *)__p;
              v70->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
              __p[1] = 0;
              std::string::size_type v126 = 0;
              __p[0] = 0;
              __v.__end_ = v70 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
              int v72 = v127.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v127.__end_ = v72;
              if (SHIBYTE(v126) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v65 = *(_OWORD *)__p;
              v127.__end_->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
              v127.__end_ = v64 + 1;
            }
          }
          if ((this & 2) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "AudioBook");
            std::vector<std::string>::pointer v73 = v127.__end_;
            if (v127.__end_ >= v127.__end_cap_.__value_)
            {
              unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
              unint64_t v76 = v75 + 1;
              if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v76) {
                unint64_t v76 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v77 = v76;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
              if (v77) {
                unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v77);
              }
              else {
                uint64_t v78 = 0;
              }
              uint64_t v79 = (std::string *)(v77 + 24 * v75);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v77;
              __v.__begin_ = v79;
              __v.__end_cap_.__value_ = (std::string *)(v77 + 24 * v78);
              long long v80 = *(_OWORD *)__p;
              v79->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
              __p[1] = 0;
              std::string::size_type v126 = 0;
              __p[0] = 0;
              __v.__end_ = v79 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
              uint64_t v81 = v127.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v127.__end_ = v81;
              if (SHIBYTE(v126) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v74 = *(_OWORD *)__p;
              v127.__end_->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
              v127.__end_ = v73 + 1;
            }
          }
          if ((this & 4) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Podcast");
            std::vector<std::string>::pointer v82 = v127.__end_;
            if (v127.__end_ >= v127.__end_cap_.__value_)
            {
              unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
              unint64_t v85 = v84 + 1;
              if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v85) {
                unint64_t v85 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v86 = v85;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
              if (v86) {
                unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v86);
              }
              else {
                uint64_t v87 = 0;
              }
              std::string v88 = (std::string *)(v86 + 24 * v84);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v86;
              __v.__begin_ = v88;
              __v.__end_cap_.__value_ = (std::string *)(v86 + 24 * v87);
              long long v89 = *(_OWORD *)__p;
              v88->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
              __p[1] = 0;
              std::string::size_type v126 = 0;
              __p[0] = 0;
              __v.__end_ = v88 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
              uint64_t v90 = v127.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v127.__end_ = v90;
              if (SHIBYTE(v126) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v83 = *(_OWORD *)__p;
              v127.__end_->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
              v127.__end_ = v82 + 1;
            }
          }
          if ((this & 8) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Song");
            std::vector<std::string>::pointer v91 = v127.__end_;
            if (v127.__end_ >= v127.__end_cap_.__value_)
            {
              unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
              unint64_t v94 = v93 + 1;
              if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v94) {
                unint64_t v94 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v95 = v94;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
              if (v95) {
                unint64_t v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v95);
              }
              else {
                uint64_t v96 = 0;
              }
              int v97 = (std::string *)(v95 + 24 * v93);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v95;
              __v.__begin_ = v97;
              __v.__end_cap_.__value_ = (std::string *)(v95 + 24 * v96);
              long long v98 = *(_OWORD *)__p;
              v97->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
              __p[1] = 0;
              std::string::size_type v126 = 0;
              __p[0] = 0;
              __v.__end_ = v97 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
              unint64_t v99 = v127.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v127.__end_ = v99;
              if (SHIBYTE(v126) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v92 = *(_OWORD *)__p;
              v127.__end_->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
              v127.__end_ = v91 + 1;
            }
          }
          if ((this & 0x10) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "VoiceMemo");
            std::vector<std::string>::pointer v100 = v127.__end_;
            if (v127.__end_ >= v127.__end_cap_.__value_)
            {
              unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
              unint64_t v103 = v102 + 1;
              if (v102 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v103) {
                unint64_t v103 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v104 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v104 = v103;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
              if (v104) {
                unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v104);
              }
              else {
                uint64_t v105 = 0;
              }
              int v106 = (std::string *)(v104 + 24 * v102);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v104;
              __v.__begin_ = v106;
              __v.__end_cap_.__value_ = (std::string *)(v104 + 24 * v105);
              long long v107 = *(_OWORD *)__p;
              v106->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
              __p[1] = 0;
              std::string::size_type v126 = 0;
              __p[0] = 0;
              __v.__end_ = v106 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
              int v108 = v127.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v127.__end_ = v108;
              if (SHIBYTE(v126) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v101 = *(_OWORD *)__p;
              v127.__end_->__r_.__value_.__r.__words[2] = v126;
              *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
              v127.__end_ = v100 + 1;
            }
          }
          if ((this & 0x20) == 0)
          {
LABEL_193:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            if ((std::vector<std::string>::pointer)((char *)v127.__end_ - (char *)v127.__begin_) == (std::vector<std::string>::pointer)24)
            {
              std::operator+<char>();
              mlcore::_stringForEnumWithStringDesc((uint64_t)&__v, (uint64_t)this, (uint64_t)__p);
              int v114 = SHIBYTE(v126);
              *(_OWORD *)a2 = *(_OWORD *)&__v.__first_;
              a2[2] = __v.__end_;
              HIBYTE(__v.__end_) = 0;
              LOBYTE(__v.__first_) = 0;
              if ((v114 & 0x80000000) == 0)
              {
LABEL_205:
                __v.__first_ = (std::__split_buffer<std::string>::pointer)&v127;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
                return;
              }
              uint64_t v115 = __p[0];
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v121, "|");
              mediaplatform::ComponentsJoinedByString<std::string>((uint64_t)&v123, (uint64_t *)&v127, (uint64_t)v121);
              v116 = std::string::insert(&v123, 0, "MediaType [");
              long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              v124.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              int v118 = std::string::append(&v124, "]");
              long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
              std::string::size_type v126 = v118->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v119;
              v118->__r_.__value_.__l.__size_ = 0;
              v118->__r_.__value_.__r.__words[2] = 0;
              v118->__r_.__value_.__r.__words[0] = 0;
              mlcore::_stringForEnumWithStringDesc((uint64_t)&__v, (uint64_t)this, (uint64_t)__p);
              int v120 = SHIBYTE(v126);
              *(_OWORD *)a2 = *(_OWORD *)&__v.__first_;
              a2[2] = __v.__end_;
              HIBYTE(__v.__end_) = 0;
              LOBYTE(__v.__first_) = 0;
              if (v120 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v124.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v123.__r_.__value_.__l.__data_);
              }
              if ((v122 & 0x80000000) == 0) {
                goto LABEL_205;
              }
              uint64_t v115 = v121[0];
            }
            operator delete(v115);
            goto LABEL_205;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "ITunesUAudio");
          std::vector<std::string>::pointer v59 = v127.__end_;
          if (v127.__end_ >= v127.__end_cap_.__value_)
          {
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
            unint64_t v110 = v60 + 1;
            if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v110) {
              unint64_t v110 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v62 = v110;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
            if (v62) {
              goto LABEL_109;
            }
            goto LABEL_190;
          }
        }
        long long v109 = *(_OWORD *)__p;
        v59->__r_.__value_.__r.__words[2] = v126;
        *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v109;
        v127.__end_ = v59 + 1;
        goto LABEL_193;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "HomeVideo");
      std::vector<std::string>::pointer v4 = v127.__end_;
      if (v127.__end_ >= v127.__end_cap_.__value_)
      {
        unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
        unint64_t v55 = v5 + 1;
        if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v55) {
          unint64_t v55 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v7 = v55;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
        if (v7) {
          goto LABEL_16;
        }
        goto LABEL_97;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "AnyVideo");
      std::vector<std::string>::pointer v4 = v127.__end_;
      if (v127.__end_ >= v127.__end_cap_.__value_)
      {
        unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_ - (char *)v127.__begin_) >> 3);
        unint64_t v6 = v5 + 1;
        if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) > v6) {
          unint64_t v6 = 0x5555555555555556 * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v127.__end_cap_.__value_ - (char *)v127.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v7 = v6;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v127.__end_cap_;
        if (v7)
        {
LABEL_16:
          unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
          goto LABEL_98;
        }
LABEL_97:
        uint64_t v8 = 0;
LABEL_98:
        uint64_t v56 = (std::string *)(v7 + 24 * v5);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v7;
        __v.__begin_ = v56;
        __v.__end_cap_.__value_ = (std::string *)(v7 + 24 * v8);
        long long v57 = *(_OWORD *)__p;
        v56->__r_.__value_.__r.__words[2] = v126;
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
        __p[1] = 0;
        std::string::size_type v126 = 0;
        __p[0] = 0;
        __v.__end_ = v56 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v127, &__v);
        int v58 = v127.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v127.__end_ = v58;
        if (SHIBYTE(v126) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_100;
      }
    }
    long long v54 = *(_OWORD *)__p;
    v4->__r_.__value_.__r.__words[2] = v126;
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v54;
    v127.__end_ = v4 + 1;
    goto LABEL_100;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "MediaTypeUndefined");
  mlcore::_stringForEnumWithStringDesc((uint64_t)a2, 0, (uint64_t)&__v);
LABEL_5:
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
}

void sub_2150D5A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::string __p = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_2150D5B48()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x2150D5B40);
}

uint64_t mlcore::_stringForEnumWithStringDesc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
  std::vector<std::string>::pointer v4 = (void *)std::ostream::operator<<();
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" => '", 5);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(void *)a3;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"')", 2);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166B2650](&v13);
}

void sub_2150D5CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaTypeByStandardizingMediaType(uint64_t this)
{
  if ((this & 0x100) != 0) {
    return 256;
  }
  if ((this & 0x1000) != 0) {
    return 4096;
  }
  if ((this & 0x800) == 0) {
    return this;
  }
  if ((this & 4) != 0) {
    return 256;
  }
  if ((this & 0x20) != 0) {
    return 4096;
  }
  if ((this & 0x200) != 0) {
    return 512;
  }
  if ((this & 0x2000) != 0) {
    return 0x2000;
  }
  if ((this & 0x400) != 0) {
    return 1024;
  }
  return this;
}

uint64_t mlcore::ITMediaKindForMediaType(mlcore *this)
{
  switch(this)
  {
    case 0xFF:
      return 301;
    case 0xFFFFFF:
      return 3951;
    case 0xFF00:
      return 3682;
  }
  int v2 = this & 4;
  if (((unsigned __int16)this & 0x100) != 0) {
    int v2 = 6;
  }
  unsigned int v3 = (4 * this) & 8 | (this >> 3) & 1 | v2;
  if (this) {
    v3 |= 0x21u;
  }
  return (this >> 3) & 0x440 | (((this >> 4) & 3) << 20) | (this >> 5) & 0x20 | (this >> 10) & 2 | v3;
}

uint64_t mlcore::SmartPlaylistEntityCache::isSmartPlaylist(mlcore::SmartPlaylistEntityCache *this)
{
  return 1;
}

void mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v45 = a3;
  unint64_t v46 = a2;
  v44[0] = a2;
  v44[1] = a3;
  if (*(unsigned char *)(a1 + 120)
    || (mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::valueForKey((uint64_t)dsema, a1 + 128, a2, a3), !dsema[16]))
  {
    *(void *)dsema = a2;
    long long v10 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, a2, dsema);
    if (v10[4] == v10[3])
    {
      uint64_t v37 = 1065353216;
      *(_OWORD *)&v39[8] = 0u;
      long long v30 = 0u;
      *(_OWORD *)&dsema[8] = 0u;
      uint64_t v31 = 1065353216;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v34 = 1065353216;
      long long v38 = 0u;
      *(_OWORD *)unint64_t v39 = 0u;
      *(_DWORD *)&v39[16] = 1065353216;
      long long v41 = 0u;
      long long v40 = 0u;
      uint64_t v42 = 1065353216;
      *(void *)dsema = &unk_26C5C4EE8;
      long long v43 = &unk_26C5C4F10;
      (*(void (**)(unint64_t, uint64_t, unsigned char *))(*(void *)a2 + 48))(a2, a3, dsema);
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(dsema);
      return;
    }
    uint64_t v11 = a3 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v28 = a3 & 0x7FFFFFFFFFFFFFFFLL;
    char v12 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
    uint64_t v13 = mlcore::ItemPropertyPersistentID(v12);
    uint64_t v14 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v14 + 8) = 0u;
    *(void *)uint64_t v14 = &unk_26C5CABB0;
    *((void *)v14 + 4) = v13;
    *((void *)v14 + 5) = 0;
    *((void *)v14 + 3) = &unk_26C5C79D0;
    *((void *)v14 + 6) = v11;
    *(_OWORD *)(v14 + 56) = 0u;
    uint64_t v15 = (char *)operator new(0x80uLL);
    *(void *)&long long v16 = v14 + 24;
    *((void *)&v16 + 1) = v14;
    *(_OWORD *)(v15 + 8) = 0u;
    *(void *)uint64_t v15 = &unk_26C5CA868;
    *(_OWORD *)dsema = v16;
    mlcore::PropertiesQuery::PropertiesQuery((uint64_t)(v15 + 24), (uint64_t)v12, (uint64_t *)dsema);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
    uint64_t v17 = *(const void **)(a1 + 216);
    uint64_t v18 = *(void *)(a1 + 224);
    unint64_t v26 = 0;
    long long v27 = 0u;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v26, v17, v18, (v18 - (uint64_t)v17) >> 3);
    long long v19 = v26;
    std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v15 + 104, v26, v27, (uint64_t)(v27 - (void)v26) >> 3);
    if (v19) {
      operator delete(v19);
    }
    *a5 = 0;
    a5[1] = 0;
    *(void *)dsema = dispatch_semaphore_create(0);
    unint64_t v20 = *(void (****)(void, uint64_t *, uint64_t *, void *))(a1 + 88);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
    unint64_t v21 = *(std::__shared_weak_count **)(a1 + 112);
    v25[0] = *(void *)(a1 + 104);
    v25[1] = (uint64_t)v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v48 = 0;
    unint64_t v22 = operator new(0x40uLL);
    *unint64_t v22 = &unk_26C5C9440;
    v22[1] = a1;
    _DWORD v22[2] = a4;
    v22[3] = &v28;
    v22[4] = a5;
    v22[5] = &v46;
    v22[6] = &v45;
    v22[7] = dsema;
    unint64_t v48 = v22;
    mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(v20, (uint64_t)(v15 + 24), (std::__shared_weak_count *)v15, v25, (uint64_t)v47);
    std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](v47);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)dsema, 0xFFFFFFFFFFFFFFFFLL);
    if (!*(unsigned char *)(a1 + 120))
    {
      if (*a5) {
        mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::setValueForKey(a1 + 128, a5, (uint64_t)v44);
      }
    }
    dispatch_release(*(dispatch_object_t *)dsema);
    uint64_t v23 = (std::__shared_weak_count *)v15;
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return;
  }
  mediaplatform::Optional<std::shared_ptr<mlcore::Entity>>::value((uint64_t)dsema);
  unint64_t v24 = *(void *)&dsema[8];
  *a5 = *(void *)dsema;
  a5[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  if (dsema[16])
  {
    uint64_t v23 = *(std::__shared_weak_count **)&dsema[8];
    if (*(void *)&dsema[8]) {
      goto LABEL_13;
    }
  }
}

void sub_2150D61D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_object_t object, std::__shared_weak_count *a16, char a17)
{
  if (a17)
  {
    if (a16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Optional<std::shared_ptr<mlcore::Entity>>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempt to extract value from invalid optional.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_2150D62DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(void (***a1)(void, uint64_t *, uint64_t *, void *), uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v8 = *a4;
  int v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)v12, a5);
  uint64_t v14 = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_26C5C8AF8;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v12);
  uint64_t v14 = v7;
  (**a1)(a1, &v10, &v8, v13);
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](v12);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_2150D6424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::QueryResult>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  _Unwind_Resume(a1);
}

void mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry(void *a1, void *a2)
{
  std::vector<std::string>::pointer v4 = (uint64_t *)a2[6];
  a1[2] -= v4[3];
  uint64_t v5 = *v4;
  *(void *)(v5 + 8) = v4[1];
  *(void *)v4[1] = v5;
  --a1[10];
  operator delete(v4);
  int8x8_t v6 = (int8x8_t)a1[4];
  unint64_t v7 = a2[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v6) {
      v7 %= *(void *)&v6;
    }
  }
  else
  {
    v7 &= *(void *)&v6 - 1;
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = *(void **)(v9 + 8 * v7);
  do
  {
    uint64_t v11 = v10;
    uint64_t v10 = (void *)*v10;
  }
  while (v10 != a2);
  if (v11 == a1 + 5) {
    goto LABEL_18;
  }
  unint64_t v12 = v11[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
  }
  else
  {
    v12 &= *(void *)&v6 - 1;
  }
  if (v12 != v7)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(*a2 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v7) {
LABEL_19:
    }
      *(void *)(v9 + 8 * v7) = 0;
  }
  uint64_t v14 = *a2;
  if (*a2)
  {
    unint64_t v15 = *(void *)(v14 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v6) {
        v15 %= *(void *)&v6;
      }
    }
    else
    {
      v15 &= *(void *)&v6 - 1;
    }
    if (v15 != v7)
    {
      *(void *)(a1[3] + 8 * v15) = v11;
      uint64_t v14 = *a2;
    }
  }
  *uint64_t v11 = v14;
  *a2 = 0;
  --a1[6];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,void *>>>::operator()[abi:ne180100](1, a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unsigned int v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target_type()
{
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore11LibraryView12performQueryINS_15PropertiesQueryEEEvNSt3__110shared_ptrIT_EENS4_INS_11TransactionEEENS3_8functionIFvNS4_INS5_6ResultEEEEEEEUlNS4_INS_11QueryResultEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = v2;
  int8x8_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_2150D6734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C5C8AF8;
  return std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26C5C8AF8;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2150D681C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(void *a1)
{
  *a1 = &unk_26C5C8AF8;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x2166B26F0);
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(void *a1)
{
  *a1 = &unk_26C5C8AF8;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::target_type()
{
}

uint64_t std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6mlcore24SmartPlaylistEntityCache29entityForClassAndPersistentIDEPNS_11EntityClassExNS_13PropertyCacheEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (!*(_DWORD *)(v3 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>((uint64_t)&v35, *(void *)(v3 + 160), *(void *)(v3 + 168), 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v3 + 168) - *(void *)(v3 + 160)) >> 3));
    if (v36 != v35)
    {
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v34, v35);
      v34[0] = (void **)&unk_26C5C4EE8;
      v34[26] = (void **)&unk_26C5C4F10;
      *(_OWORD *)&unsigned char v25[8] = 0u;
      uint64_t v28 = 1065353216;
      *(_OWORD *)&char v30[8] = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 1065353216;
      long long v24 = 0u;
      *(_OWORD *)long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_DWORD *)&v25[16] = 1065353216;
      long long v29 = 0u;
      *(_OWORD *)long long v30 = 0u;
      *(_DWORD *)&v30[16] = 1065353216;
      memset(v31, 0, sizeof(v31));
      uint64_t v32 = 1065353216;
      unint64_t v20 = &unk_26C5C4EE8;
      long long v33 = &unk_26C5C4F10;
      v19[0] = (uint64_t)&v20;
      v19[1] = v5 + 240;
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::apply<mlcore::ForeignPropertyCacheMapper>(v34, v19);
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::apply<mlcore::ForeignPropertyCacheMapper>(*(void **)(a1 + 16), v19);
      uint64_t v6 = **(void **)(a1 + 24);
      __p.__r_.__value_.__r.__words[0] = mlcore::PlaylistItemPropertyItemPersistentID(v7);
      uint8x8_t v8 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v31, __p.__r_.__value_.__r.__words[0], &__p);
      *((void *)v8 + 3) = v6;
      uint64_t v9 = *(void *)(a1 + 16);
      unint64_t v10 = mlcore::PlaylistItemPropertyOccurrenceID(v8);
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, v9, v10);
      std::string::size_type v12 = mlcore::PlaylistItemPropertyOccurrenceID(v11);
      unint64_t v13 = mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty((uint64_t)&v20, &__p, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(v5 + 280))
      {
        *(void *)&long long v17 = mlcore::PlaylistItemPropertyPosition((mlcore *)v13);
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v31, v17, &v17)[3] = 0;
      }
      (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 40) + 48))(&v17);
      uint64_t v14 = *(void *)(a1 + 32);
      long long v15 = v17;
      long long v17 = 0uLL;
      long long v16 = *(std::__shared_weak_count **)(v14 + 8);
      *(_OWORD *)uint64_t v14 = v15;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v20);
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v34);
    }
    v34[0] = (void **)&v35;
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](v34);
  }
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 56));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2150D6BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a19);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a46);
  a46 = v47 - 72;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(a1);
}

void mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::apply<mlcore::ForeignPropertyCacheMapper>(void *a1, uint64_t *a2)
{
  for (std::string::size_type i = (void *)a1[23]; i; std::string::size_type i = (void *)*i)
  {
    uint64_t v5 = i[3];
    uint64_t v6 = a2[1];
    std::string::size_type v29 = i[2];
    unint64_t v7 = std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(v6, v29, &v29);
    uint64_t v8 = *a2;
    std::string::size_type v29 = v7[3];
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v8 + 168, v29, &v29)[3] = v5;
  }
  for (uint64_t j = (uint64_t *)a1[18]; j; uint64_t j = (uint64_t *)*j)
  {
    int v10 = *((_DWORD *)j + 6);
    uint64_t v11 = a2[1];
    std::string::size_type v29 = j[2];
    std::string::size_type v12 = std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(v11, v29, &v29);
    uint64_t v13 = *a2;
    std::string::size_type v29 = v12[3];
    *((_DWORD *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(v13 + 128, v29, &v29)+ 6) = v10;
  }
  for (uint64_t k = (void *)a1[13]; k; uint64_t k = (void *)*k)
  {
    uint64_t v15 = k[3];
    uint64_t v16 = a2[1];
    std::string::size_type v29 = k[2];
    long long v17 = std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(v16, v29, &v29);
    uint64_t v18 = *a2;
    std::string::size_type v29 = v17[3];
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(v18 + 88, v29, &v29)[3] = v15;
  }
  for (uint64_t m = (uint64_t *)a1[8]; m; uint64_t m = (uint64_t *)*m)
  {
    unint64_t v20 = m[2];
    std::string::size_type v29 = v20;
    if (*((char *)m + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)m[3], m[4]);
      unint64_t v20 = v29;
    }
    else
    {
      std::string __p = *(std::string *)((unsigned char *)m + 1);
    }
    uint64_t v21 = a2[1];
    __str.__r_.__value_.__r.__words[0] = v20;
    std::string::size_type v22 = std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(v21, v20, &__str)[3];
    uint64_t v23 = *a2;
    int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __p;
    }
    mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(v23, &__str, v22);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v24 < 0) {
LABEL_19:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (v24 < 0)
    {
      goto LABEL_19;
    }
  }
  for (uint64_t n = (uint64_t **)a1[3]; n; uint64_t n = (uint64_t **)*n)
  {
    std::string::size_type v29 = (std::string::size_type)n[2];
    mediaplatform::Data::Data((mediaplatform::Data *)&__p, n[6], (size_t)n[4], 1);
    uint64_t v26 = a2[1];
    __str.__r_.__value_.__r.__words[0] = v29;
    unint64_t v27 = std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(v26, v29, &__str)[3];
    uint64_t v28 = *a2;
    mediaplatform::Data::Data((mediaplatform::Data *)&__str, __src, __p.__r_.__value_.__l.__size_, 1);
    mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(v28, (uint64_t)&__str, v27);
    mediaplatform::Data::~Data((mediaplatform::Data *)&__str);
    mediaplatform::Data::~Data((mediaplatform::Data *)&__p);
  }
}

void sub_2150D6E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  mediaplatform::Data::~Data((mediaplatform::Data *)&__p);
  mediaplatform::Data::~Data(v23);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,true>,std::__unordered_map_equal<mlcore::ModelPropertyBase *,std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::hash<mlcore::ModelPropertyBase *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelPropertyBase *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (std::string::size_type i = *v11; i; std::string::size_type i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type i = operator new(0x20uLL);
  *std::string::size_type i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *std::string::size_type i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *std::string::size_type i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2150D7118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C5C9440;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26C5C9440;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::SmartPlaylistEntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::~__func()
{
}

void mlcore::SmartPlaylistEntityCache::setPropertiesToFetchForEntityClass(uint64_t a1, uint64_t a2, mlcore::EntityClass *a3)
{
  std::string __p = 0;
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  mlcore::EntityCache::setPropertiesToFetchForEntityClass(a1, (uint64_t)&__p, a3);
  unint64_t v6 = (mlcore *)__p;
  if (__p)
  {
    unint64_t v68 = __p;
    operator delete(__p);
  }
  unint64_t v8 = *(const void ***)a2;
  unint64_t v7 = *(const void ***)(a2 + 8);
  if (*(const void ***)a2 != v7)
  {
    uint64_t v63 = a1;
    std::vector<std::string>::pointer v64 = (uint64_t *)(a1 + 240);
    unint64_t v61 = (void *)(a1 + 256);
    unint64_t v62 = *(const void ***)(a2 + 8);
    while (1)
    {
      unint64_t v9 = (mlcore *)*v8;
      unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyPersistentID(v6);
      if (v9 == v6) {
        goto LABEL_97;
      }
      unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v6);
      if (v9 == v6) {
        goto LABEL_97;
      }
      unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyPosition(v6);
      if (v9 != v6) {
        break;
      }
      *(unsigned char *)(a1 + 280) = 1;
LABEL_97:
      if (++v8 == v7) {
        return;
      }
    }
    unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyUUID(v6);
    if (v9 == v6) {
      goto LABEL_97;
    }
    unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyPositionUUID(v6);
    if (v9 == v6) {
      goto LABEL_97;
    }
    unint64_t v6 = (mlcore *)mlcore::PlaylistItemPropertyOccurrenceID(v6);
    if (v9 == v6) {
      goto LABEL_97;
    }
    if (((*(uint64_t (**)(mlcore *))(*(void *)v9 + 88))(v9) & 1) == 0) {
      __assert_rtn("setPropertiesToFetchForEntityClass", "SmartPlaylistEntityCache.cpp", 68, "property->isForeignProperty()");
    }
    uint64_t v11 = (mlcore *)(*(uint64_t (**)(void *))(*(void *)v10 + 16))(v10);
    uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 24))(v10);
    unint64_t v13 = (uint64_t *)operator new(8uLL);
    *unint64_t v13 = v12;
    unint64_t v14 = (unint64_t)(v13 + 1);
    float v15 = v13 + 1;
    while (1)
    {
      BOOL v16 = (mlcore *)(*(uint64_t (**)(mlcore *))(*(void *)v11 + 88))(v11);
      if (!v16) {
        break;
      }
      uint64_t v11 = (mlcore *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
      uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v17 + 24))(v17);
      uint64_t v19 = v18;
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v20 = v15 - v13;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v14 - (void)v13) >> 2 > v21) {
          unint64_t v21 = (uint64_t)(v14 - (void)v13) >> 2;
        }
        if (v14 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        int v24 = (uint64_t *)(v22 + 8 * v20);
        *int v24 = v19;
        long long v25 = v24 + 1;
        if (v15 != v13)
        {
          uint64_t v26 = 0;
          do
          {
            v24[v26 - 1] = v15[v26 - 1];
            --v26;
          }
          while (&v15[v26] != v13);
          int v24 = (uint64_t *)((char *)v24 + v26 * 8);
        }
        unint64_t v14 = v22 + 8 * v23;
        operator delete(v13);
        unint64_t v13 = v24;
        float v15 = v25;
        unint64_t v7 = v62;
        a1 = v63;
      }
      else
      {
        *v15++ = v18;
      }
    }
    unint64_t v27 = (mlcore *)mlcore::PlaylistItemPropertyPersistentID(v16);
    if (v11 == v27)
    {
LABEL_96:
      operator delete(v13);
      goto LABEL_97;
    }
    if (v11 != (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v27)) {
      __assert_rtn("setPropertiesToFetchForEntityClass", "SmartPlaylistEntityCache.cpp", 81, "baseProperty == PlaylistItemPropertyItemPersistentID()");
    }
    if (v15 == v13) {
      goto LABEL_102;
    }
    unint64_t ForeignPropertyBase = 0;
    do
    {
      uint64_t v30 = *--v15;
      uint64_t v29 = v30;
      if (ForeignPropertyBase)
      {
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v10 + 32))(&v65, v10);
        unint64_t ForeignPropertyBase = mlcore::GetForeignPropertyBase(ForeignPropertyBase, v29, &v65);
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
      }
      else
      {
        unint64_t ForeignPropertyBase = v29;
      }
    }
    while (v15 != v13);
    if (!ForeignPropertyBase) {
LABEL_102:
    }
      __assert_rtn("setPropertiesToFetchForEntityClass", "SmartPlaylistEntityCache.cpp", 94, "itemProperty != nullptr");
    unint64_t v31 = 0x9DDFEA08EB382D69 * (((8 * ForeignPropertyBase) + 8) ^ HIDWORD(ForeignPropertyBase));
    unint64_t v32 = 0x9DDFEA08EB382D69 * (HIDWORD(ForeignPropertyBase) ^ (v31 >> 47) ^ v31);
    unint64_t v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
    unint64_t v34 = *(void *)(a1 + 248);
    if (v34)
    {
      uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v14 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
        if (v33 >= v34) {
          unint64_t v14 = v33 % v34;
        }
      }
      else
      {
        unint64_t v14 = v33 & (v34 - 1);
      }
      uint64_t v36 = *(void ***)(*v64 + 8 * v14);
      if (v36)
      {
        for (std::string::size_type i = *v36; i; std::string::size_type i = (void *)*i)
        {
          unint64_t v38 = i[1];
          if (v38 == v33)
          {
            if (i[2] == ForeignPropertyBase) {
              goto LABEL_79;
            }
          }
          else
          {
            if (v35.u32[0] > 1uLL)
            {
              if (v38 >= v34) {
                v38 %= v34;
              }
            }
            else
            {
              v38 &= v34 - 1;
            }
            if (v38 != v14) {
              break;
            }
          }
        }
      }
    }
    std::string::size_type i = operator new(0x20uLL);
    *std::string::size_type i = 0;
    i[1] = v33;
    i[2] = ForeignPropertyBase;
    i[3] = 0;
    float v39 = (float)(unint64_t)(*(void *)(a1 + 264) + 1);
    float v40 = *(float *)(a1 + 272);
    if (!v34 || (float)(v40 * (float)v34) < v39)
    {
      BOOL v41 = (v34 & (v34 - 1)) != 0;
      if (v34 < 3) {
        BOOL v41 = 1;
      }
      unint64_t v42 = v41 | (2 * v34);
      unint64_t v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43) {
        size_t v44 = v43;
      }
      else {
        size_t v44 = v42;
      }
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v64, v44);
      unint64_t v34 = *(void *)(a1 + 248);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          unint64_t v14 = v33 % v34;
        }
        else {
          unint64_t v14 = v33;
        }
      }
      else
      {
        unint64_t v14 = (v34 - 1) & v33;
      }
    }
    uint64_t v45 = *v64;
    unint64_t v46 = *(void **)(*v64 + 8 * v14);
    if (v46)
    {
      *std::string::size_type i = *v46;
    }
    else
    {
      *std::string::size_type i = *v61;
      *unint64_t v61 = i;
      *(void *)(v45 + 8 * v14) = v61;
      if (!*i) {
        goto LABEL_78;
      }
      unint64_t v47 = *(void *)(*i + 8);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v47 >= v34) {
          v47 %= v34;
        }
      }
      else
      {
        v47 &= v34 - 1;
      }
      unint64_t v46 = (void *)(*v64 + 8 * v47);
    }
    *unint64_t v46 = i;
LABEL_78:
    ++*(void *)(a1 + 264);
LABEL_79:
    i[3] = v9;
    uint64_t v49 = *(unint64_t **)(a1 + 224);
    unint64_t v48 = *(void *)(a1 + 232);
    if ((unint64_t)v49 >= v48)
    {
      uint64_t v51 = *(void *)(a1 + 216);
      uint64_t v52 = ((uint64_t)v49 - v51) >> 3;
      if ((unint64_t)(v52 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = v48 - v51;
      uint64_t v54 = v53 >> 2;
      if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
        uint64_t v54 = v52 + 1;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55) {
        unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v55);
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unint64_t *)(v55 + 8 * v52);
      *long long v57 = ForeignPropertyBase;
      uint64_t v50 = v57 + 1;
      std::vector<std::string>::pointer v59 = *(char **)(a1 + 216);
      int v58 = *(char **)(a1 + 224);
      if (v58 != v59)
      {
        do
        {
          unint64_t v60 = *((void *)v58 - 1);
          v58 -= 8;
          *--long long v57 = v60;
        }
        while (v58 != v59);
        int v58 = *(char **)(a1 + 216);
      }
      *(void *)(a1 + 216) = v57;
      *(void *)(a1 + 224) = v50;
      *(void *)(a1 + 232) = v55 + 8 * v56;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      unint64_t *v49 = ForeignPropertyBase;
      uint64_t v50 = v49 + 1;
    }
    *(void *)(a1 + 224) = v50;
    goto LABEL_96;
  }
}

void sub_2150D7908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v18);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void mlcore::SmartPlaylistEntityCache::~SmartPlaylistEntityCache(mlcore::SmartPlaylistEntityCache *this)
{
  mlcore::SmartPlaylistEntityCache::~SmartPlaylistEntityCache(this);
  JUMPOUT(0x2166B26F0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C5C8208;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = (void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 27);
  if (v5)
  {
    *((void *)this + 28) = v5;
    operator delete(v5);
  }
  mlcore::EntityCache::~EntityCache(this);
}

uint64_t mlcore::SmartPlaylistEntityCache::SmartPlaylistEntityCache(uint64_t a1, void *a2)
{
  long long v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    mlcore::EntityCache::EntityCache(a1, v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    mlcore::EntityCache::EntityCache(a1, v5);
  }
  *(void *)a1 = &unk_26C5C8208;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

{
  std::__shared_weak_count *v3;
  void v5[2];

  long long v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    mlcore::EntityCache::EntityCache(a1, v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    mlcore::EntityCache::EntityCache(a1, v5);
  }
  *(void *)a1 = &unk_26C5C8208;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLNotExpression,std::allocator<mediaplatform::SQLNotExpression>,std::shared_ptr<mediaplatform::SQLExpression>,void>(void *a1, long long *a2)
{
  long long v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)long long v4 = &unk_26C5C9950;
  long long v5 = *a2;
  *a2 = 0u;
  *((void *)v4 + 3) = &unk_26C5BEC90;
  *((_OWORD *)v4 + 2) = v5;
  if (*((void *)&v5 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLUnaryExpression,std::allocator<mediaplatform::SQLUnaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLUnaryExpression::UnaryOperator,void>(void *a1, long long *a2, int *a3)
{
  unint64_t v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)unint64_t v6 = &unk_26C5C9BB8;
  long long v7 = *a2;
  *a2 = 0u;
  int v8 = *a3;
  *((void *)v6 + 3) = &unk_26C5BEE40;
  *((_OWORD *)v6 + 2) = v7;
  if (*((void *)&v7 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    *((_DWORD *)v6 + 12) = v8;
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  else
  {
    *((_DWORD *)v6 + 12) = v8;
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLNotExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLNotExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLNotExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLUnaryExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mediaplatform::SQLUnaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mediaplatform::SQLUnaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5C9BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL mlcore::UnaryPredicate<long long>::matches(uint64_t a1, uint64_t a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(*(void *)a2 + 8), *(mlcore::ModelPropertyBase **)(a1 + 8));
}

void mlcore::UnaryPredicateBase::description(mlcore::UnaryPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  switch(*((_DWORD *)this + 4))
  {
    case 1:
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 40))(&v11);
      long long v4 = std::string::insert(&v11, 0, "!(");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      unint64_t v6 = std::string::append(&v12, ")");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v6->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      {
        int v8 = (void *)v11.__r_.__value_.__r.__words[0];
        goto LABEL_13;
      }
      break;
    case 2:
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 40))(&v12);
      unint64_t v9 = std::string::append(&v12, "is null");
      goto LABEL_11;
    case 3:
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 40))(&v12);
      unint64_t v9 = std::string::append(&v12, "is not null");
LABEL_11:
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
        int v8 = (void *)v12.__r_.__value_.__r.__words[0];
LABEL_13:
        operator delete(v8);
      }
      break;
    default:
      long long v3 = *(void (**)(void))(**((void **)this + 1) + 40);
      v3();
      break;
  }
}

void sub_2150D8024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::UnaryPredicate<long long>::~UnaryPredicate()
{
}

BOOL mlcore::UnaryPredicate<std::string>::matches(uint64_t a1, uint64_t a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(*(void *)a2 + 8), *(mlcore::ModelPropertyBase **)(a1 + 8));
}

void mlcore::UnaryPredicate<std::string>::~UnaryPredicate()
{
}

BOOL mlcore::UnaryPredicate<double>::matches(uint64_t a1, uint64_t a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(*(void *)a2 + 8), *(mlcore::ModelPropertyBase **)(a1 + 8));
}

void mlcore::UnaryPredicate<double>::~UnaryPredicate()
{
}

BOOL mlcore::UnaryPredicate<int>::matches(uint64_t a1, uint64_t a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(*(void *)a2 + 8), *(mlcore::ModelPropertyBase **)(a1 + 8));
}

void mlcore::UnaryPredicate<int>::~UnaryPredicate()
{
}

BOOL mlcore::UnaryPredicate<mediaplatform::Data>::matches(uint64_t a1, uint64_t a2)
{
  return mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(*(void *)a2 + 8), *(mlcore::ModelPropertyBase **)(a1 + 8));
}

void mlcore::UnaryPredicate<mediaplatform::Data>::~UnaryPredicate()
{
}

uint64_t mlcore::UnaryPredicate<long long>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5538;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5538;
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t mlcore::UnaryPredicateBase::UnaryPredicateBase(uint64_t result, uint64_t a2, int a3)
{
  *(void *)__n128 result = &unk_26C5C7818;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

uint64_t mlcore::UnaryPredicate<long long>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::UnaryPredicateBase::property(mlcore::UnaryPredicateBase *this)
{
  return *((void *)this + 1);
}

uint64_t mlcore::UnaryPredicate<std::string>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5430;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5430;
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t mlcore::UnaryPredicate<std::string>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::UnaryPredicate<double>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5488;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C5488;
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t mlcore::UnaryPredicate<double>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::UnaryPredicate<int>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::UnaryPredicate<mediaplatform::Data>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C53D8;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(void *)__n128 result = &unk_26C5C53D8;
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t mlcore::UnaryPredicate<mediaplatform::Data>::property(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t mlcore::UnaryPredicateBase::unaryOperator(mlcore::UnaryPredicateBase *this)
{
  return *((unsigned int *)this + 4);
}

mlcore::ItemSearchTable *mlcore::ItemSearchTable::ItemSearchTable(mlcore::ItemSearchTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_search");
  std::string::basic_string[abi:ne180100]<0>(v44, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v46, (uint64_t)v44, 1);
  std::string::basic_string[abi:ne180100]<0>(v37, "search_title");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v39, (uint64_t)v37);
  std::string::basic_string[abi:ne180100]<0>(v30, "search_album");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v23, "search_artist");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v25, (uint64_t)v23);
  std::string::basic_string[abi:ne180100]<0>(v16, "search_composer");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v18, (uint64_t)v16);
  std::string::basic_string[abi:ne180100]<0>(v9, "search_album_artist");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v11, (uint64_t)v9);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v82, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v82 = __s;
  }
  unint64_t v77 = &unk_26C5C3AF0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v78, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v78 = v47;
  }
  int v79 = v48;
  unint64_t v77 = &unk_26C5C3878;
  uint64_t v80 = v49;
  int v81 = v50;
  int v72 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v73, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = v40;
  }
  int v74 = v41;
  int v72 = &unk_26C5C3878;
  uint64_t v75 = v42;
  int v76 = v43;
  unint64_t v67 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v68, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v68 = v33;
  }
  int v69 = v34;
  unint64_t v67 = &unk_26C5C3878;
  uint64_t v70 = v35;
  int v71 = v36;
  unint64_t v62 = &unk_26C5C3AF0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v63, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v63 = v26;
  }
  int v64 = v27;
  unint64_t v62 = &unk_26C5C3878;
  uint64_t v65 = v28;
  int v66 = v29;
  long long v57 = &unk_26C5C3AF0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = v19;
  }
  int v59 = v20;
  long long v57 = &unk_26C5C3878;
  uint64_t v60 = v21;
  int v61 = v22;
  uint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = __p;
  }
  int v54 = v13;
  uint64_t v52 = &unk_26C5C3878;
  uint64_t v55 = v14;
  int v56 = v15;
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  int v8 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v82.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C37C0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v109, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v109 = v78;
  }
  int v110 = v79;
  int v108 = &unk_26C5C3878;
  uint64_t v111 = v80;
  int v112 = v81;
  unint64_t v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v104, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else {
    std::string v104 = v73;
  }
  int v105 = v74;
  unint64_t v103 = &unk_26C5C3878;
  uint64_t v106 = v75;
  int v107 = v76;
  long long v98 = &unk_26C5C3AF0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v99, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v99 = v68;
  }
  int v100 = v69;
  long long v98 = &unk_26C5C3878;
  uint64_t v101 = v70;
  int v102 = v71;
  unint64_t v93 = &unk_26C5C3AF0;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v94, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v94 = v63;
  }
  int v95 = v64;
  unint64_t v93 = &unk_26C5C3878;
  uint64_t v96 = v65;
  int v97 = v66;
  std::string v88 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v89, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v89 = v58;
  }
  int v90 = v59;
  std::string v88 = &unk_26C5C3878;
  uint64_t v91 = v60;
  int v92 = v61;
  long long v83 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = v53;
  }
  int v85 = v54;
  long long v83 = &unk_26C5C3878;
  uint64_t v86 = v55;
  int v87 = v56;
  char v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v134, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v134 = v104;
  }
  int v135 = v105;
  char v133 = &unk_26C5C3878;
  uint64_t v136 = v106;
  int v137 = v107;
  unint64_t v128 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v129, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v129 = v99;
  }
  int v130 = v100;
  unint64_t v128 = &unk_26C5C3878;
  uint64_t v131 = v101;
  int v132 = v102;
  std::string v123 = &unk_26C5C3AF0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v124, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    std::string v124 = v94;
  }
  int v125 = v95;
  std::string v123 = &unk_26C5C3878;
  uint64_t v126 = v96;
  int v127 = v97;
  int v118 = &unk_26C5C3AF0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v119, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v119 = v89;
  }
  int v120 = v90;
  int v118 = &unk_26C5C3878;
  uint64_t v121 = v91;
  int v122 = v92;
  std::string v113 = &unk_26C5C3AF0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v114, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v114 = v84;
  }
  int v115 = v85;
  std::string v113 = &unk_26C5C3878;
  uint64_t v116 = v86;
  int v117 = v87;
  v153 = &unk_26C5C3AF0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v129;
  }
  int v155 = v130;
  v153 = &unk_26C5C3878;
  uint64_t v156 = v131;
  int v157 = v132;
  v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v124;
  }
  int v150 = v125;
  v148 = &unk_26C5C3878;
  uint64_t v151 = v126;
  int v152 = v127;
  uint64_t v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v144, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  }
  else {
    std::string v144 = v119;
  }
  int v145 = v120;
  uint64_t v143 = &unk_26C5C3878;
  uint64_t v146 = v121;
  int v147 = v122;
  uint64_t v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v139, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  }
  else {
    std::string v139 = v114;
  }
  int v140 = v115;
  uint64_t v138 = &unk_26C5C3878;
  uint64_t v141 = v116;
  int v142 = v117;
  char v168 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v169, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else {
    std::string v169 = v149;
  }
  int v170 = v150;
  char v168 = &unk_26C5C3878;
  uint64_t v171 = v151;
  int v172 = v152;
  uint64_t v163 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v164, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  }
  else {
    std::string v164 = v144;
  }
  int v165 = v145;
  uint64_t v163 = &unk_26C5C3878;
  uint64_t v166 = v146;
  int v167 = v147;
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v159, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else {
    std::string v159 = v139;
  }
  int v160 = v140;
  uint64_t v158 = &unk_26C5C3878;
  uint64_t v161 = v141;
  int v162 = v142;
  int v178 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v179, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  }
  else {
    std::string v179 = v164;
  }
  int v180 = v165;
  int v178 = &unk_26C5C3878;
  uint64_t v181 = v166;
  int v182 = v167;
  std::string v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v159;
  }
  int v175 = v160;
  std::string v173 = &unk_26C5C3878;
  uint64_t v176 = v161;
  int v177 = v162;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v178, (uint64_t)&v173);
  std::string v173 = &unk_26C5C3AF0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  int v178 = &unk_26C5C3AF0;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  *((void *)this + 22) = &unk_26C5C3AF0;
  long long v3 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v169.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v170;
  *((void *)this + 22) = &unk_26C5C3878;
  *(void *)((char *)this + 212) = v171;
  *((_DWORD *)this + 55) = v172;
  uint64_t v158 = &unk_26C5C3AF0;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  uint64_t v163 = &unk_26C5C3AF0;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  char v168 = &unk_26C5C3AF0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  *((void *)this + 28) = &unk_26C5C3AF0;
  long long v4 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v154.__r_.__value_.__l.__data_;
    *((void *)this + 31) = *((void *)&v154.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 64) = v155;
  *((void *)this + 28) = &unk_26C5C3878;
  *(void *)((char *)this + 260) = v156;
  *((_DWORD *)this + 67) = v157;
  uint64_t v138 = &unk_26C5C3AF0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  uint64_t v143 = &unk_26C5C3AF0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  v148 = &unk_26C5C3AF0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  v153 = &unk_26C5C3AF0;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  *((void *)this + 34) = &unk_26C5C3AF0;
  long long v5 = (std::string *)((char *)this + 280);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *((void *)this + 37) = *((void *)&v134.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v135;
  *((void *)this + 34) = &unk_26C5C3878;
  *(void *)((char *)this + 308) = v136;
  *((_DWORD *)this + 79) = v137;
  std::string v113 = &unk_26C5C3AF0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  int v118 = &unk_26C5C3AF0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  std::string v123 = &unk_26C5C3AF0;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  unint64_t v128 = &unk_26C5C3AF0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  char v133 = &unk_26C5C3AF0;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  *((void *)this + 40) = &unk_26C5C3AF0;
  unint64_t v6 = (std::string *)((char *)this + 328);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    *((void *)this + 43) = *((void *)&v109.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 88) = v110;
  *((void *)this + 40) = &unk_26C5C3878;
  *(void *)((char *)this + 356) = v111;
  *((_DWORD *)this + 91) = v112;
  long long v83 = &unk_26C5C3AF0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  std::string v88 = &unk_26C5C3AF0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  unint64_t v93 = &unk_26C5C3AF0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  long long v98 = &unk_26C5C3AF0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  unint64_t v103 = &unk_26C5C3AF0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  int v108 = &unk_26C5C3AF0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  uint64_t v52 = &unk_26C5C3AF0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  long long v57 = &unk_26C5C3AF0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  unint64_t v62 = &unk_26C5C3AF0;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  unint64_t v67 = &unk_26C5C3AF0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  int v72 = &unk_26C5C3AF0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  unint64_t v77 = &unk_26C5C3AF0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C42F0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 368, (uint64_t)&v46);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 416, (uint64_t)&v39);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 464, (uint64_t)&v32);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 512, (uint64_t)&v25);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 560, (uint64_t)&v18);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 608, (uint64_t)&v11);
  std::string v11 = &unk_26C5C3AF0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v18 = &unk_26C5C3AF0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  long long v25 = &unk_26C5C3AF0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  unint64_t v32 = &unk_26C5C3AF0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  float v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  unint64_t v46 = &unk_26C5C3AF0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C5D58;
  return this;
}

void sub_2150D9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29,unint64_t a30,unint64_t a31,unint64_t a32,unint64_t a33,unint64_t a34,unint64_t a35,unint64_t a36,unint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v79);
  STACK[0x3F0] = a26;
  if (SLOBYTE(STACK[0x40F]) < 0) {
    operator delete((void *)STACK[0x3F8]);
  }
  STACK[0x420] = a27;
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  STACK[0x450] = a28;
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  STACK[0x480] = a29;
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  STACK[0x4B0] = a30;
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  STACK[0x4E0] = a31;
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  if (*(char *)(v78 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v78);
  STACK[0x2B0] = a32;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  STACK[0x2E0] = a33;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  STACK[0x310] = a34;
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  STACK[0x340] = a35;
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  STACK[0x370] = a36;
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  STACK[0x3A0] = a37;
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  STACK[0x220] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  STACK[0x268] = (unint64_t)&unk_26C5C3AF0;
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  _Unwind_Resume(a1);
}

void sub_2150DA0A0()
{
}

void sub_2150DA0A8()
{
}

void sub_2150DA0B0()
{
}

void sub_2150DA0B8()
{
}

void sub_2150DA0C0()
{
}

void sub_2150DA0C8()
{
}

void sub_2150DA0D0()
{
}

void sub_2150DA0D8()
{
}

void sub_2150DA0E0()
{
}

void sub_2150DA0E8()
{
}

void sub_2150DA0F0()
{
}

void sub_2150DA0F8()
{
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150DA17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_2150DA210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long>::columnCount()
{
  return 6;
}

void mlcore::ItemSearchTable::~ItemSearchTable(void **this)
{
  *this = &unk_26C5C42F0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 46));
  *this = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *this = &unk_26C5C42F0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 46));
  *this = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,long long,long long,long long,long long,long long>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C42F0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 368);
  *(void *)a1 = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C42F0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 368);
  *(void *)a1 = &unk_26C5C37C0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::ItemSearchTable::persistentIDColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(void *)(a2 + 24) = *((void *)this + 49);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 100);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 103);
  *(void *)(a2 + 36) = *(void *)((char *)this + 404);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemSearchTable::searchTitleColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(void *)(a2 + 24) = *((void *)this + 55);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 112);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 115);
  *(void *)(a2 + 36) = *(void *)((char *)this + 452);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemSearchTable::searchAlbumColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 495) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 59), *((void *)this + 60));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 472);
    *(void *)(a2 + 24) = *((void *)this + 61);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 124);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 127);
  *(void *)(a2 + 36) = *(void *)((char *)this + 500);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemSearchTable::searchArtistColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 65), *((void *)this + 66));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 520);
    *(void *)(a2 + 24) = *((void *)this + 67);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 136);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 139);
  *(void *)(a2 + 36) = *(void *)((char *)this + 548);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemSearchTable::searchComposerColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 71), *((void *)this + 72));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(void *)(a2 + 24) = *((void *)this + 73);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 148);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 151);
  *(void *)(a2 + 36) = *(void *)((char *)this + 596);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemSearchTable::searchAlbumArtistColumn(mlcore::ItemSearchTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 163);
  *(void *)(a2 + 36) = *(void *)((char *)this + 644);
  *(void *)a2 = &unk_26C5C47E8;
}

mlcore::GeniusMetadataTable *mlcore::GeniusMetadataTable::GeniusMetadataTable(mlcore::GeniusMetadataTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "genius_metadata");
  std::string::basic_string[abi:ne180100]<0>(v18, "genius_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v20, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v14, "revision_level");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v16, (uint64_t)v14, 0);
  std::string::basic_string[abi:ne180100]<0>(v10, "version");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v12, (uint64_t)v10, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "checksum");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v8, (uint64_t)v6, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v22, (uint64_t)v20, (uint64_t)v16, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  v8[0] = &unk_26C5C3AF0;
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  v12[0] = &unk_26C5C3AF0;
  if (v13 < 0) {
    operator delete((void *)v12[1]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  v16[0] = &unk_26C5C3AF0;
  if (v17 < 0) {
    operator delete((void *)v16[1]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  v20[0] = &unk_26C5C3AF0;
  if (v21 < 0) {
    operator delete((void *)v20[1]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  *(void *)this = &unk_26C5C7AB0;
  return this;
}

void sub_2150DABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  a31 = &unk_26C5C3AF0;
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a46 = &unk_26C5C3AF0;
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  *(void *)(v52 - 160) = &unk_26C5C3AF0;
  if (*(char *)(v52 - 129) < 0) {
    operator delete(*(void **)(v52 - 152));
  }
  if (*(char *)(v52 - 161) < 0) {
    operator delete(*(void **)(v52 - 184));
  }
  *(void *)(v52 - 88) = &unk_26C5C3AF0;
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (*(char *)(v52 - 17) < 0) {
    operator delete(*(void **)(v52 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_2150DAD60()
{
}

void sub_2150DAD68()
{
}

void mlcore::GeniusMetadataTable::~GeniusMetadataTable(mlcore::GeniusMetadataTable *this)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

void mlcore::GeniusMetadataTable::persistentIDColumn(mlcore::GeniusMetadataTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::GeniusMetadataTable::revisionLevelColumn(mlcore::GeniusMetadataTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::GeniusMetadataTable::versionColumn(mlcore::GeniusMetadataTable *this@<X0>, uint64_t a2@<X8>)
{
}

void mlcore::GeniusMetadataTable::checksumColumn(mlcore::GeniusMetadataTable *this@<X0>, uint64_t a2@<X8>)
{
}

mediaplatform::Data *mlcore::GeniusMetadataTable::dataColumn@<X0>(mlcore::GeniusMetadataTable *this@<X0>, uint64_t a2@<X8>)
{
  return mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<4ul>(a2, (uint64_t)this);
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  long long v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150DAE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3184);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3136);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3088);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3040);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2992);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2944);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2896);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2848);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2784);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2736);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2672);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2624);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2576);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2528);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2480);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2432);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2384);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2336);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2288);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2240);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2192);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2144);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2096);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2048);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2000);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1952);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1888);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1824);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1760);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1696);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1632);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1584);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1536);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1424);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1376);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1312);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1248);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1200);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1152);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1104);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1056);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 880);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 832);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 784);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 736);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 688);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 640);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 576);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 528);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_2150DB184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::columnCount()
{
  return 60;
}

void mlcore::ItemStoreTable::~ItemStoreTable(mlcore::ItemStoreTable *this)
{
  *(void *)this = &unk_26C5CB778;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 3232);
  *(void *)this = &unk_26C5CB7B0;
  *((void *)this + 398) = &unk_26C5C3AF0;
  if (*((char *)this + 3215) < 0) {
    operator delete(*((void **)this + 399));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5CB778;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 3232);
  *(void *)this = &unk_26C5CB7B0;
  *((void *)this + 398) = &unk_26C5C3AF0;
  if (*((char *)this + 3215) < 0) {
    operator delete(*((void **)this + 399));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  *(void *)(a1 + 2816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2847) < 0) {
    operator delete(*(void **)(a1 + 2824));
  }
  *(void *)(a1 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2799) < 0) {
    operator delete(*(void **)(a1 + 2776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2704);
  *(void *)(a1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2687) < 0) {
    operator delete(*(void **)(a1 + 2664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  *(void *)(a1 + 2496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2527) < 0) {
    operator delete(*(void **)(a1 + 2504));
  }
  *(void *)(a1 + 2448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2479) < 0) {
    operator delete(*(void **)(a1 + 2456));
  }
  *(void *)(a1 + 2400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2431) < 0) {
    operator delete(*(void **)(a1 + 2408));
  }
  *(void *)(a1 + 2352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2383) < 0) {
    operator delete(*(void **)(a1 + 2360));
  }
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2240);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2176);
  *(void *)(a1 + 2128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2159) < 0) {
    operator delete(*(void **)(a1 + 2136));
  }
  *(void *)(a1 + 2080) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2111) < 0) {
    operator delete(*(void **)(a1 + 2088));
  }
  *(void *)(a1 + 2032) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2063) < 0) {
    operator delete(*(void **)(a1 + 2040));
  }
  *(void *)(a1 + 1984) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2015) < 0) {
    operator delete(*(void **)(a1 + 1992));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1920);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1856);
  *(void *)(a1 + 1808) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1839) < 0) {
    operator delete(*(void **)(a1 + 1816));
  }
  *(void *)(a1 + 1760) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1791) < 0) {
    operator delete(*(void **)(a1 + 1768));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  *(void *)(a1 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1679) < 0) {
    operator delete(*(void **)(a1 + 1656));
  }
  *(void *)(a1 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1631) < 0) {
    operator delete(*(void **)(a1 + 1608));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1536);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1472);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1408);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1344);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1280);
  *(void *)(a1 + 1232) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  *(void *)(a1 + 1184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*(void **)(a1 + 1192));
  }
  *(void *)(a1 + 1136) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  *(void *)(a1 + 1088) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  *(void *)(a1 + 1040) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1071) < 0) {
    operator delete(*(void **)(a1 + 1048));
  }
  *(void *)(a1 + 992) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  *(void *)(a1 + 944) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  *(void *)(a1 + 896) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*(void **)(a1 + 904));
  }
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  *(void *)(a1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  *(void *)(a1 + 144) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  *(void *)(a1 + 96) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)(a1 + 48) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3056) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3087) < 0) {
    operator delete(*(void **)(a1 + 3064));
  }
  *(void *)(a1 + 3008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3039) < 0) {
    operator delete(*(void **)(a1 + 3016));
  }
  *(void *)(a1 + 2960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2991) < 0) {
    operator delete(*(void **)(a1 + 2968));
  }
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2816) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2847) < 0) {
    operator delete(*(void **)(a1 + 2824));
  }
  *(void *)(a1 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2799) < 0) {
    operator delete(*(void **)(a1 + 2776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2704);
  *(void *)(a1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2687) < 0) {
    operator delete(*(void **)(a1 + 2664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2496) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2527) < 0) {
    operator delete(*(void **)(a1 + 2504));
  }
  *(void *)(a1 + 2448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2479) < 0) {
    operator delete(*(void **)(a1 + 2456));
  }
  *(void *)(a1 + 2400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2431) < 0) {
    operator delete(*(void **)(a1 + 2408));
  }
  *(void *)(a1 + 2352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2383) < 0) {
    operator delete(*(void **)(a1 + 2360));
  }
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2287) < 0) {
    operator delete(*(void **)(a1 + 2264));
  }
  *(void *)(a1 + 2208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2239) < 0) {
    operator delete(*(void **)(a1 + 2216));
  }
  *(void *)(a1 + 2160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2191) < 0) {
    operator delete(*(void **)(a1 + 2168));
  }
  *(void *)(a1 + 2112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2143) < 0) {
    operator delete(*(void **)(a1 + 2120));
  }
  *(void *)(a1 + 2064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2095) < 0) {
    operator delete(*(void **)(a1 + 2072));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2016) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2047) < 0) {
    operator delete(*(void **)(a1 + 2024));
  }
  *(void *)(a1 + 1968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1999) < 0) {
    operator delete(*(void **)(a1 + 1976));
  }
  *(void *)(a1 + 1920) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1951) < 0) {
    operator delete(*(void **)(a1 + 1928));
  }
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1808);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1744);
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1680);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1616);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1552);
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1296) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*(void **)(a1 + 1304));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  *(void *)(a1 + 1120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1151) < 0) {
    operator delete(*(void **)(a1 + 1128));
  }
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 976) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 912);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 848);
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  *(void *)(a1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  return mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 336) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  *(void *)(a1 + 288) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  *(void *)(a1 + 240) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mediaplatform::DatabaseTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5CB7B0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5CB7B0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5CB7B0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string,std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5CB778;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(a1 + 3232);
  *(void *)a1 = &unk_26C5CB7B0;
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26C5CB778;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(a1 + 3232);
  *(void *)a1 = &unk_26C5CB7B0;
  *(void *)(a1 + 3184) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3215) < 0) {
    operator delete(*(void **)(a1 + 3192));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 3008) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 3039) < 0) {
    operator delete(*(void **)(a1 + 3016));
  }
  *(void *)(a1 + 2960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2991) < 0) {
    operator delete(*(void **)(a1 + 2968));
  }
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2960) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2991) < 0) {
    operator delete(*(void **)(a1 + 2968));
  }
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2912) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2943) < 0) {
    operator delete(*(void **)(a1 + 2920));
  }
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2864) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2895) < 0) {
    operator delete(*(void **)(a1 + 2872));
  }
  return mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2768) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2799) < 0) {
    operator delete(*(void **)(a1 + 2776));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2704);
  *(void *)(a1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2687) < 0) {
    operator delete(*(void **)(a1 + 2664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2704);
  *(void *)(a1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2687) < 0) {
    operator delete(*(void **)(a1 + 2664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2687) < 0) {
    operator delete(*(void **)(a1 + 2664));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2592);
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2544) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2479) < 0) {
    operator delete(*(void **)(a1 + 2456));
  }
  *(void *)(a1 + 2400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2431) < 0) {
    operator delete(*(void **)(a1 + 2408));
  }
  *(void *)(a1 + 2352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2383) < 0) {
    operator delete(*(void **)(a1 + 2360));
  }
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2400) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2431) < 0) {
    operator delete(*(void **)(a1 + 2408));
  }
  *(void *)(a1 + 2352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2383) < 0) {
    operator delete(*(void **)(a1 + 2360));
  }
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2383) < 0) {
    operator delete(*(void **)(a1 + 2360));
  }
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  return mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2239) < 0) {
    operator delete(*(void **)(a1 + 2216));
  }
  *(void *)(a1 + 2160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2191) < 0) {
    operator delete(*(void **)(a1 + 2168));
  }
  *(void *)(a1 + 2112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2143) < 0) {
    operator delete(*(void **)(a1 + 2120));
  }
  *(void *)(a1 + 2064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2095) < 0) {
    operator delete(*(void **)(a1 + 2072));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2191) < 0) {
    operator delete(*(void **)(a1 + 2168));
  }
  *(void *)(a1 + 2112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2143) < 0) {
    operator delete(*(void **)(a1 + 2120));
  }
  *(void *)(a1 + 2064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2095) < 0) {
    operator delete(*(void **)(a1 + 2072));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2112) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2143) < 0) {
    operator delete(*(void **)(a1 + 2120));
  }
  *(void *)(a1 + 2064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2095) < 0) {
    operator delete(*(void **)(a1 + 2072));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 2064) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 2095) < 0) {
    operator delete(*(void **)(a1 + 2072));
  }
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1968) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1999) < 0) {
    operator delete(*(void **)(a1 + 1976));
  }
  *(void *)(a1 + 1920) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1951) < 0) {
    operator delete(*(void **)(a1 + 1928));
  }
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1808);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1744);
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1920) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1951) < 0) {
    operator delete(*(void **)(a1 + 1928));
  }
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1808);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1744);
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1872) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1903) < 0) {
    operator delete(*(void **)(a1 + 1880));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1808);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1744);
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1808);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1744);
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1616);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1552);
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1552);
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1456) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1487) < 0) {
    operator delete(*(void **)(a1 + 1464));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1392);
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1344) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1375) < 0) {
    operator delete(*(void **)(a1 + 1352));
  }
  return mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  *(void *)(a1 + 1120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1151) < 0) {
    operator delete(*(void **)(a1 + 1128));
  }
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<37ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  *(void *)(a1 + 1120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1151) < 0) {
    operator delete(*(void **)(a1 + 1128));
  }
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1120) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1151) < 0) {
    operator delete(*(void **)(a1 + 1128));
  }
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<39ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1072) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*(void **)(a1 + 1080));
  }
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 1024) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  return mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<42ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 912);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 848);
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 848);
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<44ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<45ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<46ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<48ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  return mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  return mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<50ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  return mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<51ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  return mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

void mlcore::ItemStoreTable::persistentIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3263) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 405), *((void *)this + 406));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3240);
    *(void *)(a2 + 24) = *((void *)this + 407);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 816);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 819);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3268);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::storeComposerIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 417), *((void *)this + 418));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3336);
    *(void *)(a2 + 24) = *((void *)this + 419);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 840);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 843);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3364);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::storeGenreIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3407) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 423), *((void *)this + 424));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3384);
    *(void *)(a2 + 24) = *((void *)this + 425);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 852);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 855);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3412);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::storefrontIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3503) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 435), *((void *)this + 436));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3480);
    *(void *)(a2 + 24) = *((void *)this + 437);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 876);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 879);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3508);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::purchaseHistoryTokenColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3599) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 447), *((void *)this + 448));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3576);
    *(void *)(a2 + 24) = *((void *)this + 449);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 900);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 903);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3604);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::isOtaPurchasedColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3967) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 493), *((void *)this + 494));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3944);
    *(void *)(a2 + 24) = *((void *)this + 495);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 992);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 995);
  *(void *)(a2 + 36) = *(void *)((char *)this + 3972);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::storeKindColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4015) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 499), *((void *)this + 500));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3992);
    *(void *)(a2 + 24) = *((void *)this + 501);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1004);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1007);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4020);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::downloaderAccountIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4111) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 511), *((void *)this + 512));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4088);
    *(void *)(a2 + 24) = *((void *)this + 513);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1028);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1031);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4116);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::familyAccountIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 517), *((void *)this + 518));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4136);
    *(void *)(a2 + 24) = *((void *)this + 519);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1040);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1043);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4164);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::keyVersionsColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4255) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 529), *((void *)this + 530));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4232);
    *(void *)(a2 + 24) = *((void *)this + 531);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1064);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1067);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4260);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::keyPlatformIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 535), *((void *)this + 536));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4280);
    *(void *)(a2 + 24) = *((void *)this + 537);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1076);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1079);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4308);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::keyIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4351) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 541), *((void *)this + 542));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4328);
    *(void *)(a2 + 24) = *((void *)this + 543);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1088);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1091);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4356);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::keyID2Column(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 547), *((void *)this + 548));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4376);
    *(void *)(a2 + 24) = *((void *)this + 549);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1100);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1103);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4404);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::datePurchasedColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4447) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 553), *((void *)this + 554));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4424);
    *(void *)(a2 + 24) = *((void *)this + 555);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1112);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1115);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4452);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::feedURLColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 4607;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4607) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 573), *((void *)this + 574));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4584);
    *(void *)(a2 + 24) = *((void *)this + 575);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1152);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 577), *((void *)this + 578));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4616);
    *(void *)(a2 + 56) = *((void *)this + 579);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DEE68(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::artworkURLColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 4671;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4671) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 581), *((void *)this + 582));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4648);
    *(void *)(a2 + 24) = *((void *)this + 583);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1168);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 585), *((void *)this + 586));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4680);
    *(void *)(a2 + 56) = *((void *)this + 587);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DEF98(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storeXidColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 4735;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4735) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 589), *((void *)this + 590));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4712);
    *(void *)(a2 + 24) = *((void *)this + 591);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1184);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 593), *((void *)this + 594));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4744);
    *(void *)(a2 + 56) = *((void *)this + 595);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF0C8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storeFlavorColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 4799;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4799) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 597), *((void *)this + 598));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4776);
    *(void *)(a2 + 24) = *((void *)this + 599);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1200);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 601), *((void *)this + 602));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4808);
    *(void *)(a2 + 56) = *((void *)this + 603);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF1F8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::storeMatchedStatusColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4863) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 605), *((void *)this + 606));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4840);
    *(void *)(a2 + 24) = *((void *)this + 607);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1216);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1219);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4868);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::storeRedownloadedStatusColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4911) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 611), *((void *)this + 612));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4888);
    *(void *)(a2 + 24) = *((void *)this + 613);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1228);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1231);
  *(void *)(a2 + 36) = *(void *)((char *)this + 4916);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::extrasURLColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 4959;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4959) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 617), *((void *)this + 618));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4936);
    *(void *)(a2 + 24) = *((void *)this + 619);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1240);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 621), *((void *)this + 622));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4968);
    *(void *)(a2 + 56) = *((void *)this + 623);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF488(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::vppIsLicensedColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5023) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 625), *((void *)this + 626));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5000);
    *(void *)(a2 + 24) = *((void *)this + 627);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1256);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1259);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5028);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::vppOrgIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5071) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 631), *((void *)this + 632));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5048);
    *(void *)(a2 + 24) = *((void *)this + 633);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1268);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1271);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5076);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::vppOrgNameColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5119;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5119) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 637), *((void *)this + 638));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5096);
    *(void *)(a2 + 24) = *((void *)this + 639);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1280);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 641), *((void *)this + 642));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5128);
    *(void *)(a2 + 56) = *((void *)this + 643);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF718(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::syncRedownloadParamsColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5183;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5183) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 645), *((void *)this + 646));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5160);
    *(void *)(a2 + 24) = *((void *)this + 647);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1296);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 649), *((void *)this + 650));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5192);
    *(void *)(a2 + 56) = *((void *)this + 651);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF848(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::radioStationIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5439;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5439) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 677), *((void *)this + 678));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5416);
    *(void *)(a2 + 24) = *((void *)this + 679);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1360);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 681), *((void *)this + 682));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5448);
    *(void *)(a2 + 56) = *((void *)this + 683);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DF978(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::advertisementUniqueIDColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5503;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5503) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 685), *((void *)this + 686));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5480);
    *(void *)(a2 + 24) = *((void *)this + 687);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1376);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = v4[5];
  unint64_t v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 689), *((void *)this + 690));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5512);
    *(void *)(a2 + 56) = *((void *)this + 691);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150DFAA8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ItemStoreTable::advertisementTypeColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 693), *((void *)this + 694));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5544);
    *(void *)(a2 + 24) = *((void *)this + 695);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1392);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1395);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5572);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::isSubscriptionColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 711), *((void *)this + 712));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5688);
    *(void *)(a2 + 24) = *((void *)this + 713);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1428);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1431);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5716);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::syncInMyLibraryColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5759;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 717), *((void *)this + 718));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5736);
    *(void *)(a2 + 24) = *((void *)this + 719);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1440);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStoreTable::cloudInMyLibraryColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (char *)this + 5807;
  *(void *)a2 = &unk_26C5C3AF0;
  long long v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 723), *((void *)this + 724));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5784);
    *(void *)(a2 + 24) = *((void *)this + 725);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1452);
  *(void *)(a2 + 36) = *(void *)(v4 + 5);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ItemStoreTable::cloudPlaybackEndpointTypeColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5919) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 737), *((void *)this + 738));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5896);
    *(void *)(a2 + 24) = *((void *)this + 739);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1480);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1483);
  *(void *)(a2 + 36) = *(void *)((char *)this + 5924);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::ItemStoreTable::assetStoreExtendedPlaybackAttributeColumn(mlcore::ItemStoreTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  char v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 763), *((void *)this + 764));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6104);
    *(void *)(a2 + 24) = *((void *)this + 765);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1532);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1535);
  *(void *)(a2 + 36) = *(void *)((char *)this + 6132);
  *(void *)a2 = &unk_26C5C47E8;
}

uint64_t mediaplatform::Data::description(mediaplatform::Data *this)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  v19[0] = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = MEMORY[0x263F8C328] + 64;
  uint64_t v14 = MEMORY[0x263F8C328] + 64;
  char v4 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  v13[0] = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = v5;
  v13[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24));
  std::ios_base::init(v6, v15);
  uint64_t v7 = MEMORY[0x263F8C328] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v8 = v4[5];
  uint64_t v14 = v4[4];
  *(void *)((char *)&v15[-1] + *(void *)(v14 - 24)) = v8;
  v13[0] = v4[1];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = v4[6];
  v19[0] = v2;
  v13[0] = v7;
  uint64_t v14 = v3;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  v15[0] = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  int v18 = 24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"<", 1);
  if (*((void *)this + 1))
  {
    unint64_t v10 = 0;
    do
    {
      *(_DWORD *)((char *)v15 + *(void *)(v14 - 24)) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v14 - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      ++v10;
    }
    while (v10 < *((void *)this + 1));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)">", 1);
  std::stringbuf::str();
  v13[0] = *v4;
  uint64_t v11 = v4[9];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = v4[8];
  uint64_t v14 = v11;
  v15[0] = v9;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166B2650](v19);
}

void sub_2150E0310(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2166B2650](v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Data::Data(uint64_t this)
{
  *(void *)this = &unk_26C5BF2D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_26C5BF2D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

void mediaplatform::Data::Data(mediaplatform::Data *this, const mediaplatform::FilePath *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26C5BF2D8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  mediaplatform::FilePath::str(a2, (uint64_t)__p);
  uint64_t v3 = MEMORY[0x263F8C308] + 64;
  uint64_t v14 = MEMORY[0x263F8C308] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  v12[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = v4;
  v12[1] = 0;
  uint64_t v5 = (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24));
  std::ios_base::init(v5, v13);
  uint64_t v6 = MEMORY[0x263F8C308] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v12[0] = v6;
  uint64_t v14 = v3;
  MEMORY[0x2166B2380](v13);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24)), *(_DWORD *)&v13[*(void *)(v12[0] - 24) + 16] | 4);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (!*(_DWORD *)&v13[*(void *)(v12[0] - 24) + 16])
  {
    std::istream::tellg();
    operator new[]();
  }
  mediaplatform::FormatString<mediaplatform::FilePath>(&v9, (std::string *)"File not found: {0}", (uint64_t)a2);
  int v8 = 2;
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)__p, &v8, (long long *)&v9);
  exceptiouint64_t n = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)__p);
}

void sub_2150E0784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a36);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatString<mediaplatform::FilePath>(std::string *a1, std::string *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<mediaplatform::FilePath>(a2, a1, 0, &v3);
}

void sub_2150E086C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2166B2390](a1 + 2);
  std::istream::~istream();
  MEMORY[0x2166B2650](a1 + 53);
  return a1;
}

void mediaplatform::FormatImplementation<mediaplatform::FilePath>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8 = 0;
  std::string v9 = (char *)a1;
  for (std::string::size_type i = a3; ; ++i)
  {
    uint64_t v49 = v9;
    if (*v9 == 123) {
      break;
    }
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
      {
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      }
      return;
    }
LABEL_7:
    ++v9;
  }
  int v11 = v9[1];
  if (v11 == 123)
  {
    uint64_t v49 = v9 + 1;
    char v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v49 = v9 + 2;
    int v37 = v9[2];
    if ((v37 - 48) > 9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v38 = 0;
      float v39 = v9 + 3;
      do
      {
        std::string v40 = v39;
        uint64_t v49 = v39;
        uint64_t v38 = (v37 - 48) + 10 * v38;
        ++v39;
        int v42 = *v40;
        int v41 = (unsigned __int8 *)(v40 - 1);
        int v37 = v42;
      }
      while ((v42 - 58) >= 0xFFFFFFF6);
      uint64_t v49 = (char *)(v41 + 2);
      if (*(v39 - 1) == 125) {
        mediaplatform::FormatterParameters<0ul,mediaplatform::FilePath>::formatOptionsAtIndex<mediaplatform::FilePath>(v38);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v44, (const char **)&v49);
  if (v45) {
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::FilePath>>();
  }
  std::string v12 = v49;
  uint64_t v13 = *a4;
  int v50 = &unk_26C5BF338;
  memset(&v51, 0, sizeof(v51));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, *(long long **)(v13 + 8), *(long long **)(v13 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 3));
  mediaplatform::FilePath::str((mediaplatform::FilePath *)&v50, (uint64_t)&__p);
  int v50 = &unk_26C5BF338;
  uint64_t v55 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  size_t v14 = v54;
  if ((v54 & 0x80u) != 0) {
    size_t v14 = v53;
  }
  size_t v15 = v47;
  if (v47 <= v14) {
    size_t v15 = v14;
  }
  if (v46) {
    size_t v14 = v15;
  }
  mediaplatform::FormatImplementation<mediaplatform::FilePath>(v12, a2, v14 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v16 = a2;
  }
  else {
    BOOL v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  long long v17 = (char *)v16 + i;
  size_t v18 = v54;
  unsigned __int8 v19 = v54;
  size_t v20 = v53;
  if ((v54 & 0x80u) == 0) {
    size_t v21 = v54;
  }
  else {
    size_t v21 = v53;
  }
  if (v46 && (size_t v22 = v47, v23 = v47 - v21, v47 > v21))
  {
    if (v44)
    {
      if (v44 == 1)
      {
        unint64_t v29 = v23 >> 1;
        if (v23 >= 2)
        {
          if (v29 <= 1) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = v23 >> 1;
          }
          do
          {
            *v17++ = v48;
            --v30;
          }
          while (v30);
          size_t v18 = v54;
          size_t v20 = v53;
          unsigned __int8 v19 = v54;
        }
        if ((v19 & 0x80u) == 0) {
          size_t v31 = v18;
        }
        else {
          size_t v31 = v20;
        }
        if (v31)
        {
          if ((v19 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v17, p_p, v31);
        }
        if (v23 != v29)
        {
          unint64_t v33 = v23 - (v23 >> 1);
          int v34 = &v17[v21];
          if (v33 <= 1) {
            unint64_t v33 = 1;
          }
          uint64_t v35 = -(uint64_t)v33;
          do
            *v34++ = v48;
          while (!__CFADD__(v35++, 1));
        }
      }
      else if (v44 == 2)
      {
        if (v47 != v21)
        {
          do
          {
            *v17++ = v48;
            --v23;
          }
          while (v23);
          size_t v18 = v54;
          size_t v20 = v53;
          unsigned __int8 v19 = v54;
        }
        size_t v24 = (v19 & 0x80u) == 0 ? v18 : v20;
        if (v24)
        {
          if ((v19 & 0x80u) == 0) {
            long long v25 = &__p;
          }
          else {
            long long v25 = __p;
          }
          std::string v26 = v17;
          goto LABEL_47;
        }
      }
    }
    else
    {
      if (v21)
      {
        if ((v54 & 0x80u) == 0) {
          int v27 = &__p;
        }
        else {
          int v27 = __p;
        }
        memmove((char *)v16 + i, v27, v21);
      }
      if (v22 != v21)
      {
        size_t v28 = (size_t)v16 + v21;
        do
        {
          *(unsigned char *)(v28 + i) = v48;
          ++v28;
          --v23;
        }
        while (v23);
      }
    }
  }
  else if (v21)
  {
    if ((v54 & 0x80u) == 0) {
      long long v25 = &__p;
    }
    else {
      long long v25 = __p;
    }
    std::string v26 = (char *)v16 + i;
    size_t v24 = v21;
LABEL_47:
    memmove(v26, v25, v24);
  }
  if ((char)v54 < 0) {
    operator delete(__p);
  }
  if (i != a3) {
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
  }
}

void sub_2150E0D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,mediaplatform::FilePath>::formatOptionsAtIndex<mediaplatform::FilePath>(uint64_t a1)
{
  if (!a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::FilePath>();
}

void sub_2150E0E20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::FilePath>>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150E0E7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::FilePath>()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2150E0ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mediaplatform::Data *mediaplatform::Data::Data(mediaplatform::Data *this, const mediaplatform::Data *a2)
{
  return mediaplatform::Data::Data(this, *((const void **)a2 + 3), *((void *)a2 + 1), 1);
}

{
  return mediaplatform::Data::Data(this, *((const void **)a2 + 3), *((void *)a2 + 1), 1);
}

__n128 mediaplatform::Data::Data(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C5BF2D8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

{
  __n128 result;

  *(void *)a1 = &unk_26C5BF2D8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

__n128 mediaplatform::Data::_move(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

uint64_t mediaplatform::Data::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    if (*(void *)(result + 24))
    {
      if (*(unsigned char *)(result + 32)) {
        MEMORY[0x2166B26D0]();
      }
    }
    operator new[]();
  }
  return result;
}

__n128 mediaplatform::Data::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  return result;
}

BOOL mediaplatform::Data::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  return v2 == *(void *)(a1 + 8) && memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) == 0;
}

uint64_t mediaplatform::Data::length(mediaplatform::Data *this)
{
  return *((void *)this + 1);
}

BOOL mediaplatform::Data::operator!=(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  return v2 != *(void *)(a1 + 8) || memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) != 0;
}

uint64_t mediaplatform::Data::compare(mediaplatform::Data *this, const mediaplatform::Data *a2)
{
  size_t v2 = *((void *)a2 + 1);
  uint64_t v3 = (const void *)*((void *)a2 + 3);
  size_t v4 = *((void *)this + 1);
  if (v2 >= v4) {
    size_t v5 = *((void *)this + 1);
  }
  else {
    size_t v5 = v2;
  }
  uint64_t v6 = (const void *)*((void *)this + 3);
  if (v2 < v4) {
    int v7 = 1;
  }
  else {
    int v7 = -1;
  }
  LODWORD(result) = memcmp(v6, v3, v5);
  if (v4 == v2) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = v7;
  }
  if (result) {
    return result;
  }
  else {
    return v9;
  }
}

uint64_t mediaplatform::Data::bytes(mediaplatform::Data *this)
{
  return *((void *)this + 3);
}

BOOL mediaplatform::Data::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t mediaplatform::operator<<(uint64_t a1)
{
  return a1;
}

void *mediaplatform::operator>>(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4;
  if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32))
  {
    unint64_t v4 = 0;
    size_t v5 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    size_t v5 = 0;
    do
    {
      int64_t v8 = (int64_t)&v6[-v4];
      if ((unint64_t)&v6[-v4] > 0xFFFFFFFFFFFFFBFFLL)
      {
        v6 += 1024;
      }
      else
      {
        if ((unint64_t)(v7 - v6) >= 0x400)
        {
          bzero(v6, 0x400uLL);
        }
        else
        {
          unint64_t v9 = v8 + 1024;
          if (v8 + 1024 < 0) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (2 * (uint64_t)&v7[-v4] > v9) {
            unint64_t v9 = 2 * (void)&v7[-v4];
          }
          if ((unint64_t)&v7[-v4] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v10 = v9;
          }
          if (v10) {
            int v11 = (char *)operator new(v10);
          }
          else {
            int v11 = 0;
          }
          bzero(&v11[v8], 0x400uLL);
          std::string v12 = &v11[v8];
          if (v6 != (char *)v4)
          {
            uint64_t v13 = &v6[~v4];
            do
            {
              char v14 = *--v6;
              (v13--)[(void)v11] = v14;
            }
            while (v6 != (char *)v4);
            std::string v12 = v11;
          }
          int v7 = &v11[v10];
          if (v4) {
            operator delete((void *)v4);
          }
          unint64_t v4 = (unint64_t)v12;
          uint64_t v6 = &v11[v8];
        }
        v6 += 1024;
      }
      std::istream::read();
      v5 += a1[1];
    }
    while (!*(_DWORD *)((char *)v3 + *(void *)(*a1 - 24)));
  }
  mediaplatform::Data::_ensureCapacity(a2, *(void *)(a2 + 8) + v5);
  uint64_t v15 = *(void *)(a2 + 24);
  if (v15) {
    memcpy((void *)(v15 + *(void *)(a2 + 8)), (const void *)v4, v5);
  }
  *(void *)(a2 + 8) += v5;
  if (v4) {
    operator delete((void *)v4);
  }
  return a1;
}

void sub_2150E1380(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Data::_ensureCapacity(uint64_t this, unint64_t a2)
{
  if (*(void *)(this + 16) < a2) {
    operator new[]();
  }
  return this;
}

uint64_t mediaplatform::Data::appendBytes(mediaplatform::Data *this, const void *a2, size_t a3)
{
  uint64_t result = mediaplatform::Data::_ensureCapacity((uint64_t)this, *((void *)this + 1) + a3);
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    uint64_t result = (uint64_t)memcpy((void *)(v7 + *((void *)this + 1)), a2, a3);
  }
  *((void *)this + 1) += a3;
  return result;
}

uint64_t mediaplatform::Data::setBytes(mediaplatform::Data *this, const void *a2, unint64_t a3)
{
  *((void *)this + 1) = 0;
  uint64_t result = mediaplatform::Data::_ensureCapacity((uint64_t)this, a3);
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    uint64_t result = (uint64_t)memcpy((void *)(v7 + *((void *)this + 1)), a2, a3);
  }
  *((void *)this + 1) += a3;
  return result;
}

uint64_t mediaplatform::Data::clear(uint64_t this)
{
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t mediaplatform::Data::append(uint64_t this, const mediaplatform::Data *a2)
{
  size_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    uint64_t v3 = this;
    unint64_t v4 = (const void *)*((void *)a2 + 3);
    this = mediaplatform::Data::_ensureCapacity(this, *(void *)(this + 8) + v2);
    uint64_t v5 = *(void *)(v3 + 24);
    if (v5) {
      this = (uint64_t)memcpy((void *)(v5 + *(void *)(v3 + 8)), v4, v2);
    }
    *(void *)(v3 + 8) += v2;
  }
  return this;
}

mlcore::LibraryPropertyTable *mlcore::LibraryPropertyTable::LibraryPropertyTable(mlcore::LibraryPropertyTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v38, "library_property");
  std::string::basic_string[abi:ne180100]<0>(v31, "property_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v33, (uint64_t)v31, 1);
  std::string::basic_string[abi:ne180100]<0>(v24, "source_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v26, (uint64_t)v24, 0);
  std::string::basic_string[abi:ne180100]<0>(v17, "key");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v19, (uint64_t)v17, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v12, (uint64_t)__p, 0);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v38;
  }
  unsigned __int8 v54 = &unk_26C5C3AF0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v34;
  }
  int v56 = v35;
  unsigned __int8 v54 = &unk_26C5C3878;
  uint64_t v57 = v36;
  int v58 = v37;
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v27;
  }
  int v51 = v28;
  uint64_t v49 = &unk_26C5C3878;
  uint64_t v52 = v29;
  int v53 = v30;
  int v44 = &unk_26C5C3AF0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v20;
  }
  int v46 = v21;
  int v44 = &unk_26C5C3818;
  char v47 = v22;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v48, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v23;
  }
  float v39 = &unk_26C5C3AF0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v40, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = v13;
  }
  int v41 = v14;
  float v39 = &unk_26C5C3818;
  char v42 = v15;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = v16;
  }
  *(void *)this = &unk_26C5BED18;
  size_t v2 = (std::string *)((char *)this + 8);
  int v8 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v59.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3670;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v75 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = __s;
  }
  int v77 = v56;
  uint64_t v75 = &unk_26C5C3878;
  uint64_t v78 = v57;
  int v79 = v58;
  uint64_t v70 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = v50;
  }
  int v72 = v51;
  uint64_t v70 = &unk_26C5C3878;
  uint64_t v73 = v52;
  int v74 = v53;
  uint64_t v65 = &unk_26C5C3AF0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v66, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v66 = v45;
  }
  int v67 = v46;
  uint64_t v65 = &unk_26C5C3818;
  char v68 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = v48;
  }
  uint64_t v60 = &unk_26C5C3AF0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v40;
  }
  int v62 = v41;
  uint64_t v60 = &unk_26C5C3818;
  char v63 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v43;
  }
  int v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v91, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = v71;
  }
  int v92 = v72;
  int v90 = &unk_26C5C3878;
  uint64_t v93 = v73;
  int v94 = v74;
  int v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v66;
  }
  int v87 = v67;
  int v85 = &unk_26C5C3818;
  char v88 = v68;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v89, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string v89 = v69;
  }
  uint64_t v80 = &unk_26C5C3AF0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v61;
  }
  int v82 = v62;
  uint64_t v80 = &unk_26C5C3818;
  char v83 = v63;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = v64;
  }
  int v100 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v101, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v101 = v86;
  }
  int v102 = v87;
  int v100 = &unk_26C5C3818;
  char v103 = v88;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v104, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v104 = v89;
  }
  int v95 = &unk_26C5C3AF0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v96, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else {
    std::string v96 = v81;
  }
  int v97 = v82;
  int v95 = &unk_26C5C3818;
  char v98 = v83;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v99, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v99 = v84;
  }
  int v105 = &unk_26C5C3AF0;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v96;
  }
  int v107 = v97;
  int v105 = &unk_26C5C3818;
  char v108 = v98;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v109, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v109 = v99;
  }
  *((void *)this + 10) = &unk_26C5C3AF0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 88) = v106;
  }
  *((_DWORD *)this + 28) = v107;
  *((void *)this + 10) = &unk_26C5C3818;
  *((unsigned char *)this + 116) = v108;
  uint64_t v3 = (std::string *)((char *)this + 120);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    *((void *)this + 17) = *((void *)&v109.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v105);
  *((void *)this + 18) = &unk_26C5C3AF0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 152) = v101;
  }
  *((_DWORD *)this + 44) = v102;
  *((void *)this + 18) = &unk_26C5C3818;
  *((unsigned char *)this + 180) = v103;
  unint64_t v4 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&v104.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v95);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v100);
  *((void *)this + 26) = &unk_26C5C3AF0;
  uint64_t v5 = (std::string *)((char *)this + 216);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
    *((void *)this + 29) = *((void *)&v91.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 60) = v92;
  *((void *)this + 26) = &unk_26C5C3878;
  *(void *)((char *)this + 244) = v93;
  *((_DWORD *)this + 63) = v94;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v80);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v85);
  int v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  *((void *)this + 32) = &unk_26C5C3AF0;
  uint64_t v6 = (std::string *)((char *)this + 264);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *((void *)this + 35) = *((void *)&v76.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 72) = v77;
  *((void *)this + 32) = &unk_26C5C3878;
  *(void *)((char *)this + 292) = v78;
  *((_DWORD *)this + 75) = v79;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v60);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v65);
  uint64_t v70 = &unk_26C5C3AF0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  uint64_t v75 = &unk_26C5C3AF0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v39);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v44);
  uint64_t v49 = &unk_26C5C3AF0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  unsigned __int8 v54 = &unk_26C5C3AF0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C41A0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 304, (uint64_t)&v33);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>((uint64_t)this + 352, (uint64_t)&v26);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 400, (uint64_t)v19);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 464, (uint64_t)v12);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v19);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string v26 = &unk_26C5C3AF0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  unint64_t v33 = &unk_26C5C3AF0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C7B60;
  std::string::basic_string[abi:ne180100]<0>(&__str, "UNIQUE (source_id, key)");
  std::string::operator=((std::string *)((char *)this + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2150E2474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,void *a63)
{
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v77);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2B0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2F0]);
  STACK[0x330] = a13;
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  STACK[0x360] = a14;
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (*(char *)(v76 + 79) < 0) {
    operator delete(*a10);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a75);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a76);
  STACK[0x230] = a15;
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  STACK[0x260] = a16;
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a26);
  if (a25 < 0) {
    operator delete(a20);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a40);
  if (a39 < 0) {
    operator delete(a34);
  }
  a54 = (uint64_t)&unk_26C5C3AF0;
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  a69 = (uint64_t)&unk_26C5C3AF0;
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

void sub_2150E28C0()
{
}

void sub_2150E28C8()
{
}

void sub_2150E28D0()
{
}

void sub_2150E28D8()
{
}

void sub_2150E28E0()
{
}

void sub_2150E28E8()
{
}

void sub_2150E28F0()
{
}

void sub_2150E28F8()
{
}

void mlcore::MediaTable<long long,long long,std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C41A0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 464);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 400);
  *(void *)(a1 + 352) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  *(void *)(a1 + 304) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  *(void *)a1 = &unk_26C5C3670;
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<long long,long long,std::string,std::string>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  uint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150E2ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,std::string>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_2150E2B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,std::string,std::string>::columnCount()
{
  return 4;
}

void mediaplatform::DatabaseTable<long long,long long,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3670;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3670;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3670;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 256) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  *(void *)(a1 + 208) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::LibraryPropertyTable::~LibraryPropertyTable(mlcore::LibraryPropertyTable *this)
{
  mlcore::MediaTable<long long,long long,std::string,std::string>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 128) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mlcore::LibraryPropertyTable::persistentIDColumn(mlcore::LibraryPropertyTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 39), *((void *)this + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(void *)(a2 + 24) = *((void *)this + 41);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 84);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 87);
  *(void *)(a2 + 36) = *(void *)((char *)this + 340);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::LibraryPropertyTable::sourceIDColumn(mlcore::LibraryPropertyTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 45), *((void *)this + 46));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 360);
    *(void *)(a2 + 24) = *((void *)this + 47);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 96);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 99);
  *(void *)(a2 + 36) = *(void *)((char *)this + 388);
  *(void *)a2 = &unk_26C5C47E8;
}

void mlcore::LibraryPropertyTable::keyColumn(mlcore::LibraryPropertyTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 51), *((void *)this + 52));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(void *)(a2 + 24) = *((void *)this + 53);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 108);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 436);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 55), *((void *)this + 56));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    *(void *)(a2 + 56) = *((void *)this + 57);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150E3128(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::LibraryPropertyTable::valueColumn(mlcore::LibraryPropertyTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  unint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 495) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 59), *((void *)this + 60));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 472);
    *(void *)(a2 + 24) = *((void *)this + 61);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 124);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 500);
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 63), *((void *)this + 64));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(void *)(a2 + 56) = *((void *)this + 65);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150E3238(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  uint64_t v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
  {
    return mlcore::ItemPropertyTitleOrderSection(v3);
  }
  else
  {
    unint64_t v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
    if (v4 == a2)
    {
      return mlcore::ItemPropertyAlbumOrderSection(v4);
    }
    else
    {
      uint64_t v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
      if (v5 == a2)
      {
        return mlcore::ItemPropertyArtistOrderSection(v5);
      }
      else
      {
        uint64_t v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
        if (v6 == a2)
        {
          return mlcore::ItemPropertyComposerOrderSection(v6);
        }
        else
        {
          uint64_t v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
          if (v7 == a2)
          {
            return mlcore::ItemPropertyGenreOrderSection(v7);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::representativeItemPersistentIDProperty()
{
  return 0;
}

void *mlcore::TypedEntityClass<mlcore::Movie>::databaseTablesToInsertInto@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *uint64_t result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

void *mlcore::TypedEntityClass<mlcore::Movie>::databaseTablesToDeleteFrom@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  uint64_t v3 = *(void *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  uint64_t v4 = *(void *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  uint64_t v5 = *(void *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  uint64_t v6 = *(void *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  uint64_t v7 = *(void *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  uint64_t v8 = *(void *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *uint64_t result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::isCloudUpdatable()
{
  return 1;
}

BOOL mlcore::TypedEntityClass<mlcore::Movie>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::entityType()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::Movie>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x100uLL);
  v8[1] = 0;
  void v8[2] = 0;
  *uint64_t v8 = &unk_26C5CB080;
  mlcore::Item::Item((mlcore::Item *)(v8 + 3), a2);
  void v8[3] = &unk_26C5C8470;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 4), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 25), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150E3660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::Movie>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::Movie>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::Movie>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CB080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::Movie>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::Movie::~Movie(mlcore::Movie *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::MoviePropertyIsRental(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::MoviePropertyIsRental(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::MoviePropertyIsRental(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyIsRental(void)::$_0 &&>>);
  }
  return mlcore::MoviePropertyIsRental(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyIsRental(void)::$_0 &&>>()
{
}

void sub_2150E3A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MoviePropertyDateDownloaded(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::MoviePropertyDateDownloaded(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::MoviePropertyDateDownloaded(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::MoviePropertyDateDownloaded(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyDateDownloaded(void)::$_0 &&>>()
{
}

void sub_2150E3D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::Movie::Movie(mlcore::Movie *this, uint64_t a2)
{
  mlcore::Item::Item(this, a2);
  *char v2 = &unk_26C5C8470;
}

{
  void *v2;

  mlcore::Item::Item(this, a2);
  *char v2 = &unk_26C5C8470;
}

void mediaplatform::UnicodeTokenizer::~UnicodeTokenizer(mediaplatform::UnicodeTokenizer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C5BECB8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<mediaplatform::UnicodeTokenizer::Context>::operator()[abi:ne180100]();
  }
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C5BECB8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<mediaplatform::UnicodeTokenizer::Context>::operator()[abi:ne180100]();
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C5BECB8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<mediaplatform::UnicodeTokenizer::Context>::operator()[abi:ne180100]();
  }
}

void std::default_delete<mediaplatform::UnicodeTokenizer::Context>::operator()[abi:ne180100]()
{
  ubrk_close();
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::UnicodeTokenizer::UnicodeTokenizer(void *a1)
{
  *a1 = &unk_26C5BECB8;
  operator new();
}

void sub_2150E4024(_Unwind_Exception *a1)
{
  MEMORY[0x2166B26F0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void mediaplatform::UnicodeTokenizer::tokenize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v22 = 0;
  v20[0] = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  mediaplatform::StringToUCharString(a2, &__dst);
  *(_OWORD *)std::string v20 = __dst;
  unint64_t v21 = v19;
  ubrk_setText();
  int v4 = 0;
  while (1)
  {
    int v5 = v4;
    int v4 = ubrk_next();
    int RuleStatus = ubrk_getRuleStatus();
    if (v4 == -1) {
      break;
    }
    if (RuleStatus)
    {
      uint64_t v7 = v5;
      if (SHIBYTE(v21) < 0)
      {
        uint64_t v8 = v20[1];
        if (v20[1] < (void *)v5) {
LABEL_30:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        unint64_t v9 = (void **)v20[0];
      }
      else
      {
        uint64_t v8 = (void *)HIBYTE(v21);
        if (HIBYTE(v21) < (unint64_t)v5) {
          goto LABEL_30;
        }
        unint64_t v9 = v20;
      }
      unint64_t v10 = (unint64_t)v8 - v5;
      if (v10 >= v4 - v5) {
        unint64_t v11 = v4 - v5;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v11 >= 0xB)
      {
        uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 4;
        if ((v11 | 3) != 0xB) {
          uint64_t v13 = v11 | 3;
        }
        p_dst = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v13 + 1);
        *((void *)&__dst + 1) = v11;
        unint64_t v19 = v14 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
LABEL_19:
        memmove(p_dst, (char *)v9 + 2 * v7, 2 * v11);
        goto LABEL_20;
      }
      HIBYTE(v19) = v11;
      p_dst = &__dst;
      if (v11) {
        goto LABEL_19;
      }
LABEL_20:
      *((_WORD *)p_dst + v11) = 0;
      mediaplatform::UCharStringToString((uint64_t)&__dst, __p);
      uint64_t v15 = *(void *)(a3 + 24);
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v15 + 48))(v15, __p);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete((void *)__dst);
      }
    }
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
}

void sub_2150E4290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *mediaplatform::UnicodeTokenizer::allTokens@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v4[4] = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4[0] = &unk_26C5BF530;
  v4[1] = a3;
  uint64_t v4[3] = v4;
  mediaplatform::UnicodeTokenizer::tokenize(a1, a2, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v4);
}

void sub_2150E4384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13mediaplatform16UnicodeTokenizer9allTokensERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::vector<std::string>::pointer std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 >= *(void *)(v2 + 16))
  {
    std::vector<std::string>::pointer result = std::vector<std::string>::__push_back_slow_path<std::string const&>(*(std::vector<std::string> **)(a1 + 8), (long long *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(v2 + 8), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    std::vector<std::string>::pointer result = (std::vector<std::string>::pointer)(v3 + 24);
    *(void *)(v2 + 8) = v3 + 24;
  }
  *(void *)(v2 + 8) = result;
  return result;
}

void sub_2150E44E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5BF530;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  std::vector<std::string>::pointer result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *std::vector<std::string>::pointer result = &unk_26C5BF530;
  result[1] = v3;
  return result;
}

void std::__function::__func<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0,std::allocator<mediaplatform::UnicodeTokenizer::allTokens(std::string const&)::$_0>,void ()(std::string const&)>::~__func()
{
}

mlcore::ArtworkTable *mlcore::ArtworkTable::ArtworkTable(mlcore::ArtworkTable *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__s, "artwork");
  std::string::basic_string[abi:ne180100]<0>(v40, "artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v38, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v42, (uint64_t)v40, (uint64_t)v38);
  std::string::basic_string[abi:ne180100]<0>(v32, "artwork_source_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v34, (uint64_t)v32, 0);
  std::string::basic_string[abi:ne180100]<0>(v25, "relative_path");
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v27, (uint64_t)v25, (uint64_t)v23);
  std::string::basic_string[abi:ne180100]<0>(v17, "artwork_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v19, (uint64_t)v17, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "interest_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v11, (uint64_t)__p);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v73, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = __s;
  }
  char v68 = &unk_26C5C3AF0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = v43;
  }
  int v70 = v44;
  char v68 = &unk_26C5C3818;
  char v71 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v72, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v72 = v46;
  }
  std::string v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v35;
  }
  int v66 = v36;
  std::string v64 = &unk_26C5C3858;
  uint64_t v67 = v37;
  std::string v59 = &unk_26C5C3AF0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v28;
  }
  int v61 = v29;
  std::string v59 = &unk_26C5C3818;
  char v62 = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v63, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string v63 = v31;
  }
  uint64_t v55 = &unk_26C5C3AF0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v56, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v56 = v20;
  }
  int v57 = v21;
  uint64_t v55 = &unk_26C5C3858;
  uint64_t v58 = v22;
  std::string v48 = &unk_26C5C3AF0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v12;
  }
  int v50 = v13;
  std::string v48 = &unk_26C5C37F8;
  char v51 = v14;
  mediaplatform::Data::Data((mediaplatform::Data *)&v52, __src, __n, 1);
  *(void *)this = &unk_26C5BED18;
  uint64_t v2 = (std::string *)((char *)this + 8);
  int v7 = SHIBYTE(v73.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *((void *)this + 3) = *((void *)&v73.__r_.__value_.__l + 2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26C5C3130;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v94 = &unk_26C5C3AF0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v95, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string v95 = v69;
  }
  int v96 = v70;
  int v94 = &unk_26C5C3818;
  char v97 = v71;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v98, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  }
  else {
    std::string v98 = v72;
  }
  int v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v91, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = v65;
  }
  int v92 = v66;
  int v90 = &unk_26C5C3858;
  uint64_t v93 = v67;
  int v85 = &unk_26C5C3AF0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v86, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v86 = v60;
  }
  int v87 = v61;
  int v85 = &unk_26C5C3818;
  char v88 = v62;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v89, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v89 = v63;
  }
  std::string v81 = &unk_26C5C3AF0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v82, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v82 = v56;
  }
  int v83 = v57;
  std::string v81 = &unk_26C5C3858;
  uint64_t v84 = v58;
  int v74 = &unk_26C5C3AF0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = v49;
  }
  int v76 = v50;
  int v74 = &unk_26C5C37F8;
  char v77 = v51;
  mediaplatform::Data::Data((mediaplatform::Data *)&v78, v54, v53, 1);
  int v115 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v116, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v116 = v91;
  }
  int v117 = v92;
  int v115 = &unk_26C5C3858;
  uint64_t v118 = v93;
  int v110 = &unk_26C5C3AF0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v111, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v111 = v86;
  }
  int v112 = v87;
  int v110 = &unk_26C5C3818;
  char v113 = v88;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v114, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else {
    std::string v114 = v89;
  }
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v82;
  }
  int v108 = v83;
  std::string v106 = &unk_26C5C3858;
  uint64_t v109 = v84;
  std::string v99 = &unk_26C5C3AF0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v75;
  }
  int v101 = v76;
  std::string v99 = &unk_26C5C37F8;
  char v102 = v77;
  mediaplatform::Data::Data((mediaplatform::Data *)&v103, v80, v79, 1);
  int v130 = &unk_26C5C3AF0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = v111;
  }
  int v132 = v112;
  int v130 = &unk_26C5C3818;
  char v133 = v113;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v134, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  }
  else {
    std::string v134 = v114;
  }
  uint64_t v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v107;
  }
  int v128 = v108;
  uint64_t v126 = &unk_26C5C3858;
  uint64_t v129 = v109;
  std::string v119 = &unk_26C5C3AF0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v120, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else {
    std::string v120 = v100;
  }
  int v121 = v101;
  std::string v119 = &unk_26C5C37F8;
  char v122 = v102;
  mediaplatform::Data::Data((mediaplatform::Data *)&v123, v105, v104, 1);
  int v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v141, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else {
    std::string v141 = v127;
  }
  int v142 = v128;
  int v140 = &unk_26C5C3858;
  uint64_t v143 = v129;
  int v135 = &unk_26C5C3AF0;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v136, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v136 = v120;
  }
  int v137 = v121;
  int v135 = &unk_26C5C37F8;
  char v138 = v122;
  mediaplatform::Data::Data((mediaplatform::Data *)&v139, v125, v124, 1);
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v140, (uint64_t)&v135);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v135);
  int v140 = &unk_26C5C3AF0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  *((void *)this + 26) = &unk_26C5C3AF0;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)this + 9, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  }
  else {
    *((std::string *)this + 9) = v131;
  }
  *((_DWORD *)this + 60) = v132;
  *((void *)this + 26) = &unk_26C5C3818;
  *((unsigned char *)this + 244) = v133;
  uint64_t v3 = (std::string *)((char *)this + 248);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *((void *)this + 33) = *((void *)&v134.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v119);
  uint64_t v126 = &unk_26C5C3AF0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v130);
  *((void *)this + 34) = &unk_26C5C3AF0;
  long long v4 = (std::string *)((char *)this + 280);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *((void *)this + 37) = *((void *)&v116.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v117;
  *((void *)this + 34) = &unk_26C5C3858;
  *(void *)((char *)this + 308) = v118;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v99);
  std::string v106 = &unk_26C5C3AF0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v110);
  int v115 = &unk_26C5C3AF0;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  *((void *)this + 40) = &unk_26C5C3AF0;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)((char *)this + 328) = v95;
  }
  *((_DWORD *)this + 88) = v96;
  *((void *)this + 40) = &unk_26C5C3818;
  *((unsigned char *)this + 356) = v97;
  int v5 = (std::string *)((char *)this + 360);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
    *((void *)this + 47) = *((void *)&v98.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v74);
  std::string v81 = &unk_26C5C3AF0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v85);
  int v90 = &unk_26C5C3AF0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v94);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v48);
  uint64_t v55 = &unk_26C5C3AF0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v59);
  std::string v64 = &unk_26C5C3AF0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v68);
  if (v7 < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C3C60;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 384, (uint64_t)v42);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 448, (uint64_t)&v34);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 496, (uint64_t)v27);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>((uint64_t)this + 560, (uint64_t)&v19);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>((uint64_t)this + 608, (uint64_t)v11);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v19 = &unk_26C5C3AF0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v27);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  std::string v34 = &unk_26C5C3AF0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v42);
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C5C49C0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "UNIQUE (artwork_token, artwork_source_type)");
  std::string::operator=((std::string *)((char *)this + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2150E5774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, unint64_t a18, unint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  *(void *)(v79 + 320) = v82;
  if (*(char *)(v79 + 351) < 0) {
    operator delete(*v80);
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(v81);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x3B0]);
  STACK[0x400] = a16;
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x430]);
  STACK[0x470] = a17;
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x4A0]);
  if (*(char *)(v79 + 79) < 0) {
    operator delete(*a13);
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v79);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x260]);
  STACK[0x2B0] = a18;
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2E0]);
  STACK[0x320] = a19;
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a29);
  if (a28 < 0) {
    operator delete(a23);
  }
  a45 = &unk_26C5C3AF0;
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a66);
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  a74 = &unk_26C5C3AF0;
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x208]);
  if (a78 < 0) {
    operator delete(a77);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  _Unwind_Resume(a1);
}

void sub_2150E5C48()
{
  STACK[0x5D0] = v0;
  if (SLOBYTE(STACK[0x5EF]) < 0) {
    operator delete((void *)STACK[0x5D8]);
  }
  JUMPOUT(0x2150E5A30);
}

void sub_2150E5C64()
{
  STACK[0x4E0] = v0;
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  JUMPOUT(0x2150E5A54);
}

void sub_2150E5C80()
{
  STACK[0x3B0] = v0;
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  JUMPOUT(0x2150E5A94);
}

void sub_2150E5C9C()
{
  STACK[0x260] = v0;
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  JUMPOUT(0x2150E5AF8);
}

void sub_2150E5CB8()
{
}

void sub_2150E5CC0()
{
}

void sub_2150E5CC8()
{
}

void sub_2150E5CD0()
{
}

void sub_2150E5CD8()
{
}

void sub_2150E5CE0()
{
}

void sub_2150E5CE8()
{
}

void sub_2150E5CF0()
{
}

void sub_2150E5CF8()
{
}

void sub_2150E5D00()
{
}

void sub_2150E5D08()
{
}

void sub_2150E5D10()
{
}

void mlcore::MediaTable<std::string,int,std::string,int,mediaplatform::Data>::~MediaTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3C60;
  uint64_t v2 = a1 + 384;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 608);
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 496);
  *(void *)(a1 + 448) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(void *)a1 = &unk_26C5C3130;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t vars8;

  mlcore::MediaTable<std::string,int,std::string,int,mediaplatform::Data>::~MediaTable(a1);
  JUMPOUT(0x2166B26F0);
}

void mediaplatform::DatabaseTable<std::string,int,std::string,int,mediaplatform::Data>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  int v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150E5F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,int,std::string,int,mediaplatform::Data>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 160);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 80);
}

void sub_2150E5F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<std::string,int,std::string,int,mediaplatform::Data>::columnCount()
{
  return 5;
}

void mediaplatform::DatabaseTable<std::string,int,std::string,int,mediaplatform::Data>::~DatabaseTable(uint64_t a1)
{
  *(void *)a1 = &unk_26C5C3130;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3130;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26C5C3130;
  uint64_t v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  *(void *)(a1 + 160) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::ArtworkTable::~ArtworkTable(mlcore::ArtworkTable *this)
{
  mlcore::MediaTable<std::string,int,std::string,int,mediaplatform::Data>::~MediaTable((uint64_t)this);
  JUMPOUT(0x2166B26F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(void *)(a1 + 192) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(void *)(a1 + 80) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mlcore::ArtworkTable::artworkTokenColumn(mlcore::ArtworkTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(void *)(a2 + 24) = *((void *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 420);
  int v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(void *)(a2 + 56) = *((void *)this + 55);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150E64CC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ArtworkTable::artworkSourceTypeColumn(mlcore::ArtworkTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((void *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(void *)(a2 + 24) = *((void *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(void *)(a2 + 36) = *(void *)((char *)this + 484);
  *(void *)a2 = &unk_26C5C47C8;
}

void mlcore::ArtworkTable::relativePathColumn(mlcore::ArtworkTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((void *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(void *)(a2 + 24) = *((void *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(void *)a2 = &unk_26C5C3818;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 532);
  int v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 559) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 67), *((void *)this + 68));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 536);
    *(void *)(a2 + 56) = *((void *)this + 69);
  }
  *(void *)a2 = &unk_26C5C4788;
}

void sub_2150E667C(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ArtworkTable::artworkTypeColumn(mlcore::ArtworkTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 71), *((void *)this + 72));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(void *)(a2 + 24) = *((void *)this + 73);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 148);
  *(void *)(a2 + 36) = *(void *)((char *)this + 596);
  *(void *)a2 = &unk_26C5C47C8;
}

mediaplatform::Data *mlcore::ArtworkTable::interestDataColumn@<X0>(mlcore::ArtworkTable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C5C3AF0;
  long long v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((void *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(void *)(a2 + 24) = *((void *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(void *)a2 = &unk_26C5C37F8;
  *(unsigned char *)(a2 + 36) = *((unsigned char *)this + 644);
  std::vector<std::string>::pointer result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), *((const void **)this + 84), *((void *)this + 82), 1);
  *(void *)a2 = &unk_26C5C4768;
  return result;
}

void sub_2150E6818(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::Library::identifier(mlcore::Library *this)
{
  return (uint64_t)this + 8;
}

uint64_t std::__shared_ptr_emplace<mlcore::DeviceLibrary>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<mlcore::DeviceLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::DeviceLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::Library::contentBundle(mlcore::Library *this)
{
  return (uint64_t)this + 32;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::persistentIDProperty()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::BestArtworkToken>::databaseTablesToInsertInto(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::BestArtworkToken>::databaseTablesToDeleteFrom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::databaseTable()
{
  return *(void *)mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance();
}

uint64_t std::__shared_ptr_emplace<mlcore::BestArtworkTokenTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::BestArtworkTokenTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAD00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::BestArtworkTokenTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CAD00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::isCloudUpdatable()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::BestArtworkToken>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::entityType()
{
  return 0xFFFFFFFFLL;
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

__n128 mlcore::TypedEntityClass<mlcore::BestArtworkToken>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C5CA910;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((void *)v8 + 4) = &unk_26C5C4EE8;
  *((void *)v8 + 30) = &unk_26C5C4F10;
  *((void *)v8 + 31) = a2;
  *((void *)v8 + 3) = &unk_26C5C5F08;
  v11[0] = (unint64_t)&unk_26C5C8E68;
  v11[3] = (unint64_t)v11;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100](v11);
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)(v8 + 200), v11[0], v11);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  v9[3] = a2;
  *a4 = result;
  return result;
}

void sub_2150E6C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mlcore::ModelPropertyBase *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::BestArtworkToken>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<mlcore::BestArtworkToken>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2166B26F0);
}

void std::__shared_ptr_emplace<mlcore::BestArtworkToken>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C5CA910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::description(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void mlcore::TypedEntityClass<mlcore::BestArtworkToken>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x2166B26F0);
}

void mlcore::BestArtworkToken::~BestArtworkToken(mlcore::BestArtworkToken *this)
{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
  JUMPOUT(0x2166B26F0);
}

{
  *(void *)this = &unk_26C5C8588;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((void *)this + 1);
}

uint64_t mlcore::BestArtworkTokenPropertyEntityPersistentID(mlcore *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&mlcore::BestArtworkTokenPropertyEntityPersistentID(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&mlcore::BestArtworkTokenPropertyEntityPersistentID(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyEntityPersistentID(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyEntityPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyEntityPersistentID(void)::$_0 &&>>()
{
}

void sub_2150E7018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::BestArtworkToken::entityPersistentID(mlcore::BestArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyEntityPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

void *mlcore::BestArtworkToken::setEntityPersistentID(mlcore::BestArtworkToken *this, uint64_t a2)
{
  unint64_t v5 = mlcore::BestArtworkTokenPropertyEntityPersistentID(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::BestArtworkToken::entityType(mlcore::BestArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyEntityType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::BestArtworkToken::setEntityType(mlcore::BestArtworkToken *this, int a2)
{
  unint64_t v5 = mlcore::BestArtworkTokenPropertyEntityType(this);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)this + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::BestArtworkToken::artworkType(mlcore::BestArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyArtworkType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::BestArtworkToken::setArtworkType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::BestArtworkTokenPropertyArtworkType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

void mlcore::BestArtworkToken::availableArtworkToken(mlcore::BestArtworkToken *this@<X0>, std::string *a2@<X8>)
{
  long long v4 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::BestArtworkToken::setAvailableArtworkToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::BestArtworkTokenPropertyAvailableArtworkToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::BestArtworkToken::fetchableArtworkToken(mlcore::BestArtworkToken *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::BestArtworkToken::setFetchableArtworkToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4 = mlcore::BestArtworkTokenPropertyFetchableArtworkToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::BestArtworkToken::fetchableArtworkSourceType(mlcore::BestArtworkToken *this)
{
  char v2 = (mlcore::ModelPropertyBase *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

void *mlcore::BestArtworkToken::setFetchableArtworkSourceType(mlcore *a1, int a2)
{
  unint64_t v5 = mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(a1);
  __n128 result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

mlcore::LocalizedSectionsInfo *mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo(mlcore::LocalizedSectionsInfo *this, const mediaplatform::FilePath *a2)
{
  *((_OWORD *)this + 3) = 0u;
  std::string v34 = (char *)this + 48;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*((void *)a2 + 2) == *((void *)a2 + 1)) {
    return this;
  }
  mediaplatform::PropertyList::PropertyList((mediaplatform::PropertyList *)&v45, a2);
  std::string::basic_string[abi:ne180100]<0>(&v48, "SectionHeaders");
  mediaplatform::PropertyList::_cfValueForKey((uint64_t)&v45, (uint64_t)&v48, __p);
  uint64_t v3 = __p[0];
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!v3 || CFGetTypeID(v3) != TypeID)
  {
    theArray[0] = 0;
    mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)__p);
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not an array");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
  }
  CFRetain(v3);
  theArray[0] = (CFArrayRef)v3;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)__p);
  memset(v44, 0, 24);
  CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray[0], v6);
      unint64_t v9 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        v36[0] = v9;
        CFRetain(v9);
      }
      else
      {
        v36[0] = 0;
      }
      char v47 = v9;
      mediaplatform::PlistValueGetter<mediaplatform::PropertyList,void>::value(v41, v9);
      uint64_t v10 = *((void *)&v44[0] + 1);
      if (*((void *)&v44[0] + 1) >= *(void *)&v44[1])
      {
        uint64_t v12 = (uint64_t)(*((void *)&v44[0] + 1) - *(void *)&v44[0]) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = (uint64_t)(*(void *)&v44[1] - *(void *)&v44[0]) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if (*(void *)&v44[1] - *(void *)&v44[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        std::string v40 = &v44[1];
        if (v14)
        {
          if (v14 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v15 = (char *)operator new(16 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        __p[0] = v15;
        __p[1] = &v15[16 * v12];
        __p[2] = __p[1];
        __p[3] = &v15[16 * v14];
        mediaplatform::PropertyList::PropertyList((uint64_t)__p[1], (uint64_t)v41);
        uint64_t v16 = 0;
        char v17 = (char *)__p[1];
        __p[2] = (char *)__p[2] + 16;
        long long v18 = v44[0];
        while (*((void *)&v18 + 1) + v16 != (void)v18)
        {
          *(void *)&v17[v16 - 16] = &unk_26C5BEA78;
          *(void *)&v17[v16 - 8] = CFDictionaryCreateMutableCopy(v7, 0, *(CFDictionaryRef *)(*((void *)&v18 + 1) + v16 - 8));
          v16 -= 16;
        }
        unint64_t v19 = *(void **)&v44[1];
        long long v20 = *(_OWORD *)&__p[2];
        std::string v35 = __p[2];
        long long v21 = v44[0];
        *(void *)&v44[0] = &v17[v16];
        *(_OWORD *)&__p[1] = v21;
        *(_OWORD *)((char *)v44 + 8) = v20;
        __p[3] = v19;
        __p[0] = (void *)v21;
        std::__split_buffer<mediaplatform::PropertyList>::~__split_buffer((uint64_t)__p);
        unint64_t v11 = v35;
      }
      else
      {
        mediaplatform::PropertyList::PropertyList(*((uint64_t *)&v44[0] + 1), (uint64_t)v41);
        unint64_t v11 = (void *)(v10 + 16);
      }
      *((void *)&v44[0] + 1) = v11;
      v41[0] = &unk_26C5BEA78;
      mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)&v41[1]);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(&v47);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)v36);
      ++v6;
    }
    while (v6 != Count);
  }
  mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer((const void **)theArray);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  *(_OWORD *)char v41 = 0u;
  long long v42 = 0u;
  int v43 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "LocalizedSectionHeaders");
  BOOL v22 = mediaplatform::PropertyList::keyExists((uint64_t)&v45, (const char *)__p);
  BOOL v23 = v22;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v23) {
      goto LABEL_36;
    }
  }
  else if (!v22)
  {
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "LocalizedSectionHeaders");
  mediaplatform::PropertyList::dictionaryValueForKey<std::string,std::string>((uint64_t)__p, (uint64_t)&v45, (uint64_t)&v48);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign((uint64_t)v41, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((void *)__p[2]);
  char v24 = __p[0];
  __p[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
LABEL_36:
  if (*(void *)&v44[0] != *((void *)&v44[0] + 1)) {
    mlcore::LocalizedSectionHeader::LocalizedSectionHeader((uint64_t)__p, *(uint64_t *)&v44[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SectionIndices");
  mediaplatform::PropertyList::arrayValueForKey<std::string>((uint64_t)theArray, (uint64_t)&v45, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(__p, 0, sizeof(__p));
  LODWORD(v40) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v48, "LocalizedSectionIndices");
  BOOL v25 = mediaplatform::PropertyList::keyExists((uint64_t)&v45, (const char *)&v48);
  BOOL v26 = v25;
  if (SHIBYTE(v49) < 0)
  {
    operator delete((void *)v48);
    if (!v26) {
      goto LABEL_48;
    }
  }
  else if (!v25)
  {
    goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "LocalizedSectionIndices");
  mediaplatform::PropertyList::dictionaryValueForKey<std::string,std::string>((uint64_t)&v48, (uint64_t)&v45, (uint64_t)v36);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign((uint64_t)__p, (uint64_t *)&v48);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v49);
  std::string v27 = (void *)v48;
  *(void *)&long long v48 = 0;
  if (v27) {
    operator delete(v27);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
LABEL_48:
  mlcore::LocalizedSectionsInfo::_initializeLocalizedIndices((std::vector<std::string> *)this, (uint64_t *)theArray, __p);
  std::string::basic_string[abi:ne180100]<0>(&v48, "NameTransform");
  BOOL v28 = mediaplatform::PropertyList::keyExists((uint64_t)&v45, (const char *)&v48);
  BOOL v29 = v28;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if (!v28) {
      goto LABEL_56;
    }
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(v36, "NameTransform");
    mediaplatform::PropertyList::valueForKey<std::string>(&v48, (uint64_t)&v45, (uint64_t)v36);
    if (*((char *)this + 71) < 0) {
      operator delete(*(void **)v34);
    }
    *(_OWORD *)std::string v34 = v48;
    *((void *)v34 + 2) = v49;
    HIBYTE(v49) = 0;
    LOBYTE(v48) = 0;
    if (v37 < 0) {
      operator delete(v36[0]);
    }
    goto LABEL_56;
  }
  operator delete((void *)v48);
  if (v29) {
    goto LABEL_52;
  }
LABEL_56:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((void *)__p[2]);
  char v30 = __p[0];
  __p[0] = 0;
  if (v30) {
    operator delete(v30);
  }
  __p[0] = theArray;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((void *)v42);
  std::string v31 = v41[0];
  v41[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  __p[0] = v44;
  std::vector<mediaplatform::PropertyList>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  char v45 = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v46);
  return this;
}

void sub_2150E7BBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2150E7AA4);
}

void sub_2150E7BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a24);
  a24 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a35);
  a24 = (char *)(v36 - 192);
  std::vector<mediaplatform::PropertyList>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  *(void *)(v36 - 160) = &unk_26C5BEA78;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)(v36 - 152));
  if (*(char *)(v35 + 71) < 0) {
    operator delete(*a10);
  }
  a35 = v35 + 24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = v35;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::dictionaryValueForKey<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mediaplatform::PropertyList::_cfValueForKey(a2, a3, v57);
  unint64_t v5 = v57[0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v5)
  {
    if (CFGetTypeID(v5) == TypeID) {
      CFRetain(v5);
    }
    else {
      unint64_t v5 = 0;
    }
  }
  CFDictionaryRef theDict = (CFDictionaryRef)v5;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(v57);
  if (!v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not a dictionary");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26422EA70, MEMORY[0x263F8C080]);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v5);
  keys = (void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  uint64_t v8 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys, v8);
  if (Count >= 1)
  {
    uint64_t v9 = 0;
    char v47 = (void *)(a1 + 16);
    while (1)
    {
      uint64_t v10 = keys[v9];
      if (v10) {
        CFRetain(keys[v9]);
      }
      CFTypeRef cf = v10;
      CFStringRef v11 = (const __CFString *)v8[v9];
      if (v11)
      {
        CFRetain(v8[v9]);
        CFStringRef v54 = v11;
        CFRetain(v11);
      }
      else
      {
        CFStringRef v54 = 0;
      }
      CFStringRef v51 = v11;
      mediaplatform::PlistValueGetter<std::string,void>::value(v52, v11);
      CFStringRef v12 = (const __CFString *)cf;
      if (cf) {
        CFRetain(cf);
      }
      CFStringRef v48 = v12;
      mediaplatform::PlistValueGetter<std::string,void>::value(__p, v12);
      unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      unint64_t v14 = v13;
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15)
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        unint64_t v17 = v16.u32[0];
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v3 = v13;
          if (v13 >= v15) {
            unint64_t v3 = v13 % v15;
          }
        }
        else
        {
          unint64_t v3 = (v15 - 1) & v13;
        }
        long long v18 = *(const void ***)(*(void *)a1 + 8 * v3);
        if (v18)
        {
          unint64_t v19 = (char *)*v18;
          if (*v18)
          {
            do
            {
              unint64_t v20 = *((void *)v19 + 1);
              if (v20 == v14)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v19 + 16, (unsigned __int8 *)__p))
                {
                  goto LABEL_87;
                }
              }
              else
              {
                if (v17 > 1)
                {
                  if (v20 >= v15) {
                    v20 %= v15;
                  }
                }
                else
                {
                  v20 &= v15 - 1;
                }
                if (v20 != v3) {
                  break;
                }
              }
              unint64_t v19 = *(char **)v19;
            }
            while (v19);
          }
        }
      }
      long long v21 = operator new(0x40uLL);
      v57[0] = v21;
      v57[1] = (const void *)(a1 + 16);
      *long long v21 = 0;
      v21[1] = v14;
      *((_OWORD *)v21 + 1) = *(_OWORD *)__p;
      uint64_t v22 = v50;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v50 = 0;
      v21[4] = v22;
      v21[5] = 0;
      v21[6] = 0;
      v21[7] = 0;
      char v58 = 1;
      float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v24 = *(float *)(a1 + 32);
      if (!v15 || (float)(v24 * (float)v15) < v23) {
        break;
      }
LABEL_77:
      std::string v40 = *(void **)(*(void *)a1 + 8 * v3);
      unint64_t v19 = (char *)v57[0];
      if (v40)
      {
        *(void *)v57[0] = *v40;
      }
      else
      {
        *(void *)v57[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v19;
        *(void *)(*(void *)a1 + 8 * v3) = v47;
        if (!*(void *)v19) {
          goto LABEL_86;
        }
        unint64_t v41 = *(void *)(*(void *)v19 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v41 >= v15) {
            v41 %= v15;
          }
        }
        else
        {
          v41 &= v15 - 1;
        }
        std::string v40 = (void *)(*(void *)a1 + 8 * v41);
      }
      *std::string v40 = v19;
LABEL_86:
      v57[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v57);
LABEL_87:
      long long v42 = (void **)(v19 + 40);
      if (v19[63] < 0) {
        operator delete(*v42);
      }
      *(_OWORD *)long long v42 = *(_OWORD *)v52;
      *((void *)v19 + 7) = v53;
      HIBYTE(v53) = 0;
      LOBYTE(v52[0]) = 0;
      if (SHIBYTE(v50) < 0) {
        operator delete(__p[0]);
      }
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v48);
      if (SHIBYTE(v53) < 0) {
        operator delete(v52[0]);
      }
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v51);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v54);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(&cf);
      if (++v9 == Count) {
        goto LABEL_104;
      }
    }
    BOOL v25 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3) {
      BOOL v25 = 1;
    }
    unint64_t v26 = v25 | (2 * v15);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v15) {
      goto LABEL_43;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v15 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v29 = operator new(8 * *(void *)&prime);
          char v30 = *(void **)a1;
          *(void *)a1 = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          char v32 = (void *)*v47;
          if (*v47)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v33) = v47;
            std::string v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v39))
                  {
                    *(void *)(*(void *)a1 + 8 * v39) = v32;
                    goto LABEL_68;
                  }
                  void *v32 = *v38;
                  void *v38 = **(void **)(*(void *)a1 + 8 * v39);
                  **(void **)(*(void *)a1 + 8 * v39) = v38;
                  std::string v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_68:
                char v32 = v38;
                std::string v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_72;
        }
        int v43 = *(void **)a1;
        *(void *)a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v15 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_72:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v3 = v14 % v15;
      }
      else {
        unint64_t v3 = v14;
      }
    }
    else
    {
      unint64_t v3 = (v15 - 1) & v14;
    }
    goto LABEL_77;
  }
LABEL_104:
  free(keys);
  free(v8);
  return mediaplatform::CFRetainedPointer<__CFDictionary const*>::~CFRetainedPointer((const void **)&theDict);
}

void sub_2150E84BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,const void *a31,__int16 a32,char a33,char a34)
{
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  CFAllocatorRef v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *uint64_t v9 = 0;
    v9[1] = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*(void **)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

std::string *std::allocator<mlcore::LocalizedSectionHeader>::construct[abi:ne180100]<mlcore::LocalizedSectionHeader,mlcore::LocalizedSectionHeader const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (std::string *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  v3[1].__r_.__value_.__l.__size_ = 0;
  v3[1].__r_.__value_.__r.__words[2] = 0;
  unint64_t v3 = (std::string *)((char *)v3 + 32);
  v3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
}

void sub_2150E8730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSectionHeader::~LocalizedSectionHeader(mlcore::LocalizedSectionHeader *this)
{
  char v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  char v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<mediaplatform::PropertyList>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      CFAllocatorRef v7 = v4 - 16;
      uint64_t v8 = v4 - 16;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        CFAllocatorRef v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<mlcore::LocalizedSectionHeader>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    unint64_t v5 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    unint64_t v5 = (void **)(i - 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<mediaplatform::PropertyList>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t mlcore::LocalizedSectionsInfo::localizedSectionIndices(mlcore::LocalizedSectionsInfo *this)
{
  return (uint64_t)this + 24;
}

uint64_t mlcore::LocalizedSectionsInfo::nameTransform(mlcore::LocalizedSectionsInfo *this)
{
  return (uint64_t)this + 48;
}

uint64_t mlcore::EntityRevision::EntityRevision(uint64_t result, void *a2, int a3, int a4)
{
  *(_DWORD *)__n128 result = 0;
  uint64_t v4 = a2[1];
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

{
  uint64_t v4;

  *(_DWORD *)__n128 result = 0;
  uint64_t v4 = a2[1];
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t mlcore::EntityRevision::entity@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t mlcore::EntityRevision::type(mlcore::EntityRevision *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t mlcore::EntityRevision::deletion(mlcore::EntityRevision *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t mlcore::EntityRevision::revisionNumber(mlcore::EntityRevision *this)
{
  return *(unsigned int *)this;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::targetColumnExpression(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (long long *)(a1 + 8);
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  unint64_t v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2150E8B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::columnNames(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1904);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1840);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1776);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1728);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1680);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 1632);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1584);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1520);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 1392);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1344);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1296);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1248);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1200);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1152);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1104);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1056);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1008);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 944);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 880);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 816);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 688);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 624);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 576);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 528);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_2150E8D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::columnCount()
{
  return 34;
}

void mlcore::ItemExtraTable::~ItemExtraTable(mlcore::ItemExtraTable *this)
{
  *(void *)this = &unk_26C5C3F00;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 1952);
  *(void *)this = &unk_26C5C33D0;
  *((void *)this + 238) = &unk_26C5C3AF0;
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x2166B26F0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C5C3F00;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 1952);
  *(void *)this = &unk_26C5C33D0;
  *((void *)this + 238) = &unk_26C5C3AF0;
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  *(void *)(a1 + 1824) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1855) < 0) {
    operator delete(*(void **)(a1 + 1832));
  }
  *(void *)(a1 + 1776) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1807) < 0) {
    operator delete(*(void **)(a1 + 1784));
  }
  *(void *)(a1 + 1728) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1759) < 0) {
    operator delete(*(void **)(a1 + 1736));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1664);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1600);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1536);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1472);
  *(void *)(a1 + 1424) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1455) < 0) {
    operator delete(*(void **)(a1 + 1432));
  }
  *(void *)(a1 + 1376) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1407) < 0) {
    operator delete(*(void **)(a1 + 1384));
  }
  *(void *)(a1 + 1328) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1264);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1200);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1136);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1072);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1008);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 944);
  *(void *)(a1 + 896) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*(void **)(a1 + 904));
  }
  *(void *)(a1 + 848) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  *(void *)(a1 + 800) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  *(void *)(a1 + 752) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  *(void *)(a1 + 704) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  *(void *)(a1 + 656) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  *(void *)(a1 + 608) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  *(void *)(a1 + 560) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 480);
  *(void *)(a1 + 432) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 368);
  *(void *)(a1 + 320) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  *(void *)(a1 + 272) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  *(void *)(a1 + 224) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 176) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(void *)a1 = &unk_26C5C3AF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  *(void *)(a1 + 1648) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1679) < 0) {
    operator delete(*(void **)(a1 + 1656));
  }
  *(void *)(a1 + 1600) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1631) < 0) {
    operator delete(*(void **)(a1 + 1608));
  }
  *(void *)(a1 + 1552) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1583) < 0) {
    operator delete(*(void **)(a1 + 1560));
  }
  *(void *)(a1 + 1504) = &unk_26C5C3AF0;
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}